
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 69 9a 00 00       	call   c0009a89 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 89 11 02 00       	call   c00211ae <_init>
c0000025:	c3                   	ret    
c0000026:	bb 32 1e 02 c0       	mov    ebx,0xc0021e32
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 40 1e 02 c0    	cmp    ebx,0xc0021e40
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 5e 02 c0       	mov    eax,0xc0025e58
c0000049:	3d 58 5e 02 c0       	cmp    eax,0xc0025e58
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 5e 02 c0       	push   0xc0025e58
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 5e 02 c0       	mov    eax,0xc0025e58
c0000075:	2d 58 5e 02 c0       	sub    eax,0xc0025e58
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 5e 02 c0       	push   0xc0025e58
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e0 5f 02 c0 00 	cmp    BYTE PTR ds:0xc0025fe0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 48 1e 02 c0       	mov    ebx,0xc0021e48
c00000bb:	81 eb 44 1e 02 c0    	sub    ebx,0xc0021e44
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 44 1e 02 c0       	mov    esi,0xc0021e44
c00000ca:	a1 e4 5f 02 c0       	mov    eax,ds:0xc0025fe4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 e4 5f 02 c0       	mov    ds:0xc0025fe4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 e4 5f 02 c0       	mov    eax,ds:0xc0025fe4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 5e 02 c0       	push   0xc0025e58
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e0 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025fe0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 e8 5f 02 c0       	push   0xc0025fe8
c000012c:	68 58 5e 02 c0       	push   0xc0025e58
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 bc 74 01 00       	call   c0017794 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 a5 c4 00 00       	call   c000c795 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 9a 74 01 00       	call   c0017794 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 63 79 01 00       	call   c0017c7c <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 d6 7f 01 00       	call   c00182f8 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 30 64 02 c0 	lgdtd  ds:0xc0026430
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 3a e2 00 00       	call   c000e751 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 00 60 02 c0       	mov    ds:0xc0026000,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 00 60 02 c0    	mov    DWORD PTR ds:0xc0026000,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 00 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026000
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 60 1e 02 c0 02 	test   BYTE PTR [edx-0x3ffde1a0],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 60 1e 02 c0 01 	test   BYTE PTR [edx-0x3ffde1a0],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 60 1e 02 c0 08 	test   BYTE PTR [edx-0x3ffde1a0],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 60 1e 02 c0 04 	test   BYTE PTR [ebx-0x3ffde1a0],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 60 1e 02 c0 01 	test   BYTE PTR [edx-0x3ffde1a0],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d 20 60 02 c0    	mov    ecx,DWORD PTR ds:0xc0026020
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d 20 60 02 c0    	mov    DWORD PTR ds:0xc0026020,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 24 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fdc]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 24 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9fdc],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d 20 60 02 c0    	mov    DWORD PTR ds:0xc0026020,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 4c 60 02 c0    	cmp    DWORD PTR ds:0xc002604c,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d 5c 60 02 c0    	mov    ecx,DWORD PTR ds:0xc002605c
c0000d6c:	c7 42 0c 54 60 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026054
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 5c 60 02 c0    	mov    DWORD PTR ds:0xc002605c,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 4c 60 02 c0    	mov    DWORD PTR ds:0xc002604c,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 20 60 02 c0 02 	test   BYTE PTR ds:0xc0026020,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 3f 8a 00 00       	call   c000988c <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 81 89 00 00       	call   c000988c <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 6b 89 00 00       	call   c000988c <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 47 89 00 00       	call   c000988c <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d 20 60 02 c0    	mov    edi,DWORD PTR ds:0xc0026020
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 24 60 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9fdc]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 24 60 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9fdc],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 54 60 02 c0 	lea    edx,[eax*8-0x3ffd9fac]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 20 60 02 c0       	mov    eax,0xc0026020
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d 60 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026060
c00010ee:	81 fb 54 60 02 c0    	cmp    ebx,0xc0026054
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d 54 60 02 c0       	cmp    eax,0xc0026054
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d 50 60 02 c0    	cmp    DWORD PTR ds:0xc0026050,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 5c 60 02 c0       	mov    ds:0xc002605c,eax
c000112a:	a3 60 60 02 c0       	mov    ds:0xc0026060,eax
c000112f:	a3 50 60 02 c0       	mov    ds:0xc0026050,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 54 60 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026054
c000113d:	c7 40 0c 54 60 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026054
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 60 60 02 c0       	mov    ds:0xc0026060,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 54 60 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026054
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 18 60 02 c0 	lea    ebp,[edx*4-0x3ffd9fe8]
c000118e:	8b 14 95 20 60 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9fe0]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 20 60 02 c0 	lea    ecx,[edx*4-0x3ffd9fe0]
c00011a9:	8b 14 95 20 60 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9fe0]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd 54 63 02 c0 	or     DWORD PTR [edi*4-0x3ffd9cac],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 54 60 02 c0 	lea    eax,[eax*8-0x3ffd9fac]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d 5c 60 02 c0    	mov    DWORD PTR ds:0xc002605c,ecx
c0001263:	89 0d 60 60 02 c0    	mov    DWORD PTR ds:0xc0026060,ecx
c0001269:	c7 41 08 54 60 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026054
c0001270:	c7 41 0c 54 60 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026054
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd 4c 60 02 c0 	lea    edx,[ecx*8-0x3ffd9fb4]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d 54 63 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9cac]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d 54 63 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9cac]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 4c 60 02 c0 	lea    edx,[eax*4-0x3ffd9fb4]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d 54 63 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9cac],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d 5c 60 02 c0    	mov    DWORD PTR ds:0xc002605c,edi
c0001336:	89 3d 60 60 02 c0    	mov    DWORD PTR ds:0xc0026060,edi
c000133c:	c7 47 08 54 60 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026054
c0001343:	c7 47 0c 54 60 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026054
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d 50 60 02 c0    	mov    DWORD PTR ds:0xc0026050,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 4c 60 02 c0       	mov    eax,ds:0xc002604c
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d 4c 60 02 c0    	mov    DWORD PTR ds:0xc002604c,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba 20 60 02 c0       	mov    edx,0xc0026020
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d 20 60 02 c0 00 	cmp    DWORD PTR ds:0xc0026020,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 20 60 02 c0       	mov    eax,0xc0026020
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d 74 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026374
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 74 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026374,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d 74 63 02 c0    	mov    DWORD PTR ds:0xc0026374,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 4c 60 02 c0    	cmp    DWORD PTR ds:0xc002604c,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d 4c 60 02 c0    	mov    DWORD PTR ds:0xc002604c,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d 20 60 02 c0 00 	cmp    DWORD PTR ds:0xc0026020,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 7c 63 02 c0    	push   DWORD PTR ds:0xc002637c
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 20 60 02 c0 00 	cmp    DWORD PTR ds:0xc0026020,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 7c 63 02 c0       	mov    eax,ds:0xc002637c
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d 4c 60 02 c0 00 	cmp    DWORD PTR ds:0xc002604c,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 20 60 02 c0       	mov    eax,0xc0026020
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 4c 60 02 c0       	mov    eax,ds:0xc002604c
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 24 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fdc]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 54 60 02 c0       	mov    eax,0xc0026054
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d 4c 63 02 c0       	cmp    eax,0xc002634c
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 88 63 02 c0       	mov    eax,ds:0xc0026388
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 70 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026370
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 84 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026384
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 94 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026394
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 64 1f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde09c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 20 60 02 c0       	mov    eax,ds:0xc0026020
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 20 60 02 c0       	mov    ds:0xc0026020,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d 64 63 02 c0    	mov    DWORD PTR ds:0xc0026364,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d 68 63 02 c0    	mov    DWORD PTR ds:0xc0026368,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d 6c 63 02 c0    	mov    DWORD PTR ds:0xc002636c,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 74 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026374,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 c0 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8540]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 da 94 01 00       	jmp    c001b000 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 c0 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8540]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 0c 95 01 00       	jmp    c001b048 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 c0 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8540]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 35 95 01 00       	jmp    c001b090 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 56 f1 01 00       	call   c0020f94 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 80 20 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffddf80]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 80 20 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffddf80]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba 80 1f 02 c0       	mov    edx,0xc0021f80
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba a0 20 02 c0       	mov    edx,0xc00220a0
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 44 4b 02 c0       	mov    edx,0xc0024b44
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba ac 20 02 c0       	mov    edx,0xc00220ac
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba 90 20 02 c0       	mov    edx,0xc0022090
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 c0 63 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd9c40]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 a0 63 02 c0    	mov    ax,ds:0xc00263a0
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 a0 63 02 c0    	mov    ds:0xc00263a0,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 53 df 01 00       	call   c0020f94 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 b2 20 02 c0       	mov    eax,0xc00220b2
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 00 20 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffde000]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 bb 20 02 c0       	mov    eax,0xc00220bb
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 80 20 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffddf80]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 1e c9 01 00       	call   c0020f94 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba 90 20 02 c0       	mov    edx,0xc0022090
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba 80 1f 02 c0       	mov    edx,0xc0021f80
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba 90 1f 02 c0       	mov    edx,0xc0021f90
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 c0 63 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9c40]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 c0 63 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9c40],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 e5 b2 01 00       	call   c0020f94 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 cb b2 01 00       	call   c0020f94 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 d7 1f 02 c0       	mov    eax,0xc0021fd7
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 d0 1f 02 c0       	mov    eax,0xc0021fd0
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 64 9e 01 00       	call   c0020f94 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 c0 63 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9c40]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be c0 1f 02 c0       	mov    esi,0xc0021fc0
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 d8 97 01 00       	call   c0020f94 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba a0 20 02 c0       	mov    edx,0xc00220a0
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba a0 1f 02 c0       	mov    edx,0xc0021fa0
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba b0 1f 02 c0       	mov    edx,0xc0021fb0
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba c2 20 02 c0       	mov    edx,0xc00220c2
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba ce 20 02 c0       	mov    edx,0xc00220ce
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba e2 20 02 c0       	mov    edx,0xc00220e2
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 f0 13 00 00       	call   c00099c3 <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 e8 13 00 00       	call   c00099d3 <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c 00 24 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022400
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 00 24 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022400
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 00 22 02 c0       	mov    eax,0xc0022200
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 40 21 02 c0       	mov    eax,0xc0022140
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 00 21 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddf00]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 4a 11 00 00       	jmp    c00099c3 <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 65 11 00 00       	jmp    c00099e3 <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000888b:	48                   	dec    eax
c000888c:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00088a2:	48                   	dec    eax
c00088a3:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c00088b3:	ff 05 24 79 02 c0    	inc    DWORD PTR ds:0xc0027924
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c00088c2:	48                   	dec    eax
c00088c3:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 20 79 02 c0 00 	cmp    DWORD PTR ds:0xc0027920,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c00088dd:	e8 1a f6 00 00       	call   c0017efc <schedule()>
c00088e2:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00088e7:	48                   	dec    eax
c00088e8:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 90 65 02 c0       	mov    eax,ds:0xc0026590
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 00 25 02 c0       	push   0xc0022500
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 28 64 02 c0       	mov    eax,0xc0026428
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 09 25 02 c0       	push   0xc0022509
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 94 0f 02 c0       	mov    eax,0xc0020f94
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 13 25 02 c0       	push   0xc0022513
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 c8 0c 02 c0       	mov    eax,0xc0020cc8
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 1c 25 02 c0       	push   0xc002251c
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 94 10 02 c0       	mov    eax,0xc0021094
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 26 25 02 c0       	push   0xc0022526
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 14 0e 02 c0       	mov    eax,0xc0020e14
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 2f 25 02 c0       	push   0xc002252f
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 2c 64 02 c0       	mov    eax,0xc002642c
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 3c 25 02 c0       	push   0xc002253c
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 2d 64 02 c0       	mov    eax,0xc002642d
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 bb 55 00 00       	call   c000e000 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 49 25 02 c0       	push   0xc0022549
c0008a75:	e8 a3 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 60 25 02 c0 	mov    DWORD PTR [esp],0xc0022560
c0008a82:	e8 96 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c0008a8e:	e8 30 0f 00 00       	call   c00099c3 <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c0008aa2:	68 79 25 02 c0       	push   0xc0022579
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 15 f0 00 00       	call   c0017ac4 <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 bd 93 00 c0       	push   0xc00093bd
c0008abe:	53                   	push   ebx
c0008abf:	e8 08 f2 00 00       	call   c0017ccc <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 44 87 01 c0       	push   0xc0018744
c0008acd:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c0008ad3:	e8 f4 f1 00 00       	call   c0017ccc <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 08 79 02 c0       	mov    ds:0xc0027908,eax
c0008ae0:	68 20 27 02 c0       	push   0xc0022720
c0008ae5:	c6 05 2d 64 02 c0 01 	mov    BYTE PTR ds:0xc002642d,0x1
c0008aec:	e8 2c 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008af1:	e8 29 00 01 00       	call   c0018b1f <Vm::initialise8086()>
c0008af6:	e8 c3 42 00 00       	call   c000cdbe <Fs::initVFS()>
c0008afb:	c7 04 24 86 25 02 c0 	mov    DWORD PTR [esp],0xc0022586
c0008b02:	e8 16 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b07:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 20 27 02 c0       	push   0xc0022720
c0008b26:	e8 f2 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 02 d8 00 00       	call   c0016332 <Sys::loadSyscalls()>
c0008b30:	e8 cb b6 00 00       	call   c0014200 <Krnl::loadSystemEnv()>
c0008b35:	83 c4 0c             	add    esp,0xc
c0008b38:	6a 3a                	push   0x3a
c0008b3a:	68 a0 25 02 c0       	push   0xc00225a0
c0008b3f:	68 a9 25 02 c0       	push   0xc00225a9
c0008b44:	e8 a0 c5 00 00       	call   c00150e9 <Reg::readIntWithDefault(char*, char*, int)>
c0008b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b4c:	e8 67 4d 00 00       	call   c000d8b8 <User::loadClockSettings(int)>
c0008b51:	c7 04 24 44 27 02 c0 	mov    DWORD PTR [esp],0xc0022744
c0008b58:	e8 c0 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b5d:	58                   	pop    eax
c0008b5e:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0008b63:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b69:	e8 52 54 00 00       	call   c000dfc0 <Device::loadDriversForAll()>
c0008b6e:	c7 04 24 b1 25 02 c0 	mov    DWORD PTR [esp],0xc00225b1
c0008b75:	e8 a3 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b7a:	e8 e9 b1 00 00       	call   c0013d68 <Krnl::startCPUs()>
c0008b7f:	c7 04 24 cb 25 02 c0 	mov    DWORD PTR [esp],0xc00225cb
c0008b86:	e8 92 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b8b:	5a                   	pop    edx
c0008b8c:	8b 1d 28 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026428
c0008b92:	59                   	pop    ecx
c0008b93:	6a 01                	push   0x1
c0008b95:	68 dc 25 02 c0       	push   0xc00225dc
c0008b9a:	e8 63 e9 00 00       	call   c0017502 <Thr::loadDLL(char const*, bool)>
c0008b9f:	5a                   	pop    edx
c0008ba0:	59                   	pop    ecx
c0008ba1:	53                   	push   ebx
c0008ba2:	50                   	push   eax
c0008ba3:	e8 8b eb 00 00       	call   c0017733 <Thr::executeDLL(unsigned long, void*)>
c0008ba8:	83 c4 10             	add    esp,0x10
c0008bab:	83 ec 0c             	sub    esp,0xc
c0008bae:	6a 02                	push   0x2
c0008bb0:	e8 3f f5 00 00       	call   c00180f4 <blockTask(TaskState)>
c0008bb5:	83 c4 10             	add    esp,0x10
c0008bb8:	eb f1                	jmp    c0008bab <Krnl::firstTask()+0x13f>

c0008bba <Computer::Computer()>:
c0008bba:	83 ec 0c             	sub    esp,0xc
c0008bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc1:	83 ec 08             	sub    esp,0x8
c0008bc4:	68 f8 25 02 c0       	push   0xc00225f8
c0008bc9:	50                   	push   eax
c0008bca:	e8 ab 54 00 00       	call   c000e07a <Device::Device(char const*)>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	ba f4 27 02 c0       	mov    edx,0xc00227f4
c0008bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdb:	89 10                	mov    DWORD PTR [eax],edx
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bef:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c03:	83 ca 04             	or     edx,0x4
c0008c06:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c16:	0f b6 d0             	movzx  edx,al
c0008c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2e:	0f b6 d0             	movzx  edx,al
c0008c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c35:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	8d 50 01             	lea    edx,[eax+0x1]
c0008c47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c51:	0f b6 d0             	movzx  edx,al
c0008c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5c:	83 e1 3f             	and    ecx,0x3f
c0008c5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6d:	0f b6 d0             	movzx  edx,al
c0008c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c74:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c85:	0f b6 d0             	movzx  edx,al
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca8:	0f b6 d0             	movzx  edx,al
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb3:	83 e1 3f             	and    ecx,0x3f
c0008cb6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc4:	0f b6 d0             	movzx  edx,al
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cdc:	0f b6 d0             	movzx  edx,al
c0008cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cff:	0f b6 d0             	movzx  edx,al
c0008d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d06:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d0a:	83 e1 3f             	and    ecx,0x3f
c0008d0d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d11:	90                   	nop
c0008d12:	83 c4 0c             	add    esp,0xc
c0008d15:	c3                   	ret    

c0008d16 <Computer::setBootMessage(char const*)>:
c0008d16:	c3                   	ret    
c0008d17:	90                   	nop

c0008d18 <Computer::detectFeatures()>:
c0008d18:	55                   	push   ebp
c0008d19:	57                   	push   edi
c0008d1a:	56                   	push   esi
c0008d1b:	53                   	push   ebx
c0008d1c:	83 ec 1c             	sub    esp,0x1c
c0008d1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d23:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2d:	e8 e7 74 ff ff       	call   c0000219 <detectCPUID>
c0008d32:	85 c0                	test   eax,eax
c0008d34:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3a:	0f 95 c2             	setne  dl
c0008d3d:	83 e0 fd             	and    eax,0xfffffffd
c0008d40:	d1 e2                	shl    edx,1
c0008d42:	09 d0                	or     eax,edx
c0008d44:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d4a:	a8 02                	test   al,0x2
c0008d4c:	75 46                	jne    c0008d94 <Computer::detectFeatures()+0x7c>
c0008d4e:	f6 05 41 64 02 c0 04 	test   BYTE PTR ds:0xc0026441,0x4
c0008d55:	74 07                	je     c0008d5e <Computer::detectFeatures()+0x46>
c0008d57:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5e:	e8 f3 7e 01 00       	call   c0020c56 <x87Detect>
c0008d63:	83 e0 01             	and    eax,0x1
c0008d66:	c1 e0 04             	shl    eax,0x4
c0008d69:	88 c2                	mov    dl,al
c0008d6b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d71:	83 e0 ef             	and    eax,0xffffffef
c0008d74:	09 d0                	or     eax,edx
c0008d76:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7c:	a8 10                	test   al,0x10
c0008d7e:	0f 85 2a 01 00 00    	jne    c0008eae <Computer::detectFeatures()+0x196>
c0008d84:	84 c0                	test   al,al
c0008d86:	0f 88 45 01 00 00    	js     c0008ed1 <Computer::detectFeatures()+0x1b9>
c0008d8c:	83 c4 1c             	add    esp,0x1c
c0008d8f:	5b                   	pop    ebx
c0008d90:	5e                   	pop    esi
c0008d91:	5f                   	pop    edi
c0008d92:	5d                   	pop    ebp
c0008d93:	c3                   	ret    
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	6a 20                	push   0x20
c0008d99:	e8 cc 9e 00 00       	call   c0012c6a <CPU::cpuidCheckEDX(unsigned int)>
c0008d9e:	83 e0 01             	and    eax,0x1
c0008da1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dae:	83 e0 f7             	and    eax,0xfffffff7
c0008db1:	09 d0                	or     eax,edx
c0008db3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc0:	e8 a5 9e 00 00       	call   c0012c6a <CPU::cpuidCheckEDX(unsigned int)>
c0008dc5:	83 e0 01             	and    eax,0x1
c0008dc8:	88 c2                	mov    dl,al
c0008dca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd0:	83 e0 fe             	and    eax,0xfffffffe
c0008dd3:	09 d0                	or     eax,edx
c0008dd5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ddb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de2:	e8 83 9e 00 00       	call   c0012c6a <CPU::cpuidCheckEDX(unsigned int)>
c0008de7:	c1 e0 07             	shl    eax,0x7
c0008dea:	88 c2                	mov    dl,al
c0008dec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df2:	83 e0 7f             	and    eax,0x7f
c0008df5:	09 d0                	or     eax,edx
c0008df7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e04:	e8 61 9e 00 00       	call   c0012c6a <CPU::cpuidCheckEDX(unsigned int)>
c0008e09:	83 c4 10             	add    esp,0x10
c0008e0c:	83 e0 01             	and    eax,0x1
c0008e0f:	c1 e0 05             	shl    eax,0x5
c0008e12:	88 c2                	mov    dl,al
c0008e14:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e1a:	83 e0 df             	and    eax,0xffffffdf
c0008e1d:	09 d0                	or     eax,edx
c0008e1f:	f7 05 40 64 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026440,0x401
c0008e29:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2f:	0f 84 c2 00 00 00    	je     c0008ef7 <Computer::detectFeatures()+0x1df>
c0008e35:	83 e0 fe             	and    eax,0xfffffffe
c0008e38:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e44:	88 c2                	mov    dl,al
c0008e46:	83 e2 09             	and    edx,0x9
c0008e49:	fe ca                	dec    dl
c0008e4b:	75 09                	jne    c0008e56 <Computer::detectFeatures()+0x13e>
c0008e4d:	83 e0 fe             	and    eax,0xfffffffe
c0008e50:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5d:	50                   	push   eax
c0008e5e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e62:	55                   	push   ebp
c0008e63:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e67:	57                   	push   edi
c0008e68:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6c:	56                   	push   esi
c0008e6d:	68 00 00 00 80       	push   0x80000000
c0008e72:	e8 6f 9d 00 00       	call   c0012be6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e77:	83 c4 20             	add    esp,0x20
c0008e7a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e85:	0f 86 c3 fe ff ff    	jbe    c0008d4e <Computer::detectFeatures()+0x36>
c0008e8b:	83 ec 0c             	sub    esp,0xc
c0008e8e:	50                   	push   eax
c0008e8f:	55                   	push   ebp
c0008e90:	57                   	push   edi
c0008e91:	56                   	push   esi
c0008e92:	68 01 00 00 80       	push   0x80000001
c0008e97:	e8 4a 9d 00 00       	call   c0012be6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea6:	83 c4 20             	add    esp,0x20
c0008ea9:	e9 a0 fe ff ff       	jmp    c0008d4e <Computer::detectFeatures()+0x36>
c0008eae:	e8 5d 7d 01 00       	call   c0020c10 <absolutelyNoChanceInHell>
c0008eb3:	88 c2                	mov    dl,al
c0008eb5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ebb:	c1 e2 07             	shl    edx,0x7
c0008ebe:	83 e0 7f             	and    eax,0x7f
c0008ec1:	09 d0                	or     eax,edx
c0008ec3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec9:	84 c0                	test   al,al
c0008ecb:	0f 89 bb fe ff ff    	jns    c0008d8c <Computer::detectFeatures()+0x74>
c0008ed1:	e8 1a 7d 01 00       	call   c0020bf0 <avxDetect>
c0008ed6:	83 e0 01             	and    eax,0x1
c0008ed9:	c1 e0 05             	shl    eax,0x5
c0008edc:	88 c2                	mov    dl,al
c0008ede:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee4:	83 e0 df             	and    eax,0xffffffdf
c0008ee7:	09 d0                	or     eax,edx
c0008ee9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eef:	83 c4 1c             	add    esp,0x1c
c0008ef2:	5b                   	pop    ebx
c0008ef3:	5e                   	pop    esi
c0008ef4:	5f                   	pop    edi
c0008ef5:	5d                   	pop    ebp
c0008ef6:	c3                   	ret    
c0008ef7:	83 ec 0c             	sub    esp,0xc
c0008efa:	68 00 02 00 00       	push   0x200
c0008eff:	e8 66 9d 00 00       	call   c0012c6a <CPU::cpuidCheckEDX(unsigned int)>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	83 e0 01             	and    eax,0x1
c0008f0a:	88 c2                	mov    dl,al
c0008f0c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f12:	83 e0 fe             	and    eax,0xfffffffe
c0008f15:	09 d0                	or     eax,edx
c0008f17:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1d:	e9 1c ff ff ff       	jmp    c0008e3e <Computer::detectFeatures()+0x126>

c0008f22 <Computer::displayFeatures()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Computer::rdmsr(unsigned int)>:
c0008f24:	83 ec 0c             	sub    esp,0xc
c0008f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f32:	74 0a                	je     c0008f3e <Computer::rdmsr(unsigned int)+0x1a>
c0008f34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f38:	0f 32                	rdmsr  
c0008f3a:	83 c4 0c             	add    esp,0xc
c0008f3d:	c3                   	ret    
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	68 01 26 02 c0       	push   0xc0022601
c0008f46:	e8 be b3 00 00       	call   c0014309 <Krnl::panic(char const*)>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	eb e4                	jmp    c0008f34 <Computer::rdmsr(unsigned int)+0x10>

c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f50:	57                   	push   edi
c0008f51:	56                   	push   esi
c0008f52:	52                   	push   edx
c0008f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f5f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f66:	74 0e                	je     c0008f76 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f6c:	89 f0                	mov    eax,esi
c0008f6e:	89 fa                	mov    edx,edi
c0008f70:	0f 30                	wrmsr  
c0008f72:	58                   	pop    eax
c0008f73:	5e                   	pop    esi
c0008f74:	5f                   	pop    edi
c0008f75:	c3                   	ret    
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	68 07 26 02 c0       	push   0xc0022607
c0008f7e:	e8 86 b3 00 00       	call   c0014309 <Krnl::panic(char const*)>
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	eb e0                	jmp    c0008f68 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f88 <Computer::nmiEnabled()>:
c0008f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f8c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008f92:	c3                   	ret    
c0008f93:	90                   	nop

c0008f94 <Computer::readCMOS(unsigned char)>:
c0008f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f98:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f9f:	19 c0                	sbb    eax,eax
c0008fa1:	83 e0 80             	and    eax,0xffffff80
c0008fa4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008fa8:	e6 70                	out    0x70,al
c0008faa:	e4 71                	in     al,0x71
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Computer::enableNMI(bool)>:
c0008fae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008fb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fb6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008fbc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008fc4:	eb ce                	jmp    c0008f94 <Computer::readCMOS(unsigned char)>

c0008fc6 <Computer::open(int, int, void*)>:
c0008fc6:	56                   	push   esi
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 10             	sub    esp,0x10
c0008fcb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008fcf:	68 64 27 02 c0       	push   0xc0022764
c0008fd4:	e8 44 0a 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008fd9:	58                   	pop    eax
c0008fda:	f6 05 40 64 02 c0 04 	test   BYTE PTR ds:0xc0026440,0x4
c0008fe1:	5a                   	pop    edx
c0008fe2:	0f 94 05 00 58 02 c0 	sete   BYTE PTR ds:0xc0025800
c0008fe9:	68 58 01 00 00       	push   0x158
c0008fee:	68 0d 26 02 c0       	push   0xc002260d
c0008ff3:	e8 30 3a 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0008ff8:	59                   	pop    ecx
c0008ff9:	5e                   	pop    esi
c0008ffa:	68 14 01 00 00       	push   0x114
c0008fff:	68 23 26 02 c0       	push   0xc0022623
c0009004:	e8 1f 3a 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009009:	58                   	pop    eax
c000900a:	5a                   	pop    edx
c000900b:	6a 14                	push   0x14
c000900d:	68 37 26 02 c0       	push   0xc0022637
c0009012:	e8 11 3a 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009017:	59                   	pop    ecx
c0009018:	5e                   	pop    esi
c0009019:	68 3f 07 00 00       	push   0x73f
c000901e:	68 4a 26 02 c0       	push   0xc002264a
c0009023:	e8 00 3a 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009028:	58                   	pop    eax
c0009029:	5a                   	pop    edx
c000902a:	6a 63                	push   0x63
c000902c:	68 61 26 02 c0       	push   0xc0022661
c0009031:	e8 f2 39 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009036:	c7 04 24 77 26 02 c0 	mov    DWORD PTR [esp],0xc0022677
c000903d:	e8 e6 39 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009042:	c7 04 24 89 26 02 c0 	mov    DWORD PTR [esp],0xc0022689
c0009049:	e8 cf 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000904e:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009055:	e8 69 09 00 00       	call   c00099c3 <malloc>
c000905a:	89 c6                	mov    esi,eax
c000905c:	89 04 24             	mov    DWORD PTR [esp],eax
c000905f:	e8 78 8d 00 00       	call   c0011ddc <ACPI::ACPI()>
c0009064:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000906a:	c7 04 24 a3 26 02 c0 	mov    DWORD PTR [esp],0xc00226a3
c0009071:	e8 a7 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009076:	59                   	pop    ecx
c0009077:	5e                   	pop    esi
c0009078:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000907e:	53                   	push   ebx
c000907f:	e8 f2 4d 00 00       	call   c000de76 <Device::addChild(Device*)>
c0009084:	c7 04 24 88 27 02 c0 	mov    DWORD PTR [esp],0xc0022788
c000908b:	e8 8d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009093:	e8 80 fc ff ff       	call   c0008d18 <Computer::detectFeatures()>
c0009098:	c7 04 24 a8 27 02 c0 	mov    DWORD PTR [esp],0xc00227a8
c000909f:	e8 79 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090a4:	c7 04 24 bd 26 02 c0 	mov    DWORD PTR [esp],0xc00226bd
c00090ab:	e8 6d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090b0:	58                   	pop    eax
c00090b1:	5a                   	pop    edx
c00090b2:	6a 01                	push   0x1
c00090b4:	53                   	push   ebx
c00090b5:	e8 f4 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c00090ba:	c7 04 24 b1 25 02 c0 	mov    DWORD PTR [esp],0xc00225b1
c00090c1:	e8 57 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090c6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00090cd:	e8 f1 08 00 00       	call   c00099c3 <malloc>
c00090d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090d5:	89 c6                	mov    esi,eax
c00090d7:	e8 46 9c 00 00       	call   c0012d22 <CPU::CPU()>
c00090dc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00090e2:	59                   	pop    ecx
c00090e3:	58                   	pop    eax
c00090e4:	56                   	push   esi
c00090e5:	53                   	push   ebx
c00090e6:	e8 8b 4d 00 00       	call   c000de76 <Device::addChild(Device*)>
c00090eb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00090f7:	6a 00                	push   0x0
c00090f9:	6a 00                	push   0x0
c00090fb:	50                   	push   eax
c00090fc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00090ff:	83 c4 14             	add    esp,0x14
c0009102:	68 c8 27 02 c0       	push   0xc00227c8
c0009107:	e8 11 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000910c:	e8 01 53 00 00       	call   c000e412 <setupFPU()>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1f                	je     c000913d <Computer::open(int, int, void*)+0x177>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	50                   	push   eax
c0009122:	53                   	push   ebx
c0009123:	e8 4e 4d 00 00       	call   c000de76 <Device::addChild(Device*)>
c0009128:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000912e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009130:	6a 00                	push   0x0
c0009132:	6a 00                	push   0x0
c0009134:	6a 00                	push   0x0
c0009136:	50                   	push   eax
c0009137:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000913a:	83 c4 20             	add    esp,0x20
c000913d:	83 ec 0c             	sub    esp,0xc
c0009140:	68 ce 26 02 c0       	push   0xc00226ce
c0009145:	e8 d3 08 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000914a:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c0009151:	e8 9e ec 00 00       	call   c0017df4 <setupMultitasking(void (*)())>
c0009156:	83 c4 14             	add    esp,0x14
c0009159:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000915e:	5b                   	pop    ebx
c000915f:	5e                   	pop    esi
c0009160:	c3                   	ret    
c0009161:	90                   	nop

c0009162 <Computer::disableNMI()>:
c0009162:	6a 00                	push   0x0
c0009164:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009168:	e8 41 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c000916d:	58                   	pop    eax
c000916e:	5a                   	pop    edx
c000916f:	c3                   	ret    

c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009174:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000917b:	19 c0                	sbb    eax,eax
c000917d:	83 e0 80             	and    eax,0xffffff80
c0009180:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009184:	e6 70                	out    0x70,al
c0009186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000918a:	e6 71                	out    0x71,al
c000918c:	c3                   	ret    
c000918d:	90                   	nop

c000918e <Computer::handleNMI()>:
c000918e:	56                   	push   esi
c000918f:	53                   	push   ebx
c0009190:	83 ec 10             	sub    esp,0x10
c0009193:	e4 92                	in     al,0x92
c0009195:	89 c6                	mov    esi,eax
c0009197:	e4 61                	in     al,0x61
c0009199:	68 e9 26 02 c0       	push   0xc00226e9
c000919e:	88 c3                	mov    bl,al
c00091a0:	e8 83 38 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	83 e6 10             	and    esi,0x10
c00091ab:	75 0d                	jne    c00091ba <Computer::handleNMI()+0x2c>
c00091ad:	f6 c3 40             	test   bl,0x40
c00091b0:	75 1d                	jne    c00091cf <Computer::handleNMI()+0x41>
c00091b2:	84 db                	test   bl,bl
c00091b4:	78 2d                	js     c00091e3 <Computer::handleNMI()+0x55>
c00091b6:	58                   	pop    eax
c00091b7:	5b                   	pop    ebx
c00091b8:	5e                   	pop    esi
c00091b9:	c3                   	ret    
c00091ba:	83 ec 0c             	sub    esp,0xc
c00091bd:	68 fa 26 02 c0       	push   0xc00226fa
c00091c2:	e8 42 b1 00 00       	call   c0014309 <Krnl::panic(char const*)>
c00091c7:	83 c4 10             	add    esp,0x10
c00091ca:	f6 c3 40             	test   bl,0x40
c00091cd:	74 e3                	je     c00091b2 <Computer::handleNMI()+0x24>
c00091cf:	83 ec 0c             	sub    esp,0xc
c00091d2:	68 07 27 02 c0       	push   0xc0022707
c00091d7:	e8 2d b1 00 00       	call   c0014309 <Krnl::panic(char const*)>
c00091dc:	83 c4 10             	add    esp,0x10
c00091df:	84 db                	test   bl,bl
c00091e1:	79 d3                	jns    c00091b6 <Computer::handleNMI()+0x28>
c00091e3:	c7 44 24 10 11 27 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022711
c00091eb:	5a                   	pop    edx
c00091ec:	5b                   	pop    ebx
c00091ed:	5e                   	pop    esi
c00091ee:	e9 16 b1 00 00       	jmp    c0014309 <Krnl::panic(char const*)>
c00091f3:	90                   	nop

c00091f4 <Computer::setDiskActivityLight(int, bool)>:
c00091f4:	56                   	push   esi
c00091f5:	53                   	push   ebx
c00091f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00091fa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091ff:	77 1b                	ja     c000921c <Computer::setDiskActivityLight(int, bool)+0x28>
c0009201:	e4 92                	in     al,0x92
c0009203:	bb 40 00 00 00       	mov    ebx,0x40
c0009208:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000920c:	89 da                	mov    edx,ebx
c000920e:	d3 e2                	shl    edx,cl
c0009210:	89 f1                	mov    ecx,esi
c0009212:	f7 d2                	not    edx
c0009214:	d3 e3                	shl    ebx,cl
c0009216:	21 d0                	and    eax,edx
c0009218:	09 d8                	or     eax,ebx
c000921a:	e6 92                	out    0x92,al
c000921c:	5b                   	pop    ebx
c000921d:	5e                   	pop    esi
c000921e:	c3                   	ret    
c000921f:	90                   	nop

c0009220 <GDTEntry::setBase(unsigned int)>:
c0009220:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009224:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009228:	89 c1                	mov    ecx,eax
c000922a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000922e:	c1 e9 10             	shr    ecx,0x10
c0009231:	c1 e8 18             	shr    eax,0x18
c0009234:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009237:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000923a:	c3                   	ret    
c000923b:	90                   	nop

c000923c <GDTEntry::setLimit(unsigned int)>:
c000923c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009244:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009247:	66 89 01             	mov    WORD PTR [ecx],ax
c000924a:	83 e2 f0             	and    edx,0xfffffff0
c000924d:	c1 e8 10             	shr    eax,0x10
c0009250:	83 e0 0f             	and    eax,0xf
c0009253:	09 d0                	or     eax,edx
c0009255:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009258:	c3                   	ret    
c0009259:	90                   	nop

c000925a <GDT::GDT()>:
c000925a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000925e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926e:	90                   	nop
c000926f:	c3                   	ret    

c0009270 <GDT::addEntry(GDTEntry)>:
c0009270:	53                   	push   ebx
c0009271:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009275:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009279:	8b 02                	mov    eax,DWORD PTR [edx]
c000927b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000927f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009283:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009287:	8d 48 01             	lea    ecx,[eax+0x1]
c000928a:	c1 e0 03             	shl    eax,0x3
c000928d:	89 0a                	mov    DWORD PTR [edx],ecx
c000928f:	5b                   	pop    ebx
c0009290:	c3                   	ret    
c0009291:	90                   	nop

c0009292 <GDT::getNumberOfEntries()>:
c0009292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009296:	8b 00                	mov    eax,DWORD PTR [eax]
c0009298:	c3                   	ret    
c0009299:	90                   	nop

c000929a <GDT::flush()>:
c000929a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000929e:	8b 10                	mov    edx,DWORD PTR [eax]
c00092a0:	83 c0 04             	add    eax,0x4
c00092a3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092aa:	a3 32 64 02 c0       	mov    ds:0xc0026432,eax
c00092af:	66 89 15 30 64 02 c0 	mov    WORD PTR ds:0xc0026430,dx
c00092b6:	e9 ca 70 ff ff       	jmp    c0000385 <loadGDT>
c00092bb:	90                   	nop

c00092bc <GDT::setup()>:
c00092bc:	55                   	push   ebp
c00092bd:	57                   	push   edi
c00092be:	56                   	push   esi
c00092bf:	53                   	push   ebx
c00092c0:	83 ec 3c             	sub    esp,0x3c
c00092c3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00092c7:	6a 00                	push   0x0
c00092c9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00092cd:	53                   	push   ebx
c00092ce:	e8 4d ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092d3:	6a 00                	push   0x0
c00092d5:	53                   	push   ebx
c00092d6:	e8 61 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092db:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c00092e3:	6a 00                	push   0x0
c00092e5:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00092e9:	53                   	push   ebx
c00092ea:	e8 31 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092ef:	68 ff ff ff 00       	push   0xffffff
c00092f4:	53                   	push   ebx
c00092f5:	e8 42 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00092fe:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009303:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009308:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000930c:	83 c4 20             	add    esp,0x20
c000930f:	6a 00                	push   0x0
c0009311:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0009315:	53                   	push   ebx
c0009316:	e8 05 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000931b:	68 ff ff ff 00       	push   0xffffff
c0009320:	53                   	push   ebx
c0009321:	e8 16 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c0009326:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000932a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000932e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009332:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009336:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000933a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000933f:	0d 00 92 c0 00       	or     eax,0xc09200
c0009344:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009348:	89 d8                	mov    eax,ebx
c000934a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000934e:	80 cc 60             	or     ah,0x60
c0009351:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009355:	83 c4 0c             	add    esp,0xc
c0009358:	89 f8                	mov    eax,edi
c000935a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000935e:	80 cc 60             	or     ah,0x60
c0009361:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009365:	89 c7                	mov    edi,eax
c0009367:	55                   	push   ebp
c0009368:	e8 03 ff ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000936d:	83 c4 0c             	add    esp,0xc
c0009370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009378:	55                   	push   ebp
c0009379:	e8 f2 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009385:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009389:	55                   	push   ebp
c000938a:	e8 e1 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000938f:	83 c4 0c             	add    esp,0xc
c0009392:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009396:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000939a:	53                   	push   ebx
c000939b:	51                   	push   ecx
c000939c:	55                   	push   ebp
c000939d:	e8 ce fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093a2:	83 c4 0c             	add    esp,0xc
c00093a5:	57                   	push   edi
c00093a6:	56                   	push   esi
c00093a7:	55                   	push   ebp
c00093a8:	e8 c3 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093b0:	e8 e5 fe ff ff       	call   c000929a <GDT::flush()>
c00093b5:	83 c4 4c             	add    esp,0x4c
c00093b8:	5b                   	pop    ebx
c00093b9:	5e                   	pop    esi
c00093ba:	5f                   	pop    edi
c00093bb:	5d                   	pop    ebp
c00093bc:	c3                   	ret    

c00093bd <idleFunction(void*)>:
c00093bd:	53                   	push   ebx
c00093be:	83 ec 08             	sub    esp,0x8
c00093c1:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00093c6:	48                   	dec    eax
c00093c7:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00093cc:	75 01                	jne    c00093cf <idleFunction(void*)+0x12>
c00093ce:	fb                   	sti    
c00093cf:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c00093d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00093da:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c00093e1:	74 3c                	je     c000941f <idleFunction(void*)+0x62>
c00093e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00093ea:	74 33                	je     c000941f <idleFunction(void*)+0x62>
c00093ec:	31 db                	xor    ebx,ebx
c00093ee:	52                   	push   edx
c00093ef:	52                   	push   edx
c00093f0:	68 e1 00 00 00       	push   0xe1
c00093f5:	50                   	push   eax
c00093f6:	e8 29 fb ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00093fb:	53                   	push   ebx
c00093fc:	83 e0 02             	and    eax,0x2
c00093ff:	50                   	push   eax
c0009400:	68 e1 00 00 00       	push   0xe1
c0009405:	ff 35 28 64 02 c0    	push   DWORD PTR ds:0xc0026428
c000940b:	e8 40 fb ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0009410:	83 c4 20             	add    esp,0x20
c0009413:	e8 9c 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009418:	e8 f9 7d 01 00       	call   c0021216 <idleCommon()>
c000941d:	eb f4                	jmp    c0009413 <idleFunction(void*)+0x56>
c000941f:	fb                   	sti    
c0009420:	f4                   	hlt    
c0009421:	e8 f0 7d 01 00       	call   c0021216 <idleCommon()>
c0009426:	eb f7                	jmp    c000941f <idleFunction(void*)+0x62>

c0009428 <IDTEntry::IDTEntry(bool)>:
c0009428:	83 ec 04             	sub    esp,0x4
c000942b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000942f:	88 04 24             	mov    BYTE PTR [esp],al
c0009432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009436:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000943c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009440:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009448:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000944b:	83 e2 f0             	and    edx,0xfffffff0
c000944e:	83 ca 0e             	or     edx,0xe
c0009451:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009458:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000945b:	83 e2 ef             	and    edx,0xffffffef
c000945e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009461:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009465:	74 05                	je     c000946c <IDTEntry::IDTEntry(bool)+0x44>
c0009467:	b2 03                	mov    dl,0x3
c0009469:	eb 05                	jmp    c0009470 <IDTEntry::IDTEntry(bool)+0x48>
c000946b:	90                   	nop
c000946c:	b2 00                	mov    dl,0x0
c000946e:	66 90                	xchg   ax,ax
c0009470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009474:	83 e2 03             	and    edx,0x3
c0009477:	88 d1                	mov    cl,dl
c0009479:	c1 e1 05             	shl    ecx,0x5
c000947c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000947f:	83 e2 9f             	and    edx,0xffffff9f
c0009482:	09 ca                	or     edx,ecx
c0009484:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000948e:	83 ca 80             	or     edx,0xffffff80
c0009491:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009494:	90                   	nop
c0009495:	83 c4 04             	add    esp,0x4
c0009498:	c3                   	ret    
c0009499:	90                   	nop

c000949a <IDTEntry::setOffset(unsigned int)>:
c000949a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000949e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a2:	66 89 02             	mov    WORD PTR [edx],ax
c00094a5:	c1 e8 10             	shr    eax,0x10
c00094a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094ac:	c3                   	ret    
c00094ad:	90                   	nop
c00094ae:	66 90                	xchg   ax,ax

c00094b0 <IDT::IDT()>:
c00094b0:	90                   	nop
c00094b1:	c3                   	ret    

c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b6:	83 c0 30             	add    eax,0x30
c00094b9:	c3                   	ret    

c00094ba <IDT::addEntry(IDTEntry, int)>:
c00094ba:	53                   	push   ebx
c00094bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00094ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00094d2:	5b                   	pop    ebx
c00094d3:	c3                   	ret    

c00094d4 <IDT::addEntry(int, void (*)(), bool)>:
c00094d4:	53                   	push   ebx
c00094d5:	83 ec 10             	sub    esp,0x10
c00094d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00094dd:	50                   	push   eax
c00094de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00094e2:	53                   	push   ebx
c00094e3:	e8 40 ff ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c00094e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00094ec:	53                   	push   ebx
c00094ed:	e8 a8 ff ff ff       	call   c000949a <IDTEntry::setOffset(unsigned int)>
c00094f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00094f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009502:	e8 b3 ff ff ff       	call   c00094ba <IDT::addEntry(IDTEntry, int)>
c0009507:	83 c4 30             	add    esp,0x30
c000950a:	5b                   	pop    ebx
c000950b:	c3                   	ret    

c000950c <IDT::flush()>:
c000950c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009510:	66 c7 05 38 64 02 c0 ff 07 	mov    WORD PTR ds:0xc0026438,0x7ff
c0009519:	a3 3a 64 02 c0       	mov    ds:0xc002643a,eax
c000951e:	0f 01 1d 38 64 02 c0 	lidtd  ds:0xc0026438
c0009525:	c3                   	ret    

c0009526 <IDT::setup()>:
c0009526:	57                   	push   edi
c0009527:	56                   	push   esi
c0009528:	53                   	push   ebx
c0009529:	83 ec 10             	sub    esp,0x10
c000952c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009530:	6a 00                	push   0x0
c0009532:	68 a5 03 00 c0       	push   0xc00003a5
c0009537:	6a 00                	push   0x0
c0009539:	53                   	push   ebx
c000953a:	e8 95 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000953f:	6a 00                	push   0x0
c0009541:	68 b5 03 00 c0       	push   0xc00003b5
c0009546:	6a 01                	push   0x1
c0009548:	53                   	push   ebx
c0009549:	e8 86 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000954e:	83 c4 20             	add    esp,0x20
c0009551:	6a 00                	push   0x0
c0009553:	68 bf 03 00 c0       	push   0xc00003bf
c0009558:	6a 02                	push   0x2
c000955a:	53                   	push   ebx
c000955b:	e8 74 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009560:	6a 00                	push   0x0
c0009562:	68 c9 03 00 c0       	push   0xc00003c9
c0009567:	6a 03                	push   0x3
c0009569:	53                   	push   ebx
c000956a:	e8 65 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000956f:	83 c4 20             	add    esp,0x20
c0009572:	6a 00                	push   0x0
c0009574:	68 d3 03 00 c0       	push   0xc00003d3
c0009579:	6a 04                	push   0x4
c000957b:	53                   	push   ebx
c000957c:	e8 53 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009581:	6a 00                	push   0x0
c0009583:	68 dd 03 00 c0       	push   0xc00003dd
c0009588:	6a 05                	push   0x5
c000958a:	53                   	push   ebx
c000958b:	e8 44 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009590:	83 c4 20             	add    esp,0x20
c0009593:	6a 00                	push   0x0
c0009595:	68 e7 03 00 c0       	push   0xc00003e7
c000959a:	6a 06                	push   0x6
c000959c:	53                   	push   ebx
c000959d:	e8 32 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095a2:	6a 00                	push   0x0
c00095a4:	68 f1 03 00 c0       	push   0xc00003f1
c00095a9:	6a 07                	push   0x7
c00095ab:	53                   	push   ebx
c00095ac:	e8 23 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095b1:	83 c4 20             	add    esp,0x20
c00095b4:	6a 00                	push   0x0
c00095b6:	68 fb 03 00 c0       	push   0xc00003fb
c00095bb:	6a 08                	push   0x8
c00095bd:	53                   	push   ebx
c00095be:	e8 11 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095c3:	6a 00                	push   0x0
c00095c5:	68 03 04 00 c0       	push   0xc0000403
c00095ca:	6a 09                	push   0x9
c00095cc:	53                   	push   ebx
c00095cd:	e8 02 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095d2:	83 c4 20             	add    esp,0x20
c00095d5:	6a 00                	push   0x0
c00095d7:	68 0d 04 00 c0       	push   0xc000040d
c00095dc:	6a 0a                	push   0xa
c00095de:	53                   	push   ebx
c00095df:	e8 f0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095e4:	6a 00                	push   0x0
c00095e6:	68 15 04 00 c0       	push   0xc0000415
c00095eb:	6a 0b                	push   0xb
c00095ed:	53                   	push   ebx
c00095ee:	e8 e1 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095f3:	83 c4 20             	add    esp,0x20
c00095f6:	6a 00                	push   0x0
c00095f8:	68 1d 04 00 c0       	push   0xc000041d
c00095fd:	6a 0c                	push   0xc
c00095ff:	53                   	push   ebx
c0009600:	e8 cf fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009605:	6a 00                	push   0x0
c0009607:	68 25 04 00 c0       	push   0xc0000425
c000960c:	6a 0d                	push   0xd
c000960e:	53                   	push   ebx
c000960f:	e8 c0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009614:	83 c4 20             	add    esp,0x20
c0009617:	6a 00                	push   0x0
c0009619:	68 2d 04 00 c0       	push   0xc000042d
c000961e:	6a 0e                	push   0xe
c0009620:	53                   	push   ebx
c0009621:	e8 ae fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009626:	6a 00                	push   0x0
c0009628:	68 35 04 00 c0       	push   0xc0000435
c000962d:	6a 0f                	push   0xf
c000962f:	53                   	push   ebx
c0009630:	e8 9f fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009635:	83 c4 20             	add    esp,0x20
c0009638:	6a 00                	push   0x0
c000963a:	68 3f 04 00 c0       	push   0xc000043f
c000963f:	6a 10                	push   0x10
c0009641:	53                   	push   ebx
c0009642:	e8 8d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009647:	6a 00                	push   0x0
c0009649:	68 49 04 00 c0       	push   0xc0000449
c000964e:	6a 11                	push   0x11
c0009650:	53                   	push   ebx
c0009651:	e8 7e fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009656:	83 c4 20             	add    esp,0x20
c0009659:	6a 00                	push   0x0
c000965b:	68 53 04 00 c0       	push   0xc0000453
c0009660:	6a 12                	push   0x12
c0009662:	53                   	push   ebx
c0009663:	e8 6c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009668:	6a 01                	push   0x1
c000966a:	68 ed 04 00 c0       	push   0xc00004ed
c000966f:	6a 60                	push   0x60
c0009671:	53                   	push   ebx
c0009672:	e8 5d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009677:	83 c4 20             	add    esp,0x20
c000967a:	6a 00                	push   0x0
c000967c:	68 f4 04 00 c0       	push   0xc00004f4
c0009681:	6a 20                	push   0x20
c0009683:	53                   	push   ebx
c0009684:	e8 4b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009689:	6a 00                	push   0x0
c000968b:	68 df 04 00 c0       	push   0xc00004df
c0009690:	6a 21                	push   0x21
c0009692:	53                   	push   ebx
c0009693:	e8 3c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009698:	83 c4 20             	add    esp,0x20
c000969b:	6a 00                	push   0x0
c000969d:	68 e6 04 00 c0       	push   0xc00004e6
c00096a2:	6a 22                	push   0x22
c00096a4:	53                   	push   ebx
c00096a5:	e8 2a fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096aa:	6a 00                	push   0x0
c00096ac:	68 5d 04 00 c0       	push   0xc000045d
c00096b1:	6a 23                	push   0x23
c00096b3:	53                   	push   ebx
c00096b4:	e8 1b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	68 67 04 00 c0       	push   0xc0000467
c00096c3:	6a 24                	push   0x24
c00096c5:	53                   	push   ebx
c00096c6:	e8 09 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096cb:	6a 00                	push   0x0
c00096cd:	68 71 04 00 c0       	push   0xc0000471
c00096d2:	6a 25                	push   0x25
c00096d4:	53                   	push   ebx
c00096d5:	e8 fa fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096da:	83 c4 20             	add    esp,0x20
c00096dd:	6a 00                	push   0x0
c00096df:	68 7b 04 00 c0       	push   0xc000047b
c00096e4:	6a 26                	push   0x26
c00096e6:	53                   	push   ebx
c00096e7:	e8 e8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096ec:	6a 00                	push   0x0
c00096ee:	68 85 04 00 c0       	push   0xc0000485
c00096f3:	6a 27                	push   0x27
c00096f5:	53                   	push   ebx
c00096f6:	e8 d9 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096fb:	83 c4 20             	add    esp,0x20
c00096fe:	6a 00                	push   0x0
c0009700:	68 8f 04 00 c0       	push   0xc000048f
c0009705:	6a 28                	push   0x28
c0009707:	53                   	push   ebx
c0009708:	e8 c7 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000970d:	6a 00                	push   0x0
c000970f:	68 99 04 00 c0       	push   0xc0000499
c0009714:	6a 29                	push   0x29
c0009716:	53                   	push   ebx
c0009717:	e8 b8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000971c:	83 c4 20             	add    esp,0x20
c000971f:	6a 00                	push   0x0
c0009721:	68 a3 04 00 c0       	push   0xc00004a3
c0009726:	6a 2a                	push   0x2a
c0009728:	53                   	push   ebx
c0009729:	e8 a6 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000972e:	6a 00                	push   0x0
c0009730:	68 ad 04 00 c0       	push   0xc00004ad
c0009735:	6a 2b                	push   0x2b
c0009737:	53                   	push   ebx
c0009738:	e8 97 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000973d:	83 c4 20             	add    esp,0x20
c0009740:	6a 00                	push   0x0
c0009742:	68 b7 04 00 c0       	push   0xc00004b7
c0009747:	6a 2c                	push   0x2c
c0009749:	53                   	push   ebx
c000974a:	e8 85 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000974f:	6a 00                	push   0x0
c0009751:	68 c1 04 00 c0       	push   0xc00004c1
c0009756:	6a 2d                	push   0x2d
c0009758:	53                   	push   ebx
c0009759:	e8 76 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000975e:	83 c4 20             	add    esp,0x20
c0009761:	6a 00                	push   0x0
c0009763:	68 cb 04 00 c0       	push   0xc00004cb
c0009768:	6a 2e                	push   0x2e
c000976a:	53                   	push   ebx
c000976b:	e8 64 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009770:	6a 00                	push   0x0
c0009772:	68 d5 04 00 c0       	push   0xc00004d5
c0009777:	6a 2f                	push   0x2f
c0009779:	53                   	push   ebx
c000977a:	e8 55 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000977f:	83 c4 20             	add    esp,0x20
c0009782:	6a 00                	push   0x0
c0009784:	68 2b 05 00 c0       	push   0xc000052b
c0009789:	6a 30                	push   0x30
c000978b:	53                   	push   ebx
c000978c:	e8 43 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009791:	6a 00                	push   0x0
c0009793:	68 35 05 00 c0       	push   0xc0000535
c0009798:	6a 31                	push   0x31
c000979a:	53                   	push   ebx
c000979b:	e8 34 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097a0:	83 c4 20             	add    esp,0x20
c00097a3:	6a 00                	push   0x0
c00097a5:	68 3f 05 00 c0       	push   0xc000053f
c00097aa:	6a 32                	push   0x32
c00097ac:	53                   	push   ebx
c00097ad:	e8 22 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097b2:	6a 00                	push   0x0
c00097b4:	68 49 05 00 c0       	push   0xc0000549
c00097b9:	6a 33                	push   0x33
c00097bb:	53                   	push   ebx
c00097bc:	e8 13 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097c1:	83 c4 20             	add    esp,0x20
c00097c4:	6a 00                	push   0x0
c00097c6:	68 53 05 00 c0       	push   0xc0000553
c00097cb:	6a 34                	push   0x34
c00097cd:	53                   	push   ebx
c00097ce:	e8 01 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097d3:	6a 00                	push   0x0
c00097d5:	68 5d 05 00 c0       	push   0xc000055d
c00097da:	6a 35                	push   0x35
c00097dc:	53                   	push   ebx
c00097dd:	e8 f2 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097e2:	83 c4 20             	add    esp,0x20
c00097e5:	6a 00                	push   0x0
c00097e7:	68 67 05 00 c0       	push   0xc0000567
c00097ec:	6a 36                	push   0x36
c00097ee:	53                   	push   ebx
c00097ef:	e8 e0 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097f4:	6a 00                	push   0x0
c00097f6:	68 71 05 00 c0       	push   0xc0000571
c00097fb:	6a 37                	push   0x37
c00097fd:	53                   	push   ebx
c00097fe:	e8 d1 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009803:	83 c4 1c             	add    esp,0x1c
c0009806:	6a 03                	push   0x3
c0009808:	6a 02                	push   0x2
c000980a:	ff 35 90 65 02 c0    	push   DWORD PTR ds:0xc0026590
c0009810:	e8 e1 25 00 00       	call   c000bdf6 <VAS::allocatePages(int, int)>
c0009815:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000981c:	89 c6                	mov    esi,eax
c000981e:	e8 a0 01 00 00       	call   c00099c3 <malloc>
c0009823:	81 c6 00 20 00 00    	add    esi,0x2000
c0009829:	89 04 24             	mov    DWORD PTR [esp],eax
c000982c:	89 c7                	mov    edi,eax
c000982e:	e8 5d 17 00 00       	call   c000af90 <TSS::TSS()>
c0009833:	83 c4 0c             	add    esp,0xc
c0009836:	68 fb 03 00 c0       	push   0xc00003fb
c000983b:	56                   	push   esi
c000983c:	57                   	push   edi
c000983d:	e8 92 17 00 00       	call   c000afd4 <TSS::setup(unsigned long, unsigned long)>
c0009842:	89 c6                	mov    esi,eax
c0009844:	58                   	pop    eax
c0009845:	5a                   	pop    edx
c0009846:	6a 00                	push   0x0
c0009848:	8d 44 24 14          	lea    eax,[esp+0x14]
c000984c:	50                   	push   eax
c000984d:	e8 d6 fb ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c0009852:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009856:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000985b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009862:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009868:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000986c:	80 ce 05             	or     dh,0x5
c000986f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009872:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009876:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000987a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000987d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009880:	e8 87 fc ff ff       	call   c000950c <IDT::flush()>
c0009885:	83 c4 20             	add    esp,0x20
c0009888:	5b                   	pop    ebx
c0009889:	5e                   	pop    esi
c000988a:	5f                   	pop    edi
c000988b:	c3                   	ret    

c000988c <sbrk>:
c000988c:	55                   	push   ebp
c000988d:	57                   	push   edi
c000988e:	56                   	push   esi
c000988f:	53                   	push   ebx
c0009890:	83 ec 24             	sub    esp,0x24
c0009893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009897:	53                   	push   ebx
c0009898:	68 18 28 02 c0       	push   0xc0022818
c000989d:	e8 86 31 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00098a2:	83 c4 10             	add    esp,0x10
c00098a5:	85 db                	test   ebx,ebx
c00098a7:	74 5f                	je     c0009908 <sbrk+0x7c>
c00098a9:	78 64                	js     c000990f <sbrk+0x83>
c00098ab:	a1 8c 56 02 c0       	mov    eax,ds:0xc002568c
c00098b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098b4:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c00098ba:	89 dd                	mov    ebp,ebx
c00098bc:	78 69                	js     c0009927 <sbrk+0x9b>
c00098be:	c1 fd 0c             	sar    ebp,0xc
c00098c1:	bb 00 00 00 00       	mov    ebx,0x0
c00098c6:	8b 35 90 65 02 c0    	mov    esi,DWORD PTR ds:0xc0026590
c00098cc:	8b 3d 8c 56 02 c0    	mov    edi,DWORD PTR ds:0xc002568c
c00098d2:	e8 e8 04 00 00       	call   c0009dbf <Phys::allocatePage()>
c00098d7:	68 01 04 00 00       	push   0x401
c00098dc:	57                   	push   edi
c00098dd:	50                   	push   eax
c00098de:	56                   	push   esi
c00098df:	e8 10 24 00 00       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00098e4:	81 05 8c 56 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002568c,0x1000
c00098ee:	43                   	inc    ebx
c00098ef:	83 c4 10             	add    esp,0x10
c00098f2:	39 dd                	cmp    ebp,ebx
c00098f4:	75 d0                	jne    c00098c6 <sbrk+0x3a>
c00098f6:	0f 20 d8             	mov    eax,cr3
c00098f9:	0f 22 d8             	mov    cr3,eax
c00098fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009900:	83 c4 1c             	add    esp,0x1c
c0009903:	5b                   	pop    ebx
c0009904:	5e                   	pop    esi
c0009905:	5f                   	pop    edi
c0009906:	5d                   	pop    ebp
c0009907:	c3                   	ret    
c0009908:	a1 8c 56 02 c0       	mov    eax,ds:0xc002568c
c000990d:	eb f1                	jmp    c0009900 <sbrk+0x74>
c000990f:	83 ec 08             	sub    esp,0x8
c0009912:	53                   	push   ebx
c0009913:	68 44 28 02 c0       	push   0xc0022844
c0009918:	e8 0b 31 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009925:	eb d9                	jmp    c0009900 <sbrk+0x74>
c0009927:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c000992d:	eb 8f                	jmp    c00098be <sbrk+0x32>

c000992f <mmap>:
c000992f:	83 ec 18             	sub    esp,0x18
c0009932:	68 36 28 02 c0       	push   0xc0022836
c0009937:	e8 cd a9 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000993c:	b8 00 00 00 00       	mov    eax,0x0
c0009941:	83 c4 1c             	add    esp,0x1c
c0009944:	c3                   	ret    

c0009945 <munmap>:
c0009945:	83 ec 18             	sub    esp,0x18
c0009948:	68 3b 28 02 c0       	push   0xc002283b
c000994d:	e8 b7 a9 00 00       	call   c0014309 <Krnl::panic(char const*)>
c0009952:	b8 00 00 00 00       	mov    eax,0x0
c0009957:	83 c4 1c             	add    esp,0x1c
c000995a:	c3                   	ret    

c000995b <liballoc_lock()>:
c000995b:	fa                   	cli    
c000995c:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0009962:	b8 00 00 00 00       	mov    eax,0x0
c0009967:	c3                   	ret    

c0009968 <liballoc_unlock()>:
c0009968:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000996d:	48                   	dec    eax
c000996e:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0009973:	75 01                	jne    c0009976 <liballoc_unlock()+0xe>
c0009975:	fb                   	sti    
c0009976:	b8 00 00 00 00       	mov    eax,0x0
c000997b:	c3                   	ret    

c000997c <liballoc_alloc(int)>:
c000997c:	83 ec 10             	sub    esp,0x10
c000997f:	6a 01                	push   0x1
c0009981:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009985:	ff 35 90 65 02 c0    	push   DWORD PTR ds:0xc0026590
c000998b:	e8 66 24 00 00       	call   c000bdf6 <VAS::allocatePages(int, int)>
c0009990:	83 c4 1c             	add    esp,0x1c
c0009993:	c3                   	ret    

c0009994 <liballoc_free(void*, int)>:
c0009994:	83 ec 14             	sub    esp,0x14
c0009997:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000999b:	ff 35 90 65 02 c0    	push   DWORD PTR ds:0xc0026590
c00099a1:	e8 fa 20 00 00       	call   c000baa0 <VAS::freeAllocatedPages(unsigned long)>
c00099a6:	b8 00 00 00 00       	mov    eax,0x0
c00099ab:	83 c4 1c             	add    esp,0x1c
c00099ae:	c3                   	ret    

c00099af <realloc>:
c00099af:	83 ec 14             	sub    esp,0x14
c00099b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ba:	e8 a1 7b ff ff       	call   c0001560 <dlrealloc>
c00099bf:	83 c4 1c             	add    esp,0x1c
c00099c2:	c3                   	ret    

c00099c3 <malloc>:
c00099c3:	83 ec 18             	sub    esp,0x18
c00099c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ca:	e8 54 76 ff ff       	call   c0001023 <dlmalloc>
c00099cf:	83 c4 1c             	add    esp,0x1c
c00099d2:	c3                   	ret    

c00099d3 <free>:
c00099d3:	83 ec 18             	sub    esp,0x18
c00099d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099da:	e8 e9 72 ff ff       	call   c0000cc8 <dlfree>
c00099df:	83 c4 1c             	add    esp,0x1c
c00099e2:	c3                   	ret    

c00099e3 <rfree>:
c00099e3:	83 ec 18             	sub    esp,0x18
c00099e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ea:	e8 d9 72 ff ff       	call   c0000cc8 <dlfree>
c00099ef:	83 c4 1c             	add    esp,0x1c
c00099f2:	c3                   	ret    

c00099f3 <calloc>:
c00099f3:	56                   	push   esi
c00099f4:	53                   	push   ebx
c00099f5:	83 ec 10             	sub    esp,0x10
c00099f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00099fc:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a01:	53                   	push   ebx
c0009a02:	e8 bc ff ff ff       	call   c00099c3 <malloc>
c0009a07:	89 c6                	mov    esi,eax
c0009a09:	83 c4 0c             	add    esp,0xc
c0009a0c:	53                   	push   ebx
c0009a0d:	6a 00                	push   0x0
c0009a0f:	50                   	push   eax
c0009a10:	e8 6f 6c ff ff       	call   c0000684 <memset>
c0009a15:	89 f0                	mov    eax,esi
c0009a17:	83 c4 14             	add    esp,0x14
c0009a1a:	5b                   	pop    ebx
c0009a1b:	5e                   	pop    esi
c0009a1c:	c3                   	ret    

c0009a1d <Krnl::setBootMessage(char const*)>:
c0009a1d:	57                   	push   edi
c0009a1e:	56                   	push   esi
c0009a1f:	53                   	push   ebx
c0009a20:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a26:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a2d:	68 9e 00 00 00       	push   0x9e
c0009a32:	6a 00                	push   0x0
c0009a34:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a38:	56                   	push   esi
c0009a39:	e8 46 6c ff ff       	call   c0000684 <memset>
c0009a3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a41:	e8 5a 6c ff ff       	call   c00006a0 <strlen>
c0009a46:	ba 50 00 00 00       	mov    edx,0x50
c0009a4b:	83 c4 10             	add    esp,0x10
c0009a4e:	29 c2                	sub    edx,eax
c0009a50:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009a54:	d1 ea                	shr    edx,1
c0009a56:	84 c0                	test   al,al
c0009a58:	74 19                	je     c0009a73 <Krnl::setBootMessage(char const*)+0x56>
c0009a5a:	01 d2                	add    edx,edx
c0009a5c:	43                   	inc    ebx
c0009a5d:	01 f2                	add    edx,esi
c0009a5f:	80 cc 0f             	or     ah,0xf
c0009a62:	83 c2 02             	add    edx,0x2
c0009a65:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009a69:	43                   	inc    ebx
c0009a6a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009a6f:	84 c0                	test   al,al
c0009a71:	75 ec                	jne    c0009a5f <Krnl::setBootMessage(char const*)+0x42>
c0009a73:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009a78:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009a7f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009a85:	5b                   	pop    ebx
c0009a86:	5e                   	pop    esi
c0009a87:	5f                   	pop    edi
c0009a88:	c3                   	ret    

c0009a89 <kernel_main>:
c0009a89:	57                   	push   edi
c0009a8a:	bf f9 03 00 00       	mov    edi,0x3f9
c0009a8f:	56                   	push   esi
c0009a90:	89 fa                	mov    edx,edi
c0009a92:	53                   	push   ebx
c0009a93:	31 f6                	xor    esi,esi
c0009a95:	83 ec 2c             	sub    esp,0x2c
c0009a98:	89 f0                	mov    eax,esi
c0009a9a:	ee                   	out    dx,al
c0009a9b:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009aa0:	b0 80                	mov    al,0x80
c0009aa2:	89 da                	mov    edx,ebx
c0009aa4:	ee                   	out    dx,al
c0009aa5:	b1 03                	mov    cl,0x3
c0009aa7:	ba f8 03 00 00       	mov    edx,0x3f8
c0009aac:	88 c8                	mov    al,cl
c0009aae:	ee                   	out    dx,al
c0009aaf:	89 f0                	mov    eax,esi
c0009ab1:	89 fa                	mov    edx,edi
c0009ab3:	ee                   	out    dx,al
c0009ab4:	88 c8                	mov    al,cl
c0009ab6:	89 da                	mov    edx,ebx
c0009ab8:	ee                   	out    dx,al
c0009ab9:	b0 c7                	mov    al,0xc7
c0009abb:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ac0:	ee                   	out    dx,al
c0009ac1:	b0 0b                	mov    al,0xb
c0009ac3:	ba fc 03 00 00       	mov    edx,0x3fc
c0009ac8:	ee                   	out    dx,al
c0009ac9:	68 74 28 02 c0       	push   0xc0022874
c0009ace:	e8 55 2f 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009ad3:	e8 b8 09 00 00       	call   c000a490 <installVgaTextImplementation()>
c0009ad8:	0f b6 05 a0 56 02 c0 	movzx  eax,BYTE PTR ds:0xc00256a0
c0009adf:	83 c4 10             	add    esp,0x10
c0009ae2:	84 c0                	test   al,al
c0009ae4:	74 6c                	je     c0009b52 <kernel_main+0xc9>
c0009ae6:	31 db                	xor    ebx,ebx
c0009ae8:	bf 0a 00 00 00       	mov    edi,0xa
c0009aed:	be 05 00 00 00       	mov    esi,0x5
c0009af2:	31 c9                	xor    ecx,ecx
c0009af4:	eb 2a                	jmp    c0009b20 <kernel_main+0x97>
c0009af6:	3c 0d                	cmp    al,0xd
c0009af8:	74 1a                	je     c0009b14 <kernel_main+0x8b>
c0009afa:	3c 0a                	cmp    al,0xa
c0009afc:	74 40                	je     c0009b3e <kernel_main+0xb5>
c0009afe:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b01:	80 cc 0e             	or     ah,0xe
c0009b04:	c1 e2 04             	shl    edx,0x4
c0009b07:	01 ca                	add    edx,ecx
c0009b09:	41                   	inc    ecx
c0009b0a:	01 fa                	add    edx,edi
c0009b0c:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b14:	43                   	inc    ebx
c0009b15:	0f b6 83 a0 56 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda960]
c0009b1c:	84 c0                	test   al,al
c0009b1e:	74 32                	je     c0009b52 <kernel_main+0xc9>
c0009b20:	80 b9 d6 56 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffda92a],0xdb
c0009b27:	75 cd                	jne    c0009af6 <kernel_main+0x6d>
c0009b29:	0f b6 91 d5 56 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffda92b]
c0009b30:	83 e2 fe             	and    edx,0xfffffffe
c0009b33:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009b39:	75 bb                	jne    c0009af6 <kernel_main+0x6d>
c0009b3b:	47                   	inc    edi
c0009b3c:	eb b8                	jmp    c0009af6 <kernel_main+0x6d>
c0009b3e:	43                   	inc    ebx
c0009b3f:	46                   	inc    esi
c0009b40:	31 c9                	xor    ecx,ecx
c0009b42:	0f b6 83 a0 56 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda960]
c0009b49:	bf 0a 00 00 00       	mov    edi,0xa
c0009b4e:	84 c0                	test   al,al
c0009b50:	75 ce                	jne    c0009b20 <kernel_main+0x97>
c0009b52:	83 ec 0c             	sub    esp,0xc
c0009b55:	68 8c 28 02 c0       	push   0xc002288c
c0009b5a:	e8 be fe ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009b5f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009b64:	a3 40 64 02 c0       	mov    ds:0xc0026440,eax
c0009b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0009b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b7b:	e8 cb 03 00 00       	call   c0009f4b <Phys::physicalMemorySetup(unsigned int)>
c0009b80:	e8 87 1c 00 00       	call   c000b80c <Virt::virtualMemorySetup()>
c0009b85:	58                   	pop    eax
c0009b86:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0009b8a:	53                   	push   ebx
c0009b8b:	e8 38 1d 00 00       	call   c000b8c8 <VAS::VAS()>
c0009b90:	89 1d 90 65 02 c0    	mov    DWORD PTR ds:0xc0026590,ebx
c0009b96:	e8 85 64 ff ff       	call   c0000020 <callGlobalConstructors>
c0009b9b:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0009ba2:	e8 1c fe ff ff       	call   c00099c3 <malloc>
c0009ba7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009baa:	89 c6                	mov    esi,eax
c0009bac:	e8 09 f0 ff ff       	call   c0008bba <Computer::Computer()>
c0009bb1:	6a 00                	push   0x0
c0009bb3:	89 35 28 64 02 c0    	mov    DWORD PTR ds:0xc0026428,esi
c0009bb9:	6a 00                	push   0x0
c0009bbb:	6a 00                	push   0x0
c0009bbd:	56                   	push   esi
c0009bbe:	e8 03 f4 ff ff       	call   c0008fc6 <Computer::open(int, int, void*)>
c0009bc3:	83 c4 14             	add    esp,0x14
c0009bc6:	53                   	push   ebx
c0009bc7:	e8 ac 1f 00 00       	call   c000bb78 <VAS::~VAS()>
c0009bcc:	83 c4 30             	add    esp,0x30
c0009bcf:	5b                   	pop    ebx
c0009bd0:	5e                   	pop    esi
c0009bd1:	5f                   	pop    edi
c0009bd2:	c3                   	ret    

c0009bd3 <Phys::allocateDMA(unsigned long)>:
c0009bd3:	55                   	push   ebp
c0009bd4:	31 ed                	xor    ebp,ebp
c0009bd6:	57                   	push   edi
c0009bd7:	56                   	push   esi
c0009bd8:	53                   	push   ebx
c0009bd9:	31 db                	xor    ebx,ebx
c0009bdb:	83 ec 18             	sub    esp,0x18
c0009bde:	68 ab 28 02 c0       	push   0xc00228ab
c0009be3:	e8 40 2e 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009be8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bec:	31 d2                	xor    edx,edx
c0009bee:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0009bf4:	83 c4 10             	add    esp,0x10
c0009bf7:	c1 ee 0c             	shr    esi,0xc
c0009bfa:	31 c9                	xor    ecx,ecx
c0009bfc:	eb 17                	jmp    c0009c15 <Phys::allocateDMA(unsigned long)+0x42>
c0009bfe:	85 c9                	test   ecx,ecx
c0009c00:	75 04                	jne    c0009c06 <Phys::allocateDMA(unsigned long)+0x33>
c0009c02:	89 d5                	mov    ebp,edx
c0009c04:	89 d3                	mov    ebx,edx
c0009c06:	8d 41 01             	lea    eax,[ecx+0x1]
c0009c09:	39 c6                	cmp    esi,eax
c0009c0b:	74 23                	je     c0009c30 <Phys::allocateDMA(unsigned long)+0x5d>
c0009c0d:	42                   	inc    edx
c0009c0e:	89 c1                	mov    ecx,eax
c0009c10:	83 fa 2f             	cmp    edx,0x2f
c0009c13:	7f 11                	jg     c0009c26 <Phys::allocateDMA(unsigned long)+0x53>
c0009c15:	80 ba 80 64 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd9b80],0x0
c0009c1c:	74 e0                	je     c0009bfe <Phys::allocateDMA(unsigned long)+0x2b>
c0009c1e:	31 c9                	xor    ecx,ecx
c0009c20:	42                   	inc    edx
c0009c21:	83 fa 2f             	cmp    edx,0x2f
c0009c24:	7e ef                	jle    c0009c15 <Phys::allocateDMA(unsigned long)+0x42>
c0009c26:	83 c4 0c             	add    esp,0xc
c0009c29:	31 c0                	xor    eax,eax
c0009c2b:	5b                   	pop    ebx
c0009c2c:	5e                   	pop    esi
c0009c2d:	5f                   	pop    edi
c0009c2e:	5d                   	pop    ebp
c0009c2f:	c3                   	ret    
c0009c30:	8d 14 33             	lea    edx,[ebx+esi*1]
c0009c33:	89 d7                	mov    edi,edx
c0009c35:	4f                   	dec    edi
c0009c36:	79 03                	jns    c0009c3b <Phys::allocateDMA(unsigned long)+0x68>
c0009c38:	8d 7a 0e             	lea    edi,[edx+0xe]
c0009c3b:	c1 ff 04             	sar    edi,0x4
c0009c3e:	89 da                	mov    edx,ebx
c0009c40:	c1 fa 04             	sar    edx,0x4
c0009c43:	39 fa                	cmp    edx,edi
c0009c45:	75 43                	jne    c0009c8a <Phys::allocateDMA(unsigned long)+0xb7>
c0009c47:	85 c0                	test   eax,eax
c0009c49:	74 1a                	je     c0009c65 <Phys::allocateDMA(unsigned long)+0x92>
c0009c4b:	be 80 64 02 c0       	mov    esi,0xc0026480
c0009c50:	8d 93 80 64 02 c0    	lea    edx,[ebx-0x3ffd9b80]
c0009c56:	f7 d6                	not    esi
c0009c58:	29 de                	sub    esi,ebx
c0009c5a:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009c5d:	42                   	inc    edx
c0009c5e:	8d 04 16             	lea    eax,[esi+edx*1]
c0009c61:	39 c1                	cmp    ecx,eax
c0009c63:	7f f5                	jg     c0009c5a <Phys::allocateDMA(unsigned long)+0x87>
c0009c65:	83 ec 0c             	sub    esp,0xc
c0009c68:	68 c4 28 02 c0       	push   0xc00228c4
c0009c6d:	e8 b6 2d 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009c72:	83 c4 10             	add    esp,0x10
c0009c75:	85 ff                	test   edi,edi
c0009c77:	74 17                	je     c0009c90 <Phys::allocateDMA(unsigned long)+0xbd>
c0009c79:	83 c4 0c             	add    esp,0xc
c0009c7c:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c0009c82:	5b                   	pop    ebx
c0009c83:	c1 e0 0c             	shl    eax,0xc
c0009c86:	5e                   	pop    esi
c0009c87:	5f                   	pop    edi
c0009c88:	5d                   	pop    ebp
c0009c89:	c3                   	ret    
c0009c8a:	89 ea                	mov    edx,ebp
c0009c8c:	31 c9                	xor    ecx,ecx
c0009c8e:	eb 90                	jmp    c0009c20 <Phys::allocateDMA(unsigned long)+0x4d>
c0009c90:	83 c4 0c             	add    esp,0xc
c0009c93:	c1 e3 0c             	shl    ebx,0xc
c0009c96:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c0009c9c:	5b                   	pop    ebx
c0009c9d:	5e                   	pop    esi
c0009c9e:	5f                   	pop    edi
c0009c9f:	5d                   	pop    ebp
c0009ca0:	c3                   	ret    

c0009ca1 <Phys::freeDMA(unsigned long, unsigned long)>:
c0009ca1:	83 ec 18             	sub    esp,0x18
c0009ca4:	68 db 28 02 c0       	push   0xc00228db
c0009ca9:	e8 7a 2d 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009cae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009cb2:	83 c4 10             	add    esp,0x10
c0009cb5:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c0009cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cbf:	c1 e9 0c             	shr    ecx,0xc
c0009cc2:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c0009cca:	76 29                	jbe    c0009cf5 <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c0009ccc:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c0009cd2:	c1 ea 0c             	shr    edx,0xc
c0009cd5:	83 c2 10             	add    edx,0x10
c0009cd8:	85 c9                	test   ecx,ecx
c0009cda:	74 15                	je     c0009cf1 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c0009cdc:	8d 82 80 64 02 c0    	lea    eax,[edx-0x3ffd9b80]
c0009ce2:	8d 94 11 80 64 02 c0 	lea    edx,[ecx+edx*1-0x3ffd9b80]
c0009ce9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009cec:	40                   	inc    eax
c0009ced:	39 d0                	cmp    eax,edx
c0009cef:	75 f8                	jne    c0009ce9 <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c0009cf1:	83 c4 0c             	add    esp,0xc
c0009cf4:	c3                   	ret    
c0009cf5:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c0009cfb:	c1 ea 0c             	shr    edx,0xc
c0009cfe:	eb d8                	jmp    c0009cd8 <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c0009d00 <Phys::setPageState(unsigned long, bool)>:
c0009d00:	56                   	push   esi
c0009d01:	ba 01 00 00 00       	mov    edx,0x1
c0009d06:	53                   	push   ebx
c0009d07:	8b 35 e4 57 02 c0    	mov    esi,DWORD PTR ds:0xc00257e4
c0009d0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d11:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009d15:	89 c8                	mov    eax,ecx
c0009d17:	83 e1 07             	and    ecx,0x7
c0009d1a:	c1 e8 03             	shr    eax,0x3
c0009d1d:	d3 e3                	shl    ebx,cl
c0009d1f:	01 c6                	add    esi,eax
c0009d21:	d3 e2                	shl    edx,cl
c0009d23:	f7 d2                	not    edx
c0009d25:	20 16                	and    BYTE PTR [esi],dl
c0009d27:	03 05 e4 57 02 c0    	add    eax,DWORD PTR ds:0xc00257e4
c0009d2d:	08 18                	or     BYTE PTR [eax],bl
c0009d2f:	5b                   	pop    ebx
c0009d30:	5e                   	pop    esi
c0009d31:	c3                   	ret    

c0009d32 <Phys::getPageState(unsigned long)>:
c0009d32:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009d36:	8b 15 e4 57 02 c0    	mov    edx,DWORD PTR ds:0xc00257e4
c0009d3c:	89 c8                	mov    eax,ecx
c0009d3e:	83 e1 07             	and    ecx,0x7
c0009d41:	c1 e8 03             	shr    eax,0x3
c0009d44:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009d48:	d3 f8                	sar    eax,cl
c0009d4a:	83 e0 01             	and    eax,0x1
c0009d4d:	c3                   	ret    

c0009d4e <Phys::freePage(unsigned long)>:
c0009d4e:	53                   	push   ebx
c0009d4f:	83 ec 10             	sub    esp,0x10
c0009d52:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009d56:	53                   	push   ebx
c0009d57:	68 f1 28 02 c0       	push   0xc00228f1
c0009d5c:	e8 c7 2c 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009d61:	83 c4 10             	add    esp,0x10
c0009d64:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c0009d6a:	76 3d                	jbe    c0009da9 <Phys::freePage(unsigned long)+0x5b>
c0009d6c:	83 ec 0c             	sub    esp,0xc
c0009d6f:	c1 eb 0c             	shr    ebx,0xc
c0009d72:	53                   	push   ebx
c0009d73:	e8 ba ff ff ff       	call   c0009d32 <Phys::getPageState(unsigned long)>
c0009d78:	83 c4 10             	add    esp,0x10
c0009d7b:	84 c0                	test   al,al
c0009d7d:	74 19                	je     c0009d98 <Phys::freePage(unsigned long)+0x4a>
c0009d7f:	83 ec 08             	sub    esp,0x8
c0009d82:	ff 0d 70 64 02 c0    	dec    DWORD PTR ds:0xc0026470
c0009d88:	6a 00                	push   0x0
c0009d8a:	53                   	push   ebx
c0009d8b:	e8 70 ff ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c0009d90:	83 c4 10             	add    esp,0x10
c0009d93:	83 c4 08             	add    esp,0x8
c0009d96:	5b                   	pop    ebx
c0009d97:	c3                   	ret    
c0009d98:	c7 44 24 10 04 29 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022904
c0009da0:	83 c4 08             	add    esp,0x8
c0009da3:	5b                   	pop    ebx
c0009da4:	e9 60 a5 00 00       	jmp    c0014309 <Krnl::panic(char const*)>
c0009da9:	83 ec 08             	sub    esp,0x8
c0009dac:	68 00 10 00 00       	push   0x1000
c0009db1:	53                   	push   ebx
c0009db2:	e8 ea fe ff ff       	call   c0009ca1 <Phys::freeDMA(unsigned long, unsigned long)>
c0009db7:	83 c4 10             	add    esp,0x10
c0009dba:	83 c4 08             	add    esp,0x8
c0009dbd:	5b                   	pop    ebx
c0009dbe:	c3                   	ret    

c0009dbf <Phys::allocatePage()>:
c0009dbf:	56                   	push   esi
c0009dc0:	53                   	push   ebx
c0009dc1:	83 ec 14             	sub    esp,0x14
c0009dc4:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0009dca:	89 f3                	mov    ebx,esi
c0009dcc:	eb 0a                	jmp    c0009dd8 <Phys::allocatePage()+0x19>
c0009dce:	89 1d 64 64 02 c0    	mov    DWORD PTR ds:0xc0026464,ebx
c0009dd4:	39 de                	cmp    esi,ebx
c0009dd6:	74 24                	je     c0009dfc <Phys::allocatePage()+0x3d>
c0009dd8:	53                   	push   ebx
c0009dd9:	e8 54 ff ff ff       	call   c0009d32 <Phys::getPageState(unsigned long)>
c0009dde:	5a                   	pop    edx
c0009ddf:	84 c0                	test   al,al
c0009de1:	74 76                	je     c0009e59 <Phys::allocatePage()+0x9a>
c0009de3:	43                   	inc    ebx
c0009de4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009dea:	75 e2                	jne    c0009dce <Phys::allocatePage()+0xf>
c0009dec:	31 db                	xor    ebx,ebx
c0009dee:	c7 05 64 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026464,0x0
c0009df8:	39 de                	cmp    esi,ebx
c0009dfa:	75 dc                	jne    c0009dd8 <Phys::allocatePage()+0x19>
c0009dfc:	83 ec 0c             	sub    esp,0xc
c0009dff:	68 38 29 02 c0       	push   0xc0022938
c0009e04:	e8 1f 2c 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009e09:	58                   	pop    eax
c0009e0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009e0f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0009e12:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0009e18:	e8 91 28 00 00       	call   c000c6ae <VAS::scanForEviction()>
c0009e1d:	83 c4 10             	add    esp,0x10
c0009e20:	85 c0                	test   eax,eax
c0009e22:	75 76                	jne    c0009e9a <Phys::allocatePage()+0xdb>
c0009e24:	83 ec 0c             	sub    esp,0xc
c0009e27:	68 00 10 00 00       	push   0x1000
c0009e2c:	e8 a2 fd ff ff       	call   c0009bd3 <Phys::allocateDMA(unsigned long)>
c0009e31:	83 c4 10             	add    esp,0x10
c0009e34:	85 c0                	test   eax,eax
c0009e36:	75 5c                	jne    c0009e94 <Phys::allocatePage()+0xd5>
c0009e38:	83 ec 0c             	sub    esp,0xc
c0009e3b:	68 50 29 02 c0       	push   0xc0022950
c0009e40:	e8 c4 a4 00 00       	call   c0014309 <Krnl::panic(char const*)>
c0009e45:	83 c4 10             	add    esp,0x10
c0009e48:	8b 1d 64 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026464
c0009e4e:	53                   	push   ebx
c0009e4f:	e8 de fe ff ff       	call   c0009d32 <Phys::getPageState(unsigned long)>
c0009e54:	5a                   	pop    edx
c0009e55:	84 c0                	test   al,al
c0009e57:	75 8a                	jne    c0009de3 <Phys::allocatePage()+0x24>
c0009e59:	6a 01                	push   0x1
c0009e5b:	53                   	push   ebx
c0009e5c:	e8 9f fe ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c0009e61:	5a                   	pop    edx
c0009e62:	a1 70 64 02 c0       	mov    eax,ds:0xc0026470
c0009e67:	59                   	pop    ecx
c0009e68:	40                   	inc    eax
c0009e69:	8b 15 64 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026464
c0009e6f:	a3 70 64 02 c0       	mov    ds:0xc0026470,eax
c0009e74:	c1 e2 0c             	shl    edx,0xc
c0009e77:	52                   	push   edx
c0009e78:	ff 35 74 64 02 c0    	push   DWORD PTR ds:0xc0026474
c0009e7e:	50                   	push   eax
c0009e7f:	68 1a 29 02 c0       	push   0xc002291a
c0009e84:	e8 9f 2b 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009e89:	a1 64 64 02 c0       	mov    eax,ds:0xc0026464
c0009e8e:	83 c4 10             	add    esp,0x10
c0009e91:	c1 e0 0c             	shl    eax,0xc
c0009e94:	83 c4 14             	add    esp,0x14
c0009e97:	5b                   	pop    ebx
c0009e98:	5e                   	pop    esi
c0009e99:	c3                   	ret    
c0009e9a:	83 ec 08             	sub    esp,0x8
c0009e9d:	89 c2                	mov    edx,eax
c0009e9f:	6a 01                	push   0x1
c0009ea1:	c1 ea 0c             	shr    edx,0xc
c0009ea4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ea8:	52                   	push   edx
c0009ea9:	e8 52 fe ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c0009eae:	83 c4 10             	add    esp,0x10
c0009eb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009eb5:	eb dd                	jmp    c0009e94 <Phys::allocatePage()+0xd5>

c0009eb7 <Phys::allocateContiguousPages(int)>:
c0009eb7:	57                   	push   edi
c0009eb8:	56                   	push   esi
c0009eb9:	53                   	push   ebx
c0009eba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009ebe:	fa                   	cli    
c0009ebf:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0009ec5:	31 db                	xor    ebx,ebx
c0009ec7:	85 db                	test   ebx,ebx
c0009ec9:	75 11                	jne    c0009edc <Phys::allocateContiguousPages(int)+0x25>
c0009ecb:	e8 ef fe ff ff       	call   c0009dbf <Phys::allocatePage()>
c0009ed0:	83 fe 01             	cmp    esi,0x1
c0009ed3:	89 c7                	mov    edi,eax
c0009ed5:	74 21                	je     c0009ef8 <Phys::allocateContiguousPages(int)+0x41>
c0009ed7:	bb 01 00 00 00       	mov    ebx,0x1
c0009edc:	e8 de fe ff ff       	call   c0009dbf <Phys::allocatePage()>
c0009ee1:	89 da                	mov    edx,ebx
c0009ee3:	c1 e2 0c             	shl    edx,0xc
c0009ee6:	01 fa                	add    edx,edi
c0009ee8:	39 c2                	cmp    edx,eax
c0009eea:	74 20                	je     c0009f0c <Phys::allocateContiguousPages(int)+0x55>
c0009eec:	bb 01 00 00 00       	mov    ebx,0x1
c0009ef1:	89 c7                	mov    edi,eax
c0009ef3:	83 fe 01             	cmp    esi,0x1
c0009ef6:	75 e4                	jne    c0009edc <Phys::allocateContiguousPages(int)+0x25>
c0009ef8:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0009efd:	48                   	dec    eax
c0009efe:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0009f03:	75 01                	jne    c0009f06 <Phys::allocateContiguousPages(int)+0x4f>
c0009f05:	fb                   	sti    
c0009f06:	89 f8                	mov    eax,edi
c0009f08:	5b                   	pop    ebx
c0009f09:	5e                   	pop    esi
c0009f0a:	5f                   	pop    edi
c0009f0b:	c3                   	ret    
c0009f0c:	43                   	inc    ebx
c0009f0d:	39 f3                	cmp    ebx,esi
c0009f0f:	75 b6                	jne    c0009ec7 <Phys::allocateContiguousPages(int)+0x10>
c0009f11:	eb e5                	jmp    c0009ef8 <Phys::allocateContiguousPages(int)+0x41>

c0009f13 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009f13:	56                   	push   esi
c0009f14:	53                   	push   ebx
c0009f15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009f19:	39 1d 68 64 02 c0    	cmp    DWORD PTR ds:0xc0026468,ebx
c0009f1f:	73 06                	jae    c0009f27 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009f21:	89 1d 68 64 02 c0    	mov    DWORD PTR ds:0xc0026468,ebx
c0009f27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f2b:	c1 eb 0c             	shr    ebx,0xc
c0009f2e:	c1 e8 0c             	shr    eax,0xc
c0009f31:	39 d8                	cmp    eax,ebx
c0009f33:	73 13                	jae    c0009f48 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009f35:	6a 00                	push   0x0
c0009f37:	8d 70 01             	lea    esi,[eax+0x1]
c0009f3a:	50                   	push   eax
c0009f3b:	e8 c0 fd ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c0009f40:	5a                   	pop    edx
c0009f41:	89 f0                	mov    eax,esi
c0009f43:	59                   	pop    ecx
c0009f44:	39 f3                	cmp    ebx,esi
c0009f46:	75 ed                	jne    c0009f35 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009f48:	5b                   	pop    ebx
c0009f49:	5e                   	pop    esi
c0009f4a:	c3                   	ret    

c0009f4b <Phys::physicalMemorySetup(unsigned int)>:
c0009f4b:	55                   	push   ebp
c0009f4c:	57                   	push   edi
c0009f4d:	56                   	push   esi
c0009f4e:	53                   	push   ebx
c0009f4f:	83 ec 40             	sub    esp,0x40
c0009f52:	6a 30                	push   0x30
c0009f54:	6a 00                	push   0x0
c0009f56:	68 80 64 02 c0       	push   0xc0026480
c0009f5b:	e8 24 67 ff ff       	call   c0000684 <memset>
c0009f60:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009f64:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f69:	05 00 10 00 00       	add    eax,0x1000
c0009f6e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009f72:	5b                   	pop    ebx
c0009f73:	31 db                	xor    ebx,ebx
c0009f75:	5e                   	pop    esi
c0009f76:	50                   	push   eax
c0009f77:	68 5e 29 02 c0       	push   0xc002295e
c0009f7c:	e8 a7 2a 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0009f81:	83 c4 10             	add    esp,0x10
c0009f84:	83 ec 08             	sub    esp,0x8
c0009f87:	6a 01                	push   0x1
c0009f89:	53                   	push   ebx
c0009f8a:	43                   	inc    ebx
c0009f8b:	e8 70 fd ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c0009f90:	83 c4 10             	add    esp,0x10
c0009f93:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009f99:	75 e9                	jne    c0009f84 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0009f9b:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0009fa2:	66 85 c0             	test   ax,ax
c0009fa5:	0f 84 8e 01 00 00    	je     c000a139 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c0009fab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009faf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009fb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009fbb:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0009fc0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fc4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009fcc:	eb 15                	jmp    c0009fe3 <Phys::physicalMemorySetup(unsigned int)+0x98>
c0009fce:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009fd2:	83 c3 18             	add    ebx,0x18
c0009fd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009fd9:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009fdd:	0f 84 66 01 00 00    	je     c000a149 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0009fe3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009fe6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0009fe9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0009fec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff4:	8b 33                	mov    esi,DWORD PTR [ebx]
c0009ff6:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0009ff9:	01 f0                	add    eax,esi
c0009ffb:	55                   	push   ebp
c0009ffc:	11 fa                	adc    edx,edi
c0009ffe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a002:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a006:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a00a:	56                   	push   esi
c000a00b:	68 a0 29 02 c0       	push   0xc00229a0
c000a010:	e8 13 2a 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000a015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a019:	83 c4 10             	add    esp,0x10
c000a01c:	09 f8                	or     eax,edi
c000a01e:	0f 85 25 01 00 00    	jne    c000a149 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a024:	4d                   	dec    ebp
c000a025:	75 a7                	jne    c0009fce <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a027:	ba 00 00 08 00       	mov    edx,0x80000
c000a02c:	89 c1                	mov    ecx,eax
c000a02e:	39 f2                	cmp    edx,esi
c000a030:	19 f9                	sbb    ecx,edi
c000a032:	0f 82 a7 00 00 00    	jb     c000a0df <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a038:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a03c:	89 c1                	mov    ecx,eax
c000a03e:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a042:	0f 83 97 00 00 00    	jae    c000a0df <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a048:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a04d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a051:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a055:	39 fa                	cmp    edx,edi
c000a057:	19 e8                	sbb    eax,ebp
c000a059:	0f 82 14 01 00 00    	jb     c000a173 <Phys::physicalMemorySetup(unsigned int)+0x228>
c000a05f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a063:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a067:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a06d:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a072:	83 d5 ff             	adc    ebp,0xffffffff
c000a075:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a079:	31 c0                	xor    eax,eax
c000a07b:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a07f:	39 fa                	cmp    edx,edi
c000a081:	89 c1                	mov    ecx,eax
c000a083:	19 e9                	sbb    ecx,ebp
c000a085:	0f 83 43 ff ff ff    	jae    c0009fce <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a08b:	be 00 00 08 00       	mov    esi,0x80000
c000a090:	50                   	push   eax
c000a091:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a095:	57                   	push   edi
c000a096:	56                   	push   esi
c000a097:	68 c4 29 02 c0       	push   0xc00229c4
c000a09c:	e8 87 29 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000a0a1:	5a                   	pop    edx
c000a0a2:	59                   	pop    ecx
c000a0a3:	57                   	push   edi
c000a0a4:	56                   	push   esi
c000a0a5:	e8 69 fe ff ff       	call   c0009f13 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a0aa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a0ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a0b2:	83 c4 0c             	add    esp,0xc
c000a0b5:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a0b9:	03 05 74 64 02 c0    	add    eax,DWORD PTR ds:0xc0026474
c000a0bf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a0c6:	a3 74 64 02 c0       	mov    ds:0xc0026474,eax
c000a0cb:	52                   	push   edx
c000a0cc:	50                   	push   eax
c000a0cd:	68 84 29 02 c0       	push   0xc0022984
c000a0d2:	e8 51 29 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000a0d7:	83 c4 10             	add    esp,0x10
c000a0da:	e9 ef fe ff ff       	jmp    c0009fce <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0df:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a0e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a0e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a0eb:	39 ea                	cmp    edx,ebp
c000a0ed:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a0f1:	0f 82 d7 fe ff ff    	jb     c0009fce <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0f7:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a0fc:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a100:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a104:	0f 83 c4 fe ff ff    	jae    c0009fce <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a10a:	39 ee                	cmp    esi,ebp
c000a10c:	89 f8                	mov    eax,edi
c000a10e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a112:	0f 83 78 ff ff ff    	jae    c000a090 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a11c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a120:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a124:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a128:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a12c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a130:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a134:	e9 57 ff ff ff       	jmp    c000a090 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a139:	83 ec 0c             	sub    esp,0xc
c000a13c:	68 76 29 02 c0       	push   0xc0022976
c000a141:	e8 c3 a1 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000a146:	83 c4 10             	add    esp,0x10
c000a149:	bb 40 01 00 00       	mov    ebx,0x140
c000a14e:	83 ec 08             	sub    esp,0x8
c000a151:	6a 00                	push   0x0
c000a153:	53                   	push   ebx
c000a154:	43                   	inc    ebx
c000a155:	e8 a6 fb ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c000a15a:	ff 05 74 64 02 c0    	inc    DWORD PTR ds:0xc0026474
c000a160:	83 c4 10             	add    esp,0x10
c000a163:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000a169:	75 e3                	jne    c000a14e <Phys::physicalMemorySetup(unsigned int)+0x203>
c000a16b:	83 c4 3c             	add    esp,0x3c
c000a16e:	5b                   	pop    ebx
c000a16f:	5e                   	pop    esi
c000a170:	5f                   	pop    edi
c000a171:	5d                   	pop    ebp
c000a172:	c3                   	ret    
c000a173:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a17b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a183:	e9 d7 fe ff ff       	jmp    c000a05f <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a188 <Pipe::isAtty()>:
c000a188:	31 c0                	xor    eax,eax
c000a18a:	c3                   	ret    
c000a18b:	90                   	nop

c000a18c <Pipe::~Pipe()>:
c000a18c:	83 ec 0c             	sub    esp,0xc
c000a18f:	ba 30 2a 02 c0       	mov    edx,0xc0022a30
c000a194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a198:	89 10                	mov    DWORD PTR [eax],edx
c000a19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a19e:	83 ec 0c             	sub    esp,0xc
c000a1a1:	50                   	push   eax
c000a1a2:	e8 45 12 00 00       	call   c000b3ec <UnixFile::~UnixFile()>
c000a1a7:	83 c4 10             	add    esp,0x10
c000a1aa:	90                   	nop
c000a1ab:	83 c4 0c             	add    esp,0xc
c000a1ae:	c3                   	ret    
c000a1af:	90                   	nop

c000a1b0 <Pipe::~Pipe()>:
c000a1b0:	83 ec 0c             	sub    esp,0xc
c000a1b3:	83 ec 0c             	sub    esp,0xc
c000a1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1ba:	e8 cd ff ff ff       	call   c000a18c <Pipe::~Pipe()>
c000a1bf:	83 c4 10             	add    esp,0x10
c000a1c2:	83 ec 08             	sub    esp,0x8
c000a1c5:	6a 20                	push   0x20
c000a1c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1cb:	e8 77 27 00 00       	call   c000c947 <operator delete(void*, unsigned long)>
c000a1d0:	83 c4 10             	add    esp,0x10
c000a1d3:	83 c4 0c             	add    esp,0xc
c000a1d6:	c3                   	ret    
c000a1d7:	90                   	nop

c000a1d8 <Pipe::read(unsigned long long, void*, int*)>:
c000a1d8:	55                   	push   ebp
c000a1d9:	57                   	push   edi
c000a1da:	56                   	push   esi
c000a1db:	53                   	push   ebx
c000a1dc:	83 ec 1c             	sub    esp,0x1c
c000a1df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a1e3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a1e7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a1eb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a1ee:	89 c8                	mov    eax,ecx
c000a1f0:	99                   	cdq    
c000a1f1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a1f5:	74 24                	je     c000a21b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a1f7:	39 f9                	cmp    ecx,edi
c000a1f9:	89 d1                	mov    ecx,edx
c000a1fb:	19 f1                	sbb    ecx,esi
c000a1fd:	73 1c                	jae    c000a21b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a1ff:	fa                   	cli    
c000a200:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c000a206:	e8 f1 dc 00 00       	call   c0017efc <schedule()>
c000a20b:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000a210:	48                   	dec    eax
c000a211:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000a216:	75 d3                	jne    c000a1eb <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a218:	fb                   	sti    
c000a219:	eb d0                	jmp    c000a1eb <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a21b:	39 f8                	cmp    eax,edi
c000a21d:	89 d1                	mov    ecx,edx
c000a21f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a222:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a226:	19 f1                	sbb    ecx,esi
c000a228:	73 07                	jae    c000a231 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a22a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a22d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a231:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a234:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a237:	29 f7                	sub    edi,esi
c000a239:	89 f8                	mov    eax,edi
c000a23b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a23f:	99                   	cdq    
c000a240:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a243:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a247:	19 d0                	sbb    eax,edx
c000a249:	73 07                	jae    c000a252 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a24b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a24e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a252:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a255:	89 ea                	mov    edx,ebp
c000a257:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a25b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a260:	74 0d                	je     c000a26f <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a262:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a265:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a269:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a26d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a26f:	85 d2                	test   edx,edx
c000a271:	74 11                	je     c000a284 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a277:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a27a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a27e:	89 d1                	mov    ecx,edx
c000a280:	89 c7                	mov    edi,eax
c000a282:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a284:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a287:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a28a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a28d:	99                   	cdq    
c000a28e:	89 f7                	mov    edi,esi
c000a290:	03 04 24             	add    eax,DWORD PTR [esp]
c000a293:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a297:	c1 ff 1f             	sar    edi,0x1f
c000a29a:	57                   	push   edi
c000a29b:	56                   	push   esi
c000a29c:	52                   	push   edx
c000a29d:	50                   	push   eax
c000a29e:	e8 f1 6d 01 00       	call   c0021094 <__umoddi3>
c000a2a3:	83 c4 10             	add    esp,0x10
c000a2a6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a2a9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a2ae:	75 10                	jne    c000a2c0 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a2b0:	83 ec 0c             	sub    esp,0xc
c000a2b3:	68 ed 29 02 c0       	push   0xc00229ed
c000a2b8:	e8 4c a0 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000a2bd:	83 c4 10             	add    esp,0x10
c000a2c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a2c4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a2c7:	89 10                	mov    DWORD PTR [eax],edx
c000a2c9:	83 c4 1c             	add    esp,0x1c
c000a2cc:	31 c0                	xor    eax,eax
c000a2ce:	5b                   	pop    ebx
c000a2cf:	5e                   	pop    esi
c000a2d0:	5f                   	pop    edi
c000a2d1:	5d                   	pop    ebp
c000a2d2:	c3                   	ret    
c000a2d3:	90                   	nop

c000a2d4 <Pipe::write(unsigned long long, void*, int*)>:
c000a2d4:	55                   	push   ebp
c000a2d5:	57                   	push   edi
c000a2d6:	56                   	push   esi
c000a2d7:	53                   	push   ebx
c000a2d8:	83 ec 1c             	sub    esp,0x1c
c000a2db:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a2df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a2e3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a2e6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a2ea:	89 04 24             	mov    DWORD PTR [esp],eax
c000a2ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a2f1:	89 d8                	mov    eax,ebx
c000a2f3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a2f6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a2fa:	89 d6                	mov    esi,edx
c000a2fc:	89 d7                	mov    edi,edx
c000a2fe:	c1 ff 1f             	sar    edi,0x1f
c000a301:	03 34 24             	add    esi,DWORD PTR [esp]
c000a304:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a308:	c1 f8 1f             	sar    eax,0x1f
c000a30b:	39 f3                	cmp    ebx,esi
c000a30d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a311:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a315:	19 f8                	sbb    eax,edi
c000a317:	b8 01 00 00 00       	mov    eax,0x1
c000a31c:	72 6e                	jb     c000a38c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a31e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a321:	01 d0                	add    eax,edx
c000a323:	99                   	cdq    
c000a324:	f7 fb                	idiv   ebx
c000a326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a32a:	29 d3                	sub    ebx,edx
c000a32c:	89 d7                	mov    edi,edx
c000a32e:	89 de                	mov    esi,ebx
c000a330:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a333:	c1 fb 1f             	sar    ebx,0x1f
c000a336:	39 f2                	cmp    edx,esi
c000a338:	19 d8                	sbb    eax,ebx
c000a33a:	b8 00 00 00 00       	mov    eax,0x0
c000a33f:	72 04                	jb     c000a345 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a341:	89 d0                	mov    eax,edx
c000a343:	29 f0                	sub    eax,esi
c000a345:	89 d3                	mov    ebx,edx
c000a347:	29 c3                	sub    ebx,eax
c000a349:	74 0b                	je     c000a356 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a34b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a34e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a352:	89 d9                	mov    ecx,ebx
c000a354:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a356:	85 c0                	test   eax,eax
c000a358:	74 0d                	je     c000a367 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a35a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a35e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a361:	89 de                	mov    esi,ebx
c000a363:	89 c1                	mov    ecx,eax
c000a365:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a367:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a36a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a36f:	75 10                	jne    c000a381 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a371:	83 ec 0c             	sub    esp,0xc
c000a374:	68 09 2a 02 c0       	push   0xc0022a09
c000a379:	e8 8b 9f 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000a37e:	83 c4 10             	add    esp,0x10
c000a381:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a385:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a388:	89 08                	mov    DWORD PTR [eax],ecx
c000a38a:	31 c0                	xor    eax,eax
c000a38c:	83 c4 1c             	add    esp,0x1c
c000a38f:	5b                   	pop    ebx
c000a390:	5e                   	pop    esi
c000a391:	5f                   	pop    edi
c000a392:	5d                   	pop    ebp
c000a393:	c3                   	ret    

c000a394 <Pipe::Pipe(int)>:
c000a394:	83 ec 0c             	sub    esp,0xc
c000a397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a39b:	83 ec 08             	sub    esp,0x8
c000a39e:	6a 00                	push   0x0
c000a3a0:	50                   	push   eax
c000a3a1:	e8 64 0e 00 00       	call   c000b20a <UnixFile::UnixFile(int)>
c000a3a6:	83 c4 10             	add    esp,0x10
c000a3a9:	ba 30 2a 02 c0       	mov    edx,0xc0022a30
c000a3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3b2:	89 10                	mov    DWORD PTR [eax],edx
c000a3b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a3bc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a3bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3c3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3ce:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a3d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a3d9:	83 ec 0c             	sub    esp,0xc
c000a3dc:	50                   	push   eax
c000a3dd:	e8 e1 f5 ff ff       	call   c00099c3 <malloc>
c000a3e2:	83 c4 10             	add    esp,0x10
c000a3e5:	89 c2                	mov    edx,eax
c000a3e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3eb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3f2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a3f6:	90                   	nop
c000a3f7:	83 c4 0c             	add    esp,0xc
c000a3fa:	c3                   	ret    
c000a3fb:	90                   	nop

c000a3fc <VgaText::isAtty()>:
c000a3fc:	b0 01                	mov    al,0x1
c000a3fe:	c3                   	ret    
c000a3ff:	90                   	nop

c000a400 <VgaText::~VgaText()>:
c000a400:	83 ec 0c             	sub    esp,0xc
c000a403:	ba b8 2a 02 c0       	mov    edx,0xc0022ab8
c000a408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a40c:	89 10                	mov    DWORD PTR [eax],edx
c000a40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a412:	83 ec 0c             	sub    esp,0xc
c000a415:	50                   	push   eax
c000a416:	e8 d1 0f 00 00       	call   c000b3ec <UnixFile::~UnixFile()>
c000a41b:	83 c4 10             	add    esp,0x10
c000a41e:	90                   	nop
c000a41f:	83 c4 0c             	add    esp,0xc
c000a422:	c3                   	ret    
c000a423:	90                   	nop

c000a424 <VgaText::~VgaText()>:
c000a424:	83 ec 0c             	sub    esp,0xc
c000a427:	83 ec 0c             	sub    esp,0xc
c000a42a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a42e:	e8 cd ff ff ff       	call   c000a400 <VgaText::~VgaText()>
c000a433:	83 c4 10             	add    esp,0x10
c000a436:	83 ec 08             	sub    esp,0x8
c000a439:	68 c4 02 00 00       	push   0x2c4
c000a43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a442:	e8 00 25 00 00       	call   c000c947 <operator delete(void*, unsigned long)>
c000a447:	83 c4 10             	add    esp,0x10
c000a44a:	83 c4 0c             	add    esp,0xc
c000a44d:	c3                   	ret    

c000a44e <VgaText::read(unsigned long long, void*, int*)>:
c000a44e:	83 ec 10             	sub    esp,0x10
c000a451:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a45d:	e8 5c 58 00 00       	call   c000fcbe <readKeyboard(VgaText*, char*, unsigned long)>
c000a462:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a466:	89 02                	mov    DWORD PTR [edx],eax
c000a468:	31 c0                	xor    eax,eax
c000a46a:	83 c4 1c             	add    esp,0x1c
c000a46d:	c3                   	ret    

c000a46e <setTerminalScrollLock(bool)>:
c000a46e:	c3                   	ret    

c000a46f <addToTerminalCycle(VgaText*)>:
c000a46f:	8b 15 e0 64 02 c0    	mov    edx,DWORD PTR ds:0xc00264e0
c000a475:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a479:	85 d2                	test   edx,edx
c000a47b:	75 09                	jne    c000a486 <addToTerminalCycle(VgaText*)+0x17>
c000a47d:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a480:	a3 e0 64 02 c0       	mov    ds:0xc00264e0,eax
c000a485:	c3                   	ret    
c000a486:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a489:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a48c:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a48f:	c3                   	ret    

c000a490 <installVgaTextImplementation()>:
c000a490:	83 ec 10             	sub    esp,0x10
c000a493:	6a 20                	push   0x20
c000a495:	6a 00                	push   0x0
c000a497:	68 c0 64 02 c0       	push   0xc00264c0
c000a49c:	e8 e3 61 ff ff       	call   c0000684 <memset>
c000a4a1:	83 c4 1c             	add    esp,0x1c
c000a4a4:	c3                   	ret    

c000a4a5 <scrollTerminalScrollLock(int)>:
c000a4a5:	c3                   	ret    

c000a4a6 <VgaText::updateTitle()>:
c000a4a6:	53                   	push   ebx
c000a4a7:	31 c0                	xor    eax,eax
c000a4a9:	83 ec 58             	sub    esp,0x58
c000a4ac:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a4b0:	89 e1                	mov    ecx,esp
c000a4b2:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a4b6:	40                   	inc    eax
c000a4b7:	83 f8 50             	cmp    eax,0x50
c000a4ba:	75 f6                	jne    c000a4b2 <VgaText::updateTitle()+0xc>
c000a4bc:	31 c0                	xor    eax,eax
c000a4be:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a4c5:	84 db                	test   bl,bl
c000a4c7:	74 06                	je     c000a4cf <VgaText::updateTitle()+0x29>
c000a4c9:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a4cc:	40                   	inc    eax
c000a4cd:	eb ef                	jmp    c000a4be <VgaText::updateTitle()+0x18>
c000a4cf:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a4d2:	85 c0                	test   eax,eax
c000a4d4:	74 09                	je     c000a4df <VgaText::updateTitle()+0x39>
c000a4d6:	53                   	push   ebx
c000a4d7:	53                   	push   ebx
c000a4d8:	51                   	push   ecx
c000a4d9:	52                   	push   edx
c000a4da:	ff d0                	call   eax
c000a4dc:	83 c4 10             	add    esp,0x10
c000a4df:	83 c4 58             	add    esp,0x58
c000a4e2:	5b                   	pop    ebx
c000a4e3:	c3                   	ret    

c000a4e4 <VgaText::load()>:
c000a4e4:	53                   	push   ebx
c000a4e5:	31 c0                	xor    eax,eax
c000a4e7:	83 ec 58             	sub    esp,0x58
c000a4ea:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a4ee:	89 e2                	mov    edx,esp
c000a4f0:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a4f4:	40                   	inc    eax
c000a4f5:	83 f8 50             	cmp    eax,0x50
c000a4f8:	75 f6                	jne    c000a4f0 <VgaText::load()+0xc>
c000a4fa:	31 c0                	xor    eax,eax
c000a4fc:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a503:	84 c9                	test   cl,cl
c000a505:	74 06                	je     c000a50d <VgaText::load()+0x29>
c000a507:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a50a:	40                   	inc    eax
c000a50b:	eb ef                	jmp    c000a4fc <VgaText::load()+0x18>
c000a50d:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a510:	85 c0                	test   eax,eax
c000a512:	74 09                	je     c000a51d <VgaText::load()+0x39>
c000a514:	51                   	push   ecx
c000a515:	51                   	push   ecx
c000a516:	52                   	push   edx
c000a517:	53                   	push   ebx
c000a518:	ff d0                	call   eax
c000a51a:	83 c4 10             	add    esp,0x10
c000a51d:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a520:	85 c0                	test   eax,eax
c000a522:	74 09                	je     c000a52d <VgaText::load()+0x49>
c000a524:	83 ec 0c             	sub    esp,0xc
c000a527:	53                   	push   ebx
c000a528:	ff d0                	call   eax
c000a52a:	83 c4 10             	add    esp,0x10
c000a52d:	83 c4 58             	add    esp,0x58
c000a530:	5b                   	pop    ebx
c000a531:	c3                   	ret    

c000a532 <VgaText::updateCursor()>:
c000a532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a536:	39 05 e4 64 02 c0    	cmp    DWORD PTR ds:0xc00264e4,eax
c000a53c:	75 09                	jne    c000a547 <VgaText::updateCursor()+0x15>
c000a53e:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a541:	85 c0                	test   eax,eax
c000a543:	74 02                	je     c000a547 <VgaText::updateCursor()+0x15>
c000a545:	ff e0                	jmp    eax
c000a547:	c3                   	ret    

c000a548 <VgaText::doANSI_SGR(int)>:
c000a548:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a54c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a550:	85 d2                	test   edx,edx
c000a552:	75 0b                	jne    c000a55f <VgaText::doANSI_SGR(int)+0x17>
c000a554:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a557:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a55a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a55d:	eb 59                	jmp    c000a5b8 <VgaText::doANSI_SGR(int)+0x70>
c000a55f:	83 fa 07             	cmp    edx,0x7
c000a562:	75 0b                	jne    c000a56f <VgaText::doANSI_SGR(int)+0x27>
c000a564:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a567:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a56a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a56d:	eb 49                	jmp    c000a5b8 <VgaText::doANSI_SGR(int)+0x70>
c000a56f:	83 fa 1b             	cmp    edx,0x1b
c000a572:	74 e0                	je     c000a554 <VgaText::doANSI_SGR(int)+0xc>
c000a574:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a577:	83 f9 07             	cmp    ecx,0x7
c000a57a:	77 09                	ja     c000a585 <VgaText::doANSI_SGR(int)+0x3d>
c000a57c:	8b 14 8d 20 58 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda7e0]
c000a583:	eb 20                	jmp    c000a5a5 <VgaText::doANSI_SGR(int)+0x5d>
c000a585:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a588:	83 f9 07             	cmp    ecx,0x7
c000a58b:	77 09                	ja     c000a596 <VgaText::doANSI_SGR(int)+0x4e>
c000a58d:	8b 14 8d 20 58 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda7e0]
c000a594:	eb 22                	jmp    c000a5b8 <VgaText::doANSI_SGR(int)+0x70>
c000a596:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a599:	83 f9 07             	cmp    ecx,0x7
c000a59c:	77 0b                	ja     c000a5a9 <VgaText::doANSI_SGR(int)+0x61>
c000a59e:	8b 14 95 d8 56 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda928]
c000a5a5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a5a8:	c3                   	ret    
c000a5a9:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a5ac:	83 f9 07             	cmp    ecx,0x7
c000a5af:	77 0a                	ja     c000a5bb <VgaText::doANSI_SGR(int)+0x73>
c000a5b1:	8b 14 95 b0 56 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda950]
c000a5b8:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a5bb:	c3                   	ret    

c000a5bc <VgaText::setDefaultBgColour(VgaColour)>:
c000a5bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a5c4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a5c7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a5ca:	c3                   	ret    
c000a5cb:	90                   	nop

c000a5cc <VgaText::setDefaultFgColour(VgaColour)>:
c000a5cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a5d4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a5d7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a5da:	c3                   	ret    
c000a5db:	90                   	nop

c000a5dc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a5dc:	53                   	push   ebx
c000a5dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a5e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a5e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a5e9:	51                   	push   ecx
c000a5ea:	e8 cd ff ff ff       	call   c000a5bc <VgaText::setDefaultBgColour(VgaColour)>
c000a5ef:	58                   	pop    eax
c000a5f0:	5a                   	pop    edx
c000a5f1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a5f5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a5f9:	5b                   	pop    ebx
c000a5fa:	eb d0                	jmp    c000a5cc <VgaText::setDefaultFgColour(VgaColour)>

c000a5fc <VgaText::setTitleTextColour(VgaColour)>:
c000a5fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a600:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a604:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a607:	e9 9a fe ff ff       	jmp    c000a4a6 <VgaText::updateTitle()>

c000a60c <VgaText::setTitleColour(VgaColour)>:
c000a60c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a610:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a614:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a617:	e9 8a fe ff ff       	jmp    c000a4a6 <VgaText::updateTitle()>

c000a61c <VgaText::setTitle(char*)>:
c000a61c:	53                   	push   ebx
c000a61d:	83 ec 10             	sub    esp,0x10
c000a620:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a628:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a62e:	50                   	push   eax
c000a62f:	e8 0c 61 ff ff       	call   c0000740 <strcpy>
c000a634:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a638:	83 c4 18             	add    esp,0x18
c000a63b:	5b                   	pop    ebx
c000a63c:	e9 65 fe ff ff       	jmp    c000a4a6 <VgaText::updateTitle()>
c000a641:	90                   	nop

c000a642 <VgaText::combineColours(unsigned char, unsigned char)>:
c000a642:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a646:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a64b:	83 e0 0f             	and    eax,0xf
c000a64e:	c1 e2 04             	shl    edx,0x4
c000a651:	09 d0                	or     eax,edx
c000a653:	c3                   	ret    

c000a654 <VgaText::scrollScreen()>:
c000a654:	55                   	push   ebp
c000a655:	b9 01 00 00 00       	mov    ecx,0x1
c000a65a:	57                   	push   edi
c000a65b:	56                   	push   esi
c000a65c:	53                   	push   ebx
c000a65d:	83 ec 0c             	sub    esp,0xc
c000a660:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a664:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a66a:	31 ff                	xor    edi,edi
c000a66c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a66f:	83 f9 17             	cmp    ecx,0x17
c000a672:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a675:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a67c:	75 27                	jne    c000a6a5 <VgaText::scrollScreen()+0x51>
c000a67e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a681:	01 f5                	add    ebp,esi
c000a683:	f7 c7 01 00 00 00    	test   edi,0x1
c000a689:	74 16                	je     c000a6a1 <VgaText::scrollScreen()+0x4d>
c000a68b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a68f:	50                   	push   eax
c000a690:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a694:	50                   	push   eax
c000a695:	e8 a8 ff ff ff       	call   c000a642 <VgaText::combineColours(unsigned char, unsigned char)>
c000a69a:	5a                   	pop    edx
c000a69b:	5a                   	pop    edx
c000a69c:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a69f:	eb 04                	jmp    c000a6a5 <VgaText::scrollScreen()+0x51>
c000a6a1:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a6a5:	47                   	inc    edi
c000a6a6:	46                   	inc    esi
c000a6a7:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a6ad:	75 bd                	jne    c000a66c <VgaText::scrollScreen()+0x18>
c000a6af:	41                   	inc    ecx
c000a6b0:	83 f9 18             	cmp    ecx,0x18
c000a6b3:	75 af                	jne    c000a664 <VgaText::scrollScreen()+0x10>
c000a6b5:	39 1d e4 64 02 c0    	cmp    DWORD PTR ds:0xc00264e4,ebx
c000a6bb:	75 1b                	jne    c000a6d8 <VgaText::scrollScreen()+0x84>
c000a6bd:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a6c1:	74 05                	je     c000a6c8 <VgaText::scrollScreen()+0x74>
c000a6c3:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a6c6:	eb 10                	jmp    c000a6d8 <VgaText::scrollScreen()+0x84>
c000a6c8:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000a6cb:	85 c0                	test   eax,eax
c000a6cd:	74 09                	je     c000a6d8 <VgaText::scrollScreen()+0x84>
c000a6cf:	83 ec 0c             	sub    esp,0xc
c000a6d2:	53                   	push   ebx
c000a6d3:	ff d0                	call   eax
c000a6d5:	83 c4 10             	add    esp,0x10
c000a6d8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a6dc:	83 c4 0c             	add    esp,0xc
c000a6df:	5b                   	pop    ebx
c000a6e0:	5e                   	pop    esi
c000a6e1:	5f                   	pop    edi
c000a6e2:	5d                   	pop    ebp
c000a6e3:	e9 4a fe ff ff       	jmp    c000a532 <VgaText::updateCursor()>

c000a6e8 <VgaText::combineCharAndColour(char, unsigned char)>:
c000a6e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a6ed:	c1 e0 08             	shl    eax,0x8
c000a6f0:	89 c2                	mov    edx,eax
c000a6f2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a6f7:	09 d0                	or     eax,edx
c000a6f9:	c3                   	ret    

c000a6fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a6fa:	56                   	push   esi
c000a6fb:	53                   	push   ebx
c000a6fc:	51                   	push   ecx
c000a6fd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a701:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a706:	50                   	push   eax
c000a707:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a70c:	50                   	push   eax
c000a70d:	e8 30 ff ff ff       	call   c000a642 <VgaText::combineColours(unsigned char, unsigned char)>
c000a712:	5b                   	pop    ebx
c000a713:	0f b6 c0             	movzx  eax,al
c000a716:	5e                   	pop    esi
c000a717:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000a71c:	50                   	push   eax
c000a71d:	53                   	push   ebx
c000a71e:	e8 c5 ff ff ff       	call   c000a6e8 <VgaText::combineCharAndColour(char, unsigned char)>
c000a723:	5a                   	pop    edx
c000a724:	5e                   	pop    esi
c000a725:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000a728:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000a72e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000a732:	0f b7 d2             	movzx  edx,dx
c000a735:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000a739:	39 0d e4 64 02 c0    	cmp    DWORD PTR ds:0xc00264e4,ecx
c000a73f:	75 10                	jne    c000a751 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a741:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000a744:	85 c0                	test   eax,eax
c000a746:	74 09                	je     c000a751 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a748:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a74c:	5a                   	pop    edx
c000a74d:	5b                   	pop    ebx
c000a74e:	5e                   	pop    esi
c000a74f:	ff e0                	jmp    eax
c000a751:	58                   	pop    eax
c000a752:	5b                   	pop    ebx
c000a753:	5e                   	pop    esi
c000a754:	c3                   	ret    
c000a755:	90                   	nop

c000a756 <VgaText::getCursorX()>:
c000a756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a75a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a75d:	c3                   	ret    

c000a75e <VgaText::getCursorY()>:
c000a75e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a762:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a765:	c3                   	ret    

c000a766 <VgaText::setCursor(int, int)>:
c000a766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a76a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a76e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a771:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a775:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a778:	e9 b5 fd ff ff       	jmp    c000a532 <VgaText::updateCursor()>

c000a77d <setActiveTerminal(VgaText*)>:
c000a77d:	53                   	push   ebx
c000a77e:	83 ec 08             	sub    esp,0x8
c000a781:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a785:	85 db                	test   ebx,ebx
c000a787:	75 11                	jne    c000a79a <setActiveTerminal(VgaText*)+0x1d>
c000a789:	c7 44 24 10 44 2a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022a44
c000a791:	83 c4 08             	add    esp,0x8
c000a794:	5b                   	pop    ebx
c000a795:	e9 6f 9b 00 00       	jmp    c0014309 <Krnl::panic(char const*)>
c000a79a:	a1 e4 64 02 c0       	mov    eax,ds:0xc00264e4
c000a79f:	85 c0                	test   eax,eax
c000a7a1:	74 0c                	je     c000a7af <setActiveTerminal(VgaText*)+0x32>
c000a7a3:	83 ec 0c             	sub    esp,0xc
c000a7a6:	50                   	push   eax
c000a7a7:	e8 86 fd ff ff       	call   c000a532 <VgaText::updateCursor()>
c000a7ac:	83 c4 10             	add    esp,0x10
c000a7af:	89 1d e4 64 02 c0    	mov    DWORD PTR ds:0xc00264e4,ebx
c000a7b5:	51                   	push   ecx
c000a7b6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a7b9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a7bc:	53                   	push   ebx
c000a7bd:	e8 a4 ff ff ff       	call   c000a766 <VgaText::setCursor(int, int)>
c000a7c2:	83 c4 10             	add    esp,0x10
c000a7c5:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a7c9:	75 07                	jne    c000a7d2 <setActiveTerminal(VgaText*)+0x55>
c000a7cb:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000a7d2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7d6:	83 c4 08             	add    esp,0x8
c000a7d9:	5b                   	pop    ebx
c000a7da:	e9 05 fd ff ff       	jmp    c000a4e4 <VgaText::load()>

c000a7df <doTerminalCycle()>:
c000a7df:	83 ec 18             	sub    esp,0x18
c000a7e2:	a1 e0 64 02 c0       	mov    eax,ds:0xc00264e0
c000a7e7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000a7ea:	50                   	push   eax
c000a7eb:	a3 e0 64 02 c0       	mov    ds:0xc00264e0,eax
c000a7f0:	e8 88 ff ff ff       	call   c000a77d <setActiveTerminal(VgaText*)>
c000a7f5:	83 c4 1c             	add    esp,0x1c
c000a7f8:	c3                   	ret    
c000a7f9:	90                   	nop

c000a7fa <VgaText::setCursorX(int)>:
c000a7fa:	83 ec 10             	sub    esp,0x10
c000a7fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a801:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	50                   	push   eax
c000a809:	e8 58 ff ff ff       	call   c000a766 <VgaText::setCursor(int, int)>
c000a80e:	83 c4 1c             	add    esp,0x1c
c000a811:	c3                   	ret    

c000a812 <VgaText::setCursorY(int)>:
c000a812:	83 ec 10             	sub    esp,0x10
c000a815:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a81d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a820:	50                   	push   eax
c000a821:	e8 40 ff ff ff       	call   c000a766 <VgaText::setCursor(int, int)>
c000a826:	83 c4 1c             	add    esp,0x1c
c000a829:	c3                   	ret    

c000a82a <VgaText::incrementCursor(bool)>:
c000a82a:	56                   	push   esi
c000a82b:	53                   	push   ebx
c000a82c:	51                   	push   ecx
c000a82d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a831:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a835:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a838:	40                   	inc    eax
c000a839:	83 f8 50             	cmp    eax,0x50
c000a83c:	74 05                	je     c000a843 <VgaText::incrementCursor(bool)+0x19>
c000a83e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a841:	eb 24                	jmp    c000a867 <VgaText::incrementCursor(bool)+0x3d>
c000a843:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a846:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a84d:	8d 50 01             	lea    edx,[eax+0x1]
c000a850:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a853:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a856:	75 0f                	jne    c000a867 <VgaText::incrementCursor(bool)+0x3d>
c000a858:	83 ec 0c             	sub    esp,0xc
c000a85b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a85e:	53                   	push   ebx
c000a85f:	e8 f0 fd ff ff       	call   c000a654 <VgaText::scrollScreen()>
c000a864:	83 c4 10             	add    esp,0x10
c000a867:	89 f0                	mov    eax,esi
c000a869:	84 c0                	test   al,al
c000a86b:	74 0c                	je     c000a879 <VgaText::incrementCursor(bool)+0x4f>
c000a86d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a871:	5a                   	pop    edx
c000a872:	5b                   	pop    ebx
c000a873:	5e                   	pop    esi
c000a874:	e9 b9 fc ff ff       	jmp    c000a532 <VgaText::updateCursor()>
c000a879:	58                   	pop    eax
c000a87a:	5b                   	pop    ebx
c000a87b:	5e                   	pop    esi
c000a87c:	c3                   	ret    
c000a87d:	90                   	nop

c000a87e <VgaText::decrementCursor(bool)>:
c000a87e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a882:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a886:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a889:	85 c0                	test   eax,eax
c000a88b:	74 04                	je     c000a891 <VgaText::decrementCursor(bool)+0x13>
c000a88d:	48                   	dec    eax
c000a88e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a891:	84 c9                	test   cl,cl
c000a893:	74 09                	je     c000a89e <VgaText::decrementCursor(bool)+0x20>
c000a895:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a899:	e9 94 fc ff ff       	jmp    c000a532 <VgaText::updateCursor()>
c000a89e:	c3                   	ret    
c000a89f:	90                   	nop

c000a8a0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a8a0:	53                   	push   ebx
c000a8a1:	83 ec 08             	sub    esp,0x8
c000a8a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a8a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a8ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a8b0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a8b4:	3c 07                	cmp    al,0x7
c000a8b6:	75 2a                	jne    c000a8e2 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000a8b8:	a1 98 65 02 c0       	mov    eax,ds:0xc0026598
c000a8bd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a8c5:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000a8cd:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000a8d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8d9:	83 c4 08             	add    esp,0x8
c000a8dc:	5b                   	pop    ebx
c000a8dd:	e9 64 2f 00 00       	jmp    c000d846 <Buzzer::beep(int, int, bool)>
c000a8e2:	3c 0d                	cmp    al,0xd
c000a8e4:	75 09                	jne    c000a8ef <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000a8e6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a8ed:	eb 2c                	jmp    c000a91b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a8ef:	3c 0a                	cmp    al,0xa
c000a8f1:	75 31                	jne    c000a924 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000a8f3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a8f6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a8fd:	8d 50 01             	lea    edx,[eax+0x1]
c000a900:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a903:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a906:	75 0f                	jne    c000a917 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000a908:	83 ec 0c             	sub    esp,0xc
c000a90b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a90e:	53                   	push   ebx
c000a90f:	e8 40 fd ff ff       	call   c000a654 <VgaText::scrollScreen()>
c000a914:	83 c4 10             	add    esp,0x10
c000a917:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a91b:	83 c4 08             	add    esp,0x8
c000a91e:	5b                   	pop    ebx
c000a91f:	e9 0e fc ff ff       	jmp    c000a532 <VgaText::updateCursor()>
c000a924:	3c 08                	cmp    al,0x8
c000a926:	75 25                	jne    c000a94d <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000a928:	50                   	push   eax
c000a929:	50                   	push   eax
c000a92a:	6a 01                	push   0x1
c000a92c:	53                   	push   ebx
c000a92d:	e8 4c ff ff ff       	call   c000a87e <VgaText::decrementCursor(bool)>
c000a932:	5a                   	pop    edx
c000a933:	59                   	pop    ecx
c000a934:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a937:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a93a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a93d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a940:	6a 20                	push   0x20
c000a942:	53                   	push   ebx
c000a943:	e8 b2 fd ff ff       	call   c000a6fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a948:	83 c4 28             	add    esp,0x28
c000a94b:	5b                   	pop    ebx
c000a94c:	c3                   	ret    
c000a94d:	83 ec 08             	sub    esp,0x8
c000a950:	0f be c0             	movsx  eax,al
c000a953:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a956:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a959:	51                   	push   ecx
c000a95a:	52                   	push   edx
c000a95b:	50                   	push   eax
c000a95c:	53                   	push   ebx
c000a95d:	e8 98 fd ff ff       	call   c000a6fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a962:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000a966:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000a96e:	83 c4 28             	add    esp,0x28
c000a971:	5b                   	pop    ebx
c000a972:	e9 b3 fe ff ff       	jmp    c000a82a <VgaText::incrementCursor(bool)>
c000a977:	90                   	nop

c000a978 <VgaText::doUpdate()>:
c000a978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a97c:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000a97f:	85 c0                	test   eax,eax
c000a981:	74 02                	je     c000a985 <VgaText::doUpdate()+0xd>
c000a983:	ff e0                	jmp    eax
c000a985:	c3                   	ret    

c000a986 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000a986:	55                   	push   ebp
c000a987:	31 ed                	xor    ebp,ebp
c000a989:	57                   	push   edi
c000a98a:	56                   	push   esi
c000a98b:	53                   	push   ebx
c000a98c:	83 ec 1c             	sub    esp,0x1c
c000a98f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a993:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000a998:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000a99f:	50                   	push   eax
c000a9a0:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 97 fc ff ff       	call   c000a642 <VgaText::combineColours(unsigned char, unsigned char)>
c000a9ab:	59                   	pop    ecx
c000a9ac:	0f b6 c0             	movzx  eax,al
c000a9af:	5e                   	pop    esi
c000a9b0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a9b5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a9b9:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000a9bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9c0:	0f b7 f6             	movzx  esi,si
c000a9c3:	01 f6                	add    esi,esi
c000a9c5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a9c8:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000a9cb:	84 c0                	test   al,al
c000a9cd:	0f 84 fd 00 00 00    	je     c000aad0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000a9d3:	3c 0d                	cmp    al,0xd
c000a9d5:	75 0c                	jne    c000a9e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000a9d7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a9de:	e9 e7 00 00 00       	jmp    c000aaca <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000a9e3:	3c 0a                	cmp    al,0xa
c000a9e5:	75 47                	jne    c000aa2e <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000a9e7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a9ea:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a9f1:	8d 48 01             	lea    ecx,[eax+0x1]
c000a9f4:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000a9f7:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000a9fa:	75 0f                	jne    c000aa0b <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000a9fc:	83 ec 0c             	sub    esp,0xc
c000a9ff:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000aa02:	53                   	push   ebx
c000aa03:	e8 4c fc ff ff       	call   c000a654 <VgaText::scrollScreen()>
c000aa08:	83 c4 10             	add    esp,0x10
c000aa0b:	83 ec 0c             	sub    esp,0xc
c000aa0e:	31 ed                	xor    ebp,ebp
c000aa10:	53                   	push   ebx
c000aa11:	e8 1c fb ff ff       	call   c000a532 <VgaText::updateCursor()>
c000aa16:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa1b:	83 c4 10             	add    esp,0x10
c000aa1e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa21:	0f b7 f6             	movzx  esi,si
c000aa24:	01 f6                	add    esi,esi
c000aa26:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa29:	e9 9c 00 00 00       	jmp    c000aaca <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aa2e:	3c 08                	cmp    al,0x8
c000aa30:	75 35                	jne    c000aa67 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000aa32:	56                   	push   esi
c000aa33:	56                   	push   esi
c000aa34:	6a 01                	push   0x1
c000aa36:	53                   	push   ebx
c000aa37:	e8 42 fe ff ff       	call   c000a87e <VgaText::decrementCursor(bool)>
c000aa3c:	58                   	pop    eax
c000aa3d:	5a                   	pop    edx
c000aa3e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa44:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aa47:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aa4a:	6a 20                	push   0x20
c000aa4c:	53                   	push   ebx
c000aa4d:	e8 a8 fc ff ff       	call   c000a6fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aa52:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa57:	83 c4 20             	add    esp,0x20
c000aa5a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa5d:	0f b7 f6             	movzx  esi,si
c000aa60:	01 f6                	add    esi,esi
c000aa62:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa65:	eb 63                	jmp    c000aaca <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aa67:	51                   	push   ecx
c000aa68:	51                   	push   ecx
c000aa69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6d:	50                   	push   eax
c000aa6e:	e8 75 fc ff ff       	call   c000a6e8 <VgaText::combineCharAndColour(char, unsigned char)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	66 89 06             	mov    WORD PTR [esi],ax
c000aa79:	39 1d e4 64 02 c0    	cmp    DWORD PTR ds:0xc00264e4,ebx
c000aa7f:	75 21                	jne    c000aaa2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000aa81:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000aa84:	85 c0                	test   eax,eax
c000aa86:	74 1a                	je     c000aaa2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000aa88:	52                   	push   edx
c000aa89:	52                   	push   edx
c000aa8a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa8d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa90:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa94:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa98:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000aa9b:	51                   	push   ecx
c000aa9c:	53                   	push   ebx
c000aa9d:	ff d0                	call   eax
c000aa9f:	83 c4 20             	add    esp,0x20
c000aaa2:	83 c6 02             	add    esi,0x2
c000aaa5:	50                   	push   eax
c000aaa6:	50                   	push   eax
c000aaa7:	6a 00                	push   0x0
c000aaa9:	53                   	push   ebx
c000aaaa:	e8 7b fd ff ff       	call   c000a82a <VgaText::incrementCursor(bool)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000aab6:	75 0d                	jne    c000aac5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000aab8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aabd:	0f b7 f6             	movzx  esi,si
c000aac0:	01 f6                	add    esi,esi
c000aac2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aac5:	bd 01 00 00 00       	mov    ebp,0x1
c000aaca:	47                   	inc    edi
c000aacb:	e9 f8 fe ff ff       	jmp    c000a9c8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000aad0:	83 ec 0c             	sub    esp,0xc
c000aad3:	53                   	push   ebx
c000aad4:	e8 59 fa ff ff       	call   c000a532 <VgaText::updateCursor()>
c000aad9:	83 c4 10             	add    esp,0x10
c000aadc:	89 e8                	mov    eax,ebp
c000aade:	84 c0                	test   al,al
c000aae0:	74 0c                	je     c000aaee <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000aae2:	83 ec 0c             	sub    esp,0xc
c000aae5:	53                   	push   ebx
c000aae6:	e8 8d fe ff ff       	call   c000a978 <VgaText::doUpdate()>
c000aaeb:	83 c4 10             	add    esp,0x10
c000aaee:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000aaf5:	83 c4 1c             	add    esp,0x1c
c000aaf8:	5b                   	pop    ebx
c000aaf9:	5e                   	pop    esi
c000aafa:	5f                   	pop    edi
c000aafb:	5d                   	pop    ebp
c000aafc:	c3                   	ret    
c000aafd:	90                   	nop

c000aafe <VgaText::clearScreen()>:
c000aafe:	57                   	push   edi
c000aaff:	56                   	push   esi
c000ab00:	31 f6                	xor    esi,esi
c000ab02:	53                   	push   ebx
c000ab03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab07:	52                   	push   edx
c000ab08:	6a 00                	push   0x0
c000ab0a:	6a 00                	push   0x0
c000ab0c:	53                   	push   ebx
c000ab0d:	e8 54 fc ff ff       	call   c000a766 <VgaText::setCursor(int, int)>
c000ab12:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ab19:	83 c4 10             	add    esp,0x10
c000ab1c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000ab1f:	7e 20                	jle    c000ab41 <VgaText::clearScreen()+0x43>
c000ab21:	31 ff                	xor    edi,edi
c000ab23:	50                   	push   eax
c000ab24:	50                   	push   eax
c000ab25:	56                   	push   esi
c000ab26:	57                   	push   edi
c000ab27:	47                   	inc    edi
c000ab28:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ab2b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ab2e:	6a 20                	push   0x20
c000ab30:	53                   	push   ebx
c000ab31:	e8 c4 fb ff ff       	call   c000a6fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ab36:	83 c4 20             	add    esp,0x20
c000ab39:	83 ff 50             	cmp    edi,0x50
c000ab3c:	75 e5                	jne    c000ab23 <VgaText::clearScreen()+0x25>
c000ab3e:	46                   	inc    esi
c000ab3f:	eb db                	jmp    c000ab1c <VgaText::clearScreen()+0x1e>
c000ab41:	83 ec 0c             	sub    esp,0xc
c000ab44:	53                   	push   ebx
c000ab45:	e8 2e fe ff ff       	call   c000a978 <VgaText::doUpdate()>
c000ab4a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ab51:	83 c4 10             	add    esp,0x10
c000ab54:	5b                   	pop    ebx
c000ab55:	5e                   	pop    esi
c000ab56:	5f                   	pop    edi
c000ab57:	c3                   	ret    

c000ab58 <VgaText::putchar(char)>:
c000ab58:	56                   	push   esi
c000ab59:	53                   	push   ebx
c000ab5a:	83 ec 14             	sub    esp,0x14
c000ab5d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ab61:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ab65:	3c 5b                	cmp    al,0x5b
c000ab67:	75 18                	jne    c000ab81 <VgaText::putchar(char)+0x29>
c000ab69:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000ab6d:	74 1f                	je     c000ab8e <VgaText::putchar(char)+0x36>
c000ab6f:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000ab75:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000ab7c:	e9 bd 00 00 00       	jmp    c000ac3e <VgaText::putchar(char)+0xe6>
c000ab81:	3c 1b                	cmp    al,0x1b
c000ab83:	75 09                	jne    c000ab8e <VgaText::putchar(char)+0x36>
c000ab85:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000ab89:	e9 b0 00 00 00       	jmp    c000ac3e <VgaText::putchar(char)+0xe6>
c000ab8e:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000ab91:	84 c9                	test   cl,cl
c000ab93:	0f 84 92 00 00 00    	je     c000ac2b <VgaText::putchar(char)+0xd3>
c000ab99:	8d 50 c0             	lea    edx,[eax-0x40]
c000ab9c:	80 fa 3e             	cmp    dl,0x3e
c000ab9f:	77 76                	ja     c000ac17 <VgaText::putchar(char)+0xbf>
c000aba1:	3c 6d                	cmp    al,0x6d
c000aba3:	75 47                	jne    c000abec <VgaText::putchar(char)+0x94>
c000aba5:	31 f6                	xor    esi,esi
c000aba7:	31 d2                	xor    edx,edx
c000aba9:	31 c0                	xor    eax,eax
c000abab:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000abae:	7e 2d                	jle    c000abdd <VgaText::putchar(char)+0x85>
c000abb0:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000abb5:	80 fa 3b             	cmp    dl,0x3b
c000abb8:	75 17                	jne    c000abd1 <VgaText::putchar(char)+0x79>
c000abba:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000abbe:	50                   	push   eax
c000abbf:	53                   	push   ebx
c000abc0:	e8 83 f9 ff ff       	call   c000a548 <VgaText::doANSI_SGR(int)>
c000abc5:	59                   	pop    ecx
c000abc6:	31 d2                	xor    edx,edx
c000abc8:	58                   	pop    eax
c000abc9:	31 c0                	xor    eax,eax
c000abcb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000abcf:	eb 09                	jmp    c000abda <VgaText::putchar(char)+0x82>
c000abd1:	6b c0 0a             	imul   eax,eax,0xa
c000abd4:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000abd8:	88 ca                	mov    dl,cl
c000abda:	46                   	inc    esi
c000abdb:	eb ce                	jmp    c000abab <VgaText::putchar(char)+0x53>
c000abdd:	84 d2                	test   dl,dl
c000abdf:	74 2e                	je     c000ac0f <VgaText::putchar(char)+0xb7>
c000abe1:	50                   	push   eax
c000abe2:	53                   	push   ebx
c000abe3:	e8 60 f9 ff ff       	call   c000a548 <VgaText::doANSI_SGR(int)>
c000abe8:	58                   	pop    eax
c000abe9:	5a                   	pop    edx
c000abea:	eb 23                	jmp    c000ac0f <VgaText::putchar(char)+0xb7>
c000abec:	3c 4a                	cmp    al,0x4a
c000abee:	75 1f                	jne    c000ac0f <VgaText::putchar(char)+0xb7>
c000abf0:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000abf4:	75 19                	jne    c000ac0f <VgaText::putchar(char)+0xb7>
c000abf6:	83 ec 0c             	sub    esp,0xc
c000abf9:	53                   	push   ebx
c000abfa:	e8 ff fe ff ff       	call   c000aafe <VgaText::clearScreen()>
c000abff:	83 c4 0c             	add    esp,0xc
c000ac02:	6a 00                	push   0x0
c000ac04:	6a 00                	push   0x0
c000ac06:	53                   	push   ebx
c000ac07:	e8 5a fb ff ff       	call   c000a766 <VgaText::setCursor(int, int)>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000ac15:	eb 27                	jmp    c000ac3e <VgaText::putchar(char)+0xe6>
c000ac17:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000ac1a:	83 fa 0e             	cmp    edx,0xe
c000ac1d:	7f 1f                	jg     c000ac3e <VgaText::putchar(char)+0xe6>
c000ac1f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ac22:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000ac25:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000ac29:	eb 13                	jmp    c000ac3e <VgaText::putchar(char)+0xe6>
c000ac2b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ac2e:	0f be c0             	movsx  eax,al
c000ac31:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ac34:	50                   	push   eax
c000ac35:	53                   	push   ebx
c000ac36:	e8 65 fc ff ff       	call   c000a8a0 <VgaText::putchar(char, VgaColour, VgaColour)>
c000ac3b:	83 c4 10             	add    esp,0x10
c000ac3e:	83 c4 14             	add    esp,0x14
c000ac41:	5b                   	pop    ebx
c000ac42:	5e                   	pop    esi
c000ac43:	c3                   	ret    

c000ac44 <VgaText::putx(unsigned int)>:
c000ac44:	57                   	push   edi
c000ac45:	b9 11 00 00 00       	mov    ecx,0x11
c000ac4a:	56                   	push   esi
c000ac4b:	be 52 2a 02 c0       	mov    esi,0xc0022a52
c000ac50:	53                   	push   ebx
c000ac51:	83 ec 20             	sub    esp,0x20
c000ac54:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ac58:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000ac5c:	fc                   	cld    
c000ac5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac5f:	be 08 00 00 00       	mov    esi,0x8
c000ac64:	50                   	push   eax
c000ac65:	50                   	push   eax
c000ac66:	89 d8                	mov    eax,ebx
c000ac68:	c1 e3 04             	shl    ebx,0x4
c000ac6b:	c1 e8 1c             	shr    eax,0x1c
c000ac6e:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000ac73:	50                   	push   eax
c000ac74:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac78:	e8 db fe ff ff       	call   c000ab58 <VgaText::putchar(char)>
c000ac7d:	83 c4 10             	add    esp,0x10
c000ac80:	4e                   	dec    esi
c000ac81:	75 e1                	jne    c000ac64 <VgaText::putx(unsigned int)+0x20>
c000ac83:	83 c4 20             	add    esp,0x20
c000ac86:	5b                   	pop    ebx
c000ac87:	5e                   	pop    esi
c000ac88:	5f                   	pop    edi
c000ac89:	c3                   	ret    

c000ac8a <VgaText::puts(char const*)>:
c000ac8a:	53                   	push   ebx
c000ac8b:	83 ec 08             	sub    esp,0x8
c000ac8e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ac92:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ac95:	84 c0                	test   al,al
c000ac97:	74 12                	je     c000acab <VgaText::puts(char const*)+0x21>
c000ac99:	43                   	inc    ebx
c000ac9a:	51                   	push   ecx
c000ac9b:	51                   	push   ecx
c000ac9c:	50                   	push   eax
c000ac9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aca1:	e8 b2 fe ff ff       	call   c000ab58 <VgaText::putchar(char)>
c000aca6:	83 c4 10             	add    esp,0x10
c000aca9:	eb e7                	jmp    c000ac92 <VgaText::puts(char const*)+0x8>
c000acab:	83 c4 08             	add    esp,0x8
c000acae:	5b                   	pop    ebx
c000acaf:	c3                   	ret    

c000acb0 <VgaText::VgaText(char const*)>:
c000acb0:	57                   	push   edi
c000acb1:	56                   	push   esi
c000acb2:	53                   	push   ebx
c000acb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acb7:	83 ec 08             	sub    esp,0x8
c000acba:	6a 00                	push   0x0
c000acbc:	50                   	push   eax
c000acbd:	e8 48 05 00 00       	call   c000b20a <UnixFile::UnixFile(int)>
c000acc2:	83 c4 10             	add    esp,0x10
c000acc5:	ba b8 2a 02 c0       	mov    edx,0xc0022ab8
c000acca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acce:	89 10                	mov    DWORD PTR [eax],edx
c000acd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acd4:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000acdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acdf:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000ace6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acea:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000acee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf2:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000acf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acfa:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000ad01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad05:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000ad0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad10:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000ad17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad1b:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000ad22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad26:	8d 50 60             	lea    edx,[eax+0x60]
c000ad29:	bb c0 64 02 c0       	mov    ebx,0xc00264c0
c000ad2e:	b8 08 00 00 00       	mov    eax,0x8
c000ad33:	fc                   	cld    
c000ad34:	89 d7                	mov    edi,edx
c000ad36:	89 de                	mov    esi,ebx
c000ad38:	89 c1                	mov    ecx,eax
c000ad3a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ad3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad40:	05 82 00 00 00       	add    eax,0x82
c000ad45:	83 ec 08             	sub    esp,0x8
c000ad48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad4c:	50                   	push   eax
c000ad4d:	e8 ee 59 ff ff       	call   c0000740 <strcpy>
c000ad52:	83 c4 10             	add    esp,0x10
c000ad55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad59:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000ad60:	83 ec 0c             	sub    esp,0xc
c000ad63:	6a 01                	push   0x1
c000ad65:	e8 e3 08 00 00       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c000ad6a:	83 c4 10             	add    esp,0x10
c000ad6d:	89 c2                	mov    edx,eax
c000ad6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad73:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ad76:	8b 1d 90 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026590
c000ad7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad80:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad83:	89 c6                	mov    esi,eax
c000ad85:	e8 35 f0 ff ff       	call   c0009dbf <Phys::allocatePage()>
c000ad8a:	68 05 0c 00 00       	push   0xc05
c000ad8f:	56                   	push   esi
c000ad90:	50                   	push   eax
c000ad91:	53                   	push   ebx
c000ad92:	e8 5d 0f 00 00       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ad97:	83 c4 10             	add    esp,0x10
c000ad9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad9e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ada1:	83 ec 04             	sub    esp,0x4
c000ada4:	68 00 0f 00 00       	push   0xf00
c000ada9:	6a 00                	push   0x0
c000adab:	50                   	push   eax
c000adac:	e8 d3 58 ff ff       	call   c0000684 <memset>
c000adb1:	83 c4 10             	add    esp,0x10
c000adb4:	83 ec 04             	sub    esp,0x4
c000adb7:	6a 00                	push   0x0
c000adb9:	6a 07                	push   0x7
c000adbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adbf:	e8 18 f8 ff ff       	call   c000a5dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000adc4:	83 c4 10             	add    esp,0x10
c000adc7:	83 ec 04             	sub    esp,0x4
c000adca:	6a 00                	push   0x0
c000adcc:	6a 00                	push   0x0
c000adce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000add2:	e8 8f f9 ff ff       	call   c000a766 <VgaText::setCursor(int, int)>
c000add7:	83 c4 10             	add    esp,0x10
c000adda:	83 ec 0c             	sub    esp,0xc
c000addd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ade1:	e8 18 fd ff ff       	call   c000aafe <VgaText::clearScreen()>
c000ade6:	83 c4 10             	add    esp,0x10
c000ade9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aded:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000adf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf5:	05 02 01 00 00       	add    eax,0x102
c000adfa:	83 ec 04             	sub    esp,0x4
c000adfd:	68 96 00 00 00       	push   0x96
c000ae02:	6a 00                	push   0x0
c000ae04:	50                   	push   eax
c000ae05:	e8 7a 58 ff ff       	call   c0000684 <memset>
c000ae0a:	83 c4 10             	add    esp,0x10
c000ae0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae11:	05 98 01 00 00       	add    eax,0x198
c000ae16:	83 ec 04             	sub    esp,0x4
c000ae19:	68 2c 01 00 00       	push   0x12c
c000ae1e:	6a 00                	push   0x0
c000ae20:	50                   	push   eax
c000ae21:	e8 5e 58 ff ff       	call   c0000684 <memset>
c000ae26:	83 c4 10             	add    esp,0x10
c000ae29:	90                   	nop
c000ae2a:	5b                   	pop    ebx
c000ae2b:	5e                   	pop    esi
c000ae2c:	5f                   	pop    edi
c000ae2d:	c3                   	ret    

c000ae2e <VgaText::receiveKey(unsigned char)>:
c000ae2e:	55                   	push   ebp
c000ae2f:	57                   	push   edi
c000ae30:	56                   	push   esi
c000ae31:	53                   	push   ebx
c000ae32:	83 ec 1c             	sub    esp,0x1c
c000ae35:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ae39:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ae3d:	84 db                	test   bl,bl
c000ae3f:	0f 84 c9 00 00 00    	je     c000af0e <VgaText::receiveKey(unsigned char)+0xe0>
c000ae45:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000ae4b:	80 fb 08             	cmp    bl,0x8
c000ae4e:	75 2c                	jne    c000ae7c <VgaText::receiveKey(unsigned char)+0x4e>
c000ae50:	83 ec 0c             	sub    esp,0xc
c000ae53:	57                   	push   edi
c000ae54:	e8 47 58 ff ff       	call   c00006a0 <strlen>
c000ae59:	83 c4 10             	add    esp,0x10
c000ae5c:	85 c0                	test   eax,eax
c000ae5e:	74 41                	je     c000aea1 <VgaText::receiveKey(unsigned char)+0x73>
c000ae60:	50                   	push   eax
c000ae61:	50                   	push   eax
c000ae62:	6a 08                	push   0x8
c000ae64:	56                   	push   esi
c000ae65:	e8 ee fc ff ff       	call   c000ab58 <VgaText::putchar(char)>
c000ae6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ae6d:	e8 2e 58 ff ff       	call   c00006a0 <strlen>
c000ae72:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000ae7a:	eb 22                	jmp    c000ae9e <VgaText::receiveKey(unsigned char)+0x70>
c000ae7c:	0f be c3             	movsx  eax,bl
c000ae7f:	52                   	push   edx
c000ae80:	52                   	push   edx
c000ae81:	50                   	push   eax
c000ae82:	56                   	push   esi
c000ae83:	e8 d0 fc ff ff       	call   c000ab58 <VgaText::putchar(char)>
c000ae88:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000ae8c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ae91:	59                   	pop    ecx
c000ae92:	5d                   	pop    ebp
c000ae93:	8d 44 24 16          	lea    eax,[esp+0x16]
c000ae97:	50                   	push   eax
c000ae98:	57                   	push   edi
c000ae99:	e8 e2 59 ff ff       	call   c0000880 <strcat>
c000ae9e:	83 c4 10             	add    esp,0x10
c000aea1:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000aea8:	75 05                	jne    c000aeaf <VgaText::receiveKey(unsigned char)+0x81>
c000aeaa:	80 fb 0a             	cmp    bl,0xa
c000aead:	75 53                	jne    c000af02 <VgaText::receiveKey(unsigned char)+0xd4>
c000aeaf:	83 ec 0c             	sub    esp,0xc
c000aeb2:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000aeb8:	53                   	push   ebx
c000aeb9:	e8 e2 57 ff ff       	call   c00006a0 <strlen>
c000aebe:	89 3c 24             	mov    DWORD PTR [esp],edi
c000aec1:	89 c5                	mov    ebp,eax
c000aec3:	e8 d8 57 ff ff       	call   c00006a0 <strlen>
c000aec8:	83 c4 10             	add    esp,0x10
c000aecb:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000aecf:	3d 2c 01 00 00       	cmp    eax,0x12c
c000aed4:	76 10                	jbe    c000aee6 <VgaText::receiveKey(unsigned char)+0xb8>
c000aed6:	83 ec 0c             	sub    esp,0xc
c000aed9:	68 63 2a 02 c0       	push   0xc0022a63
c000aede:	e8 26 94 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000aee3:	83 c4 10             	add    esp,0x10
c000aee6:	50                   	push   eax
c000aee7:	50                   	push   eax
c000aee8:	57                   	push   edi
c000aee9:	53                   	push   ebx
c000aeea:	e8 91 59 ff ff       	call   c0000880 <strcat>
c000aeef:	83 c4 0c             	add    esp,0xc
c000aef2:	68 96 00 00 00       	push   0x96
c000aef7:	6a 00                	push   0x0
c000aef9:	57                   	push   edi
c000aefa:	e8 85 57 ff ff       	call   c0000684 <memset>
c000aeff:	83 c4 10             	add    esp,0x10
c000af02:	83 ec 0c             	sub    esp,0xc
c000af05:	56                   	push   esi
c000af06:	e8 6d fa ff ff       	call   c000a978 <VgaText::doUpdate()>
c000af0b:	83 c4 10             	add    esp,0x10
c000af0e:	83 c4 1c             	add    esp,0x1c
c000af11:	5b                   	pop    ebx
c000af12:	5e                   	pop    esi
c000af13:	5f                   	pop    edi
c000af14:	5d                   	pop    ebp
c000af15:	c3                   	ret    

c000af16 <VgaText::write(unsigned long long, void*, int*)>:
c000af16:	55                   	push   ebp
c000af17:	57                   	push   edi
c000af18:	56                   	push   esi
c000af19:	53                   	push   ebx
c000af1a:	83 ec 0c             	sub    esp,0xc
c000af1d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000af21:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000af25:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000af29:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000af30:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000af33:	39 eb                	cmp    ebx,ebp
c000af35:	74 13                	je     c000af4a <VgaText::write(unsigned long long, void*, int*)+0x34>
c000af37:	43                   	inc    ebx
c000af38:	50                   	push   eax
c000af39:	50                   	push   eax
c000af3a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000af3e:	50                   	push   eax
c000af3f:	56                   	push   esi
c000af40:	e8 13 fc ff ff       	call   c000ab58 <VgaText::putchar(char)>
c000af45:	83 c4 10             	add    esp,0x10
c000af48:	eb e9                	jmp    c000af33 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000af4a:	83 ec 0c             	sub    esp,0xc
c000af4d:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000af54:	56                   	push   esi
c000af55:	e8 1e fa ff ff       	call   c000a978 <VgaText::doUpdate()>
c000af5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000af5e:	89 38                	mov    DWORD PTR [eax],edi
c000af60:	83 c4 1c             	add    esp,0x1c
c000af63:	31 c0                	xor    eax,eax
c000af65:	5b                   	pop    ebx
c000af66:	5e                   	pop    esi
c000af67:	5f                   	pop    edi
c000af68:	5d                   	pop    ebp
c000af69:	c3                   	ret    

c000af6a <newTerminal(char*)>:
c000af6a:	83 ec 28             	sub    esp,0x28
c000af6d:	68 c4 02 00 00       	push   0x2c4
c000af72:	e8 4c ea ff ff       	call   c00099c3 <malloc>
c000af77:	5a                   	pop    edx
c000af78:	59                   	pop    ecx
c000af79:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000af7d:	50                   	push   eax
c000af7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000af82:	e8 29 fd ff ff       	call   c000acb0 <VgaText::VgaText(char const*)>
c000af87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000af8b:	83 c4 2c             	add    esp,0x2c
c000af8e:	c3                   	ret    
c000af8f:	90                   	nop

c000af90 <TSS::TSS()>:
c000af90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000af9b:	90                   	nop
c000af9c:	c3                   	ret    
c000af9d:	90                   	nop
c000af9e:	66 90                	xchg   ax,ax

c000afa0 <TSS::setESP(unsigned long)>:
c000afa0:	55                   	push   ebp
c000afa1:	89 e5                	mov    ebp,esp
c000afa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000afa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000afa9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000afac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000afaf:	90                   	nop
c000afb0:	5d                   	pop    ebp
c000afb1:	c3                   	ret    
c000afb2:	66 90                	xchg   ax,ax

c000afb4 <TSS::flush()>:
c000afb4:	55                   	push   ebp
c000afb5:	89 e5                	mov    ebp,esp
c000afb7:	83 ec 10             	sub    esp,0x10
c000afba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000afbd:	8b 00                	mov    eax,DWORD PTR [eax]
c000afbf:	83 c8 03             	or     eax,0x3
c000afc2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000afc6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000afca:	66 89 d0             	mov    ax,dx
c000afcd:	0f 00 d8             	ltr    ax
c000afd0:	90                   	nop
c000afd1:	c9                   	leave  
c000afd2:	c3                   	ret    
c000afd3:	90                   	nop

c000afd4 <TSS::setup(unsigned long, unsigned long)>:
c000afd4:	55                   	push   ebp
c000afd5:	89 e5                	mov    ebp,esp
c000afd7:	83 ec 18             	sub    esp,0x18
c000afda:	83 ec 0c             	sub    esp,0xc
c000afdd:	6a 68                	push   0x68
c000afdf:	e8 df e9 ff ff       	call   c00099c3 <malloc>
c000afe4:	83 c4 10             	add    esp,0x10
c000afe7:	89 c2                	mov    edx,eax
c000afe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000afec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000afef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aff2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aff5:	83 ec 04             	sub    esp,0x4
c000aff8:	6a 68                	push   0x68
c000affa:	6a 00                	push   0x0
c000affc:	50                   	push   eax
c000affd:	e8 82 56 ff ff       	call   c0000684 <memset>
c000b002:	83 c4 10             	add    esp,0x10
c000b005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b00b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b017:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b01d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b023:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b026:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b02c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b02f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b03b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b047:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b04d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b050:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b053:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b05c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b05f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b068:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b06b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b074:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b077:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b07a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b07d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b080:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b083:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b086:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b08c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b08f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b096:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b099:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b09c:	0f 20 da             	mov    edx,cr3
c000b09f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b0a2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b0a5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b0a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0ae:	83 ec 08             	sub    esp,0x8
c000b0b1:	50                   	push   eax
c000b0b2:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b0b5:	50                   	push   eax
c000b0b6:	e8 65 e1 ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000b0bb:	83 c4 10             	add    esp,0x10
c000b0be:	83 ec 08             	sub    esp,0x8
c000b0c1:	6a 68                	push   0x68
c000b0c3:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b0c6:	50                   	push   eax
c000b0c7:	e8 70 e1 ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b0d3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b0d6:	83 e0 0f             	and    eax,0xf
c000b0d9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b0dc:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b0df:	83 c8 40             	or     eax,0x40
c000b0e2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b0e5:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000b0ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b0f0:	05 78 01 00 00       	add    eax,0x178
c000b0f5:	83 ec 04             	sub    esp,0x4
c000b0f8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b0fb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b0fe:	50                   	push   eax
c000b0ff:	e8 6c e1 ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000b104:	83 c4 10             	add    esp,0x10
c000b107:	89 c2                	mov    edx,eax
c000b109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b10c:	89 10                	mov    DWORD PTR [eax],edx
c000b10e:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000b113:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b119:	05 78 01 00 00       	add    eax,0x178
c000b11e:	83 ec 0c             	sub    esp,0xc
c000b121:	50                   	push   eax
c000b122:	e8 73 e1 ff ff       	call   c000929a <GDT::flush()>
c000b127:	83 c4 10             	add    esp,0x10
c000b12a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b12d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b12f:	c9                   	leave  
c000b130:	c3                   	ret    
c000b131:	90                   	nop

c000b132 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b136:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b13a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b13d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b142:	75 08                	jne    c000b14c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b144:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b14a:	eb 38                	jmp    c000b184 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b14c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b151:	75 17                	jne    c000b16a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b153:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b158:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b15b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000b161:	8b 10                	mov    edx,DWORD PTR [eax]
c000b163:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b167:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b16a:	89 c1                	mov    ecx,eax
c000b16c:	83 e1 fd             	and    ecx,0xfffffffd
c000b16f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b175:	74 cd                	je     c000b144 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b177:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b17c:	83 e0 ef             	and    eax,0xffffffef
c000b17f:	83 f8 08             	cmp    eax,0x8
c000b182:	76 c0                	jbe    c000b144 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b184:	31 c0                	xor    eax,eax
c000b186:	c3                   	ret    
c000b187:	90                   	nop

c000b188 <ReservedFilename::isAtty()>:
c000b188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b18c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b18f:	31 c0                	xor    eax,eax
c000b191:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b197:	74 09                	je     c000b1a2 <ReservedFilename::isAtty()+0x1a>
c000b199:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b19f:	0f 94 c0             	sete   al
c000b1a2:	c3                   	ret    
c000b1a3:	90                   	nop

c000b1a4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b1a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1a8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b1ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b1af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b1b3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b1b8:	75 08                	jne    c000b1c2 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b1ba:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b1c0:	eb 3d                	jmp    c000b1ff <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b1c2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b1c7:	75 17                	jne    c000b1e0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b1c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1ce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b1d1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000b1d7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b1d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b1dd:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b1e0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b1e5:	75 04                	jne    c000b1eb <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b1e7:	89 0a                	mov    DWORD PTR [edx],ecx
c000b1e9:	eb 14                	jmp    c000b1ff <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b1eb:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b1f0:	74 c8                	je     c000b1ba <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b1f2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b1f7:	83 e0 ef             	and    eax,0xffffffef
c000b1fa:	83 f8 08             	cmp    eax,0x8
c000b1fd:	76 bb                	jbe    c000b1ba <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b1ff:	31 c0                	xor    eax,eax
c000b201:	c3                   	ret    

c000b202 <UnixFile::getFileDescriptor()>:
c000b202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b206:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b209:	c3                   	ret    

c000b20a <UnixFile::UnixFile(int)>:
c000b20a:	53                   	push   ebx
c000b20b:	83 ec 28             	sub    esp,0x28
c000b20e:	ba 80 2b 02 c0       	mov    edx,0xc0022b80
c000b213:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b217:	89 10                	mov    DWORD PTR [eax],edx
c000b219:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b221:	0f 8f 8c 01 00 00    	jg     c000b3b3 <UnixFile::UnixFile(int)+0x1a9>
c000b227:	a1 60 58 02 c0       	mov    eax,ds:0xc0025860
c000b22c:	8d 50 01             	lea    edx,[eax+0x1]
c000b22f:	89 15 60 58 02 c0    	mov    DWORD PTR ds:0xc0025860,edx
c000b235:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b239:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b23c:	83 ec 08             	sub    esp,0x8
c000b23f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b243:	68 78 65 02 c0       	push   0xc0026578
c000b248:	e8 2f 60 01 00       	call   c002127c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b24d:	83 c4 10             	add    esp,0x10
c000b250:	a0 74 65 02 c0       	mov    al,ds:0xc0026574
c000b255:	83 f0 01             	xor    eax,0x1
c000b258:	84 c0                	test   al,al
c000b25a:	0f 84 54 01 00 00    	je     c000b3b4 <UnixFile::UnixFile(int)+0x1aa>
c000b260:	c6 05 74 65 02 c0 01 	mov    BYTE PTR ds:0xc0026574,0x1
c000b267:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b26f:	83 ec 0c             	sub    esp,0xc
c000b272:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b276:	e8 48 e7 ff ff       	call   c00099c3 <malloc>
c000b27b:	83 c4 10             	add    esp,0x10
c000b27e:	89 c3                	mov    ebx,eax
c000b280:	83 ec 08             	sub    esp,0x8
c000b283:	68 03 ff ff 0f       	push   0xfffff03
c000b288:	53                   	push   ebx
c000b289:	e8 2c 01 00 00       	call   c000b3ba <ReservedFilename::ReservedFilename(int)>
c000b28e:	83 c4 10             	add    esp,0x10
c000b291:	89 1d 6c 65 02 c0    	mov    DWORD PTR ds:0xc002656c,ebx
c000b297:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b29f:	83 ec 0c             	sub    esp,0xc
c000b2a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2a6:	e8 18 e7 ff ff       	call   c00099c3 <malloc>
c000b2ab:	83 c4 10             	add    esp,0x10
c000b2ae:	89 c3                	mov    ebx,eax
c000b2b0:	83 ec 08             	sub    esp,0x8
c000b2b3:	68 01 ff ff 0f       	push   0xfffff01
c000b2b8:	53                   	push   ebx
c000b2b9:	e8 fc 00 00 00       	call   c000b3ba <ReservedFilename::ReservedFilename(int)>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 1d 70 65 02 c0    	mov    DWORD PTR ds:0xc0026570,ebx
c000b2c7:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b2cf:	83 ec 0c             	sub    esp,0xc
c000b2d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b2d6:	e8 e8 e6 ff ff       	call   c00099c3 <malloc>
c000b2db:	83 c4 10             	add    esp,0x10
c000b2de:	89 c3                	mov    ebx,eax
c000b2e0:	83 ec 08             	sub    esp,0x8
c000b2e3:	68 00 ff ff 0f       	push   0xfffff00
c000b2e8:	53                   	push   ebx
c000b2e9:	e8 cc 00 00 00       	call   c000b3ba <ReservedFilename::ReservedFilename(int)>
c000b2ee:	83 c4 10             	add    esp,0x10
c000b2f1:	89 1d 64 65 02 c0    	mov    DWORD PTR ds:0xc0026564,ebx
c000b2f7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b2ff:	83 ec 0c             	sub    esp,0xc
c000b302:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b306:	e8 b8 e6 ff ff       	call   c00099c3 <malloc>
c000b30b:	83 c4 10             	add    esp,0x10
c000b30e:	89 c3                	mov    ebx,eax
c000b310:	83 ec 08             	sub    esp,0x8
c000b313:	68 02 ff ff 0f       	push   0xfffff02
c000b318:	53                   	push   ebx
c000b319:	e8 9c 00 00 00       	call   c000b3ba <ReservedFilename::ReservedFilename(int)>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 1d 68 65 02 c0    	mov    DWORD PTR ds:0xc0026568,ebx
c000b327:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b32f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b334:	7f 7e                	jg     c000b3b4 <UnixFile::UnixFile(int)+0x1aa>
c000b336:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b33e:	83 ec 0c             	sub    esp,0xc
c000b341:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b345:	e8 79 e6 ff ff       	call   c00099c3 <malloc>
c000b34a:	83 c4 10             	add    esp,0x10
c000b34d:	89 c3                	mov    ebx,eax
c000b34f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b353:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b358:	83 ec 08             	sub    esp,0x8
c000b35b:	50                   	push   eax
c000b35c:	53                   	push   ebx
c000b35d:	e8 58 00 00 00       	call   c000b3ba <ReservedFilename::ReservedFilename(int)>
c000b362:	83 c4 10             	add    esp,0x10
c000b365:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b369:	89 1c 85 40 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9ac0],ebx
c000b370:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b378:	83 ec 0c             	sub    esp,0xc
c000b37b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b37f:	e8 3f e6 ff ff       	call   c00099c3 <malloc>
c000b384:	83 c4 10             	add    esp,0x10
c000b387:	89 c3                	mov    ebx,eax
c000b389:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b38d:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b392:	83 ec 08             	sub    esp,0x8
c000b395:	50                   	push   eax
c000b396:	53                   	push   ebx
c000b397:	e8 1e 00 00 00       	call   c000b3ba <ReservedFilename::ReservedFilename(int)>
c000b39c:	83 c4 10             	add    esp,0x10
c000b39f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3a3:	89 1c 85 00 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9b00],ebx
c000b3aa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b3ae:	e9 7c ff ff ff       	jmp    c000b32f <UnixFile::UnixFile(int)+0x125>
c000b3b3:	90                   	nop
c000b3b4:	83 c4 28             	add    esp,0x28
c000b3b7:	5b                   	pop    ebx
c000b3b8:	c3                   	ret    
c000b3b9:	90                   	nop

c000b3ba <ReservedFilename::ReservedFilename(int)>:
c000b3ba:	83 ec 0c             	sub    esp,0xc
c000b3bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c1:	83 ec 08             	sub    esp,0x8
c000b3c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3c8:	50                   	push   eax
c000b3c9:	e8 3c fe ff ff       	call   c000b20a <UnixFile::UnixFile(int)>
c000b3ce:	83 c4 10             	add    esp,0x10
c000b3d1:	ba 9c 2b 02 c0       	mov    edx,0xc0022b9c
c000b3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3da:	89 10                	mov    DWORD PTR [eax],edx
c000b3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b3e4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b3e7:	90                   	nop
c000b3e8:	83 c4 0c             	add    esp,0xc
c000b3eb:	c3                   	ret    

c000b3ec <UnixFile::~UnixFile()>:
c000b3ec:	83 ec 1c             	sub    esp,0x1c
c000b3ef:	ba 80 2b 02 c0       	mov    edx,0xc0022b80
c000b3f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3f8:	89 10                	mov    DWORD PTR [eax],edx
c000b3fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b401:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b406:	7f 73                	jg     c000b47b <UnixFile::~UnixFile()+0x8f>
c000b408:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b410:	83 ec 0c             	sub    esp,0xc
c000b413:	68 78 65 02 c0       	push   0xc0026578
c000b418:	e8 33 5f 01 00       	call   c0021350 <LinkedList<UnixFile>::getFirstElement()>
c000b41d:	83 c4 10             	add    esp,0x10
c000b420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b424:	83 ec 0c             	sub    esp,0xc
c000b427:	68 78 65 02 c0       	push   0xc0026578
c000b42c:	e8 27 5f 01 00       	call   c0021358 <LinkedList<UnixFile>::removeFirst()>
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b438:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b43c:	74 40                	je     c000b47e <UnixFile::~UnixFile()+0x92>
c000b43e:	83 ec 08             	sub    esp,0x8
c000b441:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b445:	68 78 65 02 c0       	push   0xc0026578
c000b44a:	e8 2d 5e 01 00       	call   c002127c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b44f:	83 c4 10             	add    esp,0x10
c000b452:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b456:	8d 50 01             	lea    edx,[eax+0x1]
c000b459:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b45d:	3d 88 13 00 00       	cmp    eax,0x1388
c000b462:	0f 94 c0             	sete   al
c000b465:	84 c0                	test   al,al
c000b467:	74 a7                	je     c000b410 <UnixFile::~UnixFile()+0x24>
c000b469:	83 ec 0c             	sub    esp,0xc
c000b46c:	68 58 2b 02 c0       	push   0xc0022b58
c000b471:	e8 93 8e 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000b476:	83 c4 10             	add    esp,0x10
c000b479:	eb 95                	jmp    c000b410 <UnixFile::~UnixFile()+0x24>
c000b47b:	90                   	nop
c000b47c:	eb 01                	jmp    c000b47f <UnixFile::~UnixFile()+0x93>
c000b47e:	90                   	nop
c000b47f:	90                   	nop
c000b480:	83 c4 1c             	add    esp,0x1c
c000b483:	c3                   	ret    

c000b484 <UnixFile::~UnixFile()>:
c000b484:	83 ec 0c             	sub    esp,0xc
c000b487:	83 ec 0c             	sub    esp,0xc
c000b48a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b48e:	e8 59 ff ff ff       	call   c000b3ec <UnixFile::~UnixFile()>
c000b493:	83 c4 10             	add    esp,0x10
c000b496:	83 ec 08             	sub    esp,0x8
c000b499:	6a 0c                	push   0xc
c000b49b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b49f:	e8 a3 14 00 00       	call   c000c947 <operator delete(void*, unsigned long)>
c000b4a4:	83 c4 10             	add    esp,0x10
c000b4a7:	83 c4 0c             	add    esp,0xc
c000b4aa:	c3                   	ret    
c000b4ab:	90                   	nop

c000b4ac <ReservedFilename::~ReservedFilename()>:
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	ba 9c 2b 02 c0       	mov    edx,0xc0022b9c
c000b4b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b8:	89 10                	mov    DWORD PTR [eax],edx
c000b4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4be:	83 ec 0c             	sub    esp,0xc
c000b4c1:	50                   	push   eax
c000b4c2:	e8 25 ff ff ff       	call   c000b3ec <UnixFile::~UnixFile()>
c000b4c7:	83 c4 10             	add    esp,0x10
c000b4ca:	90                   	nop
c000b4cb:	83 c4 0c             	add    esp,0xc
c000b4ce:	c3                   	ret    
c000b4cf:	90                   	nop

c000b4d0 <ReservedFilename::~ReservedFilename()>:
c000b4d0:	83 ec 0c             	sub    esp,0xc
c000b4d3:	83 ec 0c             	sub    esp,0xc
c000b4d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4da:	e8 cd ff ff ff       	call   c000b4ac <ReservedFilename::~ReservedFilename()>
c000b4df:	83 c4 10             	add    esp,0x10
c000b4e2:	83 ec 08             	sub    esp,0x8
c000b4e5:	6a 0c                	push   0xc
c000b4e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4eb:	e8 57 14 00 00       	call   c000c947 <operator delete(void*, unsigned long)>
c000b4f0:	83 c4 10             	add    esp,0x10
c000b4f3:	83 c4 0c             	add    esp,0xc
c000b4f6:	c3                   	ret    

c000b4f7 <getFromFileDescriptor(int)>:
c000b4f7:	53                   	push   ebx
c000b4f8:	83 ec 08             	sub    esp,0x8
c000b4fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b4ff:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b505:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b50b:	7f 2c                	jg     c000b539 <getFromFileDescriptor(int)+0x42>
c000b50d:	83 ec 0c             	sub    esp,0xc
c000b510:	68 78 65 02 c0       	push   0xc0026578
c000b515:	e8 36 5e 01 00       	call   c0021350 <LinkedList<UnixFile>::getFirstElement()>
c000b51a:	83 c4 10             	add    esp,0x10
c000b51d:	85 c0                	test   eax,eax
c000b51f:	75 04                	jne    c000b525 <getFromFileDescriptor(int)+0x2e>
c000b521:	31 c0                	xor    eax,eax
c000b523:	eb 6e                	jmp    c000b593 <getFromFileDescriptor(int)+0x9c>
c000b525:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b528:	74 69                	je     c000b593 <getFromFileDescriptor(int)+0x9c>
c000b52a:	52                   	push   edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	68 78 65 02 c0       	push   0xc0026578
c000b532:	e8 c3 5e 01 00       	call   c00213fa <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b537:	eb e1                	jmp    c000b51a <getFromFileDescriptor(int)+0x23>
c000b539:	a1 6c 65 02 c0       	mov    eax,ds:0xc002656c
c000b53e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b544:	74 4d                	je     c000b593 <getFromFileDescriptor(int)+0x9c>
c000b546:	a1 70 65 02 c0       	mov    eax,ds:0xc0026570
c000b54b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b551:	74 40                	je     c000b593 <getFromFileDescriptor(int)+0x9c>
c000b553:	a1 68 65 02 c0       	mov    eax,ds:0xc0026568
c000b558:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b55e:	74 33                	je     c000b593 <getFromFileDescriptor(int)+0x9c>
c000b560:	a1 64 65 02 c0       	mov    eax,ds:0xc0026564
c000b565:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b56b:	74 26                	je     c000b593 <getFromFileDescriptor(int)+0x9c>
c000b56d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b573:	83 f8 08             	cmp    eax,0x8
c000b576:	77 09                	ja     c000b581 <getFromFileDescriptor(int)+0x8a>
c000b578:	8b 04 85 40 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ac0]
c000b57f:	eb 12                	jmp    c000b593 <getFromFileDescriptor(int)+0x9c>
c000b581:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b587:	83 fb 08             	cmp    ebx,0x8
c000b58a:	77 95                	ja     c000b521 <getFromFileDescriptor(int)+0x2a>
c000b58c:	8b 04 9d 00 65 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9b00]
c000b593:	83 c4 08             	add    esp,0x8
c000b596:	5b                   	pop    ebx
c000b597:	c3                   	ret    

c000b598 <__static_initialization_and_destruction_0(int, int)>:
c000b598:	83 ec 0c             	sub    esp,0xc
c000b59b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b5a0:	75 34                	jne    c000b5d6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b5a2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b5aa:	75 2a                	jne    c000b5d6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b5ac:	83 ec 0c             	sub    esp,0xc
c000b5af:	68 78 65 02 c0       	push   0xc0026578
c000b5b4:	e8 81 5c 01 00       	call   c002123a <LinkedList<UnixFile>::LinkedList()>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	83 ec 04             	sub    esp,0x4
c000b5bf:	68 88 56 02 c0       	push   0xc0025688
c000b5c4:	68 78 65 02 c0       	push   0xc0026578
c000b5c9:	68 38 12 02 c0       	push   0xc0021238
c000b5ce:	e8 ee 12 00 00       	call   c000c8c1 <__cxa_atexit>
c000b5d3:	83 c4 10             	add    esp,0x10
c000b5d6:	90                   	nop
c000b5d7:	83 c4 0c             	add    esp,0xc
c000b5da:	c3                   	ret    

c000b5db <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b5db:	83 ec 0c             	sub    esp,0xc
c000b5de:	83 ec 08             	sub    esp,0x8
c000b5e1:	68 ff ff 00 00       	push   0xffff
c000b5e6:	6a 01                	push   0x1
c000b5e8:	e8 ab ff ff ff       	call   c000b598 <__static_initialization_and_destruction_0(int, int)>
c000b5ed:	83 c4 10             	add    esp,0x10
c000b5f0:	83 c4 0c             	add    esp,0xc
c000b5f3:	c3                   	ret    

c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b5f4:	53                   	push   ebx
c000b5f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5fd:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b603:	89 c8                	mov    eax,ecx
c000b605:	d1 e8                	shr    eax,1
c000b607:	03 05 68 58 02 c0    	add    eax,DWORD PTR ds:0xc0025868
c000b60d:	83 e1 01             	and    ecx,0x1
c000b610:	8a 10                	mov    dl,BYTE PTR [eax]
c000b612:	75 09                	jne    c000b61d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b614:	83 e2 f0             	and    edx,0xfffffff0
c000b617:	09 da                	or     edx,ebx
c000b619:	88 10                	mov    BYTE PTR [eax],dl
c000b61b:	5b                   	pop    ebx
c000b61c:	c3                   	ret    
c000b61d:	c1 e3 04             	shl    ebx,0x4
c000b620:	83 e2 0f             	and    edx,0xf
c000b623:	09 da                	or     edx,ebx
c000b625:	88 10                	mov    BYTE PTR [eax],dl
c000b627:	5b                   	pop    ebx
c000b628:	c3                   	ret    

c000b629 <Virt::getPageState(unsigned long)>:
c000b629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b62d:	8b 0d 68 58 02 c0    	mov    ecx,DWORD PTR ds:0xc0025868
c000b633:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b639:	89 d0                	mov    eax,edx
c000b63b:	d1 e8                	shr    eax,1
c000b63d:	83 e2 01             	and    edx,0x1
c000b640:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b643:	75 04                	jne    c000b649 <Virt::getPageState(unsigned long)+0x20>
c000b645:	83 e0 0f             	and    eax,0xf
c000b648:	c3                   	ret    
c000b649:	c0 e8 04             	shr    al,0x4
c000b64c:	c3                   	ret    

c000b64d <Virt::allocateKernelVirtualPages(int)>:
c000b64d:	55                   	push   ebp
c000b64e:	31 ed                	xor    ebp,ebp
c000b650:	57                   	push   edi
c000b651:	56                   	push   esi
c000b652:	53                   	push   ebx
c000b653:	31 db                	xor    ebx,ebx
c000b655:	83 ec 1c             	sub    esp,0x1c
c000b658:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b65c:	8b 3d 64 58 02 c0    	mov    edi,DWORD PTR ds:0xc0025864
c000b662:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b667:	57                   	push   edi
c000b668:	e8 bc ff ff ff       	call   c000b629 <Virt::getPageState(unsigned long)>
c000b66d:	5a                   	pop    edx
c000b66e:	84 c0                	test   al,al
c000b670:	75 3a                	jne    c000b6ac <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b672:	85 db                	test   ebx,ebx
c000b674:	75 02                	jne    c000b678 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b676:	89 fd                	mov    ebp,edi
c000b678:	43                   	inc    ebx
c000b679:	39 f3                	cmp    ebx,esi
c000b67b:	74 5a                	je     c000b6d7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b67d:	47                   	inc    edi
c000b67e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b684:	76 31                	jbe    c000b6b7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b686:	c7 05 64 58 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0025864,0xc8000
c000b690:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b695:	75 28                	jne    c000b6bf <Virt::allocateKernelVirtualPages(int)+0x72>
c000b697:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b69c:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b6a1:	57                   	push   edi
c000b6a2:	e8 82 ff ff ff       	call   c000b629 <Virt::getPageState(unsigned long)>
c000b6a7:	5a                   	pop    edx
c000b6a8:	84 c0                	test   al,al
c000b6aa:	74 c6                	je     c000b672 <Virt::allocateKernelVirtualPages(int)+0x25>
c000b6ac:	31 db                	xor    ebx,ebx
c000b6ae:	47                   	inc    edi
c000b6af:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b6b5:	77 cf                	ja     c000b686 <Virt::allocateKernelVirtualPages(int)+0x39>
c000b6b7:	89 3d 64 58 02 c0    	mov    DWORD PTR ds:0xc0025864,edi
c000b6bd:	eb a8                	jmp    c000b667 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b6bf:	83 ec 0c             	sub    esp,0xc
c000b6c2:	68 b0 2b 02 c0       	push   0xc0022bb0
c000b6c7:	e8 3d 8c 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000b6cc:	8b 3d 64 58 02 c0    	mov    edi,DWORD PTR ds:0xc0025864
c000b6d2:	83 c4 10             	add    esp,0x10
c000b6d5:	eb 90                	jmp    c000b667 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b6d7:	89 2d 64 58 02 c0    	mov    DWORD PTR ds:0xc0025864,ebp
c000b6dd:	4b                   	dec    ebx
c000b6de:	74 5f                	je     c000b73f <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b6e0:	85 f6                	test   esi,esi
c000b6e2:	74 3d                	je     c000b721 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b6e4:	89 e8                	mov    eax,ebp
c000b6e6:	31 db                	xor    ebx,ebx
c000b6e8:	8d 7e ff             	lea    edi,[esi-0x1]
c000b6eb:	eb 14                	jmp    c000b701 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b6ed:	6a 01                	push   0x1
c000b6ef:	43                   	inc    ebx
c000b6f0:	50                   	push   eax
c000b6f1:	e8 fe fe ff ff       	call   c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b6f6:	58                   	pop    eax
c000b6f7:	39 f3                	cmp    ebx,esi
c000b6f9:	5a                   	pop    edx
c000b6fa:	74 25                	je     c000b721 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b6fc:	a1 64 58 02 c0       	mov    eax,ds:0xc0025864
c000b701:	8d 50 01             	lea    edx,[eax+0x1]
c000b704:	85 db                	test   ebx,ebx
c000b706:	89 15 64 58 02 c0    	mov    DWORD PTR ds:0xc0025864,edx
c000b70c:	74 20                	je     c000b72e <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b70e:	39 df                	cmp    edi,ebx
c000b710:	75 db                	jne    c000b6ed <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b712:	6a 03                	push   0x3
c000b714:	43                   	inc    ebx
c000b715:	50                   	push   eax
c000b716:	e8 d9 fe ff ff       	call   c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b71b:	59                   	pop    ecx
c000b71c:	39 f3                	cmp    ebx,esi
c000b71e:	58                   	pop    eax
c000b71f:	75 db                	jne    c000b6fc <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b721:	83 c4 1c             	add    esp,0x1c
c000b724:	89 e8                	mov    eax,ebp
c000b726:	5b                   	pop    ebx
c000b727:	c1 e0 0c             	shl    eax,0xc
c000b72a:	5e                   	pop    esi
c000b72b:	5f                   	pop    edi
c000b72c:	5d                   	pop    ebp
c000b72d:	c3                   	ret    
c000b72e:	6a 02                	push   0x2
c000b730:	bb 01 00 00 00       	mov    ebx,0x1
c000b735:	50                   	push   eax
c000b736:	e8 b9 fe ff ff       	call   c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b73b:	58                   	pop    eax
c000b73c:	5a                   	pop    edx
c000b73d:	eb bd                	jmp    c000b6fc <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b73f:	6a 04                	push   0x4
c000b741:	8d 45 01             	lea    eax,[ebp+0x1]
c000b744:	55                   	push   ebp
c000b745:	a3 64 58 02 c0       	mov    ds:0xc0025864,eax
c000b74a:	e8 a5 fe ff ff       	call   c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b74f:	59                   	pop    ecx
c000b750:	89 e8                	mov    eax,ebp
c000b752:	5b                   	pop    ebx
c000b753:	c1 e0 0c             	shl    eax,0xc
c000b756:	83 c4 1c             	add    esp,0x1c
c000b759:	5b                   	pop    ebx
c000b75a:	5e                   	pop    esi
c000b75b:	5f                   	pop    edi
c000b75c:	5d                   	pop    ebp
c000b75d:	c3                   	ret    

c000b75e <Virt::freeSwapfilePage(unsigned long)>:
c000b75e:	53                   	push   ebx
c000b75f:	8b 15 8c 65 02 c0    	mov    edx,DWORD PTR ds:0xc002658c
c000b765:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b769:	b8 01 00 00 00       	mov    eax,0x1
c000b76e:	89 cb                	mov    ebx,ecx
c000b770:	d3 e0                	shl    eax,cl
c000b772:	c1 eb 05             	shr    ebx,0x5
c000b775:	f7 d0                	not    eax
c000b777:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b77a:	5b                   	pop    ebx
c000b77b:	c3                   	ret    

c000b77c <Virt::swapIDToSector(unsigned long)>:
c000b77c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b780:	0f af 05 6c 58 02 c0 	imul   eax,DWORD PTR ds:0xc002586c
c000b787:	03 05 74 58 02 c0    	add    eax,DWORD PTR ds:0xc0025874
c000b78d:	c3                   	ret    

c000b78e <Virt::allocateSwapfilePage()>:
c000b78e:	55                   	push   ebp
c000b78f:	31 d2                	xor    edx,edx
c000b791:	57                   	push   edi
c000b792:	56                   	push   esi
c000b793:	53                   	push   ebx
c000b794:	83 ec 0c             	sub    esp,0xc
c000b797:	8b 0d 6c 58 02 c0    	mov    ecx,DWORD PTR ds:0xc002586c
c000b79d:	a1 70 58 02 c0       	mov    eax,ds:0xc0025870
c000b7a2:	f7 f1                	div    ecx
c000b7a4:	39 0d 70 58 02 c0    	cmp    DWORD PTR ds:0xc0025870,ecx
c000b7aa:	72 2d                	jb     c000b7d9 <Virt::allocateSwapfilePage()+0x4b>
c000b7ac:	8b 35 8c 65 02 c0    	mov    esi,DWORD PTR ds:0xc002658c
c000b7b2:	8b 16                	mov    edx,DWORD PTR [esi]
c000b7b4:	f6 c2 01             	test   dl,0x1
c000b7b7:	74 3c                	je     c000b7f5 <Virt::allocateSwapfilePage()+0x67>
c000b7b9:	31 c9                	xor    ecx,ecx
c000b7bb:	bf 01 00 00 00       	mov    edi,0x1
c000b7c0:	eb 12                	jmp    c000b7d4 <Virt::allocateSwapfilePage()+0x46>
c000b7c2:	89 fd                	mov    ebp,edi
c000b7c4:	89 ca                	mov    edx,ecx
c000b7c6:	d3 e5                	shl    ebp,cl
c000b7c8:	c1 ea 05             	shr    edx,0x5
c000b7cb:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b7ce:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b7d0:	85 ea                	test   edx,ebp
c000b7d2:	74 2a                	je     c000b7fe <Virt::allocateSwapfilePage()+0x70>
c000b7d4:	41                   	inc    ecx
c000b7d5:	39 c8                	cmp    eax,ecx
c000b7d7:	77 e9                	ja     c000b7c2 <Virt::allocateSwapfilePage()+0x34>
c000b7d9:	83 ec 0c             	sub    esp,0xc
c000b7dc:	68 90 2d 02 c0       	push   0xc0022d90
c000b7e1:	e8 23 8b 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000b7e6:	83 c4 10             	add    esp,0x10
c000b7e9:	31 c9                	xor    ecx,ecx
c000b7eb:	83 c4 0c             	add    esp,0xc
c000b7ee:	89 c8                	mov    eax,ecx
c000b7f0:	5b                   	pop    ebx
c000b7f1:	5e                   	pop    esi
c000b7f2:	5f                   	pop    edi
c000b7f3:	5d                   	pop    ebp
c000b7f4:	c3                   	ret    
c000b7f5:	89 f3                	mov    ebx,esi
c000b7f7:	bd 01 00 00 00       	mov    ebp,0x1
c000b7fc:	31 c9                	xor    ecx,ecx
c000b7fe:	09 ea                	or     edx,ebp
c000b800:	89 c8                	mov    eax,ecx
c000b802:	89 13                	mov    DWORD PTR [ebx],edx
c000b804:	83 c4 0c             	add    esp,0xc
c000b807:	5b                   	pop    ebx
c000b808:	5e                   	pop    esi
c000b809:	5f                   	pop    edi
c000b80a:	5d                   	pop    ebp
c000b80b:	c3                   	ret    

c000b80c <Virt::virtualMemorySetup()>:
c000b80c:	53                   	push   ebx
c000b80d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b812:	6a 0f                	push   0xf
c000b814:	53                   	push   ebx
c000b815:	43                   	inc    ebx
c000b816:	e8 d9 fd ff ff       	call   c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b81b:	58                   	pop    eax
c000b81c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b822:	5a                   	pop    edx
c000b823:	75 ed                	jne    c000b812 <Virt::virtualMemorySetup()+0x6>
c000b825:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b82a:	6a 00                	push   0x0
c000b82c:	53                   	push   ebx
c000b82d:	43                   	inc    ebx
c000b82e:	e8 c1 fd ff ff       	call   c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b833:	59                   	pop    ecx
c000b834:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b83a:	58                   	pop    eax
c000b83b:	75 ed                	jne    c000b82a <Virt::virtualMemorySetup()+0x1e>
c000b83d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b842:	6a 0f                	push   0xf
c000b844:	53                   	push   ebx
c000b845:	43                   	inc    ebx
c000b846:	e8 a9 fd ff ff       	call   c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b84b:	58                   	pop    eax
c000b84c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b852:	5a                   	pop    edx
c000b853:	75 ed                	jne    c000b842 <Virt::virtualMemorySetup()+0x36>
c000b855:	5b                   	pop    ebx
c000b856:	c3                   	ret    

c000b857 <Virt::setupPageSwapping(int)>:
c000b857:	53                   	push   ebx
c000b858:	83 ec 0c             	sub    esp,0xc
c000b85b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b85f:	a1 28 6a 02 c0       	mov    eax,ds:0xc0026a28
c000b864:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b86a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b86c:	53                   	push   ebx
c000b86d:	c1 e3 0b             	shl    ebx,0xb
c000b870:	68 a7 2d 02 c0       	push   0xc0022da7
c000b875:	50                   	push   eax
c000b876:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b879:	89 1d 70 58 02 c0    	mov    DWORD PTR ds:0xc0025870,ebx
c000b87f:	c6 05 78 58 02 c0 43 	mov    BYTE PTR ds:0xc0025878,0x43
c000b886:	c1 eb 08             	shr    ebx,0x8
c000b889:	a3 74 58 02 c0       	mov    ds:0xc0025874,eax
c000b88e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b891:	c7 05 6c 58 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002586c,0x8
c000b89b:	e8 23 e1 ff ff       	call   c00099c3 <malloc>
c000b8a0:	83 c4 0c             	add    esp,0xc
c000b8a3:	89 c1                	mov    ecx,eax
c000b8a5:	a3 8c 65 02 c0       	mov    ds:0xc002658c,eax
c000b8aa:	31 d2                	xor    edx,edx
c000b8ac:	a1 70 58 02 c0       	mov    eax,ds:0xc0025870
c000b8b1:	f7 35 6c 58 02 c0    	div    DWORD PTR ds:0xc002586c
c000b8b7:	c1 e8 05             	shr    eax,0x5
c000b8ba:	50                   	push   eax
c000b8bb:	6a 00                	push   0x0
c000b8bd:	51                   	push   ecx
c000b8be:	e8 c1 4d ff ff       	call   c0000684 <memset>
c000b8c3:	83 c4 18             	add    esp,0x18
c000b8c6:	5b                   	pop    ebx
c000b8c7:	c3                   	ret    

c000b8c8 <VAS::VAS()>:
c000b8c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b8d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b8de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8e2:	a3 90 65 02 c0       	mov    ds:0xc0026590,eax
c000b8e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8eb:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000b8ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8f3:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000b8f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8fa:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000b901:	90                   	nop
c000b902:	c3                   	ret    
c000b903:	90                   	nop

c000b904 <VAS::VAS(VAS*)>:
c000b904:	83 ec 0c             	sub    esp,0xc
c000b907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b90b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b916:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b91d:	83 ec 0c             	sub    esp,0xc
c000b920:	68 d0 2b 02 c0       	push   0xc0022bd0
c000b925:	e8 df 89 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000b92a:	83 c4 10             	add    esp,0x10
c000b92d:	90                   	nop
c000b92e:	83 c4 0c             	add    esp,0xc
c000b931:	c3                   	ret    

c000b932 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000b932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b936:	89 c2                	mov    edx,eax
c000b938:	c1 e8 0a             	shr    eax,0xa
c000b93b:	c1 ea 16             	shr    edx,0x16
c000b93e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b943:	19 c9                	sbb    ecx,ecx
c000b945:	c1 e2 0c             	shl    edx,0xc
c000b948:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000b94e:	25 fc 0f 00 00       	and    eax,0xffc
c000b953:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000b95a:	01 d0                	add    eax,edx
c000b95c:	c3                   	ret    
c000b95d:	90                   	nop

c000b95e <VAS::getPageTableEntry(unsigned long)>:
c000b95e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b962:	89 ca                	mov    edx,ecx
c000b964:	c1 e9 0a             	shr    ecx,0xa
c000b967:	c1 ea 16             	shr    edx,0x16
c000b96a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000b970:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000b976:	c1 e0 0c             	shl    eax,0xc
c000b979:	8d 04 08             	lea    eax,[eax+ecx*1]
c000b97c:	c3                   	ret    

c000b97d <Virt::freeKernelVirtualPages(unsigned long)>:
c000b97d:	57                   	push   edi
c000b97e:	56                   	push   esi
c000b97f:	be 01 00 00 00       	mov    esi,0x1
c000b984:	53                   	push   ebx
c000b985:	83 ec 10             	sub    esp,0x10
c000b988:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b98c:	c1 eb 0c             	shr    ebx,0xc
c000b98f:	eb 3f                	jmp    c000b9d0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000b991:	83 ec 08             	sub    esp,0x8
c000b994:	57                   	push   edi
c000b995:	ff 35 90 65 02 c0    	push   DWORD PTR ds:0xc0026590
c000b99b:	e8 be ff ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c000b9a0:	83 c4 10             	add    esp,0x10
c000b9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9a5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b9a9:	f6 c4 04             	test   ah,0x4
c000b9ac:	75 5f                	jne    c000ba0d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000b9ae:	80 fa 04             	cmp    dl,0x4
c000b9b1:	74 78                	je     c000ba2b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000b9b3:	80 fa 02             	cmp    dl,0x2
c000b9b6:	0f 84 88 00 00 00    	je     c000ba44 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000b9bc:	80 fa 03             	cmp    dl,0x3
c000b9bf:	0f 84 ad 00 00 00    	je     c000ba72 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000b9c5:	fe ca                	dec    dl
c000b9c7:	0f 84 92 00 00 00    	je     c000ba5f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000b9cd:	43                   	inc    ebx
c000b9ce:	31 f6                	xor    esi,esi
c000b9d0:	53                   	push   ebx
c000b9d1:	89 df                	mov    edi,ebx
c000b9d3:	e8 51 fc ff ff       	call   c000b629 <Virt::getPageState(unsigned long)>
c000b9d8:	c1 e7 0c             	shl    edi,0xc
c000b9db:	59                   	pop    ecx
c000b9dc:	84 c0                	test   al,al
c000b9de:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000b9e2:	75 ad                	jne    c000b991 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000b9e4:	83 ec 0c             	sub    esp,0xc
c000b9e7:	68 be 2d 02 c0       	push   0xc0022dbe
c000b9ec:	e8 18 89 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000b9f1:	58                   	pop    eax
c000b9f2:	5a                   	pop    edx
c000b9f3:	57                   	push   edi
c000b9f4:	ff 35 90 65 02 c0    	push   DWORD PTR ds:0xc0026590
c000b9fa:	e8 5f ff ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c000b9ff:	83 c4 10             	add    esp,0x10
c000ba02:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba04:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba08:	f6 c4 04             	test   ah,0x4
c000ba0b:	74 c0                	je     c000b9cd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000ba0d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000ba11:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	50                   	push   eax
c000ba1a:	e8 2f e3 ff ff       	call   c0009d4e <Phys::freePage(unsigned long)>
c000ba1f:	83 c4 10             	add    esp,0x10
c000ba22:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba26:	80 fa 04             	cmp    dl,0x4
c000ba29:	75 88                	jne    c000b9b3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000ba2b:	89 f0                	mov    eax,esi
c000ba2d:	84 c0                	test   al,al
c000ba2f:	75 47                	jne    c000ba78 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000ba31:	c7 44 24 20 f4 2b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022bf4
c000ba39:	83 c4 10             	add    esp,0x10
c000ba3c:	5b                   	pop    ebx
c000ba3d:	5e                   	pop    esi
c000ba3e:	5f                   	pop    edi
c000ba3f:	e9 c5 88 00 00       	jmp    c0014309 <Krnl::panic(char const*)>
c000ba44:	89 f0                	mov    eax,esi
c000ba46:	84 c0                	test   al,al
c000ba48:	75 15                	jne    c000ba5f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000ba4a:	83 ec 0c             	sub    esp,0xc
c000ba4d:	68 da 2d 02 c0       	push   0xc0022dda
c000ba52:	e8 b2 88 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000ba57:	83 c4 10             	add    esp,0x10
c000ba5a:	e9 6e ff ff ff       	jmp    c000b9cd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000ba5f:	83 ec 08             	sub    esp,0x8
c000ba62:	6a 00                	push   0x0
c000ba64:	53                   	push   ebx
c000ba65:	e8 8a fb ff ff       	call   c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba6a:	83 c4 10             	add    esp,0x10
c000ba6d:	e9 5b ff ff ff       	jmp    c000b9cd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000ba72:	89 f0                	mov    eax,esi
c000ba74:	84 c0                	test   al,al
c000ba76:	75 15                	jne    c000ba8d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000ba78:	83 ec 08             	sub    esp,0x8
c000ba7b:	6a 00                	push   0x0
c000ba7d:	53                   	push   ebx
c000ba7e:	e8 71 fb ff ff       	call   c000b5f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba83:	83 c4 10             	add    esp,0x10
c000ba86:	83 c4 10             	add    esp,0x10
c000ba89:	5b                   	pop    ebx
c000ba8a:	5e                   	pop    esi
c000ba8b:	5f                   	pop    edi
c000ba8c:	c3                   	ret    
c000ba8d:	c7 44 24 20 f6 2d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022df6
c000ba95:	83 c4 10             	add    esp,0x10
c000ba98:	5b                   	pop    ebx
c000ba99:	5e                   	pop    esi
c000ba9a:	5f                   	pop    edi
c000ba9b:	e9 69 88 00 00       	jmp    c0014309 <Krnl::panic(char const*)>

c000baa0 <VAS::freeAllocatedPages(unsigned long)>:
c000baa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baa4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000baa8:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000baac:	74 09                	je     c000bab7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000baae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bab2:	e9 c6 fe ff ff       	jmp    c000b97d <Virt::freeKernelVirtualPages(unsigned long)>
c000bab7:	c7 44 24 04 18 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022c18
c000babf:	e9 64 0f 00 00       	jmp    c000ca28 <Dbg::kprintf(char const*, ...)>

c000bac4 <VAS::virtualToPhysical(unsigned long)>:
c000bac4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bac8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bacc:	e8 8d fe ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c000bad1:	5a                   	pop    edx
c000bad2:	8b 00                	mov    eax,DWORD PTR [eax]
c000bad4:	59                   	pop    ecx
c000bad5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bada:	c3                   	ret    
c000badb:	90                   	nop

c000badc <VAS::reflagRange(unsigned long, int, int, int)>:
c000badc:	55                   	push   ebp
c000badd:	57                   	push   edi
c000bade:	56                   	push   esi
c000badf:	53                   	push   ebx
c000bae0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bae4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000bae8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000baec:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000baf0:	85 db                	test   ebx,ebx
c000baf2:	7e 22                	jle    c000bb16 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000baf4:	c1 e3 0c             	shl    ebx,0xc
c000baf7:	01 f3                	add    ebx,esi
c000baf9:	56                   	push   esi
c000bafa:	81 c6 00 10 00 00    	add    esi,0x1000
c000bb00:	55                   	push   ebp
c000bb01:	e8 58 fe ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c000bb06:	5a                   	pop    edx
c000bb07:	59                   	pop    ecx
c000bb08:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bb0a:	21 f9                	and    ecx,edi
c000bb0c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000bb10:	39 f3                	cmp    ebx,esi
c000bb12:	89 08                	mov    DWORD PTR [eax],ecx
c000bb14:	75 e3                	jne    c000baf9 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bb16:	5b                   	pop    ebx
c000bb17:	5e                   	pop    esi
c000bb18:	5f                   	pop    edi
c000bb19:	5d                   	pop    ebp
c000bb1a:	c3                   	ret    
c000bb1b:	90                   	nop

c000bb1c <VAS::setToWriteCombining(unsigned long, int)>:
c000bb1c:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000bb21:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bb27:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000bb2e:	75 01                	jne    c000bb31 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bb30:	c3                   	ret    
c000bb31:	68 80 00 00 00       	push   0x80
c000bb36:	6a ff                	push   0xffffffff
c000bb38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb44:	e8 93 ff ff ff       	call   c000badc <VAS::reflagRange(unsigned long, int, int, int)>
c000bb49:	83 c4 14             	add    esp,0x14
c000bb4c:	c3                   	ret    
c000bb4d:	90                   	nop

c000bb4e <VAS::mapOtherVASIn(bool, VAS*)>:
c000bb4e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bb53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb57:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bb5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb5e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bb61:	19 c0                	sbb    eax,eax
c000bb63:	83 ca 03             	or     edx,0x3
c000bb66:	83 e0 fc             	and    eax,0xfffffffc
c000bb69:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000bb70:	0f 20 d8             	mov    eax,cr3
c000bb73:	0f 22 d8             	mov    cr3,eax
c000bb76:	c3                   	ret    
c000bb77:	90                   	nop

c000bb78 <VAS::~VAS()>:
c000bb78:	83 ec 2c             	sub    esp,0x2c
c000bb7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bb83:	fa                   	cli    
c000bb84:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000bb89:	40                   	inc    eax
c000bb8a:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000bb8f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bb94:	8b 00                	mov    eax,DWORD PTR [eax]
c000bb96:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000bb99:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000bb9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bba3:	6a 01                	push   0x1
c000bba5:	50                   	push   eax
c000bba6:	e8 a3 ff ff ff       	call   c000bb4e <VAS::mapOtherVASIn(bool, VAS*)>
c000bbab:	83 c4 0c             	add    esp,0xc
c000bbae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bbb6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bbbe:	0f 8f d4 00 00 00    	jg     c000bc98 <VAS::~VAS()+0x120>
c000bbc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bbc8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bbcb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bbcf:	c1 e2 02             	shl    edx,0x2
c000bbd2:	01 d0                	add    eax,edx
c000bbd4:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bbda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbde:	83 e0 01             	and    eax,0x1
c000bbe1:	0f 84 a8 00 00 00    	je     c000bc8f <VAS::~VAS()+0x117>
c000bbe7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bbef:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bbf7:	7f 72                	jg     c000bc6b <VAS::~VAS()+0xf3>
c000bbf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bbfd:	c1 e0 0a             	shl    eax,0xa
c000bc00:	89 c2                	mov    edx,eax
c000bc02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bc06:	01 d0                	add    eax,edx
c000bc08:	c1 e0 0c             	shl    eax,0xc
c000bc0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc0f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bc14:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc16:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000bc19:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000bc1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bc23:	6a 01                	push   0x1
c000bc25:	50                   	push   eax
c000bc26:	e8 07 fd ff ff       	call   c000b932 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bc2b:	83 c4 0c             	add    esp,0xc
c000bc2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc36:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bc3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc40:	25 01 04 00 00       	and    eax,0x401
c000bc45:	3d 01 04 00 00       	cmp    eax,0x401
c000bc4a:	75 19                	jne    c000bc65 <VAS::~VAS()+0xed>
c000bc4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc50:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bc55:	83 ec 0c             	sub    esp,0xc
c000bc58:	50                   	push   eax
c000bc59:	e8 f0 e0 ff ff       	call   c0009d4e <Phys::freePage(unsigned long)>
c000bc5e:	83 c4 10             	add    esp,0x10
c000bc61:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bc65:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bc69:	eb 84                	jmp    c000bbef <VAS::~VAS()+0x77>
c000bc6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc6f:	25 00 04 00 00       	and    eax,0x400
c000bc74:	74 19                	je     c000bc8f <VAS::~VAS()+0x117>
c000bc76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc7a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bc7f:	83 ec 0c             	sub    esp,0xc
c000bc82:	50                   	push   eax
c000bc83:	e8 c6 e0 ff ff       	call   c0009d4e <Phys::freePage(unsigned long)>
c000bc88:	83 c4 10             	add    esp,0x10
c000bc8b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bc8f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bc93:	e9 1e ff ff ff       	jmp    c000bbb6 <VAS::~VAS()+0x3e>
c000bc98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc9f:	83 ec 0c             	sub    esp,0xc
c000bca2:	50                   	push   eax
c000bca3:	e8 d5 fc ff ff       	call   c000b97d <Virt::freeKernelVirtualPages(unsigned long)>
c000bca8:	83 c4 10             	add    esp,0x10
c000bcab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcaf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bcb2:	83 ec 0c             	sub    esp,0xc
c000bcb5:	50                   	push   eax
c000bcb6:	e8 93 e0 ff ff       	call   c0009d4e <Phys::freePage(unsigned long)>
c000bcbb:	83 c4 10             	add    esp,0x10
c000bcbe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bcc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bcc6:	c1 e0 02             	shl    eax,0x2
c000bcc9:	83 ec 08             	sub    esp,0x8
c000bccc:	50                   	push   eax
c000bccd:	68 3c 2c 02 c0       	push   0xc0022c3c
c000bcd2:	e8 51 0d 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000bcd7:	83 c4 10             	add    esp,0x10
c000bcda:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000bcdf:	48                   	dec    eax
c000bce0:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000bce5:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000bcea:	85 c0                	test   eax,eax
c000bcec:	75 01                	jne    c000bcef <VAS::~VAS()+0x177>
c000bcee:	fb                   	sti    
c000bcef:	90                   	nop
c000bcf0:	83 c4 2c             	add    esp,0x2c
c000bcf3:	c3                   	ret    

c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000bcf4:	55                   	push   ebp
c000bcf5:	57                   	push   edi
c000bcf6:	56                   	push   esi
c000bcf7:	53                   	push   ebx
c000bcf8:	83 ec 1c             	sub    esp,0x1c
c000bcfb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bcff:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bd03:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000bd09:	77 08                	ja     c000bd13 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000bd0b:	0f 20 d8             	mov    eax,cr3
c000bd0e:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000bd11:	75 47                	jne    c000bd5a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000bd13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd17:	09 d8                	or     eax,ebx
c000bd19:	a9 ff 0f 00 00       	test   eax,0xfff
c000bd1e:	75 57                	jne    c000bd77 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000bd20:	89 de                	mov    esi,ebx
c000bd22:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bd25:	c1 ee 16             	shr    esi,0x16
c000bd28:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000bd2f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000bd33:	74 54                	je     c000bd89 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000bd35:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd39:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000bd3f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000bd43:	c1 e6 0c             	shl    esi,0xc
c000bd46:	c1 eb 0a             	shr    ebx,0xa
c000bd49:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000bd4f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000bd52:	83 c4 1c             	add    esp,0x1c
c000bd55:	5b                   	pop    ebx
c000bd56:	5e                   	pop    esi
c000bd57:	5f                   	pop    edi
c000bd58:	5d                   	pop    ebp
c000bd59:	c3                   	ret    
c000bd5a:	83 ec 0c             	sub    esp,0xc
c000bd5d:	68 5c 2c 02 c0       	push   0xc0022c5c
c000bd62:	e8 c1 0c 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000bd67:	83 c4 10             	add    esp,0x10
c000bd6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd6e:	09 d8                	or     eax,ebx
c000bd70:	a9 ff 0f 00 00       	test   eax,0xfff
c000bd75:	74 a9                	je     c000bd20 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000bd77:	83 ec 0c             	sub    esp,0xc
c000bd7a:	68 c4 2c 02 c0       	push   0xc0022cc4
c000bd7f:	e8 85 85 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000bd84:	83 c4 10             	add    esp,0x10
c000bd87:	eb 97                	jmp    c000bd20 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000bd89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd8d:	e8 2d e0 ff ff       	call   c0009dbf <Phys::allocatePage()>
c000bd92:	83 ec 0c             	sub    esp,0xc
c000bd95:	89 c5                	mov    ebp,eax
c000bd97:	8b 0d 90 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026590
c000bd9d:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000bda1:	6a 01                	push   0x1
c000bda3:	e8 a5 f8 ff ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c000bda8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000bdaf:	6a 01                	push   0x1
c000bdb1:	50                   	push   eax
c000bdb2:	55                   	push   ebp
c000bdb3:	81 cd 07 04 00 00    	or     ebp,0x407
c000bdb9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000bdbd:	51                   	push   ecx
c000bdbe:	e8 27 02 00 00       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000bdc3:	83 c4 1c             	add    esp,0x1c
c000bdc6:	68 00 10 00 00       	push   0x1000
c000bdcb:	6a 00                	push   0x0
c000bdcd:	50                   	push   eax
c000bdce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdd2:	e8 ad 48 ff ff       	call   c0000684 <memset>
c000bdd7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000bddb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000bdde:	e8 9a fb ff ff       	call   c000b97d <Virt::freeKernelVirtualPages(unsigned long)>
c000bde3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bde7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bdea:	83 c4 10             	add    esp,0x10
c000bded:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000bdf0:	e9 40 ff ff ff       	jmp    c000bd35 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000bdf5:	90                   	nop

c000bdf6 <VAS::allocatePages(int, int)>:
c000bdf6:	55                   	push   ebp
c000bdf7:	57                   	push   edi
c000bdf8:	56                   	push   esi
c000bdf9:	53                   	push   ebx
c000bdfa:	83 ec 1c             	sub    esp,0x1c
c000bdfd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000be01:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000be06:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000be0c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be12:	83 e0 01             	and    eax,0x1
c000be15:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000be19:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000be1d:	0f 85 cc 00 00 00    	jne    c000beef <VAS::allocatePages(int, int)+0xf9>
c000be23:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000be26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be2a:	85 c0                	test   eax,eax
c000be2c:	0f 84 a1 00 00 00    	je     c000bed3 <VAS::allocatePages(int, int)+0xdd>
c000be32:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000be36:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be3a:	c1 e6 0c             	shl    esi,0xc
c000be3d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000be41:	85 c0                	test   eax,eax
c000be43:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000be46:	7e 33                	jle    c000be7b <VAS::allocatePages(int, int)+0x85>
c000be48:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000be4c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000be50:	81 cd 00 04 00 00    	or     ebp,0x400
c000be56:	e8 64 df ff ff       	call   c0009dbf <Phys::allocatePage()>
c000be5b:	55                   	push   ebp
c000be5c:	53                   	push   ebx
c000be5d:	50                   	push   eax
c000be5e:	57                   	push   edi
c000be5f:	e8 90 fe ff ff       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000be64:	83 c4 10             	add    esp,0x10
c000be67:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000be6c:	74 03                	je     c000be71 <VAS::allocatePages(int, int)+0x7b>
c000be6e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000be71:	81 c3 00 10 00 00    	add    ebx,0x1000
c000be77:	39 de                	cmp    esi,ebx
c000be79:	75 db                	jne    c000be56 <VAS::allocatePages(int, int)+0x60>
c000be7b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000be80:	75 12                	jne    c000be94 <VAS::allocatePages(int, int)+0x9e>
c000be82:	0f 20 d8             	mov    eax,cr3
c000be85:	0f 22 d8             	mov    cr3,eax
c000be88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be8c:	83 c4 1c             	add    esp,0x1c
c000be8f:	5b                   	pop    ebx
c000be90:	5e                   	pop    esi
c000be91:	5f                   	pop    edi
c000be92:	5d                   	pop    ebp
c000be93:	c3                   	ret    
c000be94:	c1 ee 0a             	shr    esi,0xa
c000be97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000be9b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000bea1:	c1 eb 0a             	shr    ebx,0xa
c000bea4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000beaa:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000beb0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000beb6:	39 c3                	cmp    ebx,eax
c000beb8:	77 ce                	ja     c000be88 <VAS::allocatePages(int, int)+0x92>
c000beba:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bebd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bec3:	39 d8                	cmp    eax,ebx
c000bec5:	73 f3                	jae    c000beba <VAS::allocatePages(int, int)+0xc4>
c000bec7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000becb:	83 c4 1c             	add    esp,0x1c
c000bece:	5b                   	pop    ebx
c000becf:	5e                   	pop    esi
c000bed0:	5f                   	pop    edi
c000bed1:	5d                   	pop    ebp
c000bed2:	c3                   	ret    
c000bed3:	83 ec 0c             	sub    esp,0xc
c000bed6:	68 e8 2c 02 c0       	push   0xc0022ce8
c000bedb:	e8 29 84 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000bee0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bee3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	e9 43 ff ff ff       	jmp    c000be32 <VAS::allocatePages(int, int)+0x3c>
c000beef:	83 ec 0c             	sub    esp,0xc
c000bef2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000bef6:	e8 52 f7 ff ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c000befb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000beff:	83 c4 10             	add    esp,0x10
c000bf02:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bf07:	0f 87 9b 00 00 00    	ja     c000bfa8 <VAS::allocatePages(int, int)+0x1b2>
c000bf0d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bf11:	85 d2                	test   edx,edx
c000bf13:	7e 3c                	jle    c000bf51 <VAS::allocatePages(int, int)+0x15b>
c000bf15:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bf19:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bf1d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bf21:	c1 e5 0c             	shl    ebp,0xc
c000bf24:	81 ce 00 04 00 00    	or     esi,0x400
c000bf2a:	01 dd                	add    ebp,ebx
c000bf2c:	e8 8e de ff ff       	call   c0009dbf <Phys::allocatePage()>
c000bf31:	56                   	push   esi
c000bf32:	53                   	push   ebx
c000bf33:	50                   	push   eax
c000bf34:	57                   	push   edi
c000bf35:	e8 ba fd ff ff       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bf3a:	83 c4 10             	add    esp,0x10
c000bf3d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf42:	74 03                	je     c000bf47 <VAS::allocatePages(int, int)+0x151>
c000bf44:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf47:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf4d:	39 dd                	cmp    ebp,ebx
c000bf4f:	75 db                	jne    c000bf2c <VAS::allocatePages(int, int)+0x136>
c000bf51:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf56:	0f 84 26 ff ff ff    	je     c000be82 <VAS::allocatePages(int, int)+0x8c>
c000bf5c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf64:	89 d3                	mov    ebx,edx
c000bf66:	c1 e0 0c             	shl    eax,0xc
c000bf69:	c1 eb 0a             	shr    ebx,0xa
c000bf6c:	01 d0                	add    eax,edx
c000bf6e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf74:	c1 e8 0a             	shr    eax,0xa
c000bf77:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf82:	2d 00 00 40 00       	sub    eax,0x400000
c000bf87:	39 c3                	cmp    ebx,eax
c000bf89:	0f 87 f9 fe ff ff    	ja     c000be88 <VAS::allocatePages(int, int)+0x92>
c000bf8f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf92:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf98:	39 d8                	cmp    eax,ebx
c000bf9a:	73 f3                	jae    c000bf8f <VAS::allocatePages(int, int)+0x199>
c000bf9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfa0:	83 c4 1c             	add    esp,0x1c
c000bfa3:	5b                   	pop    ebx
c000bfa4:	5e                   	pop    esi
c000bfa5:	5f                   	pop    edi
c000bfa6:	5d                   	pop    ebp
c000bfa7:	c3                   	ret    
c000bfa8:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000bfad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bfb3:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000bfba:	0f 84 4d ff ff ff    	je     c000bf0d <VAS::allocatePages(int, int)+0x117>
c000bfc0:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000bfc8:	e9 40 ff ff ff       	jmp    c000bf0d <VAS::allocatePages(int, int)+0x117>
c000bfcd:	90                   	nop

c000bfce <VAS::setCPUSpecific(unsigned long)>:
c000bfce:	83 ec 0c             	sub    esp,0xc
c000bfd1:	6a 05                	push   0x5
c000bfd3:	68 00 00 40 c2       	push   0xc2400000
c000bfd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfe0:	e8 0f fd ff ff       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bfe5:	83 c4 1c             	add    esp,0x1c
c000bfe8:	c3                   	ret    
c000bfe9:	90                   	nop

c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000bfea:	55                   	push   ebp
c000bfeb:	57                   	push   edi
c000bfec:	56                   	push   esi
c000bfed:	53                   	push   ebx
c000bfee:	83 ec 1c             	sub    esp,0x1c
c000bff1:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000bff6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bffa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c000:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c004:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c00a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c00e:	83 e0 01             	and    eax,0x1
c000c011:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c015:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c019:	85 c0                	test   eax,eax
c000c01b:	7e 39                	jle    c000c056 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c01d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c021:	89 f3                	mov    ebx,esi
c000c023:	c1 e0 0c             	shl    eax,0xc
c000c026:	01 f0                	add    eax,esi
c000c028:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c02c:	55                   	push   ebp
c000c02d:	53                   	push   ebx
c000c02e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c032:	29 f0                	sub    eax,esi
c000c034:	01 d8                	add    eax,ebx
c000c036:	50                   	push   eax
c000c037:	57                   	push   edi
c000c038:	e8 b7 fc ff ff       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c03d:	83 c4 10             	add    esp,0x10
c000c040:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c045:	74 03                	je     c000c04a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c047:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c04a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c050:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c054:	75 d6                	jne    c000c02c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c056:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c05b:	75 10                	jne    c000c06d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c05d:	0f 20 d8             	mov    eax,cr3
c000c060:	0f 22 d8             	mov    cr3,eax
c000c063:	83 c4 1c             	add    esp,0x1c
c000c066:	89 f0                	mov    eax,esi
c000c068:	5b                   	pop    ebx
c000c069:	5e                   	pop    esi
c000c06a:	5f                   	pop    edi
c000c06b:	5d                   	pop    ebp
c000c06c:	c3                   	ret    
c000c06d:	89 f3                	mov    ebx,esi
c000c06f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c073:	c1 eb 0a             	shr    ebx,0xa
c000c076:	c1 e0 0c             	shl    eax,0xc
c000c079:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c07f:	01 f0                	add    eax,esi
c000c081:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c087:	c1 e8 0a             	shr    eax,0xa
c000c08a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c08f:	2d 00 00 40 00       	sub    eax,0x400000
c000c094:	39 c3                	cmp    ebx,eax
c000c096:	77 cb                	ja     c000c063 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c098:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c09b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c0a1:	39 d8                	cmp    eax,ebx
c000c0a3:	73 f3                	jae    c000c098 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c0a5:	83 c4 1c             	add    esp,0x1c
c000c0a8:	89 f0                	mov    eax,esi
c000c0aa:	5b                   	pop    ebx
c000c0ab:	5e                   	pop    esi
c000c0ac:	5f                   	pop    edi
c000c0ad:	5d                   	pop    ebp
c000c0ae:	c3                   	ret    
c000c0af:	90                   	nop

c000c0b0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c0b0:	55                   	push   ebp
c000c0b1:	57                   	push   edi
c000c0b2:	56                   	push   esi
c000c0b3:	53                   	push   ebx
c000c0b4:	83 ec 1c             	sub    esp,0x1c
c000c0b7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0bb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c0bf:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c0c3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c0c7:	a9 ff 0f 00 00       	test   eax,0xfff
c000c0cc:	75 4a                	jne    c000c118 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c0ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c0d2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c0d5:	c1 eb 16             	shr    ebx,0x16
c000c0d8:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c0df:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c0e3:	74 4d                	je     c000c132 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c0e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0e9:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c0ed:	c1 e8 0a             	shr    eax,0xa
c000c0f0:	80 fa 01             	cmp    dl,0x1
c000c0f3:	19 d2                	sbb    edx,edx
c000c0f5:	c1 e3 0c             	shl    ebx,0xc
c000c0f8:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c0fc:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c102:	25 fc 0f 00 00       	and    eax,0xffc
c000c107:	01 d8                	add    eax,ebx
c000c109:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c110:	83 c4 1c             	add    esp,0x1c
c000c113:	5b                   	pop    ebx
c000c114:	5e                   	pop    esi
c000c115:	5f                   	pop    edi
c000c116:	5d                   	pop    ebp
c000c117:	c3                   	ret    
c000c118:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c11c:	83 ec 0c             	sub    esp,0xc
c000c11f:	68 14 2d 02 c0       	push   0xc0022d14
c000c124:	e8 e0 81 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000c129:	83 c4 10             	add    esp,0x10
c000c12c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c130:	eb 9c                	jmp    c000c0ce <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c132:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c136:	e8 84 dc ff ff       	call   c0009dbf <Phys::allocatePage()>
c000c13b:	83 ec 0c             	sub    esp,0xc
c000c13e:	89 c5                	mov    ebp,eax
c000c140:	8b 0d 90 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026590
c000c146:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c14a:	6a 01                	push   0x1
c000c14c:	e8 fc f4 ff ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c000c151:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c158:	6a 01                	push   0x1
c000c15a:	50                   	push   eax
c000c15b:	55                   	push   ebp
c000c15c:	81 cd 07 04 00 00    	or     ebp,0x407
c000c162:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c166:	51                   	push   ecx
c000c167:	e8 7e fe ff ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c16c:	83 c4 1c             	add    esp,0x1c
c000c16f:	68 00 10 00 00       	push   0x1000
c000c174:	6a 00                	push   0x0
c000c176:	50                   	push   eax
c000c177:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c17b:	e8 04 45 ff ff       	call   c0000684 <memset>
c000c180:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c184:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c187:	e8 f1 f7 ff ff       	call   c000b97d <Virt::freeKernelVirtualPages(unsigned long)>
c000c18c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c18f:	83 c4 10             	add    esp,0x10
c000c192:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c195:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c199:	e9 47 ff ff ff       	jmp    c000c0e5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c19e <VAS::VAS(bool)>:
c000c19e:	53                   	push   ebx
c000c19f:	83 ec 28             	sub    esp,0x28
c000c1a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c1a6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c1aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1ae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c1b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c1c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1c4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c1c8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c1cb:	e8 ef db ff ff       	call   c0009dbf <Phys::allocatePage()>
c000c1d0:	89 c2                	mov    edx,eax
c000c1d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1d6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c1d9:	8b 1d 90 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026590
c000c1df:	83 ec 0c             	sub    esp,0xc
c000c1e2:	6a 01                	push   0x1
c000c1e4:	e8 64 f4 ff ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c000c1e9:	83 c4 10             	add    esp,0x10
c000c1ec:	89 c2                	mov    edx,eax
c000c1ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c1f5:	83 ec 0c             	sub    esp,0xc
c000c1f8:	6a 03                	push   0x3
c000c1fa:	6a 01                	push   0x1
c000c1fc:	52                   	push   edx
c000c1fd:	50                   	push   eax
c000c1fe:	53                   	push   ebx
c000c1ff:	e8 e6 fd ff ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c204:	83 c4 20             	add    esp,0x20
c000c207:	89 c2                	mov    edx,eax
c000c209:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c20d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c210:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c218:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c220:	7f 1c                	jg     c000c23e <VAS::VAS(bool)+0xa0>
c000c222:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c226:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c229:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c22d:	c1 e2 02             	shl    edx,0x2
c000c230:	01 d0                	add    eax,edx
c000c232:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c238:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c23c:	eb da                	jmp    c000c218 <VAS::VAS(bool)+0x7a>
c000c23e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c246:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c24e:	7f 7a                	jg     c000c2ca <VAS::VAS(bool)+0x12c>
c000c250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c254:	2d 00 02 00 00       	sub    eax,0x200
c000c259:	c1 e0 0c             	shl    eax,0xc
c000c25c:	83 c8 03             	or     eax,0x3
c000c25f:	89 c2                	mov    edx,eax
c000c261:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000c266:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c26c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c272:	83 e0 10             	and    eax,0x10
c000c275:	84 c0                	test   al,al
c000c277:	74 07                	je     c000c280 <VAS::VAS(bool)+0xe2>
c000c279:	b8 00 01 00 00       	mov    eax,0x100
c000c27e:	eb 05                	jmp    c000c285 <VAS::VAS(bool)+0xe7>
c000c280:	b8 00 00 00 00       	mov    eax,0x0
c000c285:	09 d0                	or     eax,edx
c000c287:	89 c1                	mov    ecx,eax
c000c289:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c28d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c290:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c294:	c1 e2 02             	shl    edx,0x2
c000c297:	01 d0                	add    eax,edx
c000c299:	89 ca                	mov    edx,ecx
c000c29b:	89 10                	mov    DWORD PTR [eax],edx
c000c29d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2a1:	2d 40 03 00 00       	sub    eax,0x340
c000c2a6:	83 f8 7f             	cmp    eax,0x7f
c000c2a9:	77 16                	ja     c000c2c1 <VAS::VAS(bool)+0x123>
c000c2ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2af:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2b2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c2b6:	c1 e2 02             	shl    edx,0x2
c000c2b9:	01 d0                	add    eax,edx
c000c2bb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c2c1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c2c5:	e9 7c ff ff ff       	jmp    c000c246 <VAS::VAS(bool)+0xa8>
c000c2ca:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000c2cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c2d5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c2db:	83 e0 10             	and    eax,0x10
c000c2de:	84 c0                	test   al,al
c000c2e0:	74 07                	je     c000c2e9 <VAS::VAS(bool)+0x14b>
c000c2e2:	b8 03 41 00 00       	mov    eax,0x4103
c000c2e7:	eb 05                	jmp    c000c2ee <VAS::VAS(bool)+0x150>
c000c2e9:	b8 03 40 00 00       	mov    eax,0x4003
c000c2ee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c2f2:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c2f5:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c2fb:	89 02                	mov    DWORD PTR [edx],eax
c000c2fd:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000c302:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c308:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c30e:	83 ec 08             	sub    esp,0x8
c000c311:	50                   	push   eax
c000c312:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c316:	e8 b3 fc ff ff       	call   c000bfce <VAS::setCPUSpecific(unsigned long)>
c000c31b:	83 c4 10             	add    esp,0x10
c000c31e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c322:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c325:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000c32a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c330:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c336:	83 e0 10             	and    eax,0x10
c000c339:	84 c0                	test   al,al
c000c33b:	74 07                	je     c000c344 <VAS::VAS(bool)+0x1a6>
c000c33d:	b8 00 01 00 00       	mov    eax,0x100
c000c342:	eb 05                	jmp    c000c349 <VAS::VAS(bool)+0x1ab>
c000c344:	b8 00 00 00 00       	mov    eax,0x0
c000c349:	09 c2                	or     edx,eax
c000c34b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c34f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c352:	05 fc 0f 00 00       	add    eax,0xffc
c000c357:	83 ca 03             	or     edx,0x3
c000c35a:	89 10                	mov    DWORD PTR [eax],edx
c000c35c:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000c361:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c367:	83 ec 0c             	sub    esp,0xc
c000c36a:	50                   	push   eax
c000c36b:	e8 06 1e 00 00       	call   c000e176 <Device::getName()>
c000c370:	83 c4 10             	add    esp,0x10
c000c373:	83 ec 08             	sub    esp,0x8
c000c376:	68 10 2e 02 c0       	push   0xc0022e10
c000c37b:	50                   	push   eax
c000c37c:	e8 4b 44 ff ff       	call   c00007cc <strcmp>
c000c381:	83 c4 10             	add    esp,0x10
c000c384:	85 c0                	test   eax,eax
c000c386:	0f 94 c0             	sete   al
c000c389:	84 c0                	test   al,al
c000c38b:	0f 84 87 00 00 00    	je     c000c418 <VAS::VAS(bool)+0x27a>
c000c391:	fa                   	cli    
c000c392:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000c397:	40                   	inc    eax
c000c398:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000c39d:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000c3a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3a8:	05 7c 09 00 00       	add    eax,0x97c
c000c3ad:	83 ec 0c             	sub    esp,0xc
c000c3b0:	50                   	push   eax
c000c3b1:	e8 fc d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c3b6:	83 c4 10             	add    esp,0x10
c000c3b9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c3be:	89 c3                	mov    ebx,eax
c000c3c0:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000c3c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3cb:	05 7c 09 00 00       	add    eax,0x97c
c000c3d0:	83 ec 0c             	sub    esp,0xc
c000c3d3:	50                   	push   eax
c000c3d4:	e8 d9 d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c3d9:	83 c4 10             	add    esp,0x10
c000c3dc:	83 ec 08             	sub    esp,0x8
c000c3df:	50                   	push   eax
c000c3e0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3e4:	e8 75 f5 ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c000c3e9:	83 c4 10             	add    esp,0x10
c000c3ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3ee:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c3f3:	6a 11                	push   0x11
c000c3f5:	53                   	push   ebx
c000c3f6:	50                   	push   eax
c000c3f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3fb:	e8 f4 f8 ff ff       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c400:	83 c4 10             	add    esp,0x10
c000c403:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000c408:	48                   	dec    eax
c000c409:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000c40e:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000c413:	85 c0                	test   eax,eax
c000c415:	75 01                	jne    c000c418 <VAS::VAS(bool)+0x27a>
c000c417:	fb                   	sti    
c000c418:	90                   	nop
c000c419:	83 c4 28             	add    esp,0x28
c000c41c:	5b                   	pop    ebx
c000c41d:	c3                   	ret    

c000c41e <VAS::evict(unsigned long)>:
c000c41e:	55                   	push   ebp
c000c41f:	57                   	push   edi
c000c420:	56                   	push   esi
c000c421:	53                   	push   ebx
c000c422:	83 ec 28             	sub    esp,0x28
c000c425:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c429:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c42d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c431:	68 1e 2e 02 c0       	push   0xc0022e1e
c000c436:	e8 ed 05 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c43b:	e8 4e f3 ff ff       	call   c000b78e <Virt::allocateSwapfilePage()>
c000c440:	5a                   	pop    edx
c000c441:	89 c7                	mov    edi,eax
c000c443:	59                   	pop    ecx
c000c444:	50                   	push   eax
c000c445:	68 3b 2e 02 c0       	push   0xc0022e3b
c000c44a:	e8 d9 05 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c44f:	83 c4 10             	add    esp,0x10
c000c452:	8b 1d 6c 58 02 c0    	mov    ebx,DWORD PTR ds:0xc002586c
c000c458:	85 db                	test   ebx,ebx
c000c45a:	7e 3d                	jle    c000c499 <VAS::evict(unsigned long)+0x7b>
c000c45c:	89 ee                	mov    esi,ebp
c000c45e:	31 db                	xor    ebx,ebx
c000c460:	83 ec 0c             	sub    esp,0xc
c000c463:	57                   	push   edi
c000c464:	e8 13 f3 ff ff       	call   c000b77c <Virt::swapIDToSector(unsigned long)>
c000c469:	89 34 24             	mov    DWORD PTR [esp],esi
c000c46c:	01 d8                	add    eax,ebx
c000c46e:	6a 01                	push   0x1
c000c470:	31 d2                	xor    edx,edx
c000c472:	43                   	inc    ebx
c000c473:	52                   	push   edx
c000c474:	81 c6 00 02 00 00    	add    esi,0x200
c000c47a:	50                   	push   eax
c000c47b:	0f be 05 78 58 02 c0 	movsx  eax,BYTE PTR ds:0xc0025878
c000c482:	ff 34 85 1c 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd96e4]
c000c489:	e8 2a 3d 00 00       	call   c00101b8 <LogicalDisk::write(unsigned long long, int, void*)>
c000c48e:	83 c4 20             	add    esp,0x20
c000c491:	39 1d 6c 58 02 c0    	cmp    DWORD PTR ds:0xc002586c,ebx
c000c497:	7f c7                	jg     c000c460 <VAS::evict(unsigned long)+0x42>
c000c499:	83 ec 08             	sub    esp,0x8
c000c49c:	c1 e7 0b             	shl    edi,0xb
c000c49f:	55                   	push   ebp
c000c4a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c4a4:	e8 b5 f4 ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c000c4a9:	5a                   	pop    edx
c000c4aa:	89 c6                	mov    esi,eax
c000c4ac:	59                   	pop    ecx
c000c4ad:	ff 30                	push   DWORD PTR [eax]
c000c4af:	68 4b 2e 02 c0       	push   0xc0022e4b
c000c4b4:	e8 6f 05 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c4b9:	8b 16                	mov    edx,DWORD PTR [esi]
c000c4bb:	89 d3                	mov    ebx,edx
c000c4bd:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c4c3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c4c9:	09 d7                	or     edi,edx
c000c4cb:	89 3e                	mov    DWORD PTR [esi],edi
c000c4cd:	5e                   	pop    esi
c000c4ce:	58                   	pop    eax
c000c4cf:	57                   	push   edi
c000c4d0:	68 64 2e 02 c0       	push   0xc0022e64
c000c4d5:	e8 4e 05 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c4da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c4dd:	ff 05 88 65 02 c0    	inc    DWORD PTR ds:0xc0026588
c000c4e3:	e8 66 d8 ff ff       	call   c0009d4e <Phys::freePage(unsigned long)>
c000c4e8:	0f 20 d8             	mov    eax,cr3
c000c4eb:	0f 22 d8             	mov    cr3,eax
c000c4ee:	ff 35 88 65 02 c0    	push   DWORD PTR ds:0xc0026588
c000c4f4:	55                   	push   ebp
c000c4f5:	53                   	push   ebx
c000c4f6:	68 38 2d 02 c0       	push   0xc0022d38
c000c4fb:	e8 28 05 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c500:	a1 84 65 02 c0       	mov    eax,ds:0xc0026584
c000c505:	c7 44 24 50 7d 2e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022e7d
c000c50d:	8d 50 01             	lea    edx,[eax+0x1]
c000c510:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c514:	89 15 84 65 02 c0    	mov    DWORD PTR ds:0xc0026584,edx
c000c51a:	83 c4 3c             	add    esp,0x3c
c000c51d:	5b                   	pop    ebx
c000c51e:	5e                   	pop    esi
c000c51f:	5f                   	pop    edi
c000c520:	5d                   	pop    ebp
c000c521:	e9 02 05 00 00       	jmp    c000ca28 <Dbg::kprintf(char const*, ...)>

c000c526 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c526:	55                   	push   ebp
c000c527:	57                   	push   edi
c000c528:	56                   	push   esi
c000c529:	53                   	push   ebx
c000c52a:	83 ec 24             	sub    esp,0x24
c000c52d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c531:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c535:	68 8e 2e 02 c0       	push   0xc0022e8e
c000c53a:	e8 e9 04 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c53f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000c543:	58                   	pop    eax
c000c544:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000c54a:	5a                   	pop    edx
c000c54b:	57                   	push   edi
c000c54c:	53                   	push   ebx
c000c54d:	e8 0c f4 ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c000c552:	59                   	pop    ecx
c000c553:	5e                   	pop    esi
c000c554:	89 c6                	mov    esi,eax
c000c556:	ff 30                	push   DWORD PTR [eax]
c000c558:	68 a1 2e 02 c0       	push   0xc0022ea1
c000c55d:	e8 c6 04 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c562:	83 c4 10             	add    esp,0x10
c000c565:	85 ff                	test   edi,edi
c000c567:	74 0a                	je     c000c573 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c000c569:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000c56b:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c571:	74 0a                	je     c000c57d <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c000c573:	83 c4 1c             	add    esp,0x1c
c000c576:	31 c0                	xor    eax,eax
c000c578:	5b                   	pop    ebx
c000c579:	5e                   	pop    esi
c000c57a:	5f                   	pop    edi
c000c57b:	5d                   	pop    ebp
c000c57c:	c3                   	ret    
c000c57d:	83 ec 08             	sub    esp,0x8
c000c580:	c1 ed 0b             	shr    ebp,0xb
c000c583:	55                   	push   ebp
c000c584:	68 af 2e 02 c0       	push   0xc0022eaf
c000c589:	e8 9a 04 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c58e:	e8 2c d8 ff ff       	call   c0009dbf <Phys::allocatePage()>
c000c593:	59                   	pop    ecx
c000c594:	5a                   	pop    edx
c000c595:	50                   	push   eax
c000c596:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c59a:	68 ba 2e 02 c0       	push   0xc0022eba
c000c59f:	e8 84 04 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c5a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c5a8:	8b 16                	mov    edx,DWORD PTR [esi]
c000c5aa:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c5b0:	09 d0                	or     eax,edx
c000c5b2:	0d 01 08 00 00       	or     eax,0x801
c000c5b7:	89 06                	mov    DWORD PTR [esi],eax
c000c5b9:	59                   	pop    ecx
c000c5ba:	5e                   	pop    esi
c000c5bb:	50                   	push   eax
c000c5bc:	68 cf 2e 02 c0       	push   0xc0022ecf
c000c5c1:	e8 62 04 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c5c6:	0f 20 d8             	mov    eax,cr3
c000c5c9:	83 c4 0c             	add    esp,0xc
c000c5cc:	53                   	push   ebx
c000c5cd:	50                   	push   eax
c000c5ce:	68 e7 2e 02 c0       	push   0xc0022ee7
c000c5d3:	e8 50 04 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c5d8:	c7 04 24 ff 2e 02 c0 	mov    DWORD PTR [esp],0xc0022eff
c000c5df:	e8 44 04 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c5e4:	83 c4 10             	add    esp,0x10
c000c5e7:	a1 6c 58 02 c0       	mov    eax,ds:0xc002586c
c000c5ec:	85 c0                	test   eax,eax
c000c5ee:	7e 3d                	jle    c000c62d <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c000c5f0:	89 fe                	mov    esi,edi
c000c5f2:	31 db                	xor    ebx,ebx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	55                   	push   ebp
c000c5f8:	e8 7f f1 ff ff       	call   c000b77c <Virt::swapIDToSector(unsigned long)>
c000c5fd:	89 34 24             	mov    DWORD PTR [esp],esi
c000c600:	01 d8                	add    eax,ebx
c000c602:	6a 01                	push   0x1
c000c604:	31 d2                	xor    edx,edx
c000c606:	43                   	inc    ebx
c000c607:	52                   	push   edx
c000c608:	81 c6 00 02 00 00    	add    esi,0x200
c000c60e:	50                   	push   eax
c000c60f:	0f be 05 78 58 02 c0 	movsx  eax,BYTE PTR ds:0xc0025878
c000c616:	ff 34 85 1c 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd96e4]
c000c61d:	e8 2a 3b 00 00       	call   c001014c <LogicalDisk::read(unsigned long long, int, void*)>
c000c622:	83 c4 20             	add    esp,0x20
c000c625:	39 1d 6c 58 02 c0    	cmp    DWORD PTR ds:0xc002586c,ebx
c000c62b:	7f c7                	jg     c000c5f4 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c000c62d:	a1 88 65 02 c0       	mov    eax,ds:0xc0026588
c000c632:	48                   	dec    eax
c000c633:	52                   	push   edx
c000c634:	a3 88 65 02 c0       	mov    ds:0xc0026588,eax
c000c639:	50                   	push   eax
c000c63a:	57                   	push   edi
c000c63b:	68 0f 2f 02 c0       	push   0xc0022f0f
c000c640:	e8 e3 03 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c645:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c648:	e8 11 f1 ff ff       	call   c000b75e <Virt::freeSwapfilePage(unsigned long)>
c000c64d:	c7 04 24 24 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f24
c000c654:	e8 cf 03 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c659:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000c65e:	83 c4 10             	add    esp,0x10
c000c661:	48                   	dec    eax
c000c662:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000c667:	85 c0                	test   eax,eax
c000c669:	75 01                	jne    c000c66c <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c000c66b:	fb                   	sti    
c000c66c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c670:	25 ff 0f 00 00       	and    eax,0xfff
c000c675:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c67a:	77 20                	ja     c000c69c <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c000c67c:	0f 20 d8             	mov    eax,cr3
c000c67f:	0f 22 d8             	mov    cr3,eax
c000c682:	83 ec 0c             	sub    esp,0xc
c000c685:	68 4a 2f 02 c0       	push   0xc0022f4a
c000c68a:	e8 99 03 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c68f:	83 c4 10             	add    esp,0x10
c000c692:	b0 01                	mov    al,0x1
c000c694:	83 c4 1c             	add    esp,0x1c
c000c697:	5b                   	pop    ebx
c000c698:	5e                   	pop    esi
c000c699:	5f                   	pop    edi
c000c69a:	5d                   	pop    ebp
c000c69b:	c3                   	ret    
c000c69c:	83 ec 0c             	sub    esp,0xc
c000c69f:	68 3a 2f 02 c0       	push   0xc0022f3a
c000c6a4:	e8 7f 03 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c6a9:	83 c4 10             	add    esp,0x10
c000c6ac:	eb ce                	jmp    c000c67c <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c000c6ae <VAS::scanForEviction()>:
c000c6ae:	55                   	push   ebp
c000c6af:	31 ed                	xor    ebp,ebp
c000c6b1:	57                   	push   edi
c000c6b2:	56                   	push   esi
c000c6b3:	53                   	push   ebx
c000c6b4:	83 ec 0c             	sub    esp,0xc
c000c6b7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c6bb:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c6be:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c6c4:	75 0e                	jne    c000c6d4 <VAS::scanForEviction()+0x26>
c000c6c6:	89 da                	mov    edx,ebx
c000c6c8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c6cb:	c1 ea 16             	shr    edx,0x16
c000c6ce:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c6d2:	74 4e                	je     c000c722 <VAS::scanForEviction()+0x74>
c000c6d4:	53                   	push   ebx
c000c6d5:	56                   	push   esi
c000c6d6:	e8 83 f2 ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c000c6db:	5f                   	pop    edi
c000c6dc:	8b 38                	mov    edi,DWORD PTR [eax]
c000c6de:	5a                   	pop    edx
c000c6df:	89 fa                	mov    edx,edi
c000c6e1:	81 e2 01 08 00 00    	and    edx,0x801
c000c6e7:	81 fa 01 08 00 00    	cmp    edx,0x801
c000c6ed:	74 3e                	je     c000c72d <VAS::scanForEviction()+0x7f>
c000c6ef:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c6f5:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c6fb:	76 2b                	jbe    c000c728 <VAS::scanForEviction()+0x7a>
c000c6fd:	45                   	inc    ebp
c000c6fe:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c705:	83 fd 04             	cmp    ebp,0x4
c000c708:	74 35                	je     c000c73f <VAS::scanForEviction()+0x91>
c000c70a:	31 db                	xor    ebx,ebx
c000c70c:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c712:	75 c0                	jne    c000c6d4 <VAS::scanForEviction()+0x26>
c000c714:	89 da                	mov    edx,ebx
c000c716:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c719:	c1 ea 16             	shr    edx,0x16
c000c71c:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c720:	75 b2                	jne    c000c6d4 <VAS::scanForEviction()+0x26>
c000c722:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c728:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c72b:	eb 91                	jmp    c000c6be <VAS::scanForEviction()+0x10>
c000c72d:	f7 c7 20 00 00 00    	test   edi,0x20
c000c733:	74 22                	je     c000c757 <VAS::scanForEviction()+0xa9>
c000c735:	83 e7 df             	and    edi,0xffffffdf
c000c738:	89 38                	mov    DWORD PTR [eax],edi
c000c73a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c73d:	eb b0                	jmp    c000c6ef <VAS::scanForEviction()+0x41>
c000c73f:	83 ec 0c             	sub    esp,0xc
c000c742:	68 68 2d 02 c0       	push   0xc0022d68
c000c747:	e8 bd 7b 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000c74c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c74f:	83 c4 10             	add    esp,0x10
c000c752:	e9 67 ff ff ff       	jmp    c000c6be <VAS::scanForEviction()+0x10>
c000c757:	83 ec 08             	sub    esp,0x8
c000c75a:	53                   	push   ebx
c000c75b:	68 58 2f 02 c0       	push   0xc0022f58
c000c760:	e8 c3 02 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c765:	58                   	pop    eax
c000c766:	5a                   	pop    edx
c000c767:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c76a:	56                   	push   esi
c000c76b:	e8 ae fc ff ff       	call   c000c41e <VAS::evict(unsigned long)>
c000c770:	59                   	pop    ecx
c000c771:	5b                   	pop    ebx
c000c772:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c775:	68 6c 2f 02 c0       	push   0xc0022f6c
c000c77a:	e8 a9 02 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c77f:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c786:	89 f8                	mov    eax,edi
c000c788:	83 c4 1c             	add    esp,0x1c
c000c78b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c790:	5b                   	pop    ebx
c000c791:	5e                   	pop    esi
c000c792:	5f                   	pop    edi
c000c793:	5d                   	pop    ebp
c000c794:	c3                   	ret    

c000c795 <mapVASFirstTime>:
c000c795:	55                   	push   ebp
c000c796:	57                   	push   edi
c000c797:	56                   	push   esi
c000c798:	53                   	push   ebx
c000c799:	83 ec 0c             	sub    esp,0xc
c000c79c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c7a1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c7a4:	4a                   	dec    edx
c000c7a5:	0f 84 fe 00 00 00    	je     c000c8a9 <mapVASFirstTime+0x114>
c000c7ab:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000c7ae:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000c7b1:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c7b6:	c1 e5 15             	shl    ebp,0x15
c000c7b9:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c7be:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c000c7c4:	29 eb                	sub    ebx,ebp
c000c7c6:	29 ef                	sub    edi,ebp
c000c7c8:	83 ec 08             	sub    esp,0x8
c000c7cb:	53                   	push   ebx
c000c7cc:	68 98 2f 02 c0       	push   0xc0022f98
c000c7d1:	e8 52 02 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c7d6:	e8 e4 d5 ff ff       	call   c0009dbf <Phys::allocatePage()>
c000c7db:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c7e2:	6a 01                	push   0x1
c000c7e4:	53                   	push   ebx
c000c7e5:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c7eb:	50                   	push   eax
c000c7ec:	56                   	push   esi
c000c7ed:	e8 f8 f7 ff ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c7f2:	83 c4 20             	add    esp,0x20
c000c7f5:	39 fb                	cmp    ebx,edi
c000c7f7:	75 cf                	jne    c000c7c8 <mapVASFirstTime+0x33>
c000c7f9:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c7fe:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c803:	29 eb                	sub    ebx,ebp
c000c805:	29 ef                	sub    edi,ebp
c000c807:	83 ec 08             	sub    esp,0x8
c000c80a:	53                   	push   ebx
c000c80b:	68 b4 2f 02 c0       	push   0xc0022fb4
c000c810:	e8 13 02 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c815:	58                   	pop    eax
c000c816:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c81a:	5a                   	pop    edx
c000c81b:	19 c0                	sbb    eax,eax
c000c81d:	83 e0 04             	and    eax,0x4
c000c820:	05 03 04 00 00       	add    eax,0x403
c000c825:	50                   	push   eax
c000c826:	68 d9 2e 02 c0       	push   0xc0022ed9
c000c82b:	e8 f8 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c830:	e8 8a d5 ff ff       	call   c0009dbf <Phys::allocatePage()>
c000c835:	59                   	pop    ecx
c000c836:	89 c5                	mov    ebp,eax
c000c838:	58                   	pop    eax
c000c839:	55                   	push   ebp
c000c83a:	68 c8 2f 02 c0       	push   0xc0022fc8
c000c83f:	e8 e4 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c844:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c848:	19 d2                	sbb    edx,edx
c000c84a:	83 e2 04             	and    edx,0x4
c000c84d:	81 c2 03 04 00 00    	add    edx,0x403
c000c853:	89 14 24             	mov    DWORD PTR [esp],edx
c000c856:	6a 01                	push   0x1
c000c858:	53                   	push   ebx
c000c859:	55                   	push   ebp
c000c85a:	56                   	push   esi
c000c85b:	e8 8a f7 ff ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c860:	83 c4 18             	add    esp,0x18
c000c863:	53                   	push   ebx
c000c864:	56                   	push   esi
c000c865:	e8 f4 f0 ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c000c86a:	5a                   	pop    edx
c000c86b:	59                   	pop    ecx
c000c86c:	ff 30                	push   DWORD PTR [eax]
c000c86e:	68 e4 2f 02 c0       	push   0xc0022fe4
c000c873:	e8 b0 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c878:	0f 20 d8             	mov    eax,cr3
c000c87b:	83 c4 0c             	add    esp,0xc
c000c87e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c884:	56                   	push   esi
c000c885:	50                   	push   eax
c000c886:	68 e7 2e 02 c0       	push   0xc0022ee7
c000c88b:	e8 98 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c890:	83 c4 10             	add    esp,0x10
c000c893:	39 df                	cmp    edi,ebx
c000c895:	0f 85 6c ff ff ff    	jne    c000c807 <mapVASFirstTime+0x72>
c000c89b:	0f 20 d8             	mov    eax,cr3
c000c89e:	0f 22 d8             	mov    cr3,eax
c000c8a1:	83 c4 0c             	add    esp,0xc
c000c8a4:	5b                   	pop    ebx
c000c8a5:	5e                   	pop    esi
c000c8a6:	5f                   	pop    edi
c000c8a7:	5d                   	pop    ebp
c000c8a8:	c3                   	ret    
c000c8a9:	83 ec 0c             	sub    esp,0xc
c000c8ac:	68 7f 2f 02 c0       	push   0xc0022f7f
c000c8b1:	e8 72 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c8b6:	83 c4 10             	add    esp,0x10
c000c8b9:	83 c4 0c             	add    esp,0xc
c000c8bc:	5b                   	pop    ebx
c000c8bd:	5e                   	pop    esi
c000c8be:	5f                   	pop    edi
c000c8bf:	5d                   	pop    ebp
c000c8c0:	c3                   	ret    

c000c8c1 <__cxa_atexit>:
c000c8c1:	31 c0                	xor    eax,eax
c000c8c3:	c3                   	ret    

c000c8c4 <__cxa_finalize>:
c000c8c4:	c3                   	ret    

c000c8c5 <__stack_chk_fail>:
c000c8c5:	55                   	push   ebp
c000c8c6:	89 e5                	mov    ebp,esp
c000c8c8:	83 ec 14             	sub    esp,0x14
c000c8cb:	68 ef 2f 02 c0       	push   0xc0022fef
c000c8d0:	e8 53 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c8d5:	58                   	pop    eax
c000c8d6:	5a                   	pop    edx
c000c8d7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c8da:	68 3f 30 02 c0       	push   0xc002303f
c000c8df:	e8 44 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c8e4:	59                   	pop    ecx
c000c8e5:	58                   	pop    eax
c000c8e6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c8e9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c8ec:	68 3f 30 02 c0       	push   0xc002303f
c000c8f1:	e8 32 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c8f6:	5a                   	pop    edx
c000c8f7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c8fa:	59                   	pop    ecx
c000c8fb:	8b 00                	mov    eax,DWORD PTR [eax]
c000c8fd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c900:	68 3f 30 02 c0       	push   0xc002303f
c000c905:	e8 1e 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c90a:	5a                   	pop    edx
c000c90b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c90e:	59                   	pop    ecx
c000c90f:	8b 00                	mov    eax,DWORD PTR [eax]
c000c911:	8b 00                	mov    eax,DWORD PTR [eax]
c000c913:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c916:	68 3f 30 02 c0       	push   0xc002303f
c000c91b:	e8 08 01 00 00       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000c920:	c7 04 24 47 30 02 c0 	mov    DWORD PTR [esp],0xc0023047
c000c927:	e8 dd 79 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000c92c:	83 c4 10             	add    esp,0x10
c000c92f:	c9                   	leave  
c000c930:	c3                   	ret    

c000c931 <__cxa_pure_virtual>:
c000c931:	83 ec 18             	sub    esp,0x18
c000c934:	68 5f 30 02 c0       	push   0xc002305f
c000c939:	e8 cb 79 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000c93e:	83 c4 1c             	add    esp,0x1c
c000c941:	c3                   	ret    

c000c942 <operator new[](unsigned long)>:
c000c942:	e9 7c d0 ff ff       	jmp    c00099c3 <malloc>

c000c947 <operator delete(void*, unsigned long)>:
c000c947:	e9 97 d0 ff ff       	jmp    c00099e3 <rfree>

c000c94c <operator delete[](void*)>:
c000c94c:	e9 92 d0 ff ff       	jmp    c00099e3 <rfree>

c000c951 <operator delete[](void*, unsigned long)>:
c000c951:	e9 8d d0 ff ff       	jmp    c00099e3 <rfree>

c000c956 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000c956:	55                   	push   ebp
c000c957:	b9 11 00 00 00       	mov    ecx,0x11
c000c95c:	57                   	push   edi
c000c95d:	56                   	push   esi
c000c95e:	be 52 2a 02 c0       	mov    esi,0xc0022a52
c000c963:	53                   	push   ebx
c000c964:	83 ec 20             	sub    esp,0x20
c000c967:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c96b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c96f:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000c973:	fc                   	cld    
c000c974:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c976:	89 ee                	mov    esi,ebp
c000c978:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c97c:	eb 02                	jmp    c000c980 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000c97e:	89 c6                	mov    esi,eax
c000c980:	31 d2                	xor    edx,edx
c000c982:	41                   	inc    ecx
c000c983:	89 f0                	mov    eax,esi
c000c985:	f7 f3                	div    ebx
c000c987:	39 de                	cmp    esi,ebx
c000c989:	73 f3                	jae    c000c97e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000c98b:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000c98e:	eb 02                	jmp    c000c992 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000c990:	89 c5                	mov    ebp,eax
c000c992:	31 d2                	xor    edx,edx
c000c994:	49                   	dec    ecx
c000c995:	89 e8                	mov    eax,ebp
c000c997:	f7 f3                	div    ebx
c000c999:	39 dd                	cmp    ebp,ebx
c000c99b:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000c99f:	88 11                	mov    BYTE PTR [ecx],dl
c000c9a1:	73 ed                	jae    c000c990 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000c9a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9a7:	83 c4 20             	add    esp,0x20
c000c9aa:	5b                   	pop    ebx
c000c9ab:	5e                   	pop    esi
c000c9ac:	5f                   	pop    edi
c000c9ad:	5d                   	pop    ebp
c000c9ae:	c3                   	ret    

c000c9af <Dbg::logc(char)>:
c000c9af:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c9b3:	f6 05 40 64 02 c0 10 	test   BYTE PTR ds:0xc0026440,0x10
c000c9ba:	75 12                	jne    c000c9ce <Dbg::logc(char)+0x1f>
c000c9bc:	ba fd 03 00 00       	mov    edx,0x3fd
c000c9c1:	ec                   	in     al,dx
c000c9c2:	a8 20                	test   al,0x20
c000c9c4:	74 fb                	je     c000c9c1 <Dbg::logc(char)+0x12>
c000c9c6:	ba f8 03 00 00       	mov    edx,0x3f8
c000c9cb:	88 c8                	mov    al,cl
c000c9cd:	ee                   	out    dx,al
c000c9ce:	c3                   	ret    

c000c9cf <Dbg::logs(char*)>:
c000c9cf:	53                   	push   ebx
c000c9d0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000c9d4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000c9d7:	84 c0                	test   al,al
c000c9d9:	74 0f                	je     c000c9ea <Dbg::logs(char*)+0x1b>
c000c9db:	50                   	push   eax
c000c9dc:	43                   	inc    ebx
c000c9dd:	e8 cd ff ff ff       	call   c000c9af <Dbg::logc(char)>
c000c9e2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000c9e5:	5a                   	pop    edx
c000c9e6:	84 c0                	test   al,al
c000c9e8:	75 f1                	jne    c000c9db <Dbg::logs(char*)+0xc>
c000c9ea:	5b                   	pop    ebx
c000c9eb:	c3                   	ret    

c000c9ec <Dbg::logWriteInt(unsigned int)>:
c000c9ec:	83 ec 10             	sub    esp,0x10
c000c9ef:	6a 0a                	push   0xa
c000c9f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000c9f5:	50                   	push   eax
c000c9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9fa:	e8 57 ff ff ff       	call   c000c956 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000c9ff:	50                   	push   eax
c000ca00:	e8 ca ff ff ff       	call   c000c9cf <Dbg::logs(char*)>
c000ca05:	83 c4 20             	add    esp,0x20
c000ca08:	c3                   	ret    

c000ca09 <Dbg::logWriteIntBase(unsigned int, int)>:
c000ca09:	83 ec 10             	sub    esp,0x10
c000ca0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca10:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ca14:	50                   	push   eax
c000ca15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca19:	e8 38 ff ff ff       	call   c000c956 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ca1e:	50                   	push   eax
c000ca1f:	e8 ab ff ff ff       	call   c000c9cf <Dbg::logs(char*)>
c000ca24:	83 c4 20             	add    esp,0x20
c000ca27:	c3                   	ret    

c000ca28 <Dbg::kprintf(char const*, ...)>:
c000ca28:	55                   	push   ebp
c000ca29:	57                   	push   edi
c000ca2a:	56                   	push   esi
c000ca2b:	53                   	push   ebx
c000ca2c:	83 ec 0c             	sub    esp,0xc
c000ca2f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ca33:	f6 05 40 64 02 c0 10 	test   BYTE PTR ds:0xc0026440,0x10
c000ca3a:	74 08                	je     c000ca44 <Dbg::kprintf(char const*, ...)+0x1c>
c000ca3c:	83 c4 0c             	add    esp,0xc
c000ca3f:	5b                   	pop    ebx
c000ca40:	5e                   	pop    esi
c000ca41:	5f                   	pop    edi
c000ca42:	5d                   	pop    ebp
c000ca43:	c3                   	ret    
c000ca44:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ca48:	31 db                	xor    ebx,ebx
c000ca4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca4e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ca51:	84 c0                	test   al,al
c000ca53:	74 e7                	je     c000ca3c <Dbg::kprintf(char const*, ...)+0x14>
c000ca55:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ca58:	3c 25                	cmp    al,0x25
c000ca5a:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ca5d:	75 44                	jne    c000caa3 <Dbg::kprintf(char const*, ...)+0x7b>
c000ca5f:	83 c3 02             	add    ebx,0x2
c000ca62:	8a 07                	mov    al,BYTE PTR [edi]
c000ca64:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000ca67:	83 e8 25             	sub    eax,0x25
c000ca6a:	3c 53                	cmp    al,0x53
c000ca6c:	0f 87 c9 00 00 00    	ja     c000cb3b <Dbg::kprintf(char const*, ...)+0x113>
c000ca72:	0f b6 c0             	movzx  eax,al
c000ca75:	ff 24 85 74 30 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcf8c]
c000ca7c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ca80:	89 c8                	mov    eax,ecx
c000ca82:	83 c1 04             	add    ecx,0x4
c000ca85:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ca89:	ff 30                	push   DWORD PTR [eax]
c000ca8b:	e8 5c ff ff ff       	call   c000c9ec <Dbg::logWriteInt(unsigned int)>
c000ca90:	5f                   	pop    edi
c000ca91:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ca95:	84 c0                	test   al,al
c000ca97:	74 a3                	je     c000ca3c <Dbg::kprintf(char const*, ...)+0x14>
c000ca99:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ca9c:	3c 25                	cmp    al,0x25
c000ca9e:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000caa1:	74 bc                	je     c000ca5f <Dbg::kprintf(char const*, ...)+0x37>
c000caa3:	50                   	push   eax
c000caa4:	89 eb                	mov    ebx,ebp
c000caa6:	e8 04 ff ff ff       	call   c000c9af <Dbg::logc(char)>
c000caab:	89 fd                	mov    ebp,edi
c000caad:	58                   	pop    eax
c000caae:	eb e1                	jmp    c000ca91 <Dbg::kprintf(char const*, ...)+0x69>
c000cab0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cab4:	89 c8                	mov    eax,ecx
c000cab6:	83 c1 04             	add    ecx,0x4
c000cab9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cabd:	ff 30                	push   DWORD PTR [eax]
c000cabf:	e8 0b ff ff ff       	call   c000c9cf <Dbg::logs(char*)>
c000cac4:	58                   	pop    eax
c000cac5:	eb ca                	jmp    c000ca91 <Dbg::kprintf(char const*, ...)+0x69>
c000cac7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cacb:	89 d0                	mov    eax,edx
c000cacd:	83 c2 04             	add    edx,0x4
c000cad0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cad4:	ff 30                	push   DWORD PTR [eax]
c000cad6:	e8 11 ff ff ff       	call   c000c9ec <Dbg::logWriteInt(unsigned int)>
c000cadb:	58                   	pop    eax
c000cadc:	eb b3                	jmp    c000ca91 <Dbg::kprintf(char const*, ...)+0x69>
c000cade:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cae2:	89 d0                	mov    eax,edx
c000cae4:	83 c2 04             	add    edx,0x4
c000cae7:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000caea:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000caee:	50                   	push   eax
c000caef:	e8 bb fe ff ff       	call   c000c9af <Dbg::logc(char)>
c000caf4:	58                   	pop    eax
c000caf5:	eb 9a                	jmp    c000ca91 <Dbg::kprintf(char const*, ...)+0x69>
c000caf7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cafb:	89 c8                	mov    eax,ecx
c000cafd:	83 c1 04             	add    ecx,0x4
c000cb00:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb04:	6a 10                	push   0x10
c000cb06:	ff 30                	push   DWORD PTR [eax]
c000cb08:	e8 fc fe ff ff       	call   c000ca09 <Dbg::logWriteIntBase(unsigned int, int)>
c000cb0d:	59                   	pop    ecx
c000cb0e:	5f                   	pop    edi
c000cb0f:	eb 80                	jmp    c000ca91 <Dbg::kprintf(char const*, ...)+0x69>
c000cb11:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb15:	89 d0                	mov    eax,edx
c000cb17:	83 c2 08             	add    edx,0x8
c000cb1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb1e:	6a 10                	push   0x10
c000cb20:	ff 30                	push   DWORD PTR [eax]
c000cb22:	e8 e2 fe ff ff       	call   c000ca09 <Dbg::logWriteIntBase(unsigned int, int)>
c000cb27:	58                   	pop    eax
c000cb28:	5a                   	pop    edx
c000cb29:	e9 63 ff ff ff       	jmp    c000ca91 <Dbg::kprintf(char const*, ...)+0x69>
c000cb2e:	6a 25                	push   0x25
c000cb30:	e8 7a fe ff ff       	call   c000c9af <Dbg::logc(char)>
c000cb35:	58                   	pop    eax
c000cb36:	e9 56 ff ff ff       	jmp    c000ca91 <Dbg::kprintf(char const*, ...)+0x69>
c000cb3b:	6a 25                	push   0x25
c000cb3d:	e8 6d fe ff ff       	call   c000c9af <Dbg::logc(char)>
c000cb42:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cb45:	50                   	push   eax
c000cb46:	e8 64 fe ff ff       	call   c000c9af <Dbg::logc(char)>
c000cb4b:	5a                   	pop    edx
c000cb4c:	59                   	pop    ecx
c000cb4d:	e9 3f ff ff ff       	jmp    c000ca91 <Dbg::kprintf(char const*, ...)+0x69>

c000cb52 <File::read(unsigned long long, void*, int*)>:
c000cb52:	53                   	push   ebx
c000cb53:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cb57:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cb5b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cb62:	3c 19                	cmp    al,0x19
c000cb64:	77 35                	ja     c000cb9b <File::read(unsigned long long, void*, int*)+0x49>
c000cb66:	8b 04 85 20 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95e0]
c000cb6d:	85 c0                	test   eax,eax
c000cb6f:	74 2a                	je     c000cb9b <File::read(unsigned long long, void*, int*)+0x49>
c000cb71:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cb77:	85 c0                	test   eax,eax
c000cb79:	74 20                	je     c000cb9b <File::read(unsigned long long, void*, int*)+0x49>
c000cb7b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cb7f:	74 21                	je     c000cba2 <File::read(unsigned long long, void*, int*)+0x50>
c000cb81:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cb83:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cb87:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cb8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb95:	5b                   	pop    ebx
c000cb96:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000cb99:	ff e0                	jmp    eax
c000cb9b:	b8 0b 00 00 00       	mov    eax,0xb
c000cba0:	eb 05                	jmp    c000cba7 <File::read(unsigned long long, void*, int*)+0x55>
c000cba2:	b8 05 00 00 00       	mov    eax,0x5
c000cba7:	5b                   	pop    ebx
c000cba8:	c3                   	ret    
c000cba9:	90                   	nop

c000cbaa <File::write(unsigned long long, void*, int*)>:
c000cbaa:	53                   	push   ebx
c000cbab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbaf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cbb3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cbba:	3c 19                	cmp    al,0x19
c000cbbc:	77 35                	ja     c000cbf3 <File::write(unsigned long long, void*, int*)+0x49>
c000cbbe:	8b 04 85 20 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95e0]
c000cbc5:	85 c0                	test   eax,eax
c000cbc7:	74 2a                	je     c000cbf3 <File::write(unsigned long long, void*, int*)+0x49>
c000cbc9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cbcf:	85 c0                	test   eax,eax
c000cbd1:	74 20                	je     c000cbf3 <File::write(unsigned long long, void*, int*)+0x49>
c000cbd3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cbd7:	74 21                	je     c000cbfa <File::write(unsigned long long, void*, int*)+0x50>
c000cbd9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cbdb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cbdf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cbe5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cbe9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cbed:	5b                   	pop    ebx
c000cbee:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cbf1:	ff e0                	jmp    eax
c000cbf3:	b8 0b 00 00 00       	mov    eax,0xb
c000cbf8:	eb 05                	jmp    c000cbff <File::write(unsigned long long, void*, int*)+0x55>
c000cbfa:	b8 05 00 00 00       	mov    eax,0x5
c000cbff:	5b                   	pop    ebx
c000cc00:	c3                   	ret    
c000cc01:	90                   	nop

c000cc02 <Directory::read(unsigned long long, void*, int*)>:
c000cc02:	53                   	push   ebx
c000cc03:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc07:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cc0b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cc12:	3c 19                	cmp    al,0x19
c000cc14:	77 35                	ja     c000cc4b <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc16:	8b 04 85 20 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95e0]
c000cc1d:	85 c0                	test   eax,eax
c000cc1f:	74 2a                	je     c000cc4b <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc21:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc27:	85 c0                	test   eax,eax
c000cc29:	74 20                	je     c000cc4b <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc2b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc2f:	74 21                	je     c000cc52 <Directory::read(unsigned long long, void*, int*)+0x50>
c000cc31:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc33:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc37:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc45:	5b                   	pop    ebx
c000cc46:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cc49:	ff e0                	jmp    eax
c000cc4b:	b8 0b 00 00 00       	mov    eax,0xb
c000cc50:	eb 05                	jmp    c000cc57 <Directory::read(unsigned long long, void*, int*)+0x55>
c000cc52:	b8 05 00 00 00       	mov    eax,0x5
c000cc57:	5b                   	pop    ebx
c000cc58:	c3                   	ret    
c000cc59:	90                   	nop

c000cc5a <Directory::write(unsigned long long, void*, int*)>:
c000cc5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc5e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cc65:	b8 0b 00 00 00       	mov    eax,0xb
c000cc6a:	80 fa 19             	cmp    dl,0x19
c000cc6d:	77 18                	ja     c000cc87 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cc6f:	8b 14 95 20 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95e0]
c000cc76:	85 d2                	test   edx,edx
c000cc78:	74 0d                	je     c000cc87 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cc7a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cc81:	19 c0                	sbb    eax,eax
c000cc83:	83 e0 0a             	and    eax,0xa
c000cc86:	40                   	inc    eax
c000cc87:	c3                   	ret    

c000cc88 <File::isAtty()>:
c000cc88:	31 c0                	xor    eax,eax
c000cc8a:	c3                   	ret    
c000cc8b:	90                   	nop

c000cc8c <Directory::isAtty()>:
c000cc8c:	31 c0                	xor    eax,eax
c000cc8e:	c3                   	ret    
c000cc8f:	90                   	nop

c000cc90 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cc90:	b8 0a 00 00 00       	mov    eax,0xa
c000cc95:	c3                   	ret    

c000cc96 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cc96:	b8 0a 00 00 00       	mov    eax,0xa
c000cc9b:	c3                   	ret    

c000cc9c <Filesystem::allocateSwapfile(char const*, int)>:
c000cc9c:	31 c0                	xor    eax,eax
c000cc9e:	31 d2                	xor    edx,edx
c000cca0:	c3                   	ret    
c000cca1:	90                   	nop

c000cca2 <File::~File()>:
c000cca2:	83 ec 0c             	sub    esp,0xc
c000cca5:	ba 34 32 02 c0       	mov    edx,0xc0023234
c000ccaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccae:	89 10                	mov    DWORD PTR [eax],edx
c000ccb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccb4:	83 ec 0c             	sub    esp,0xc
c000ccb7:	50                   	push   eax
c000ccb8:	e8 2f e7 ff ff       	call   c000b3ec <UnixFile::~UnixFile()>
c000ccbd:	83 c4 10             	add    esp,0x10
c000ccc0:	90                   	nop
c000ccc1:	83 c4 0c             	add    esp,0xc
c000ccc4:	c3                   	ret    
c000ccc5:	90                   	nop

c000ccc6 <File::~File()>:
c000ccc6:	83 ec 0c             	sub    esp,0xc
c000ccc9:	83 ec 0c             	sub    esp,0xc
c000cccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd0:	e8 cd ff ff ff       	call   c000cca2 <File::~File()>
c000ccd5:	83 c4 10             	add    esp,0x10
c000ccd8:	83 ec 08             	sub    esp,0x8
c000ccdb:	68 14 01 00 00       	push   0x114
c000cce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce4:	e8 5e fc ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000cce9:	83 c4 10             	add    esp,0x10
c000ccec:	83 c4 0c             	add    esp,0xc
c000ccef:	c3                   	ret    

c000ccf0 <Directory::~Directory()>:
c000ccf0:	83 ec 0c             	sub    esp,0xc
c000ccf3:	ba 50 32 02 c0       	mov    edx,0xc0023250
c000ccf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccfc:	89 10                	mov    DWORD PTR [eax],edx
c000ccfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd02:	83 ec 0c             	sub    esp,0xc
c000cd05:	50                   	push   eax
c000cd06:	e8 e1 e6 ff ff       	call   c000b3ec <UnixFile::~UnixFile()>
c000cd0b:	83 c4 10             	add    esp,0x10
c000cd0e:	90                   	nop
c000cd0f:	83 c4 0c             	add    esp,0xc
c000cd12:	c3                   	ret    
c000cd13:	90                   	nop

c000cd14 <Directory::~Directory()>:
c000cd14:	83 ec 0c             	sub    esp,0xc
c000cd17:	83 ec 0c             	sub    esp,0xc
c000cd1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd1e:	e8 cd ff ff ff       	call   c000ccf0 <Directory::~Directory()>
c000cd23:	83 c4 10             	add    esp,0x10
c000cd26:	83 ec 08             	sub    esp,0x8
c000cd29:	68 14 01 00 00       	push   0x114
c000cd2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd32:	e8 10 fc ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000cd37:	83 c4 10             	add    esp,0x10
c000cd3a:	83 c4 0c             	add    esp,0xc
c000cd3d:	c3                   	ret    

c000cd3e <Filesystem::Filesystem()>:
c000cd3e:	ba cc 31 02 c0       	mov    edx,0xc00231cc
c000cd43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd47:	89 10                	mov    DWORD PTR [eax],edx
c000cd49:	8b 15 94 65 02 c0    	mov    edx,DWORD PTR ds:0xc0026594
c000cd4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd53:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000cd56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd5a:	a3 94 65 02 c0       	mov    ds:0xc0026594,eax
c000cd5f:	90                   	nop
c000cd60:	c3                   	ret    
c000cd61:	90                   	nop

c000cd62 <Filesystem::~Filesystem()>:
c000cd62:	ba cc 31 02 c0       	mov    edx,0xc00231cc
c000cd67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd6b:	89 10                	mov    DWORD PTR [eax],edx
c000cd6d:	90                   	nop
c000cd6e:	c3                   	ret    
c000cd6f:	90                   	nop

c000cd70 <Filesystem::~Filesystem()>:
c000cd70:	83 ec 0c             	sub    esp,0xc
c000cd73:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cd77:	e8 e6 ff ff ff       	call   c000cd62 <Filesystem::~Filesystem()>
c000cd7c:	83 c4 04             	add    esp,0x4
c000cd7f:	83 ec 08             	sub    esp,0x8
c000cd82:	6a 08                	push   0x8
c000cd84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd88:	e8 ba fb ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000cd8d:	83 c4 10             	add    esp,0x10
c000cd90:	83 c4 0c             	add    esp,0xc
c000cd93:	c3                   	ret    

c000cd94 <Fs::getcwd(Process*, char*, int)>:
c000cd94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd98:	31 c0                	xor    eax,eax
c000cd9a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cd9d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cda1:	7d 15                	jge    c000cdb8 <Fs::getcwd(Process*, char*, int)+0x24>
c000cda3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cda7:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000cdae:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cdb1:	84 c9                	test   cl,cl
c000cdb3:	74 06                	je     c000cdbb <Fs::getcwd(Process*, char*, int)+0x27>
c000cdb5:	40                   	inc    eax
c000cdb6:	eb e2                	jmp    c000cd9a <Fs::getcwd(Process*, char*, int)+0x6>
c000cdb8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cdbb:	31 c0                	xor    eax,eax
c000cdbd:	c3                   	ret    

c000cdbe <Fs::initVFS()>:
c000cdbe:	83 ec 18             	sub    esp,0x18
c000cdc1:	6a 08                	push   0x8
c000cdc3:	e8 fb cb ff ff       	call   c00099c3 <malloc>
c000cdc8:	89 04 24             	mov    DWORD PTR [esp],eax
c000cdcb:	e8 d0 e3 00 00       	call   c001b1a0 <FAT::FAT()>
c000cdd0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000cdd7:	e8 e7 cb ff ff       	call   c00099c3 <malloc>
c000cddc:	89 04 24             	mov    DWORD PTR [esp],eax
c000cddf:	e8 1a f6 00 00       	call   c001c3fe <ISO9660::ISO9660()>
c000cde4:	83 c4 1c             	add    esp,0x1c
c000cde7:	c3                   	ret    

c000cde8 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000cde8:	55                   	push   ebp
c000cde9:	57                   	push   edi
c000cdea:	56                   	push   esi
c000cdeb:	53                   	push   ebx
c000cdec:	81 ec 10 04 00 00    	sub    esp,0x410
c000cdf2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000cdf9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ce00:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ce07:	68 00 04 00 00       	push   0x400
c000ce0c:	6a 00                	push   0x0
c000ce0e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ce12:	56                   	push   esi
c000ce13:	e8 6c 38 ff ff       	call   c0000684 <memset>
c000ce18:	83 c4 10             	add    esp,0x10
c000ce1b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ce1f:	75 0b                	jne    c000ce2c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ce21:	50                   	push   eax
c000ce22:	50                   	push   eax
c000ce23:	57                   	push   edi
c000ce24:	56                   	push   esi
c000ce25:	e8 16 39 ff ff       	call   c0000740 <strcpy>
c000ce2a:	eb 41                	jmp    c000ce6d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000ce2c:	8a 07                	mov    al,BYTE PTR [edi]
c000ce2e:	3c 5c                	cmp    al,0x5c
c000ce30:	74 04                	je     c000ce36 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ce32:	3c 2f                	cmp    al,0x2f
c000ce34:	75 18                	jne    c000ce4e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000ce36:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ce39:	3c 60                	cmp    al,0x60
c000ce3b:	7e 03                	jle    c000ce40 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000ce3d:	83 e8 20             	sub    eax,0x20
c000ce40:	88 04 24             	mov    BYTE PTR [esp],al
c000ce43:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ce4a:	50                   	push   eax
c000ce4b:	50                   	push   eax
c000ce4c:	eb 18                	jmp    c000ce66 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000ce4e:	50                   	push   eax
c000ce4f:	50                   	push   eax
c000ce50:	55                   	push   ebp
c000ce51:	56                   	push   esi
c000ce52:	e8 e9 38 ff ff       	call   c0000740 <strcpy>
c000ce57:	5a                   	pop    edx
c000ce58:	59                   	pop    ecx
c000ce59:	68 5a 48 02 c0       	push   0xc002485a
c000ce5e:	56                   	push   esi
c000ce5f:	e8 1c 3a ff ff       	call   c0000880 <strcat>
c000ce64:	5d                   	pop    ebp
c000ce65:	58                   	pop    eax
c000ce66:	57                   	push   edi
c000ce67:	56                   	push   esi
c000ce68:	e8 13 3a ff ff       	call   c0000880 <strcat>
c000ce6d:	83 c4 10             	add    esp,0x10
c000ce70:	8a 04 24             	mov    al,BYTE PTR [esp]
c000ce73:	3c 60                	cmp    al,0x60
c000ce75:	7e 03                	jle    c000ce7a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000ce77:	83 e8 20             	sub    eax,0x20
c000ce7a:	88 04 24             	mov    BYTE PTR [esp],al
c000ce7d:	88 03                	mov    BYTE PTR [ebx],al
c000ce7f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ce86:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000ce8c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ce90:	bf 03 00 00 00       	mov    edi,0x3
c000ce95:	b8 03 00 00 00       	mov    eax,0x3
c000ce9a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000ce9d:	84 d2                	test   dl,dl
c000ce9f:	0f 84 91 00 00 00    	je     c000cf36 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000cea5:	8d 4f 01             	lea    ecx,[edi+0x1]
c000cea8:	80 fa 5c             	cmp    dl,0x5c
c000ceab:	74 05                	je     c000ceb2 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000cead:	80 fa 2f             	cmp    dl,0x2f
c000ceb0:	75 12                	jne    c000cec4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000ceb2:	89 c5                	mov    ebp,eax
c000ceb4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ceb9:	74 09                	je     c000cec4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cebb:	40                   	inc    eax
c000cebc:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000cec0:	89 cf                	mov    edi,ecx
c000cec2:	eb d6                	jmp    c000ce9a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000cec4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000cec9:	75 5b                	jne    c000cf26 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cecb:	80 fa 2e             	cmp    dl,0x2e
c000cece:	75 56                	jne    c000cf26 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000ced0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000ced4:	74 19                	je     c000ceef <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000ced6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cedb:	74 53                	je     c000cf30 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cedd:	89 f9                	mov    ecx,edi
c000cedf:	41                   	inc    ecx
c000cee0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cee3:	80 fa 2f             	cmp    dl,0x2f
c000cee6:	74 f7                	je     c000cedf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cee8:	80 fa 5c             	cmp    dl,0x5c
c000ceeb:	74 f2                	je     c000cedf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000ceed:	eb d1                	jmp    c000cec0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ceef:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cef4:	74 3a                	je     c000cf30 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cef6:	83 f8 03             	cmp    eax,0x3
c000cef9:	74 c5                	je     c000cec0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cefb:	41                   	inc    ecx
c000cefc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000ceff:	80 fa 2f             	cmp    dl,0x2f
c000cf02:	74 f7                	je     c000cefb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf04:	80 fa 5c             	cmp    dl,0x5c
c000cf07:	74 f2                	je     c000cefb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf09:	48                   	dec    eax
c000cf0a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cf0e:	75 06                	jne    c000cf16 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cf10:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf14:	eb f3                	jmp    c000cf09 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000cf16:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cf1a:	74 07                	je     c000cf23 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000cf1c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf20:	48                   	dec    eax
c000cf21:	eb f3                	jmp    c000cf16 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cf23:	40                   	inc    eax
c000cf24:	eb 9a                	jmp    c000cec0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf26:	80 fa 2f             	cmp    dl,0x2f
c000cf29:	74 95                	je     c000cec0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf2b:	80 fa 5c             	cmp    dl,0x5c
c000cf2e:	74 90                	je     c000cec0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf30:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000cf33:	40                   	inc    eax
c000cf34:	eb 8a                	jmp    c000cec0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf36:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf3a:	83 ec 0c             	sub    esp,0xc
c000cf3d:	53                   	push   ebx
c000cf3e:	e8 5d 37 ff ff       	call   c00006a0 <strlen>
c000cf43:	83 c4 10             	add    esp,0x10
c000cf46:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000cf4b:	75 26                	jne    c000cf73 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000cf4d:	83 ec 0c             	sub    esp,0xc
c000cf50:	53                   	push   ebx
c000cf51:	e8 4a 37 ff ff       	call   c00006a0 <strlen>
c000cf56:	83 c4 10             	add    esp,0x10
c000cf59:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000cf5e:	74 26                	je     c000cf86 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000cf60:	83 ec 0c             	sub    esp,0xc
c000cf63:	53                   	push   ebx
c000cf64:	e8 37 37 ff ff       	call   c00006a0 <strlen>
c000cf69:	83 c4 10             	add    esp,0x10
c000cf6c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000cf71:	eb c7                	jmp    c000cf3a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000cf73:	83 ec 0c             	sub    esp,0xc
c000cf76:	53                   	push   ebx
c000cf77:	e8 24 37 ff ff       	call   c00006a0 <strlen>
c000cf7c:	83 c4 10             	add    esp,0x10
c000cf7f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cf84:	74 c7                	je     c000cf4d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000cf86:	81 c4 0c 04 00 00    	add    esp,0x40c
c000cf8c:	5b                   	pop    ebx
c000cf8d:	5e                   	pop    esi
c000cf8e:	5f                   	pop    edi
c000cf8f:	5d                   	pop    ebp
c000cf90:	c3                   	ret    
c000cf91:	90                   	nop

c000cf92 <File::File(char const*, Process*)>:
c000cf92:	83 ec 0c             	sub    esp,0xc
c000cf95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf99:	83 ec 08             	sub    esp,0x8
c000cf9c:	6a 00                	push   0x0
c000cf9e:	50                   	push   eax
c000cf9f:	e8 66 e2 ff ff       	call   c000b20a <UnixFile::UnixFile(int)>
c000cfa4:	83 c4 10             	add    esp,0x10
c000cfa7:	ba 34 32 02 c0       	mov    edx,0xc0023234
c000cfac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfb0:	89 10                	mov    DWORD PTR [eax],edx
c000cfb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cfb6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000cfbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc0:	83 c0 0d             	add    eax,0xd
c000cfc3:	83 ec 04             	sub    esp,0x4
c000cfc6:	52                   	push   edx
c000cfc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfcb:	50                   	push   eax
c000cfcc:	e8 17 fe ff ff       	call   c000cde8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000cfd1:	83 c4 10             	add    esp,0x10
c000cfd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000cfdb:	8d 50 bf             	lea    edx,[eax-0x41]
c000cfde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfe2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000cfe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfec:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000cff0:	90                   	nop
c000cff1:	83 c4 0c             	add    esp,0xc
c000cff4:	c3                   	ret    
c000cff5:	90                   	nop

c000cff6 <File::open(FileOpenMode)>:
c000cff6:	53                   	push   ebx
c000cff7:	b8 0b 00 00 00       	mov    eax,0xb
c000cffc:	83 ec 08             	sub    esp,0x8
c000cfff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d003:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d00a:	80 fa 19             	cmp    dl,0x19
c000d00d:	77 40                	ja     c000d04f <File::open(FileOpenMode)+0x59>
c000d00f:	8b 14 95 20 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95e0]
c000d016:	85 d2                	test   edx,edx
c000d018:	74 35                	je     c000d04f <File::open(FileOpenMode)+0x59>
c000d01a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d020:	85 d2                	test   edx,edx
c000d022:	74 2b                	je     c000d04f <File::open(FileOpenMode)+0x59>
c000d024:	b8 06 00 00 00       	mov    eax,0x6
c000d029:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d02d:	75 20                	jne    c000d04f <File::open(FileOpenMode)+0x59>
c000d02f:	8b 02                	mov    eax,DWORD PTR [edx]
c000d031:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d037:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d03b:	51                   	push   ecx
c000d03c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d03f:	51                   	push   ecx
c000d040:	52                   	push   edx
c000d041:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d044:	83 c4 10             	add    esp,0x10
c000d047:	85 c0                	test   eax,eax
c000d049:	75 04                	jne    c000d04f <File::open(FileOpenMode)+0x59>
c000d04b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d04f:	83 c4 08             	add    esp,0x8
c000d052:	5b                   	pop    ebx
c000d053:	c3                   	ret    

c000d054 <File::close()>:
c000d054:	53                   	push   ebx
c000d055:	b8 0b 00 00 00       	mov    eax,0xb
c000d05a:	83 ec 08             	sub    esp,0x8
c000d05d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d061:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d068:	80 fa 19             	cmp    dl,0x19
c000d06b:	77 41                	ja     c000d0ae <File::close()+0x5a>
c000d06d:	8b 1c 95 20 6a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd95e0]
c000d074:	85 db                	test   ebx,ebx
c000d076:	74 36                	je     c000d0ae <File::close()+0x5a>
c000d078:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d07f:	74 2d                	je     c000d0ae <File::close()+0x5a>
c000d081:	b8 05 00 00 00       	mov    eax,0x5
c000d086:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d08a:	74 22                	je     c000d0ae <File::close()+0x5a>
c000d08c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d090:	8b 04 95 20 6a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd95e0]
c000d097:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d09d:	53                   	push   ebx
c000d09e:	53                   	push   ebx
c000d09f:	8b 10                	mov    edx,DWORD PTR [eax]
c000d0a1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d0a7:	50                   	push   eax
c000d0a8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d0ab:	83 c4 10             	add    esp,0x10
c000d0ae:	83 c4 08             	add    esp,0x8
c000d0b1:	5b                   	pop    ebx
c000d0b2:	c3                   	ret    
c000d0b3:	90                   	nop

c000d0b4 <File::seek(unsigned long long)>:
c000d0b4:	56                   	push   esi
c000d0b5:	53                   	push   ebx
c000d0b6:	b8 0b 00 00 00       	mov    eax,0xb
c000d0bb:	51                   	push   ecx
c000d0bc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d0c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d0c4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d0cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d0cf:	80 fa 19             	cmp    dl,0x19
c000d0d2:	77 31                	ja     c000d105 <File::seek(unsigned long long)+0x51>
c000d0d4:	8b 14 95 20 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95e0]
c000d0db:	85 d2                	test   edx,edx
c000d0dd:	74 26                	je     c000d105 <File::seek(unsigned long long)+0x51>
c000d0df:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d0e5:	85 d2                	test   edx,edx
c000d0e7:	74 1c                	je     c000d105 <File::seek(unsigned long long)+0x51>
c000d0e9:	b8 05 00 00 00       	mov    eax,0x5
c000d0ee:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d0f2:	74 11                	je     c000d105 <File::seek(unsigned long long)+0x51>
c000d0f4:	8b 02                	mov    eax,DWORD PTR [edx]
c000d0f6:	53                   	push   ebx
c000d0f7:	51                   	push   ecx
c000d0f8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d0fe:	52                   	push   edx
c000d0ff:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d102:	83 c4 10             	add    esp,0x10
c000d105:	5a                   	pop    edx
c000d106:	5b                   	pop    ebx
c000d107:	5e                   	pop    esi
c000d108:	c3                   	ret    
c000d109:	90                   	nop

c000d10a <File::tell(unsigned long long*)>:
c000d10a:	83 ec 0c             	sub    esp,0xc
c000d10d:	b8 0b 00 00 00       	mov    eax,0xb
c000d112:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d116:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d11d:	80 fa 19             	cmp    dl,0x19
c000d120:	77 34                	ja     c000d156 <File::tell(unsigned long long*)+0x4c>
c000d122:	8b 14 95 20 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95e0]
c000d129:	85 d2                	test   edx,edx
c000d12b:	74 29                	je     c000d156 <File::tell(unsigned long long*)+0x4c>
c000d12d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d133:	85 d2                	test   edx,edx
c000d135:	74 1f                	je     c000d156 <File::tell(unsigned long long*)+0x4c>
c000d137:	b8 05 00 00 00       	mov    eax,0x5
c000d13c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d140:	74 14                	je     c000d156 <File::tell(unsigned long long*)+0x4c>
c000d142:	50                   	push   eax
c000d143:	8b 02                	mov    eax,DWORD PTR [edx]
c000d145:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d149:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d14f:	52                   	push   edx
c000d150:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d153:	83 c4 10             	add    esp,0x10
c000d156:	83 c4 0c             	add    esp,0xc
c000d159:	c3                   	ret    

c000d15a <File::rewind()>:
c000d15a:	83 ec 10             	sub    esp,0x10
c000d15d:	6a 00                	push   0x0
c000d15f:	6a 00                	push   0x0
c000d161:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d165:	e8 4a ff ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c000d16a:	83 c4 1c             	add    esp,0x1c
c000d16d:	c3                   	ret    

c000d16e <File::unlink()>:
c000d16e:	83 ec 0c             	sub    esp,0xc
c000d171:	b8 0b 00 00 00       	mov    eax,0xb
c000d176:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d17a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d181:	80 f9 19             	cmp    cl,0x19
c000d184:	77 2f                	ja     c000d1b5 <File::unlink()+0x47>
c000d186:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c000d18d:	85 c9                	test   ecx,ecx
c000d18f:	74 24                	je     c000d1b5 <File::unlink()+0x47>
c000d191:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d197:	85 c9                	test   ecx,ecx
c000d199:	74 1a                	je     c000d1b5 <File::unlink()+0x47>
c000d19b:	b8 06 00 00 00       	mov    eax,0x6
c000d1a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1a4:	75 0f                	jne    c000d1b5 <File::unlink()+0x47>
c000d1a6:	83 c2 0d             	add    edx,0xd
c000d1a9:	50                   	push   eax
c000d1aa:	50                   	push   eax
c000d1ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d1ad:	52                   	push   edx
c000d1ae:	51                   	push   ecx
c000d1af:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d1b2:	83 c4 10             	add    esp,0x10
c000d1b5:	83 c4 0c             	add    esp,0xc
c000d1b8:	c3                   	ret    
c000d1b9:	90                   	nop

c000d1ba <File::rename(char const*)>:
c000d1ba:	83 ec 0c             	sub    esp,0xc
c000d1bd:	b8 0b 00 00 00       	mov    eax,0xb
c000d1c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d1c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d1cd:	80 f9 19             	cmp    cl,0x19
c000d1d0:	77 32                	ja     c000d204 <File::rename(char const*)+0x4a>
c000d1d2:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c000d1d9:	85 c9                	test   ecx,ecx
c000d1db:	74 27                	je     c000d204 <File::rename(char const*)+0x4a>
c000d1dd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d1e3:	85 c9                	test   ecx,ecx
c000d1e5:	74 1d                	je     c000d204 <File::rename(char const*)+0x4a>
c000d1e7:	b8 06 00 00 00       	mov    eax,0x6
c000d1ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1f0:	75 12                	jne    c000d204 <File::rename(char const*)+0x4a>
c000d1f2:	83 c2 0d             	add    edx,0xd
c000d1f5:	50                   	push   eax
c000d1f6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d1f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d1fc:	52                   	push   edx
c000d1fd:	51                   	push   ecx
c000d1fe:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d201:	83 c4 10             	add    esp,0x10
c000d204:	83 c4 0c             	add    esp,0xc
c000d207:	c3                   	ret    

c000d208 <File::chfatattr(unsigned char, unsigned char)>:
c000d208:	57                   	push   edi
c000d209:	b8 0b 00 00 00       	mov    eax,0xb
c000d20e:	56                   	push   esi
c000d20f:	53                   	push   ebx
c000d210:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d214:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d218:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d21f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d223:	80 f9 19             	cmp    cl,0x19
c000d226:	77 37                	ja     c000d25f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d228:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c000d22f:	85 c9                	test   ecx,ecx
c000d231:	74 2c                	je     c000d25f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d233:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d239:	85 c9                	test   ecx,ecx
c000d23b:	74 22                	je     c000d25f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d23d:	b8 06 00 00 00       	mov    eax,0x6
c000d242:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d246:	75 17                	jne    c000d25f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d248:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d24a:	89 f0                	mov    eax,esi
c000d24c:	83 c2 0d             	add    edx,0xd
c000d24f:	0f b6 f0             	movzx  esi,al
c000d252:	0f b6 db             	movzx  ebx,bl
c000d255:	56                   	push   esi
c000d256:	53                   	push   ebx
c000d257:	52                   	push   edx
c000d258:	51                   	push   ecx
c000d259:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d25c:	83 c4 10             	add    esp,0x10
c000d25f:	5b                   	pop    ebx
c000d260:	5e                   	pop    esi
c000d261:	5f                   	pop    edi
c000d262:	c3                   	ret    
c000d263:	90                   	nop

c000d264 <File::exists()>:
c000d264:	83 ec 0c             	sub    esp,0xc
c000d267:	31 c0                	xor    eax,eax
c000d269:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d26d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d274:	80 f9 19             	cmp    cl,0x19
c000d277:	77 24                	ja     c000d29d <File::exists()+0x39>
c000d279:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c000d280:	85 c9                	test   ecx,ecx
c000d282:	74 19                	je     c000d29d <File::exists()+0x39>
c000d284:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d28a:	85 c9                	test   ecx,ecx
c000d28c:	74 0f                	je     c000d29d <File::exists()+0x39>
c000d28e:	83 c2 0d             	add    edx,0xd
c000d291:	50                   	push   eax
c000d292:	50                   	push   eax
c000d293:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d295:	52                   	push   edx
c000d296:	51                   	push   ecx
c000d297:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d29a:	83 c4 10             	add    esp,0x10
c000d29d:	83 c4 0c             	add    esp,0xc
c000d2a0:	c3                   	ret    
c000d2a1:	90                   	nop

c000d2a2 <File::stat(unsigned long long*, bool*)>:
c000d2a2:	56                   	push   esi
c000d2a3:	53                   	push   ebx
c000d2a4:	50                   	push   eax
c000d2a5:	b8 0b 00 00 00       	mov    eax,0xb
c000d2aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2ae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d2b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2bd:	80 f9 19             	cmp    cl,0x19
c000d2c0:	77 3d                	ja     c000d2ff <File::stat(unsigned long long*, bool*)+0x5d>
c000d2c2:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c000d2c9:	85 c9                	test   ecx,ecx
c000d2cb:	74 32                	je     c000d2ff <File::stat(unsigned long long*, bool*)+0x5d>
c000d2cd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d2d3:	85 c9                	test   ecx,ecx
c000d2d5:	74 28                	je     c000d2ff <File::stat(unsigned long long*, bool*)+0x5d>
c000d2d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d2d9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d2dd:	74 13                	je     c000d2f2 <File::stat(unsigned long long*, bool*)+0x50>
c000d2df:	83 ec 04             	sub    esp,0x4
c000d2e2:	56                   	push   esi
c000d2e3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d2e9:	51                   	push   ecx
c000d2ea:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d2ed:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d2f0:	eb 0a                	jmp    c000d2fc <File::stat(unsigned long long*, bool*)+0x5a>
c000d2f2:	53                   	push   ebx
c000d2f3:	83 c2 0d             	add    edx,0xd
c000d2f6:	56                   	push   esi
c000d2f7:	52                   	push   edx
c000d2f8:	51                   	push   ecx
c000d2f9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d2fc:	83 c4 10             	add    esp,0x10
c000d2ff:	5a                   	pop    edx
c000d300:	5b                   	pop    ebx
c000d301:	5e                   	pop    esi
c000d302:	c3                   	ret    

c000d303 <Fs::setcwd(Process*, char*)>:
c000d303:	55                   	push   ebp
c000d304:	57                   	push   edi
c000d305:	56                   	push   esi
c000d306:	53                   	push   ebx
c000d307:	81 ec 20 02 00 00    	sub    esp,0x220
c000d30d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d314:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d31a:	57                   	push   edi
c000d31b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d322:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d326:	56                   	push   esi
c000d327:	e8 bc fa ff ff       	call   c000cde8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d32c:	89 34 24             	mov    DWORD PTR [esp],esi
c000d32f:	e8 6c 33 ff ff       	call   c00006a0 <strlen>
c000d334:	83 c4 10             	add    esp,0x10
c000d337:	83 f8 02             	cmp    eax,0x2
c000d33a:	77 17                	ja     c000d353 <Fs::setcwd(Process*, char*)+0x50>
c000d33c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d341:	83 e8 41             	sub    eax,0x41
c000d344:	83 f8 19             	cmp    eax,0x19
c000d347:	76 24                	jbe    c000d36d <Fs::setcwd(Process*, char*)+0x6a>
c000d349:	b8 03 00 00 00       	mov    eax,0x3
c000d34e:	e9 e0 00 00 00       	jmp    c000d433 <Fs::setcwd(Process*, char*)+0x130>
c000d353:	83 ec 0c             	sub    esp,0xc
c000d356:	56                   	push   esi
c000d357:	e8 44 33 ff ff       	call   c00006a0 <strlen>
c000d35c:	83 c4 10             	add    esp,0x10
c000d35f:	83 f8 03             	cmp    eax,0x3
c000d362:	75 34                	jne    c000d398 <Fs::setcwd(Process*, char*)+0x95>
c000d364:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d369:	75 2d                	jne    c000d398 <Fs::setcwd(Process*, char*)+0x95>
c000d36b:	eb cf                	jmp    c000d33c <Fs::setcwd(Process*, char*)+0x39>
c000d36d:	8b 14 85 20 6a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd95e0]
c000d374:	b8 05 00 00 00       	mov    eax,0x5
c000d379:	85 d2                	test   edx,edx
c000d37b:	0f 84 b2 00 00 00    	je     c000d433 <Fs::setcwd(Process*, char*)+0x130>
c000d381:	b8 06 00 00 00       	mov    eax,0x6
c000d386:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d38d:	0f 85 92 00 00 00    	jne    c000d425 <Fs::setcwd(Process*, char*)+0x122>
c000d393:	e9 9b 00 00 00       	jmp    c000d433 <Fs::setcwd(Process*, char*)+0x130>
c000d398:	83 ec 0c             	sub    esp,0xc
c000d39b:	68 14 01 00 00       	push   0x114
c000d3a0:	e8 1e c6 ff ff       	call   c00099c3 <malloc>
c000d3a5:	83 c4 0c             	add    esp,0xc
c000d3a8:	89 c3                	mov    ebx,eax
c000d3aa:	55                   	push   ebp
c000d3ab:	56                   	push   esi
c000d3ac:	50                   	push   eax
c000d3ad:	e8 e0 fb ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c000d3b2:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d3b7:	83 c4 0c             	add    esp,0xc
c000d3ba:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d3be:	50                   	push   eax
c000d3bf:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d3c3:	50                   	push   eax
c000d3c4:	53                   	push   ebx
c000d3c5:	e8 d8 fe ff ff       	call   c000d2a2 <File::stat(unsigned long long*, bool*)>
c000d3ca:	83 c4 10             	add    esp,0x10
c000d3cd:	83 f8 02             	cmp    eax,0x2
c000d3d0:	74 04                	je     c000d3d6 <Fs::setcwd(Process*, char*)+0xd3>
c000d3d2:	85 c0                	test   eax,eax
c000d3d4:	74 1c                	je     c000d3f2 <Fs::setcwd(Process*, char*)+0xef>
c000d3d6:	b8 01 00 00 00       	mov    eax,0x1
c000d3db:	85 db                	test   ebx,ebx
c000d3dd:	74 54                	je     c000d433 <Fs::setcwd(Process*, char*)+0x130>
c000d3df:	83 ec 0c             	sub    esp,0xc
c000d3e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3e4:	53                   	push   ebx
c000d3e5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d3e8:	83 c4 10             	add    esp,0x10
c000d3eb:	b8 01 00 00 00       	mov    eax,0x1
c000d3f0:	eb 41                	jmp    c000d433 <Fs::setcwd(Process*, char*)+0x130>
c000d3f2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d3f7:	75 1c                	jne    c000d415 <Fs::setcwd(Process*, char*)+0x112>
c000d3f9:	b8 02 00 00 00       	mov    eax,0x2
c000d3fe:	85 db                	test   ebx,ebx
c000d400:	74 31                	je     c000d433 <Fs::setcwd(Process*, char*)+0x130>
c000d402:	83 ec 0c             	sub    esp,0xc
c000d405:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d407:	53                   	push   ebx
c000d408:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d40b:	83 c4 10             	add    esp,0x10
c000d40e:	b8 02 00 00 00       	mov    eax,0x2
c000d413:	eb 1e                	jmp    c000d433 <Fs::setcwd(Process*, char*)+0x130>
c000d415:	85 db                	test   ebx,ebx
c000d417:	74 0c                	je     c000d425 <Fs::setcwd(Process*, char*)+0x122>
c000d419:	83 ec 0c             	sub    esp,0xc
c000d41c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d41e:	53                   	push   ebx
c000d41f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d422:	83 c4 10             	add    esp,0x10
c000d425:	50                   	push   eax
c000d426:	50                   	push   eax
c000d427:	56                   	push   esi
c000d428:	57                   	push   edi
c000d429:	e8 12 33 ff ff       	call   c0000740 <strcpy>
c000d42e:	83 c4 10             	add    esp,0x10
c000d431:	31 c0                	xor    eax,eax
c000d433:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d439:	5b                   	pop    ebx
c000d43a:	5e                   	pop    esi
c000d43b:	5f                   	pop    edi
c000d43c:	5d                   	pop    ebp
c000d43d:	c3                   	ret    

c000d43e <Directory::Directory(char const*, Process*)>:
c000d43e:	83 ec 0c             	sub    esp,0xc
c000d441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d445:	83 ec 08             	sub    esp,0x8
c000d448:	6a 00                	push   0x0
c000d44a:	50                   	push   eax
c000d44b:	e8 ba dd ff ff       	call   c000b20a <UnixFile::UnixFile(int)>
c000d450:	83 c4 10             	add    esp,0x10
c000d453:	ba 50 32 02 c0       	mov    edx,0xc0023250
c000d458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d45c:	89 10                	mov    DWORD PTR [eax],edx
c000d45e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d462:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d46c:	83 c0 0d             	add    eax,0xd
c000d46f:	83 ec 04             	sub    esp,0x4
c000d472:	52                   	push   edx
c000d473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d477:	50                   	push   eax
c000d478:	e8 6b f9 ff ff       	call   c000cde8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d47d:	83 c4 10             	add    esp,0x10
c000d480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d484:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d487:	8d 50 bf             	lea    edx,[eax-0x41]
c000d48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d48e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d498:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d49c:	90                   	nop
c000d49d:	83 c4 0c             	add    esp,0xc
c000d4a0:	c3                   	ret    
c000d4a1:	90                   	nop

c000d4a2 <Directory::open()>:
c000d4a2:	53                   	push   ebx
c000d4a3:	b8 0b 00 00 00       	mov    eax,0xb
c000d4a8:	83 ec 08             	sub    esp,0x8
c000d4ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4af:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d4b6:	80 fa 19             	cmp    dl,0x19
c000d4b9:	77 3d                	ja     c000d4f8 <Directory::open()+0x56>
c000d4bb:	8b 14 95 20 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95e0]
c000d4c2:	85 d2                	test   edx,edx
c000d4c4:	74 32                	je     c000d4f8 <Directory::open()+0x56>
c000d4c6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d4cc:	85 d2                	test   edx,edx
c000d4ce:	74 28                	je     c000d4f8 <Directory::open()+0x56>
c000d4d0:	b8 06 00 00 00       	mov    eax,0x6
c000d4d5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d4d9:	75 1d                	jne    c000d4f8 <Directory::open()+0x56>
c000d4db:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d4e1:	50                   	push   eax
c000d4e2:	8b 02                	mov    eax,DWORD PTR [edx]
c000d4e4:	51                   	push   ecx
c000d4e5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d4e8:	51                   	push   ecx
c000d4e9:	52                   	push   edx
c000d4ea:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d4ed:	83 c4 10             	add    esp,0x10
c000d4f0:	85 c0                	test   eax,eax
c000d4f2:	75 04                	jne    c000d4f8 <Directory::open()+0x56>
c000d4f4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d4f8:	83 c4 08             	add    esp,0x8
c000d4fb:	5b                   	pop    ebx
c000d4fc:	c3                   	ret    
c000d4fd:	90                   	nop

c000d4fe <Directory::close()>:
c000d4fe:	53                   	push   ebx
c000d4ff:	b8 0b 00 00 00       	mov    eax,0xb
c000d504:	83 ec 08             	sub    esp,0x8
c000d507:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d50b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d512:	80 fa 19             	cmp    dl,0x19
c000d515:	77 41                	ja     c000d558 <Directory::close()+0x5a>
c000d517:	8b 1c 95 20 6a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd95e0]
c000d51e:	85 db                	test   ebx,ebx
c000d520:	74 36                	je     c000d558 <Directory::close()+0x5a>
c000d522:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d529:	74 2d                	je     c000d558 <Directory::close()+0x5a>
c000d52b:	b8 05 00 00 00       	mov    eax,0x5
c000d530:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d534:	74 22                	je     c000d558 <Directory::close()+0x5a>
c000d536:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d53a:	8b 04 95 20 6a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd95e0]
c000d541:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d547:	53                   	push   ebx
c000d548:	53                   	push   ebx
c000d549:	8b 10                	mov    edx,DWORD PTR [eax]
c000d54b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d551:	50                   	push   eax
c000d552:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d555:	83 c4 10             	add    esp,0x10
c000d558:	83 c4 08             	add    esp,0x8
c000d55b:	5b                   	pop    ebx
c000d55c:	c3                   	ret    
c000d55d:	90                   	nop

c000d55e <Directory::unlink()>:
c000d55e:	83 ec 0c             	sub    esp,0xc
c000d561:	b8 0b 00 00 00       	mov    eax,0xb
c000d566:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d56a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d571:	80 f9 19             	cmp    cl,0x19
c000d574:	77 2f                	ja     c000d5a5 <Directory::unlink()+0x47>
c000d576:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c000d57d:	85 c9                	test   ecx,ecx
c000d57f:	74 24                	je     c000d5a5 <Directory::unlink()+0x47>
c000d581:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d587:	85 c9                	test   ecx,ecx
c000d589:	74 1a                	je     c000d5a5 <Directory::unlink()+0x47>
c000d58b:	b8 06 00 00 00       	mov    eax,0x6
c000d590:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d594:	75 0f                	jne    c000d5a5 <Directory::unlink()+0x47>
c000d596:	83 c2 0d             	add    edx,0xd
c000d599:	50                   	push   eax
c000d59a:	50                   	push   eax
c000d59b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d59d:	52                   	push   edx
c000d59e:	51                   	push   ecx
c000d59f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d5a2:	83 c4 10             	add    esp,0x10
c000d5a5:	83 c4 0c             	add    esp,0xc
c000d5a8:	c3                   	ret    
c000d5a9:	90                   	nop

c000d5aa <Directory::rename(char const*)>:
c000d5aa:	83 ec 0c             	sub    esp,0xc
c000d5ad:	b8 0b 00 00 00       	mov    eax,0xb
c000d5b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5b6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5bd:	80 f9 19             	cmp    cl,0x19
c000d5c0:	77 32                	ja     c000d5f4 <Directory::rename(char const*)+0x4a>
c000d5c2:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c000d5c9:	85 c9                	test   ecx,ecx
c000d5cb:	74 27                	je     c000d5f4 <Directory::rename(char const*)+0x4a>
c000d5cd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5d3:	85 c9                	test   ecx,ecx
c000d5d5:	74 1d                	je     c000d5f4 <Directory::rename(char const*)+0x4a>
c000d5d7:	b8 06 00 00 00       	mov    eax,0x6
c000d5dc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d5e0:	75 12                	jne    c000d5f4 <Directory::rename(char const*)+0x4a>
c000d5e2:	83 c2 0d             	add    edx,0xd
c000d5e5:	50                   	push   eax
c000d5e6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d5ec:	52                   	push   edx
c000d5ed:	51                   	push   ecx
c000d5ee:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d5f1:	83 c4 10             	add    esp,0x10
c000d5f4:	83 c4 0c             	add    esp,0xc
c000d5f7:	c3                   	ret    

c000d5f8 <Directory::exists()>:
c000d5f8:	83 ec 0c             	sub    esp,0xc
c000d5fb:	31 c0                	xor    eax,eax
c000d5fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d601:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d608:	80 f9 19             	cmp    cl,0x19
c000d60b:	77 24                	ja     c000d631 <Directory::exists()+0x39>
c000d60d:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c000d614:	85 c9                	test   ecx,ecx
c000d616:	74 19                	je     c000d631 <Directory::exists()+0x39>
c000d618:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d61e:	85 c9                	test   ecx,ecx
c000d620:	74 0f                	je     c000d631 <Directory::exists()+0x39>
c000d622:	83 c2 0d             	add    edx,0xd
c000d625:	50                   	push   eax
c000d626:	50                   	push   eax
c000d627:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d629:	52                   	push   edx
c000d62a:	51                   	push   ecx
c000d62b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d62e:	83 c4 10             	add    esp,0x10
c000d631:	83 c4 0c             	add    esp,0xc
c000d634:	c3                   	ret    
c000d635:	90                   	nop

c000d636 <Directory::read(dirent*)>:
c000d636:	83 ec 1c             	sub    esp,0x1c
c000d639:	b8 0b 00 00 00       	mov    eax,0xb
c000d63e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d642:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d649:	80 fa 19             	cmp    dl,0x19
c000d64c:	77 30                	ja     c000d67e <Directory::read(dirent*)+0x48>
c000d64e:	8b 14 95 20 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95e0]
c000d655:	85 d2                	test   edx,edx
c000d657:	74 25                	je     c000d67e <Directory::read(dirent*)+0x48>
c000d659:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d660:	74 1c                	je     c000d67e <Directory::read(dirent*)+0x48>
c000d662:	83 ec 0c             	sub    esp,0xc
c000d665:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d667:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d66b:	52                   	push   edx
c000d66c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d670:	6a 00                	push   0x0
c000d672:	68 10 01 00 00       	push   0x110
c000d677:	51                   	push   ecx
c000d678:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d67b:	83 c4 20             	add    esp,0x20
c000d67e:	83 c4 1c             	add    esp,0x1c
c000d681:	c3                   	ret    

c000d682 <Directory::create()>:
c000d682:	83 ec 0c             	sub    esp,0xc
c000d685:	b8 0b 00 00 00       	mov    eax,0xb
c000d68a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d68e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d695:	80 f9 19             	cmp    cl,0x19
c000d698:	77 2f                	ja     c000d6c9 <Directory::create()+0x47>
c000d69a:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c000d6a1:	85 c9                	test   ecx,ecx
c000d6a3:	74 24                	je     c000d6c9 <Directory::create()+0x47>
c000d6a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d6ab:	85 c9                	test   ecx,ecx
c000d6ad:	74 1a                	je     c000d6c9 <Directory::create()+0x47>
c000d6af:	b8 06 00 00 00       	mov    eax,0x6
c000d6b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d6b8:	75 0f                	jne    c000d6c9 <Directory::create()+0x47>
c000d6ba:	83 c2 0d             	add    edx,0xd
c000d6bd:	50                   	push   eax
c000d6be:	50                   	push   eax
c000d6bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6c1:	52                   	push   edx
c000d6c2:	51                   	push   ecx
c000d6c3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d6c6:	83 c4 10             	add    esp,0x10
c000d6c9:	83 c4 0c             	add    esp,0xc
c000d6cc:	c3                   	ret    
c000d6cd:	90                   	nop

c000d6ce <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d6ce:	b8 0a 00 00 00       	mov    eax,0xa
c000d6d3:	c3                   	ret    

c000d6d4 <Bus::Bus(char const*)>:
c000d6d4:	83 ec 0c             	sub    esp,0xc
c000d6d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6db:	83 ec 08             	sub    esp,0x8
c000d6de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6e2:	50                   	push   eax
c000d6e3:	e8 92 09 00 00       	call   c000e07a <Device::Device(char const*)>
c000d6e8:	83 c4 10             	add    esp,0x10
c000d6eb:	ba 6c 32 02 c0       	mov    edx,0xc002326c
c000d6f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6f4:	89 10                	mov    DWORD PTR [eax],edx
c000d6f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6fa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d704:	90                   	nop
c000d705:	83 c4 0c             	add    esp,0xc
c000d708:	c3                   	ret    
c000d709:	90                   	nop
c000d70a:	66 90                	xchg   ax,ax

c000d70c <Bus::~Bus()>:
c000d70c:	83 ec 0c             	sub    esp,0xc
c000d70f:	ba 6c 32 02 c0       	mov    edx,0xc002326c
c000d714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d718:	89 10                	mov    DWORD PTR [eax],edx
c000d71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71e:	83 ec 0c             	sub    esp,0xc
c000d721:	50                   	push   eax
c000d722:	e8 1d 06 00 00       	call   c000dd44 <Device::~Device()>
c000d727:	83 c4 10             	add    esp,0x10
c000d72a:	90                   	nop
c000d72b:	83 c4 0c             	add    esp,0xc
c000d72e:	c3                   	ret    
c000d72f:	90                   	nop

c000d730 <Bus::~Bus()>:
c000d730:	83 ec 0c             	sub    esp,0xc
c000d733:	83 ec 0c             	sub    esp,0xc
c000d736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73a:	e8 cd ff ff ff       	call   c000d70c <Bus::~Bus()>
c000d73f:	83 c4 10             	add    esp,0x10
c000d742:	83 ec 08             	sub    esp,0x8
c000d745:	68 58 01 00 00       	push   0x158
c000d74a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d74e:	e8 f4 f1 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000d753:	83 c4 10             	add    esp,0x10
c000d756:	83 c4 0c             	add    esp,0xc
c000d759:	c3                   	ret    
c000d75a:	66 90                	xchg   ax,ax

c000d75c <Buzzer::Buzzer(char const*)>:
c000d75c:	83 ec 0c             	sub    esp,0xc
c000d75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d763:	83 ec 08             	sub    esp,0x8
c000d766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d76a:	50                   	push   eax
c000d76b:	e8 0a 09 00 00       	call   c000e07a <Device::Device(char const*)>
c000d770:	83 c4 10             	add    esp,0x10
c000d773:	ba 98 32 02 c0       	mov    edx,0xc0023298
c000d778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d77c:	89 10                	mov    DWORD PTR [eax],edx
c000d77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d782:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000d78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d790:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000d79a:	90                   	nop
c000d79b:	83 c4 0c             	add    esp,0xc
c000d79e:	c3                   	ret    
c000d79f:	90                   	nop

c000d7a0 <Buzzer::~Buzzer()>:
c000d7a0:	83 ec 0c             	sub    esp,0xc
c000d7a3:	ba 98 32 02 c0       	mov    edx,0xc0023298
c000d7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ac:	89 10                	mov    DWORD PTR [eax],edx
c000d7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b2:	83 ec 0c             	sub    esp,0xc
c000d7b5:	50                   	push   eax
c000d7b6:	e8 89 05 00 00       	call   c000dd44 <Device::~Device()>
c000d7bb:	83 c4 10             	add    esp,0x10
c000d7be:	90                   	nop
c000d7bf:	83 c4 0c             	add    esp,0xc
c000d7c2:	c3                   	ret    
c000d7c3:	90                   	nop

c000d7c4 <Buzzer::~Buzzer()>:
c000d7c4:	83 ec 0c             	sub    esp,0xc
c000d7c7:	83 ec 0c             	sub    esp,0xc
c000d7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ce:	e8 cd ff ff ff       	call   c000d7a0 <Buzzer::~Buzzer()>
c000d7d3:	83 c4 10             	add    esp,0x10
c000d7d6:	83 ec 08             	sub    esp,0x8
c000d7d9:	68 5c 01 00 00       	push   0x15c
c000d7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e2:	e8 60 f1 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000d7e7:	83 c4 10             	add    esp,0x10
c000d7ea:	83 c4 0c             	add    esp,0xc
c000d7ed:	c3                   	ret    

c000d7ee <Buzzer::stop()>:
c000d7ee:	83 ec 14             	sub    esp,0x14
c000d7f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d7f5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7f7:	6a 00                	push   0x0
c000d7f9:	50                   	push   eax
c000d7fa:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d7fd:	83 c4 1c             	add    esp,0x1c
c000d800:	c3                   	ret    

c000d801 <beepThread(void*)>:
c000d801:	53                   	push   ebx
c000d802:	83 ec 08             	sub    esp,0x8
c000d805:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000d80a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d80e:	48                   	dec    eax
c000d80f:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000d814:	75 02                	jne    c000d818 <beepThread(void*)+0x17>
c000d816:	fb                   	sti    
c000d817:	90                   	nop
c000d818:	50                   	push   eax
c000d819:	50                   	push   eax
c000d81a:	b8 40 42 0f 00       	mov    eax,0xf4240
c000d81f:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000d825:	52                   	push   edx
c000d826:	50                   	push   eax
c000d827:	e8 d8 a9 00 00       	call   c0018204 <nanoSleep(unsigned long long)>
c000d82c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d82f:	e8 ba ff ff ff       	call   c000d7ee <Buzzer::stop()>
c000d834:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d83c:	83 c4 18             	add    esp,0x18
c000d83f:	5b                   	pop    ebx
c000d840:	e9 af a8 00 00       	jmp    c00180f4 <blockTask(TaskState)>
c000d845:	90                   	nop

c000d846 <Buzzer::beep(int, int, bool)>:
c000d846:	57                   	push   edi
c000d847:	56                   	push   esi
c000d848:	53                   	push   ebx
c000d849:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d84d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d851:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d855:	52                   	push   edx
c000d856:	52                   	push   edx
c000d857:	8b 06                	mov    eax,DWORD PTR [esi]
c000d859:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d85d:	56                   	push   esi
c000d85e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d861:	83 c4 10             	add    esp,0x10
c000d864:	89 f8                	mov    eax,edi
c000d866:	84 c0                	test   al,al
c000d868:	74 22                	je     c000d88c <Buzzer::beep(int, int, bool)+0x46>
c000d86a:	50                   	push   eax
c000d86b:	50                   	push   eax
c000d86c:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000d872:	99                   	cdq    
c000d873:	52                   	push   edx
c000d874:	50                   	push   eax
c000d875:	e8 8a a9 00 00       	call   c0018204 <nanoSleep(unsigned long long)>
c000d87a:	83 c4 10             	add    esp,0x10
c000d87d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000d881:	5b                   	pop    ebx
c000d882:	5e                   	pop    esi
c000d883:	5f                   	pop    edi
c000d884:	e9 65 ff ff ff       	jmp    c000d7ee <Buzzer::stop()>
c000d889:	8d 76 00             	lea    esi,[esi+0x0]
c000d88c:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000d892:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000d897:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000d89f:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000d8a3:	c7 44 24 14 01 d8 00 c0 	mov    DWORD PTR [esp+0x14],0xc000d801
c000d8ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d8af:	5b                   	pop    ebx
c000d8b0:	5e                   	pop    esi
c000d8b1:	5f                   	pop    edi
c000d8b2:	e9 15 a4 00 00       	jmp    c0017ccc <Process::createThread(void (*)(void*), void*, int)>
c000d8b7:	90                   	nop

c000d8b8 <User::loadClockSettings(int)>:
c000d8b8:	53                   	push   ebx
c000d8b9:	83 ec 14             	sub    esp,0x14
c000d8bc:	68 14 01 00 00       	push   0x114
c000d8c1:	e8 fd c0 ff ff       	call   c00099c3 <malloc>
c000d8c6:	83 c4 0c             	add    esp,0xc
c000d8c9:	89 c3                	mov    ebx,eax
c000d8cb:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c000d8d1:	68 c0 32 02 c0       	push   0xc00232c0
c000d8d6:	50                   	push   eax
c000d8d7:	e8 b6 f6 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c000d8dc:	58                   	pop    eax
c000d8dd:	5a                   	pop    edx
c000d8de:	6a 01                	push   0x1
c000d8e0:	53                   	push   ebx
c000d8e1:	e8 10 f7 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c000d8e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d8e9:	e8 66 f7 ff ff       	call   c000d054 <File::close()>
c000d8ee:	83 c4 10             	add    esp,0x10
c000d8f1:	85 db                	test   ebx,ebx
c000d8f3:	74 0f                	je     c000d904 <User::loadClockSettings(int)+0x4c>
c000d8f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d8fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d8fe:	83 c4 08             	add    esp,0x8
c000d901:	5b                   	pop    ebx
c000d902:	ff e0                	jmp    eax
c000d904:	83 c4 08             	add    esp,0x8
c000d907:	5b                   	pop    ebx
c000d908:	c3                   	ret    
c000d909:	90                   	nop

c000d90a <Clock::Clock(char const*)>:
c000d90a:	83 ec 0c             	sub    esp,0xc
c000d90d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d911:	83 ec 08             	sub    esp,0x8
c000d914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d918:	50                   	push   eax
c000d919:	e8 5c 07 00 00       	call   c000e07a <Device::Device(char const*)>
c000d91e:	83 c4 10             	add    esp,0x10
c000d921:	ba e8 32 02 c0       	mov    edx,0xc00232e8
c000d926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d92a:	89 10                	mov    DWORD PTR [eax],edx
c000d92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d930:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000d93a:	90                   	nop
c000d93b:	83 c4 0c             	add    esp,0xc
c000d93e:	c3                   	ret    
c000d93f:	90                   	nop

c000d940 <Clock::~Clock()>:
c000d940:	83 ec 0c             	sub    esp,0xc
c000d943:	ba e8 32 02 c0       	mov    edx,0xc00232e8
c000d948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d94c:	89 10                	mov    DWORD PTR [eax],edx
c000d94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d952:	83 ec 0c             	sub    esp,0xc
c000d955:	50                   	push   eax
c000d956:	e8 e9 03 00 00       	call   c000dd44 <Device::~Device()>
c000d95b:	83 c4 10             	add    esp,0x10
c000d95e:	90                   	nop
c000d95f:	83 c4 0c             	add    esp,0xc
c000d962:	c3                   	ret    
c000d963:	90                   	nop

c000d964 <Clock::~Clock()>:
c000d964:	83 ec 0c             	sub    esp,0xc
c000d967:	83 ec 0c             	sub    esp,0xc
c000d96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d96e:	e8 cd ff ff ff       	call   c000d940 <Clock::~Clock()>
c000d973:	83 c4 10             	add    esp,0x10
c000d976:	83 ec 08             	sub    esp,0x8
c000d979:	68 58 01 00 00       	push   0x158
c000d97e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d982:	e8 c0 ef ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000d987:	83 c4 10             	add    esp,0x10
c000d98a:	83 c4 0c             	add    esp,0xc
c000d98d:	c3                   	ret    

c000d98e <Clock::timeInSecondsLocal()>:
c000d98e:	53                   	push   ebx
c000d98f:	83 ec 14             	sub    esp,0x14
c000d992:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d996:	8b 10                	mov    edx,DWORD PTR [eax]
c000d998:	50                   	push   eax
c000d999:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d99c:	0f b6 0d 9c 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc002659c
c000d9a3:	03 0d a0 65 02 c0    	add    ecx,DWORD PTR ds:0xc00265a0
c000d9a9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d9af:	89 cb                	mov    ebx,ecx
c000d9b1:	c1 fb 1f             	sar    ebx,0x1f
c000d9b4:	01 c8                	add    eax,ecx
c000d9b6:	11 da                	adc    edx,ebx
c000d9b8:	83 c4 10             	add    esp,0x10
c000d9bb:	31 c9                	xor    ecx,ecx
c000d9bd:	80 3d 9d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002659d,0x0
c000d9c4:	74 05                	je     c000d9cb <Clock::timeInSecondsLocal()+0x3d>
c000d9c6:	b9 08 07 00 00       	mov    ecx,0x708
c000d9cb:	31 db                	xor    ebx,ebx
c000d9cd:	01 c8                	add    eax,ecx
c000d9cf:	11 da                	adc    edx,ebx
c000d9d1:	83 c4 08             	add    esp,0x8
c000d9d4:	5b                   	pop    ebx
c000d9d5:	c3                   	ret    

c000d9d6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000d9d6:	57                   	push   edi
c000d9d7:	56                   	push   esi
c000d9d8:	53                   	push   ebx
c000d9d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d9dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d9e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d9e7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000d9ea:	0f b6 05 9c 65 02 c0 	movzx  eax,BYTE PTR ds:0xc002659c
c000d9f1:	03 05 a0 65 02 c0    	add    eax,DWORD PTR ds:0xc00265a0
c000d9f7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000d9fd:	99                   	cdq    
c000d9fe:	29 c6                	sub    esi,eax
c000da00:	19 d7                	sbb    edi,edx
c000da02:	89 f0                	mov    eax,esi
c000da04:	89 fa                	mov    edx,edi
c000da06:	31 f6                	xor    esi,esi
c000da08:	80 3d 9d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002659d,0x0
c000da0f:	74 05                	je     c000da16 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000da11:	be 08 07 00 00       	mov    esi,0x708
c000da16:	31 ff                	xor    edi,edi
c000da18:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000da1c:	29 f0                	sub    eax,esi
c000da1e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da22:	19 fa                	sbb    edx,edi
c000da24:	89 d8                	mov    eax,ebx
c000da26:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da2a:	5b                   	pop    ebx
c000da2b:	5e                   	pop    esi
c000da2c:	5f                   	pop    edi
c000da2d:	ff e0                	jmp    eax

c000da2f <datetimeToSeconds(datetime_t)>:
c000da2f:	55                   	push   ebp
c000da30:	57                   	push   edi
c000da31:	56                   	push   esi
c000da32:	53                   	push   ebx
c000da33:	83 ec 14             	sub    esp,0x14
c000da36:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da3a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000da3e:	89 d3                	mov    ebx,edx
c000da40:	0f b6 c6             	movzx  eax,dh
c000da43:	c1 eb 10             	shr    ebx,0x10
c000da46:	48                   	dec    eax
c000da47:	66 81 eb 6c 07       	sub    bx,0x76c
c000da4c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000da50:	0f b6 f5             	movzx  esi,ch
c000da53:	89 cf                	mov    edi,ecx
c000da55:	6b f6 3c             	imul   esi,esi,0x3c
c000da58:	c1 ef 10             	shr    edi,0x10
c000da5b:	0f b6 c9             	movzx  ecx,cl
c000da5e:	89 f8                	mov    eax,edi
c000da60:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000da66:	0f b6 f8             	movzx  edi,al
c000da69:	0f b6 d2             	movzx  edx,dl
c000da6c:	01 fe                	add    esi,edi
c000da6e:	01 f1                	add    ecx,esi
c000da70:	0f b7 f3             	movzx  esi,bx
c000da73:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000da77:	c1 f9 1f             	sar    ecx,0x1f
c000da7a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000da7f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000da83:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000da88:	8b 0c 8d 20 33 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcce0]
c000da8f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000da93:	76 29                	jbe    c000dabe <datetimeToSeconds(datetime_t)+0x8f>
c000da95:	f6 c3 03             	test   bl,0x3
c000da98:	75 24                	jne    c000dabe <datetimeToSeconds(datetime_t)+0x8f>
c000da9a:	31 d2                	xor    edx,edx
c000da9c:	bf 64 00 00 00       	mov    edi,0x64
c000daa1:	89 d8                	mov    eax,ebx
c000daa3:	66 f7 f7             	div    di
c000daa6:	66 85 d2             	test   dx,dx
c000daa9:	75 12                	jne    c000dabd <datetimeToSeconds(datetime_t)+0x8e>
c000daab:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000dab1:	bf 90 01 00 00       	mov    edi,0x190
c000dab6:	99                   	cdq    
c000dab7:	f7 ff                	idiv   edi
c000dab9:	85 d2                	test   edx,edx
c000dabb:	75 01                	jne    c000dabe <datetimeToSeconds(datetime_t)+0x8f>
c000dabd:	41                   	inc    ecx
c000dabe:	66 83 fb 46          	cmp    bx,0x46
c000dac2:	76 45                	jbe    c000db09 <datetimeToSeconds(datetime_t)+0xda>
c000dac4:	bb 46 00 00 00       	mov    ebx,0x46
c000dac9:	bf 64 00 00 00       	mov    edi,0x64
c000dace:	bd 90 01 00 00       	mov    ebp,0x190
c000dad3:	b8 6d 01 00 00       	mov    eax,0x16d
c000dad8:	f6 c3 03             	test   bl,0x3
c000dadb:	75 23                	jne    c000db00 <datetimeToSeconds(datetime_t)+0xd1>
c000dadd:	89 d8                	mov    eax,ebx
c000dadf:	99                   	cdq    
c000dae0:	f7 ff                	idiv   edi
c000dae2:	b8 6e 01 00 00       	mov    eax,0x16e
c000dae7:	85 d2                	test   edx,edx
c000dae9:	75 15                	jne    c000db00 <datetimeToSeconds(datetime_t)+0xd1>
c000daeb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000daf1:	99                   	cdq    
c000daf2:	f7 fd                	idiv   ebp
c000daf4:	83 fa 01             	cmp    edx,0x1
c000daf7:	19 c0                	sbb    eax,eax
c000daf9:	f7 d0                	not    eax
c000dafb:	05 6e 01 00 00       	add    eax,0x16e
c000db00:	01 c1                	add    ecx,eax
c000db02:	43                   	inc    ebx
c000db03:	39 f3                	cmp    ebx,esi
c000db05:	7c cc                	jl     c000dad3 <datetimeToSeconds(datetime_t)+0xa4>
c000db07:	eb 35                	jmp    c000db3e <datetimeToSeconds(datetime_t)+0x10f>
c000db09:	74 33                	je     c000db3e <datetimeToSeconds(datetime_t)+0x10f>
c000db0b:	b8 45 00 00 00       	mov    eax,0x45
c000db10:	89 c2                	mov    edx,eax
c000db12:	83 e2 03             	and    edx,0x3
c000db15:	39 f0                	cmp    eax,esi
c000db17:	7e 0f                	jle    c000db28 <datetimeToSeconds(datetime_t)+0xf9>
c000db19:	83 fa 01             	cmp    edx,0x1
c000db1c:	19 d2                	sbb    edx,edx
c000db1e:	48                   	dec    eax
c000db1f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000db26:	eb e8                	jmp    c000db10 <datetimeToSeconds(datetime_t)+0xe1>
c000db28:	b8 6d 01 00 00       	mov    eax,0x16d
c000db2d:	85 d2                	test   edx,edx
c000db2f:	75 0b                	jne    c000db3c <datetimeToSeconds(datetime_t)+0x10d>
c000db31:	66 83 fb 01          	cmp    bx,0x1
c000db35:	19 c0                	sbb    eax,eax
c000db37:	05 6e 01 00 00       	add    eax,0x16e
c000db3c:	29 c1                	sub    ecx,eax
c000db3e:	b8 80 51 01 00       	mov    eax,0x15180
c000db43:	f7 e9                	imul   ecx
c000db45:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db49:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000db4d:	83 c4 14             	add    esp,0x14
c000db50:	5b                   	pop    ebx
c000db51:	5e                   	pop    esi
c000db52:	5f                   	pop    edi
c000db53:	5d                   	pop    ebp
c000db54:	c3                   	ret    
c000db55:	90                   	nop

c000db56 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000db56:	57                   	push   edi
c000db57:	56                   	push   esi
c000db58:	53                   	push   ebx
c000db59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db5d:	8b 06                	mov    eax,DWORD PTR [esi]
c000db5f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000db62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db6a:	e8 c0 fe ff ff       	call   c000da2f <datetimeToSeconds(datetime_t)>
c000db6f:	59                   	pop    ecx
c000db70:	0f b6 0d 9c 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc002659c
c000db77:	5b                   	pop    ebx
c000db78:	03 0d a0 65 02 c0    	add    ecx,DWORD PTR ds:0xc00265a0
c000db7e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000db84:	89 cb                	mov    ebx,ecx
c000db86:	c1 fb 1f             	sar    ebx,0x1f
c000db89:	29 c8                	sub    eax,ecx
c000db8b:	19 da                	sbb    edx,ebx
c000db8d:	31 c9                	xor    ecx,ecx
c000db8f:	80 3d 9d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002659d,0x0
c000db96:	74 05                	je     c000db9d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000db98:	b9 08 07 00 00       	mov    ecx,0x708
c000db9d:	31 db                	xor    ebx,ebx
c000db9f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000dba3:	29 c8                	sub    eax,ecx
c000dba5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dba9:	19 da                	sbb    edx,ebx
c000dbab:	89 f8                	mov    eax,edi
c000dbad:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dbb1:	5b                   	pop    ebx
c000dbb2:	5e                   	pop    esi
c000dbb3:	5f                   	pop    edi
c000dbb4:	ff e0                	jmp    eax

c000dbb6 <secondsToDatetime(unsigned long long)>:
c000dbb6:	55                   	push   ebp
c000dbb7:	57                   	push   edi
c000dbb8:	56                   	push   esi
c000dbb9:	53                   	push   ebx
c000dbba:	83 ec 1c             	sub    esp,0x1c
c000dbbd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dbc1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dbc5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dbc9:	6a 00                	push   0x0
c000dbcb:	68 80 51 01 00       	push   0x15180
c000dbd0:	55                   	push   ebp
c000dbd1:	57                   	push   edi
c000dbd2:	e8 bd 33 01 00       	call   c0020f94 <__udivdi3>
c000dbd7:	83 c4 10             	add    esp,0x10
c000dbda:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dbe0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe4:	6a 00                	push   0x0
c000dbe6:	68 80 51 01 00       	push   0x15180
c000dbeb:	55                   	push   ebp
c000dbec:	57                   	push   edi
c000dbed:	bf 10 0e 00 00       	mov    edi,0xe10
c000dbf2:	e8 9d 34 01 00       	call   c0021094 <__umoddi3>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	99                   	cdq    
c000dbfb:	f7 ff                	idiv   edi
c000dbfd:	bf 3c 00 00 00       	mov    edi,0x3c
c000dc02:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dc05:	89 d0                	mov    eax,edx
c000dc07:	99                   	cdq    
c000dc08:	f7 ff                	idiv   edi
c000dc0a:	85 db                	test   ebx,ebx
c000dc0c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000dc0f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000dc12:	79 11                	jns    c000dc25 <secondsToDatetime(unsigned long long)+0x6f>
c000dc14:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc18:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dc1e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dc23:	eb 07                	jmp    c000dc2c <secondsToDatetime(unsigned long long)+0x76>
c000dc25:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dc2a:	89 d8                	mov    eax,ebx
c000dc2c:	bf b4 05 00 00       	mov    edi,0x5b4
c000dc31:	99                   	cdq    
c000dc32:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000dc37:	f7 f9                	idiv   ecx
c000dc39:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000dc3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc42:	31 d2                	xor    edx,edx
c000dc44:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000dc4c:	01 c3                	add    ebx,eax
c000dc4e:	89 d8                	mov    eax,ebx
c000dc50:	f7 f1                	div    ecx
c000dc52:	31 d2                	xor    edx,edx
c000dc54:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000dc57:	89 d8                	mov    eax,ebx
c000dc59:	f7 f7                	div    edi
c000dc5b:	31 d2                	xor    edx,edx
c000dc5d:	29 c1                	sub    ecx,eax
c000dc5f:	89 d8                	mov    eax,ebx
c000dc61:	f7 f5                	div    ebp
c000dc63:	bd 6d 01 00 00       	mov    ebp,0x16d
c000dc68:	29 c1                	sub    ecx,eax
c000dc6a:	31 d2                	xor    edx,edx
c000dc6c:	89 c8                	mov    eax,ecx
c000dc6e:	f7 f5                	div    ebp
c000dc70:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000dc75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc79:	31 d2                	xor    edx,edx
c000dc7b:	89 c8                	mov    eax,ecx
c000dc7d:	f7 f5                	div    ebp
c000dc7f:	31 d2                	xor    edx,edx
c000dc81:	01 c3                	add    ebx,eax
c000dc83:	89 c8                	mov    eax,ecx
c000dc85:	f7 f7                	div    edi
c000dc87:	bf 99 00 00 00       	mov    edi,0x99
c000dc8c:	29 c3                	sub    ebx,eax
c000dc8e:	31 d2                	xor    edx,edx
c000dc90:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000dc98:	29 c3                	sub    ebx,eax
c000dc9a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dc9d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000dca0:	bb 05 00 00 00       	mov    ebx,0x5
c000dca5:	83 c1 02             	add    ecx,0x2
c000dca8:	89 c8                	mov    eax,ecx
c000dcaa:	f7 f7                	div    edi
c000dcac:	31 d2                	xor    edx,edx
c000dcae:	89 c7                	mov    edi,eax
c000dcb0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000dcb6:	83 c0 02             	add    eax,0x2
c000dcb9:	f7 f3                	div    ebx
c000dcbb:	89 eb                	mov    ebx,ebp
c000dcbd:	29 c3                	sub    ebx,eax
c000dcbf:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000dcc5:	88 1e                	mov    BYTE PTR [esi],bl
c000dcc7:	19 c0                	sbb    eax,eax
c000dcc9:	31 d2                	xor    edx,edx
c000dccb:	83 e0 0c             	and    eax,0xc
c000dcce:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000dcd2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000dcda:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dcde:	83 f9 01             	cmp    ecx,0x1
c000dce1:	0f 96 c2             	setbe  dl
c000dce4:	41                   	inc    ecx
c000dce5:	01 d0                	add    eax,edx
c000dce7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000dcea:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000dcee:	83 c4 1c             	add    esp,0x1c
c000dcf1:	89 f0                	mov    eax,esi
c000dcf3:	5b                   	pop    ebx
c000dcf4:	5e                   	pop    esi
c000dcf5:	5f                   	pop    edi
c000dcf6:	5d                   	pop    ebp
c000dcf7:	c2 04 00             	ret    0x4

c000dcfa <Clock::timeInDatetimeLocal()>:
c000dcfa:	53                   	push   ebx
c000dcfb:	83 ec 14             	sub    esp,0x14
c000dcfe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dd02:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dd06:	e8 83 fc ff ff       	call   c000d98e <Clock::timeInSecondsLocal()>
c000dd0b:	83 c4 0c             	add    esp,0xc
c000dd0e:	52                   	push   edx
c000dd0f:	50                   	push   eax
c000dd10:	53                   	push   ebx
c000dd11:	e8 a0 fe ff ff       	call   c000dbb6 <secondsToDatetime(unsigned long long)>
c000dd16:	89 d8                	mov    eax,ebx
c000dd18:	83 c4 14             	add    esp,0x14
c000dd1b:	5b                   	pop    ebx
c000dd1c:	c2 04 00             	ret    0x4
c000dd1f:	90                   	nop

c000dd20 <Device::hibernate()>:
c000dd20:	c3                   	ret    
c000dd21:	90                   	nop

c000dd22 <Device::wake()>:
c000dd22:	c3                   	ret    
c000dd23:	90                   	nop

c000dd24 <Device::detect()>:
c000dd24:	c3                   	ret    
c000dd25:	90                   	nop

c000dd26 <Device::disableLegacy()>:
c000dd26:	c3                   	ret    
c000dd27:	90                   	nop

c000dd28 <Device::powerSaving(PowerSavingLevel)>:
c000dd28:	c3                   	ret    
c000dd29:	90                   	nop

c000dd2a <DriverlessDevice::close(int, int, void*)>:
c000dd2a:	31 c0                	xor    eax,eax
c000dd2c:	c3                   	ret    
c000dd2d:	90                   	nop

c000dd2e <DriverlessDevice::detect()>:
c000dd2e:	c3                   	ret    
c000dd2f:	90                   	nop

c000dd30 <DriverlessDevice::open(int, int, void*)>:
c000dd30:	83 ec 18             	sub    esp,0x18
c000dd33:	68 50 33 02 c0       	push   0xc0023350
c000dd38:	e8 cc 65 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000dd3d:	83 c8 ff             	or     eax,0xffffffff
c000dd40:	83 c4 1c             	add    esp,0x1c
c000dd43:	c3                   	ret    

c000dd44 <Device::~Device()>:
c000dd44:	ba b0 33 02 c0       	mov    edx,0xc00233b0
c000dd49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd4d:	89 10                	mov    DWORD PTR [eax],edx
c000dd4f:	90                   	nop
c000dd50:	c3                   	ret    
c000dd51:	90                   	nop

c000dd52 <Device::~Device()>:
c000dd52:	83 ec 0c             	sub    esp,0xc
c000dd55:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd59:	e8 e6 ff ff ff       	call   c000dd44 <Device::~Device()>
c000dd5e:	83 c4 04             	add    esp,0x4
c000dd61:	83 ec 08             	sub    esp,0x8
c000dd64:	68 58 01 00 00       	push   0x158
c000dd69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd6d:	e8 d5 eb ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000dd72:	83 c4 10             	add    esp,0x10
c000dd75:	83 c4 0c             	add    esp,0xc
c000dd78:	c3                   	ret    
c000dd79:	90                   	nop

c000dd7a <Device::findAndLoadDriver()>:
c000dd7a:	c7 44 24 04 6e 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc002336e
c000dd82:	e9 a1 ec ff ff       	jmp    c000ca28 <Dbg::kprintf(char const*, ...)>
c000dd87:	90                   	nop

c000dd88 <Device::preOpenPCI(PCIDeviceInfo)>:
c000dd88:	57                   	push   edi
c000dd89:	b9 09 00 00 00       	mov    ecx,0x9
c000dd8e:	56                   	push   esi
c000dd8f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000dd93:	8d 74 24 10          	lea    esi,[esp+0x10]
c000dd97:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000dda1:	81 c7 18 01 00 00    	add    edi,0x118
c000dda7:	fc                   	cld    
c000dda8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ddaa:	5e                   	pop    esi
c000ddab:	5f                   	pop    edi
c000ddac:	c3                   	ret    
c000ddad:	90                   	nop

c000ddae <Device::preOpenACPI(void*, char*, char*)>:
c000ddae:	57                   	push   edi
c000ddaf:	b9 1e 00 00 00       	mov    ecx,0x1e
c000ddb4:	56                   	push   esi
c000ddb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddbd:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000ddc7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000ddcd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000ddd3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ddd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ddd9:	b9 0e 00 00 00       	mov    ecx,0xe
c000ddde:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000dde4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000dde8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ddea:	5e                   	pop    esi
c000ddeb:	5f                   	pop    edi
c000ddec:	c3                   	ret    
c000dded:	90                   	nop

c000ddee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ddee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddf2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000ddf7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000ddfe:	75 0b                	jne    c000de0b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000de00:	8b 00                	mov    eax,DWORD PTR [eax]
c000de02:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de06:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000de09:	eb 1e                	jmp    c000de29 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000de0b:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000de10:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000de16:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000de1c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de1e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000de26:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000de29:	ff e0                	jmp    eax
c000de2b:	90                   	nop

c000de2c <Device::getParent()>:
c000de2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de30:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000de36:	c3                   	ret    
c000de37:	90                   	nop

c000de38 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000de38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de3c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000de41:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000de48:	75 0b                	jne    c000de55 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000de4a:	8b 00                	mov    eax,DWORD PTR [eax]
c000de4c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de50:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de53:	eb 1e                	jmp    c000de73 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000de55:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000de5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000de60:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000de66:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de68:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000de70:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000de73:	ff e0                	jmp    eax
c000de75:	90                   	nop

c000de76 <Device::addChild(Device*)>:
c000de76:	53                   	push   ebx
c000de77:	83 ec 08             	sub    esp,0x8
c000de7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de82:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000de88:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000de8e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000de90:	85 d2                	test   edx,edx
c000de92:	74 04                	je     c000de98 <Device::addChild(Device*)+0x22>
c000de94:	89 d3                	mov    ebx,edx
c000de96:	eb f6                	jmp    c000de8e <Device::addChild(Device*)+0x18>
c000de98:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000de9b:	83 ec 0c             	sub    esp,0xc
c000de9e:	6a 08                	push   0x8
c000dea0:	e8 1e bb ff ff       	call   c00099c3 <malloc>
c000dea5:	89 03                	mov    DWORD PTR [ebx],eax
c000dea7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dead:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000deb4:	83 c4 18             	add    esp,0x18
c000deb7:	5b                   	pop    ebx
c000deb8:	c3                   	ret    
c000deb9:	90                   	nop

c000deba <Device::removeAllChildren()>:
c000deba:	56                   	push   esi
c000debb:	53                   	push   ebx
c000debc:	52                   	push   edx
c000debd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dec1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000dec7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000deca:	74 17                	je     c000dee3 <Device::removeAllChildren()+0x29>
c000decc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000decf:	85 c0                	test   eax,eax
c000ded1:	74 0c                	je     c000dedf <Device::removeAllChildren()+0x25>
c000ded3:	83 ec 0c             	sub    esp,0xc
c000ded6:	8b 10                	mov    edx,DWORD PTR [eax]
c000ded8:	50                   	push   eax
c000ded9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000dedc:	83 c4 10             	add    esp,0x10
c000dedf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dee1:	eb e4                	jmp    c000dec7 <Device::removeAllChildren()+0xd>
c000dee3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000dee9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000deef:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000def5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000defc:	58                   	pop    eax
c000defd:	5b                   	pop    ebx
c000defe:	5e                   	pop    esi
c000deff:	c3                   	ret    

c000df00 <Device::hibernateAll()>:
c000df00:	53                   	push   ebx
c000df01:	83 ec 14             	sub    esp,0x14
c000df04:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df08:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df0a:	53                   	push   ebx
c000df0b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000df0e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df14:	83 c4 10             	add    esp,0x10
c000df17:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df1a:	74 0f                	je     c000df2b <Device::hibernateAll()+0x2b>
c000df1c:	83 ec 0c             	sub    esp,0xc
c000df1f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df22:	e8 d9 ff ff ff       	call   c000df00 <Device::hibernateAll()>
c000df27:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df29:	eb e9                	jmp    c000df14 <Device::hibernateAll()+0x14>
c000df2b:	83 c4 08             	add    esp,0x8
c000df2e:	5b                   	pop    ebx
c000df2f:	c3                   	ret    

c000df30 <Device::wakeAll()>:
c000df30:	53                   	push   ebx
c000df31:	83 ec 14             	sub    esp,0x14
c000df34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df38:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df3a:	53                   	push   ebx
c000df3b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000df3e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df44:	83 c4 10             	add    esp,0x10
c000df47:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df4a:	74 0f                	je     c000df5b <Device::wakeAll()+0x2b>
c000df4c:	83 ec 0c             	sub    esp,0xc
c000df4f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df52:	e8 d9 ff ff ff       	call   c000df30 <Device::wakeAll()>
c000df57:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df59:	eb e9                	jmp    c000df44 <Device::wakeAll()+0x14>
c000df5b:	83 c4 08             	add    esp,0x8
c000df5e:	5b                   	pop    ebx
c000df5f:	c3                   	ret    

c000df60 <Device::detectAll()>:
c000df60:	53                   	push   ebx
c000df61:	83 ec 14             	sub    esp,0x14
c000df64:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df68:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df6a:	53                   	push   ebx
c000df6b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000df6e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df74:	83 c4 10             	add    esp,0x10
c000df77:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df7a:	74 0f                	je     c000df8b <Device::detectAll()+0x2b>
c000df7c:	83 ec 0c             	sub    esp,0xc
c000df7f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df82:	e8 d9 ff ff ff       	call   c000df60 <Device::detectAll()>
c000df87:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df89:	eb e9                	jmp    c000df74 <Device::detectAll()+0x14>
c000df8b:	83 c4 08             	add    esp,0x8
c000df8e:	5b                   	pop    ebx
c000df8f:	c3                   	ret    

c000df90 <Device::disableLegacyAll()>:
c000df90:	53                   	push   ebx
c000df91:	83 ec 14             	sub    esp,0x14
c000df94:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df98:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df9a:	53                   	push   ebx
c000df9b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000df9e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfa4:	83 c4 10             	add    esp,0x10
c000dfa7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfaa:	74 0f                	je     c000dfbb <Device::disableLegacyAll()+0x2b>
c000dfac:	83 ec 0c             	sub    esp,0xc
c000dfaf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfb2:	e8 d9 ff ff ff       	call   c000df90 <Device::disableLegacyAll()>
c000dfb7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfb9:	eb e9                	jmp    c000dfa4 <Device::disableLegacyAll()+0x14>
c000dfbb:	83 c4 08             	add    esp,0x8
c000dfbe:	5b                   	pop    ebx
c000dfbf:	c3                   	ret    

c000dfc0 <Device::loadDriversForAll()>:
c000dfc0:	53                   	push   ebx
c000dfc1:	83 ec 08             	sub    esp,0x8
c000dfc4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfc8:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000dfcf:	75 0c                	jne    c000dfdd <Device::loadDriversForAll()+0x1d>
c000dfd1:	83 ec 0c             	sub    esp,0xc
c000dfd4:	53                   	push   ebx
c000dfd5:	e8 a0 fd ff ff       	call   c000dd7a <Device::findAndLoadDriver()>
c000dfda:	83 c4 10             	add    esp,0x10
c000dfdd:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfe3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfe6:	74 12                	je     c000dffa <Device::loadDriversForAll()+0x3a>
c000dfe8:	83 ec 0c             	sub    esp,0xc
c000dfeb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfee:	e8 cd ff ff ff       	call   c000dfc0 <Device::loadDriversForAll()>
c000dff3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dff5:	83 c4 10             	add    esp,0x10
c000dff8:	eb e9                	jmp    c000dfe3 <Device::loadDriversForAll()+0x23>
c000dffa:	83 c4 08             	add    esp,0x8
c000dffd:	5b                   	pop    ebx
c000dffe:	c3                   	ret    
c000dfff:	90                   	nop

c000e000 <Device::closeAll()>:
c000e000:	53                   	push   ebx
c000e001:	83 ec 08             	sub    esp,0x8
c000e004:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e008:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e00a:	6a 00                	push   0x0
c000e00c:	6a 00                	push   0x0
c000e00e:	6a 00                	push   0x0
c000e010:	53                   	push   ebx
c000e011:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e014:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e01a:	83 c4 10             	add    esp,0x10
c000e01d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e020:	74 0f                	je     c000e031 <Device::closeAll()+0x31>
c000e022:	83 ec 0c             	sub    esp,0xc
c000e025:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e028:	e8 d3 ff ff ff       	call   c000e000 <Device::closeAll()>
c000e02d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e02f:	eb e9                	jmp    c000e01a <Device::closeAll()+0x1a>
c000e031:	83 c4 08             	add    esp,0x8
c000e034:	5b                   	pop    ebx
c000e035:	c3                   	ret    

c000e036 <Device::powerSavingAll(PowerSavingLevel)>:
c000e036:	56                   	push   esi
c000e037:	53                   	push   ebx
c000e038:	83 ec 0c             	sub    esp,0xc
c000e03b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e03f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e043:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e045:	56                   	push   esi
c000e046:	53                   	push   ebx
c000e047:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e04a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e050:	83 c4 10             	add    esp,0x10
c000e053:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e056:	74 0f                	je     c000e067 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e058:	52                   	push   edx
c000e059:	52                   	push   edx
c000e05a:	56                   	push   esi
c000e05b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e05e:	e8 d3 ff ff ff       	call   c000e036 <Device::powerSavingAll(PowerSavingLevel)>
c000e063:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e065:	eb e9                	jmp    c000e050 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e067:	58                   	pop    eax
c000e068:	5b                   	pop    ebx
c000e069:	5e                   	pop    esi
c000e06a:	c3                   	ret    
c000e06b:	90                   	nop

c000e06c <Device::setName(char const*)>:
c000e06c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e074:	e9 c7 26 ff ff       	jmp    c0000740 <strcpy>
c000e079:	90                   	nop

c000e07a <Device::Device(char const*)>:
c000e07a:	83 ec 1c             	sub    esp,0x1c
c000e07d:	ba b0 33 02 c0       	mov    edx,0xc00233b0
c000e082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e086:	89 10                	mov    DWORD PTR [eax],edx
c000e088:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e08c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e096:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e09a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e0a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0a8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e0b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0b6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e0c0:	83 ec 08             	sub    esp,0x8
c000e0c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0cb:	e8 9c ff ff ff       	call   c000e06c <Device::setName(char const*)>
c000e0d0:	83 c4 10             	add    esp,0x10
c000e0d3:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e0db:	83 ec 0c             	sub    esp,0xc
c000e0de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0e2:	e8 dc b8 ff ff       	call   c00099c3 <malloc>
c000e0e7:	83 c4 10             	add    esp,0x10
c000e0ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e0f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e0f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e0fb:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e101:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e105:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e10b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e115:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e11b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e126:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e12d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e131:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e138:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e13c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e146:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e14a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e154:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e158:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e162:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e166:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e170:	90                   	nop
c000e171:	83 c4 1c             	add    esp,0x1c
c000e174:	c3                   	ret    
c000e175:	90                   	nop

c000e176 <Device::getName()>:
c000e176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e17a:	05 d0 00 00 00       	add    eax,0xd0
c000e17f:	c3                   	ret    

c000e180 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e180:	83 ec 0c             	sub    esp,0xc
c000e183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e187:	83 ec 08             	sub    esp,0x8
c000e18a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e18e:	50                   	push   eax
c000e18f:	e8 e6 fe ff ff       	call   c000e07a <Device::Device(char const*)>
c000e194:	83 c4 10             	add    esp,0x10
c000e197:	ba dc 33 02 c0       	mov    edx,0xc00233dc
c000e19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1a0:	89 10                	mov    DWORD PTR [eax],edx
c000e1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1a6:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e1b0:	90                   	nop
c000e1b1:	83 c4 0c             	add    esp,0xc
c000e1b4:	c3                   	ret    
c000e1b5:	90                   	nop

c000e1b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e1b6:	57                   	push   edi
c000e1b7:	56                   	push   esi
c000e1b8:	53                   	push   ebx
c000e1b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e1bd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e1c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e1c5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e1cb:	75 0c                	jne    c000e1d9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e1cd:	52                   	push   edx
c000e1ce:	52                   	push   edx
c000e1cf:	53                   	push   ebx
c000e1d0:	56                   	push   esi
c000e1d1:	e8 70 32 01 00       	call   c0021446 <LinkedList<Device>::addElement(Device*)>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e1df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e1e2:	74 12                	je     c000e1f6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e1e4:	50                   	push   eax
c000e1e5:	57                   	push   edi
c000e1e6:	56                   	push   esi
c000e1e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e1ea:	e8 c7 ff ff ff       	call   c000e1b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e1ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e1f1:	83 c4 10             	add    esp,0x10
c000e1f4:	eb e9                	jmp    c000e1df <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e1f6:	5b                   	pop    ebx
c000e1f7:	5e                   	pop    esi
c000e1f8:	5f                   	pop    edi
c000e1f9:	c3                   	ret    

c000e1fa <getDevicesOfType(DeviceType)>:
c000e1fa:	53                   	push   ebx
c000e1fb:	83 ec 14             	sub    esp,0x14
c000e1fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e202:	53                   	push   ebx
c000e203:	e8 1a 33 01 00       	call   c0021522 <LinkedList<Device>::LinkedList()>
c000e208:	83 c4 0c             	add    esp,0xc
c000e20b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e20f:	53                   	push   ebx
c000e210:	ff 35 28 64 02 c0    	push   DWORD PTR ds:0xc0026428
c000e216:	e8 9b ff ff ff       	call   c000e1b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e21b:	89 d8                	mov    eax,ebx
c000e21d:	83 c4 18             	add    esp,0x18
c000e220:	5b                   	pop    ebx
c000e221:	c2 04 00             	ret    0x4

c000e224 <HardDiskController::HardDiskController(char const*)>:
c000e224:	83 ec 0c             	sub    esp,0xc
c000e227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e22b:	83 ec 08             	sub    esp,0x8
c000e22e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e232:	50                   	push   eax
c000e233:	e8 42 fe ff ff       	call   c000e07a <Device::Device(char const*)>
c000e238:	83 c4 10             	add    esp,0x10
c000e23b:	ba 08 34 02 c0       	mov    edx,0xc0023408
c000e240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e244:	89 10                	mov    DWORD PTR [eax],edx
c000e246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e24a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e254:	90                   	nop
c000e255:	83 c4 0c             	add    esp,0xc
c000e258:	c3                   	ret    
c000e259:	90                   	nop
c000e25a:	66 90                	xchg   ax,ax

c000e25c <HardDiskController::~HardDiskController()>:
c000e25c:	83 ec 0c             	sub    esp,0xc
c000e25f:	ba 08 34 02 c0       	mov    edx,0xc0023408
c000e264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e268:	89 10                	mov    DWORD PTR [eax],edx
c000e26a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e26e:	83 ec 0c             	sub    esp,0xc
c000e271:	50                   	push   eax
c000e272:	e8 cd fa ff ff       	call   c000dd44 <Device::~Device()>
c000e277:	83 c4 10             	add    esp,0x10
c000e27a:	90                   	nop
c000e27b:	83 c4 0c             	add    esp,0xc
c000e27e:	c3                   	ret    
c000e27f:	90                   	nop

c000e280 <HardDiskController::~HardDiskController()>:
c000e280:	83 ec 0c             	sub    esp,0xc
c000e283:	83 ec 0c             	sub    esp,0xc
c000e286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e28a:	e8 cd ff ff ff       	call   c000e25c <HardDiskController::~HardDiskController()>
c000e28f:	83 c4 10             	add    esp,0x10
c000e292:	83 ec 08             	sub    esp,0x8
c000e295:	68 58 01 00 00       	push   0x158
c000e29a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e29e:	e8 a4 e6 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000e2a3:	83 c4 10             	add    esp,0x10
c000e2a6:	83 c4 0c             	add    esp,0xc
c000e2a9:	c3                   	ret    

c000e2aa <PhysicalDisk::eject()>:
c000e2aa:	83 c8 ff             	or     eax,0xffffffff
c000e2ad:	c3                   	ret    

c000e2ae <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e2ae:	83 ec 0c             	sub    esp,0xc
c000e2b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2b5:	83 ec 08             	sub    esp,0x8
c000e2b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2bc:	50                   	push   eax
c000e2bd:	e8 b8 fd ff ff       	call   c000e07a <Device::Device(char const*)>
c000e2c2:	83 c4 10             	add    esp,0x10
c000e2c5:	ba 34 34 02 c0       	mov    edx,0xc0023434
c000e2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2ce:	89 10                	mov    DWORD PTR [eax],edx
c000e2d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2d4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e2db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2df:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e2e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2ea:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e2fc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e306:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e310:	90                   	nop
c000e311:	83 c4 0c             	add    esp,0xc
c000e314:	c3                   	ret    
c000e315:	90                   	nop

c000e316 <PhysicalDisk::startCache()>:
c000e316:	56                   	push   esi
c000e317:	53                   	push   ebx
c000e318:	83 ec 10             	sub    esp,0x10
c000e31b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e31f:	6a 44                	push   0x44
c000e321:	e8 9d b6 ff ff       	call   c00099c3 <malloc>
c000e326:	89 c6                	mov    esi,eax
c000e328:	58                   	pop    eax
c000e329:	5a                   	pop    edx
c000e32a:	53                   	push   ebx
c000e32b:	56                   	push   esi
c000e32c:	e8 47 26 00 00       	call   c0010978 <VCache::VCache(PhysicalDisk*)>
c000e331:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e337:	83 c4 14             	add    esp,0x14
c000e33a:	5b                   	pop    ebx
c000e33b:	5e                   	pop    esi
c000e33c:	c3                   	ret    
c000e33d:	90                   	nop

c000e33e <PhysicalDisk::~PhysicalDisk()>:
c000e33e:	83 ec 0c             	sub    esp,0xc
c000e341:	ba 34 34 02 c0       	mov    edx,0xc0023434
c000e346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34a:	89 10                	mov    DWORD PTR [eax],edx
c000e34c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e350:	83 ec 0c             	sub    esp,0xc
c000e353:	50                   	push   eax
c000e354:	e8 eb f9 ff ff       	call   c000dd44 <Device::~Device()>
c000e359:	83 c4 10             	add    esp,0x10
c000e35c:	90                   	nop
c000e35d:	83 c4 0c             	add    esp,0xc
c000e360:	c3                   	ret    
c000e361:	90                   	nop

c000e362 <PhysicalDisk::~PhysicalDisk()>:
c000e362:	83 ec 0c             	sub    esp,0xc
c000e365:	83 ec 0c             	sub    esp,0xc
c000e368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e36c:	e8 cd ff ff ff       	call   c000e33e <PhysicalDisk::~PhysicalDisk()>
c000e371:	83 c4 10             	add    esp,0x10
c000e374:	83 ec 08             	sub    esp,0x8
c000e377:	68 6c 01 00 00       	push   0x16c
c000e37c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e380:	e8 c2 e5 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000e385:	83 c4 10             	add    esp,0x10
c000e388:	83 c4 0c             	add    esp,0xc
c000e38b:	c3                   	ret    

c000e38c <FPU::FPU(char const*)>:
c000e38c:	83 ec 0c             	sub    esp,0xc
c000e38f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e393:	83 ec 08             	sub    esp,0x8
c000e396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e39a:	50                   	push   eax
c000e39b:	e8 da fc ff ff       	call   c000e07a <Device::Device(char const*)>
c000e3a0:	83 c4 10             	add    esp,0x10
c000e3a3:	ba 78 34 02 c0       	mov    edx,0xc0023478
c000e3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ac:	89 10                	mov    DWORD PTR [eax],edx
c000e3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e3bc:	90                   	nop
c000e3bd:	83 c4 0c             	add    esp,0xc
c000e3c0:	c3                   	ret    
c000e3c1:	90                   	nop
c000e3c2:	66 90                	xchg   ax,ax

c000e3c4 <FPU::~FPU()>:
c000e3c4:	83 ec 0c             	sub    esp,0xc
c000e3c7:	ba 78 34 02 c0       	mov    edx,0xc0023478
c000e3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d0:	89 10                	mov    DWORD PTR [eax],edx
c000e3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d6:	83 ec 0c             	sub    esp,0xc
c000e3d9:	50                   	push   eax
c000e3da:	e8 65 f9 ff ff       	call   c000dd44 <Device::~Device()>
c000e3df:	83 c4 10             	add    esp,0x10
c000e3e2:	90                   	nop
c000e3e3:	83 c4 0c             	add    esp,0xc
c000e3e6:	c3                   	ret    
c000e3e7:	90                   	nop

c000e3e8 <FPU::~FPU()>:
c000e3e8:	83 ec 0c             	sub    esp,0xc
c000e3eb:	83 ec 0c             	sub    esp,0xc
c000e3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3f2:	e8 cd ff ff ff       	call   c000e3c4 <FPU::~FPU()>
c000e3f7:	83 c4 10             	add    esp,0x10
c000e3fa:	83 ec 08             	sub    esp,0x8
c000e3fd:	68 58 01 00 00       	push   0x158
c000e402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e406:	e8 3c e5 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000e40b:	83 c4 10             	add    esp,0x10
c000e40e:	83 c4 0c             	add    esp,0xc
c000e411:	c3                   	ret    

c000e412 <setupFPU()>:
c000e412:	53                   	push   ebx
c000e413:	83 ec 08             	sub    esp,0x8
c000e416:	8b 15 28 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026428
c000e41c:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e423:	74 1b                	je     c000e440 <setupFPU()+0x2e>
c000e425:	83 ec 0c             	sub    esp,0xc
c000e428:	68 58 01 00 00       	push   0x158
c000e42d:	e8 91 b5 ff ff       	call   c00099c3 <malloc>
c000e432:	89 c3                	mov    ebx,eax
c000e434:	89 04 24             	mov    DWORD PTR [esp],eax
c000e437:	e8 b4 16 01 00       	call   c001faf0 <AVX::AVX()>
c000e43c:	eb 62                	jmp    c000e4a0 <setupFPU()+0x8e>
c000e43e:	66 90                	xchg   ax,ax
c000e440:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e446:	84 c0                	test   al,al
c000e448:	79 1a                	jns    c000e464 <setupFPU()+0x52>
c000e44a:	83 ec 0c             	sub    esp,0xc
c000e44d:	68 58 01 00 00       	push   0x158
c000e452:	e8 6c b5 ff ff       	call   c00099c3 <malloc>
c000e457:	89 c3                	mov    ebx,eax
c000e459:	89 04 24             	mov    DWORD PTR [esp],eax
c000e45c:	e8 bf 17 01 00       	call   c001fc20 <SSE::SSE()>
c000e461:	eb 3d                	jmp    c000e4a0 <setupFPU()+0x8e>
c000e463:	90                   	nop
c000e464:	a8 20                	test   al,0x20
c000e466:	74 1c                	je     c000e484 <setupFPU()+0x72>
c000e468:	83 ec 0c             	sub    esp,0xc
c000e46b:	68 58 01 00 00       	push   0x158
c000e470:	e8 4e b5 ff ff       	call   c00099c3 <malloc>
c000e475:	89 c3                	mov    ebx,eax
c000e477:	89 04 24             	mov    DWORD PTR [esp],eax
c000e47a:	e8 05 17 01 00       	call   c001fb84 <MMX::MMX()>
c000e47f:	eb 1f                	jmp    c000e4a0 <setupFPU()+0x8e>
c000e481:	8d 76 00             	lea    esi,[esi+0x0]
c000e484:	a8 10                	test   al,0x10
c000e486:	74 20                	je     c000e4a8 <setupFPU()+0x96>
c000e488:	83 ec 0c             	sub    esp,0xc
c000e48b:	68 58 01 00 00       	push   0x158
c000e490:	e8 2e b5 ff ff       	call   c00099c3 <malloc>
c000e495:	89 c3                	mov    ebx,eax
c000e497:	89 04 24             	mov    DWORD PTR [esp],eax
c000e49a:	e8 15 18 01 00       	call   c001fcb4 <x87::x87()>
c000e49f:	90                   	nop
c000e4a0:	83 c4 10             	add    esp,0x10
c000e4a3:	eb 27                	jmp    c000e4cc <setupFPU()+0xba>
c000e4a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e4a8:	83 e0 ef             	and    eax,0xffffffef
c000e4ab:	83 ec 0c             	sub    esp,0xc
c000e4ae:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e4b4:	68 64 34 02 c0       	push   0xc0023464
c000e4b9:	e8 6a e5 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e4be:	0f 20 c0             	mov    eax,cr0
c000e4c1:	83 c8 04             	or     eax,0x4
c000e4c4:	0f 22 c0             	mov    cr0,eax
c000e4c7:	31 db                	xor    ebx,ebx
c000e4c9:	83 c4 10             	add    esp,0x10
c000e4cc:	89 d8                	mov    eax,ebx
c000e4ce:	83 c4 08             	add    esp,0x8
c000e4d1:	5b                   	pop    ebx
c000e4d2:	c3                   	ret    
c000e4d3:	90                   	nop

c000e4d4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e4d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e4d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e4dc:	c1 e0 04             	shl    eax,0x4
c000e4df:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e4e3:	8d 50 10             	lea    edx,[eax+0x10]
c000e4e6:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e4ec:	74 08                	je     c000e4f6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e4ee:	83 c0 04             	add    eax,0x4
c000e4f1:	39 d0                	cmp    eax,edx
c000e4f3:	75 f1                	jne    c000e4e6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e4f5:	c3                   	ret    
c000e4f6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e500:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e50a:	eb e2                	jmp    c000e4ee <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e50c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e50c:	57                   	push   edi
c000e50d:	31 c0                	xor    eax,eax
c000e50f:	56                   	push   esi
c000e510:	53                   	push   ebx
c000e511:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e515:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e519:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e51d:	89 da                	mov    edx,ebx
c000e51f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e523:	c1 e2 04             	shl    edx,0x4
c000e526:	01 ca                	add    edx,ecx
c000e528:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e530:	74 16                	je     c000e548 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e532:	40                   	inc    eax
c000e533:	83 f8 04             	cmp    eax,0x4
c000e536:	75 f0                	jne    c000e528 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e538:	c7 44 24 10 a8 34 02 c0 	mov    DWORD PTR [esp+0x10],0xc00234a8
c000e540:	5b                   	pop    ebx
c000e541:	5e                   	pop    esi
c000e542:	5f                   	pop    edi
c000e543:	e9 c1 5d 00 00       	jmp    c0014309 <Krnl::panic(char const*)>
c000e548:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e54b:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e54e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e554:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e55a:	5b                   	pop    ebx
c000e55b:	5e                   	pop    esi
c000e55c:	5f                   	pop    edi
c000e55d:	c3                   	ret    

c000e55e <doubleFault(regs*, void*)>:
c000e55e:	55                   	push   ebp
c000e55f:	89 e5                	mov    ebp,esp
c000e561:	83 ec 08             	sub    esp,0x8
c000e564:	83 ec 0c             	sub    esp,0xc
c000e567:	68 b5 34 02 c0       	push   0xc00234b5
c000e56c:	e8 98 5d 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000e571:	83 c4 10             	add    esp,0x10
c000e574:	90                   	nop
c000e575:	c9                   	leave  
c000e576:	c3                   	ret    
c000e577:	90                   	nop

c000e578 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e578:	56                   	push   esi
c000e579:	53                   	push   ebx
c000e57a:	50                   	push   eax
c000e57b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e57f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e583:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e588:	75 35                	jne    c000e5bf <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e58a:	8d 43 20             	lea    eax,[ebx+0x20]
c000e58d:	31 d2                	xor    edx,edx
c000e58f:	89 c1                	mov    ecx,eax
c000e591:	c1 e1 04             	shl    ecx,0x4
c000e594:	01 f1                	add    ecx,esi
c000e596:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e59e:	74 3e                	je     c000e5de <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e5a0:	42                   	inc    edx
c000e5a1:	83 fa 04             	cmp    edx,0x4
c000e5a4:	75 f0                	jne    c000e596 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e5a6:	83 ec 0c             	sub    esp,0xc
c000e5a9:	68 cf 34 02 c0       	push   0xc00234cf
c000e5ae:	e8 56 5d 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000e5b3:	83 c4 10             	add    esp,0x10
c000e5b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e5bb:	5a                   	pop    edx
c000e5bc:	5b                   	pop    ebx
c000e5bd:	5e                   	pop    esi
c000e5be:	c3                   	ret    
c000e5bf:	83 ec 0c             	sub    esp,0xc
c000e5c2:	56                   	push   esi
c000e5c3:	e8 ae fb ff ff       	call   c000e176 <Device::getName()>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e5ce:	75 ba                	jne    c000e58a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e5d0:	83 fb 0f             	cmp    ebx,0xf
c000e5d3:	7f 29                	jg     c000e5fe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e5d5:	0f b6 9b 20 5b 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffda4e0]
c000e5dc:	eb ac                	jmp    c000e58a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e5de:	8d 04 82             	lea    eax,[edx+eax*4]
c000e5e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e5e5:	8d 04 86             	lea    eax,[esi+eax*4]
c000e5e8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e5ee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e5f2:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e5f8:	89 d8                	mov    eax,ebx
c000e5fa:	5a                   	pop    edx
c000e5fb:	5b                   	pop    ebx
c000e5fc:	5e                   	pop    esi
c000e5fd:	c3                   	ret    
c000e5fe:	83 ec 0c             	sub    esp,0xc
c000e601:	68 c2 34 02 c0       	push   0xc00234c2
c000e606:	e8 fe 5c 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000e60b:	83 c4 10             	add    esp,0x10
c000e60e:	e9 77 ff ff ff       	jmp    c000e58a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e613:	90                   	nop

c000e614 <InterruptController::clearAllHandlers(int, bool)>:
c000e614:	56                   	push   esi
c000e615:	53                   	push   ebx
c000e616:	52                   	push   edx
c000e617:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e61b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e61f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e624:	75 61                	jne    c000e687 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e626:	8d 46 20             	lea    eax,[esi+0x20]
c000e629:	c1 e6 04             	shl    esi,0x4
c000e62c:	c1 e0 04             	shl    eax,0x4
c000e62f:	01 de                	add    esi,ebx
c000e631:	01 d8                	add    eax,ebx
c000e633:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e63d:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e647:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e651:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e65b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e665:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e66f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e679:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e683:	58                   	pop    eax
c000e684:	5b                   	pop    ebx
c000e685:	5e                   	pop    esi
c000e686:	c3                   	ret    
c000e687:	83 ec 0c             	sub    esp,0xc
c000e68a:	53                   	push   ebx
c000e68b:	e8 e6 fa ff ff       	call   c000e176 <Device::getName()>
c000e690:	83 c4 10             	add    esp,0x10
c000e693:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e696:	75 8e                	jne    c000e626 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e698:	83 fe 0f             	cmp    esi,0xf
c000e69b:	7f 09                	jg     c000e6a6 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e69d:	0f b6 b6 20 5b 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda4e0]
c000e6a4:	eb 80                	jmp    c000e626 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6a6:	83 ec 0c             	sub    esp,0xc
c000e6a9:	68 dc 34 02 c0       	push   0xc00234dc
c000e6ae:	e8 56 5c 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000e6b3:	83 c4 10             	add    esp,0x10
c000e6b6:	e9 6b ff ff ff       	jmp    c000e626 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6bb:	90                   	nop

c000e6bc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e6bc:	56                   	push   esi
c000e6bd:	53                   	push   ebx
c000e6be:	52                   	push   edx
c000e6bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e6c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e6c7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e6cc:	75 3a                	jne    c000e708 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e6ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e6d2:	8d 50 20             	lea    edx,[eax+0x20]
c000e6d5:	c1 e2 04             	shl    edx,0x4
c000e6d8:	8d 04 16             	lea    eax,[esi+edx*1]
c000e6db:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e6df:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e6e5:	74 0b                	je     c000e6f2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e6e7:	83 c0 04             	add    eax,0x4
c000e6ea:	39 d0                	cmp    eax,edx
c000e6ec:	75 f1                	jne    c000e6df <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e6ee:	58                   	pop    eax
c000e6ef:	5b                   	pop    ebx
c000e6f0:	5e                   	pop    esi
c000e6f1:	c3                   	ret    
c000e6f2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e6fc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e706:	eb df                	jmp    c000e6e7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000e708:	83 ec 0c             	sub    esp,0xc
c000e70b:	56                   	push   esi
c000e70c:	e8 65 fa ff ff       	call   c000e176 <Device::getName()>
c000e711:	83 c4 10             	add    esp,0x10
c000e714:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e717:	75 b5                	jne    c000e6ce <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e719:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000e71e:	7f 11                	jg     c000e731 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000e720:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e724:	0f b6 80 20 5b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda4e0]
c000e72b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e72f:	eb 9d                	jmp    c000e6ce <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e731:	83 ec 0c             	sub    esp,0xc
c000e734:	68 e9 34 02 c0       	push   0xc00234e9
c000e739:	e8 cb 5b 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000e73e:	83 c4 10             	add    esp,0x10
c000e741:	eb 8b                	jmp    c000e6ce <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000e743 <nmiHandler(regs*, void*)>:
c000e743:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000e748:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e74c:	e9 3d aa ff ff       	jmp    c000918e <Computer::handleNMI()>

c000e751 <int_handler>:
c000e751:	55                   	push   ebp
c000e752:	57                   	push   edi
c000e753:	56                   	push   esi
c000e754:	53                   	push   ebx
c000e755:	83 ec 0c             	sub    esp,0xc
c000e758:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e75c:	80 3d 44 6f 02 c0 00 	cmp    BYTE PTR ds:0xc0026f44,0x0
c000e763:	74 0b                	je     c000e770 <int_handler+0x1f>
c000e765:	fa                   	cli    
c000e766:	f4                   	hlt    
c000e767:	80 3d 44 6f 02 c0 00 	cmp    BYTE PTR ds:0xc0026f44,0x0
c000e76e:	75 f5                	jne    c000e765 <int_handler+0x14>
c000e770:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000e775:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000e778:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e77e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000e784:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e787:	83 f8 17             	cmp    eax,0x17
c000e78a:	77 13                	ja     c000e79f <int_handler+0x4e>
c000e78c:	83 ec 08             	sub    esp,0x8
c000e78f:	8b 17                	mov    edx,DWORD PTR [edi]
c000e791:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e794:	0f b6 c0             	movzx  eax,al
c000e797:	50                   	push   eax
c000e798:	57                   	push   edi
c000e799:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000e79c:	83 c4 10             	add    esp,0x10
c000e79f:	83 c3 15             	add    ebx,0x15
c000e7a2:	c1 e3 04             	shl    ebx,0x4
c000e7a5:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000e7a9:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000e7b0:	31 db                	xor    ebx,ebx
c000e7b2:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e7b6:	85 c0                	test   eax,eax
c000e7b8:	74 13                	je     c000e7cd <int_handler+0x7c>
c000e7ba:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000e7bd:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000e7c1:	74 1c                	je     c000e7df <int_handler+0x8e>
c000e7c3:	83 ec 08             	sub    esp,0x8
c000e7c6:	52                   	push   edx
c000e7c7:	56                   	push   esi
c000e7c8:	ff d0                	call   eax
c000e7ca:	83 c4 10             	add    esp,0x10
c000e7cd:	43                   	inc    ebx
c000e7ce:	83 fb 04             	cmp    ebx,0x4
c000e7d1:	75 df                	jne    c000e7b2 <int_handler+0x61>
c000e7d3:	83 c4 0c             	add    esp,0xc
c000e7d6:	31 c0                	xor    eax,eax
c000e7d8:	5b                   	pop    ebx
c000e7d9:	31 d2                	xor    edx,edx
c000e7db:	5e                   	pop    esi
c000e7dc:	5f                   	pop    edi
c000e7dd:	5d                   	pop    ebp
c000e7de:	c3                   	ret    
c000e7df:	83 ec 08             	sub    esp,0x8
c000e7e2:	52                   	push   edx
c000e7e3:	56                   	push   esi
c000e7e4:	ff d0                	call   eax
c000e7e6:	83 c4 10             	add    esp,0x10
c000e7e9:	83 c4 0c             	add    esp,0xc
c000e7ec:	5b                   	pop    ebx
c000e7ed:	5e                   	pop    esi
c000e7ee:	5f                   	pop    edi
c000e7ef:	5d                   	pop    ebp
c000e7f0:	c3                   	ret    
c000e7f1:	90                   	nop

c000e7f2 <InterruptController::InterruptController(char const*)>:
c000e7f2:	83 ec 1c             	sub    esp,0x1c
c000e7f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7f9:	83 ec 08             	sub    esp,0x8
c000e7fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e800:	50                   	push   eax
c000e801:	e8 74 f8 ff ff       	call   c000e07a <Device::Device(char const*)>
c000e806:	83 c4 10             	add    esp,0x10
c000e809:	ba a0 37 02 c0       	mov    edx,0xc00237a0
c000e80e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e812:	89 10                	mov    DWORD PTR [eax],edx
c000e814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e818:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000e822:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e82a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e832:	7f 5e                	jg     c000e892 <InterruptController::InterruptController(char const*)+0xa0>
c000e834:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e83c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e841:	7f 49                	jg     c000e88c <InterruptController::InterruptController(char const*)+0x9a>
c000e843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e847:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e84b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e852:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e856:	01 ca                	add    edx,ecx
c000e858:	83 c2 54             	add    edx,0x54
c000e85b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e863:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e86b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e872:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e876:	01 ca                	add    edx,ecx
c000e878:	81 c2 54 04 00 00    	add    edx,0x454
c000e87e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e886:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000e88a:	eb b0                	jmp    c000e83c <InterruptController::InterruptController(char const*)+0x4a>
c000e88c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e890:	eb 98                	jmp    c000e82a <InterruptController::InterruptController(char const*)+0x38>
c000e892:	90                   	nop
c000e893:	83 c4 1c             	add    esp,0x1c
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <InterruptController::~InterruptController()>:
c000e898:	83 ec 0c             	sub    esp,0xc
c000e89b:	ba a0 37 02 c0       	mov    edx,0xc00237a0
c000e8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a4:	89 10                	mov    DWORD PTR [eax],edx
c000e8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8aa:	83 ec 0c             	sub    esp,0xc
c000e8ad:	50                   	push   eax
c000e8ae:	e8 91 f4 ff ff       	call   c000dd44 <Device::~Device()>
c000e8b3:	83 c4 10             	add    esp,0x10
c000e8b6:	90                   	nop
c000e8b7:	83 c4 0c             	add    esp,0xc
c000e8ba:	c3                   	ret    
c000e8bb:	90                   	nop

c000e8bc <InterruptController::~InterruptController()>:
c000e8bc:	83 ec 0c             	sub    esp,0xc
c000e8bf:	83 ec 0c             	sub    esp,0xc
c000e8c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8c6:	e8 cd ff ff ff       	call   c000e898 <InterruptController::~InterruptController()>
c000e8cb:	83 c4 10             	add    esp,0x10
c000e8ce:	83 ec 08             	sub    esp,0x8
c000e8d1:	68 58 21 00 00       	push   0x2158
c000e8d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8da:	e8 68 e0 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000e8df:	83 c4 10             	add    esp,0x10
c000e8e2:	83 c4 0c             	add    esp,0xc
c000e8e5:	c3                   	ret    

c000e8e6 <displayDebugInfo(regs*)>:
c000e8e6:	55                   	push   ebp
c000e8e7:	57                   	push   edi
c000e8e8:	56                   	push   esi
c000e8e9:	53                   	push   ebx
c000e8ea:	83 ec 24             	sub    esp,0x24
c000e8ed:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e8f1:	0f 20 c2             	mov    edx,cr0
c000e8f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e8f8:	0f 20 d7             	mov    edi,cr2
c000e8fb:	0f 20 de             	mov    esi,cr3
c000e8fe:	0f 20 e5             	mov    ebp,cr4
c000e901:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000e904:	68 f6 34 02 c0       	push   0xc00234f6
c000e909:	e8 1a e1 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e90e:	59                   	pop    ecx
c000e90f:	58                   	pop    eax
c000e910:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e913:	68 01 35 02 c0       	push   0xc0023501
c000e918:	e8 0b e1 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e91d:	58                   	pop    eax
c000e91e:	5a                   	pop    edx
c000e91f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e922:	68 0c 35 02 c0       	push   0xc002350c
c000e927:	e8 fc e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e92c:	59                   	pop    ecx
c000e92d:	58                   	pop    eax
c000e92e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e931:	68 17 35 02 c0       	push   0xc0023517
c000e936:	e8 ed e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e93b:	58                   	pop    eax
c000e93c:	5a                   	pop    edx
c000e93d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e940:	68 22 35 02 c0       	push   0xc0023522
c000e945:	e8 de e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e94a:	59                   	pop    ecx
c000e94b:	58                   	pop    eax
c000e94c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e94f:	68 2d 35 02 c0       	push   0xc002352d
c000e954:	e8 cf e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e959:	58                   	pop    eax
c000e95a:	5a                   	pop    edx
c000e95b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e95e:	68 38 35 02 c0       	push   0xc0023538
c000e963:	e8 c0 e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e968:	59                   	pop    ecx
c000e969:	58                   	pop    eax
c000e96a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e96d:	68 43 35 02 c0       	push   0xc0023543
c000e972:	e8 b1 e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e977:	58                   	pop    eax
c000e978:	5a                   	pop    edx
c000e979:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000e97c:	68 4e 35 02 c0       	push   0xc002354e
c000e981:	e8 a2 e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e986:	59                   	pop    ecx
c000e987:	58                   	pop    eax
c000e988:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000e98b:	68 5d 35 02 c0       	push   0xc002355d
c000e990:	e8 93 e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e995:	58                   	pop    eax
c000e996:	5a                   	pop    edx
c000e997:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000e99a:	68 68 35 02 c0       	push   0xc0023568
c000e99f:	e8 84 e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e9a4:	59                   	pop    ecx
c000e9a5:	58                   	pop    eax
c000e9a6:	57                   	push   edi
c000e9a7:	68 73 35 02 c0       	push   0xc0023573
c000e9ac:	e8 77 e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e9b1:	58                   	pop    eax
c000e9b2:	5a                   	pop    edx
c000e9b3:	56                   	push   esi
c000e9b4:	68 7e 35 02 c0       	push   0xc002357e
c000e9b9:	e8 6a e0 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000e9be:	59                   	pop    ecx
c000e9bf:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000e9c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000e9ca:	e8 ae bd ff ff       	call   c000a77d <setActiveTerminal(VgaText*)>
c000e9cf:	58                   	pop    eax
c000e9d0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000e9d3:	5a                   	pop    edx
c000e9d4:	c1 e0 05             	shl    eax,0x5
c000e9d7:	05 80 58 02 c0       	add    eax,0xc0025880
c000e9dc:	50                   	push   eax
c000e9dd:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000e9e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000e9e8:	e8 9d c2 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000e9ed:	59                   	pop    ecx
c000e9ee:	58                   	pop    eax
c000e9ef:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000e9f4:	68 89 35 02 c0       	push   0xc0023589
c000e9f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000e9ff:	e8 86 c2 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ea04:	58                   	pop    eax
c000ea05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ea0a:	5a                   	pop    edx
c000ea0b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ea0e:	83 c0 0c             	add    eax,0xc
c000ea11:	50                   	push   eax
c000ea12:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ea17:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ea1d:	e8 68 c2 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ea22:	59                   	pop    ecx
c000ea23:	58                   	pop    eax
c000ea24:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ea29:	68 92 35 02 c0       	push   0xc0023592
c000ea2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ea34:	e8 51 c2 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ea39:	58                   	pop    eax
c000ea3a:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ea3f:	5a                   	pop    edx
c000ea40:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ea43:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ea49:	e8 f6 c1 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ea4e:	59                   	pop    ecx
c000ea4f:	58                   	pop    eax
c000ea50:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ea55:	68 9a 35 02 c0       	push   0xc002359a
c000ea5a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ea60:	e8 25 c2 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ea65:	58                   	pop    eax
c000ea66:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ea6b:	5a                   	pop    edx
c000ea6c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ea6f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ea75:	e8 ca c1 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ea7a:	59                   	pop    ecx
c000ea7b:	58                   	pop    eax
c000ea7c:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ea81:	68 a2 35 02 c0       	push   0xc00235a2
c000ea86:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ea8c:	e8 f9 c1 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ea91:	58                   	pop    eax
c000ea92:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ea97:	5a                   	pop    edx
c000ea98:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ea9b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eaa1:	e8 9e c1 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000eaa6:	59                   	pop    ecx
c000eaa7:	58                   	pop    eax
c000eaa8:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eaad:	68 aa 35 02 c0       	push   0xc00235aa
c000eab2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eab8:	e8 cd c1 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000eabd:	58                   	pop    eax
c000eabe:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eac3:	5a                   	pop    edx
c000eac4:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000eac7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eacd:	e8 72 c1 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ead2:	59                   	pop    ecx
c000ead3:	58                   	pop    eax
c000ead4:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ead9:	68 b2 35 02 c0       	push   0xc00235b2
c000eade:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eae4:	e8 a1 c1 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000eae9:	58                   	pop    eax
c000eaea:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eaef:	5a                   	pop    edx
c000eaf0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eaf3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eaf9:	e8 46 c1 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000eafe:	59                   	pop    ecx
c000eaff:	58                   	pop    eax
c000eb00:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eb05:	68 ba 35 02 c0       	push   0xc00235ba
c000eb0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eb10:	e8 75 c1 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000eb15:	58                   	pop    eax
c000eb16:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eb1b:	5a                   	pop    edx
c000eb1c:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000eb1f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eb25:	e8 1a c1 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000eb2a:	59                   	pop    ecx
c000eb2b:	58                   	pop    eax
c000eb2c:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eb31:	68 c2 35 02 c0       	push   0xc00235c2
c000eb36:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eb3c:	e8 49 c1 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000eb41:	58                   	pop    eax
c000eb42:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eb47:	5a                   	pop    edx
c000eb48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eb4c:	52                   	push   edx
c000eb4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eb53:	e8 ec c0 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000eb58:	59                   	pop    ecx
c000eb59:	58                   	pop    eax
c000eb5a:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eb5f:	68 cb 35 02 c0       	push   0xc00235cb
c000eb64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eb6a:	e8 1b c1 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000eb6f:	58                   	pop    eax
c000eb70:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eb75:	5a                   	pop    edx
c000eb76:	57                   	push   edi
c000eb77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eb7d:	e8 c2 c0 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000eb82:	59                   	pop    ecx
c000eb83:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eb88:	5f                   	pop    edi
c000eb89:	68 d3 35 02 c0       	push   0xc00235d3
c000eb8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eb94:	e8 f1 c0 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000eb99:	58                   	pop    eax
c000eb9a:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eb9f:	5a                   	pop    edx
c000eba0:	56                   	push   esi
c000eba1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000eba7:	e8 98 c0 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ebac:	59                   	pop    ecx
c000ebad:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ebb2:	5e                   	pop    esi
c000ebb3:	68 db 35 02 c0       	push   0xc00235db
c000ebb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ebbe:	e8 c7 c0 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ebc3:	5f                   	pop    edi
c000ebc4:	58                   	pop    eax
c000ebc5:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ebca:	55                   	push   ebp
c000ebcb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ebd1:	e8 6e c0 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ebd6:	58                   	pop    eax
c000ebd7:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ebdc:	5a                   	pop    edx
c000ebdd:	68 e3 35 02 c0       	push   0xc00235e3
c000ebe2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ebe8:	e8 9d c0 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ebed:	0f 21 c0             	mov    eax,db0
c000ebf0:	59                   	pop    ecx
c000ebf1:	5e                   	pop    esi
c000ebf2:	50                   	push   eax
c000ebf3:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ebf8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ebfe:	e8 41 c0 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ec03:	5f                   	pop    edi
c000ec04:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ec09:	5d                   	pop    ebp
c000ec0a:	68 ec 35 02 c0       	push   0xc00235ec
c000ec0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ec15:	e8 70 c0 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ec1a:	0f 21 c8             	mov    eax,db1
c000ec1d:	5a                   	pop    edx
c000ec1e:	59                   	pop    ecx
c000ec1f:	50                   	push   eax
c000ec20:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ec25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ec2b:	e8 14 c0 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ec30:	5e                   	pop    esi
c000ec31:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ec36:	5f                   	pop    edi
c000ec37:	68 f4 35 02 c0       	push   0xc00235f4
c000ec3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ec42:	e8 43 c0 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ec47:	0f 21 d0             	mov    eax,db2
c000ec4a:	5d                   	pop    ebp
c000ec4b:	5a                   	pop    edx
c000ec4c:	50                   	push   eax
c000ec4d:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ec52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ec58:	e8 e7 bf ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ec5d:	59                   	pop    ecx
c000ec5e:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ec63:	5e                   	pop    esi
c000ec64:	68 fc 35 02 c0       	push   0xc00235fc
c000ec69:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ec6f:	e8 16 c0 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ec74:	0f 21 d8             	mov    eax,db3
c000ec77:	5f                   	pop    edi
c000ec78:	5d                   	pop    ebp
c000ec79:	50                   	push   eax
c000ec7a:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ec7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ec85:	e8 ba bf ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ec8a:	58                   	pop    eax
c000ec8b:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ec90:	5a                   	pop    edx
c000ec91:	68 04 36 02 c0       	push   0xc0023604
c000ec96:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ec9c:	e8 e9 bf ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000eca1:	0f 21 f0             	mov    eax,db6
c000eca4:	59                   	pop    ecx
c000eca5:	5e                   	pop    esi
c000eca6:	50                   	push   eax
c000eca7:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ecac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ecb2:	e8 8d bf ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ecb7:	5f                   	pop    edi
c000ecb8:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ecbd:	5d                   	pop    ebp
c000ecbe:	68 0c 36 02 c0       	push   0xc002360c
c000ecc3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ecc9:	e8 bc bf ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ecce:	0f 21 f8             	mov    eax,db7
c000ecd1:	5a                   	pop    edx
c000ecd2:	59                   	pop    ecx
c000ecd3:	50                   	push   eax
c000ecd4:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ecd9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ecdf:	e8 60 bf ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ece4:	5e                   	pop    esi
c000ece5:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ece8:	e8 c4 87 00 00       	call   c00174b1 <Thr::getDriverNameFromAddress(unsigned long)>
c000eced:	83 c4 10             	add    esp,0x10
c000ecf0:	85 c0                	test   eax,eax
c000ecf2:	74 7d                	je     c000ed71 <displayDebugInfo(regs*)+0x48b>
c000ecf4:	89 c6                	mov    esi,eax
c000ecf6:	50                   	push   eax
c000ecf7:	50                   	push   eax
c000ecf8:	56                   	push   esi
c000ecf9:	68 14 36 02 c0       	push   0xc0023614
c000ecfe:	e8 25 dd ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000ed03:	5a                   	pop    edx
c000ed04:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ed09:	59                   	pop    ecx
c000ed0a:	68 22 36 02 c0       	push   0xc0023622
c000ed0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ed15:	e8 70 bf ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ed1a:	5f                   	pop    edi
c000ed1b:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ed20:	5d                   	pop    ebp
c000ed21:	56                   	push   esi
c000ed22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ed28:	e8 5d bf ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ed2d:	58                   	pop    eax
c000ed2e:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ed33:	5a                   	pop    edx
c000ed34:	68 2e 36 02 c0       	push   0xc002362e
c000ed39:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ed3f:	e8 46 bf ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c000ed44:	59                   	pop    ecx
c000ed45:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ed4a:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c000ed50:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed53:	e8 90 87 00 00       	call   c00174e8 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000ed58:	5b                   	pop    ebx
c000ed59:	5d                   	pop    ebp
c000ed5a:	50                   	push   eax
c000ed5b:	57                   	push   edi
c000ed5c:	e8 e3 be ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c000ed61:	58                   	pop    eax
c000ed62:	5a                   	pop    edx
c000ed63:	56                   	push   esi
c000ed64:	68 3a 36 02 c0       	push   0xc002363a
c000ed69:	e8 ba dc ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000ed6e:	83 c4 10             	add    esp,0x10
c000ed71:	fa                   	cli    
c000ed72:	f4                   	hlt    
c000ed73:	eb fe                	jmp    c000ed73 <displayDebugInfo(regs*)+0x48d>

c000ed75 <x87EmulHandler(regs*, void*)>:
c000ed75:	83 ec 0c             	sub    esp,0xc
c000ed78:	0f 20 c2             	mov    edx,cr0
c000ed7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ed80:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c000ed84:	75 4b                	jne    c000edd1 <x87EmulHandler(regs*, void*)+0x5c>
c000ed86:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000ed8b:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000ed91:	85 c0                	test   eax,eax
c000ed93:	74 05                	je     c000ed9a <x87EmulHandler(regs*, void*)+0x25>
c000ed95:	83 e2 08             	and    edx,0x8
c000ed98:	75 17                	jne    c000edb1 <x87EmulHandler(regs*, void*)+0x3c>
c000ed9a:	83 ec 0c             	sub    esp,0xc
c000ed9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eda1:	e8 ec ab 00 00       	call   c0019992 <Vm::x87Handler(regs*)>
c000eda6:	83 c4 10             	add    esp,0x10
c000eda9:	84 c0                	test   al,al
c000edab:	74 24                	je     c000edd1 <x87EmulHandler(regs*, void*)+0x5c>
c000edad:	83 c4 0c             	add    esp,0xc
c000edb0:	c3                   	ret    
c000edb1:	83 ec 0c             	sub    esp,0xc
c000edb4:	68 60 36 02 c0       	push   0xc0023660
c000edb9:	e8 6a dc ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000edbe:	0f 06                	clts   
c000edc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edc5:	83 c4 10             	add    esp,0x10
c000edc8:	a3 a8 65 02 c0       	mov    ds:0xc00265a8,eax
c000edcd:	83 c4 0c             	add    esp,0xc
c000edd0:	c3                   	ret    
c000edd1:	83 ec 0c             	sub    esp,0xc
c000edd4:	68 4a 36 02 c0       	push   0xc002364a
c000edd9:	e8 4a dc ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000edde:	5a                   	pop    edx
c000eddf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ede3:	e8 fe fa ff ff       	call   c000e8e6 <displayDebugInfo(regs*)>

c000ede8 <gpFault(regs*, void*)>:
c000ede8:	53                   	push   ebx
c000ede9:	83 ec 14             	sub    esp,0x14
c000edec:	c7 05 a4 65 02 c0 4e 8e 01 c0 	mov    DWORD PTR ds:0xc00265a4,0xc0018e4e
c000edf6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000edfa:	53                   	push   ebx
c000edfb:	e8 4e a0 00 00       	call   c0018e4e <Vm::faultHandler(regs*)>
c000ee00:	83 c4 10             	add    esp,0x10
c000ee03:	84 c0                	test   al,al
c000ee05:	74 05                	je     c000ee0c <gpFault(regs*, void*)+0x24>
c000ee07:	83 c4 08             	add    esp,0x8
c000ee0a:	5b                   	pop    ebx
c000ee0b:	c3                   	ret    
c000ee0c:	83 ec 0c             	sub    esp,0xc
c000ee0f:	68 6d 36 02 c0       	push   0xc002366d
c000ee14:	e8 0f dc ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000ee19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee1c:	e8 c5 fa ff ff       	call   c000e8e6 <displayDebugInfo(regs*)>

c000ee21 <pgFault(regs*, void*)>:
c000ee21:	53                   	push   ebx
c000ee22:	83 ec 10             	sub    esp,0x10
c000ee25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ee29:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ee2c:	68 88 36 02 c0       	push   0xc0023688
c000ee31:	e8 f2 db ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000ee36:	0f 20 d0             	mov    eax,cr2
c000ee39:	5a                   	pop    edx
c000ee3a:	59                   	pop    ecx
c000ee3b:	50                   	push   eax
c000ee3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee41:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ee44:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ee4a:	e8 d7 d6 ff ff       	call   c000c526 <VAS::tryLoadBackOffDisk(unsigned long)>
c000ee4f:	83 c4 10             	add    esp,0x10
c000ee52:	84 c0                	test   al,al
c000ee54:	74 05                	je     c000ee5b <pgFault(regs*, void*)+0x3a>
c000ee56:	83 c4 08             	add    esp,0x8
c000ee59:	5b                   	pop    ebx
c000ee5a:	c3                   	ret    
c000ee5b:	83 ec 0c             	sub    esp,0xc
c000ee5e:	68 9d 36 02 c0       	push   0xc002369d
c000ee63:	e8 c0 db ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000ee68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee6b:	e8 76 fa ff ff       	call   c000e8e6 <displayDebugInfo(regs*)>

c000ee70 <otherISRHandler(regs*, void*)>:
c000ee70:	53                   	push   ebx
c000ee71:	83 ec 0c             	sub    esp,0xc
c000ee74:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ee78:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ee7b:	50                   	push   eax
c000ee7c:	50                   	push   eax
c000ee7d:	68 aa 36 02 c0       	push   0xc00236aa
c000ee82:	e8 a1 db ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000ee87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee8a:	e8 57 fa ff ff       	call   c000e8e6 <displayDebugInfo(regs*)>

c000ee8f <opcodeFault(regs*, void*)>:
c000ee8f:	55                   	push   ebp
c000ee90:	89 e5                	mov    ebp,esp
c000ee92:	56                   	push   esi
c000ee93:	53                   	push   ebx
c000ee94:	83 ec 30             	sub    esp,0x30
c000ee97:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000ee9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000eea2:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000eea8:	84 c0                	test   al,al
c000eeaa:	74 24                	je     c000eed0 <opcodeFault(regs*, void*)+0x41>
c000eeac:	83 ec 0c             	sub    esp,0xc
c000eeaf:	68 c8 36 02 c0       	push   0xc00236c8
c000eeb4:	e8 6f db ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000eeb9:	83 c4 10             	add    esp,0x10
c000eebc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eebf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eec2:	8d 50 19             	lea    edx,[eax+0x19]
c000eec5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eec8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000eecb:	e9 7b 03 00 00       	jmp    c000f24b <opcodeFault(regs*, void*)+0x3bc>
c000eed0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eed3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eed6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000eed9:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000eedd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eee0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eee3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000eee6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eee9:	8a 00                	mov    al,BYTE PTR [eax]
c000eeeb:	3c f0                	cmp    al,0xf0
c000eeed:	75 17                	jne    c000ef06 <opcodeFault(regs*, void*)+0x77>
c000eeef:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000eef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eef5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eef8:	8d 50 01             	lea    edx,[eax+0x1]
c000eefb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eefe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef01:	e9 d6 00 00 00       	jmp    c000efdc <opcodeFault(regs*, void*)+0x14d>
c000ef06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef09:	8a 00                	mov    al,BYTE PTR [eax]
c000ef0b:	3c f2                	cmp    al,0xf2
c000ef0d:	74 09                	je     c000ef18 <opcodeFault(regs*, void*)+0x89>
c000ef0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef12:	8a 00                	mov    al,BYTE PTR [eax]
c000ef14:	3c f3                	cmp    al,0xf3
c000ef16:	75 1b                	jne    c000ef33 <opcodeFault(regs*, void*)+0xa4>
c000ef18:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef1c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef22:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef25:	8d 50 01             	lea    edx,[eax+0x1]
c000ef28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef2b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef2e:	e9 a9 00 00 00       	jmp    c000efdc <opcodeFault(regs*, void*)+0x14d>
c000ef33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef36:	8a 00                	mov    al,BYTE PTR [eax]
c000ef38:	3c 66                	cmp    al,0x66
c000ef3a:	75 1b                	jne    c000ef57 <opcodeFault(regs*, void*)+0xc8>
c000ef3c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef40:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef46:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef49:	8d 50 01             	lea    edx,[eax+0x1]
c000ef4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef4f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef52:	e9 85 00 00 00       	jmp    c000efdc <opcodeFault(regs*, void*)+0x14d>
c000ef57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef5a:	8a 00                	mov    al,BYTE PTR [eax]
c000ef5c:	3c 67                	cmp    al,0x67
c000ef5e:	75 18                	jne    c000ef78 <opcodeFault(regs*, void*)+0xe9>
c000ef60:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef64:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef6a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef6d:	8d 50 01             	lea    edx,[eax+0x1]
c000ef70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef73:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef76:	eb 64                	jmp    c000efdc <opcodeFault(regs*, void*)+0x14d>
c000ef78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef7b:	8a 00                	mov    al,BYTE PTR [eax]
c000ef7d:	3c 2e                	cmp    al,0x2e
c000ef7f:	74 09                	je     c000ef8a <opcodeFault(regs*, void*)+0xfb>
c000ef81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef84:	8a 00                	mov    al,BYTE PTR [eax]
c000ef86:	3c 3e                	cmp    al,0x3e
c000ef88:	75 18                	jne    c000efa2 <opcodeFault(regs*, void*)+0x113>
c000ef8a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef8e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef94:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef97:	8d 50 01             	lea    edx,[eax+0x1]
c000ef9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef9d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efa0:	eb 3a                	jmp    c000efdc <opcodeFault(regs*, void*)+0x14d>
c000efa2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efa5:	8a 00                	mov    al,BYTE PTR [eax]
c000efa7:	3c 36                	cmp    al,0x36
c000efa9:	74 1b                	je     c000efc6 <opcodeFault(regs*, void*)+0x137>
c000efab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efae:	8a 00                	mov    al,BYTE PTR [eax]
c000efb0:	3c 26                	cmp    al,0x26
c000efb2:	74 12                	je     c000efc6 <opcodeFault(regs*, void*)+0x137>
c000efb4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efb7:	8a 00                	mov    al,BYTE PTR [eax]
c000efb9:	3c 64                	cmp    al,0x64
c000efbb:	74 09                	je     c000efc6 <opcodeFault(regs*, void*)+0x137>
c000efbd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efc0:	8a 00                	mov    al,BYTE PTR [eax]
c000efc2:	3c 65                	cmp    al,0x65
c000efc4:	75 16                	jne    c000efdc <opcodeFault(regs*, void*)+0x14d>
c000efc6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efca:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efd0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efd3:	8d 50 01             	lea    edx,[eax+0x1]
c000efd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efd9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efdc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efdf:	8a 00                	mov    al,BYTE PTR [eax]
c000efe1:	3c 0f                	cmp    al,0xf
c000efe3:	0f 85 8d 01 00 00    	jne    c000f176 <opcodeFault(regs*, void*)+0x2e7>
c000efe9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efec:	40                   	inc    eax
c000efed:	8a 00                	mov    al,BYTE PTR [eax]
c000efef:	3c c7                	cmp    al,0xc7
c000eff1:	0f 85 7f 01 00 00    	jne    c000f176 <opcodeFault(regs*, void*)+0x2e7>
c000eff7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000effa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000effd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f000:	8d 50 01             	lea    edx,[eax+0x1]
c000f003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f006:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f009:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f00c:	50                   	push   eax
c000f00d:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f010:	50                   	push   eax
c000f011:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f014:	50                   	push   eax
c000f015:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f018:	e8 05 4a 00 00       	call   c0013a22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f01d:	83 c4 10             	add    esp,0x10
c000f020:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f023:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f026:	83 f0 01             	xor    eax,0x1
c000f029:	84 c0                	test   al,al
c000f02b:	0f 84 45 01 00 00    	je     c000f176 <opcodeFault(regs*, void*)+0x2e7>
c000f031:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f034:	3c 01                	cmp    al,0x1
c000f036:	0f 85 3a 01 00 00    	jne    c000f176 <opcodeFault(regs*, void*)+0x2e7>
c000f03c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f03f:	83 f0 01             	xor    eax,0x1
c000f042:	84 c0                	test   al,al
c000f044:	0f 84 2c 01 00 00    	je     c000f176 <opcodeFault(regs*, void*)+0x2e7>
c000f04a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f04d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f050:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f053:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f05a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f05d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f060:	89 c2                	mov    edx,eax
c000f062:	b8 00 00 00 00       	mov    eax,0x0
c000f067:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f06a:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f06d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f070:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f073:	ba 00 00 00 00       	mov    edx,0x0
c000f078:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f07b:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f07e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f081:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f084:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f087:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f08e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f091:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f094:	89 c2                	mov    edx,eax
c000f096:	b8 00 00 00 00       	mov    eax,0x0
c000f09b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f09e:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f0a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0a4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f0a7:	ba 00 00 00 00       	mov    edx,0x0
c000f0ac:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f0af:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f0b2:	fa                   	cli    
c000f0b3:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f0b8:	40                   	inc    eax
c000f0b9:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f0be:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f0c1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f0c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0c6:	89 c1                	mov    ecx,eax
c000f0c8:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f0cb:	89 cb                	mov    ebx,ecx
c000f0cd:	89 d0                	mov    eax,edx
c000f0cf:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f0d2:	89 c6                	mov    esi,eax
c000f0d4:	89 f0                	mov    eax,esi
c000f0d6:	09 d8                	or     eax,ebx
c000f0d8:	85 c0                	test   eax,eax
c000f0da:	75 21                	jne    c000f0fd <opcodeFault(regs*, void*)+0x26e>
c000f0dc:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f0df:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f0e2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f0e5:	89 01                	mov    DWORD PTR [ecx],eax
c000f0e7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f0ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f0f0:	83 c8 40             	or     eax,0x40
c000f0f3:	89 c2                	mov    edx,eax
c000f0f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0f8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f0fb:	eb 3e                	jmp    c000f13b <opcodeFault(regs*, void*)+0x2ac>
c000f0fd:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f100:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f103:	8b 00                	mov    eax,DWORD PTR [eax]
c000f105:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f108:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f10b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f10e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f111:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f114:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f117:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f11a:	89 d0                	mov    eax,edx
c000f11c:	31 d2                	xor    edx,edx
c000f11e:	89 c3                	mov    ebx,eax
c000f120:	89 d6                	mov    esi,edx
c000f122:	89 da                	mov    edx,ebx
c000f124:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f127:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f12a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f12d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f130:	83 e0 bf             	and    eax,0xffffffbf
c000f133:	89 c2                	mov    edx,eax
c000f135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f138:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f13b:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f140:	48                   	dec    eax
c000f141:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f146:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f14b:	85 c0                	test   eax,eax
c000f14d:	75 01                	jne    c000f150 <opcodeFault(regs*, void*)+0x2c1>
c000f14f:	fb                   	sti    
c000f150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f153:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f156:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f159:	01 c2                	add    edx,eax
c000f15b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f15e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f161:	83 ec 0c             	sub    esp,0xc
c000f164:	68 eb 36 02 c0       	push   0xc00236eb
c000f169:	e8 ba d8 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000f16e:	83 c4 10             	add    esp,0x10
c000f171:	e9 d5 00 00 00       	jmp    c000f24b <opcodeFault(regs*, void*)+0x3bc>
c000f176:	83 ec 0c             	sub    esp,0xc
c000f179:	68 fe 36 02 c0       	push   0xc00236fe
c000f17e:	e8 a5 d8 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000f183:	83 c4 10             	add    esp,0x10
c000f186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f189:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f18c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f18f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f192:	c1 e0 04             	shl    eax,0x4
c000f195:	01 d0                	add    eax,edx
c000f197:	83 c0 03             	add    eax,0x3
c000f19a:	8a 00                	mov    al,BYTE PTR [eax]
c000f19c:	0f b6 d8             	movzx  ebx,al
c000f19f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1a2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1ab:	c1 e0 04             	shl    eax,0x4
c000f1ae:	01 d0                	add    eax,edx
c000f1b0:	83 c0 02             	add    eax,0x2
c000f1b3:	8a 00                	mov    al,BYTE PTR [eax]
c000f1b5:	0f b6 c8             	movzx  ecx,al
c000f1b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1bb:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1c1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1c4:	c1 e0 04             	shl    eax,0x4
c000f1c7:	01 d0                	add    eax,edx
c000f1c9:	40                   	inc    eax
c000f1ca:	8a 00                	mov    al,BYTE PTR [eax]
c000f1cc:	0f b6 d0             	movzx  edx,al
c000f1cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1d2:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f1d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1db:	c1 e0 04             	shl    eax,0x4
c000f1de:	01 f0                	add    eax,esi
c000f1e0:	8a 00                	mov    al,BYTE PTR [eax]
c000f1e2:	0f b6 c0             	movzx  eax,al
c000f1e5:	83 ec 0c             	sub    esp,0xc
c000f1e8:	53                   	push   ebx
c000f1e9:	51                   	push   ecx
c000f1ea:	52                   	push   edx
c000f1eb:	50                   	push   eax
c000f1ec:	68 10 37 02 c0       	push   0xc0023710
c000f1f1:	e8 32 d8 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000f1f6:	83 c4 20             	add    esp,0x20
c000f1f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1fc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1ff:	83 c0 03             	add    eax,0x3
c000f202:	8a 00                	mov    al,BYTE PTR [eax]
c000f204:	0f b6 d8             	movzx  ebx,al
c000f207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f20a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f20d:	83 c0 02             	add    eax,0x2
c000f210:	8a 00                	mov    al,BYTE PTR [eax]
c000f212:	0f b6 c8             	movzx  ecx,al
c000f215:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f218:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f21b:	40                   	inc    eax
c000f21c:	8a 00                	mov    al,BYTE PTR [eax]
c000f21e:	0f b6 d0             	movzx  edx,al
c000f221:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f224:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f227:	8a 00                	mov    al,BYTE PTR [eax]
c000f229:	0f b6 c0             	movzx  eax,al
c000f22c:	83 ec 0c             	sub    esp,0xc
c000f22f:	53                   	push   ebx
c000f230:	51                   	push   ecx
c000f231:	52                   	push   edx
c000f232:	50                   	push   eax
c000f233:	68 38 37 02 c0       	push   0xc0023738
c000f238:	e8 eb d7 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c000f23d:	83 c4 20             	add    esp,0x20
c000f240:	83 ec 0c             	sub    esp,0xc
c000f243:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f246:	e8 9b f6 ff ff       	call   c000e8e6 <displayDebugInfo(regs*)>
c000f24b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f24e:	5b                   	pop    ebx
c000f24f:	5e                   	pop    esi
c000f250:	5d                   	pop    ebp
c000f251:	c3                   	ret    

c000f252 <displayProgramFault(char const*)>:
c000f252:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f257:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f25a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000f260:	85 c0                	test   eax,eax
c000f262:	74 15                	je     c000f279 <displayProgramFault(char const*)+0x27>
c000f264:	83 ec 0c             	sub    esp,0xc
c000f267:	6a 04                	push   0x4
c000f269:	6a 0f                	push   0xf
c000f26b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f26f:	50                   	push   eax
c000f270:	e8 11 b7 ff ff       	call   c000a986 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f275:	83 c4 1c             	add    esp,0x1c
c000f278:	c3                   	ret    
c000f279:	c3                   	ret    

c000f27a <setupInterruptController()>:
c000f27a:	55                   	push   ebp
c000f27b:	89 e5                	mov    ebp,esp
c000f27d:	53                   	push   ebx
c000f27e:	83 ec 24             	sub    esp,0x24
c000f281:	b8 00 00 00 00       	mov    eax,0x0
c000f286:	85 c0                	test   eax,eax
c000f288:	0f 95 c0             	setne  al
c000f28b:	84 c0                	test   al,al
c000f28d:	74 5b                	je     c000f2ea <setupInterruptController()+0x70>
c000f28f:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f296:	83 ec 0c             	sub    esp,0xc
c000f299:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f29c:	e8 22 a7 ff ff       	call   c00099c3 <malloc>
c000f2a1:	83 c4 10             	add    esp,0x10
c000f2a4:	89 c3                	mov    ebx,eax
c000f2a6:	83 ec 0c             	sub    esp,0xc
c000f2a9:	53                   	push   ebx
c000f2aa:	e8 43 0c 01 00       	call   c001fef2 <APIC::APIC()>
c000f2af:	83 c4 10             	add    esp,0x10
c000f2b2:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f2b5:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f2b8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f2bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2bd:	83 c0 08             	add    eax,0x8
c000f2c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2c2:	6a 00                	push   0x0
c000f2c4:	6a 00                	push   0x0
c000f2c6:	6a 00                	push   0x0
c000f2c8:	52                   	push   edx
c000f2c9:	ff d0                	call   eax
c000f2cb:	83 c4 10             	add    esp,0x10
c000f2ce:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000f2d3:	83 ec 08             	sub    esp,0x8
c000f2d6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f2d9:	50                   	push   eax
c000f2da:	e8 97 eb ff ff       	call   c000de76 <Device::addChild(Device*)>
c000f2df:	83 c4 10             	add    esp,0x10
c000f2e2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f2e5:	e9 79 03 00 00       	jmp    c000f663 <setupInterruptController()+0x3e9>
c000f2ea:	a0 80 6d 02 c0       	mov    al,ds:0xc0026d80
c000f2ef:	84 c0                	test   al,al
c000f2f1:	75 14                	jne    c000f307 <setupInterruptController()+0x8d>
c000f2f3:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000f2f8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f2fe:	83 e2 fe             	and    edx,0xfffffffe
c000f301:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f307:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000f30c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f312:	83 e0 01             	and    eax,0x1
c000f315:	84 c0                	test   al,al
c000f317:	0f 95 c0             	setne  al
c000f31a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f31d:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f324:	83 ec 0c             	sub    esp,0xc
c000f327:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f32a:	e8 94 a6 ff ff       	call   c00099c3 <malloc>
c000f32f:	83 c4 10             	add    esp,0x10
c000f332:	89 c3                	mov    ebx,eax
c000f334:	83 ec 0c             	sub    esp,0xc
c000f337:	53                   	push   ebx
c000f338:	e8 0d 11 01 00       	call   c002044a <PIC::PIC()>
c000f33d:	83 c4 10             	add    esp,0x10
c000f340:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f343:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f346:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f349:	8b 00                	mov    eax,DWORD PTR [eax]
c000f34b:	83 c0 08             	add    eax,0x8
c000f34e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f350:	6a 00                	push   0x0
c000f352:	6a 00                	push   0x0
c000f354:	6a 00                	push   0x0
c000f356:	52                   	push   edx
c000f357:	ff d0                	call   eax
c000f359:	83 c4 10             	add    esp,0x10
c000f35c:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f360:	74 73                	je     c000f3d5 <setupInterruptController()+0x15b>
c000f362:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f365:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f368:	8b 00                	mov    eax,DWORD PTR [eax]
c000f36a:	83 c0 0c             	add    eax,0xc
c000f36d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f36f:	6a 00                	push   0x0
c000f371:	6a 00                	push   0x0
c000f373:	6a 00                	push   0x0
c000f375:	52                   	push   edx
c000f376:	ff d0                	call   eax
c000f378:	83 c4 10             	add    esp,0x10
c000f37b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f37f:	74 15                	je     c000f396 <setupInterruptController()+0x11c>
c000f381:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f384:	8b 00                	mov    eax,DWORD PTR [eax]
c000f386:	83 c0 04             	add    eax,0x4
c000f389:	8b 00                	mov    eax,DWORD PTR [eax]
c000f38b:	83 ec 0c             	sub    esp,0xc
c000f38e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f391:	ff d0                	call   eax
c000f393:	83 c4 10             	add    esp,0x10
c000f396:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f39d:	83 ec 0c             	sub    esp,0xc
c000f3a0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f3a3:	e8 1b a6 ff ff       	call   c00099c3 <malloc>
c000f3a8:	83 c4 10             	add    esp,0x10
c000f3ab:	89 c3                	mov    ebx,eax
c000f3ad:	83 ec 0c             	sub    esp,0xc
c000f3b0:	53                   	push   ebx
c000f3b1:	e8 3c 0b 01 00       	call   c001fef2 <APIC::APIC()>
c000f3b6:	83 c4 10             	add    esp,0x10
c000f3b9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f3bc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f3bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3c2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3c4:	83 c0 08             	add    eax,0x8
c000f3c7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3c9:	6a 00                	push   0x0
c000f3cb:	6a 00                	push   0x0
c000f3cd:	6a 00                	push   0x0
c000f3cf:	52                   	push   edx
c000f3d0:	ff d0                	call   eax
c000f3d2:	83 c4 10             	add    esp,0x10
c000f3d5:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000f3da:	83 ec 08             	sub    esp,0x8
c000f3dd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f3e0:	50                   	push   eax
c000f3e1:	e8 90 ea ff ff       	call   c000de76 <Device::addChild(Device*)>
c000f3e6:	83 c4 10             	add    esp,0x10
c000f3e9:	c7 05 a8 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00265a8,0x0
c000f3f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3f8:	83 c0 24             	add    eax,0x24
c000f3fb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3fd:	6a 00                	push   0x0
c000f3ff:	68 70 ee 00 c0       	push   0xc000ee70
c000f404:	6a 00                	push   0x0
c000f406:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f409:	ff d0                	call   eax
c000f40b:	83 c4 10             	add    esp,0x10
c000f40e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f411:	8b 00                	mov    eax,DWORD PTR [eax]
c000f413:	83 c0 24             	add    eax,0x24
c000f416:	8b 00                	mov    eax,DWORD PTR [eax]
c000f418:	6a 00                	push   0x0
c000f41a:	68 70 ee 00 c0       	push   0xc000ee70
c000f41f:	6a 01                	push   0x1
c000f421:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f424:	ff d0                	call   eax
c000f426:	83 c4 10             	add    esp,0x10
c000f429:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f42c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f42e:	83 c0 24             	add    eax,0x24
c000f431:	8b 00                	mov    eax,DWORD PTR [eax]
c000f433:	6a 00                	push   0x0
c000f435:	68 43 e7 00 c0       	push   0xc000e743
c000f43a:	6a 02                	push   0x2
c000f43c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f43f:	ff d0                	call   eax
c000f441:	83 c4 10             	add    esp,0x10
c000f444:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f447:	8b 00                	mov    eax,DWORD PTR [eax]
c000f449:	83 c0 24             	add    eax,0x24
c000f44c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f44e:	6a 00                	push   0x0
c000f450:	68 70 ee 00 c0       	push   0xc000ee70
c000f455:	6a 03                	push   0x3
c000f457:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f45a:	ff d0                	call   eax
c000f45c:	83 c4 10             	add    esp,0x10
c000f45f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f462:	8b 00                	mov    eax,DWORD PTR [eax]
c000f464:	83 c0 24             	add    eax,0x24
c000f467:	8b 00                	mov    eax,DWORD PTR [eax]
c000f469:	6a 00                	push   0x0
c000f46b:	68 70 ee 00 c0       	push   0xc000ee70
c000f470:	6a 04                	push   0x4
c000f472:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f475:	ff d0                	call   eax
c000f477:	83 c4 10             	add    esp,0x10
c000f47a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f47d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f47f:	83 c0 24             	add    eax,0x24
c000f482:	8b 00                	mov    eax,DWORD PTR [eax]
c000f484:	6a 00                	push   0x0
c000f486:	68 70 ee 00 c0       	push   0xc000ee70
c000f48b:	6a 05                	push   0x5
c000f48d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f490:	ff d0                	call   eax
c000f492:	83 c4 10             	add    esp,0x10
c000f495:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f498:	8b 00                	mov    eax,DWORD PTR [eax]
c000f49a:	83 c0 24             	add    eax,0x24
c000f49d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f49f:	6a 00                	push   0x0
c000f4a1:	68 8f ee 00 c0       	push   0xc000ee8f
c000f4a6:	6a 06                	push   0x6
c000f4a8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4ab:	ff d0                	call   eax
c000f4ad:	83 c4 10             	add    esp,0x10
c000f4b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4b5:	83 c0 24             	add    eax,0x24
c000f4b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4ba:	6a 00                	push   0x0
c000f4bc:	68 75 ed 00 c0       	push   0xc000ed75
c000f4c1:	6a 07                	push   0x7
c000f4c3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4c6:	ff d0                	call   eax
c000f4c8:	83 c4 10             	add    esp,0x10
c000f4cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4d0:	83 c0 24             	add    eax,0x24
c000f4d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 5e e5 00 c0       	push   0xc000e55e
c000f4dc:	6a 08                	push   0x8
c000f4de:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4e1:	ff d0                	call   eax
c000f4e3:	83 c4 10             	add    esp,0x10
c000f4e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4e9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4eb:	83 c0 24             	add    eax,0x24
c000f4ee:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4f0:	6a 00                	push   0x0
c000f4f2:	68 70 ee 00 c0       	push   0xc000ee70
c000f4f7:	6a 09                	push   0x9
c000f4f9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4fc:	ff d0                	call   eax
c000f4fe:	83 c4 10             	add    esp,0x10
c000f501:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f504:	8b 00                	mov    eax,DWORD PTR [eax]
c000f506:	83 c0 24             	add    eax,0x24
c000f509:	8b 00                	mov    eax,DWORD PTR [eax]
c000f50b:	6a 00                	push   0x0
c000f50d:	68 70 ee 00 c0       	push   0xc000ee70
c000f512:	6a 0a                	push   0xa
c000f514:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f517:	ff d0                	call   eax
c000f519:	83 c4 10             	add    esp,0x10
c000f51c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f51f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f521:	83 c0 24             	add    eax,0x24
c000f524:	8b 00                	mov    eax,DWORD PTR [eax]
c000f526:	6a 00                	push   0x0
c000f528:	68 70 ee 00 c0       	push   0xc000ee70
c000f52d:	6a 0b                	push   0xb
c000f52f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f532:	ff d0                	call   eax
c000f534:	83 c4 10             	add    esp,0x10
c000f537:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f53a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f53c:	83 c0 24             	add    eax,0x24
c000f53f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f541:	6a 00                	push   0x0
c000f543:	68 70 ee 00 c0       	push   0xc000ee70
c000f548:	6a 0c                	push   0xc
c000f54a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f54d:	ff d0                	call   eax
c000f54f:	83 c4 10             	add    esp,0x10
c000f552:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f555:	8b 00                	mov    eax,DWORD PTR [eax]
c000f557:	83 c0 24             	add    eax,0x24
c000f55a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f55c:	6a 00                	push   0x0
c000f55e:	68 e8 ed 00 c0       	push   0xc000ede8
c000f563:	6a 0d                	push   0xd
c000f565:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f568:	ff d0                	call   eax
c000f56a:	83 c4 10             	add    esp,0x10
c000f56d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f570:	8b 00                	mov    eax,DWORD PTR [eax]
c000f572:	83 c0 24             	add    eax,0x24
c000f575:	8b 00                	mov    eax,DWORD PTR [eax]
c000f577:	6a 00                	push   0x0
c000f579:	68 21 ee 00 c0       	push   0xc000ee21
c000f57e:	6a 0e                	push   0xe
c000f580:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f583:	ff d0                	call   eax
c000f585:	83 c4 10             	add    esp,0x10
c000f588:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f58b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f58d:	83 c0 24             	add    eax,0x24
c000f590:	8b 00                	mov    eax,DWORD PTR [eax]
c000f592:	6a 00                	push   0x0
c000f594:	68 70 ee 00 c0       	push   0xc000ee70
c000f599:	6a 0f                	push   0xf
c000f59b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f59e:	ff d0                	call   eax
c000f5a0:	83 c4 10             	add    esp,0x10
c000f5a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5a6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5a8:	83 c0 24             	add    eax,0x24
c000f5ab:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 70 ee 00 c0       	push   0xc000ee70
c000f5b4:	6a 10                	push   0x10
c000f5b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5b9:	ff d0                	call   eax
c000f5bb:	83 c4 10             	add    esp,0x10
c000f5be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5c3:	83 c0 24             	add    eax,0x24
c000f5c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5c8:	6a 00                	push   0x0
c000f5ca:	68 70 ee 00 c0       	push   0xc000ee70
c000f5cf:	6a 11                	push   0x11
c000f5d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5d4:	ff d0                	call   eax
c000f5d6:	83 c4 10             	add    esp,0x10
c000f5d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5de:	83 c0 24             	add    eax,0x24
c000f5e1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5e3:	6a 00                	push   0x0
c000f5e5:	68 70 ee 00 c0       	push   0xc000ee70
c000f5ea:	6a 12                	push   0x12
c000f5ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5ef:	ff d0                	call   eax
c000f5f1:	83 c4 10             	add    esp,0x10
c000f5f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5f9:	83 c0 24             	add    eax,0x24
c000f5fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5fe:	6a 00                	push   0x0
c000f600:	68 70 ee 00 c0       	push   0xc000ee70
c000f605:	6a 13                	push   0x13
c000f607:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f60a:	ff d0                	call   eax
c000f60c:	83 c4 10             	add    esp,0x10
c000f60f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f612:	8b 00                	mov    eax,DWORD PTR [eax]
c000f614:	83 c0 24             	add    eax,0x24
c000f617:	8b 00                	mov    eax,DWORD PTR [eax]
c000f619:	6a 00                	push   0x0
c000f61b:	68 70 ee 00 c0       	push   0xc000ee70
c000f620:	6a 14                	push   0x14
c000f622:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f625:	ff d0                	call   eax
c000f627:	83 c4 10             	add    esp,0x10
c000f62a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f62d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f62f:	83 c0 24             	add    eax,0x24
c000f632:	8b 00                	mov    eax,DWORD PTR [eax]
c000f634:	6a 00                	push   0x0
c000f636:	68 70 ee 00 c0       	push   0xc000ee70
c000f63b:	6a 1e                	push   0x1e
c000f63d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f640:	ff d0                	call   eax
c000f642:	83 c4 10             	add    esp,0x10
c000f645:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f648:	8b 00                	mov    eax,DWORD PTR [eax]
c000f64a:	83 c0 24             	add    eax,0x24
c000f64d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f64f:	6a 00                	push   0x0
c000f651:	68 27 65 01 c0       	push   0xc0016527
c000f656:	6a 60                	push   0x60
c000f658:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f65b:	ff d0                	call   eax
c000f65d:	83 c4 10             	add    esp,0x10
c000f660:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f663:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f666:	c9                   	leave  
c000f667:	c3                   	ret    

c000f668 <InterruptController::convertLegacyIRQNumber(int)>:
c000f668:	55                   	push   ebp
c000f669:	89 e5                	mov    ebp,esp
c000f66b:	83 ec 08             	sub    esp,0x8
c000f66e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f671:	83 ec 0c             	sub    esp,0xc
c000f674:	50                   	push   eax
c000f675:	e8 fc ea ff ff       	call   c000e176 <Device::getName()>
c000f67a:	83 c4 10             	add    esp,0x10
c000f67d:	8a 00                	mov    al,BYTE PTR [eax]
c000f67f:	3c 41                	cmp    al,0x41
c000f681:	0f 94 c0             	sete   al
c000f684:	84 c0                	test   al,al
c000f686:	74 28                	je     c000f6b0 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f688:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f68c:	7f 12                	jg     c000f6a0 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f68e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f691:	05 20 5b 02 c0       	add    eax,0xc0025b20
c000f696:	8a 00                	mov    al,BYTE PTR [eax]
c000f698:	0f b6 c0             	movzx  eax,al
c000f69b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f69e:	eb 10                	jmp    c000f6b0 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f6a0:	83 ec 0c             	sub    esp,0xc
c000f6a3:	68 60 37 02 c0       	push   0xc0023760
c000f6a8:	e8 5c 4c 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000f6ad:	83 c4 10             	add    esp,0x10
c000f6b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f6b3:	c9                   	leave  
c000f6b4:	c3                   	ret    
c000f6b5:	90                   	nop

c000f6b6 <startGUI(void*)>:
c000f6b6:	55                   	push   ebp
c000f6b7:	89 e5                	mov    ebp,esp
c000f6b9:	53                   	push   ebx
c000f6ba:	83 ec 04             	sub    esp,0x4
c000f6bd:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f6c2:	48                   	dec    eax
c000f6c3:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f6c8:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f6cd:	85 c0                	test   eax,eax
c000f6cf:	75 01                	jne    c000f6d2 <startGUI(void*)+0x1c>
c000f6d1:	fb                   	sti    
c000f6d2:	8b 1d 28 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026428
c000f6d8:	83 ec 08             	sub    esp,0x8
c000f6db:	6a 01                	push   0x1
c000f6dd:	68 e0 37 02 c0       	push   0xc00237e0
c000f6e2:	e8 1b 7e 00 00       	call   c0017502 <Thr::loadDLL(char const*, bool)>
c000f6e7:	83 c4 10             	add    esp,0x10
c000f6ea:	83 ec 08             	sub    esp,0x8
c000f6ed:	53                   	push   ebx
c000f6ee:	50                   	push   eax
c000f6ef:	e8 3f 80 00 00       	call   c0017733 <Thr::executeDLL(unsigned long, void*)>
c000f6f4:	83 c4 10             	add    esp,0x10
c000f6f7:	8b 1d 28 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026428
c000f6fd:	83 ec 08             	sub    esp,0x8
c000f700:	6a 01                	push   0x1
c000f702:	68 fa 37 02 c0       	push   0xc00237fa
c000f707:	e8 f6 7d 00 00       	call   c0017502 <Thr::loadDLL(char const*, bool)>
c000f70c:	83 c4 10             	add    esp,0x10
c000f70f:	83 ec 08             	sub    esp,0x8
c000f712:	53                   	push   ebx
c000f713:	50                   	push   eax
c000f714:	e8 1a 80 00 00       	call   c0017733 <Thr::executeDLL(unsigned long, void*)>
c000f719:	83 c4 10             	add    esp,0x10
c000f71c:	90                   	nop
c000f71d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f720:	c9                   	leave  
c000f721:	c3                   	ret    

c000f722 <startGUIVESA(void*)>:
c000f722:	55                   	push   ebp
c000f723:	89 e5                	mov    ebp,esp
c000f725:	53                   	push   ebx
c000f726:	83 ec 04             	sub    esp,0x4
c000f729:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f72e:	48                   	dec    eax
c000f72f:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f734:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f739:	85 c0                	test   eax,eax
c000f73b:	75 01                	jne    c000f73e <startGUIVESA(void*)+0x1c>
c000f73d:	fb                   	sti    
c000f73e:	8b 1d 28 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026428
c000f744:	83 ec 08             	sub    esp,0x8
c000f747:	6a 01                	push   0x1
c000f749:	68 14 38 02 c0       	push   0xc0023814
c000f74e:	e8 af 7d 00 00       	call   c0017502 <Thr::loadDLL(char const*, bool)>
c000f753:	83 c4 10             	add    esp,0x10
c000f756:	83 ec 08             	sub    esp,0x8
c000f759:	53                   	push   ebx
c000f75a:	50                   	push   eax
c000f75b:	e8 d3 7f 00 00       	call   c0017733 <Thr::executeDLL(unsigned long, void*)>
c000f760:	83 c4 10             	add    esp,0x10
c000f763:	8b 1d 28 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026428
c000f769:	83 ec 08             	sub    esp,0x8
c000f76c:	6a 01                	push   0x1
c000f76e:	68 fa 37 02 c0       	push   0xc00237fa
c000f773:	e8 8a 7d 00 00       	call   c0017502 <Thr::loadDLL(char const*, bool)>
c000f778:	83 c4 10             	add    esp,0x10
c000f77b:	83 ec 08             	sub    esp,0x8
c000f77e:	53                   	push   ebx
c000f77f:	50                   	push   eax
c000f780:	e8 ae 7f 00 00       	call   c0017733 <Thr::executeDLL(unsigned long, void*)>
c000f785:	83 c4 10             	add    esp,0x10
c000f788:	90                   	nop
c000f789:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f78c:	c9                   	leave  
c000f78d:	c3                   	ret    

c000f78e <sendKeyToTerminal(unsigned char)>:
c000f78e:	55                   	push   ebp
c000f78f:	89 e5                	mov    ebp,esp
c000f791:	83 ec 28             	sub    esp,0x28
c000f794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f797:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000f79a:	a1 e4 64 02 c0       	mov    eax,ds:0xc00264e4
c000f79f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000f7a3:	83 ec 08             	sub    esp,0x8
c000f7a6:	52                   	push   edx
c000f7a7:	50                   	push   eax
c000f7a8:	e8 81 b6 ff ff       	call   c000ae2e <VgaText::receiveKey(unsigned char)>
c000f7ad:	83 c4 10             	add    esp,0x10
c000f7b0:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000f7b4:	0f 85 8f 00 00 00    	jne    c000f849 <sendKeyToTerminal(unsigned char)+0xbb>
c000f7ba:	fa                   	cli    
c000f7bb:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f7c0:	40                   	inc    eax
c000f7c1:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f7c6:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f7cb:	40                   	inc    eax
c000f7cc:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f7d1:	a1 c0 65 02 c0       	mov    eax,ds:0xc00265c0
c000f7d6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f7d9:	c7 05 c0 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00265c0,0x0
c000f7e3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f7e7:	74 1f                	je     c000f808 <sendKeyToTerminal(unsigned char)+0x7a>
c000f7e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7ec:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000f7ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f7f2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f7f5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f7f8:	83 ec 0c             	sub    esp,0xc
c000f7fb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f7fe:	e8 d1 8b 00 00       	call   c00183d4 <unblockTask(ThreadControlBlock*)>
c000f803:	83 c4 10             	add    esp,0x10
c000f806:	eb db                	jmp    c000f7e3 <sendKeyToTerminal(unsigned char)+0x55>
c000f808:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f80d:	48                   	dec    eax
c000f80e:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f813:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f818:	85 c0                	test   eax,eax
c000f81a:	75 18                	jne    c000f834 <sendKeyToTerminal(unsigned char)+0xa6>
c000f81c:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f821:	85 c0                	test   eax,eax
c000f823:	74 0f                	je     c000f834 <sendKeyToTerminal(unsigned char)+0xa6>
c000f825:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c000f82f:	e8 c8 86 00 00       	call   c0017efc <schedule()>
c000f834:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f839:	48                   	dec    eax
c000f83a:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f83f:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f844:	85 c0                	test   eax,eax
c000f846:	75 01                	jne    c000f849 <sendKeyToTerminal(unsigned char)+0xbb>
c000f848:	fb                   	sti    
c000f849:	90                   	nop
c000f84a:	c9                   	leave  
c000f84b:	c3                   	ret    

c000f84c <sendKeyboardToken(KeyboardToken)>:
c000f84c:	55                   	push   ebp
c000f84d:	89 e5                	mov    ebp,esp
c000f84f:	83 ec 18             	sub    esp,0x18
c000f852:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000f855:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f858:	0f b7 c0             	movzx  eax,ax
c000f85b:	83 f2 01             	xor    edx,0x1
c000f85e:	88 90 e0 65 02 c0    	mov    BYTE PTR [eax-0x3ffd9a20],dl
c000f864:	a1 c8 65 02 c0       	mov    eax,ds:0xc00265c8
c000f869:	85 c0                	test   eax,eax
c000f86b:	74 24                	je     c000f891 <sendKeyboardToken(KeyboardToken)+0x45>
c000f86d:	8b 0d c8 65 02 c0    	mov    ecx,DWORD PTR ds:0xc00265c8
c000f873:	83 ec 04             	sub    esp,0x4
c000f876:	68 e0 65 02 c0       	push   0xc00265e0
c000f87b:	83 ec 08             	sub    esp,0x8
c000f87e:	89 e2                	mov    edx,esp
c000f880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f883:	89 02                	mov    DWORD PTR [edx],eax
c000f885:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f888:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000f88c:	ff d1                	call   ecx
c000f88e:	83 c4 10             	add    esp,0x10
c000f891:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f894:	66 3d 03 02          	cmp    ax,0x203
c000f898:	75 07                	jne    c000f8a1 <sendKeyboardToken(KeyboardToken)+0x55>
c000f89a:	a0 e0 66 02 c0       	mov    al,ds:0xc00266e0
c000f89f:	84 c0                	test   al,al
c000f8a1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f8a5:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000f8a8:	a0 e8 69 02 c0       	mov    al,ds:0xc00269e8
c000f8ad:	38 c2                	cmp    dl,al
c000f8af:	74 1c                	je     c000f8cd <sendKeyboardToken(KeyboardToken)+0x81>
c000f8b1:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000f8b4:	a2 e8 69 02 c0       	mov    ds:0xc00269e8,al
c000f8b9:	a0 e8 69 02 c0       	mov    al,ds:0xc00269e8
c000f8be:	0f b6 c0             	movzx  eax,al
c000f8c1:	83 ec 0c             	sub    esp,0xc
c000f8c4:	50                   	push   eax
c000f8c5:	e8 a4 ab ff ff       	call   c000a46e <setTerminalScrollLock(bool)>
c000f8ca:	83 c4 10             	add    esp,0x10
c000f8cd:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000f8d0:	84 c0                	test   al,al
c000f8d2:	0f 84 ae 00 00 00    	je     c000f986 <sendKeyboardToken(KeyboardToken)+0x13a>
c000f8d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8db:	66 3d 10 03          	cmp    ax,0x310
c000f8df:	75 06                	jne    c000f8e7 <sendKeyboardToken(KeyboardToken)+0x9b>
c000f8e1:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000f8e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8ea:	66 3d 11 03          	cmp    ax,0x311
c000f8ee:	75 06                	jne    c000f8f6 <sendKeyboardToken(KeyboardToken)+0xaa>
c000f8f0:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000f8f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8f9:	66 3d 12 03          	cmp    ax,0x312
c000f8fd:	75 06                	jne    c000f905 <sendKeyboardToken(KeyboardToken)+0xb9>
c000f8ff:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000f905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f908:	66 3d 13 03          	cmp    ax,0x313
c000f90c:	75 06                	jne    c000f914 <sendKeyboardToken(KeyboardToken)+0xc8>
c000f90e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000f914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f917:	66 3d 14 03          	cmp    ax,0x314
c000f91b:	75 06                	jne    c000f923 <sendKeyboardToken(KeyboardToken)+0xd7>
c000f91d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000f923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f926:	66 3d 15 03          	cmp    ax,0x315
c000f92a:	75 06                	jne    c000f932 <sendKeyboardToken(KeyboardToken)+0xe6>
c000f92c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000f932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f935:	66 3d 16 03          	cmp    ax,0x316
c000f939:	75 06                	jne    c000f941 <sendKeyboardToken(KeyboardToken)+0xf5>
c000f93b:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000f941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f944:	66 3d 17 03          	cmp    ax,0x317
c000f948:	75 06                	jne    c000f950 <sendKeyboardToken(KeyboardToken)+0x104>
c000f94a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000f950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f953:	66 3d 18 03          	cmp    ax,0x318
c000f957:	75 06                	jne    c000f95f <sendKeyboardToken(KeyboardToken)+0x113>
c000f959:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000f95f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f962:	66 3d 19 03          	cmp    ax,0x319
c000f966:	75 06                	jne    c000f96e <sendKeyboardToken(KeyboardToken)+0x122>
c000f968:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000f96e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f971:	66 3d 1a 03          	cmp    ax,0x31a
c000f975:	0f 85 c9 00 00 00    	jne    c000fa44 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f97b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000f981:	e9 be 00 00 00       	jmp    c000fa44 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f989:	66 3d 10 03          	cmp    ax,0x310
c000f98d:	75 0a                	jne    c000f999 <sendKeyboardToken(KeyboardToken)+0x14d>
c000f98f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000f995:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f99c:	66 3d 11 03          	cmp    ax,0x311
c000f9a0:	75 0a                	jne    c000f9ac <sendKeyboardToken(KeyboardToken)+0x160>
c000f9a2:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000f9a8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9af:	66 3d 12 03          	cmp    ax,0x312
c000f9b3:	75 0a                	jne    c000f9bf <sendKeyboardToken(KeyboardToken)+0x173>
c000f9b5:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000f9bb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9c2:	66 3d 13 03          	cmp    ax,0x313
c000f9c6:	75 0a                	jne    c000f9d2 <sendKeyboardToken(KeyboardToken)+0x186>
c000f9c8:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000f9ce:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9d5:	66 3d 14 03          	cmp    ax,0x314
c000f9d9:	75 0a                	jne    c000f9e5 <sendKeyboardToken(KeyboardToken)+0x199>
c000f9db:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000f9e1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9e8:	66 3d 15 03          	cmp    ax,0x315
c000f9ec:	75 0a                	jne    c000f9f8 <sendKeyboardToken(KeyboardToken)+0x1ac>
c000f9ee:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000f9f4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9fb:	66 3d 16 03          	cmp    ax,0x316
c000f9ff:	75 0a                	jne    c000fa0b <sendKeyboardToken(KeyboardToken)+0x1bf>
c000fa01:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fa07:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa0e:	66 3d 17 03          	cmp    ax,0x317
c000fa12:	75 0a                	jne    c000fa1e <sendKeyboardToken(KeyboardToken)+0x1d2>
c000fa14:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fa1a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa21:	66 3d 18 03          	cmp    ax,0x318
c000fa25:	75 0a                	jne    c000fa31 <sendKeyboardToken(KeyboardToken)+0x1e5>
c000fa27:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fa2d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa34:	66 3d 19 03          	cmp    ax,0x319
c000fa38:	75 0a                	jne    c000fa44 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fa3a:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fa40:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa47:	66 3d 00 02          	cmp    ax,0x200
c000fa4b:	75 2c                	jne    c000fa79 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fa4d:	a0 e0 69 02 c0       	mov    al,ds:0xc00269e0
c000fa52:	83 f0 01             	xor    eax,0x1
c000fa55:	84 c0                	test   al,al
c000fa57:	74 20                	je     c000fa79 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fa59:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000fa5e:	6a 01                	push   0x1
c000fa60:	6a 00                	push   0x0
c000fa62:	68 b6 f6 00 c0       	push   0xc000f6b6
c000fa67:	50                   	push   eax
c000fa68:	e8 5f 82 00 00       	call   c0017ccc <Process::createThread(void (*)(void*), void*, int)>
c000fa6d:	83 c4 10             	add    esp,0x10
c000fa70:	c6 05 e0 69 02 c0 01 	mov    BYTE PTR ds:0xc00269e0,0x1
c000fa77:	eb 33                	jmp    c000faac <sendKeyboardToken(KeyboardToken)+0x260>
c000fa79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa7c:	66 3d 01 02          	cmp    ax,0x201
c000fa80:	75 2a                	jne    c000faac <sendKeyboardToken(KeyboardToken)+0x260>
c000fa82:	a0 e0 69 02 c0       	mov    al,ds:0xc00269e0
c000fa87:	83 f0 01             	xor    eax,0x1
c000fa8a:	84 c0                	test   al,al
c000fa8c:	74 1e                	je     c000faac <sendKeyboardToken(KeyboardToken)+0x260>
c000fa8e:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000fa93:	6a 01                	push   0x1
c000fa95:	6a 00                	push   0x0
c000fa97:	68 22 f7 00 c0       	push   0xc000f722
c000fa9c:	50                   	push   eax
c000fa9d:	e8 2a 82 00 00       	call   c0017ccc <Process::createThread(void (*)(void*), void*, int)>
c000faa2:	83 c4 10             	add    esp,0x10
c000faa5:	c6 05 e0 69 02 c0 01 	mov    BYTE PTR ds:0xc00269e0,0x1
c000faac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faaf:	66 3d 1d 03          	cmp    ax,0x31d
c000fab3:	75 06                	jne    c000fabb <sendKeyboardToken(KeyboardToken)+0x26f>
c000fab5:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fabb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fabe:	66 3d 1c 03          	cmp    ax,0x31c
c000fac2:	75 06                	jne    c000faca <sendKeyboardToken(KeyboardToken)+0x27e>
c000fac4:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000faca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000facd:	66 3d 1b 03          	cmp    ax,0x31b
c000fad1:	75 06                	jne    c000fad9 <sendKeyboardToken(KeyboardToken)+0x28d>
c000fad3:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fadc:	66 3d 1e 03          	cmp    ax,0x31e
c000fae0:	75 06                	jne    c000fae8 <sendKeyboardToken(KeyboardToken)+0x29c>
c000fae2:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faeb:	66 3d 1f 03          	cmp    ax,0x31f
c000faef:	75 06                	jne    c000faf7 <sendKeyboardToken(KeyboardToken)+0x2ab>
c000faf1:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000faf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fafa:	66 3d 1a 03          	cmp    ax,0x31a
c000fafe:	75 06                	jne    c000fb06 <sendKeyboardToken(KeyboardToken)+0x2ba>
c000fb00:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fb06:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fb0a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fb0d:	83 f0 01             	xor    eax,0x1
c000fb10:	84 c0                	test   al,al
c000fb12:	74 77                	je     c000fb8b <sendKeyboardToken(KeyboardToken)+0x33f>
c000fb14:	a0 e1 66 02 c0       	mov    al,ds:0xc00266e1
c000fb19:	84 c0                	test   al,al
c000fb1b:	74 41                	je     c000fb5e <sendKeyboardToken(KeyboardToken)+0x312>
c000fb1d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fb21:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fb25:	74 2b                	je     c000fb52 <sendKeyboardToken(KeyboardToken)+0x306>
c000fb27:	8b 15 e4 69 02 c0    	mov    edx,DWORD PTR ds:0xc00269e4
c000fb2d:	89 d0                	mov    eax,edx
c000fb2f:	c1 e0 02             	shl    eax,0x2
c000fb32:	01 d0                	add    eax,edx
c000fb34:	01 c0                	add    eax,eax
c000fb36:	a3 e4 69 02 c0       	mov    ds:0xc00269e4,eax
c000fb3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb3e:	0f b7 c0             	movzx  eax,ax
c000fb41:	8d 50 d0             	lea    edx,[eax-0x30]
c000fb44:	a1 e4 69 02 c0       	mov    eax,ds:0xc00269e4
c000fb49:	01 d0                	add    eax,edx
c000fb4b:	a3 e4 69 02 c0       	mov    ds:0xc00269e4,eax
c000fb50:	eb 6d                	jmp    c000fbbf <sendKeyboardToken(KeyboardToken)+0x373>
c000fb52:	c7 05 e4 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00269e4,0x0
c000fb5c:	eb 61                	jmp    c000fbbf <sendKeyboardToken(KeyboardToken)+0x373>
c000fb5e:	a1 e4 69 02 c0       	mov    eax,ds:0xc00269e4
c000fb63:	85 c0                	test   eax,eax
c000fb65:	74 18                	je     c000fb7f <sendKeyboardToken(KeyboardToken)+0x333>
c000fb67:	a1 e4 69 02 c0       	mov    eax,ds:0xc00269e4
c000fb6c:	0f b6 c0             	movzx  eax,al
c000fb6f:	83 ec 0c             	sub    esp,0xc
c000fb72:	50                   	push   eax
c000fb73:	e8 16 fc ff ff       	call   c000f78e <sendKeyToTerminal(unsigned char)>
c000fb78:	83 c4 10             	add    esp,0x10
c000fb7b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fb7f:	c7 05 e4 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00269e4,0x0
c000fb89:	eb 34                	jmp    c000fbbf <sendKeyboardToken(KeyboardToken)+0x373>
c000fb8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb8e:	66 3d 01 01          	cmp    ax,0x101
c000fb92:	75 2b                	jne    c000fbbf <sendKeyboardToken(KeyboardToken)+0x373>
c000fb94:	a1 e4 69 02 c0       	mov    eax,ds:0xc00269e4
c000fb99:	85 c0                	test   eax,eax
c000fb9b:	74 18                	je     c000fbb5 <sendKeyboardToken(KeyboardToken)+0x369>
c000fb9d:	a1 e4 69 02 c0       	mov    eax,ds:0xc00269e4
c000fba2:	0f b6 c0             	movzx  eax,al
c000fba5:	83 ec 0c             	sub    esp,0xc
c000fba8:	50                   	push   eax
c000fba9:	e8 e0 fb ff ff       	call   c000f78e <sendKeyToTerminal(unsigned char)>
c000fbae:	83 c4 10             	add    esp,0x10
c000fbb1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fbb5:	c7 05 e4 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00269e4,0x0
c000fbbf:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fbc2:	83 f0 01             	xor    eax,0x1
c000fbc5:	84 c0                	test   al,al
c000fbc7:	74 4c                	je     c000fc15 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fbc9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fbcc:	83 f0 01             	xor    eax,0x1
c000fbcf:	84 c0                	test   al,al
c000fbd1:	74 42                	je     c000fc15 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fbd3:	a0 e0 66 02 c0       	mov    al,ds:0xc00266e0
c000fbd8:	83 f0 01             	xor    eax,0x1
c000fbdb:	84 c0                	test   al,al
c000fbdd:	74 36                	je     c000fc15 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fbdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbe2:	66 83 f8 1f          	cmp    ax,0x1f
c000fbe6:	76 09                	jbe    c000fbf1 <sendKeyboardToken(KeyboardToken)+0x3a5>
c000fbe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbeb:	66 83 f8 7e          	cmp    ax,0x7e
c000fbef:	76 12                	jbe    c000fc03 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fbf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbf4:	66 83 f8 0a          	cmp    ax,0xa
c000fbf8:	74 09                	je     c000fc03 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fbfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbfd:	66 83 f8 08          	cmp    ax,0x8
c000fc01:	75 12                	jne    c000fc15 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc06:	0f b6 c0             	movzx  eax,al
c000fc09:	83 ec 0c             	sub    esp,0xc
c000fc0c:	50                   	push   eax
c000fc0d:	e8 7c fb ff ff       	call   c000f78e <sendKeyToTerminal(unsigned char)>
c000fc12:	83 c4 10             	add    esp,0x10
c000fc15:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fc18:	83 f0 01             	xor    eax,0x1
c000fc1b:	84 c0                	test   al,al
c000fc1d:	74 4f                	je     c000fc6e <sendKeyboardToken(KeyboardToken)+0x422>
c000fc1f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc22:	83 f0 01             	xor    eax,0x1
c000fc25:	84 c0                	test   al,al
c000fc27:	74 45                	je     c000fc6e <sendKeyboardToken(KeyboardToken)+0x422>
c000fc29:	a0 e0 66 02 c0       	mov    al,ds:0xc00266e0
c000fc2e:	84 c0                	test   al,al
c000fc30:	74 3c                	je     c000fc6e <sendKeyboardToken(KeyboardToken)+0x422>
c000fc32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc35:	66 83 f8 3f          	cmp    ax,0x3f
c000fc39:	76 33                	jbe    c000fc6e <sendKeyboardToken(KeyboardToken)+0x422>
c000fc3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc3e:	66 83 f8 7f          	cmp    ax,0x7f
c000fc42:	77 2a                	ja     c000fc6e <sendKeyboardToken(KeyboardToken)+0x422>
c000fc44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc47:	88 c2                	mov    dl,al
c000fc49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc4c:	66 83 f8 5f          	cmp    ax,0x5f
c000fc50:	76 04                	jbe    c000fc56 <sendKeyboardToken(KeyboardToken)+0x40a>
c000fc52:	b0 20                	mov    al,0x20
c000fc54:	eb 02                	jmp    c000fc58 <sendKeyboardToken(KeyboardToken)+0x40c>
c000fc56:	b0 00                	mov    al,0x0
c000fc58:	29 c2                	sub    edx,eax
c000fc5a:	88 d0                	mov    al,dl
c000fc5c:	83 e8 40             	sub    eax,0x40
c000fc5f:	0f b6 c0             	movzx  eax,al
c000fc62:	83 ec 0c             	sub    esp,0xc
c000fc65:	50                   	push   eax
c000fc66:	e8 23 fb ff ff       	call   c000f78e <sendKeyToTerminal(unsigned char)>
c000fc6b:	83 c4 10             	add    esp,0x10
c000fc6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc71:	66 3d 00 03          	cmp    ax,0x300
c000fc75:	75 0f                	jne    c000fc86 <sendKeyboardToken(KeyboardToken)+0x43a>
c000fc77:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc7a:	83 f0 01             	xor    eax,0x1
c000fc7d:	84 c0                	test   al,al
c000fc7f:	74 05                	je     c000fc86 <sendKeyboardToken(KeyboardToken)+0x43a>
c000fc81:	e8 59 ab ff ff       	call   c000a7df <doTerminalCycle()>
c000fc86:	90                   	nop
c000fc87:	c9                   	leave  
c000fc88:	c3                   	ret    

c000fc89 <clearInternalKeybuffer(VgaText*)>:
c000fc89:	55                   	push   ebp
c000fc8a:	89 e5                	mov    ebp,esp
c000fc8c:	83 ec 08             	sub    esp,0x8
c000fc8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc92:	05 98 01 00 00       	add    eax,0x198
c000fc97:	83 ec 0c             	sub    esp,0xc
c000fc9a:	50                   	push   eax
c000fc9b:	e8 00 0a ff ff       	call   c00006a0 <strlen>
c000fca0:	83 c4 10             	add    esp,0x10
c000fca3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fca6:	81 c2 98 01 00 00    	add    edx,0x198
c000fcac:	83 ec 04             	sub    esp,0x4
c000fcaf:	50                   	push   eax
c000fcb0:	6a 00                	push   0x0
c000fcb2:	52                   	push   edx
c000fcb3:	e8 cc 09 ff ff       	call   c0000684 <memset>
c000fcb8:	83 c4 10             	add    esp,0x10
c000fcbb:	90                   	nop
c000fcbc:	c9                   	leave  
c000fcbd:	c3                   	ret    

c000fcbe <readKeyboard(VgaText*, char*, unsigned long)>:
c000fcbe:	55                   	push   ebp
c000fcbf:	89 e5                	mov    ebp,esp
c000fcc1:	83 ec 18             	sub    esp,0x18
c000fcc4:	a1 c8 65 02 c0       	mov    eax,ds:0xc00265c8
c000fcc9:	85 c0                	test   eax,eax
c000fccb:	74 2a                	je     c000fcf7 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000fccd:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000fcd3:	8b 0d c8 65 02 c0    	mov    ecx,DWORD PTR ds:0xc00265c8
c000fcd9:	83 ec 04             	sub    esp,0x4
c000fcdc:	68 e0 65 02 c0       	push   0xc00265e0
c000fce1:	83 ec 08             	sub    esp,0x8
c000fce4:	89 e2                	mov    edx,esp
c000fce6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000fce9:	89 02                	mov    DWORD PTR [edx],eax
c000fceb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fcee:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fcf2:	ff d1                	call   ecx
c000fcf4:	83 c4 10             	add    esp,0x10
c000fcf7:	fb                   	sti    
c000fcf8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000fcff:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000fd03:	0f 84 a1 00 00 00    	je     c000fdaa <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000fd09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd0c:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fd12:	84 c0                	test   al,al
c000fd14:	75 28                	jne    c000fd3e <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000fd16:	fa                   	cli    
c000fd17:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000fd1c:	40                   	inc    eax
c000fd1d:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000fd22:	e8 d5 81 00 00       	call   c0017efc <schedule()>
c000fd27:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000fd2c:	48                   	dec    eax
c000fd2d:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000fd32:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000fd37:	85 c0                	test   eax,eax
c000fd39:	75 ce                	jne    c000fd09 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fd3b:	fb                   	sti    
c000fd3c:	eb cb                	jmp    c000fd09 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fd3e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fd41:	8d 50 01             	lea    edx,[eax+0x1]
c000fd44:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000fd47:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd4a:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c000fd50:	88 10                	mov    BYTE PTR [eax],dl
c000fd52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd55:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fd5b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000fd5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd61:	05 98 01 00 00       	add    eax,0x198
c000fd66:	83 ec 0c             	sub    esp,0xc
c000fd69:	50                   	push   eax
c000fd6a:	e8 31 09 ff ff       	call   c00006a0 <strlen>
c000fd6f:	83 c4 10             	add    esp,0x10
c000fd72:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd75:	81 c2 98 01 00 00    	add    edx,0x198
c000fd7b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000fd7e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd81:	81 c2 98 01 00 00    	add    edx,0x198
c000fd87:	83 ec 04             	sub    esp,0x4
c000fd8a:	50                   	push   eax
c000fd8b:	51                   	push   ecx
c000fd8c:	52                   	push   edx
c000fd8d:	e8 2a 08 ff ff       	call   c00005bc <memmove>
c000fd92:	83 c4 10             	add    esp,0x10
c000fd95:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000fd98:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000fd9b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000fd9f:	0f 85 5a ff ff ff    	jne    c000fcff <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000fda5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fda8:	eb 03                	jmp    c000fdad <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000fdaa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdad:	c9                   	leave  
c000fdae:	c3                   	ret    
c000fdaf:	90                   	nop

c000fdb0 <Keyboard::Keyboard(char const*)>:
c000fdb0:	83 ec 0c             	sub    esp,0xc
c000fdb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdb7:	83 ec 08             	sub    esp,0x8
c000fdba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdbe:	50                   	push   eax
c000fdbf:	e8 b6 e2 ff ff       	call   c000e07a <Device::Device(char const*)>
c000fdc4:	83 c4 10             	add    esp,0x10
c000fdc7:	ba 38 38 02 c0       	mov    edx,0xc0023838
c000fdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdd0:	89 10                	mov    DWORD PTR [eax],edx
c000fdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdd6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000fde0:	c6 05 c4 65 02 c0 01 	mov    BYTE PTR ds:0xc00265c4,0x1
c000fde7:	90                   	nop
c000fde8:	83 c4 0c             	add    esp,0xc
c000fdeb:	c3                   	ret    

c000fdec <Keyboard::~Keyboard()>:
c000fdec:	83 ec 0c             	sub    esp,0xc
c000fdef:	ba 38 38 02 c0       	mov    edx,0xc0023838
c000fdf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdf8:	89 10                	mov    DWORD PTR [eax],edx
c000fdfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdfe:	83 ec 0c             	sub    esp,0xc
c000fe01:	50                   	push   eax
c000fe02:	e8 3d df ff ff       	call   c000dd44 <Device::~Device()>
c000fe07:	83 c4 10             	add    esp,0x10
c000fe0a:	90                   	nop
c000fe0b:	83 c4 0c             	add    esp,0xc
c000fe0e:	c3                   	ret    
c000fe0f:	90                   	nop

c000fe10 <Keyboard::~Keyboard()>:
c000fe10:	83 ec 0c             	sub    esp,0xc
c000fe13:	83 ec 0c             	sub    esp,0xc
c000fe16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe1a:	e8 cd ff ff ff       	call   c000fdec <Keyboard::~Keyboard()>
c000fe1f:	83 c4 10             	add    esp,0x10
c000fe22:	83 ec 08             	sub    esp,0x8
c000fe25:	68 5c 01 00 00       	push   0x15c
c000fe2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe2e:	e8 14 cb ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000fe33:	83 c4 10             	add    esp,0x10
c000fe36:	83 c4 0c             	add    esp,0xc
c000fe39:	c3                   	ret    

c000fe3a <LogicalDisk::close(int, int, void*)>:
c000fe3a:	83 c8 ff             	or     eax,0xffffffff
c000fe3d:	c3                   	ret    

c000fe3e <LogicalDisk::~LogicalDisk()>:
c000fe3e:	83 ec 0c             	sub    esp,0xc
c000fe41:	ba b0 38 02 c0       	mov    edx,0xc00238b0
c000fe46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe4a:	89 10                	mov    DWORD PTR [eax],edx
c000fe4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe50:	83 ec 0c             	sub    esp,0xc
c000fe53:	50                   	push   eax
c000fe54:	e8 eb de ff ff       	call   c000dd44 <Device::~Device()>
c000fe59:	83 c4 10             	add    esp,0x10
c000fe5c:	90                   	nop
c000fe5d:	83 c4 0c             	add    esp,0xc
c000fe60:	c3                   	ret    
c000fe61:	90                   	nop

c000fe62 <LogicalDisk::~LogicalDisk()>:
c000fe62:	83 ec 0c             	sub    esp,0xc
c000fe65:	83 ec 0c             	sub    esp,0xc
c000fe68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe6c:	e8 cd ff ff ff       	call   c000fe3e <LogicalDisk::~LogicalDisk()>
c000fe71:	83 c4 10             	add    esp,0x10
c000fe74:	83 ec 08             	sub    esp,0x8
c000fe77:	68 74 01 00 00       	push   0x174
c000fe7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe80:	e8 c2 ca ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c000fe85:	83 c4 10             	add    esp,0x10
c000fe88:	83 c4 0c             	add    esp,0xc
c000fe8b:	c3                   	ret    

c000fe8c <LogicalDisk::open(int, int, void*)>:
c000fe8c:	83 ec 18             	sub    esp,0x18
c000fe8f:	68 64 38 02 c0       	push   0xc0023864
c000fe94:	e8 70 44 00 00       	call   c0014309 <Krnl::panic(char const*)>
c000fe99:	83 c8 ff             	or     eax,0xffffffff
c000fe9c:	83 c4 1c             	add    esp,0x1c
c000fe9f:	c3                   	ret    

c000fea0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000fea0:	53                   	push   ebx
c000fea1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fea5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fea9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fead:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000feb3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000feb9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000febf:	77 10                	ja     c000fed1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000fec1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000fec7:	89 d3                	mov    ebx,edx
c000fec9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000fecf:	72 05                	jb     c000fed6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000fed1:	83 c8 ff             	or     eax,0xffffffff
c000fed4:	89 c2                	mov    edx,eax
c000fed6:	5b                   	pop    ebx
c000fed7:	c3                   	ret    

c000fed8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000fed8:	56                   	push   esi
c000fed9:	83 c8 ff             	or     eax,0xffffffff
c000fedc:	53                   	push   ebx
c000fedd:	89 c2                	mov    edx,eax
c000fedf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fee3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000fee7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000feeb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000fef1:	77 27                	ja     c000ff1a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000fef3:	89 d8                	mov    eax,ebx
c000fef5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000fefb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ff01:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ff06:	89 c2                	mov    edx,eax
c000ff08:	73 10                	jae    c000ff1a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ff0a:	89 c8                	mov    eax,ecx
c000ff0c:	89 da                	mov    edx,ebx
c000ff0e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ff14:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ff1a:	5b                   	pop    ebx
c000ff1b:	5e                   	pop    esi
c000ff1c:	c3                   	ret    
c000ff1d:	90                   	nop

c000ff1e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ff1e:	83 ec 1c             	sub    esp,0x1c
c000ff21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ff25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ff35:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff38:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ff3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff44:	83 ec 08             	sub    esp,0x8
c000ff47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff4b:	50                   	push   eax
c000ff4c:	e8 29 e1 ff ff       	call   c000e07a <Device::Device(char const*)>
c000ff51:	83 c4 10             	add    esp,0x10
c000ff54:	ba b0 38 02 c0       	mov    edx,0xc00238b0
c000ff59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff5d:	89 10                	mov    DWORD PTR [eax],edx
c000ff5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff63:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ff6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff6e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ff75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff79:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ff83:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ff87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff8f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ff95:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ff9b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ff9f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ffa2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ffa6:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ffac:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ffb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffb6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ffba:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ffc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffc4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ffce:	90                   	nop
c000ffcf:	83 c4 1c             	add    esp,0x1c
c000ffd2:	c3                   	ret    
c000ffd3:	90                   	nop

c000ffd4 <LogicalDisk::assignDriveLetter()>:
c000ffd4:	55                   	push   ebp
c000ffd5:	57                   	push   edi
c000ffd6:	56                   	push   esi
c000ffd7:	53                   	push   ebx
c000ffd8:	83 ec 14             	sub    esp,0x14
c000ffdb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ffdf:	8b 3d 00 6a 02 c0    	mov    edi,DWORD PTR ds:0xc0026a00
c000ffe5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ffeb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ffef:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000fff5:	8b 3d 04 6a 02 c0    	mov    edi,DWORD PTR ds:0xc0026a04
c000fffb:	3c 01                	cmp    al,0x1
c000fffd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010001:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010005:	19 c0                	sbb    eax,eax
c0010007:	83 e0 02             	and    eax,0x2
c001000a:	83 c0 41             	add    eax,0x41
c001000d:	0f be e8             	movsx  ebp,al
c0010010:	3c 43                	cmp    al,0x43
c0010012:	75 10                	jne    c0010024 <LogicalDisk::assignDriveLetter()+0x50>
c0010014:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001001b:	75 5d                	jne    c001007a <LogicalDisk::assignDriveLetter()+0xa6>
c001001d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0010022:	75 56                	jne    c001007a <LogicalDisk::assignDriveLetter()+0xa6>
c0010024:	8d 75 bf             	lea    esi,[ebp-0x41]
c0010027:	ba 01 00 00 00       	mov    edx,0x1
c001002c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010030:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010034:	d3 e2                	shl    edx,cl
c0010036:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001003a:	89 d7                	mov    edi,edx
c001003c:	89 d6                	mov    esi,edx
c001003e:	c1 ff 1f             	sar    edi,0x1f
c0010041:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010045:	21 f9                	and    ecx,edi
c0010047:	09 d1                	or     ecx,edx
c0010049:	75 2f                	jne    c001007a <LogicalDisk::assignDriveLetter()+0xa6>
c001004b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001004f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010053:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010059:	09 f2                	or     edx,esi
c001005b:	89 15 00 6a 02 c0    	mov    DWORD PTR ds:0xc0026a00,edx
c0010061:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010065:	09 fa                	or     edx,edi
c0010067:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001006b:	89 15 04 6a 02 c0    	mov    DWORD PTR ds:0xc0026a04,edx
c0010071:	89 1c bd 20 6a 02 c0 	mov    DWORD PTR [edi*4-0x3ffd95e0],ebx
c0010078:	eb 08                	jmp    c0010082 <LogicalDisk::assignDriveLetter()+0xae>
c001007a:	45                   	inc    ebp
c001007b:	40                   	inc    eax
c001007c:	3c 5b                	cmp    al,0x5b
c001007e:	75 90                	jne    c0010010 <LogicalDisk::assignDriveLetter()+0x3c>
c0010080:	31 c0                	xor    eax,eax
c0010082:	83 c4 14             	add    esp,0x14
c0010085:	5b                   	pop    ebx
c0010086:	5e                   	pop    esi
c0010087:	5f                   	pop    edi
c0010088:	5d                   	pop    ebp
c0010089:	c3                   	ret    

c001008a <LogicalDisk::mount()>:
c001008a:	56                   	push   esi
c001008b:	53                   	push   ebx
c001008c:	53                   	push   ebx
c001008d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010091:	8b 1d 94 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026594
c0010097:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00100a1:	85 db                	test   ebx,ebx
c00100a3:	74 27                	je     c00100cc <LogicalDisk::mount()+0x42>
c00100a5:	51                   	push   ecx
c00100a6:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00100ad:	8b 13                	mov    edx,DWORD PTR [ebx]
c00100af:	83 e8 41             	sub    eax,0x41
c00100b2:	50                   	push   eax
c00100b3:	56                   	push   esi
c00100b4:	53                   	push   ebx
c00100b5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00100b8:	83 c4 10             	add    esp,0x10
c00100bb:	84 c0                	test   al,al
c00100bd:	74 08                	je     c00100c7 <LogicalDisk::mount()+0x3d>
c00100bf:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00100c5:	eb 07                	jmp    c00100ce <LogicalDisk::mount()+0x44>
c00100c7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00100ca:	eb d5                	jmp    c00100a1 <LogicalDisk::mount()+0x17>
c00100cc:	31 c0                	xor    eax,eax
c00100ce:	5a                   	pop    edx
c00100cf:	5b                   	pop    ebx
c00100d0:	5e                   	pop    esi
c00100d1:	c3                   	ret    

c00100d2 <LogicalDisk::unmount()>:
c00100d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100d6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00100e0:	c3                   	ret    
c00100e1:	90                   	nop

c00100e2 <LogicalDisk::eject()>:
c00100e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100e6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00100ec:	8b 10                	mov    edx,DWORD PTR [eax]
c00100ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00100f2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00100f5:	90                   	nop

c00100f6 <LogicalDisk::unassignDriveLetter()>:
c00100f6:	57                   	push   edi
c00100f7:	56                   	push   esi
c00100f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100fc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010103:	84 c9                	test   cl,cl
c0010105:	75 0f                	jne    c0010116 <LogicalDisk::unassignDriveLetter()+0x20>
c0010107:	c7 44 24 0c 88 38 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023888
c001010f:	5e                   	pop    esi
c0010110:	5f                   	pop    edi
c0010111:	e9 f3 41 00 00       	jmp    c0014309 <Krnl::panic(char const*)>
c0010116:	83 e9 41             	sub    ecx,0x41
c0010119:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010120:	b8 01 00 00 00       	mov    eax,0x1
c0010125:	c7 04 8d 20 6a 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd95e0],0x0
c0010130:	d3 e0                	shl    eax,cl
c0010132:	89 c7                	mov    edi,eax
c0010134:	f7 d0                	not    eax
c0010136:	c1 ff 1f             	sar    edi,0x1f
c0010139:	21 05 00 6a 02 c0    	and    DWORD PTR ds:0xc0026a00,eax
c001013f:	89 fe                	mov    esi,edi
c0010141:	f7 d6                	not    esi
c0010143:	21 35 04 6a 02 c0    	and    DWORD PTR ds:0xc0026a04,esi
c0010149:	5e                   	pop    esi
c001014a:	5f                   	pop    edi
c001014b:	c3                   	ret    

c001014c <LogicalDisk::read(unsigned long long, int, void*)>:
c001014c:	57                   	push   edi
c001014d:	56                   	push   esi
c001014e:	53                   	push   ebx
c001014f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010153:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010157:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001015b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001015f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010165:	77 41                	ja     c00101a8 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0010167:	99                   	cdq    
c0010168:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001016e:	01 c8                	add    eax,ecx
c0010170:	11 da                	adc    edx,ebx
c0010172:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010178:	19 d7                	sbb    edi,edx
c001017a:	72 33                	jb     c00101af <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001017c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010182:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010188:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001018c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010190:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010196:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001019c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00101a0:	5b                   	pop    ebx
c00101a1:	5e                   	pop    esi
c00101a2:	5f                   	pop    edi
c00101a3:	e9 54 0b 00 00       	jmp    c0010cfc <VCache::read(unsigned long long, int, void*)>
c00101a8:	b8 05 00 00 00       	mov    eax,0x5
c00101ad:	eb 05                	jmp    c00101b4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00101af:	b8 07 00 00 00       	mov    eax,0x7
c00101b4:	5b                   	pop    ebx
c00101b5:	5e                   	pop    esi
c00101b6:	5f                   	pop    edi
c00101b7:	c3                   	ret    

c00101b8 <LogicalDisk::write(unsigned long long, int, void*)>:
c00101b8:	57                   	push   edi
c00101b9:	56                   	push   esi
c00101ba:	53                   	push   ebx
c00101bb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00101c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101cb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00101d1:	77 41                	ja     c0010214 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00101d3:	99                   	cdq    
c00101d4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00101da:	01 c8                	add    eax,ecx
c00101dc:	11 da                	adc    edx,ebx
c00101de:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00101e4:	19 d7                	sbb    edi,edx
c00101e6:	72 33                	jb     c001021b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00101e8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00101ee:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00101f4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00101f8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00101fc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010202:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001020c:	5b                   	pop    ebx
c001020d:	5e                   	pop    esi
c001020e:	5f                   	pop    edi
c001020f:	e9 a4 09 00 00       	jmp    c0010bb8 <VCache::write(unsigned long long, int, void*)>
c0010214:	b8 05 00 00 00       	mov    eax,0x5
c0010219:	eb 05                	jmp    c0010220 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001021b:	b8 07 00 00 00       	mov    eax,0x7
c0010220:	5b                   	pop    ebx
c0010221:	5e                   	pop    esi
c0010222:	5f                   	pop    edi
c0010223:	c3                   	ret    

c0010224 <Mouse::Mouse(char const*)>:
c0010224:	83 ec 0c             	sub    esp,0xc
c0010227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001022b:	83 ec 08             	sub    esp,0x8
c001022e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010232:	50                   	push   eax
c0010233:	e8 42 de ff ff       	call   c000e07a <Device::Device(char const*)>
c0010238:	83 c4 10             	add    esp,0x10
c001023b:	ba dc 38 02 c0       	mov    edx,0xc00238dc
c0010240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010244:	89 10                	mov    DWORD PTR [eax],edx
c0010246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001024a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010254:	90                   	nop
c0010255:	83 c4 0c             	add    esp,0xc
c0010258:	c3                   	ret    
c0010259:	90                   	nop
c001025a:	66 90                	xchg   ax,ax

c001025c <Mouse::~Mouse()>:
c001025c:	83 ec 0c             	sub    esp,0xc
c001025f:	ba dc 38 02 c0       	mov    edx,0xc00238dc
c0010264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010268:	89 10                	mov    DWORD PTR [eax],edx
c001026a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001026e:	83 ec 0c             	sub    esp,0xc
c0010271:	50                   	push   eax
c0010272:	e8 cd da ff ff       	call   c000dd44 <Device::~Device()>
c0010277:	83 c4 10             	add    esp,0x10
c001027a:	90                   	nop
c001027b:	83 c4 0c             	add    esp,0xc
c001027e:	c3                   	ret    
c001027f:	90                   	nop

c0010280 <Mouse::~Mouse()>:
c0010280:	83 ec 0c             	sub    esp,0xc
c0010283:	83 ec 0c             	sub    esp,0xc
c0010286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001028a:	e8 cd ff ff ff       	call   c001025c <Mouse::~Mouse()>
c001028f:	83 c4 10             	add    esp,0x10
c0010292:	83 ec 08             	sub    esp,0x8
c0010295:	68 58 01 00 00       	push   0x158
c001029a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001029e:	e8 a4 c6 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c00102a3:	83 c4 10             	add    esp,0x10
c00102a6:	83 c4 0c             	add    esp,0xc
c00102a9:	c3                   	ret    

c00102aa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00102aa:	55                   	push   ebp
c00102ab:	57                   	push   edi
c00102ac:	56                   	push   esi
c00102ad:	53                   	push   ebx
c00102ae:	81 ec 28 01 00 00    	sub    esp,0x128
c00102b4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00102bb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00102c2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00102c9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00102d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00102d4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00102d8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00102df:	e8 92 de ff ff       	call   c000e176 <Device::getName()>
c00102e4:	5a                   	pop    edx
c00102e5:	59                   	pop    ecx
c00102e6:	50                   	push   eax
c00102e7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00102eb:	55                   	push   ebp
c00102ec:	e8 4f 04 ff ff       	call   c0000740 <strcpy>
c00102f1:	5b                   	pop    ebx
c00102f2:	58                   	pop    eax
c00102f3:	68 00 39 02 c0       	push   0xc0023900
c00102f8:	55                   	push   ebp
c00102f9:	e8 82 05 ff ff       	call   c0000880 <strcat>
c00102fe:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010305:	e8 b9 96 ff ff       	call   c00099c3 <malloc>
c001030a:	83 c4 0c             	add    esp,0xc
c001030d:	89 c3                	mov    ebx,eax
c001030f:	57                   	push   edi
c0010310:	56                   	push   esi
c0010311:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010315:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010319:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010320:	55                   	push   ebp
c0010321:	50                   	push   eax
c0010322:	e8 f7 fb ff ff       	call   c000ff1e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010327:	83 c4 14             	add    esp,0x14
c001032a:	53                   	push   ebx
c001032b:	e8 a4 fc ff ff       	call   c000ffd4 <LogicalDisk::assignDriveLetter()>
c0010330:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010333:	e8 52 fd ff ff       	call   c001008a <LogicalDisk::mount()>
c0010338:	58                   	pop    eax
c0010339:	5a                   	pop    edx
c001033a:	53                   	push   ebx
c001033b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010342:	e8 2f db ff ff       	call   c000de76 <Device::addChild(Device*)>
c0010347:	81 c4 2c 01 00 00    	add    esp,0x12c
c001034d:	5b                   	pop    ebx
c001034e:	5e                   	pop    esi
c001034f:	5f                   	pop    edi
c0010350:	5d                   	pop    ebp
c0010351:	c3                   	ret    

c0010352 <createPartitionsForDisk(PhysicalDisk*)>:
c0010352:	55                   	push   ebp
c0010353:	57                   	push   edi
c0010354:	56                   	push   esi
c0010355:	53                   	push   ebx
c0010356:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001035c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010363:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010369:	3d 00 02 00 00       	cmp    eax,0x200
c001036e:	74 27                	je     c0010397 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010370:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010376:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001037c:	83 ec 10             	sub    esp,0x10
c001037f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010383:	99                   	cdq    
c0010384:	c1 e6 0a             	shl    esi,0xa
c0010387:	52                   	push   edx
c0010388:	89 fd                	mov    ebp,edi
c001038a:	50                   	push   eax
c001038b:	55                   	push   ebp
c001038c:	56                   	push   esi
c001038d:	e8 02 0c 01 00       	call   c0020f94 <__udivdi3>
c0010392:	e9 b1 00 00 00       	jmp    c0010448 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010397:	83 ec 0c             	sub    esp,0xc
c001039a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001039c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00103a0:	56                   	push   esi
c00103a1:	6a 01                	push   0x1
c00103a3:	6a 00                	push   0x0
c00103a5:	6a 00                	push   0x0
c00103a7:	53                   	push   ebx
c00103a8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00103ab:	83 c4 20             	add    esp,0x20
c00103ae:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00103b6:	75 0a                	jne    c00103c2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00103b8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00103c0:	74 2c                	je     c00103ee <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00103c2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00103c8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00103ce:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00103d4:	83 ec 10             	sub    esp,0x10
c00103d7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00103db:	89 f7                	mov    edi,esi
c00103dd:	c1 e0 0a             	shl    eax,0xa
c00103e0:	c1 ff 1f             	sar    edi,0x1f
c00103e3:	57                   	push   edi
c00103e4:	56                   	push   esi
c00103e5:	52                   	push   edx
c00103e6:	50                   	push   eax
c00103e7:	e8 a8 0b 01 00       	call   c0020f94 <__udivdi3>
c00103ec:	eb 5a                	jmp    c0010448 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00103ee:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00103f5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00103fc:	83 e1 7f             	and    ecx,0x7f
c00103ff:	83 e0 7f             	and    eax,0x7f
c0010402:	01 c1                	add    ecx,eax
c0010404:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001040b:	83 e0 7f             	and    eax,0x7f
c001040e:	01 c1                	add    ecx,eax
c0010410:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010417:	83 e0 7f             	and    eax,0x7f
c001041a:	00 c1                	add    cl,al
c001041c:	74 41                	je     c001045f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001041e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010424:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001042a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010430:	83 ec 10             	sub    esp,0x10
c0010433:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010437:	89 f7                	mov    edi,esi
c0010439:	c1 e0 0a             	shl    eax,0xa
c001043c:	c1 ff 1f             	sar    edi,0x1f
c001043f:	57                   	push   edi
c0010440:	56                   	push   esi
c0010441:	52                   	push   edx
c0010442:	50                   	push   eax
c0010443:	e8 4c 0b 01 00       	call   c0020f94 <__udivdi3>
c0010448:	83 c4 14             	add    esp,0x14
c001044b:	52                   	push   edx
c001044c:	50                   	push   eax
c001044d:	6a 00                	push   0x0
c001044f:	6a 00                	push   0x0
c0010451:	53                   	push   ebx
c0010452:	e8 53 fe ff ff       	call   c00102aa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010457:	83 c4 20             	add    esp,0x20
c001045a:	e9 79 01 00 00       	jmp    c00105d8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001045f:	89 f0                	mov    eax,esi
c0010461:	31 f6                	xor    esi,esi
c0010463:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001046a:	75 02                	jne    c001046e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001046c:	89 f1                	mov    ecx,esi
c001046e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010475:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001047c:	c1 e2 08             	shl    edx,0x8
c001047f:	c1 e7 10             	shl    edi,0x10
c0010482:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001048a:	09 fa                	or     edx,edi
c001048c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010494:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001049b:	83 c0 10             	add    eax,0x10
c001049e:	09 fa                	or     edx,edi
c00104a0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00104a7:	c1 e7 18             	shl    edi,0x18
c00104aa:	09 fa                	or     edx,edi
c00104ac:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00104b3:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00104b7:	c1 e7 10             	shl    edi,0x10
c00104ba:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00104c1:	c1 e2 08             	shl    edx,0x8
c00104c4:	09 fa                	or     edx,edi
c00104c6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00104cd:	09 fa                	or     edx,edi
c00104cf:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00104d6:	c1 e7 18             	shl    edi,0x18
c00104d9:	09 fa                	or     edx,edi
c00104db:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00104df:	46                   	inc    esi
c00104e0:	83 fe 04             	cmp    esi,0x4
c00104e3:	0f 85 7a ff ff ff    	jne    c0010463 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00104e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ed:	83 f0 01             	xor    eax,0x1
c00104f0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00104f4:	75 57                	jne    c001054d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00104f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104fa:	83 f0 01             	xor    eax,0x1
c00104fd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010501:	75 4a                	jne    c001054d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010503:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010507:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001050f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010517:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001051d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010523:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010529:	0f a4 c2 0a          	shld   edx,eax,0xa
c001052d:	89 f7                	mov    edi,esi
c001052f:	c1 e0 0a             	shl    eax,0xa
c0010532:	c1 ff 1f             	sar    edi,0x1f
c0010535:	57                   	push   edi
c0010536:	56                   	push   esi
c0010537:	52                   	push   edx
c0010538:	50                   	push   eax
c0010539:	e8 56 0a 01 00       	call   c0020f94 <__udivdi3>
c001053e:	83 c4 10             	add    esp,0x10
c0010541:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010545:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010549:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001054d:	84 c9                	test   cl,cl
c001054f:	74 53                	je     c00105a4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010551:	0f b6 c9             	movzx  ecx,cl
c0010554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010558:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001055c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010560:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010564:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010568:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001056c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010570:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010574:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010578:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001057c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010580:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010584:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010588:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001058c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010590:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010594:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010598:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001059c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00105a0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00105a4:	31 ed                	xor    ebp,ebp
c00105a6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00105aa:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00105ae:	89 f8                	mov    eax,edi
c00105b0:	09 f0                	or     eax,esi
c00105b2:	74 1e                	je     c00105d2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00105b4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00105b8:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00105bc:	89 d1                	mov    ecx,edx
c00105be:	09 c1                	or     ecx,eax
c00105c0:	74 10                	je     c00105d2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00105c2:	83 ec 0c             	sub    esp,0xc
c00105c5:	57                   	push   edi
c00105c6:	56                   	push   esi
c00105c7:	52                   	push   edx
c00105c8:	50                   	push   eax
c00105c9:	53                   	push   ebx
c00105ca:	e8 db fc ff ff       	call   c00102aa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00105cf:	83 c4 20             	add    esp,0x20
c00105d2:	45                   	inc    ebp
c00105d3:	83 fd 04             	cmp    ebp,0x4
c00105d6:	75 ce                	jne    c00105a6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00105d8:	81 c4 5c 02 00 00    	add    esp,0x25c
c00105de:	5b                   	pop    ebx
c00105df:	5e                   	pop    esi
c00105e0:	5f                   	pop    edi
c00105e1:	5d                   	pop    ebp
c00105e2:	c3                   	ret    
c00105e3:	90                   	nop

c00105e4 <Serial::Serial(char const*)>:
c00105e4:	83 ec 0c             	sub    esp,0xc
c00105e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105eb:	83 ec 08             	sub    esp,0x8
c00105ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105f2:	50                   	push   eax
c00105f3:	e8 82 da ff ff       	call   c000e07a <Device::Device(char const*)>
c00105f8:	83 c4 10             	add    esp,0x10
c00105fb:	ba 14 39 02 c0       	mov    edx,0xc0023914
c0010600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010604:	89 10                	mov    DWORD PTR [eax],edx
c0010606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001060a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010614:	90                   	nop
c0010615:	83 c4 0c             	add    esp,0xc
c0010618:	c3                   	ret    
c0010619:	90                   	nop
c001061a:	66 90                	xchg   ax,ax

c001061c <Serial::~Serial()>:
c001061c:	83 ec 0c             	sub    esp,0xc
c001061f:	ba 14 39 02 c0       	mov    edx,0xc0023914
c0010624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010628:	89 10                	mov    DWORD PTR [eax],edx
c001062a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001062e:	83 ec 0c             	sub    esp,0xc
c0010631:	50                   	push   eax
c0010632:	e8 0d d7 ff ff       	call   c000dd44 <Device::~Device()>
c0010637:	83 c4 10             	add    esp,0x10
c001063a:	90                   	nop
c001063b:	83 c4 0c             	add    esp,0xc
c001063e:	c3                   	ret    
c001063f:	90                   	nop

c0010640 <Serial::~Serial()>:
c0010640:	83 ec 0c             	sub    esp,0xc
c0010643:	83 ec 0c             	sub    esp,0xc
c0010646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001064a:	e8 cd ff ff ff       	call   c001061c <Serial::~Serial()>
c001064f:	83 c4 10             	add    esp,0x10
c0010652:	83 ec 08             	sub    esp,0x8
c0010655:	68 58 01 00 00       	push   0x158
c001065a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001065e:	e8 e4 c2 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0010663:	83 c4 10             	add    esp,0x10
c0010666:	83 c4 0c             	add    esp,0xc
c0010669:	c3                   	ret    
c001066a:	66 90                	xchg   ax,ax

c001066c <Timer::Timer(char const*)>:
c001066c:	83 ec 0c             	sub    esp,0xc
c001066f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010673:	83 ec 08             	sub    esp,0x8
c0010676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001067a:	50                   	push   eax
c001067b:	e8 fa d9 ff ff       	call   c000e07a <Device::Device(char const*)>
c0010680:	83 c4 10             	add    esp,0x10
c0010683:	ba 58 39 02 c0       	mov    edx,0xc0023958
c0010688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001068c:	89 10                	mov    DWORD PTR [eax],edx
c001068e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010692:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001069c:	90                   	nop
c001069d:	83 c4 0c             	add    esp,0xc
c00106a0:	c3                   	ret    
c00106a1:	90                   	nop
c00106a2:	66 90                	xchg   ax,ax

c00106a4 <Timer::~Timer()>:
c00106a4:	83 ec 0c             	sub    esp,0xc
c00106a7:	ba 58 39 02 c0       	mov    edx,0xc0023958
c00106ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106b0:	89 10                	mov    DWORD PTR [eax],edx
c00106b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106b6:	83 ec 0c             	sub    esp,0xc
c00106b9:	50                   	push   eax
c00106ba:	e8 85 d6 ff ff       	call   c000dd44 <Device::~Device()>
c00106bf:	83 c4 10             	add    esp,0x10
c00106c2:	90                   	nop
c00106c3:	83 c4 0c             	add    esp,0xc
c00106c6:	c3                   	ret    
c00106c7:	90                   	nop

c00106c8 <Timer::~Timer()>:
c00106c8:	83 ec 0c             	sub    esp,0xc
c00106cb:	83 ec 0c             	sub    esp,0xc
c00106ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106d2:	e8 cd ff ff ff       	call   c00106a4 <Timer::~Timer()>
c00106d7:	83 c4 10             	add    esp,0x10
c00106da:	83 ec 08             	sub    esp,0x8
c00106dd:	68 5c 01 00 00       	push   0x15c
c00106e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106e6:	e8 5c c2 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c00106eb:	83 c4 10             	add    esp,0x10
c00106ee:	83 c4 0c             	add    esp,0xc
c00106f1:	c3                   	ret    

c00106f2 <Timer::read()>:
c00106f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00106fc:	c3                   	ret    

c00106fd <timerHandler(unsigned long long)>:
c00106fd:	55                   	push   ebp
c00106fe:	57                   	push   edi
c00106ff:	56                   	push   esi
c0010700:	53                   	push   ebx
c0010701:	83 ec 0c             	sub    esp,0xc
c0010704:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010708:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001070c:	01 35 90 6a 02 c0    	add    DWORD PTR ds:0xc0026a90,esi
c0010712:	11 3d 94 6a 02 c0    	adc    DWORD PTR ds:0xc0026a94,edi
c0010718:	80 3d 2d 64 02 c0 00 	cmp    BYTE PTR ds:0xc002642d,0x0
c001071f:	0f 84 4f 01 00 00    	je     c0010874 <timerHandler(unsigned long long)+0x177>
c0010725:	fa                   	cli    
c0010726:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c001072c:	83 ec 0c             	sub    esp,0xc
c001072f:	ff 05 24 79 02 c0    	inc    DWORD PTR ds:0xc0027924
c0010735:	68 38 79 02 c0       	push   0xc0027938
c001073a:	e8 25 0e 01 00       	call   c0021564 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001073f:	83 c4 10             	add    esp,0x10
c0010742:	84 c0                	test   al,al
c0010744:	0f 85 a6 00 00 00    	jne    c00107f0 <timerHandler(unsigned long long)+0xf3>
c001074a:	83 ec 0c             	sub    esp,0xc
c001074d:	68 38 79 02 c0       	push   0xc0027938
c0010752:	e8 29 0e 01 00       	call   c0021580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010757:	83 c4 10             	add    esp,0x10
c001075a:	89 c3                	mov    ebx,eax
c001075c:	83 ec 0c             	sub    esp,0xc
c001075f:	68 38 79 02 c0       	push   0xc0027938
c0010764:	e8 17 0e 01 00       	call   c0021580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010769:	c7 04 24 38 79 02 c0 	mov    DWORD PTR [esp],0xc0027938
c0010770:	89 c5                	mov    ebp,eax
c0010772:	e8 11 0e 01 00       	call   c0021588 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010777:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001077a:	83 c4 10             	add    esp,0x10
c001077d:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0010780:	39 15 90 6a 02 c0    	cmp    DWORD PTR ds:0xc0026a90,edx
c0010786:	a1 94 6a 02 c0       	mov    eax,ds:0xc0026a94
c001078b:	19 c8                	sbb    eax,ecx
c001078d:	72 21                	jb     c00107b0 <timerHandler(unsigned long long)+0xb3>
c001078f:	83 ec 0c             	sub    esp,0xc
c0010792:	55                   	push   ebp
c0010793:	e8 3c 7c 00 00       	call   c00183d4 <unblockTask(ThreadControlBlock*)>
c0010798:	83 c4 10             	add    esp,0x10
c001079b:	39 eb                	cmp    ebx,ebp
c001079d:	75 25                	jne    c00107c4 <timerHandler(unsigned long long)+0xc7>
c001079f:	83 ec 0c             	sub    esp,0xc
c00107a2:	68 38 79 02 c0       	push   0xc0027938
c00107a7:	e8 d4 0d 01 00       	call   c0021580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00107ac:	89 c3                	mov    ebx,eax
c00107ae:	eb 10                	jmp    c00107c0 <timerHandler(unsigned long long)+0xc3>
c00107b0:	50                   	push   eax
c00107b1:	50                   	push   eax
c00107b2:	55                   	push   ebp
c00107b3:	68 38 79 02 c0       	push   0xc0027938
c00107b8:	e8 83 0e 01 00       	call   c0021640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00107bd:	8d 76 00             	lea    esi,[esi+0x0]
c00107c0:	83 c4 10             	add    esp,0x10
c00107c3:	90                   	nop
c00107c4:	83 ec 0c             	sub    esp,0xc
c00107c7:	68 38 79 02 c0       	push   0xc0027938
c00107cc:	e8 93 0d 01 00       	call   c0021564 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00107d1:	83 c4 10             	add    esp,0x10
c00107d4:	84 c0                	test   al,al
c00107d6:	75 18                	jne    c00107f0 <timerHandler(unsigned long long)+0xf3>
c00107d8:	83 ec 0c             	sub    esp,0xc
c00107db:	68 38 79 02 c0       	push   0xc0027938
c00107e0:	e8 9b 0d 01 00       	call   c0021580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00107e5:	83 c4 10             	add    esp,0x10
c00107e8:	39 d8                	cmp    eax,ebx
c00107ea:	0f 85 6c ff ff ff    	jne    c001075c <timerHandler(unsigned long long)+0x5f>
c00107f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107f5:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00107f9:	74 41                	je     c001083c <timerHandler(unsigned long long)+0x13f>
c00107fb:	80 3d 2c 64 02 c0 00 	cmp    BYTE PTR ds:0xc002642c,0x0
c0010802:	74 38                	je     c001083c <timerHandler(unsigned long long)+0x13f>
c0010804:	fa                   	cli    
c0010805:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c001080b:	31 d2                	xor    edx,edx
c001080d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010812:	89 f9                	mov    ecx,edi
c0010814:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0010817:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001081c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001081f:	39 c6                	cmp    esi,eax
c0010821:	19 d1                	sbb    ecx,edx
c0010823:	72 07                	jb     c001082c <timerHandler(unsigned long long)+0x12f>
c0010825:	e8 d2 76 00 00       	call   c0017efc <schedule()>
c001082a:	66 90                	xchg   ax,ax
c001082c:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0010831:	48                   	dec    eax
c0010832:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0010837:	75 03                	jne    c001083c <timerHandler(unsigned long long)+0x13f>
c0010839:	fb                   	sti    
c001083a:	66 90                	xchg   ax,ax
c001083c:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c0010841:	48                   	dec    eax
c0010842:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c0010847:	75 1b                	jne    c0010864 <timerHandler(unsigned long long)+0x167>
c0010849:	83 3d 20 79 02 c0 00 	cmp    DWORD PTR ds:0xc0027920,0x0
c0010850:	74 12                	je     c0010864 <timerHandler(unsigned long long)+0x167>
c0010852:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c001085c:	e8 9b 76 00 00       	call   c0017efc <schedule()>
c0010861:	8d 76 00             	lea    esi,[esi+0x0]
c0010864:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0010869:	48                   	dec    eax
c001086a:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c001086f:	75 03                	jne    c0010874 <timerHandler(unsigned long long)+0x177>
c0010871:	fb                   	sti    
c0010872:	66 90                	xchg   ax,ax
c0010874:	83 c4 0c             	add    esp,0xc
c0010877:	5b                   	pop    ebx
c0010878:	5e                   	pop    esi
c0010879:	5f                   	pop    edi
c001087a:	5d                   	pop    ebp
c001087b:	c3                   	ret    

c001087c <setupTimer(int)>:
c001087c:	57                   	push   edi
c001087d:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0010882:	56                   	push   esi
c0010883:	53                   	push   ebx
c0010884:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010888:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001088e:	83 ec 0c             	sub    esp,0xc
c0010891:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010897:	e8 da d8 ff ff       	call   c000e176 <Device::getName()>
c001089c:	83 c4 10             	add    esp,0x10
c001089f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00108a2:	0f 85 94 00 00 00    	jne    c001093c <setupTimer(int)+0xc0>
c00108a8:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c00108ad:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00108b4:	0f 84 82 00 00 00    	je     c001093c <setupTimer(int)+0xc0>
c00108ba:	83 ec 0c             	sub    esp,0xc
c00108bd:	68 5c 01 00 00       	push   0x15c
c00108c2:	e8 fc 90 ff ff       	call   c00099c3 <malloc>
c00108c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00108ca:	89 c3                	mov    ebx,eax
c00108cc:	e8 97 02 01 00       	call   c0020b68 <PIT::PIT()>
c00108d1:	59                   	pop    ecx
c00108d2:	5f                   	pop    edi
c00108d3:	53                   	push   ebx
c00108d4:	ff 35 28 64 02 c0    	push   DWORD PTR ds:0xc0026428
c00108da:	e8 97 d5 ff ff       	call   c000de76 <Device::addChild(Device*)>
c00108df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00108e1:	6a 00                	push   0x0
c00108e3:	6a 00                	push   0x0
c00108e5:	56                   	push   esi
c00108e6:	53                   	push   ebx
c00108e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00108ea:	83 c4 14             	add    esp,0x14
c00108ed:	68 60 01 00 00       	push   0x160
c00108f2:	e8 cc 90 ff ff       	call   c00099c3 <malloc>
c00108f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00108fa:	89 c7                	mov    edi,eax
c00108fc:	e8 13 01 01 00       	call   c0020a14 <APICTimer::APICTimer()>
c0010901:	6a 00                	push   0x0
c0010903:	6a 00                	push   0x0
c0010905:	56                   	push   esi
c0010906:	57                   	push   edi
c0010907:	e8 08 00 01 00       	call   c0020914 <APICTimer::open(int, int, void*)>
c001090c:	83 c4 20             	add    esp,0x20
c001090f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010911:	6a 00                	push   0x0
c0010913:	6a 00                	push   0x0
c0010915:	6a 00                	push   0x0
c0010917:	53                   	push   ebx
c0010918:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001091b:	58                   	pop    eax
c001091c:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0010921:	5a                   	pop    edx
c0010922:	57                   	push   edi
c0010923:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010929:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001092f:	e8 42 d5 ff ff       	call   c000de76 <Device::addChild(Device*)>
c0010934:	83 c4 10             	add    esp,0x10
c0010937:	eb 37                	jmp    c0010970 <setupTimer(int)+0xf4>
c0010939:	8d 76 00             	lea    esi,[esi+0x0]
c001093c:	83 ec 0c             	sub    esp,0xc
c001093f:	68 5c 01 00 00       	push   0x15c
c0010944:	e8 7a 90 ff ff       	call   c00099c3 <malloc>
c0010949:	89 04 24             	mov    DWORD PTR [esp],eax
c001094c:	89 c3                	mov    ebx,eax
c001094e:	e8 15 02 01 00       	call   c0020b68 <PIT::PIT()>
c0010953:	58                   	pop    eax
c0010954:	5a                   	pop    edx
c0010955:	53                   	push   ebx
c0010956:	ff 35 28 64 02 c0    	push   DWORD PTR ds:0xc0026428
c001095c:	e8 15 d5 ff ff       	call   c000de76 <Device::addChild(Device*)>
c0010961:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010963:	6a 00                	push   0x0
c0010965:	6a 00                	push   0x0
c0010967:	56                   	push   esi
c0010968:	53                   	push   ebx
c0010969:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001096c:	83 c4 20             	add    esp,0x20
c001096f:	90                   	nop
c0010970:	89 d8                	mov    eax,ebx
c0010972:	5b                   	pop    ebx
c0010973:	5e                   	pop    esi
c0010974:	5f                   	pop    edi
c0010975:	c3                   	ret    
c0010976:	66 90                	xchg   ax,ax

c0010978 <VCache::VCache(PhysicalDisk*)>:
c0010978:	53                   	push   ebx
c0010979:	83 ec 18             	sub    esp,0x18
c001097c:	ba a8 3a 02 c0       	mov    edx,0xc0023aa8
c0010981:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010985:	89 10                	mov    DWORD PTR [eax],edx
c0010987:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001098b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010992:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010996:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001099d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109a1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00109a8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00109af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109b3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00109ba:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00109c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109c5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00109cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109d0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00109d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109d8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00109df:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00109e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109ea:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00109ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109f2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00109f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109fa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00109fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a02:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010a09:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010a11:	83 ec 0c             	sub    esp,0xc
c0010a14:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010a18:	e8 a6 8f ff ff       	call   c00099c3 <malloc>
c0010a1d:	83 c4 10             	add    esp,0x10
c0010a20:	89 c3                	mov    ebx,eax
c0010a22:	83 ec 0c             	sub    esp,0xc
c0010a25:	53                   	push   ebx
c0010a26:	e8 8d 72 00 00       	call   c0017cb8 <Mutex::Mutex()>
c0010a2b:	83 c4 10             	add    esp,0x10
c0010a2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a32:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010a35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a39:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010a3d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010a40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a44:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010a4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a4f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010a55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a59:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010a5c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a60:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010a66:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010a6c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010a70:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010a73:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010a76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a7a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010a7e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a82:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010a88:	05 00 01 00 00       	add    eax,0x100
c0010a8d:	c1 e0 04             	shl    eax,0x4
c0010a90:	83 ec 0c             	sub    esp,0xc
c0010a93:	50                   	push   eax
c0010a94:	e8 2a 8f ff ff       	call   c00099c3 <malloc>
c0010a99:	83 c4 10             	add    esp,0x10
c0010a9c:	89 c2                	mov    edx,eax
c0010a9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010aa2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010aa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010aa9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010ab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ab4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010ab8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010abc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010ac2:	c1 e0 07             	shl    eax,0x7
c0010ac5:	83 ec 0c             	sub    esp,0xc
c0010ac8:	50                   	push   eax
c0010ac9:	e8 f5 8e ff ff       	call   c00099c3 <malloc>
c0010ace:	83 c4 10             	add    esp,0x10
c0010ad1:	89 c2                	mov    edx,eax
c0010ad3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ad7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010ada:	90                   	nop
c0010adb:	83 c4 18             	add    esp,0x18
c0010ade:	5b                   	pop    ebx
c0010adf:	c3                   	ret    

c0010ae0 <VCache::invalidateReadBuffer()>:
c0010ae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ae4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010aea:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010aee:	c3                   	ret    
c0010aef:	90                   	nop

c0010af0 <VCache::writeWriteBuffer()>:
c0010af0:	53                   	push   ebx
c0010af1:	83 ec 0c             	sub    esp,0xc
c0010af4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010af8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010afb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010afe:	68 80 39 02 c0       	push   0xc0023980
c0010b03:	e8 20 bf ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0010b08:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010b0b:	5a                   	pop    edx
c0010b0c:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b0e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010b11:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b14:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010b17:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010b1a:	50                   	push   eax
c0010b1b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010b1e:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010b25:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010b2c:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010b30:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010b37:	83 c4 28             	add    esp,0x28
c0010b3a:	5b                   	pop    ebx
c0010b3b:	c3                   	ret    

c0010b3c <VCache::~VCache()>:
c0010b3c:	83 ec 0c             	sub    esp,0xc
c0010b3f:	ba a8 3a 02 c0       	mov    edx,0xc0023aa8
c0010b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b48:	89 10                	mov    DWORD PTR [eax],edx
c0010b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010b51:	84 c0                	test   al,al
c0010b53:	74 0f                	je     c0010b64 <VCache::~VCache()+0x28>
c0010b55:	83 ec 0c             	sub    esp,0xc
c0010b58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b5c:	e8 8f ff ff ff       	call   c0010af0 <VCache::writeWriteBuffer()>
c0010b61:	83 c4 10             	add    esp,0x10
c0010b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b68:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010b6b:	83 ec 0c             	sub    esp,0xc
c0010b6e:	50                   	push   eax
c0010b6f:	e8 5f 8e ff ff       	call   c00099d3 <free>
c0010b74:	83 c4 10             	add    esp,0x10
c0010b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b7b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010b7e:	83 ec 0c             	sub    esp,0xc
c0010b81:	50                   	push   eax
c0010b82:	e8 4c 8e ff ff       	call   c00099d3 <free>
c0010b87:	83 c4 10             	add    esp,0x10
c0010b8a:	90                   	nop
c0010b8b:	83 c4 0c             	add    esp,0xc
c0010b8e:	c3                   	ret    
c0010b8f:	90                   	nop

c0010b90 <VCache::~VCache()>:
c0010b90:	83 ec 0c             	sub    esp,0xc
c0010b93:	83 ec 0c             	sub    esp,0xc
c0010b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b9a:	e8 9d ff ff ff       	call   c0010b3c <VCache::~VCache()>
c0010b9f:	83 c4 10             	add    esp,0x10
c0010ba2:	83 ec 08             	sub    esp,0x8
c0010ba5:	6a 44                	push   0x44
c0010ba7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bab:	e8 97 bd ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0010bb0:	83 c4 10             	add    esp,0x10
c0010bb3:	83 c4 0c             	add    esp,0xc
c0010bb6:	c3                   	ret    
c0010bb7:	90                   	nop

c0010bb8 <VCache::write(unsigned long long, int, void*)>:
c0010bb8:	55                   	push   ebp
c0010bb9:	31 c0                	xor    eax,eax
c0010bbb:	57                   	push   edi
c0010bbc:	56                   	push   esi
c0010bbd:	53                   	push   ebx
c0010bbe:	83 ec 0c             	sub    esp,0xc
c0010bc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010bc5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010bc9:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
c0010bcd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0010bd4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010bd8:	7d 16                	jge    c0010bf0 <VCache::write(unsigned long long, int, void*)+0x38>
c0010bda:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010bdd:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010be3:	0f af c8             	imul   ecx,eax
c0010be6:	89 ca                	mov    edx,ecx
c0010be8:	01 f2                	add    edx,esi
c0010bea:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010bec:	40                   	inc    eax
c0010bed:	eb e5                	jmp    c0010bd4 <VCache::write(unsigned long long, int, void*)+0x1c>
c0010bef:	90                   	nop
c0010bf0:	83 ec 0c             	sub    esp,0xc
c0010bf3:	68 a4 39 02 c0       	push   0xc00239a4
c0010bf8:	e8 2b be ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0010bfd:	83 c4 10             	add    esp,0x10
c0010c00:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010c04:	74 0e                	je     c0010c14 <VCache::write(unsigned long long, int, void*)+0x5c>
c0010c06:	83 ec 0c             	sub    esp,0xc
c0010c09:	53                   	push   ebx
c0010c0a:	e8 d1 fe ff ff       	call   c0010ae0 <VCache::invalidateReadBuffer()>
c0010c0f:	83 c4 10             	add    esp,0x10
c0010c12:	66 90                	xchg   ax,ax
c0010c14:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010c18:	74 66                	je     c0010c80 <VCache::write(unsigned long long, int, void*)+0xc8>
c0010c1a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c1d:	99                   	cdq    
c0010c1e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010c21:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010c24:	31 f8                	xor    eax,edi
c0010c26:	89 d1                	mov    ecx,edx
c0010c28:	89 ca                	mov    edx,ecx
c0010c2a:	31 ea                	xor    edx,ebp
c0010c2c:	09 d0                	or     eax,edx
c0010c2e:	75 44                	jne    c0010c74 <VCache::write(unsigned long long, int, void*)+0xbc>
c0010c30:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010c35:	75 3d                	jne    c0010c74 <VCache::write(unsigned long long, int, void*)+0xbc>
c0010c37:	83 ec 0c             	sub    esp,0xc
c0010c3a:	68 cb 39 02 c0       	push   0xc00239cb
c0010c3f:	e8 e4 bd ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0010c44:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010c47:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0010c4a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010c50:	0f af f9             	imul   edi,ecx
c0010c53:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010c56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c58:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c5b:	83 c4 10             	add    esp,0x10
c0010c5e:	40                   	inc    eax
c0010c5f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010c62:	83 c0 80             	add    eax,0xffffff80
c0010c65:	75 7d                	jne    c0010ce4 <VCache::write(unsigned long long, int, void*)+0x12c>
c0010c67:	83 ec 0c             	sub    esp,0xc
c0010c6a:	53                   	push   ebx
c0010c6b:	e8 80 fe ff ff       	call   c0010af0 <VCache::writeWriteBuffer()>
c0010c70:	eb 42                	jmp    c0010cb4 <VCache::write(unsigned long long, int, void*)+0xfc>
c0010c72:	66 90                	xchg   ax,ax
c0010c74:	83 ec 0c             	sub    esp,0xc
c0010c77:	53                   	push   ebx
c0010c78:	e8 73 fe ff ff       	call   c0010af0 <VCache::writeWriteBuffer()>
c0010c7d:	83 c4 10             	add    esp,0x10
c0010c80:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0010c85:	7f 35                	jg     c0010cbc <VCache::write(unsigned long long, int, void*)+0x104>
c0010c87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010c8b:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0010c8e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010c91:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c0010c94:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010c98:	52                   	push   edx
c0010c99:	56                   	push   esi
c0010c9a:	6a 01                	push   0x1
c0010c9c:	68 e1 39 02 c0       	push   0xc00239e1
c0010ca1:	e8 82 bd ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0010ca6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010ca9:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010cac:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010cb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cb4:	83 c4 10             	add    esp,0x10
c0010cb7:	eb 2b                	jmp    c0010ce4 <VCache::write(unsigned long long, int, void*)+0x12c>
c0010cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0010cbc:	50                   	push   eax
c0010cbd:	56                   	push   esi
c0010cbe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010cc2:	68 02 3a 02 c0       	push   0xc0023a02
c0010cc7:	e8 5c bd ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0010ccc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010ccf:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cd1:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cd4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010cd8:	55                   	push   ebp
c0010cd9:	57                   	push   edi
c0010cda:	50                   	push   eax
c0010cdb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010cde:	83 c4 20             	add    esp,0x20
c0010ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0010ce4:	83 ec 0c             	sub    esp,0xc
c0010ce7:	68 1f 3a 02 c0       	push   0xc0023a1f
c0010cec:	e8 37 bd ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0010cf1:	83 c4 1c             	add    esp,0x1c
c0010cf4:	31 c0                	xor    eax,eax
c0010cf6:	5b                   	pop    ebx
c0010cf7:	5e                   	pop    esi
c0010cf8:	5f                   	pop    edi
c0010cf9:	5d                   	pop    ebp
c0010cfa:	c3                   	ret    
c0010cfb:	90                   	nop

c0010cfc <VCache::read(unsigned long long, int, void*)>:
c0010cfc:	55                   	push   ebp
c0010cfd:	57                   	push   edi
c0010cfe:	56                   	push   esi
c0010cff:	53                   	push   ebx
c0010d00:	83 ec 1c             	sub    esp,0x1c
c0010d03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010d07:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010d0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d0e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d12:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010d16:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010d1a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0010d1e:	31 c0                	xor    eax,eax
c0010d20:	39 f0                	cmp    eax,esi
c0010d22:	7d 18                	jge    c0010d3c <VCache::read(unsigned long long, int, void*)+0x40>
c0010d24:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010d27:	8b ba 5c 01 00 00    	mov    edi,DWORD PTR [edx+0x15c]
c0010d2d:	0f af f8             	imul   edi,eax
c0010d30:	89 fa                	mov    edx,edi
c0010d32:	01 ea                	add    edx,ebp
c0010d34:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010d36:	40                   	inc    eax
c0010d37:	eb e7                	jmp    c0010d20 <VCache::read(unsigned long long, int, void*)+0x24>
c0010d39:	8d 76 00             	lea    esi,[esi+0x0]
c0010d3c:	83 ec 0c             	sub    esp,0xc
c0010d3f:	68 3f 3a 02 c0       	push   0xc0023a3f
c0010d44:	e8 df bc ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0010d49:	83 c4 10             	add    esp,0x10
c0010d4c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010d50:	74 0e                	je     c0010d60 <VCache::read(unsigned long long, int, void*)+0x64>
c0010d52:	83 ec 0c             	sub    esp,0xc
c0010d55:	53                   	push   ebx
c0010d56:	e8 95 fd ff ff       	call   c0010af0 <VCache::writeWriteBuffer()>
c0010d5b:	83 c4 10             	add    esp,0x10
c0010d5e:	66 90                	xchg   ax,ax
c0010d60:	83 fe 01             	cmp    esi,0x1
c0010d63:	75 7b                	jne    c0010de0 <VCache::read(unsigned long long, int, void*)+0xe4>
c0010d65:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d68:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010d6f:	75 6f                	jne    c0010de0 <VCache::read(unsigned long long, int, void*)+0xe4>
c0010d71:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0010d74:	89 d1                	mov    ecx,edx
c0010d76:	f7 d9                	neg    ecx
c0010d78:	89 cf                	mov    edi,ecx
c0010d7a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010d7e:	c1 ff 1f             	sar    edi,0x1f
c0010d81:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0010d84:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010d88:	89 ce                	mov    esi,ecx
c0010d8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010d8e:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0010d92:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010d96:	89 cf                	mov    edi,ecx
c0010d98:	74 0a                	je     c0010da4 <VCache::read(unsigned long long, int, void*)+0xa8>
c0010d9a:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0010d9d:	75 05                	jne    c0010da4 <VCache::read(unsigned long long, int, void*)+0xa8>
c0010d9f:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0010da2:	74 1c                	je     c0010dc0 <VCache::read(unsigned long long, int, void*)+0xc4>
c0010da4:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0010da8:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0010dab:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0010dae:	83 ec 0c             	sub    esp,0xc
c0010db1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0010db3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010db6:	52                   	push   edx
c0010db7:	57                   	push   edi
c0010db8:	56                   	push   esi
c0010db9:	50                   	push   eax
c0010dba:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0010dbd:	83 c4 20             	add    esp,0x20
c0010dc0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010dc3:	89 ef                	mov    edi,ebp
c0010dc5:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010dcb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0010dce:	8d 70 ff             	lea    esi,[eax-0x1]
c0010dd1:	23 34 24             	and    esi,DWORD PTR [esp]
c0010dd4:	0f af f1             	imul   esi,ecx
c0010dd7:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0010dda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ddc:	eb 32                	jmp    c0010e10 <VCache::read(unsigned long long, int, void*)+0x114>
c0010dde:	66 90                	xchg   ax,ax
c0010de0:	83 ec 0c             	sub    esp,0xc
c0010de3:	53                   	push   ebx
c0010de4:	e8 f7 fc ff ff       	call   c0010ae0 <VCache::invalidateReadBuffer()>
c0010de9:	83 c4 0c             	add    esp,0xc
c0010dec:	55                   	push   ebp
c0010ded:	56                   	push   esi
c0010dee:	68 65 3a 02 c0       	push   0xc0023a65
c0010df3:	e8 30 bc ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0010df8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010dfb:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dfd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010e00:	56                   	push   esi
c0010e01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e09:	50                   	push   eax
c0010e0a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0010e0d:	83 c4 20             	add    esp,0x20
c0010e10:	83 ec 0c             	sub    esp,0xc
c0010e13:	68 81 3a 02 c0       	push   0xc0023a81
c0010e18:	e8 0b bc ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0010e1d:	83 c4 2c             	add    esp,0x2c
c0010e20:	31 c0                	xor    eax,eax
c0010e22:	5b                   	pop    ebx
c0010e23:	5e                   	pop    esi
c0010e24:	5f                   	pop    edi
c0010e25:	5d                   	pop    ebp
c0010e26:	c3                   	ret    
c0010e27:	90                   	nop

c0010e28 <Video::putrect(int, int, int, int, unsigned int)>:
c0010e28:	55                   	push   ebp
c0010e29:	57                   	push   edi
c0010e2a:	56                   	push   esi
c0010e2b:	53                   	push   ebx
c0010e2c:	83 ec 1c             	sub    esp,0x1c
c0010e2f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010e33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010e37:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010e3b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010e3f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e47:	01 df                	add    edi,ebx
c0010e49:	39 fb                	cmp    ebx,edi
c0010e4b:	7d 1f                	jge    c0010e6c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0010e4d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010e51:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0010e55:	7d 12                	jge    c0010e69 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0010e57:	8b 16                	mov    edx,DWORD PTR [esi]
c0010e59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010e5d:	53                   	push   ebx
c0010e5e:	55                   	push   ebp
c0010e5f:	45                   	inc    ebp
c0010e60:	56                   	push   esi
c0010e61:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010e64:	83 c4 10             	add    esp,0x10
c0010e67:	eb e8                	jmp    c0010e51 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0010e69:	43                   	inc    ebx
c0010e6a:	eb dd                	jmp    c0010e49 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0010e6c:	83 c4 1c             	add    esp,0x1c
c0010e6f:	5b                   	pop    ebx
c0010e70:	5e                   	pop    esi
c0010e71:	5f                   	pop    edi
c0010e72:	5d                   	pop    ebp
c0010e73:	c3                   	ret    

c0010e74 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0010e74:	55                   	push   ebp
c0010e75:	57                   	push   edi
c0010e76:	31 ff                	xor    edi,edi
c0010e78:	56                   	push   esi
c0010e79:	53                   	push   ebx
c0010e7a:	83 ec 1c             	sub    esp,0x1c
c0010e7d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0010e81:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e85:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0010e8c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0010e91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e95:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010e99:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010e9d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0010ea0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010ea4:	01 f9                	add    ecx,edi
c0010ea6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0010eaa:	7d 2f                	jge    c0010edb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0010eac:	31 f6                	xor    esi,esi
c0010eae:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010eb2:	01 f2                	add    edx,esi
c0010eb4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0010eb8:	7d 1a                	jge    c0010ed4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0010eba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010ebd:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0010ec0:	46                   	inc    esi
c0010ec1:	51                   	push   ecx
c0010ec2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010ec6:	52                   	push   edx
c0010ec7:	55                   	push   ebp
c0010ec8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010ecb:	83 c4 10             	add    esp,0x10
c0010ece:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010ed2:	eb da                	jmp    c0010eae <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0010ed4:	47                   	inc    edi
c0010ed5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0010ed9:	eb c5                	jmp    c0010ea0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0010edb:	83 c4 1c             	add    esp,0x1c
c0010ede:	5b                   	pop    ebx
c0010edf:	5e                   	pop    esi
c0010ee0:	5f                   	pop    edi
c0010ee1:	5d                   	pop    ebp
c0010ee2:	c3                   	ret    
c0010ee3:	90                   	nop

c0010ee4 <Video::blit(unsigned int*, int, int, int, int)>:
c0010ee4:	55                   	push   ebp
c0010ee5:	57                   	push   edi
c0010ee6:	56                   	push   esi
c0010ee7:	53                   	push   ebx
c0010ee8:	83 ec 1c             	sub    esp,0x1c
c0010eeb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010eef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ef3:	85 c0                	test   eax,eax
c0010ef5:	79 02                	jns    c0010ef9 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0010ef7:	31 c0                	xor    eax,eax
c0010ef9:	c1 e0 02             	shl    eax,0x2
c0010efc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0010f00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010f08:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0010f0c:	39 d8                	cmp    eax,ebx
c0010f0e:	7e 49                	jle    c0010f59 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010f10:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010f16:	7c 41                	jl     c0010f59 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010f18:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010f1c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010f20:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010f24:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0010f28:	39 f9                	cmp    ecx,edi
c0010f2a:	7e 22                	jle    c0010f4e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0010f2c:	83 c5 04             	add    ebp,0x4
c0010f2f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010f35:	7c 14                	jl     c0010f4b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0010f37:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0010f39:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0010f3c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010f40:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010f44:	56                   	push   esi
c0010f45:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0010f48:	83 c4 10             	add    esp,0x10
c0010f4b:	47                   	inc    edi
c0010f4c:	eb d2                	jmp    c0010f20 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0010f4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f52:	43                   	inc    ebx
c0010f53:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010f57:	eb ab                	jmp    c0010f04 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0010f59:	83 c4 1c             	add    esp,0x1c
c0010f5c:	5b                   	pop    ebx
c0010f5d:	5e                   	pop    esi
c0010f5e:	5f                   	pop    edi
c0010f5f:	5d                   	pop    ebp
c0010f60:	c3                   	ret    
c0010f61:	90                   	nop

c0010f62 <Video::clearScreen(unsigned int)>:
c0010f62:	57                   	push   edi
c0010f63:	56                   	push   esi
c0010f64:	53                   	push   ebx
c0010f65:	31 db                	xor    ebx,ebx
c0010f67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f6b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010f71:	7e 1f                	jle    c0010f92 <Video::clearScreen(unsigned int)+0x30>
c0010f73:	31 ff                	xor    edi,edi
c0010f75:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010f7b:	7e 12                	jle    c0010f8f <Video::clearScreen(unsigned int)+0x2d>
c0010f7d:	8b 06                	mov    eax,DWORD PTR [esi]
c0010f7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f83:	53                   	push   ebx
c0010f84:	57                   	push   edi
c0010f85:	47                   	inc    edi
c0010f86:	56                   	push   esi
c0010f87:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010f8a:	83 c4 10             	add    esp,0x10
c0010f8d:	eb e6                	jmp    c0010f75 <Video::clearScreen(unsigned int)+0x13>
c0010f8f:	43                   	inc    ebx
c0010f90:	eb d9                	jmp    c0010f6b <Video::clearScreen(unsigned int)+0x9>
c0010f92:	5b                   	pop    ebx
c0010f93:	5e                   	pop    esi
c0010f94:	5f                   	pop    edi
c0010f95:	c3                   	ret    

c0010f96 <Video::putpixel(int, int, unsigned int)>:
c0010f96:	c7 44 24 04 b0 3a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023ab0
c0010f9e:	e9 66 33 00 00       	jmp    c0014309 <Krnl::panic(char const*)>
c0010fa3:	90                   	nop

c0010fa4 <Video::Video(char const*)>:
c0010fa4:	83 ec 0c             	sub    esp,0xc
c0010fa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fab:	83 ec 08             	sub    esp,0x8
c0010fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fb2:	50                   	push   eax
c0010fb3:	e8 c2 d0 ff ff       	call   c000e07a <Device::Device(char const*)>
c0010fb8:	83 c4 10             	add    esp,0x10
c0010fbb:	ba 20 3b 02 c0       	mov    edx,0xc0023b20
c0010fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc4:	89 10                	mov    DWORD PTR [eax],edx
c0010fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fca:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0010fd4:	90                   	nop
c0010fd5:	83 c4 0c             	add    esp,0xc
c0010fd8:	c3                   	ret    
c0010fd9:	90                   	nop

c0010fda <Video::~Video()>:
c0010fda:	83 ec 0c             	sub    esp,0xc
c0010fdd:	ba 20 3b 02 c0       	mov    edx,0xc0023b20
c0010fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe6:	89 10                	mov    DWORD PTR [eax],edx
c0010fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fec:	83 ec 0c             	sub    esp,0xc
c0010fef:	50                   	push   eax
c0010ff0:	e8 4f cd ff ff       	call   c000dd44 <Device::~Device()>
c0010ff5:	83 c4 10             	add    esp,0x10
c0010ff8:	90                   	nop
c0010ff9:	83 c4 0c             	add    esp,0xc
c0010ffc:	c3                   	ret    
c0010ffd:	90                   	nop

c0010ffe <Video::~Video()>:
c0010ffe:	83 ec 0c             	sub    esp,0xc
c0011001:	83 ec 0c             	sub    esp,0xc
c0011004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011008:	e8 cd ff ff ff       	call   c0010fda <Video::~Video()>
c001100d:	83 c4 10             	add    esp,0x10
c0011010:	83 ec 08             	sub    esp,0x8
c0011013:	68 64 01 00 00       	push   0x164
c0011018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001101c:	e8 26 b9 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0011021:	83 c4 10             	add    esp,0x10
c0011024:	83 c4 0c             	add    esp,0xc
c0011027:	c3                   	ret    

c0011028 <Video::isMonochrome()>:
c0011028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001102c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0011032:	c3                   	ret    
c0011033:	90                   	nop

c0011034 <Video::getWidth()>:
c0011034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011038:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001103e:	c3                   	ret    
c001103f:	90                   	nop

c0011040 <Video::getHeight()>:
c0011040:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011044:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001104a:	c3                   	ret    
c001104b:	90                   	nop

c001104c <Video::drawCursor(int, int, unsigned char*, int)>:
c001104c:	55                   	push   ebp
c001104d:	57                   	push   edi
c001104e:	56                   	push   esi
c001104f:	53                   	push   ebx
c0011050:	83 ec 2c             	sub    esp,0x2c
c0011053:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011057:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001105b:	83 f8 01             	cmp    eax,0x1
c001105e:	19 c9                	sbb    ecx,ecx
c0011060:	31 db                	xor    ebx,ebx
c0011062:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0011066:	89 cd                	mov    ebp,ecx
c0011068:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0011070:	f7 d5                	not    ebp
c0011072:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0011078:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001107c:	01 d8                	add    eax,ebx
c001107e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011082:	56                   	push   esi
c0011083:	e8 b8 ff ff ff       	call   c0011040 <Video::getHeight()>
c0011088:	59                   	pop    ecx
c0011089:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001108d:	7e 70                	jle    c00110ff <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001108f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011093:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011097:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001109a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001109e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00110a2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00110a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00110ad:	89 f8                	mov    eax,edi
c00110af:	83 c0 20             	add    eax,0x20
c00110b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110b6:	56                   	push   esi
c00110b7:	e8 78 ff ff ff       	call   c0011034 <Video::getWidth()>
c00110bc:	5a                   	pop    edx
c00110bd:	39 c7                	cmp    edi,eax
c00110bf:	7d 34                	jge    c00110f5 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00110c1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00110c6:	74 05                	je     c00110cd <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00110c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00110ca:	55                   	push   ebp
c00110cb:	eb 0d                	jmp    c00110da <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00110cd:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00110d2:	74 12                	je     c00110e6 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00110d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00110d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00110de:	57                   	push   edi
c00110df:	56                   	push   esi
c00110e0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00110e3:	83 c4 10             	add    esp,0x10
c00110e6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00110ea:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00110ee:	47                   	inc    edi
c00110ef:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00110f3:	75 c1                	jne    c00110b6 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00110f5:	43                   	inc    ebx
c00110f6:	83 fb 20             	cmp    ebx,0x20
c00110f9:	0f 85 79 ff ff ff    	jne    c0011078 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00110ff:	83 c4 2c             	add    esp,0x2c
c0011102:	5b                   	pop    ebx
c0011103:	5e                   	pop    esi
c0011104:	5f                   	pop    edi
c0011105:	5d                   	pop    ebp
c0011106:	c3                   	ret    
c0011107:	90                   	nop

c0011108 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0011108:	55                   	push   ebp
c0011109:	57                   	push   edi
c001110a:	56                   	push   esi
c001110b:	53                   	push   ebx
c001110c:	83 ec 28             	sub    esp,0x28
c001110f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011113:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011117:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c001111b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001111f:	c1 e6 08             	shl    esi,0x8
c0011122:	01 c6                	add    esi,eax
c0011124:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0011128:	c1 e0 08             	shl    eax,0x8
c001112b:	01 d0                	add    eax,edx
c001112d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011131:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011135:	0f af c6             	imul   eax,esi
c0011138:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001113f:	50                   	push   eax
c0011140:	e8 7e 88 ff ff       	call   c00099c3 <malloc>
c0011145:	83 c4 10             	add    esp,0x10
c0011148:	89 c7                	mov    edi,eax
c001114a:	85 c0                	test   eax,eax
c001114c:	75 10                	jne    c001115e <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c001114e:	83 ec 0c             	sub    esp,0xc
c0011151:	68 d1 3a 02 c0       	push   0xc0023ad1
c0011156:	e8 ae 31 00 00       	call   c0014309 <Krnl::panic(char const*)>
c001115b:	83 c4 10             	add    esp,0x10
c001115e:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0011161:	ba 12 00 00 00       	mov    edx,0x12
c0011166:	84 c0                	test   al,al
c0011168:	74 11                	je     c001117b <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c001116a:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c001116e:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011172:	c1 fa 03             	sar    edx,0x3
c0011175:	0f af d1             	imul   edx,ecx
c0011178:	83 c2 12             	add    edx,0x12
c001117b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001117f:	74 04                	je     c0011185 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0011181:	85 f6                	test   esi,esi
c0011183:	75 12                	jne    c0011197 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0011185:	83 ec 0c             	sub    esp,0xc
c0011188:	68 e1 3a 02 c0       	push   0xc0023ae1
c001118d:	e8 96 b8 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0011192:	e9 b8 00 00 00       	jmp    c001124f <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011197:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001119b:	80 f9 02             	cmp    cl,0x2
c001119e:	0f 85 96 00 00 00    	jne    c001123a <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c00111a4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00111a9:	75 0e                	jne    c00111b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00111ab:	84 c0                	test   al,al
c00111ad:	75 0a                	jne    c00111b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00111af:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00111b2:	83 e8 18             	sub    eax,0x18
c00111b5:	a8 f7                	test   al,0xf7
c00111b7:	74 0a                	je     c00111c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c00111b9:	83 ec 0c             	sub    esp,0xc
c00111bc:	68 f6 3a 02 c0       	push   0xc0023af6
c00111c1:	eb 7f                	jmp    c0011242 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c00111c3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00111cb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00111d3:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00111d7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00111df:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00111e3:	75 0c                	jne    c00111f1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00111e5:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c00111ea:	c1 e0 18             	shl    eax,0x18
c00111ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00111f1:	45                   	inc    ebp
c00111f2:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00111f7:	c1 e1 10             	shl    ecx,0x10
c00111fa:	89 c8                	mov    eax,ecx
c00111fc:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0011201:	c1 e1 08             	shl    ecx,0x8
c0011204:	09 c1                	or     ecx,eax
c0011206:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c001120a:	09 c1                	or     ecx,eax
c001120c:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0011210:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011214:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011218:	c1 f8 03             	sar    eax,0x3
c001121b:	01 c2                	add    edx,eax
c001121d:	89 e8                	mov    eax,ebp
c001121f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011223:	39 c6                	cmp    esi,eax
c0011225:	7f b0                	jg     c00111d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011227:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001122b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001122f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0011232:	7e 22                	jle    c0011256 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0011234:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011238:	eb 99                	jmp    c00111d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001123a:	50                   	push   eax
c001123b:	50                   	push   eax
c001123c:	51                   	push   ecx
c001123d:	68 04 3b 02 c0       	push   0xc0023b04
c0011242:	e8 e1 b7 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0011247:	89 3c 24             	mov    DWORD PTR [esp],edi
c001124a:	e8 84 87 ff ff       	call   c00099d3 <free>
c001124f:	83 c4 10             	add    esp,0x10
c0011252:	31 ff                	xor    edi,edi
c0011254:	eb 0f                	jmp    c0011265 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011256:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001125a:	89 30                	mov    DWORD PTR [eax],esi
c001125c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011260:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011263:	89 30                	mov    DWORD PTR [eax],esi
c0011265:	83 c4 1c             	add    esp,0x1c
c0011268:	89 f8                	mov    eax,edi
c001126a:	5b                   	pop    ebx
c001126b:	5e                   	pop    esi
c001126c:	5f                   	pop    edi
c001126d:	5d                   	pop    ebp
c001126e:	c3                   	ret    
c001126f:	90                   	nop

c0011270 <Video::putTGA(int, int, unsigned char*, int)>:
c0011270:	55                   	push   ebp
c0011271:	57                   	push   edi
c0011272:	56                   	push   esi
c0011273:	53                   	push   ebx
c0011274:	83 ec 28             	sub    esp,0x28
c0011277:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001127b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001127f:	50                   	push   eax
c0011280:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011284:	50                   	push   eax
c0011285:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011289:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001128d:	56                   	push   esi
c001128e:	e8 75 fe ff ff       	call   c0011108 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011293:	83 c4 20             	add    esp,0x20
c0011296:	85 c0                	test   eax,eax
c0011298:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001129c:	74 35                	je     c00112d3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001129e:	89 c7                	mov    edi,eax
c00112a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00112a4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00112a8:	39 d8                	cmp    eax,ebx
c00112aa:	7e 27                	jle    c00112d3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00112ac:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00112b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112b4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00112b8:	39 e8                	cmp    eax,ebp
c00112ba:	7e 14                	jle    c00112d0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00112bc:	8b 06                	mov    eax,DWORD PTR [esi]
c00112be:	83 c7 04             	add    edi,0x4
c00112c1:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00112c4:	53                   	push   ebx
c00112c5:	55                   	push   ebp
c00112c6:	45                   	inc    ebp
c00112c7:	56                   	push   esi
c00112c8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112cb:	83 c4 10             	add    esp,0x10
c00112ce:	eb e0                	jmp    c00112b0 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00112d0:	43                   	inc    ebx
c00112d1:	eb cd                	jmp    c00112a0 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00112d3:	83 c4 1c             	add    esp,0x1c
c00112d6:	5b                   	pop    ebx
c00112d7:	5e                   	pop    esi
c00112d8:	5f                   	pop    edi
c00112d9:	5d                   	pop    ebp
c00112da:	c3                   	ret    
c00112db:	90                   	nop

c00112dc <ACPI::close(int, int, void*)>:
c00112dc:	83 ec 1c             	sub    esp,0x1c
c00112df:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00112e7:	74 0b                	je     c00112f4 <ACPI::close(int, int, void*)+0x18>
c00112e9:	b8 00 00 00 00       	mov    eax,0x0
c00112ee:	e9 99 00 00 00       	jmp    c001138c <ACPI::close(int, int, void*)+0xb0>
c00112f3:	90                   	nop
c00112f4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00112f9:	75 29                	jne    c0011324 <ACPI::close(int, int, void*)+0x48>
c00112fb:	a1 a8 6a 02 c0       	mov    eax,ds:0xc0026aa8
c0011300:	85 c0                	test   eax,eax
c0011302:	74 08                	je     c001130c <ACPI::close(int, int, void*)+0x30>
c0011304:	a1 a8 6a 02 c0       	mov    eax,ds:0xc0026aa8
c0011309:	ff d0                	call   eax
c001130b:	90                   	nop
c001130c:	83 ec 0c             	sub    esp,0xc
c001130f:	68 60 3b 02 c0       	push   0xc0023b60
c0011314:	e8 f0 2f 00 00       	call   c0014309 <Krnl::panic(char const*)>
c0011319:	83 c4 10             	add    esp,0x10
c001131c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011321:	eb 69                	jmp    c001138c <ACPI::close(int, int, void*)+0xb0>
c0011323:	90                   	nop
c0011324:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011329:	75 59                	jne    c0011384 <ACPI::close(int, int, void*)+0xa8>
c001132b:	a1 a4 6a 02 c0       	mov    eax,ds:0xc0026aa4
c0011330:	85 c0                	test   eax,eax
c0011332:	74 08                	je     c001133c <ACPI::close(int, int, void*)+0x60>
c0011334:	a1 a4 6a 02 c0       	mov    eax,ds:0xc0026aa4
c0011339:	ff d0                	call   eax
c001133b:	90                   	nop
c001133c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011341:	8d 76 00             	lea    esi,[esi+0x0]
c0011344:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011349:	83 e0 02             	and    eax,0x2
c001134c:	74 1e                	je     c001136c <ACPI::close(int, int, void*)+0x90>
c001134e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011355:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011359:	89 c2                	mov    edx,eax
c001135b:	ec                   	in     al,dx
c001135c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011360:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011364:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011368:	eb da                	jmp    c0011344 <ACPI::close(int, int, void*)+0x68>
c001136a:	66 90                	xchg   ax,ax
c001136c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011373:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011378:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001137c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011380:	ee                   	out    dx,al
c0011381:	8d 76 00             	lea    esi,[esi+0x0]
c0011384:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011389:	8d 76 00             	lea    esi,[esi+0x0]
c001138c:	83 c4 1c             	add    esp,0x1c
c001138f:	c3                   	ret    

c0011390 <findRSDP()>:
c0011390:	83 ec 1c             	sub    esp,0x1c
c0011393:	83 ec 0c             	sub    esp,0xc
c0011396:	68 3b 3c 02 c0       	push   0xc0023c3b
c001139b:	e8 7d 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00113a0:	83 c4 10             	add    esp,0x10
c00113a3:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c00113a8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00113ae:	83 e0 04             	and    eax,0x4
c00113b1:	84 c0                	test   al,al
c00113b3:	75 0b                	jne    c00113c0 <findRSDP()+0x30>
c00113b5:	b8 00 00 00 00       	mov    eax,0x0
c00113ba:	e9 a1 00 00 00       	jmp    c0011460 <findRSDP()+0xd0>
c00113bf:	90                   	nop
c00113c0:	a1 74 64 02 c0       	mov    eax,ds:0xc0026474
c00113c5:	3d ff 07 00 00       	cmp    eax,0x7ff
c00113ca:	7f 1c                	jg     c00113e8 <findRSDP()+0x58>
c00113cc:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c00113d1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00113d7:	83 e2 fb             	and    edx,0xfffffffb
c00113da:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00113e0:	b8 00 00 00 00       	mov    eax,0x0
c00113e5:	eb 79                	jmp    c0011460 <findRSDP()+0xd0>
c00113e7:	90                   	nop
c00113e8:	83 ec 0c             	sub    esp,0xc
c00113eb:	68 4b 3c 02 c0       	push   0xc0023c4b
c00113f0:	e8 28 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00113f5:	83 c4 10             	add    esp,0x10
c00113f8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011400:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011408:	77 3e                	ja     c0011448 <findRSDP()+0xb8>
c001140a:	83 ec 04             	sub    esp,0x4
c001140d:	6a 08                	push   0x8
c001140f:	68 64 3c 02 c0       	push   0xc0023c64
c0011414:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011418:	e8 63 f1 fe ff       	call   c0000580 <memcmp>
c001141d:	83 c4 10             	add    esp,0x10
c0011420:	85 c0                	test   eax,eax
c0011422:	0f 94 c0             	sete   al
c0011425:	84 c0                	test   al,al
c0011427:	74 17                	je     c0011440 <findRSDP()+0xb0>
c0011429:	83 ec 0c             	sub    esp,0xc
c001142c:	68 6d 3c 02 c0       	push   0xc0023c6d
c0011431:	e8 e7 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011436:	83 c4 10             	add    esp,0x10
c0011439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001143d:	eb 21                	jmp    c0011460 <findRSDP()+0xd0>
c001143f:	90                   	nop
c0011440:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011445:	eb b9                	jmp    c0011400 <findRSDP()+0x70>
c0011447:	90                   	nop
c0011448:	83 ec 0c             	sub    esp,0xc
c001144b:	68 7b 3c 02 c0       	push   0xc0023c7b
c0011450:	e8 c8 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011455:	83 c4 10             	add    esp,0x10
c0011458:	b8 00 00 00 00       	mov    eax,0x0
c001145d:	8d 76 00             	lea    esi,[esi+0x0]
c0011460:	83 c4 1c             	add    esp,0x1c
c0011463:	c3                   	ret    

c0011464 <loadACPITables(unsigned char*)>:
c0011464:	57                   	push   edi
c0011465:	56                   	push   esi
c0011466:	53                   	push   ebx
c0011467:	83 ec 60             	sub    esp,0x60
c001146a:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c001146f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011475:	83 e0 04             	and    eax,0x4
c0011478:	84 c0                	test   al,al
c001147a:	0f 84 3c 02 00 00    	je     c00116bc <loadACPITables(unsigned char*)+0x258>
c0011480:	a0 c0 6c 02 c0       	mov    al,ds:0xc0026cc0
c0011485:	84 c0                	test   al,al
c0011487:	74 77                	je     c0011500 <loadACPITables(unsigned char*)+0x9c>
c0011489:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001148d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011491:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011495:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011498:	83 e8 24             	sub    eax,0x24
c001149b:	c1 e8 03             	shr    eax,0x3
c001149e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00114a2:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00114aa:	66 90                	xchg   ax,ax
c00114ac:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00114b0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00114b4:	0f 8d b6 00 00 00    	jge    c0011570 <loadACPITables(unsigned char*)+0x10c>
c00114ba:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00114be:	83 c0 24             	add    eax,0x24
c00114c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00114c5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00114c9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00114cd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00114d1:	c1 e0 03             	shl    eax,0x3
c00114d4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00114d8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00114dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00114df:	8b 00                	mov    eax,DWORD PTR [eax]
c00114e1:	89 c1                	mov    ecx,eax
c00114e3:	a1 ac 6a 02 c0       	mov    eax,ds:0xc0026aac
c00114e8:	8d 50 01             	lea    edx,[eax+0x1]
c00114eb:	89 15 ac 6a 02 c0    	mov    DWORD PTR ds:0xc0026aac,edx
c00114f1:	89 ca                	mov    edx,ecx
c00114f3:	89 14 c5 c4 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd953c],edx
c00114fa:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00114fe:	eb ac                	jmp    c00114ac <loadACPITables(unsigned char*)+0x48>
c0011500:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011504:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011508:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001150c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001150f:	83 e8 24             	sub    eax,0x24
c0011512:	c1 e8 02             	shr    eax,0x2
c0011515:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011519:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011521:	8d 76 00             	lea    esi,[esi+0x0]
c0011524:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011528:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001152c:	7d 42                	jge    c0011570 <loadACPITables(unsigned char*)+0x10c>
c001152e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011532:	83 c0 24             	add    eax,0x24
c0011535:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011539:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001153d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011541:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011545:	c1 e0 02             	shl    eax,0x2
c0011548:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001154c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011550:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011552:	a1 ac 6a 02 c0       	mov    eax,ds:0xc0026aac
c0011557:	8d 50 01             	lea    edx,[eax+0x1]
c001155a:	89 15 ac 6a 02 c0    	mov    DWORD PTR ds:0xc0026aac,edx
c0011560:	89 ca                	mov    edx,ecx
c0011562:	89 14 c5 c4 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd953c],edx
c0011569:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c001156d:	eb b5                	jmp    c0011524 <loadACPITables(unsigned char*)+0xc0>
c001156f:	90                   	nop
c0011570:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011578:	a1 ac 6a 02 c0       	mov    eax,ds:0xc0026aac
c001157d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011581:	0f 8d 39 01 00 00    	jge    c00116c0 <loadACPITables(unsigned char*)+0x25c>
c0011587:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001158b:	8b 04 c5 c4 6a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd953c]
c0011592:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011596:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001159a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001159e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115a2:	25 ff 0f 00 00       	and    eax,0xfff
c00115a7:	89 c6                	mov    esi,eax
c00115a9:	8b 1d 90 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026590
c00115af:	83 ec 0c             	sub    esp,0xc
c00115b2:	6a 01                	push   0x1
c00115b4:	e8 94 a0 ff ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c00115b9:	83 c4 10             	add    esp,0x10
c00115bc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00115c0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00115c6:	83 ec 0c             	sub    esp,0xc
c00115c9:	6a 01                	push   0x1
c00115cb:	6a 01                	push   0x1
c00115cd:	50                   	push   eax
c00115ce:	52                   	push   edx
c00115cf:	53                   	push   ebx
c00115d0:	e8 15 aa ff ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00115d5:	83 c4 20             	add    esp,0x20
c00115d8:	09 f0                	or     eax,esi
c00115da:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00115de:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00115e2:	c1 e0 03             	shl    eax,0x3
c00115e5:	05 c0 6a 02 c0       	add    eax,0xc0026ac0
c00115ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00115ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00115f6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00115fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011602:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011606:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001160a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001160e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011612:	89 c6                	mov    esi,eax
c0011614:	89 d7                	mov    edi,edx
c0011616:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011618:	89 c8                	mov    eax,ecx
c001161a:	89 fa                	mov    edx,edi
c001161c:	89 f3                	mov    ebx,esi
c001161e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011622:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011626:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001162a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001162e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011631:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011635:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011639:	05 00 10 00 00       	add    eax,0x1000
c001163e:	c1 e8 0c             	shr    eax,0xc
c0011641:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011645:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011649:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001164d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011651:	25 ff 0f 00 00       	and    eax,0xfff
c0011656:	89 c6                	mov    esi,eax
c0011658:	8b 1d 90 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026590
c001165e:	83 ec 0c             	sub    esp,0xc
c0011661:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011665:	e8 e3 9f ff ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c001166a:	83 c4 10             	add    esp,0x10
c001166d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011671:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011677:	83 ec 0c             	sub    esp,0xc
c001167a:	6a 01                	push   0x1
c001167c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011680:	50                   	push   eax
c0011681:	52                   	push   edx
c0011682:	53                   	push   ebx
c0011683:	e8 62 a9 ff ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011688:	83 c4 20             	add    esp,0x20
c001168b:	09 f0                	or     eax,esi
c001168d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011695:	83 ec 0c             	sub    esp,0xc
c0011698:	50                   	push   eax
c0011699:	e8 df a2 ff ff       	call   c000b97d <Virt::freeKernelVirtualPages(unsigned long)>
c001169e:	83 c4 10             	add    esp,0x10
c00116a1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00116a5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00116a9:	89 14 c5 c4 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd953c],edx
c00116b0:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00116b4:	e9 bf fe ff ff       	jmp    c0011578 <loadACPITables(unsigned char*)+0x114>
c00116b9:	8d 76 00             	lea    esi,[esi+0x0]
c00116bc:	90                   	nop
c00116bd:	8d 76 00             	lea    esi,[esi+0x0]
c00116c0:	83 c4 60             	add    esp,0x60
c00116c3:	5b                   	pop    ebx
c00116c4:	5e                   	pop    esi
c00116c5:	5f                   	pop    edi
c00116c6:	c3                   	ret    
c00116c7:	90                   	nop

c00116c8 <findRSDT(unsigned char*)>:
c00116c8:	57                   	push   edi
c00116c9:	56                   	push   esi
c00116ca:	53                   	push   ebx
c00116cb:	83 ec 50             	sub    esp,0x50
c00116ce:	83 ec 0c             	sub    esp,0xc
c00116d1:	68 8f 3c 02 c0       	push   0xc0023c8f
c00116d6:	e8 42 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00116db:	83 c4 10             	add    esp,0x10
c00116de:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c00116e3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00116e9:	83 e0 04             	and    eax,0x4
c00116ec:	84 c0                	test   al,al
c00116ee:	75 0c                	jne    c00116fc <findRSDT(unsigned char*)+0x34>
c00116f0:	b8 00 00 00 00       	mov    eax,0x0
c00116f5:	e9 86 01 00 00       	jmp    c0011880 <findRSDT(unsigned char*)+0x1b8>
c00116fa:	66 90                	xchg   ax,ax
c00116fc:	83 ec 0c             	sub    esp,0xc
c00116ff:	68 a1 3c 02 c0       	push   0xc0023ca1
c0011704:	e8 14 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011709:	83 c4 10             	add    esp,0x10
c001170c:	89 e0                	mov    eax,esp
c001170e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011712:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011716:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001171a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011722:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011726:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001172a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001172e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011732:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011736:	89 c6                	mov    esi,eax
c0011738:	89 d7                	mov    edi,edx
c001173a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001173c:	89 c8                	mov    eax,ecx
c001173e:	89 fa                	mov    edx,edi
c0011740:	89 f3                	mov    ebx,esi
c0011742:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011746:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001174a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001174e:	83 ec 0c             	sub    esp,0xc
c0011751:	68 b3 3c 02 c0       	push   0xc0023cb3
c0011756:	e8 c2 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001175b:	83 c4 10             	add    esp,0x10
c001175e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011762:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011766:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001176e:	83 ec 0c             	sub    esp,0xc
c0011771:	68 c5 3c 02 c0       	push   0xc0023cc5
c0011776:	e8 a2 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001177b:	83 c4 10             	add    esp,0x10
c001177e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011782:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011786:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001178a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001178e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011792:	83 ec 04             	sub    esp,0x4
c0011795:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011799:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001179d:	68 84 3b 02 c0       	push   0xc0023b84
c00117a2:	e8 81 b2 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00117a7:	83 c4 10             	add    esp,0x10
c00117aa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00117ae:	25 ff 0f 00 00       	and    eax,0xfff
c00117b3:	89 c6                	mov    esi,eax
c00117b5:	8b 1d 90 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026590
c00117bb:	83 ec 0c             	sub    esp,0xc
c00117be:	6a 02                	push   0x2
c00117c0:	e8 88 9e ff ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c00117c5:	83 c4 10             	add    esp,0x10
c00117c8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00117cc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00117d2:	83 ec 0c             	sub    esp,0xc
c00117d5:	6a 01                	push   0x1
c00117d7:	6a 02                	push   0x2
c00117d9:	50                   	push   eax
c00117da:	52                   	push   edx
c00117db:	53                   	push   ebx
c00117dc:	e8 09 a8 ff ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00117e1:	83 c4 20             	add    esp,0x20
c00117e4:	09 f0                	or     eax,esi
c00117e6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00117ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00117ee:	25 ff 0f 00 00       	and    eax,0xfff
c00117f3:	89 c6                	mov    esi,eax
c00117f5:	8b 1d 90 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026590
c00117fb:	83 ec 0c             	sub    esp,0xc
c00117fe:	6a 02                	push   0x2
c0011800:	e8 48 9e ff ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c0011805:	83 c4 10             	add    esp,0x10
c0011808:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001180c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011812:	83 ec 0c             	sub    esp,0xc
c0011815:	6a 01                	push   0x1
c0011817:	6a 02                	push   0x2
c0011819:	50                   	push   eax
c001181a:	52                   	push   edx
c001181b:	53                   	push   ebx
c001181c:	e8 c9 a7 ff ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011821:	83 c4 20             	add    esp,0x20
c0011824:	09 f0                	or     eax,esi
c0011826:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001182a:	83 ec 04             	sub    esp,0x4
c001182d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011831:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011835:	68 a4 3b 02 c0       	push   0xc0023ba4
c001183a:	e8 e9 b1 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001183f:	83 c4 10             	add    esp,0x10
c0011842:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011847:	75 13                	jne    c001185c <findRSDT(unsigned char*)+0x194>
c0011849:	c6 05 c0 6c 02 c0 00 	mov    BYTE PTR ds:0xc0026cc0,0x0
c0011850:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011854:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011858:	eb 22                	jmp    c001187c <findRSDT(unsigned char*)+0x1b4>
c001185a:	66 90                	xchg   ax,ax
c001185c:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011861:	75 11                	jne    c0011874 <findRSDT(unsigned char*)+0x1ac>
c0011863:	c6 05 c0 6c 02 c0 01 	mov    BYTE PTR ds:0xc0026cc0,0x1
c001186a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001186e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011872:	eb 08                	jmp    c001187c <findRSDT(unsigned char*)+0x1b4>
c0011874:	b8 00 00 00 00       	mov    eax,0x0
c0011879:	eb 05                	jmp    c0011880 <findRSDT(unsigned char*)+0x1b8>
c001187b:	90                   	nop
c001187c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011880:	83 c4 50             	add    esp,0x50
c0011883:	5b                   	pop    ebx
c0011884:	5e                   	pop    esi
c0011885:	5f                   	pop    edi
c0011886:	c3                   	ret    
c0011887:	90                   	nop

c0011888 <findDataTable(unsigned char*, char*)>:
c0011888:	83 ec 1c             	sub    esp,0x1c
c001188b:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0011890:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011896:	83 e0 04             	and    eax,0x4
c0011899:	84 c0                	test   al,al
c001189b:	75 07                	jne    c00118a4 <findDataTable(unsigned char*, char*)+0x1c>
c001189d:	b8 00 00 00 00       	mov    eax,0x0
c00118a2:	eb 58                	jmp    c00118fc <findDataTable(unsigned char*, char*)+0x74>
c00118a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118ac:	a1 ac 6a 02 c0       	mov    eax,ds:0xc0026aac
c00118b1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00118b5:	7d 3d                	jge    c00118f4 <findDataTable(unsigned char*, char*)+0x6c>
c00118b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118bb:	c1 e0 03             	shl    eax,0x3
c00118be:	05 c0 6a 02 c0       	add    eax,0xc0026ac0
c00118c3:	83 ec 04             	sub    esp,0x4
c00118c6:	6a 04                	push   0x4
c00118c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118cc:	50                   	push   eax
c00118cd:	e8 ae ec fe ff       	call   c0000580 <memcmp>
c00118d2:	83 c4 10             	add    esp,0x10
c00118d5:	85 c0                	test   eax,eax
c00118d7:	0f 94 c0             	sete   al
c00118da:	84 c0                	test   al,al
c00118dc:	74 0e                	je     c00118ec <findDataTable(unsigned char*, char*)+0x64>
c00118de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118e2:	8b 04 c5 c4 6a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd953c]
c00118e9:	eb 11                	jmp    c00118fc <findDataTable(unsigned char*, char*)+0x74>
c00118eb:	90                   	nop
c00118ec:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00118f0:	eb ba                	jmp    c00118ac <findDataTable(unsigned char*, char*)+0x24>
c00118f2:	66 90                	xchg   ax,ax
c00118f4:	b8 00 00 00 00       	mov    eax,0x0
c00118f9:	8d 76 00             	lea    esi,[esi+0x0]
c00118fc:	83 c4 1c             	add    esp,0x1c
c00118ff:	c3                   	ret    

c0011900 <scanMADT()>:
c0011900:	53                   	push   ebx
c0011901:	83 ec 38             	sub    esp,0x38
c0011904:	83 ec 0c             	sub    esp,0xc
c0011907:	68 d7 3c 02 c0       	push   0xc0023cd7
c001190c:	e8 0c 81 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011911:	83 c4 10             	add    esp,0x10
c0011914:	a1 40 64 02 c0       	mov    eax,ds:0xc0026440
c0011919:	25 00 04 00 00       	and    eax,0x400
c001191e:	74 14                	je     c0011934 <scanMADT()+0x34>
c0011920:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0011925:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001192b:	83 e2 fb             	and    edx,0xfffffffb
c001192e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011934:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0011939:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001193f:	83 e0 04             	and    eax,0x4
c0011942:	84 c0                	test   al,al
c0011944:	0f 84 82 04 00 00    	je     c0011dcc <scanMADT()+0x4cc>
c001194a:	83 ec 0c             	sub    esp,0xc
c001194d:	68 e4 3c 02 c0       	push   0xc0023ce4
c0011952:	e8 c6 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011957:	83 c4 10             	add    esp,0x10
c001195a:	e8 31 fa ff ff       	call   c0011390 <findRSDP()>
c001195f:	a3 cc 6c 02 c0       	mov    ds:0xc0026ccc,eax
c0011964:	a1 cc 6c 02 c0       	mov    eax,ds:0xc0026ccc
c0011969:	85 c0                	test   eax,eax
c001196b:	75 1b                	jne    c0011988 <scanMADT()+0x88>
c001196d:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0011972:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011978:	83 e2 fb             	and    edx,0xfffffffb
c001197b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011981:	e9 4e 04 00 00       	jmp    c0011dd4 <scanMADT()+0x4d4>
c0011986:	66 90                	xchg   ax,ax
c0011988:	83 ec 0c             	sub    esp,0xc
c001198b:	68 f6 3c 02 c0       	push   0xc0023cf6
c0011990:	e8 88 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011995:	83 c4 10             	add    esp,0x10
c0011998:	a1 cc 6c 02 c0       	mov    eax,ds:0xc0026ccc
c001199d:	83 ec 0c             	sub    esp,0xc
c00119a0:	50                   	push   eax
c00119a1:	e8 22 fd ff ff       	call   c00116c8 <findRSDT(unsigned char*)>
c00119a6:	83 c4 10             	add    esp,0x10
c00119a9:	a3 c8 6c 02 c0       	mov    ds:0xc0026cc8,eax
c00119ae:	a1 c8 6c 02 c0       	mov    eax,ds:0xc0026cc8
c00119b3:	85 c0                	test   eax,eax
c00119b5:	75 19                	jne    c00119d0 <scanMADT()+0xd0>
c00119b7:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c00119bc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00119c2:	83 e2 fb             	and    edx,0xfffffffb
c00119c5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00119cb:	e9 04 04 00 00       	jmp    c0011dd4 <scanMADT()+0x4d4>
c00119d0:	83 ec 0c             	sub    esp,0xc
c00119d3:	68 06 3d 02 c0       	push   0xc0023d06
c00119d8:	e8 40 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00119dd:	83 c4 10             	add    esp,0x10
c00119e0:	a1 c8 6c 02 c0       	mov    eax,ds:0xc0026cc8
c00119e5:	83 ec 0c             	sub    esp,0xc
c00119e8:	50                   	push   eax
c00119e9:	e8 76 fa ff ff       	call   c0011464 <loadACPITables(unsigned char*)>
c00119ee:	83 c4 10             	add    esp,0x10
c00119f1:	a1 c8 6c 02 c0       	mov    eax,ds:0xc0026cc8
c00119f6:	83 ec 08             	sub    esp,0x8
c00119f9:	68 1e 3d 02 c0       	push   0xc0023d1e
c00119fe:	50                   	push   eax
c00119ff:	e8 84 fe ff ff       	call   c0011888 <findDataTable(unsigned char*, char*)>
c0011a04:	83 c4 10             	add    esp,0x10
c0011a07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011a0b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011a10:	75 1a                	jne    c0011a2c <scanMADT()+0x12c>
c0011a12:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0011a17:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011a1d:	83 e2 fe             	and    edx,0xfffffffe
c0011a20:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011a26:	e9 a9 03 00 00       	jmp    c0011dd4 <scanMADT()+0x4d4>
c0011a2b:	90                   	nop
c0011a2c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011a34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011a38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a3b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011a3f:	0f 87 8f 03 00 00    	ja     c0011dd4 <scanMADT()+0x4d4>
c0011a45:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011a4d:	0f 87 81 03 00 00    	ja     c0011dd4 <scanMADT()+0x4d4>
c0011a53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a57:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a5f:	8d 50 01             	lea    edx,[eax+0x1]
c0011a62:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a66:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011a6a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011a6e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011a72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a76:	8d 50 01             	lea    edx,[eax+0x1]
c0011a79:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011a81:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011a85:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011a89:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011a8e:	0f 86 3c 03 00 00    	jbe    c0011dd0 <scanMADT()+0x4d0>
c0011a94:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011a99:	75 59                	jne    c0011af4 <scanMADT()+0x1f4>
c0011a9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a9f:	8d 50 01             	lea    edx,[eax+0x1]
c0011aa2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011aa6:	8a 15 c0 6e 02 c0    	mov    dl,BYTE PTR ds:0xc0026ec0
c0011aac:	0f b6 d2             	movzx  edx,dl
c0011aaf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011ab3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011ab7:	88 82 00 6f 02 c0    	mov    BYTE PTR [edx-0x3ffd9100],al
c0011abd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ac1:	8d 50 01             	lea    edx,[eax+0x1]
c0011ac4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ac8:	8a 15 c0 6e 02 c0    	mov    dl,BYTE PTR ds:0xc0026ec0
c0011ace:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011ad1:	88 0d c0 6e 02 c0    	mov    BYTE PTR ds:0xc0026ec0,cl
c0011ad7:	0f b6 d2             	movzx  edx,dl
c0011ada:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011ade:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011ae2:	88 82 e0 6e 02 c0    	mov    BYTE PTR [edx-0x3ffd9120],al
c0011ae8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011aed:	e9 c6 02 00 00       	jmp    c0011db8 <scanMADT()+0x4b8>
c0011af2:	66 90                	xchg   ax,ax
c0011af4:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011af9:	0f 85 15 01 00 00    	jne    c0011c14 <scanMADT()+0x314>
c0011aff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b03:	8d 50 01             	lea    edx,[eax+0x1]
c0011b06:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b0a:	8a 15 80 6d 02 c0    	mov    dl,BYTE PTR ds:0xc0026d80
c0011b10:	0f b6 d2             	movzx  edx,dl
c0011b13:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011b17:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011b1b:	88 82 a0 6d 02 c0    	mov    BYTE PTR [edx-0x3ffd9260],al
c0011b21:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011b25:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011b29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b2d:	01 d0                	add    eax,edx
c0011b2f:	83 c0 2c             	add    eax,0x2c
c0011b32:	8a 00                	mov    al,BYTE PTR [eax]
c0011b34:	0f b6 d0             	movzx  edx,al
c0011b37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0011b3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b42:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011b46:	0f b6 c0             	movzx  eax,al
c0011b49:	c1 e0 08             	shl    eax,0x8
c0011b4c:	89 d1                	mov    ecx,edx
c0011b4e:	09 c1                	or     ecx,eax
c0011b50:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b54:	8d 50 02             	lea    edx,[eax+0x2]
c0011b57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b5b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b5f:	0f b6 c0             	movzx  eax,al
c0011b62:	c1 e0 10             	shl    eax,0x10
c0011b65:	09 c1                	or     ecx,eax
c0011b67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b6b:	8d 50 03             	lea    edx,[eax+0x3]
c0011b6e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b72:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b76:	0f b6 c0             	movzx  eax,al
c0011b79:	c1 e0 18             	shl    eax,0x18
c0011b7c:	09 c1                	or     ecx,eax
c0011b7e:	89 ca                	mov    edx,ecx
c0011b80:	a0 80 6d 02 c0       	mov    al,ds:0xc0026d80
c0011b85:	0f b6 c0             	movzx  eax,al
c0011b88:	89 14 85 c0 6d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9240],edx
c0011b8f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011b94:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011b98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b9c:	01 d0                	add    eax,edx
c0011b9e:	83 c0 2c             	add    eax,0x2c
c0011ba1:	8a 00                	mov    al,BYTE PTR [eax]
c0011ba3:	0f b6 d0             	movzx  edx,al
c0011ba6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011baa:	8d 48 01             	lea    ecx,[eax+0x1]
c0011bad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bb1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011bb5:	0f b6 c0             	movzx  eax,al
c0011bb8:	c1 e0 08             	shl    eax,0x8
c0011bbb:	89 d1                	mov    ecx,edx
c0011bbd:	09 c1                	or     ecx,eax
c0011bbf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bc3:	8d 50 02             	lea    edx,[eax+0x2]
c0011bc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011bce:	0f b6 c0             	movzx  eax,al
c0011bd1:	c1 e0 10             	shl    eax,0x10
c0011bd4:	09 c1                	or     ecx,eax
c0011bd6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bda:	8d 50 03             	lea    edx,[eax+0x3]
c0011bdd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011be1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011be5:	0f b6 c0             	movzx  eax,al
c0011be8:	c1 e0 18             	shl    eax,0x18
c0011beb:	09 c1                	or     ecx,eax
c0011bed:	89 ca                	mov    edx,ecx
c0011bef:	a0 80 6d 02 c0       	mov    al,ds:0xc0026d80
c0011bf4:	0f b6 c0             	movzx  eax,al
c0011bf7:	89 14 85 40 6e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd91c0],edx
c0011bfe:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011c03:	a0 80 6d 02 c0       	mov    al,ds:0xc0026d80
c0011c08:	40                   	inc    eax
c0011c09:	a2 80 6d 02 c0       	mov    ds:0xc0026d80,al
c0011c0e:	e9 a5 01 00 00       	jmp    c0011db8 <scanMADT()+0x4b8>
c0011c13:	90                   	nop
c0011c14:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011c19:	0f 85 e9 00 00 00    	jne    c0011d08 <scanMADT()+0x408>
c0011c1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c23:	8d 50 01             	lea    edx,[eax+0x1]
c0011c26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c2a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c2e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011c32:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011c36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c3a:	8d 50 01             	lea    edx,[eax+0x1]
c0011c3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c45:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011c49:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011c4d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c55:	01 d0                	add    eax,edx
c0011c57:	83 c0 2c             	add    eax,0x2c
c0011c5a:	8a 00                	mov    al,BYTE PTR [eax]
c0011c5c:	0f b6 d0             	movzx  edx,al
c0011c5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c63:	8d 48 01             	lea    ecx,[eax+0x1]
c0011c66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c6a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011c6e:	0f b6 c0             	movzx  eax,al
c0011c71:	c1 e0 08             	shl    eax,0x8
c0011c74:	89 d1                	mov    ecx,edx
c0011c76:	09 c1                	or     ecx,eax
c0011c78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c7c:	8d 50 02             	lea    edx,[eax+0x2]
c0011c7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c83:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c87:	0f b6 c0             	movzx  eax,al
c0011c8a:	c1 e0 10             	shl    eax,0x10
c0011c8d:	09 c1                	or     ecx,eax
c0011c8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c93:	8d 50 03             	lea    edx,[eax+0x3]
c0011c96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c9a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c9e:	0f b6 c0             	movzx  eax,al
c0011ca1:	c1 e0 18             	shl    eax,0x18
c0011ca4:	09 c8                	or     eax,ecx
c0011ca6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011caa:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011caf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cb7:	01 d0                	add    eax,edx
c0011cb9:	83 c0 2c             	add    eax,0x2c
c0011cbc:	8a 00                	mov    al,BYTE PTR [eax]
c0011cbe:	0f b6 c0             	movzx  eax,al
c0011cc1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011cc5:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011cc8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ccc:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011cd0:	0f b6 d2             	movzx  edx,dl
c0011cd3:	c1 e2 08             	shl    edx,0x8
c0011cd6:	09 d0                	or     eax,edx
c0011cd8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011cdd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011ce2:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011ce7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ceb:	88 90 20 5b 02 c0    	mov    BYTE PTR [eax-0x3ffda4e0],dl
c0011cf1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011cf6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011cfb:	66 89 84 12 60 6d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd92a0],ax
c0011d03:	e9 b0 00 00 00       	jmp    c0011db8 <scanMADT()+0x4b8>
c0011d08:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011d0d:	0f 85 99 00 00 00    	jne    c0011dac <scanMADT()+0x4ac>
c0011d13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d17:	8d 50 01             	lea    edx,[eax+0x1]
c0011d1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d22:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011d26:	0f b6 c0             	movzx  eax,al
c0011d29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011d2d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d35:	01 d0                	add    eax,edx
c0011d37:	83 c0 2c             	add    eax,0x2c
c0011d3a:	8a 00                	mov    al,BYTE PTR [eax]
c0011d3c:	0f b6 d0             	movzx  edx,al
c0011d3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d43:	8d 48 01             	lea    ecx,[eax+0x1]
c0011d46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d4a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011d4e:	0f b6 c0             	movzx  eax,al
c0011d51:	c1 e0 08             	shl    eax,0x8
c0011d54:	09 d0                	or     eax,edx
c0011d56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d5a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011d5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d63:	8d 50 01             	lea    edx,[eax+0x1]
c0011d66:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d6a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d6e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011d72:	0f b6 c0             	movzx  eax,al
c0011d75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d7d:	c1 e0 08             	shl    eax,0x8
c0011d80:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011d84:	89 c1                	mov    ecx,eax
c0011d86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d8a:	c1 e0 18             	shl    eax,0x18
c0011d8d:	89 c3                	mov    ebx,eax
c0011d8f:	a1 d0 6c 02 c0       	mov    eax,ds:0xc0026cd0
c0011d94:	8d 50 01             	lea    edx,[eax+0x1]
c0011d97:	89 15 d0 6c 02 c0    	mov    DWORD PTR ds:0xc0026cd0,edx
c0011d9d:	09 d9                	or     ecx,ebx
c0011d9f:	89 ca                	mov    edx,ecx
c0011da1:	89 14 85 e0 6c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9320],edx
c0011da8:	eb 0e                	jmp    c0011db8 <scanMADT()+0x4b8>
c0011daa:	66 90                	xchg   ax,ax
c0011dac:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0011db1:	75 05                	jne    c0011db8 <scanMADT()+0x4b8>
c0011db3:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011db8:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0011dbd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011dc1:	01 d0                	add    eax,edx
c0011dc3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011dc7:	e9 68 fc ff ff       	jmp    c0011a34 <scanMADT()+0x134>
c0011dcc:	90                   	nop
c0011dcd:	eb 05                	jmp    c0011dd4 <scanMADT()+0x4d4>
c0011dcf:	90                   	nop
c0011dd0:	90                   	nop
c0011dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0011dd4:	83 c4 38             	add    esp,0x38
c0011dd7:	5b                   	pop    ebx
c0011dd8:	c3                   	ret    
c0011dd9:	90                   	nop
c0011dda:	66 90                	xchg   ax,ax

c0011ddc <ACPI::ACPI()>:
c0011ddc:	83 ec 0c             	sub    esp,0xc
c0011ddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011de3:	83 ec 08             	sub    esp,0x8
c0011de6:	68 23 3d 02 c0       	push   0xc0023d23
c0011deb:	50                   	push   eax
c0011dec:	e8 89 c2 ff ff       	call   c000e07a <Device::Device(char const*)>
c0011df1:	83 c4 10             	add    esp,0x10
c0011df4:	ba ac 3e 02 c0       	mov    edx,0xc0023eac
c0011df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dfd:	89 10                	mov    DWORD PTR [eax],edx
c0011dff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e03:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0011e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e0e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0011e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e1c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0011e26:	83 ec 0c             	sub    esp,0xc
c0011e29:	68 28 3d 02 c0       	push   0xc0023d28
c0011e2e:	e8 ea 7b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011e33:	83 c4 10             	add    esp,0x10
c0011e36:	e8 c5 fa ff ff       	call   c0011900 <scanMADT()>
c0011e3b:	90                   	nop
c0011e3c:	83 c4 0c             	add    esp,0xc
c0011e3f:	c3                   	ret    

c0011e40 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0011e40:	83 ec 2c             	sub    esp,0x2c
c0011e43:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011e47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e4b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011e4f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0011e53:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0011e58:	88 d0                	mov    al,dl
c0011e5a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011e5e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011e63:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e6b:	90                   	nop
c0011e6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e70:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011e76:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011e7a:	0f 8d 9c 00 00 00    	jge    c0011f1c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0011e80:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e84:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e88:	83 c2 2a             	add    edx,0x2a
c0011e8b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0011e8f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0011e94:	75 7a                	jne    c0011f10 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011e96:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e9a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e9e:	83 c2 2a             	add    edx,0x2a
c0011ea1:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0011ea5:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0011ea9:	75 65                	jne    c0011f10 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011eab:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011eb0:	74 3a                	je     c0011eec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0011eb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011eb6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011eba:	83 c2 2a             	add    edx,0x2a
c0011ebd:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0011ec1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ec5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ec8:	39 c2                	cmp    edx,eax
c0011eca:	74 10                	je     c0011edc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0011ecc:	83 ec 0c             	sub    esp,0xc
c0011ecf:	68 c4 3b 02 c0       	push   0xc0023bc4
c0011ed4:	e8 30 24 00 00       	call   c0014309 <Krnl::panic(char const*)>
c0011ed9:	83 c4 10             	add    esp,0x10
c0011edc:	83 ec 0c             	sub    esp,0xc
c0011edf:	68 36 3d 02 c0       	push   0xc0023d36
c0011ee4:	e8 20 24 00 00       	call   c0014309 <Krnl::panic(char const*)>
c0011ee9:	83 c4 10             	add    esp,0x10
c0011eec:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011ef0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ef4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ef8:	83 c2 2a             	add    edx,0x2a
c0011efb:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0011eff:	8b 02                	mov    eax,DWORD PTR [edx]
c0011f01:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011f04:	89 01                	mov    DWORD PTR [ecx],eax
c0011f06:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0011f09:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011f0e:	66 90                	xchg   ax,ax
c0011f10:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f14:	e9 53 ff ff ff       	jmp    c0011e6c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0011f19:	8d 76 00             	lea    esi,[esi+0x0]
c0011f1c:	90                   	nop
c0011f1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f21:	83 c4 2c             	add    esp,0x2c
c0011f24:	c2 04 00             	ret    0x4
c0011f27:	90                   	nop

c0011f28 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0011f28:	83 ec 1c             	sub    esp,0x1c
c0011f2b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f2f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0011f33:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f37:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011f3c:	88 c8                	mov    al,cl
c0011f3e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0011f42:	88 d0                	mov    al,dl
c0011f44:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011f48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f4c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011f52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f56:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011f59:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0011f5d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0011f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f65:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011f6b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0011f6f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0011f72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f76:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0011f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f7f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011f85:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0011f89:	8d 48 01             	lea    ecx,[eax+0x1]
c0011f8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f90:	83 c2 2a             	add    edx,0x2a
c0011f93:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0011f97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f9b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fa5:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011fa8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011fac:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0011fb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fb4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011fba:	8d 50 01             	lea    edx,[eax+0x1]
c0011fbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fc1:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0011fc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fcb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011fd1:	3d 00 02 00 00       	cmp    eax,0x200
c0011fd6:	75 10                	jne    c0011fe8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0011fd8:	83 ec 0c             	sub    esp,0xc
c0011fdb:	68 45 3d 02 c0       	push   0xc0023d45
c0011fe0:	e8 24 23 00 00       	call   c0014309 <Krnl::panic(char const*)>
c0011fe5:	83 c4 10             	add    esp,0x10
c0011fe8:	90                   	nop
c0011fe9:	83 c4 1c             	add    esp,0x1c
c0011fec:	c3                   	ret    
c0011fed:	90                   	nop
c0011fee:	66 90                	xchg   ax,ax

c0011ff0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0011ff0:	b8 00 00 00 00       	mov    eax,0x0
c0011ff5:	c3                   	ret    
c0011ff6:	66 90                	xchg   ax,ax

c0011ff8 <ACPI::detectPCI()>:
c0011ff8:	53                   	push   ebx
c0011ff9:	83 ec 28             	sub    esp,0x28
c0011ffc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012001:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0012006:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c001200b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012011:	83 e0 04             	and    eax,0x4
c0012014:	84 c0                	test   al,al
c0012016:	74 2c                	je     c0012044 <ACPI::detectPCI()+0x4c>
c0012018:	a1 c8 6c 02 c0       	mov    eax,ds:0xc0026cc8
c001201d:	83 ec 08             	sub    esp,0x8
c0012020:	68 62 3d 02 c0       	push   0xc0023d62
c0012025:	50                   	push   eax
c0012026:	e8 5d f8 ff ff       	call   c0011888 <findDataTable(unsigned char*, char*)>
c001202b:	83 c4 10             	add    esp,0x10
c001202e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012032:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012037:	74 0b                	je     c0012044 <ACPI::detectPCI()+0x4c>
c0012039:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001203e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0012043:	90                   	nop
c0012044:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001204c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012050:	8a 00                	mov    al,BYTE PTR [eax]
c0012052:	3c 01                	cmp    al,0x1
c0012054:	75 0e                	jne    c0012064 <ACPI::detectPCI()+0x6c>
c0012056:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001205b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0012060:	eb 2a                	jmp    c001208c <ACPI::detectPCI()+0x94>
c0012062:	66 90                	xchg   ax,ax
c0012064:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012068:	8a 00                	mov    al,BYTE PTR [eax]
c001206a:	3c 02                	cmp    al,0x2
c001206c:	75 1e                	jne    c001208c <ACPI::detectPCI()+0x94>
c001206e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012073:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0012078:	74 12                	je     c001208c <ACPI::detectPCI()+0x94>
c001207a:	83 ec 0c             	sub    esp,0xc
c001207d:	68 f4 3b 02 c0       	push   0xc0023bf4
c0012082:	e8 82 22 00 00       	call   c0014309 <Krnl::panic(char const*)>
c0012087:	83 c4 10             	add    esp,0x10
c001208a:	66 90                	xchg   ax,ax
c001208c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012090:	83 f0 01             	xor    eax,0x1
c0012093:	84 c0                	test   al,al
c0012095:	74 41                	je     c00120d8 <ACPI::detectPCI()+0xe0>
c0012097:	e8 b4 e0 fe ff       	call   c0000150 <manualPCIProbe>
c001209c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120a0:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00120a5:	75 0d                	jne    c00120b4 <ACPI::detectPCI()+0xbc>
c00120a7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120ac:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00120b1:	eb 25                	jmp    c00120d8 <ACPI::detectPCI()+0xe0>
c00120b3:	90                   	nop
c00120b4:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c00120b9:	75 1d                	jne    c00120d8 <ACPI::detectPCI()+0xe0>
c00120bb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120c0:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00120c5:	74 11                	je     c00120d8 <ACPI::detectPCI()+0xe0>
c00120c7:	83 ec 0c             	sub    esp,0xc
c00120ca:	68 f4 3b 02 c0       	push   0xc0023bf4
c00120cf:	e8 35 22 00 00       	call   c0014309 <Krnl::panic(char const*)>
c00120d4:	83 c4 10             	add    esp,0x10
c00120d7:	90                   	nop
c00120d8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00120dd:	0f 84 85 00 00 00    	je     c0012168 <ACPI::detectPCI()+0x170>
c00120e3:	83 ec 0c             	sub    esp,0xc
c00120e6:	68 67 3d 02 c0       	push   0xc0023d67
c00120eb:	e8 2d 79 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00120f0:	83 c4 10             	add    esp,0x10
c00120f3:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c00120fb:	83 ec 0c             	sub    esp,0xc
c00120fe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012102:	e8 bc 78 ff ff       	call   c00099c3 <malloc>
c0012107:	83 c4 10             	add    esp,0x10
c001210a:	89 c3                	mov    ebx,eax
c001210c:	83 ec 0c             	sub    esp,0xc
c001210f:	53                   	push   ebx
c0012110:	e8 1d aa 00 00       	call   c001cb32 <PCI::PCI()>
c0012115:	83 c4 10             	add    esp,0x10
c0012118:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001211c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012120:	83 ec 08             	sub    esp,0x8
c0012123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012127:	50                   	push   eax
c0012128:	e8 49 bd ff ff       	call   c000de76 <Device::addChild(Device*)>
c001212d:	83 c4 10             	add    esp,0x10
c0012130:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012134:	8b 00                	mov    eax,DWORD PTR [eax]
c0012136:	83 c0 08             	add    eax,0x8
c0012139:	8b 00                	mov    eax,DWORD PTR [eax]
c001213b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0012140:	74 0a                	je     c001214c <ACPI::detectPCI()+0x154>
c0012142:	ba 01 00 00 00       	mov    edx,0x1
c0012147:	eb 0b                	jmp    c0012154 <ACPI::detectPCI()+0x15c>
c0012149:	8d 76 00             	lea    esi,[esi+0x0]
c001214c:	ba 02 00 00 00       	mov    edx,0x2
c0012151:	8d 76 00             	lea    esi,[esi+0x0]
c0012154:	6a 00                	push   0x0
c0012156:	6a 00                	push   0x0
c0012158:	52                   	push   edx
c0012159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001215d:	ff d0                	call   eax
c001215f:	83 c4 10             	add    esp,0x10
c0012162:	e9 a1 00 00 00       	jmp    c0012208 <ACPI::detectPCI()+0x210>
c0012167:	90                   	nop
c0012168:	83 ec 0c             	sub    esp,0xc
c001216b:	68 7f 3d 02 c0       	push   0xc0023d7f
c0012170:	e8 b3 a8 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0012175:	83 c4 10             	add    esp,0x10
c0012178:	83 ec 0c             	sub    esp,0xc
c001217b:	68 8a 3d 02 c0       	push   0xc0023d8a
c0012180:	e8 98 78 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012185:	83 c4 10             	add    esp,0x10
c0012188:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001218f:	83 ec 0c             	sub    esp,0xc
c0012192:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012196:	e8 28 78 ff ff       	call   c00099c3 <malloc>
c001219b:	83 c4 10             	add    esp,0x10
c001219e:	89 c3                	mov    ebx,eax
c00121a0:	83 ec 0c             	sub    esp,0xc
c00121a3:	53                   	push   ebx
c00121a4:	e8 f3 b4 00 00       	call   c001d69c <IDE::IDE()>
c00121a9:	83 c4 10             	add    esp,0x10
c00121ac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00121b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121b4:	83 ec 08             	sub    esp,0x8
c00121b7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00121bb:	50                   	push   eax
c00121bc:	e8 b5 bc ff ff       	call   c000de76 <Device::addChild(Device*)>
c00121c1:	83 c4 10             	add    esp,0x10
c00121c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121c8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00121d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121d6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c00121df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121e3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c00121ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00121f2:	83 c0 08             	add    eax,0x8
c00121f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00121f7:	6a 00                	push   0x0
c00121f9:	6a 00                	push   0x0
c00121fb:	6a 00                	push   0x0
c00121fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012201:	ff d0                	call   eax
c0012203:	83 c4 10             	add    esp,0x10
c0012206:	66 90                	xchg   ax,ax
c0012208:	90                   	nop
c0012209:	83 c4 28             	add    esp,0x28
c001220c:	5b                   	pop    ebx
c001220d:	c3                   	ret    
c001220e:	66 90                	xchg   ax,ax

c0012210 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012210:	83 ec 1c             	sub    esp,0x1c
c0012213:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012217:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001221a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001221e:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0012223:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012228:	83 ec 08             	sub    esp,0x8
c001222b:	52                   	push   edx
c001222c:	50                   	push   eax
c001222d:	e8 62 6d ff ff       	call   c0008f94 <Computer::readCMOS(unsigned char)>
c0012232:	83 c4 10             	add    esp,0x10
c0012235:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012239:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c001223e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012243:	83 ec 04             	sub    esp,0x4
c0012246:	6a 01                	push   0x1
c0012248:	52                   	push   edx
c0012249:	50                   	push   eax
c001224a:	e8 21 6f ff ff       	call   c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>
c001224f:	83 c4 10             	add    esp,0x10
c0012252:	90                   	nop
c0012253:	83 c4 1c             	add    esp,0x1c
c0012256:	c3                   	ret    
c0012257:	90                   	nop

c0012258 <ACPI::sleep()>:
c0012258:	83 ec 0c             	sub    esp,0xc
c001225b:	a1 a0 6a 02 c0       	mov    eax,ds:0xc0026aa0
c0012260:	85 c0                	test   eax,eax
c0012262:	74 08                	je     c001226c <ACPI::sleep()+0x14>
c0012264:	a1 a0 6a 02 c0       	mov    eax,ds:0xc0026aa0
c0012269:	ff d0                	call   eax
c001226b:	90                   	nop
c001226c:	90                   	nop
c001226d:	83 c4 0c             	add    esp,0xc
c0012270:	c3                   	ret    
c0012271:	90                   	nop
c0012272:	66 90                	xchg   ax,ax

c0012274 <ACPI::open(int, int, void*)>:
c0012274:	57                   	push   edi
c0012275:	56                   	push   esi
c0012276:	53                   	push   ebx
c0012277:	81 ec 70 01 00 00    	sub    esp,0x170
c001227d:	83 ec 0c             	sub    esp,0xc
c0012280:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012287:	e8 6c fd ff ff       	call   c0011ff8 <ACPI::detectPCI()>
c001228c:	83 c4 10             	add    esp,0x10
c001228f:	83 ec 0c             	sub    esp,0xc
c0012292:	68 1c 3c 02 c0       	push   0xc0023c1c
c0012297:	e8 81 77 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001229c:	83 c4 10             	add    esp,0x10
c001229f:	83 ec 0c             	sub    esp,0xc
c00122a2:	68 9f 3d 02 c0       	push   0xc0023d9f
c00122a7:	e8 df 47 00 00       	call   c0016a8b <Thr::loadKernelSymbolTable(char const*)>
c00122ac:	83 c4 10             	add    esp,0x10
c00122af:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c00122b7:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c00122c2:	83 ec 0c             	sub    esp,0xc
c00122c5:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00122cc:	e8 f2 76 ff ff       	call   c00099c3 <malloc>
c00122d1:	83 c4 10             	add    esp,0x10
c00122d4:	89 c3                	mov    ebx,eax
c00122d6:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00122db:	83 ec 04             	sub    esp,0x4
c00122de:	50                   	push   eax
c00122df:	68 bd 3d 02 c0       	push   0xc0023dbd
c00122e4:	53                   	push   ebx
c00122e5:	e8 a8 ac ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c00122ea:	83 c4 10             	add    esp,0x10
c00122ed:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c00122f4:	83 ec 08             	sub    esp,0x8
c00122f7:	6a 01                	push   0x1
c00122f9:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012300:	e8 f1 ac ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c0012305:	83 c4 10             	add    esp,0x10
c0012308:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001230f:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012317:	75 17                	jne    c0012330 <ACPI::open(int, int, void*)+0xbc>
c0012319:	83 ec 0c             	sub    esp,0xc
c001231c:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012323:	e8 2c ad ff ff       	call   c000d054 <File::close()>
c0012328:	83 c4 10             	add    esp,0x10
c001232b:	eb 0b                	jmp    c0012338 <ACPI::open(int, int, void*)+0xc4>
c001232d:	8d 76 00             	lea    esi,[esi+0x0]
c0012330:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012338:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012340:	74 1e                	je     c0012360 <ACPI::open(int, int, void*)+0xec>
c0012342:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012349:	8b 00                	mov    eax,DWORD PTR [eax]
c001234b:	83 c0 08             	add    eax,0x8
c001234e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012350:	83 ec 0c             	sub    esp,0xc
c0012353:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001235a:	ff d0                	call   eax
c001235c:	83 c4 10             	add    esp,0x10
c001235f:	90                   	nop
c0012360:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012367:	83 f0 01             	xor    eax,0x1
c001236a:	84 c0                	test   al,al
c001236c:	74 42                	je     c00123b0 <ACPI::open(int, int, void*)+0x13c>
c001236e:	83 ec 0c             	sub    esp,0xc
c0012371:	68 db 3d 02 c0       	push   0xc0023ddb
c0012376:	e8 a2 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001237b:	83 c4 10             	add    esp,0x10
c001237e:	83 ec 04             	sub    esp,0x4
c0012381:	6a 0c                	push   0xc
c0012383:	68 f6 3d 02 c0       	push   0xc0023df6
c0012388:	68 07 3e 02 c0       	push   0xc0023e07
c001238d:	e8 57 2d 00 00       	call   c00150e9 <Reg::readIntWithDefault(char*, char*, int)>
c0012392:	83 c4 10             	add    esp,0x10
c0012395:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c001239c:	83 ec 0c             	sub    esp,0xc
c001239f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c00123a6:	e8 ac 94 ff ff       	call   c000b857 <Virt::setupPageSwapping(int)>
c00123ab:	83 c4 10             	add    esp,0x10
c00123ae:	66 90                	xchg   ax,ax
c00123b0:	83 ec 0c             	sub    esp,0xc
c00123b3:	68 86 25 02 c0       	push   0xc0022586
c00123b8:	e8 60 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00123bd:	83 c4 10             	add    esp,0x10
c00123c0:	8b 1d 28 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026428
c00123c6:	83 ec 08             	sub    esp,0x8
c00123c9:	6a 01                	push   0x1
c00123cb:	68 0e 3e 02 c0       	push   0xc0023e0e
c00123d0:	e8 2d 51 00 00       	call   c0017502 <Thr::loadDLL(char const*, bool)>
c00123d5:	83 c4 10             	add    esp,0x10
c00123d8:	83 ec 08             	sub    esp,0x8
c00123db:	53                   	push   ebx
c00123dc:	50                   	push   eax
c00123dd:	e8 51 53 00 00       	call   c0017733 <Thr::executeDLL(unsigned long, void*)>
c00123e2:	83 c4 10             	add    esp,0x10
c00123e5:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00123ec:	83 ec 08             	sub    esp,0x8
c00123ef:	6a 12                	push   0x12
c00123f1:	50                   	push   eax
c00123f2:	e8 03 be ff ff       	call   c000e1fa <getDevicesOfType(DeviceType)>
c00123f7:	83 c4 0c             	add    esp,0xc
c00123fa:	66 90                	xchg   ax,ax
c00123fc:	83 ec 0c             	sub    esp,0xc
c00123ff:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012406:	50                   	push   eax
c0012407:	e8 64 f3 00 00       	call   c0021770 <LinkedList<Device>::isEmpty()>
c001240c:	83 c4 10             	add    esp,0x10
c001240f:	83 f0 01             	xor    eax,0x1
c0012412:	84 c0                	test   al,al
c0012414:	0f 84 46 01 00 00    	je     c0012560 <ACPI::open(int, int, void*)+0x2ec>
c001241a:	83 ec 0c             	sub    esp,0xc
c001241d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012424:	50                   	push   eax
c0012425:	e8 62 f3 00 00       	call   c002178c <LinkedList<Device>::getFirstElement()>
c001242a:	83 c4 10             	add    esp,0x10
c001242d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012434:	83 ec 0c             	sub    esp,0xc
c0012437:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001243e:	50                   	push   eax
c001243f:	e8 50 f3 00 00       	call   c0021794 <LinkedList<Device>::removeFirst()>
c0012444:	83 c4 10             	add    esp,0x10
c0012447:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001244e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012455:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001245c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012460:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012466:	ba 09 00 00 00       	mov    edx,0x9
c001246b:	fc                   	cld    
c001246c:	89 c7                	mov    edi,eax
c001246e:	89 de                	mov    esi,ebx
c0012470:	89 d1                	mov    ecx,edx
c0012472:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012474:	83 ec 08             	sub    esp,0x8
c0012477:	8d 44 24 38          	lea    eax,[esp+0x38]
c001247b:	50                   	push   eax
c001247c:	83 ec 24             	sub    esp,0x24
c001247f:	89 e0                	mov    eax,esp
c0012481:	89 c3                	mov    ebx,eax
c0012483:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012487:	ba 09 00 00 00       	mov    edx,0x9
c001248c:	89 df                	mov    edi,ebx
c001248e:	89 c6                	mov    esi,eax
c0012490:	89 d1                	mov    ecx,edx
c0012492:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012494:	e8 77 ab 00 00       	call   c001d010 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012499:	83 c4 30             	add    esp,0x30
c001249c:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00124a3:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c00124ab:	0f 84 4b ff ff ff    	je     c00123fc <ACPI::open(int, int, void*)+0x188>
c00124b1:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00124bc:	83 ec 0c             	sub    esp,0xc
c00124bf:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00124c6:	e8 f8 74 ff ff       	call   c00099c3 <malloc>
c00124cb:	83 c4 10             	add    esp,0x10
c00124ce:	89 c3                	mov    ebx,eax
c00124d0:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00124d5:	83 ec 04             	sub    esp,0x4
c00124d8:	50                   	push   eax
c00124d9:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00124e0:	53                   	push   ebx
c00124e1:	e8 ac aa ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c00124e6:	83 c4 10             	add    esp,0x10
c00124e9:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c00124f0:	83 ec 0c             	sub    esp,0xc
c00124f3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00124fa:	e8 65 ad ff ff       	call   c000d264 <File::exists()>
c00124ff:	83 c4 10             	add    esp,0x10
c0012502:	84 c0                	test   al,al
c0012504:	74 2a                	je     c0012530 <ACPI::open(int, int, void*)+0x2bc>
c0012506:	83 ec 08             	sub    esp,0x8
c0012509:	6a 01                	push   0x1
c001250b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012512:	e8 eb 4f 00 00       	call   c0017502 <Thr::loadDLL(char const*, bool)>
c0012517:	83 c4 10             	add    esp,0x10
c001251a:	83 ec 08             	sub    esp,0x8
c001251d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012524:	50                   	push   eax
c0012525:	e8 09 52 00 00       	call   c0017733 <Thr::executeDLL(unsigned long, void*)>
c001252a:	83 c4 10             	add    esp,0x10
c001252d:	8d 76 00             	lea    esi,[esi+0x0]
c0012530:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012538:	0f 84 be fe ff ff    	je     c00123fc <ACPI::open(int, int, void*)+0x188>
c001253e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012545:	8b 00                	mov    eax,DWORD PTR [eax]
c0012547:	83 c0 08             	add    eax,0x8
c001254a:	8b 00                	mov    eax,DWORD PTR [eax]
c001254c:	83 ec 0c             	sub    esp,0xc
c001254f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012556:	ff d0                	call   eax
c0012558:	83 c4 10             	add    esp,0x10
c001255b:	e9 9c fe ff ff       	jmp    c00123fc <ACPI::open(int, int, void*)+0x188>
c0012560:	83 ec 0c             	sub    esp,0xc
c0012563:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001256a:	50                   	push   eax
c001256b:	e8 fc f1 00 00       	call   c002176c <LinkedList<Device>::~LinkedList()>
c0012570:	83 c4 10             	add    esp,0x10
c0012573:	8b 1d 28 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026428
c0012579:	83 ec 08             	sub    esp,0x8
c001257c:	6a 01                	push   0x1
c001257e:	68 29 3e 02 c0       	push   0xc0023e29
c0012583:	e8 7a 4f 00 00       	call   c0017502 <Thr::loadDLL(char const*, bool)>
c0012588:	83 c4 10             	add    esp,0x10
c001258b:	83 ec 08             	sub    esp,0x8
c001258e:	53                   	push   ebx
c001258f:	50                   	push   eax
c0012590:	e8 9e 51 00 00       	call   c0017733 <Thr::executeDLL(unsigned long, void*)>
c0012595:	83 c4 10             	add    esp,0x10
c0012598:	8b 1d 28 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026428
c001259e:	83 ec 08             	sub    esp,0x8
c00125a1:	6a 01                	push   0x1
c00125a3:	68 46 3e 02 c0       	push   0xc0023e46
c00125a8:	e8 55 4f 00 00       	call   c0017502 <Thr::loadDLL(char const*, bool)>
c00125ad:	83 c4 10             	add    esp,0x10
c00125b0:	83 ec 08             	sub    esp,0x8
c00125b3:	53                   	push   ebx
c00125b4:	50                   	push   eax
c00125b5:	e8 79 51 00 00       	call   c0017733 <Thr::executeDLL(unsigned long, void*)>
c00125ba:	83 c4 10             	add    esp,0x10
c00125bd:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c00125c2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00125c8:	83 e0 04             	and    eax,0x4
c00125cb:	84 c0                	test   al,al
c00125cd:	0f 84 15 01 00 00    	je     c00126e8 <ACPI::open(int, int, void*)+0x474>
c00125d3:	83 ec 0c             	sub    esp,0xc
c00125d6:	68 63 3e 02 c0       	push   0xc0023e63
c00125db:	e8 3d 74 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00125e0:	83 c4 10             	add    esp,0x10
c00125e3:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00125ee:	83 ec 0c             	sub    esp,0xc
c00125f1:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00125f8:	e8 c6 73 ff ff       	call   c00099c3 <malloc>
c00125fd:	83 c4 10             	add    esp,0x10
c0012600:	89 c3                	mov    ebx,eax
c0012602:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0012607:	83 ec 04             	sub    esp,0x4
c001260a:	50                   	push   eax
c001260b:	68 80 3e 02 c0       	push   0xc0023e80
c0012610:	53                   	push   ebx
c0012611:	e8 7c a9 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0012616:	83 c4 10             	add    esp,0x10
c0012619:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012620:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012628:	74 1a                	je     c0012644 <ACPI::open(int, int, void*)+0x3d0>
c001262a:	83 ec 0c             	sub    esp,0xc
c001262d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012634:	e8 2b ac ff ff       	call   c000d264 <File::exists()>
c0012639:	83 c4 10             	add    esp,0x10
c001263c:	84 c0                	test   al,al
c001263e:	74 04                	je     c0012644 <ACPI::open(int, int, void*)+0x3d0>
c0012640:	b0 01                	mov    al,0x1
c0012642:	eb 04                	jmp    c0012648 <ACPI::open(int, int, void*)+0x3d4>
c0012644:	b0 00                	mov    al,0x0
c0012646:	66 90                	xchg   ax,ax
c0012648:	84 c0                	test   al,al
c001264a:	74 28                	je     c0012674 <ACPI::open(int, int, void*)+0x400>
c001264c:	83 ec 08             	sub    esp,0x8
c001264f:	6a 01                	push   0x1
c0012651:	68 80 3e 02 c0       	push   0xc0023e80
c0012656:	e8 a7 4e 00 00       	call   c0017502 <Thr::loadDLL(char const*, bool)>
c001265b:	83 c4 10             	add    esp,0x10
c001265e:	83 ec 08             	sub    esp,0x8
c0012661:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012668:	50                   	push   eax
c0012669:	e8 c5 50 00 00       	call   c0017733 <Thr::executeDLL(unsigned long, void*)>
c001266e:	83 c4 10             	add    esp,0x10
c0012671:	8d 76 00             	lea    esi,[esi+0x0]
c0012674:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001267c:	74 2a                	je     c00126a8 <ACPI::open(int, int, void*)+0x434>
c001267e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012686:	74 20                	je     c00126a8 <ACPI::open(int, int, void*)+0x434>
c0012688:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001268f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012691:	83 c0 08             	add    eax,0x8
c0012694:	8b 00                	mov    eax,DWORD PTR [eax]
c0012696:	83 ec 0c             	sub    esp,0xc
c0012699:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00126a0:	ff d0                	call   eax
c00126a2:	83 c4 10             	add    esp,0x10
c00126a5:	8d 76 00             	lea    esi,[esi+0x0]
c00126a8:	a1 c8 6c 02 c0       	mov    eax,ds:0xc0026cc8
c00126ad:	83 ec 08             	sub    esp,0x8
c00126b0:	68 9d 3e 02 c0       	push   0xc0023e9d
c00126b5:	50                   	push   eax
c00126b6:	e8 cd f1 ff ff       	call   c0011888 <findDataTable(unsigned char*, char*)>
c00126bb:	83 c4 10             	add    esp,0x10
c00126be:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00126c5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00126cd:	74 19                	je     c00126e8 <ACPI::open(int, int, void*)+0x474>
c00126cf:	83 ec 08             	sub    esp,0x8
c00126d2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00126d9:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00126e0:	e8 2b fb ff ff       	call   c0012210 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00126e5:	83 c4 10             	add    esp,0x10
c00126e8:	b8 00 00 00 00       	mov    eax,0x0
c00126ed:	81 c4 70 01 00 00    	add    esp,0x170
c00126f3:	5b                   	pop    ebx
c00126f4:	5e                   	pop    esi
c00126f5:	5f                   	pop    edi
c00126f6:	c3                   	ret    
c00126f7:	90                   	nop

c00126f8 <CPU::close(int, int, void*)>:
c00126f8:	31 c0                	xor    eax,eax
c00126fa:	c3                   	ret    
c00126fb:	90                   	nop

c00126fc <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00126fc:	55                   	push   ebp
c00126fd:	57                   	push   edi
c00126fe:	56                   	push   esi
c00126ff:	53                   	push   ebx
c0012700:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012704:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012708:	89 ce                	mov    esi,ecx
c001270a:	89 d5                	mov    ebp,edx
c001270c:	80 f9 04             	cmp    cl,0x4
c001270f:	75 28                	jne    c0012739 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012711:	8d 42 f9             	lea    eax,[edx-0x7]
c0012714:	3c 03                	cmp    al,0x3
c0012716:	0f 86 63 01 00 00    	jbe    c001287f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001271c:	80 fa 03             	cmp    dl,0x3
c001271f:	0f 84 5a 01 00 00    	je     c001287f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012725:	8d 7a f2             	lea    edi,[edx-0xe]
c0012728:	b8 f0 5c 02 c0       	mov    eax,0xc0025cf0
c001272d:	89 fb                	mov    ebx,edi
c001272f:	80 fb 01             	cmp    bl,0x1
c0012732:	77 4e                	ja     c0012782 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012734:	e9 52 01 00 00       	jmp    c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012739:	80 f9 05             	cmp    cl,0x5
c001273c:	75 4d                	jne    c001278b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001273e:	b8 00 5d 02 c0       	mov    eax,0xc0025d00
c0012743:	80 fa 03             	cmp    dl,0x3
c0012746:	0f 86 3f 01 00 00    	jbe    c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001274c:	8d 7a fa             	lea    edi,[edx-0x6]
c001274f:	b8 10 5d 02 c0       	mov    eax,0xc0025d10
c0012754:	89 fb                	mov    ebx,edi
c0012756:	80 fb 01             	cmp    bl,0x1
c0012759:	0f 86 2c 01 00 00    	jbe    c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001275f:	b8 20 5d 02 c0       	mov    eax,0xc0025d20
c0012764:	80 fa 08             	cmp    dl,0x8
c0012767:	0f 84 1e 01 00 00    	je     c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001276d:	89 d7                	mov    edi,edx
c001276f:	b8 30 5d 02 c0       	mov    eax,0xc0025d30
c0012774:	83 e7 fb             	and    edi,0xfffffffb
c0012777:	89 fb                	mov    ebx,edi
c0012779:	80 fb 09             	cmp    bl,0x9
c001277c:	0f 84 09 01 00 00    	je     c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012782:	31 c0                	xor    eax,eax
c0012784:	89 eb                	mov    ebx,ebp
c0012786:	0f b6 fb             	movzx  edi,bl
c0012789:	eb 30                	jmp    c00127bb <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001278b:	31 c0                	xor    eax,eax
c001278d:	80 f9 06             	cmp    cl,0x6
c0012790:	75 f2                	jne    c0012784 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012792:	80 fa 0a             	cmp    dl,0xa
c0012795:	77 ed                	ja     c0012784 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012797:	bf de 05 00 00       	mov    edi,0x5de
c001279c:	0f a3 d7             	bt     edi,edx
c001279f:	73 e3                	jae    c0012784 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00127a1:	b8 40 5d 02 c0       	mov    eax,0xc0025d40
c00127a6:	e9 e0 00 00 00       	jmp    c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127ab:	39 c7                	cmp    edi,eax
c00127ad:	0f 84 d3 00 00 00    	je     c0012886 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00127b3:	40                   	inc    eax
c00127b4:	3d d0 00 00 00       	cmp    eax,0xd0
c00127b9:	74 09                	je     c00127c4 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00127bb:	89 f3                	mov    ebx,esi
c00127bd:	80 fb 0f             	cmp    bl,0xf
c00127c0:	75 f1                	jne    c00127b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00127c2:	eb e7                	jmp    c00127ab <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00127c4:	80 f9 10             	cmp    cl,0x10
c00127c7:	75 14                	jne    c00127dd <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00127c9:	8d 42 fc             	lea    eax,[edx-0x4]
c00127cc:	83 e0 fb             	and    eax,0xfffffffb
c00127cf:	3c 02                	cmp    al,0x2
c00127d1:	76 34                	jbe    c0012807 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00127d3:	b8 25 40 02 c0       	mov    eax,0xc0024025
c00127d8:	80 fa 02             	cmp    dl,0x2
c00127db:	eb 24                	jmp    c0012801 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00127dd:	80 f9 11             	cmp    cl,0x11
c00127e0:	75 13                	jne    c00127f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00127e2:	b8 25 40 02 c0       	mov    eax,0xc0024025
c00127e7:	80 fa 03             	cmp    dl,0x3
c00127ea:	0f 85 9b 00 00 00    	jne    c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127f0:	e9 91 00 00 00       	jmp    c0012886 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00127f5:	80 f9 12             	cmp    cl,0x12
c00127f8:	75 14                	jne    c001280e <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00127fa:	b8 25 40 02 c0       	mov    eax,0xc0024025
c00127ff:	fe ca                	dec    dl
c0012801:	0f 85 84 00 00 00    	jne    c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012807:	b8 60 5d 02 c0       	mov    eax,0xc0025d60
c001280c:	eb 7d                	jmp    c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001280e:	80 f9 14             	cmp    cl,0x14
c0012811:	75 12                	jne    c0012825 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0012813:	4a                   	dec    edx
c0012814:	b8 25 40 02 c0       	mov    eax,0xc0024025
c0012819:	80 fa 01             	cmp    dl,0x1
c001281c:	77 6d                	ja     c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001281e:	b8 70 5d 02 c0       	mov    eax,0xc0025d70
c0012823:	eb 66                	jmp    c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012825:	80 f9 15             	cmp    cl,0x15
c0012828:	75 31                	jne    c001285b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001282a:	b8 80 5d 02 c0       	mov    eax,0xc0025d80
c001282f:	80 fa 01             	cmp    dl,0x1
c0012832:	74 57                	je     c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012834:	b8 25 40 02 c0       	mov    eax,0xc0024025
c0012839:	80 fa 13             	cmp    dl,0x13
c001283c:	76 0c                	jbe    c001284a <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001283e:	80 fa 30             	cmp    dl,0x30
c0012841:	75 48                	jne    c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012843:	b8 a0 5d 02 c0       	mov    eax,0xc0025da0
c0012848:	eb 41                	jmp    c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001284a:	b9 04 00 09 00       	mov    ecx,0x90004
c001284f:	0f a3 d1             	bt     ecx,edx
c0012852:	73 37                	jae    c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012854:	b8 90 5d 02 c0       	mov    eax,0xc0025d90
c0012859:	eb 30                	jmp    c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001285b:	b8 25 40 02 c0       	mov    eax,0xc0024025
c0012860:	80 f9 16             	cmp    cl,0x16
c0012863:	75 26                	jne    c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012865:	b8 b0 5d 02 c0       	mov    eax,0xc0025db0
c001286a:	84 d2                	test   dl,dl
c001286c:	74 1d                	je     c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001286e:	b8 25 40 02 c0       	mov    eax,0xc0024025
c0012873:	80 fa 30             	cmp    dl,0x30
c0012876:	75 13                	jne    c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012878:	b8 c0 5d 02 c0       	mov    eax,0xc0025dc0
c001287d:	eb 0c                	jmp    c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001287f:	b8 e0 5c 02 c0       	mov    eax,0xc0025ce0
c0012884:	eb 05                	jmp    c001288b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012886:	b8 50 5d 02 c0       	mov    eax,0xc0025d50
c001288b:	5b                   	pop    ebx
c001288c:	5e                   	pop    esi
c001288d:	5f                   	pop    edi
c001288e:	5d                   	pop    ebp
c001288f:	c3                   	ret    

c0012890 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012890:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012894:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012898:	80 f9 04             	cmp    cl,0x4
c001289b:	75 6b                	jne    c0012908 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001289d:	b8 40 5b 02 c0       	mov    eax,0xc0025b40
c00128a2:	80 fa 01             	cmp    dl,0x1
c00128a5:	0f 86 92 02 00 00    	jbe    c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128ab:	b8 50 5b 02 c0       	mov    eax,0xc0025b50
c00128b0:	80 fa 02             	cmp    dl,0x2
c00128b3:	0f 84 84 02 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128b9:	b8 60 5b 02 c0       	mov    eax,0xc0025b60
c00128be:	80 fa 03             	cmp    dl,0x3
c00128c1:	0f 84 76 02 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128c7:	b8 70 5b 02 c0       	mov    eax,0xc0025b70
c00128cc:	80 fa 04             	cmp    dl,0x4
c00128cf:	0f 84 68 02 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128d5:	b8 80 5b 02 c0       	mov    eax,0xc0025b80
c00128da:	80 fa 05             	cmp    dl,0x5
c00128dd:	0f 84 5a 02 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128e3:	b8 60 5b 02 c0       	mov    eax,0xc0025b60
c00128e8:	80 fa 07             	cmp    dl,0x7
c00128eb:	0f 84 4c 02 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128f1:	83 ea 08             	sub    edx,0x8
c00128f4:	b8 25 40 02 c0       	mov    eax,0xc0024025
c00128f9:	80 fa 01             	cmp    dl,0x1
c00128fc:	0f 87 3b 02 00 00    	ja     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012902:	b8 90 5b 02 c0       	mov    eax,0xc0025b90
c0012907:	c3                   	ret    
c0012908:	80 f9 05             	cmp    cl,0x5
c001290b:	75 45                	jne    c0012952 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001290d:	8d 4a ff             	lea    ecx,[edx-0x1]
c0012910:	b8 a0 5b 02 c0       	mov    eax,0xc0025ba0
c0012915:	80 f9 02             	cmp    cl,0x2
c0012918:	0f 86 1f 02 00 00    	jbe    c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001291e:	80 fa 04             	cmp    dl,0x4
c0012921:	0f 84 f3 01 00 00    	je     c0012b1a <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012927:	80 fa 07             	cmp    dl,0x7
c001292a:	0f 84 0d 02 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012930:	b8 b0 5b 02 c0       	mov    eax,0xc0025bb0
c0012935:	80 fa 08             	cmp    dl,0x8
c0012938:	0f 84 ff 01 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001293e:	b8 25 40 02 c0       	mov    eax,0xc0024025
c0012943:	80 fa 09             	cmp    dl,0x9
c0012946:	0f 85 f1 01 00 00    	jne    c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001294c:	b8 c0 5b 02 c0       	mov    eax,0xc0025bc0
c0012951:	c3                   	ret    
c0012952:	80 f9 06             	cmp    cl,0x6
c0012955:	0f 85 85 01 00 00    	jne    c0012ae0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001295b:	b8 d0 5b 02 c0       	mov    eax,0xc0025bd0
c0012960:	80 fa 01             	cmp    dl,0x1
c0012963:	0f 84 d4 01 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012969:	8d 42 fb             	lea    eax,[edx-0x5]
c001296c:	3c 01                	cmp    al,0x1
c001296e:	0f 86 ac 01 00 00    	jbe    c0012b20 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012974:	80 fa 03             	cmp    dl,0x3
c0012977:	0f 84 a3 01 00 00    	je     c0012b20 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001297d:	8d 4a f9             	lea    ecx,[edx-0x7]
c0012980:	b8 f0 5b 02 c0       	mov    eax,0xc0025bf0
c0012985:	80 f9 01             	cmp    cl,0x1
c0012988:	0f 86 af 01 00 00    	jbe    c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001298e:	80 fa 09             	cmp    dl,0x9
c0012991:	0f 84 8f 01 00 00    	je     c0012b26 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0012997:	8d 4a f6             	lea    ecx,[edx-0xa]
c001299a:	80 f9 01             	cmp    cl,0x1
c001299d:	0f 86 9a 01 00 00    	jbe    c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129a3:	b8 00 5c 02 c0       	mov    eax,0xc0025c00
c00129a8:	80 fa 0d             	cmp    dl,0xd
c00129ab:	0f 84 8c 01 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129b1:	b8 10 5c 02 c0       	mov    eax,0xc0025c10
c00129b6:	80 fa 0e             	cmp    dl,0xe
c00129b9:	0f 84 7e 01 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129bf:	b8 20 5c 02 c0       	mov    eax,0xc0025c20
c00129c4:	80 fa 0f             	cmp    dl,0xf
c00129c7:	0f 84 70 01 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129cd:	b8 00 5c 02 c0       	mov    eax,0xc0025c00
c00129d2:	80 fa 15             	cmp    dl,0x15
c00129d5:	0f 84 62 01 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129db:	8d 4a ea             	lea    ecx,[edx-0x16]
c00129de:	b8 20 5c 02 c0       	mov    eax,0xc0025c20
c00129e3:	80 f9 01             	cmp    cl,0x1
c00129e6:	0f 86 51 01 00 00    	jbe    c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129ec:	80 fa 1a             	cmp    dl,0x1a
c00129ef:	0f 84 37 01 00 00    	je     c0012b2c <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00129f5:	80 fa 1c             	cmp    dl,0x1c
c00129f8:	0f 84 34 01 00 00    	je     c0012b32 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00129fe:	80 fa 1d             	cmp    dl,0x1d
c0012a01:	0f 84 36 01 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a07:	b8 50 5c 02 c0       	mov    eax,0xc0025c50
c0012a0c:	80 fa 25             	cmp    dl,0x25
c0012a0f:	0f 84 28 01 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a15:	8d 4a da             	lea    ecx,[edx-0x26]
c0012a18:	b8 40 5c 02 c0       	mov    eax,0xc0025c40
c0012a1d:	80 f9 01             	cmp    cl,0x1
c0012a20:	0f 86 17 01 00 00    	jbe    c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a26:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0012a2b:	80 fa 2a             	cmp    dl,0x2a
c0012a2e:	0f 84 09 01 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a34:	b8 50 5c 02 c0       	mov    eax,0xc0025c50
c0012a39:	80 fa 2c             	cmp    dl,0x2c
c0012a3c:	0f 84 fb 00 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a42:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0012a47:	80 fa 2d             	cmp    dl,0x2d
c0012a4a:	0f 84 ed 00 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a50:	b8 30 5c 02 c0       	mov    eax,0xc0025c30
c0012a55:	80 fa 2e             	cmp    dl,0x2e
c0012a58:	0f 84 df 00 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a5e:	b8 50 5c 02 c0       	mov    eax,0xc0025c50
c0012a63:	80 fa 2f             	cmp    dl,0x2f
c0012a66:	0f 84 d1 00 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a6c:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012a6f:	b8 40 5c 02 c0       	mov    eax,0xc0025c40
c0012a74:	80 f9 01             	cmp    cl,0x1
c0012a77:	0f 86 c0 00 00 00    	jbe    c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a7d:	b8 70 5c 02 c0       	mov    eax,0xc0025c70
c0012a82:	80 fa 37             	cmp    dl,0x37
c0012a85:	0f 84 b2 00 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a8b:	b8 80 5c 02 c0       	mov    eax,0xc0025c80
c0012a90:	80 fa 3a             	cmp    dl,0x3a
c0012a93:	0f 84 a4 00 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a99:	b8 90 5c 02 c0       	mov    eax,0xc0025c90
c0012a9e:	80 fa 3c             	cmp    dl,0x3c
c0012aa1:	0f 84 96 00 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012aa7:	b8 a0 5c 02 c0       	mov    eax,0xc0025ca0
c0012aac:	80 fa 3d             	cmp    dl,0x3d
c0012aaf:	0f 84 88 00 00 00    	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ab5:	b8 80 5c 02 c0       	mov    eax,0xc0025c80
c0012aba:	80 fa 3e             	cmp    dl,0x3e
c0012abd:	74 7e                	je     c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012abf:	8d 42 bb             	lea    eax,[edx-0x45]
c0012ac2:	3c 01                	cmp    al,0x1
c0012ac4:	76 72                	jbe    c0012b38 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012ac6:	80 fa 3f             	cmp    dl,0x3f
c0012ac9:	74 6d                	je     c0012b38 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012acb:	80 fa 4a             	cmp    dl,0x4a
c0012ace:	74 0a                	je     c0012ada <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0012ad0:	b8 25 40 02 c0       	mov    eax,0xc0024025
c0012ad5:	80 fa 4d             	cmp    dl,0x4d
c0012ad8:	75 63                	jne    c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ada:	b8 70 5c 02 c0       	mov    eax,0xc0025c70
c0012adf:	c3                   	ret    
c0012ae0:	b8 25 40 02 c0       	mov    eax,0xc0024025
c0012ae5:	80 f9 0b             	cmp    cl,0xb
c0012ae8:	75 0a                	jne    c0012af4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0012aea:	fe ca                	dec    dl
c0012aec:	75 4f                	jne    c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012aee:	b8 b0 5c 02 c0       	mov    eax,0xc0025cb0
c0012af3:	c3                   	ret    
c0012af4:	80 f9 0f             	cmp    cl,0xf
c0012af7:	75 44                	jne    c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012af9:	b8 c0 5c 02 c0       	mov    eax,0xc0025cc0
c0012afe:	80 fa 02             	cmp    dl,0x2
c0012b01:	76 3a                	jbe    c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b03:	8d 42 fd             	lea    eax,[edx-0x3]
c0012b06:	3c 01                	cmp    al,0x1
c0012b08:	76 0a                	jbe    c0012b14 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0012b0a:	b8 25 40 02 c0       	mov    eax,0xc0024025
c0012b0f:	80 fa 06             	cmp    dl,0x6
c0012b12:	75 29                	jne    c0012b3d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b14:	b8 d0 5c 02 c0       	mov    eax,0xc0025cd0
c0012b19:	c3                   	ret    
c0012b1a:	b8 b0 5b 02 c0       	mov    eax,0xc0025bb0
c0012b1f:	c3                   	ret    
c0012b20:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c0012b25:	c3                   	ret    
c0012b26:	b8 00 5c 02 c0       	mov    eax,0xc0025c00
c0012b2b:	c3                   	ret    
c0012b2c:	b8 30 5c 02 c0       	mov    eax,0xc0025c30
c0012b31:	c3                   	ret    
c0012b32:	b8 40 5c 02 c0       	mov    eax,0xc0025c40
c0012b37:	c3                   	ret    
c0012b38:	b8 90 5c 02 c0       	mov    eax,0xc0025c90
c0012b3d:	c3                   	ret    

c0012b3e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0012b3e:	60                   	pusha  
c0012b3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b4b:	9c                   	pushf  
c0012b4c:	fa                   	cli    
c0012b4d:	0f 09                	wbinvd 
c0012b4f:	0f 30                	wrmsr  
c0012b51:	9d                   	popf   
c0012b52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b56:	89 02                	mov    DWORD PTR [edx],eax
c0012b58:	61                   	popa   
c0012b59:	c3                   	ret    

c0012b5a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0012b5a:	60                   	pusha  
c0012b5b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b5f:	9c                   	pushf  
c0012b60:	fa                   	cli    
c0012b61:	0f 09                	wbinvd 
c0012b63:	31 c0                	xor    eax,eax
c0012b65:	31 d2                	xor    edx,edx
c0012b67:	0f 32                	rdmsr  
c0012b69:	9d                   	popf   
c0012b6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b6e:	89 02                	mov    DWORD PTR [edx],eax
c0012b70:	61                   	popa   
c0012b71:	c3                   	ret    

c0012b72 <CPU::AMD_K6_writeback(int, int, int)>:
c0012b72:	56                   	push   esi
c0012b73:	53                   	push   ebx
c0012b74:	83 ec 10             	sub    esp,0x10
c0012b77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b7b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0012b80:	75 5d                	jne    c0012bdf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012b82:	83 f8 08             	cmp    eax,0x8
c0012b85:	75 09                	jne    c0012b90 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0012b87:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0012b8c:	7e 13                	jle    c0012ba1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012b8e:	eb 30                	jmp    c0012bc0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012b90:	83 f8 06             	cmp    eax,0x6
c0012b93:	7c 4a                	jl     c0012bdf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012b95:	83 f8 07             	cmp    eax,0x7
c0012b98:	7e 07                	jle    c0012ba1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012b9a:	83 f8 09             	cmp    eax,0x9
c0012b9d:	74 21                	je     c0012bc0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012b9f:	eb 3e                	jmp    c0012bdf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012ba1:	89 e6                	mov    esi,esp
c0012ba3:	8b 1d 68 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026468
c0012ba9:	56                   	push   esi
c0012baa:	c1 eb 15             	shr    ebx,0x15
c0012bad:	68 82 00 00 c0       	push   0xc0000082
c0012bb2:	83 e3 7e             	and    ebx,0x7e
c0012bb5:	e8 a0 ff ff ff       	call   c0012b5a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012bba:	56                   	push   esi
c0012bbb:	6a 00                	push   0x0
c0012bbd:	53                   	push   ebx
c0012bbe:	eb 12                	jmp    c0012bd2 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0012bc0:	89 e3                	mov    ebx,esp
c0012bc2:	53                   	push   ebx
c0012bc3:	68 82 00 00 c0       	push   0xc0000082
c0012bc8:	e8 8d ff ff ff       	call   c0012b5a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012bcd:	53                   	push   ebx
c0012bce:	6a 00                	push   0x0
c0012bd0:	6a 00                	push   0x0
c0012bd2:	68 82 00 00 c0       	push   0xc0000082
c0012bd7:	e8 62 ff ff ff       	call   c0012b3e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0012bdc:	83 c4 18             	add    esp,0x18
c0012bdf:	83 c4 10             	add    esp,0x10
c0012be2:	5b                   	pop    ebx
c0012be3:	5e                   	pop    esi
c0012be4:	c3                   	ret    
c0012be5:	90                   	nop

c0012be6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0012be6:	55                   	push   ebp
c0012be7:	57                   	push   edi
c0012be8:	56                   	push   esi
c0012be9:	53                   	push   ebx
c0012bea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012bee:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012bf2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012bf6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0012bfa:	39 05 e0 5d 02 c0    	cmp    DWORD PTR ds:0xc0025de0,eax
c0012c00:	75 23                	jne    c0012c25 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0012c02:	a1 2c 6f 02 c0       	mov    eax,ds:0xc0026f2c
c0012c07:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012c0b:	89 06                	mov    DWORD PTR [esi],eax
c0012c0d:	a1 28 6f 02 c0       	mov    eax,ds:0xc0026f28
c0012c12:	89 07                	mov    DWORD PTR [edi],eax
c0012c14:	a1 24 6f 02 c0       	mov    eax,ds:0xc0026f24
c0012c19:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012c1c:	a1 20 6f 02 c0       	mov    eax,ds:0xc0026f20
c0012c21:	89 02                	mov    DWORD PTR [edx],eax
c0012c23:	eb 3f                	jmp    c0012c64 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0012c25:	31 c9                	xor    ecx,ecx
c0012c27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c2b:	0f a2                	cpuid  
c0012c2d:	89 06                	mov    DWORD PTR [esi],eax
c0012c2f:	89 1f                	mov    DWORD PTR [edi],ebx
c0012c31:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c35:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0012c38:	89 10                	mov    DWORD PTR [eax],edx
c0012c3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c3e:	a3 e0 5d 02 c0       	mov    ds:0xc0025de0,eax
c0012c43:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c45:	a3 2c 6f 02 c0       	mov    ds:0xc0026f2c,eax
c0012c4a:	8b 07                	mov    eax,DWORD PTR [edi]
c0012c4c:	a3 28 6f 02 c0       	mov    ds:0xc0026f28,eax
c0012c51:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c54:	a3 24 6f 02 c0       	mov    ds:0xc0026f24,eax
c0012c59:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c5f:	a3 20 6f 02 c0       	mov    ds:0xc0026f20,eax
c0012c64:	5b                   	pop    ebx
c0012c65:	5e                   	pop    esi
c0012c66:	5f                   	pop    edi
c0012c67:	5d                   	pop    ebp
c0012c68:	c3                   	ret    
c0012c69:	90                   	nop

c0012c6a <CPU::cpuidCheckEDX(unsigned int)>:
c0012c6a:	83 ec 10             	sub    esp,0x10
c0012c6d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c71:	50                   	push   eax
c0012c72:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c76:	50                   	push   eax
c0012c77:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c7b:	50                   	push   eax
c0012c7c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c80:	50                   	push   eax
c0012c81:	6a 01                	push   0x1
c0012c83:	e8 5e ff ff ff       	call   c0012be6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012c88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c8c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0012c90:	0f 95 c0             	setne  al
c0012c93:	83 c4 24             	add    esp,0x24
c0012c96:	c3                   	ret    
c0012c97:	90                   	nop

c0012c98 <CPU::cpuidCheckECX(unsigned int)>:
c0012c98:	83 ec 10             	sub    esp,0x10
c0012c9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c9f:	50                   	push   eax
c0012ca0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ca4:	50                   	push   eax
c0012ca5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ca9:	50                   	push   eax
c0012caa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cae:	50                   	push   eax
c0012caf:	6a 01                	push   0x1
c0012cb1:	e8 30 ff ff ff       	call   c0012be6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012cb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012cba:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012cbe:	0f 95 c0             	setne  al
c0012cc1:	83 c4 24             	add    esp,0x24
c0012cc4:	c3                   	ret    
c0012cc5:	90                   	nop

c0012cc6 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0012cc6:	83 ec 10             	sub    esp,0x10
c0012cc9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ccd:	50                   	push   eax
c0012cce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cd2:	50                   	push   eax
c0012cd3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cd7:	50                   	push   eax
c0012cd8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cdc:	50                   	push   eax
c0012cdd:	6a 07                	push   0x7
c0012cdf:	e8 02 ff ff ff       	call   c0012be6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012ce4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012ce8:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0012cec:	0f 95 c0             	setne  al
c0012cef:	83 c4 24             	add    esp,0x24
c0012cf2:	c3                   	ret    
c0012cf3:	90                   	nop

c0012cf4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0012cf4:	83 ec 10             	sub    esp,0x10
c0012cf7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cfb:	50                   	push   eax
c0012cfc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d00:	50                   	push   eax
c0012d01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d05:	50                   	push   eax
c0012d06:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d0a:	50                   	push   eax
c0012d0b:	6a 07                	push   0x7
c0012d0d:	e8 d4 fe ff ff       	call   c0012be6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d16:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012d1a:	0f 95 c0             	setne  al
c0012d1d:	83 c4 24             	add    esp,0x24
c0012d20:	c3                   	ret    
c0012d21:	90                   	nop

c0012d22 <CPU::CPU()>:
c0012d22:	83 ec 0c             	sub    esp,0xc
c0012d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d29:	83 ec 08             	sub    esp,0x8
c0012d2c:	68 25 40 02 c0       	push   0xc0024025
c0012d31:	50                   	push   eax
c0012d32:	e8 43 b3 ff ff       	call   c000e07a <Device::Device(char const*)>
c0012d37:	83 c4 10             	add    esp,0x10
c0012d3a:	ba 48 42 02 c0       	mov    edx,0xc0024248
c0012d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d43:	89 10                	mov    DWORD PTR [eax],edx
c0012d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d49:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0012d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d57:	05 78 01 00 00       	add    eax,0x178
c0012d5c:	83 ec 0c             	sub    esp,0xc
c0012d5f:	50                   	push   eax
c0012d60:	e8 f5 64 ff ff       	call   c000925a <GDT::GDT()>
c0012d65:	83 c4 10             	add    esp,0x10
c0012d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d6c:	05 7c 09 00 00       	add    eax,0x97c
c0012d71:	83 ec 0c             	sub    esp,0xc
c0012d74:	50                   	push   eax
c0012d75:	e8 36 67 ff ff       	call   c00094b0 <IDT::IDT()>
c0012d7a:	83 c4 10             	add    esp,0x10
c0012d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d81:	05 7c 11 00 00       	add    eax,0x117c
c0012d86:	83 ec 0c             	sub    esp,0xc
c0012d89:	50                   	push   eax
c0012d8a:	e8 01 82 ff ff       	call   c000af90 <TSS::TSS()>
c0012d8f:	83 c4 10             	add    esp,0x10
c0012d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d96:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0012d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012da1:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0012dab:	90                   	nop
c0012dac:	83 c4 0c             	add    esp,0xc
c0012daf:	c3                   	ret    

c0012db0 <CPU::displayFeatures()>:
c0012db0:	c3                   	ret    
c0012db1:	90                   	nop

c0012db2 <CPU::detectFeatures()>:
c0012db2:	55                   	push   ebp
c0012db3:	57                   	push   edi
c0012db4:	56                   	push   esi
c0012db5:	53                   	push   ebx
c0012db6:	83 ec 50             	sub    esp,0x50
c0012db9:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0012dbd:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0012dc7:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0012dce:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0012dd4:	6a 0d                	push   0xd
c0012dd6:	6a 00                	push   0x0
c0012dd8:	55                   	push   ebp
c0012dd9:	e8 a6 d8 fe ff       	call   c0000684 <memset>
c0012dde:	83 c4 10             	add    esp,0x10
c0012de1:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0012de6:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0012ded:	0f 84 22 09 00 00    	je     c0013715 <CPU::detectFeatures()+0x963>
c0012df3:	83 ec 0c             	sub    esp,0xc
c0012df6:	89 ef                	mov    edi,ebp
c0012df8:	6a 10                	push   0x10
c0012dfa:	e8 6b fe ff ff       	call   c0012c6a <CPU::cpuidCheckEDX(unsigned int)>
c0012dff:	83 e0 01             	and    eax,0x1
c0012e02:	8d 14 00             	lea    edx,[eax+eax*1]
c0012e05:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e0b:	83 e0 fd             	and    eax,0xfffffffd
c0012e0e:	09 d0                	or     eax,edx
c0012e10:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e16:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0012e1d:	e8 48 fe ff ff       	call   c0012c6a <CPU::cpuidCheckEDX(unsigned int)>
c0012e22:	83 e0 01             	and    eax,0x1
c0012e25:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0012e2c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e32:	83 e0 fb             	and    eax,0xfffffffb
c0012e35:	09 d0                	or     eax,edx
c0012e37:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e3d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012e44:	e8 21 fe ff ff       	call   c0012c6a <CPU::cpuidCheckEDX(unsigned int)>
c0012e49:	83 e0 01             	and    eax,0x1
c0012e4c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012e53:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e59:	83 e0 f7             	and    eax,0xfffffff7
c0012e5c:	09 d0                	or     eax,edx
c0012e5e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e64:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0012e6b:	e8 fa fd ff ff       	call   c0012c6a <CPU::cpuidCheckEDX(unsigned int)>
c0012e70:	83 e0 01             	and    eax,0x1
c0012e73:	c1 e0 04             	shl    eax,0x4
c0012e76:	88 c2                	mov    dl,al
c0012e78:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e7e:	83 e0 ef             	and    eax,0xffffffef
c0012e81:	09 d0                	or     eax,edx
c0012e83:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e89:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0012e90:	e8 d5 fd ff ff       	call   c0012c6a <CPU::cpuidCheckEDX(unsigned int)>
c0012e95:	83 e0 01             	and    eax,0x1
c0012e98:	c1 e0 05             	shl    eax,0x5
c0012e9b:	88 c2                	mov    dl,al
c0012e9d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012ea3:	83 e0 df             	and    eax,0xffffffdf
c0012ea6:	09 d0                	or     eax,edx
c0012ea8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012eae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0012eb5:	e8 b0 fd ff ff       	call   c0012c6a <CPU::cpuidCheckEDX(unsigned int)>
c0012eba:	83 e0 01             	and    eax,0x1
c0012ebd:	8d 14 00             	lea    edx,[eax+eax*1]
c0012ec0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0012ec6:	83 e0 fd             	and    eax,0xfffffffd
c0012ec9:	09 d0                	or     eax,edx
c0012ecb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0012ed1:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0012ed8:	e8 8d fd ff ff       	call   c0012c6a <CPU::cpuidCheckEDX(unsigned int)>
c0012edd:	83 e0 01             	and    eax,0x1
c0012ee0:	c1 e0 06             	shl    eax,0x6
c0012ee3:	88 c2                	mov    dl,al
c0012ee5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0012eeb:	83 e0 bf             	and    eax,0xffffffbf
c0012eee:	09 d0                	or     eax,edx
c0012ef0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0012ef6:	58                   	pop    eax
c0012ef7:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012efb:	50                   	push   eax
c0012efc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f00:	50                   	push   eax
c0012f01:	8d 74 24 28          	lea    esi,[esp+0x28]
c0012f05:	56                   	push   esi
c0012f06:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f0a:	50                   	push   eax
c0012f0b:	6a 00                	push   0x0
c0012f0d:	e8 d4 fc ff ff       	call   c0012be6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012f12:	b8 04 00 00 00       	mov    eax,0x4
c0012f17:	89 c1                	mov    ecx,eax
c0012f19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f1b:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0012f21:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012f25:	89 c1                	mov    ecx,eax
c0012f27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f29:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0012f2f:	8d 74 24 38          	lea    esi,[esp+0x38]
c0012f33:	89 c1                	mov    ecx,eax
c0012f35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f37:	83 c4 18             	add    esp,0x18
c0012f3a:	68 d0 3e 02 c0       	push   0xc0023ed0
c0012f3f:	55                   	push   ebp
c0012f40:	e8 87 d8 fe ff       	call   c00007cc <strcmp>
c0012f45:	83 c4 10             	add    esp,0x10
c0012f48:	85 c0                	test   eax,eax
c0012f4a:	75 0f                	jne    c0012f5b <CPU::detectFeatures()+0x1a9>
c0012f4c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0012f56:	e9 22 02 00 00       	jmp    c001317d <CPU::detectFeatures()+0x3cb>
c0012f5b:	50                   	push   eax
c0012f5c:	50                   	push   eax
c0012f5d:	68 dd 3e 02 c0       	push   0xc0023edd
c0012f62:	55                   	push   ebp
c0012f63:	e8 64 d8 fe ff       	call   c00007cc <strcmp>
c0012f68:	83 c4 10             	add    esp,0x10
c0012f6b:	85 c0                	test   eax,eax
c0012f6d:	74 dd                	je     c0012f4c <CPU::detectFeatures()+0x19a>
c0012f6f:	50                   	push   eax
c0012f70:	50                   	push   eax
c0012f71:	68 ea 3e 02 c0       	push   0xc0023eea
c0012f76:	55                   	push   ebp
c0012f77:	e8 50 d8 fe ff       	call   c00007cc <strcmp>
c0012f7c:	83 c4 10             	add    esp,0x10
c0012f7f:	85 c0                	test   eax,eax
c0012f81:	74 2a                	je     c0012fad <CPU::detectFeatures()+0x1fb>
c0012f83:	50                   	push   eax
c0012f84:	50                   	push   eax
c0012f85:	68 f7 3e 02 c0       	push   0xc0023ef7
c0012f8a:	55                   	push   ebp
c0012f8b:	e8 3c d8 fe ff       	call   c00007cc <strcmp>
c0012f90:	83 c4 10             	add    esp,0x10
c0012f93:	85 c0                	test   eax,eax
c0012f95:	74 16                	je     c0012fad <CPU::detectFeatures()+0x1fb>
c0012f97:	50                   	push   eax
c0012f98:	50                   	push   eax
c0012f99:	68 04 3f 02 c0       	push   0xc0023f04
c0012f9e:	55                   	push   ebp
c0012f9f:	e8 28 d8 fe ff       	call   c00007cc <strcmp>
c0012fa4:	83 c4 10             	add    esp,0x10
c0012fa7:	85 c0                	test   eax,eax
c0012fa9:	74 48                	je     c0012ff3 <CPU::detectFeatures()+0x241>
c0012fab:	eb 0f                	jmp    c0012fbc <CPU::detectFeatures()+0x20a>
c0012fad:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0012fb7:	e9 c1 01 00 00       	jmp    c001317d <CPU::detectFeatures()+0x3cb>
c0012fbc:	50                   	push   eax
c0012fbd:	50                   	push   eax
c0012fbe:	68 11 3f 02 c0       	push   0xc0023f11
c0012fc3:	55                   	push   ebp
c0012fc4:	e8 03 d8 fe ff       	call   c00007cc <strcmp>
c0012fc9:	83 c4 10             	add    esp,0x10
c0012fcc:	85 c0                	test   eax,eax
c0012fce:	74 23                	je     c0012ff3 <CPU::detectFeatures()+0x241>
c0012fd0:	57                   	push   edi
c0012fd1:	57                   	push   edi
c0012fd2:	68 1e 3f 02 c0       	push   0xc0023f1e
c0012fd7:	55                   	push   ebp
c0012fd8:	e8 ef d7 fe ff       	call   c00007cc <strcmp>
c0012fdd:	83 c4 10             	add    esp,0x10
c0012fe0:	85 c0                	test   eax,eax
c0012fe2:	75 1e                	jne    c0013002 <CPU::detectFeatures()+0x250>
c0012fe4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0012fee:	e9 8a 01 00 00       	jmp    c001317d <CPU::detectFeatures()+0x3cb>
c0012ff3:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0012ffd:	e9 7b 01 00 00       	jmp    c001317d <CPU::detectFeatures()+0x3cb>
c0013002:	56                   	push   esi
c0013003:	56                   	push   esi
c0013004:	68 2b 3f 02 c0       	push   0xc0023f2b
c0013009:	55                   	push   ebp
c001300a:	e8 bd d7 fe ff       	call   c00007cc <strcmp>
c001300f:	83 c4 10             	add    esp,0x10
c0013012:	85 c0                	test   eax,eax
c0013014:	75 0f                	jne    c0013025 <CPU::detectFeatures()+0x273>
c0013016:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013020:	e9 58 01 00 00       	jmp    c001317d <CPU::detectFeatures()+0x3cb>
c0013025:	51                   	push   ecx
c0013026:	51                   	push   ecx
c0013027:	68 ea 3e 02 c0       	push   0xc0023eea
c001302c:	55                   	push   ebp
c001302d:	e8 9a d7 fe ff       	call   c00007cc <strcmp>
c0013032:	83 c4 10             	add    esp,0x10
c0013035:	85 c0                	test   eax,eax
c0013037:	75 0f                	jne    c0013048 <CPU::detectFeatures()+0x296>
c0013039:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013043:	e9 35 01 00 00       	jmp    c001317d <CPU::detectFeatures()+0x3cb>
c0013048:	52                   	push   edx
c0013049:	52                   	push   edx
c001304a:	68 38 3f 02 c0       	push   0xc0023f38
c001304f:	55                   	push   ebp
c0013050:	e8 77 d7 fe ff       	call   c00007cc <strcmp>
c0013055:	83 c4 10             	add    esp,0x10
c0013058:	85 c0                	test   eax,eax
c001305a:	75 0f                	jne    c001306b <CPU::detectFeatures()+0x2b9>
c001305c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013066:	e9 12 01 00 00       	jmp    c001317d <CPU::detectFeatures()+0x3cb>
c001306b:	50                   	push   eax
c001306c:	50                   	push   eax
c001306d:	68 45 3f 02 c0       	push   0xc0023f45
c0013072:	55                   	push   ebp
c0013073:	e8 54 d7 fe ff       	call   c00007cc <strcmp>
c0013078:	83 c4 10             	add    esp,0x10
c001307b:	85 c0                	test   eax,eax
c001307d:	75 0f                	jne    c001308e <CPU::detectFeatures()+0x2dc>
c001307f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013089:	e9 ef 00 00 00       	jmp    c001317d <CPU::detectFeatures()+0x3cb>
c001308e:	50                   	push   eax
c001308f:	50                   	push   eax
c0013090:	68 52 3f 02 c0       	push   0xc0023f52
c0013095:	55                   	push   ebp
c0013096:	e8 31 d7 fe ff       	call   c00007cc <strcmp>
c001309b:	83 c4 10             	add    esp,0x10
c001309e:	85 c0                	test   eax,eax
c00130a0:	75 0f                	jne    c00130b1 <CPU::detectFeatures()+0x2ff>
c00130a2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00130ac:	e9 cc 00 00 00       	jmp    c001317d <CPU::detectFeatures()+0x3cb>
c00130b1:	50                   	push   eax
c00130b2:	50                   	push   eax
c00130b3:	68 5f 3f 02 c0       	push   0xc0023f5f
c00130b8:	55                   	push   ebp
c00130b9:	e8 0e d7 fe ff       	call   c00007cc <strcmp>
c00130be:	83 c4 10             	add    esp,0x10
c00130c1:	85 c0                	test   eax,eax
c00130c3:	75 0f                	jne    c00130d4 <CPU::detectFeatures()+0x322>
c00130c5:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00130cf:	e9 a9 00 00 00       	jmp    c001317d <CPU::detectFeatures()+0x3cb>
c00130d4:	50                   	push   eax
c00130d5:	50                   	push   eax
c00130d6:	68 6c 3f 02 c0       	push   0xc0023f6c
c00130db:	55                   	push   ebp
c00130dc:	e8 eb d6 fe ff       	call   c00007cc <strcmp>
c00130e1:	83 c4 10             	add    esp,0x10
c00130e4:	85 c0                	test   eax,eax
c00130e6:	75 0f                	jne    c00130f7 <CPU::detectFeatures()+0x345>
c00130e8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00130f2:	e9 86 00 00 00       	jmp    c001317d <CPU::detectFeatures()+0x3cb>
c00130f7:	50                   	push   eax
c00130f8:	50                   	push   eax
c00130f9:	68 79 3f 02 c0       	push   0xc0023f79
c00130fe:	55                   	push   ebp
c00130ff:	e8 c8 d6 fe ff       	call   c00007cc <strcmp>
c0013104:	83 c4 10             	add    esp,0x10
c0013107:	85 c0                	test   eax,eax
c0013109:	75 0c                	jne    c0013117 <CPU::detectFeatures()+0x365>
c001310b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013115:	eb 66                	jmp    c001317d <CPU::detectFeatures()+0x3cb>
c0013117:	50                   	push   eax
c0013118:	50                   	push   eax
c0013119:	68 86 3f 02 c0       	push   0xc0023f86
c001311e:	55                   	push   ebp
c001311f:	e8 a8 d6 fe ff       	call   c00007cc <strcmp>
c0013124:	83 c4 10             	add    esp,0x10
c0013127:	85 c0                	test   eax,eax
c0013129:	75 0c                	jne    c0013137 <CPU::detectFeatures()+0x385>
c001312b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013135:	eb 46                	jmp    c001317d <CPU::detectFeatures()+0x3cb>
c0013137:	57                   	push   edi
c0013138:	57                   	push   edi
c0013139:	68 93 3f 02 c0       	push   0xc0023f93
c001313e:	55                   	push   ebp
c001313f:	e8 88 d6 fe ff       	call   c00007cc <strcmp>
c0013144:	83 c4 10             	add    esp,0x10
c0013147:	85 c0                	test   eax,eax
c0013149:	74 e0                	je     c001312b <CPU::detectFeatures()+0x379>
c001314b:	56                   	push   esi
c001314c:	56                   	push   esi
c001314d:	68 a0 3f 02 c0       	push   0xc0023fa0
c0013152:	55                   	push   ebp
c0013153:	e8 74 d6 fe ff       	call   c00007cc <strcmp>
c0013158:	83 c4 10             	add    esp,0x10
c001315b:	85 c0                	test   eax,eax
c001315d:	74 cc                	je     c001312b <CPU::detectFeatures()+0x379>
c001315f:	51                   	push   ecx
c0013160:	51                   	push   ecx
c0013161:	68 ad 3f 02 c0       	push   0xc0023fad
c0013166:	55                   	push   ebp
c0013167:	e8 60 d6 fe ff       	call   c00007cc <strcmp>
c001316c:	83 c4 10             	add    esp,0x10
c001316f:	85 c0                	test   eax,eax
c0013171:	74 b8                	je     c001312b <CPU::detectFeatures()+0x379>
c0013173:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001317d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013182:	0f 86 be 00 00 00    	jbe    c0013246 <CPU::detectFeatures()+0x494>
c0013188:	83 ec 0c             	sub    esp,0xc
c001318b:	68 80 00 00 00       	push   0x80
c0013190:	e8 31 fb ff ff       	call   c0012cc6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013195:	83 e0 01             	and    eax,0x1
c0013198:	c1 e0 06             	shl    eax,0x6
c001319b:	88 c2                	mov    dl,al
c001319d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00131a3:	83 e0 bf             	and    eax,0xffffffbf
c00131a6:	09 d0                	or     eax,edx
c00131a8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00131ae:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00131b5:	e8 0c fb ff ff       	call   c0012cc6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00131ba:	83 e0 01             	and    eax,0x1
c00131bd:	c1 e0 04             	shl    eax,0x4
c00131c0:	88 c2                	mov    dl,al
c00131c2:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00131c8:	83 e0 ef             	and    eax,0xffffffef
c00131cb:	09 d0                	or     eax,edx
c00131cd:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00131d3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00131da:	e8 e7 fa ff ff       	call   c0012cc6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00131df:	c1 e0 07             	shl    eax,0x7
c00131e2:	88 c2                	mov    dl,al
c00131e4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00131ea:	83 e0 7f             	and    eax,0x7f
c00131ed:	09 d0                	or     eax,edx
c00131ef:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00131f5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00131fc:	e8 f3 fa ff ff       	call   c0012cf4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013201:	83 e0 01             	and    eax,0x1
c0013204:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001320b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013211:	83 e0 f7             	and    eax,0xfffffff7
c0013214:	09 d0                	or     eax,edx
c0013216:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001321c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0013223:	e8 cc fa ff ff       	call   c0012cf4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013228:	83 c4 10             	add    esp,0x10
c001322b:	83 e0 01             	and    eax,0x1
c001322e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013235:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001323b:	83 e0 fb             	and    eax,0xfffffffb
c001323e:	09 d0                	or     eax,edx
c0013240:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013246:	83 ec 0c             	sub    esp,0xc
c0013249:	8d 44 24 28          	lea    eax,[esp+0x28]
c001324d:	50                   	push   eax
c001324e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013252:	50                   	push   eax
c0013253:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013257:	56                   	push   esi
c0013258:	8d 44 24 28          	lea    eax,[esp+0x28]
c001325c:	50                   	push   eax
c001325d:	6a 01                	push   0x1
c001325f:	e8 82 f9 ff ff       	call   c0012be6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013264:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013268:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001326e:	88 ca                	mov    dl,cl
c0013270:	83 e0 f0             	and    eax,0xfffffff0
c0013273:	83 e2 0f             	and    edx,0xf
c0013276:	09 d0                	or     eax,edx
c0013278:	88 ca                	mov    dl,cl
c001327a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0013280:	c0 ea 04             	shr    dl,0x4
c0013283:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0013287:	0f b6 c2             	movzx  eax,dl
c001328a:	83 c4 20             	add    esp,0x20
c001328d:	c1 e0 06             	shl    eax,0x6
c0013290:	89 c7                	mov    edi,eax
c0013292:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013298:	66 25 3f c0          	and    ax,0xc03f
c001329c:	09 f8                	or     eax,edi
c001329e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00132a5:	89 c8                	mov    eax,ecx
c00132a7:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00132ae:	c1 e8 08             	shr    eax,0x8
c00132b1:	83 e5 3f             	and    ebp,0x3f
c00132b4:	83 e0 0f             	and    eax,0xf
c00132b7:	89 c7                	mov    edi,eax
c00132b9:	c1 e7 06             	shl    edi,0x6
c00132bc:	09 ef                	or     edi,ebp
c00132be:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00132c5:	89 fa                	mov    edx,edi
c00132c7:	83 e5 c0             	and    ebp,0xffffffc0
c00132ca:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00132d0:	88 c2                	mov    dl,al
c00132d2:	c0 ea 02             	shr    dl,0x2
c00132d5:	89 d7                	mov    edi,edx
c00132d7:	09 ef                	or     edi,ebp
c00132d9:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00132df:	89 fa                	mov    edx,edi
c00132e1:	83 e5 cf             	and    ebp,0xffffffcf
c00132e4:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00132ea:	89 cf                	mov    edi,ecx
c00132ec:	c1 ef 0c             	shr    edi,0xc
c00132ef:	83 e7 03             	and    edi,0x3
c00132f2:	c1 e7 04             	shl    edi,0x4
c00132f5:	09 ef                	or     edi,ebp
c00132f7:	3c 06                	cmp    al,0x6
c00132f9:	89 fa                	mov    edx,edi
c00132fb:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0013301:	74 04                	je     c0013307 <CPU::detectFeatures()+0x555>
c0013303:	3c 0f                	cmp    al,0xf
c0013305:	75 5c                	jne    c0013363 <CPU::detectFeatures()+0x5b1>
c0013307:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001330b:	89 cf                	mov    edi,ecx
c001330d:	c1 ef 10             	shr    edi,0x10
c0013310:	c1 e7 04             	shl    edi,0x4
c0013313:	09 fa                	or     edx,edi
c0013315:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001331b:	0f b6 d2             	movzx  edx,dl
c001331e:	66 81 e7 3f c0       	and    di,0xc03f
c0013323:	c1 e2 06             	shl    edx,0x6
c0013326:	09 fa                	or     edx,edi
c0013328:	3c 0f                	cmp    al,0xf
c001332a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0013331:	75 30                	jne    c0013363 <CPU::detectFeatures()+0x5b1>
c0013333:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013339:	c1 e9 14             	shr    ecx,0x14
c001333c:	83 e0 3f             	and    eax,0x3f
c001333f:	83 c1 0f             	add    ecx,0xf
c0013342:	88 ca                	mov    dl,cl
c0013344:	c0 e9 02             	shr    cl,0x2
c0013347:	c1 e2 06             	shl    edx,0x6
c001334a:	09 d0                	or     eax,edx
c001334c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0013352:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0013358:	83 e0 c0             	and    eax,0xffffffc0
c001335b:	09 c1                	or     ecx,eax
c001335d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0013363:	83 ec 0c             	sub    esp,0xc
c0013366:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001336d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013371:	50                   	push   eax
c0013372:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0013376:	55                   	push   ebp
c0013377:	56                   	push   esi
c0013378:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001337c:	57                   	push   edi
c001337d:	68 00 00 00 80       	push   0x80000000
c0013382:	e8 5f f8 ff ff       	call   c0012be6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013387:	83 c4 20             	add    esp,0x20
c001338a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0013392:	76 22                	jbe    c00133b6 <CPU::detectFeatures()+0x604>
c0013394:	83 ec 0c             	sub    esp,0xc
c0013397:	8d 44 24 28          	lea    eax,[esp+0x28]
c001339b:	50                   	push   eax
c001339c:	55                   	push   ebp
c001339d:	56                   	push   esi
c001339e:	57                   	push   edi
c001339f:	68 01 00 00 80       	push   0x80000001
c00133a4:	e8 3d f8 ff ff       	call   c0012be6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133a9:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00133b3:	83 c4 20             	add    esp,0x20
c00133b6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00133bc:	83 f8 01             	cmp    eax,0x1
c00133bf:	75 6f                	jne    c0013430 <CPU::detectFeatures()+0x67e>
c00133c1:	51                   	push   ecx
c00133c2:	51                   	push   ecx
c00133c3:	68 b9 3f 02 c0       	push   0xc0023fb9
c00133c8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00133cc:	56                   	push   esi
c00133cd:	e8 6e d3 fe ff       	call   c0000740 <strcpy>
c00133d2:	5f                   	pop    edi
c00133d3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00133d9:	5d                   	pop    ebp
c00133da:	66 c1 e8 06          	shr    ax,0x6
c00133de:	0f b6 c0             	movzx  eax,al
c00133e1:	50                   	push   eax
c00133e2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00133e8:	c1 e8 0e             	shr    eax,0xe
c00133eb:	0f b6 c0             	movzx  eax,al
c00133ee:	50                   	push   eax
c00133ef:	e8 9c f4 ff ff       	call   c0012890 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00133f4:	5a                   	pop    edx
c00133f5:	59                   	pop    ecx
c00133f6:	50                   	push   eax
c00133f7:	56                   	push   esi
c00133f8:	e8 83 d4 fe ff       	call   c0000880 <strcat>
c00133fd:	5f                   	pop    edi
c00133fe:	5d                   	pop    ebp
c00133ff:	56                   	push   esi
c0013400:	53                   	push   ebx
c0013401:	e8 66 ac ff ff       	call   c000e06c <Device::setName(char const*)>
c0013406:	58                   	pop    eax
c0013407:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001340d:	5a                   	pop    edx
c001340e:	68 c0 3f 02 c0       	push   0xc0023fc0
c0013413:	50                   	push   eax
c0013414:	e8 b3 d3 fe ff       	call   c00007cc <strcmp>
c0013419:	83 c4 10             	add    esp,0x10
c001341c:	85 c0                	test   eax,eax
c001341e:	0f 85 71 03 00 00    	jne    c0013795 <CPU::detectFeatures()+0x9e3>
c0013424:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001342b:	e9 65 03 00 00       	jmp    c0013795 <CPU::detectFeatures()+0x9e3>
c0013430:	83 f8 02             	cmp    eax,0x2
c0013433:	0f 85 b5 00 00 00    	jne    c00134ee <CPU::detectFeatures()+0x73c>
c0013439:	57                   	push   edi
c001343a:	57                   	push   edi
c001343b:	68 d2 3f 02 c0       	push   0xc0023fd2
c0013440:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013444:	56                   	push   esi
c0013445:	e8 f6 d2 fe ff       	call   c0000740 <strcpy>
c001344a:	5d                   	pop    ebp
c001344b:	58                   	pop    eax
c001344c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013452:	66 c1 e8 06          	shr    ax,0x6
c0013456:	0f b6 c0             	movzx  eax,al
c0013459:	50                   	push   eax
c001345a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013460:	c1 e8 0e             	shr    eax,0xe
c0013463:	0f b6 c0             	movzx  eax,al
c0013466:	50                   	push   eax
c0013467:	e8 90 f2 ff ff       	call   c00126fc <CPU::lookupAMDName(unsigned char, unsigned char)>
c001346c:	5a                   	pop    edx
c001346d:	59                   	pop    ecx
c001346e:	50                   	push   eax
c001346f:	56                   	push   esi
c0013470:	e8 0b d4 fe ff       	call   c0000880 <strcat>
c0013475:	5f                   	pop    edi
c0013476:	5d                   	pop    ebp
c0013477:	56                   	push   esi
c0013478:	53                   	push   ebx
c0013479:	e8 ee ab ff ff       	call   c000e06c <Device::setName(char const*)>
c001347e:	58                   	pop    eax
c001347f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013485:	5a                   	pop    edx
c0013486:	68 d7 3f 02 c0       	push   0xc0023fd7
c001348b:	50                   	push   eax
c001348c:	e8 3b d3 fe ff       	call   c00007cc <strcmp>
c0013491:	83 c4 10             	add    esp,0x10
c0013494:	85 c0                	test   eax,eax
c0013496:	75 20                	jne    c00134b8 <CPU::detectFeatures()+0x706>
c0013498:	8b 15 28 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026428
c001349e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00134a4:	a8 01                	test   al,0x1
c00134a6:	74 10                	je     c00134b8 <CPU::detectFeatures()+0x706>
c00134a8:	83 e0 fe             	and    eax,0xfffffffe
c00134ab:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00134b1:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00134b8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134be:	c1 e8 0e             	shr    eax,0xe
c00134c1:	3c 05                	cmp    al,0x5
c00134c3:	0f 85 cc 02 00 00    	jne    c0013795 <CPU::detectFeatures()+0x9e3>
c00134c9:	56                   	push   esi
c00134ca:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00134d0:	83 e0 0f             	and    eax,0xf
c00134d3:	50                   	push   eax
c00134d4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134da:	66 c1 e8 06          	shr    ax,0x6
c00134de:	0f b6 c0             	movzx  eax,al
c00134e1:	50                   	push   eax
c00134e2:	6a 05                	push   0x5
c00134e4:	e8 89 f6 ff ff       	call   c0012b72 <CPU::AMD_K6_writeback(int, int, int)>
c00134e9:	e9 1f 02 00 00       	jmp    c001370d <CPU::detectFeatures()+0x95b>
c00134ee:	8d 50 fd             	lea    edx,[eax-0x3]
c00134f1:	83 fa 01             	cmp    edx,0x1
c00134f4:	76 09                	jbe    c00134ff <CPU::detectFeatures()+0x74d>
c00134f6:	83 f8 06             	cmp    eax,0x6
c00134f9:	0f 85 91 01 00 00    	jne    c0013690 <CPU::detectFeatures()+0x8de>
c00134ff:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013505:	c1 ea 0e             	shr    edx,0xe
c0013508:	80 fa 05             	cmp    dl,0x5
c001350b:	75 7b                	jne    c0013588 <CPU::detectFeatures()+0x7d6>
c001350d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013513:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013518:	66 81 fa 00 01       	cmp    dx,0x100
c001351d:	75 0c                	jne    c001352b <CPU::detectFeatures()+0x779>
c001351f:	51                   	push   ecx
c0013520:	51                   	push   ecx
c0013521:	68 de 3f 02 c0       	push   0xc0023fde
c0013526:	e9 dc 01 00 00       	jmp    c0013707 <CPU::detectFeatures()+0x955>
c001352b:	66 81 fa 00 02       	cmp    dx,0x200
c0013530:	75 0c                	jne    c001353e <CPU::detectFeatures()+0x78c>
c0013532:	52                   	push   edx
c0013533:	52                   	push   edx
c0013534:	68 f1 3f 02 c0       	push   0xc0023ff1
c0013539:	e9 c9 01 00 00       	jmp    c0013707 <CPU::detectFeatures()+0x955>
c001353e:	66 81 fa 40 02       	cmp    dx,0x240
c0013543:	75 0c                	jne    c0013551 <CPU::detectFeatures()+0x79f>
c0013545:	50                   	push   eax
c0013546:	50                   	push   eax
c0013547:	68 03 40 02 c0       	push   0xc0024003
c001354c:	e9 b6 01 00 00       	jmp    c0013707 <CPU::detectFeatures()+0x955>
c0013551:	83 f8 06             	cmp    eax,0x6
c0013554:	75 0c                	jne    c0013562 <CPU::detectFeatures()+0x7b0>
c0013556:	50                   	push   eax
c0013557:	50                   	push   eax
c0013558:	68 15 40 02 c0       	push   0xc0024015
c001355d:	e9 a5 01 00 00       	jmp    c0013707 <CPU::detectFeatures()+0x955>
c0013562:	83 f8 04             	cmp    eax,0x4
c0013565:	75 0c                	jne    c0013573 <CPU::detectFeatures()+0x7c1>
c0013567:	50                   	push   eax
c0013568:	50                   	push   eax
c0013569:	68 21 40 02 c0       	push   0xc0024021
c001356e:	e9 94 01 00 00       	jmp    c0013707 <CPU::detectFeatures()+0x955>
c0013573:	83 f8 03             	cmp    eax,0x3
c0013576:	0f 85 19 02 00 00    	jne    c0013795 <CPU::detectFeatures()+0x9e3>
c001357c:	50                   	push   eax
c001357d:	50                   	push   eax
c001357e:	68 29 40 02 c0       	push   0xc0024029
c0013583:	e9 7f 01 00 00       	jmp    c0013707 <CPU::detectFeatures()+0x955>
c0013588:	80 fa 06             	cmp    dl,0x6
c001358b:	0f 85 db 00 00 00    	jne    c001366c <CPU::detectFeatures()+0x8ba>
c0013591:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013597:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001359c:	66 81 fa 80 01       	cmp    dx,0x180
c00135a1:	75 0c                	jne    c00135af <CPU::detectFeatures()+0x7fd>
c00135a3:	50                   	push   eax
c00135a4:	50                   	push   eax
c00135a5:	68 34 40 02 c0       	push   0xc0024034
c00135aa:	e9 58 01 00 00       	jmp    c0013707 <CPU::detectFeatures()+0x955>
c00135af:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00135b5:	66 f7 c1 80 ff       	test   cx,0xff80
c00135ba:	75 0c                	jne    c00135c8 <CPU::detectFeatures()+0x816>
c00135bc:	50                   	push   eax
c00135bd:	50                   	push   eax
c00135be:	68 44 40 02 c0       	push   0xc0024044
c00135c3:	e9 3f 01 00 00       	jmp    c0013707 <CPU::detectFeatures()+0x955>
c00135c8:	66 81 fa 40 02       	cmp    dx,0x240
c00135cd:	75 0c                	jne    c00135db <CPU::detectFeatures()+0x829>
c00135cf:	55                   	push   ebp
c00135d0:	55                   	push   ebp
c00135d1:	68 4b 40 02 c0       	push   0xc002404b
c00135d6:	e9 2c 01 00 00       	jmp    c0013707 <CPU::detectFeatures()+0x955>
c00135db:	66 81 fa 80 02       	cmp    dx,0x280
c00135e0:	75 0c                	jne    c00135ee <CPU::detectFeatures()+0x83c>
c00135e2:	57                   	push   edi
c00135e3:	57                   	push   edi
c00135e4:	68 54 40 02 c0       	push   0xc0024054
c00135e9:	e9 19 01 00 00       	jmp    c0013707 <CPU::detectFeatures()+0x955>
c00135ee:	66 81 fa 40 03       	cmp    dx,0x340
c00135f3:	74 ed                	je     c00135e2 <CPU::detectFeatures()+0x830>
c00135f5:	66 81 fa c0 03       	cmp    dx,0x3c0
c00135fa:	75 0c                	jne    c0013608 <CPU::detectFeatures()+0x856>
c00135fc:	56                   	push   esi
c00135fd:	56                   	push   esi
c00135fe:	68 5b 40 02 c0       	push   0xc002405b
c0013603:	e9 ff 00 00 00       	jmp    c0013707 <CPU::detectFeatures()+0x955>
c0013608:	83 f8 06             	cmp    eax,0x6
c001360b:	0f 84 45 ff ff ff    	je     c0013556 <CPU::detectFeatures()+0x7a4>
c0013611:	83 f8 04             	cmp    eax,0x4
c0013614:	0f 84 4d ff ff ff    	je     c0013567 <CPU::detectFeatures()+0x7b5>
c001361a:	83 f8 03             	cmp    eax,0x3
c001361d:	0f 85 72 01 00 00    	jne    c0013795 <CPU::detectFeatures()+0x9e3>
c0013623:	51                   	push   ecx
c0013624:	51                   	push   ecx
c0013625:	68 64 40 02 c0       	push   0xc0024064
c001362a:	53                   	push   ebx
c001362b:	e8 3c aa ff ff       	call   c000e06c <Device::setName(char const*)>
c0013630:	b1 c1                	mov    cl,0xc1
c0013632:	88 c8                	mov    al,cl
c0013634:	e6 22                	out    0x22,al
c0013636:	e4 23                	in     al,0x23
c0013638:	88 c2                	mov    dl,al
c001363a:	88 c8                	mov    al,cl
c001363c:	e6 22                	out    0x22,al
c001363e:	88 d0                	mov    al,dl
c0013640:	83 c8 10             	or     eax,0x10
c0013643:	e6 23                	out    0x23,al
c0013645:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001364c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001364f:	89 d0                	mov    eax,edx
c0013651:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013657:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001365b:	40                   	inc    eax
c001365c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013662:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0013667:	e9 a1 00 00 00       	jmp    c001370d <CPU::detectFeatures()+0x95b>
c001366c:	83 f8 06             	cmp    eax,0x6
c001366f:	0f 84 e1 fe ff ff    	je     c0013556 <CPU::detectFeatures()+0x7a4>
c0013675:	83 f8 04             	cmp    eax,0x4
c0013678:	0f 84 e9 fe ff ff    	je     c0013567 <CPU::detectFeatures()+0x7b5>
c001367e:	83 f8 03             	cmp    eax,0x3
c0013681:	0f 85 0e 01 00 00    	jne    c0013795 <CPU::detectFeatures()+0x9e3>
c0013687:	52                   	push   edx
c0013688:	52                   	push   edx
c0013689:	68 6f 40 02 c0       	push   0xc002406f
c001368e:	eb 77                	jmp    c0013707 <CPU::detectFeatures()+0x955>
c0013690:	83 f8 07             	cmp    eax,0x7
c0013693:	75 09                	jne    c001369e <CPU::detectFeatures()+0x8ec>
c0013695:	50                   	push   eax
c0013696:	50                   	push   eax
c0013697:	68 79 40 02 c0       	push   0xc0024079
c001369c:	eb 69                	jmp    c0013707 <CPU::detectFeatures()+0x955>
c001369e:	83 f8 0a             	cmp    eax,0xa
c00136a1:	75 09                	jne    c00136ac <CPU::detectFeatures()+0x8fa>
c00136a3:	50                   	push   eax
c00136a4:	50                   	push   eax
c00136a5:	68 84 40 02 c0       	push   0xc0024084
c00136aa:	eb 5b                	jmp    c0013707 <CPU::detectFeatures()+0x955>
c00136ac:	83 f8 0b             	cmp    eax,0xb
c00136af:	75 09                	jne    c00136ba <CPU::detectFeatures()+0x908>
c00136b1:	50                   	push   eax
c00136b2:	50                   	push   eax
c00136b3:	68 8c 40 02 c0       	push   0xc002408c
c00136b8:	eb 4d                	jmp    c0013707 <CPU::detectFeatures()+0x955>
c00136ba:	83 f8 08             	cmp    eax,0x8
c00136bd:	75 09                	jne    c00136c8 <CPU::detectFeatures()+0x916>
c00136bf:	50                   	push   eax
c00136c0:	50                   	push   eax
c00136c1:	68 95 40 02 c0       	push   0xc0024095
c00136c6:	eb 3f                	jmp    c0013707 <CPU::detectFeatures()+0x955>
c00136c8:	83 f8 09             	cmp    eax,0x9
c00136cb:	75 09                	jne    c00136d6 <CPU::detectFeatures()+0x924>
c00136cd:	50                   	push   eax
c00136ce:	50                   	push   eax
c00136cf:	68 9d 40 02 c0       	push   0xc002409d
c00136d4:	eb 31                	jmp    c0013707 <CPU::detectFeatures()+0x955>
c00136d6:	83 f8 05             	cmp    eax,0x5
c00136d9:	75 09                	jne    c00136e4 <CPU::detectFeatures()+0x932>
c00136db:	50                   	push   eax
c00136dc:	50                   	push   eax
c00136dd:	68 a5 40 02 c0       	push   0xc00240a5
c00136e2:	eb 23                	jmp    c0013707 <CPU::detectFeatures()+0x955>
c00136e4:	83 f8 0c             	cmp    eax,0xc
c00136e7:	75 09                	jne    c00136f2 <CPU::detectFeatures()+0x940>
c00136e9:	55                   	push   ebp
c00136ea:	55                   	push   ebp
c00136eb:	68 b3 40 02 c0       	push   0xc00240b3
c00136f0:	eb 15                	jmp    c0013707 <CPU::detectFeatures()+0x955>
c00136f2:	83 f8 0d             	cmp    eax,0xd
c00136f5:	75 09                	jne    c0013700 <CPU::detectFeatures()+0x94e>
c00136f7:	57                   	push   edi
c00136f8:	57                   	push   edi
c00136f9:	68 be 40 02 c0       	push   0xc00240be
c00136fe:	eb 07                	jmp    c0013707 <CPU::detectFeatures()+0x955>
c0013700:	56                   	push   esi
c0013701:	56                   	push   esi
c0013702:	68 d2 40 02 c0       	push   0xc00240d2
c0013707:	53                   	push   ebx
c0013708:	e8 5f a9 ff ff       	call   c000e06c <Device::setName(char const*)>
c001370d:	83 c4 10             	add    esp,0x10
c0013710:	e9 80 00 00 00       	jmp    c0013795 <CPU::detectFeatures()+0x9e3>
c0013715:	51                   	push   ecx
c0013716:	51                   	push   ecx
c0013717:	68 1e 3f 02 c0       	push   0xc0023f1e
c001371c:	55                   	push   ebp
c001371d:	e8 1e d0 fe ff       	call   c0000740 <strcpy>
c0013722:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001372c:	e8 b2 ca fe ff       	call   c00001e3 <is486>
c0013731:	83 c4 10             	add    esp,0x10
c0013734:	85 c0                	test   eax,eax
c0013736:	74 2b                	je     c0013763 <CPU::detectFeatures()+0x9b1>
c0013738:	52                   	push   edx
c0013739:	52                   	push   edx
c001373a:	68 de 40 02 c0       	push   0xc00240de
c001373f:	53                   	push   ebx
c0013740:	e8 27 a9 ff ff       	call   c000e06c <Device::setName(char const*)>
c0013745:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001374c:	0f 20 c0             	mov    eax,cr0
c001374f:	83 e0 14             	and    eax,0x14
c0013752:	83 c4 10             	add    esp,0x10
c0013755:	83 f8 04             	cmp    eax,0x4
c0013758:	75 1f                	jne    c0013779 <CPU::detectFeatures()+0x9c7>
c001375a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0013761:	eb 32                	jmp    c0013795 <CPU::detectFeatures()+0x9e3>
c0013763:	50                   	push   eax
c0013764:	50                   	push   eax
c0013765:	68 e9 40 02 c0       	push   0xc00240e9
c001376a:	53                   	push   ebx
c001376b:	e8 fc a8 ff ff       	call   c000e06c <Device::setName(char const*)>
c0013770:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0013777:	eb d3                	jmp    c001374c <CPU::detectFeatures()+0x99a>
c0013779:	e8 40 ca fe ff       	call   c00001be <hasLegacyFPU>
c001377e:	83 e0 01             	and    eax,0x1
c0013781:	8d 14 00             	lea    edx,[eax+eax*1]
c0013784:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001378a:	83 e0 fd             	and    eax,0xfffffffd
c001378d:	09 d0                	or     eax,edx
c001378f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013795:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001379c:	83 c4 4c             	add    esp,0x4c
c001379f:	5b                   	pop    ebx
c00137a0:	5e                   	pop    esi
c00137a1:	5f                   	pop    edi
c00137a2:	5d                   	pop    ebp
c00137a3:	c3                   	ret    

c00137a4 <CPU::setupSMEP()>:
c00137a4:	0f 20 e0             	mov    eax,cr4
c00137a7:	0d 00 00 10 00       	or     eax,0x100000
c00137ac:	0f 22 e0             	mov    cr4,eax
c00137af:	c3                   	ret    

c00137b0 <CPU::setupUMIP()>:
c00137b0:	0f 20 e0             	mov    eax,cr4
c00137b3:	80 cc 08             	or     ah,0x8
c00137b6:	0f 22 e0             	mov    cr4,eax
c00137b9:	c3                   	ret    

c00137ba <CPU::setupTSC()>:
c00137ba:	0f 20 e0             	mov    eax,cr4
c00137bd:	83 c8 04             	or     eax,0x4
c00137c0:	0f 22 e0             	mov    cr4,eax
c00137c3:	c3                   	ret    

c00137c4 <CPU::setupLargePages()>:
c00137c4:	0f 20 e0             	mov    eax,cr4
c00137c7:	83 c8 10             	or     eax,0x10
c00137ca:	0f 22 e0             	mov    cr4,eax
c00137cd:	c3                   	ret    

c00137ce <CPU::setupPAT()>:
c00137ce:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c00137d3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00137da:	74 2c                	je     c0013808 <CPU::setupPAT()+0x3a>
c00137dc:	53                   	push   ebx
c00137dd:	83 ec 10             	sub    esp,0x10
c00137e0:	68 77 02 00 00       	push   0x277
c00137e5:	50                   	push   eax
c00137e6:	e8 39 57 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00137eb:	83 e2 f8             	and    edx,0xfffffff8
c00137ee:	83 ca 01             	or     edx,0x1
c00137f1:	52                   	push   edx
c00137f2:	50                   	push   eax
c00137f3:	68 77 02 00 00       	push   0x277
c00137f8:	ff 35 28 64 02 c0    	push   DWORD PTR ds:0xc0026428
c00137fe:	e8 4d 57 ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0013803:	83 c4 28             	add    esp,0x28
c0013806:	5b                   	pop    ebx
c0013807:	c3                   	ret    
c0013808:	c3                   	ret    
c0013809:	90                   	nop

c001380a <CPU::setupMTRR()>:
c001380a:	c3                   	ret    
c001380b:	90                   	nop

c001380c <CPU::setupGlobalPages()>:
c001380c:	0f 20 e0             	mov    eax,cr4
c001380f:	0c 80                	or     al,0x80
c0013811:	0f 22 e0             	mov    cr4,eax
c0013814:	c3                   	ret    
c0013815:	90                   	nop

c0013816 <CPU::allowUsermodeDataAccess()>:
c0013816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001381a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013821:	74 03                	je     c0013826 <CPU::allowUsermodeDataAccess()+0x10>
c0013823:	0f 01 cb             	stac   
c0013826:	c3                   	ret    
c0013827:	90                   	nop

c0013828 <CPU::prohibitUsermodeDataAccess()>:
c0013828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001382c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013833:	74 03                	je     c0013838 <CPU::prohibitUsermodeDataAccess()+0x10>
c0013835:	0f 01 ca             	clac   
c0013838:	c3                   	ret    
c0013839:	90                   	nop

c001383a <CPU::setupSMAP()>:
c001383a:	0f 20 e0             	mov    eax,cr4
c001383d:	0d 00 00 20 00       	or     eax,0x200000
c0013842:	0f 22 e0             	mov    cr4,eax
c0013845:	eb e1                	jmp    c0013828 <CPU::prohibitUsermodeDataAccess()>
c0013847:	90                   	nop

c0013848 <CPU::setupFeatures()>:
c0013848:	83 ec 0c             	sub    esp,0xc
c001384b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001384f:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0013856:	74 07                	je     c001385f <CPU::setupFeatures()+0x17>
c0013858:	52                   	push   edx
c0013859:	e8 46 ff ff ff       	call   c00137a4 <CPU::setupSMEP()>
c001385e:	58                   	pop    eax
c001385f:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0013866:	74 07                	je     c001386f <CPU::setupFeatures()+0x27>
c0013868:	52                   	push   edx
c0013869:	e8 cc ff ff ff       	call   c001383a <CPU::setupSMAP()>
c001386e:	58                   	pop    eax
c001386f:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0013876:	74 07                	je     c001387f <CPU::setupFeatures()+0x37>
c0013878:	52                   	push   edx
c0013879:	e8 32 ff ff ff       	call   c00137b0 <CPU::setupUMIP()>
c001387e:	58                   	pop    eax
c001387f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0013886:	74 07                	je     c001388f <CPU::setupFeatures()+0x47>
c0013888:	52                   	push   edx
c0013889:	e8 2c ff ff ff       	call   c00137ba <CPU::setupTSC()>
c001388e:	58                   	pop    eax
c001388f:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0013896:	74 07                	je     c001389f <CPU::setupFeatures()+0x57>
c0013898:	52                   	push   edx
c0013899:	e8 26 ff ff ff       	call   c00137c4 <CPU::setupLargePages()>
c001389e:	59                   	pop    ecx
c001389f:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00138a6:	74 07                	je     c00138af <CPU::setupFeatures()+0x67>
c00138a8:	52                   	push   edx
c00138a9:	e8 5e ff ff ff       	call   c001380c <CPU::setupGlobalPages()>
c00138ae:	58                   	pop    eax
c00138af:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00138b6:	74 0c                	je     c00138c4 <CPU::setupFeatures()+0x7c>
c00138b8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00138bc:	83 c4 0c             	add    esp,0xc
c00138bf:	e9 0a ff ff ff       	jmp    c00137ce <CPU::setupPAT()>
c00138c4:	83 c4 0c             	add    esp,0xc
c00138c7:	c3                   	ret    

c00138c8 <CPU::open(int, int, void*)>:
c00138c8:	57                   	push   edi
c00138c9:	56                   	push   esi
c00138ca:	53                   	push   ebx
c00138cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138cf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00138d3:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00138d9:	83 ec 0c             	sub    esp,0xc
c00138dc:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00138e2:	68 f4 40 02 c0       	push   0xc00240f4
c00138e7:	e8 31 61 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00138ec:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00138f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00138f5:	e8 c2 59 ff ff       	call   c00092bc <GDT::setup()>
c00138fa:	c7 04 24 06 41 02 c0 	mov    DWORD PTR [esp],0xc0024106
c0013901:	e8 17 61 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013906:	83 c4 0c             	add    esp,0xc
c0013909:	6a 00                	push   0x0
c001390b:	68 ef be ad de       	push   0xdeadbeef
c0013910:	57                   	push   edi
c0013911:	e8 be 76 ff ff       	call   c000afd4 <TSS::setup(unsigned long, unsigned long)>
c0013916:	c7 04 24 18 41 02 c0 	mov    DWORD PTR [esp],0xc0024118
c001391d:	e8 fb 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013922:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013925:	e8 8a 76 ff ff       	call   c000afb4 <TSS::flush()>
c001392a:	c7 04 24 2c 41 02 c0 	mov    DWORD PTR [esp],0xc002412c
c0013931:	e8 e7 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013936:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001393c:	89 04 24             	mov    DWORD PTR [esp],eax
c001393f:	e8 e2 5b ff ff       	call   c0009526 <IDT::setup()>
c0013944:	c7 04 24 3e 41 02 c0 	mov    DWORD PTR [esp],0xc002413e
c001394b:	e8 cd 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013950:	b8 00 04 00 00       	mov    eax,0x400
c0013955:	0f 23 f8             	mov    db7,eax
c0013958:	c7 04 24 5c 41 02 c0 	mov    DWORD PTR [esp],0xc002415c
c001395f:	e8 b9 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013964:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001396e:	e8 4c 64 ff ff       	call   c0009dbf <Phys::allocatePage()>
c0013973:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0013979:	89 30                	mov    DWORD PTR [eax],esi
c001397b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0013981:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013984:	c7 04 24 7e 41 02 c0 	mov    DWORD PTR [esp],0xc002417e
c001398b:	e8 8d 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013990:	58                   	pop    eax
c0013991:	5a                   	pop    edx
c0013992:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0013998:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001399c:	e8 2d 86 ff ff       	call   c000bfce <VAS::setCPUSpecific(unsigned long)>
c00139a1:	c7 04 24 a6 41 02 c0 	mov    DWORD PTR [esp],0xc00241a6
c00139a8:	e8 70 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139b0:	e8 fd f3 ff ff       	call   c0012db2 <CPU::detectFeatures()>
c00139b5:	c7 04 24 c9 41 02 c0 	mov    DWORD PTR [esp],0xc00241c9
c00139bc:	e8 5c 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139c1:	e8 b4 b8 ff ff       	call   c000f27a <setupInterruptController()>
c00139c6:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00139cc:	c7 04 24 ed 41 02 c0 	mov    DWORD PTR [esp],0xc00241ed
c00139d3:	e8 45 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139d8:	a1 40 64 02 c0       	mov    eax,ds:0xc0026440
c00139dd:	83 e0 10             	and    eax,0x10
c00139e0:	83 f8 01             	cmp    eax,0x1
c00139e3:	19 c0                	sbb    eax,eax
c00139e5:	83 e0 46             	and    eax,0x46
c00139e8:	83 c0 1e             	add    eax,0x1e
c00139eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00139ee:	e8 89 ce ff ff       	call   c001087c <setupTimer(int)>
c00139f3:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00139f9:	c7 04 24 08 42 02 c0 	mov    DWORD PTR [esp],0xc0024208
c0013a00:	e8 18 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a08:	e8 3b fe ff ff       	call   c0013848 <CPU::setupFeatures()>
c0013a0d:	c7 04 24 23 42 02 c0 	mov    DWORD PTR [esp],0xc0024223
c0013a14:	e8 04 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a19:	83 c4 10             	add    esp,0x10
c0013a1c:	31 c0                	xor    eax,eax
c0013a1e:	5b                   	pop    ebx
c0013a1f:	5e                   	pop    esi
c0013a20:	5f                   	pop    edi
c0013a21:	c3                   	ret    

c0013a22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013a22:	57                   	push   edi
c0013a23:	56                   	push   esi
c0013a24:	53                   	push   ebx
c0013a25:	51                   	push   ecx
c0013a26:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a2a:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013a2d:	0f 02 c0             	lar    eax,ax
c0013a30:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013a33:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013a37:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013a3a:	88 ca                	mov    dl,cl
c0013a3c:	c0 ea 06             	shr    dl,0x6
c0013a3f:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013a43:	89 ca                	mov    edx,ecx
c0013a45:	66 c1 ea 03          	shr    dx,0x3
c0013a49:	83 e2 07             	and    edx,0x7
c0013a4c:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013a51:	88 17                	mov    BYTE PTR [edi],dl
c0013a53:	0f 84 a6 01 00 00    	je     c0013bff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013a59:	83 e1 07             	and    ecx,0x7
c0013a5c:	80 f9 04             	cmp    cl,0x4
c0013a5f:	0f 84 98 00 00 00    	je     c0013afd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013a65:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013a6a:	0f 95 c0             	setne  al
c0013a6d:	80 f9 05             	cmp    cl,0x5
c0013a70:	0f 95 c2             	setne  dl
c0013a73:	08 c2                	or     dl,al
c0013a75:	74 79                	je     c0013af0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0013a77:	84 c9                	test   cl,cl
c0013a79:	75 05                	jne    c0013a80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0013a7b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013a7e:	eb 3c                	jmp    c0013abc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013a80:	80 f9 01             	cmp    cl,0x1
c0013a83:	75 05                	jne    c0013a8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0013a85:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013a88:	eb 32                	jmp    c0013abc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013a8a:	80 f9 02             	cmp    cl,0x2
c0013a8d:	75 05                	jne    c0013a94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0013a8f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013a92:	eb 28                	jmp    c0013abc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013a94:	31 c0                	xor    eax,eax
c0013a96:	80 f9 03             	cmp    cl,0x3
c0013a99:	75 05                	jne    c0013aa0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0013a9b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013a9e:	eb 1c                	jmp    c0013abc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013aa0:	80 f9 05             	cmp    cl,0x5
c0013aa3:	75 05                	jne    c0013aaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0013aa5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013aa8:	eb 12                	jmp    c0013abc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013aaa:	80 f9 06             	cmp    cl,0x6
c0013aad:	75 05                	jne    c0013ab4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0013aaf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013ab2:	eb 08                	jmp    c0013abc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ab4:	80 f9 07             	cmp    cl,0x7
c0013ab7:	75 03                	jne    c0013abc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ab9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013abc:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013ac1:	75 10                	jne    c0013ad3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0013ac3:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0013ac7:	b9 03 00 00 00       	mov    ecx,0x3
c0013acc:	01 d0                	add    eax,edx
c0013ace:	e9 37 01 00 00       	jmp    c0013c0a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013ad3:	b9 02 00 00 00       	mov    ecx,0x2
c0013ad8:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0013add:	0f 85 27 01 00 00    	jne    c0013c0a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013ae3:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0013ae6:	b9 06 00 00 00       	mov    ecx,0x6
c0013aeb:	e9 1a 01 00 00       	jmp    c0013c0a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013af0:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0013af3:	b9 06 00 00 00       	mov    ecx,0x6
c0013af8:	e9 0f 01 00 00       	jmp    c0013c0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013afd:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0013b00:	88 ca                	mov    dl,cl
c0013b02:	c0 ea 06             	shr    dl,0x6
c0013b05:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0013b09:	89 ca                	mov    edx,ecx
c0013b0b:	66 c1 ea 03          	shr    dx,0x3
c0013b0f:	83 e2 07             	and    edx,0x7
c0013b12:	80 e1 07             	and    cl,0x7
c0013b15:	75 05                	jne    c0013b1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0013b17:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0013b1a:	eb 4c                	jmp    c0013b68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b1c:	80 f9 01             	cmp    cl,0x1
c0013b1f:	75 05                	jne    c0013b26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0013b21:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013b24:	eb 42                	jmp    c0013b68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b26:	80 f9 02             	cmp    cl,0x2
c0013b29:	75 05                	jne    c0013b30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0013b2b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0013b2e:	eb 38                	jmp    c0013b68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b30:	80 f9 03             	cmp    cl,0x3
c0013b33:	75 05                	jne    c0013b3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0013b35:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0013b38:	eb 2e                	jmp    c0013b68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b3a:	80 f9 04             	cmp    cl,0x4
c0013b3d:	75 12                	jne    c0013b51 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0013b3f:	f6 c4 60             	test   ah,0x60
c0013b42:	75 08                	jne    c0013b4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0013b44:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0013b47:	8d 78 14             	lea    edi,[eax+0x14]
c0013b4a:	eb 1c                	jmp    c0013b68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b4c:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0013b4f:	eb 17                	jmp    c0013b68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b51:	80 f9 05             	cmp    cl,0x5
c0013b54:	75 05                	jne    c0013b5b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0013b56:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0013b59:	eb 0d                	jmp    c0013b68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b5b:	80 f9 06             	cmp    cl,0x6
c0013b5e:	75 05                	jne    c0013b65 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0013b60:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0013b63:	eb 03                	jmp    c0013b68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b65:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0013b68:	84 d2                	test   dl,dl
c0013b6a:	75 05                	jne    c0013b71 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0013b6c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013b6f:	eb 3c                	jmp    c0013bad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b71:	80 fa 01             	cmp    dl,0x1
c0013b74:	75 05                	jne    c0013b7b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0013b76:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013b79:	eb 32                	jmp    c0013bad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b7b:	80 fa 02             	cmp    dl,0x2
c0013b7e:	75 05                	jne    c0013b85 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0013b80:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013b83:	eb 28                	jmp    c0013bad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b85:	80 fa 03             	cmp    dl,0x3
c0013b88:	75 05                	jne    c0013b8f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0013b8a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013b8d:	eb 1e                	jmp    c0013bad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b8f:	31 c0                	xor    eax,eax
c0013b91:	80 fa 04             	cmp    dl,0x4
c0013b94:	74 17                	je     c0013bad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b96:	80 fa 05             	cmp    dl,0x5
c0013b99:	75 05                	jne    c0013ba0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0013b9b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013b9e:	eb 0d                	jmp    c0013bad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013ba0:	80 fa 06             	cmp    dl,0x6
c0013ba3:	75 05                	jne    c0013baa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0013ba5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013ba8:	eb 03                	jmp    c0013bad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013baa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013bad:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013bb2:	0f 94 c2             	sete   dl
c0013bb5:	80 f9 05             	cmp    cl,0x5
c0013bb8:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0013bbc:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0013bc1:	d3 e0                	shl    eax,cl
c0013bc3:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0013bc7:	74 0a                	je     c0013bd3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0013bc9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013bcc:	b9 07 00 00 00       	mov    ecx,0x7
c0013bd1:	eb 37                	jmp    c0013c0a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013bd3:	01 f8                	add    eax,edi
c0013bd5:	b9 03 00 00 00       	mov    ecx,0x3
c0013bda:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013bdf:	74 2b                	je     c0013c0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013be1:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013be6:	75 0d                	jne    c0013bf5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0013be8:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0013bec:	01 c8                	add    eax,ecx
c0013bee:	b9 04 00 00 00       	mov    ecx,0x4
c0013bf3:	eb 17                	jmp    c0013c0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013bf5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013bf8:	b9 07 00 00 00       	mov    ecx,0x7
c0013bfd:	eb 0d                	jmp    c0013c0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013bff:	b9 02 00 00 00       	mov    ecx,0x2
c0013c04:	b2 01                	mov    dl,0x1
c0013c06:	31 c0                	xor    eax,eax
c0013c08:	eb 02                	jmp    c0013c0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c0a:	31 d2                	xor    edx,edx
c0013c0c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c10:	89 0b                	mov    DWORD PTR [ebx],ecx
c0013c12:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013c16:	88 11                	mov    BYTE PTR [ecx],dl
c0013c18:	5a                   	pop    edx
c0013c19:	5b                   	pop    ebx
c0013c1a:	5e                   	pop    esi
c0013c1b:	5f                   	pop    edi
c0013c1c:	c3                   	ret    

c0013c1d <Krnl::smpEntry()>:
c0013c1d:	eb fe                	jmp    c0013c1d <Krnl::smpEntry()>

c0013c1f <Krnl::startCPU(int)>:
c0013c1f:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0013c24:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013c2b:	0f 84 36 01 00 00    	je     c0013d67 <Krnl::startCPU(int)+0x148>
c0013c31:	53                   	push   ebx
c0013c32:	83 ec 10             	sub    esp,0x10
c0013c35:	fa                   	cli    
c0013c36:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0013c3c:	6a 1b                	push   0x1b
c0013c3e:	ff 35 28 64 02 c0    	push   DWORD PTR ds:0xc0026428
c0013c44:	e8 db 52 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013c49:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013c4e:	89 c3                	mov    ebx,eax
c0013c50:	58                   	pop    eax
c0013c51:	5a                   	pop    edx
c0013c52:	53                   	push   ebx
c0013c53:	68 6c 42 02 c0       	push   0xc002426c
c0013c58:	e8 cb 8d ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0013c5d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013c67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c6b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013c75:	c1 e0 18             	shl    eax,0x18
c0013c78:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0013c7e:	83 c4 10             	add    esp,0x10
c0013c81:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013c87:	09 c2                	or     edx,eax
c0013c89:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0013c8f:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0013c95:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013c9b:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013ca1:	80 cd c5             	or     ch,0xc5
c0013ca4:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013caa:	f3 90                	pause  
c0013cac:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013cae:	0f ba e1 0c          	bt     ecx,0xc
c0013cb2:	72 f6                	jb     c0013caa <Krnl::startCPU(int)+0x8b>
c0013cb4:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013cba:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013cc0:	09 c1                	or     ecx,eax
c0013cc2:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013cc8:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013cce:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013cd4:	80 cd 85             	or     ch,0x85
c0013cd7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013cdd:	f3 90                	pause  
c0013cdf:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013ce1:	0f ba e1 0c          	bt     ecx,0xc
c0013ce5:	72 f6                	jb     c0013cdd <Krnl::startCPU(int)+0xbe>
c0013ce7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013cf1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013cf7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013cfd:	09 c1                	or     ecx,eax
c0013cff:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013d05:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013d0b:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0013d11:	81 c9 02 06 00 00    	or     ecx,0x602
c0013d17:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d1d:	f3 90                	pause  
c0013d1f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d21:	0f ba e1 0c          	bt     ecx,0xc
c0013d25:	72 f6                	jb     c0013d1d <Krnl::startCPU(int)+0xfe>
c0013d27:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013d31:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d37:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d3d:	09 c8                	or     eax,ecx
c0013d3f:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0013d45:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0013d4b:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0013d50:	0d 02 06 00 00       	or     eax,0x602
c0013d55:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0013d5b:	f3 90                	pause  
c0013d5d:	8b 02                	mov    eax,DWORD PTR [edx]
c0013d5f:	0f ba e0 0c          	bt     eax,0xc
c0013d63:	72 f6                	jb     c0013d5b <Krnl::startCPU(int)+0x13c>
c0013d65:	eb fe                	jmp    c0013d65 <Krnl::startCPU(int)+0x146>
c0013d67:	c3                   	ret    

c0013d68 <Krnl::startCPUs()>:
c0013d68:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0013d6d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013d73:	88 c2                	mov    dl,al
c0013d75:	83 e2 0a             	and    edx,0xa
c0013d78:	80 fa 0a             	cmp    dl,0xa
c0013d7b:	75 09                	jne    c0013d86 <Krnl::startCPUs()+0x1e>
c0013d7d:	a8 01                	test   al,0x1
c0013d7f:	74 05                	je     c0013d86 <Krnl::startCPUs()+0x1e>
c0013d81:	e9 15 c4 fe ff       	jmp    c000019b <prepareTramp>
c0013d86:	c3                   	ret    
c0013d87:	90                   	nop

c0013d88 <EnvVarContainer::getEnv(char const*)>:
c0013d88:	57                   	push   edi
c0013d89:	56                   	push   esi
c0013d8a:	53                   	push   ebx
c0013d8b:	31 db                	xor    ebx,ebx
c0013d8d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d91:	39 1e                	cmp    DWORD PTR [esi],ebx
c0013d93:	7e 2b                	jle    c0013dc0 <EnvVarContainer::getEnv(char const*)+0x38>
c0013d95:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0013d9c:	50                   	push   eax
c0013d9d:	50                   	push   eax
c0013d9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013da1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0013da4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013da8:	e8 1f ca fe ff       	call   c00007cc <strcmp>
c0013dad:	83 c4 10             	add    esp,0x10
c0013db0:	85 c0                	test   eax,eax
c0013db2:	75 09                	jne    c0013dbd <EnvVarContainer::getEnv(char const*)+0x35>
c0013db4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013db7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0013dbb:	eb 05                	jmp    c0013dc2 <EnvVarContainer::getEnv(char const*)+0x3a>
c0013dbd:	43                   	inc    ebx
c0013dbe:	eb d1                	jmp    c0013d91 <EnvVarContainer::getEnv(char const*)+0x9>
c0013dc0:	31 c0                	xor    eax,eax
c0013dc2:	5b                   	pop    ebx
c0013dc3:	5e                   	pop    esi
c0013dc4:	5f                   	pop    edi
c0013dc5:	c3                   	ret    

c0013dc6 <EnvVarContainer::setEnv(char const*, char const*)>:
c0013dc6:	55                   	push   ebp
c0013dc7:	57                   	push   edi
c0013dc8:	56                   	push   esi
c0013dc9:	53                   	push   ebx
c0013dca:	83 ec 28             	sub    esp,0x28
c0013dcd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013dd1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0013dd5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013dd9:	56                   	push   esi
c0013dda:	e8 c1 c8 fe ff       	call   c00006a0 <strlen>
c0013ddf:	40                   	inc    eax
c0013de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0013de3:	e8 db 5b ff ff       	call   c00099c3 <malloc>
c0013de8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013deb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013def:	e8 ac c8 fe ff       	call   c00006a0 <strlen>
c0013df4:	40                   	inc    eax
c0013df5:	89 04 24             	mov    DWORD PTR [esp],eax
c0013df8:	e8 c6 5b ff ff       	call   c00099c3 <malloc>
c0013dfd:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e04:	e8 97 c8 fe ff       	call   c00006a0 <strlen>
c0013e09:	83 c4 0c             	add    esp,0xc
c0013e0c:	40                   	inc    eax
c0013e0d:	50                   	push   eax
c0013e0e:	6a 00                	push   0x0
c0013e10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013e14:	e8 6b c8 fe ff       	call   c0000684 <memset>
c0013e19:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e1c:	e8 7f c8 fe ff       	call   c00006a0 <strlen>
c0013e21:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e25:	8d 48 01             	lea    ecx,[eax+0x1]
c0013e28:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e2d:	89 de                	mov    esi,ebx
c0013e2f:	e8 6c c8 fe ff       	call   c00006a0 <strlen>
c0013e34:	83 c4 0c             	add    esp,0xc
c0013e37:	40                   	inc    eax
c0013e38:	50                   	push   eax
c0013e39:	6a 00                	push   0x0
c0013e3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e3f:	e8 40 c8 fe ff       	call   c0000684 <memset>
c0013e44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e47:	e8 54 c8 fe ff       	call   c00006a0 <strlen>
c0013e4c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e50:	8d 48 01             	lea    ecx,[eax+0x1]
c0013e53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e55:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e58:	40                   	inc    eax
c0013e59:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013e5c:	c1 e0 03             	shl    eax,0x3
c0013e5f:	5a                   	pop    edx
c0013e60:	59                   	pop    ecx
c0013e61:	50                   	push   eax
c0013e62:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0013e65:	e8 45 5b ff ff       	call   c00099af <realloc>
c0013e6a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013e6e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013e71:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013e74:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013e78:	b9 08 00 00 00       	mov    ecx,0x8
c0013e7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e7f:	83 c4 2c             	add    esp,0x2c
c0013e82:	5b                   	pop    ebx
c0013e83:	5e                   	pop    esi
c0013e84:	5f                   	pop    edi
c0013e85:	5d                   	pop    ebp
c0013e86:	c3                   	ret    
c0013e87:	90                   	nop

c0013e88 <EnvVarContainer::deleteEnv(char const*)>:
c0013e88:	c3                   	ret    
c0013e89:	90                   	nop

c0013e8a <EnvVarContainer::loadFrom(char const*, char const*)>:
c0013e8a:	55                   	push   ebp
c0013e8b:	57                   	push   edi
c0013e8c:	56                   	push   esi
c0013e8d:	53                   	push   ebx
c0013e8e:	81 ec 38 01 00 00    	sub    esp,0x138
c0013e94:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0013e9b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0013ea2:	68 14 01 00 00       	push   0x114
c0013ea7:	e8 17 5b ff ff       	call   c00099c3 <malloc>
c0013eac:	83 c4 0c             	add    esp,0xc
c0013eaf:	89 c3                	mov    ebx,eax
c0013eb1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0013eb4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0013ebb:	50                   	push   eax
c0013ebc:	e8 d1 90 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0013ec1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ec4:	e8 9b 93 ff ff       	call   c000d264 <File::exists()>
c0013ec9:	83 c4 10             	add    esp,0x10
c0013ecc:	84 c0                	test   al,al
c0013ece:	75 31                	jne    c0013f01 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0013ed0:	50                   	push   eax
c0013ed1:	50                   	push   eax
c0013ed2:	6a 12                	push   0x12
c0013ed4:	53                   	push   ebx
c0013ed5:	e8 1c 91 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c0013eda:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013edc:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0013edf:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ee2:	e8 b9 c7 fe ff       	call   c00006a0 <strlen>
c0013ee7:	5a                   	pop    edx
c0013ee8:	31 d2                	xor    edx,edx
c0013eea:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013eee:	51                   	push   ecx
c0013eef:	56                   	push   esi
c0013ef0:	52                   	push   edx
c0013ef1:	50                   	push   eax
c0013ef2:	53                   	push   ebx
c0013ef3:	ff d7                	call   edi
c0013ef5:	83 c4 14             	add    esp,0x14
c0013ef8:	53                   	push   ebx
c0013ef9:	e8 56 91 ff ff       	call   c000d054 <File::close()>
c0013efe:	83 c4 10             	add    esp,0x10
c0013f01:	56                   	push   esi
c0013f02:	31 f6                	xor    esi,esi
c0013f04:	68 00 01 00 00       	push   0x100
c0013f09:	6a 00                	push   0x0
c0013f0b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0013f0f:	50                   	push   eax
c0013f10:	e8 6f c7 fe ff       	call   c0000684 <memset>
c0013f15:	5f                   	pop    edi
c0013f16:	58                   	pop    eax
c0013f17:	6a 01                	push   0x1
c0013f19:	53                   	push   ebx
c0013f1a:	e8 d7 90 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c0013f1f:	83 c4 10             	add    esp,0x10
c0013f22:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013f2a:	83 ec 0c             	sub    esp,0xc
c0013f2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f2f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013f33:	51                   	push   ecx
c0013f34:	8d 54 24 23          	lea    edx,[esp+0x23]
c0013f38:	52                   	push   edx
c0013f39:	6a 00                	push   0x0
c0013f3b:	6a 01                	push   0x1
c0013f3d:	53                   	push   ebx
c0013f3e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f41:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0013f45:	83 c4 20             	add    esp,0x20
c0013f48:	3c 0d                	cmp    al,0xd
c0013f4a:	0f 84 09 01 00 00    	je     c0014059 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013f50:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013f55:	0f 84 ef 00 00 00    	je     c001404a <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013f5b:	3c 0a                	cmp    al,0xa
c0013f5d:	74 13                	je     c0013f72 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013f5f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013f64:	74 0c                	je     c0013f72 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013f66:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0013f6c:	0f 8e d8 00 00 00    	jle    c001404a <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013f72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f76:	83 ec 0c             	sub    esp,0xc
c0013f79:	8d 78 01             	lea    edi,[eax+0x1]
c0013f7c:	57                   	push   edi
c0013f7d:	e8 41 5a ff ff       	call   c00099c3 <malloc>
c0013f82:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0013f86:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013f8a:	8d 56 04             	lea    edx,[esi+0x4]
c0013f8d:	89 14 24             	mov    DWORD PTR [esp],edx
c0013f90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013f94:	e8 2a 5a ff ff       	call   c00099c3 <malloc>
c0013f99:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013f9d:	83 c4 0c             	add    esp,0xc
c0013fa0:	57                   	push   edi
c0013fa1:	6a 00                	push   0x0
c0013fa3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013fa7:	e8 d8 c6 fe ff       	call   c0000684 <memset>
c0013fac:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013fb0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013fb4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013fb8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fba:	83 c4 0c             	add    esp,0xc
c0013fbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013fc1:	52                   	push   edx
c0013fc2:	6a 00                	push   0x0
c0013fc4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013fc8:	e8 b7 c6 fe ff       	call   c0000684 <memset>
c0013fcd:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013fd1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013fd5:	89 34 24             	mov    DWORD PTR [esp],esi
c0013fd8:	e8 c3 c6 fe ff       	call   c00006a0 <strlen>
c0013fdd:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0013fe1:	89 c1                	mov    ecx,eax
c0013fe3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fe5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013fe8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0013feb:	40                   	inc    eax
c0013fec:	83 c4 10             	add    esp,0x10
c0013fef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013ff2:	85 d2                	test   edx,edx
c0013ff4:	75 0c                	jne    c0014002 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0013ff6:	83 ec 0c             	sub    esp,0xc
c0013ff9:	6a 08                	push   0x8
c0013ffb:	e8 c3 59 ff ff       	call   c00099c3 <malloc>
c0014000:	eb 0c                	jmp    c001400e <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014002:	c1 e0 03             	shl    eax,0x3
c0014005:	51                   	push   ecx
c0014006:	51                   	push   ecx
c0014007:	50                   	push   eax
c0014008:	52                   	push   edx
c0014009:	e8 a1 59 ff ff       	call   c00099af <realloc>
c001400e:	83 c4 10             	add    esp,0x10
c0014011:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014014:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014017:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001401a:	8d 74 24 18          	lea    esi,[esp+0x18]
c001401e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014022:	b9 08 00 00 00       	mov    ecx,0x8
c0014027:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014029:	31 f6                	xor    esi,esi
c001402b:	50                   	push   eax
c001402c:	68 00 01 00 00       	push   0x100
c0014031:	6a 00                	push   0x0
c0014033:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014037:	50                   	push   eax
c0014038:	e8 47 c6 fe ff       	call   c0000684 <memset>
c001403d:	83 c4 10             	add    esp,0x10
c0014040:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014048:	eb 0f                	jmp    c0014059 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001404a:	3c 3d                	cmp    al,0x3d
c001404c:	74 07                	je     c0014055 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c001404e:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014052:	46                   	inc    esi
c0014053:	eb 04                	jmp    c0014059 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014055:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014059:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001405e:	0f 85 c6 fe ff ff    	jne    c0013f2a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014064:	81 c4 2c 01 00 00    	add    esp,0x12c
c001406a:	5b                   	pop    ebx
c001406b:	5e                   	pop    esi
c001406c:	5f                   	pop    edi
c001406d:	5d                   	pop    ebp
c001406e:	c3                   	ret    
c001406f:	90                   	nop

c0014070 <EnvVarContainer::__loadSystem()>:
c0014070:	83 ec 10             	sub    esp,0x10
c0014073:	68 00 5e 02 c0       	push   0xc0025e00
c0014078:	68 7d 42 02 c0       	push   0xc002427d
c001407d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014081:	e8 04 fe ff ff       	call   c0013e8a <EnvVarContainer::loadFrom(char const*, char const*)>
c0014086:	83 c4 1c             	add    esp,0x1c
c0014089:	c3                   	ret    

c001408a <EnvVarContainer::__loadUser()>:
c001408a:	c3                   	ret    
c001408b:	90                   	nop

c001408c <EnvVarContainer::EnvVarContainer(Process*)>:
c001408c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014090:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001409a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001409e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00140a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00140ac:	90                   	nop
c00140ad:	c3                   	ret    

c00140ae <EnvVarContainer::~EnvVarContainer()>:
c00140ae:	83 ec 0c             	sub    esp,0xc
c00140b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00140b8:	85 c0                	test   eax,eax
c00140ba:	74 1d                	je     c00140d9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00140bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00140c2:	85 c0                	test   eax,eax
c00140c4:	74 13                	je     c00140d9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00140c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00140cd:	83 ec 0c             	sub    esp,0xc
c00140d0:	50                   	push   eax
c00140d1:	e8 fd 58 ff ff       	call   c00099d3 <free>
c00140d6:	83 c4 10             	add    esp,0x10
c00140d9:	90                   	nop
c00140da:	83 c4 0c             	add    esp,0xc
c00140dd:	c3                   	ret    

c00140de <Krnl::getEnv(Process*, char const*)>:
c00140de:	53                   	push   ebx
c00140df:	83 ec 08             	sub    esp,0x8
c00140e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140ea:	39 05 50 79 02 c0    	cmp    DWORD PTR ds:0xc0027950,eax
c00140f0:	74 04                	je     c00140f6 <Krnl::getEnv(Process*, char const*)+0x18>
c00140f2:	85 c0                	test   eax,eax
c00140f4:	75 0b                	jne    c0014101 <Krnl::getEnv(Process*, char const*)+0x23>
c00140f6:	a1 34 6f 02 c0       	mov    eax,ds:0xc0026f34
c00140fb:	85 c0                	test   eax,eax
c00140fd:	75 19                	jne    c0014118 <Krnl::getEnv(Process*, char const*)+0x3a>
c00140ff:	eb 27                	jmp    c0014128 <Krnl::getEnv(Process*, char const*)+0x4a>
c0014101:	52                   	push   edx
c0014102:	52                   	push   edx
c0014103:	53                   	push   ebx
c0014104:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001410a:	e8 79 fc ff ff       	call   c0013d88 <EnvVarContainer::getEnv(char const*)>
c001410f:	83 c4 10             	add    esp,0x10
c0014112:	85 c0                	test   eax,eax
c0014114:	75 28                	jne    c001413e <Krnl::getEnv(Process*, char const*)+0x60>
c0014116:	eb de                	jmp    c00140f6 <Krnl::getEnv(Process*, char const*)+0x18>
c0014118:	52                   	push   edx
c0014119:	52                   	push   edx
c001411a:	53                   	push   ebx
c001411b:	50                   	push   eax
c001411c:	e8 67 fc ff ff       	call   c0013d88 <EnvVarContainer::getEnv(char const*)>
c0014121:	83 c4 10             	add    esp,0x10
c0014124:	85 c0                	test   eax,eax
c0014126:	75 16                	jne    c001413e <Krnl::getEnv(Process*, char const*)+0x60>
c0014128:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001412c:	a1 38 6f 02 c0       	mov    eax,ds:0xc0026f38
c0014131:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014135:	83 c4 08             	add    esp,0x8
c0014138:	5b                   	pop    ebx
c0014139:	e9 4a fc ff ff       	jmp    c0013d88 <EnvVarContainer::getEnv(char const*)>
c001413e:	83 c4 08             	add    esp,0x8
c0014141:	5b                   	pop    ebx
c0014142:	c3                   	ret    

c0014143 <Krnl::setEnvSystem(char const*, char const*)>:
c0014143:	83 ec 10             	sub    esp,0x10
c0014146:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001414a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001414e:	ff 35 38 6f 02 c0    	push   DWORD PTR ds:0xc0026f38
c0014154:	e8 6d fc ff ff       	call   c0013dc6 <EnvVarContainer::setEnv(char const*, char const*)>
c0014159:	83 c4 1c             	add    esp,0x1c
c001415c:	c3                   	ret    

c001415d <Krnl::setEnvUser(char const*, char const*)>:
c001415d:	a1 34 6f 02 c0       	mov    eax,ds:0xc0026f34
c0014162:	85 c0                	test   eax,eax
c0014164:	74 15                	je     c001417b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014166:	83 ec 10             	sub    esp,0x10
c0014169:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001416d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014171:	50                   	push   eax
c0014172:	e8 4f fc ff ff       	call   c0013dc6 <EnvVarContainer::setEnv(char const*, char const*)>
c0014177:	83 c4 1c             	add    esp,0x1c
c001417a:	c3                   	ret    
c001417b:	c3                   	ret    

c001417c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001417c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014180:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0014186:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001418a:	e9 37 fc ff ff       	jmp    c0013dc6 <EnvVarContainer::setEnv(char const*, char const*)>

c001418f <Krnl::deleteEnvSystem(char const*)>:
c001418f:	c3                   	ret    

c0014190 <Krnl::deleteEnvUser(char const*)>:
c0014190:	c3                   	ret    

c0014191 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014191:	c3                   	ret    

c0014192 <Krnl::newProcessEnv(Process*)>:
c0014192:	83 ec 28             	sub    esp,0x28
c0014195:	6a 0c                	push   0xc
c0014197:	e8 27 58 ff ff       	call   c00099c3 <malloc>
c001419c:	5a                   	pop    edx
c001419d:	59                   	pop    ecx
c001419e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00141a2:	50                   	push   eax
c00141a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00141a7:	e8 e0 fe ff ff       	call   c001408c <EnvVarContainer::EnvVarContainer(Process*)>
c00141ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141b0:	83 c4 2c             	add    esp,0x2c
c00141b3:	c3                   	ret    

c00141b4 <Krnl::copyProcessEnv(Process*, Process*)>:
c00141b4:	57                   	push   edi
c00141b5:	56                   	push   esi
c00141b6:	53                   	push   ebx
c00141b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141bb:	83 ec 0c             	sub    esp,0xc
c00141be:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c00141c4:	6a 0c                	push   0xc
c00141c6:	e8 f8 57 ff ff       	call   c00099c3 <malloc>
c00141cb:	89 c3                	mov    ebx,eax
c00141cd:	58                   	pop    eax
c00141ce:	5a                   	pop    edx
c00141cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141d3:	53                   	push   ebx
c00141d4:	e8 b3 fe ff ff       	call   c001408c <EnvVarContainer::EnvVarContainer(Process*)>
c00141d9:	8b 07                	mov    eax,DWORD PTR [edi]
c00141db:	89 03                	mov    DWORD PTR [ebx],eax
c00141dd:	c1 e0 03             	shl    eax,0x3
c00141e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00141e3:	e8 db 57 ff ff       	call   c00099c3 <malloc>
c00141e8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00141eb:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00141ed:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00141f0:	c1 e1 03             	shl    ecx,0x3
c00141f3:	89 c7                	mov    edi,eax
c00141f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141f7:	83 c4 10             	add    esp,0x10
c00141fa:	89 d8                	mov    eax,ebx
c00141fc:	5b                   	pop    ebx
c00141fd:	5e                   	pop    esi
c00141fe:	5f                   	pop    edi
c00141ff:	c3                   	ret    

c0014200 <Krnl::loadSystemEnv()>:
c0014200:	53                   	push   ebx
c0014201:	83 ec 14             	sub    esp,0x14
c0014204:	6a 0c                	push   0xc
c0014206:	e8 b8 57 ff ff       	call   c00099c3 <malloc>
c001420b:	89 c3                	mov    ebx,eax
c001420d:	58                   	pop    eax
c001420e:	5a                   	pop    edx
c001420f:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c0014215:	53                   	push   ebx
c0014216:	e8 71 fe ff ff       	call   c001408c <EnvVarContainer::EnvVarContainer(Process*)>
c001421b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001421e:	89 1d 38 6f 02 c0    	mov    DWORD PTR ds:0xc0026f38,ebx
c0014224:	e8 47 fe ff ff       	call   c0014070 <EnvVarContainer::__loadSystem()>
c0014229:	83 c4 18             	add    esp,0x18
c001422c:	5b                   	pop    ebx
c001422d:	c3                   	ret    

c001422e <Krnl::loadUserEnv()>:
c001422e:	53                   	push   ebx
c001422f:	83 ec 14             	sub    esp,0x14
c0014232:	6a 0c                	push   0xc
c0014234:	e8 8a 57 ff ff       	call   c00099c3 <malloc>
c0014239:	89 c3                	mov    ebx,eax
c001423b:	58                   	pop    eax
c001423c:	5a                   	pop    edx
c001423d:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c0014243:	53                   	push   ebx
c0014244:	e8 43 fe ff ff       	call   c001408c <EnvVarContainer::EnvVarContainer(Process*)>
c0014249:	89 1d 34 6f 02 c0    	mov    DWORD PTR ds:0xc0026f34,ebx
c001424f:	83 c4 18             	add    esp,0x18
c0014252:	5b                   	pop    ebx
c0014253:	c3                   	ret    

c0014254 <Krnl::flushEnv()>:
c0014254:	c3                   	ret    

c0014255 <Krnl::getProcessTotalEnvCount(Process*)>:
c0014255:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014259:	8b 15 34 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026f34
c001425f:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0014265:	a1 38 6f 02 c0       	mov    eax,ds:0xc0026f38
c001426a:	8b 00                	mov    eax,DWORD PTR [eax]
c001426c:	03 01                	add    eax,DWORD PTR [ecx]
c001426e:	85 d2                	test   edx,edx
c0014270:	74 02                	je     c0014274 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014272:	03 02                	add    eax,DWORD PTR [edx]
c0014274:	c3                   	ret    

c0014275 <Krnl::getProcessEnvPair(Process*, int)>:
c0014275:	57                   	push   edi
c0014276:	56                   	push   esi
c0014277:	8b 35 34 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026f34
c001427d:	53                   	push   ebx
c001427e:	85 f6                	test   esi,esi
c0014280:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014284:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014288:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001428e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014292:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014294:	75 16                	jne    c00142ac <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0014296:	39 c2                	cmp    edx,eax
c0014298:	7c 16                	jl     c00142b0 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001429a:	8b 0d 38 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f38
c00142a0:	8b 31                	mov    esi,DWORD PTR [ecx]
c00142a2:	01 c6                	add    esi,eax
c00142a4:	39 d6                	cmp    esi,edx
c00142a6:	7e 3c                	jle    c00142e4 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00142a8:	29 c2                	sub    edx,eax
c00142aa:	eb 04                	jmp    c00142b0 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00142ac:	39 c2                	cmp    edx,eax
c00142ae:	7d 05                	jge    c00142b5 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00142b0:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00142b3:	eb 20                	jmp    c00142d5 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00142b5:	8b 3e                	mov    edi,DWORD PTR [esi]
c00142b7:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00142ba:	39 d1                	cmp    ecx,edx
c00142bc:	7e 04                	jle    c00142c2 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00142be:	29 c2                	sub    edx,eax
c00142c0:	eb 10                	jmp    c00142d2 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00142c2:	8b 35 38 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026f38
c00142c8:	03 0e                	add    ecx,DWORD PTR [esi]
c00142ca:	39 d1                	cmp    ecx,edx
c00142cc:	7e 16                	jle    c00142e4 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00142ce:	29 c2                	sub    edx,eax
c00142d0:	29 fa                	sub    edx,edi
c00142d2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00142d5:	8d 14 d0             	lea    edx,[eax+edx*8]
c00142d8:	8b 02                	mov    eax,DWORD PTR [edx]
c00142da:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00142dd:	89 03                	mov    DWORD PTR [ebx],eax
c00142df:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00142e2:	eb 1d                	jmp    c0014301 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00142e4:	83 ec 0c             	sub    esp,0xc
c00142e7:	68 9f 42 02 c0       	push   0xc002429f
c00142ec:	e8 18 00 00 00       	call   c0014309 <Krnl::panic(char const*)>
c00142f1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00142f7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00142fe:	83 c4 10             	add    esp,0x10
c0014301:	89 d8                	mov    eax,ebx
c0014303:	5b                   	pop    ebx
c0014304:	5e                   	pop    esi
c0014305:	5f                   	pop    edi
c0014306:	c2 04 00             	ret    0x4

c0014309 <Krnl::panic(char const*)>:
c0014309:	55                   	push   ebp
c001430a:	89 e5                	mov    ebp,esp
c001430c:	53                   	push   ebx
c001430d:	83 ec 10             	sub    esp,0x10
c0014310:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014313:	fa                   	cli    
c0014314:	c6 05 44 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f44,0x1
c001431b:	53                   	push   ebx
c001431c:	e8 fc 56 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0014321:	58                   	pop    eax
c0014322:	c6 05 00 58 02 c0 00 	mov    BYTE PTR ds:0xc0025800,0x0
c0014329:	5a                   	pop    edx
c001432a:	53                   	push   ebx
c001432b:	68 b9 42 02 c0       	push   0xc00242b9
c0014330:	e8 f3 86 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0014335:	59                   	pop    ecx
c0014336:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001433b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014341:	e8 37 64 ff ff       	call   c000a77d <setActiveTerminal(VgaText*)>
c0014346:	83 c4 0c             	add    esp,0xc
c0014349:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001434e:	6a 01                	push   0x1
c0014350:	6a 0f                	push   0xf
c0014352:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014358:	e8 7f 62 ff ff       	call   c000a5dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001435d:	58                   	pop    eax
c001435e:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014363:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014369:	e8 90 67 ff ff       	call   c000aafe <VgaText::clearScreen()>
c001436e:	58                   	pop    eax
c001436f:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014374:	5a                   	pop    edx
c0014375:	68 d2 42 02 c0       	push   0xc00242d2
c001437a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014380:	e8 05 69 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014385:	59                   	pop    ecx
c0014386:	58                   	pop    eax
c0014387:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001438c:	68 78 43 02 c0       	push   0xc0024378
c0014391:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014397:	e8 ee 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c001439c:	58                   	pop    eax
c001439d:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00143a2:	5a                   	pop    edx
c00143a3:	68 ee 42 02 c0       	push   0xc00242ee
c00143a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143ae:	e8 d7 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c00143b3:	59                   	pop    ecx
c00143b4:	58                   	pop    eax
c00143b5:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00143ba:	53                   	push   ebx
c00143bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143c1:	e8 c4 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c00143c6:	58                   	pop    eax
c00143c7:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00143cc:	5a                   	pop    edx
c00143cd:	68 0e 43 02 c0       	push   0xc002430e
c00143d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143d8:	e8 ad 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c00143dd:	a1 40 6f 02 c0       	mov    eax,ds:0xc0026f40
c00143e2:	83 c4 10             	add    esp,0x10
c00143e5:	85 c0                	test   eax,eax
c00143e7:	74 02                	je     c00143eb <Krnl::panic(char const*)+0xe2>
c00143e9:	ff d0                	call   eax
c00143eb:	83 ec 0c             	sub    esp,0xc
c00143ee:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00143f1:	e8 bb 30 00 00       	call   c00174b1 <Thr::getDriverNameFromAddress(unsigned long)>
c00143f6:	83 c4 10             	add    esp,0x10
c00143f9:	89 c3                	mov    ebx,eax
c00143fb:	85 c0                	test   eax,eax
c00143fd:	0f 84 4e 02 00 00    	je     c0014651 <Krnl::panic(char const*)+0x348>
c0014403:	83 ec 08             	sub    esp,0x8
c0014406:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001440b:	68 b4 43 02 c0       	push   0xc00243b4
c0014410:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014416:	e8 6f 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c001441b:	58                   	pop    eax
c001441c:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014421:	5a                   	pop    edx
c0014422:	68 ee 42 02 c0       	push   0xc00242ee
c0014427:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001442d:	e8 58 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014432:	59                   	pop    ecx
c0014433:	58                   	pop    eax
c0014434:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014439:	53                   	push   ebx
c001443a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014440:	e8 45 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014445:	83 c4 10             	add    esp,0x10
c0014448:	83 ec 08             	sub    esp,0x8
c001444b:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014450:	68 0d 43 02 c0       	push   0xc002430d
c0014455:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001445b:	e8 2a 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014460:	58                   	pop    eax
c0014461:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014466:	5a                   	pop    edx
c0014467:	68 0c 44 02 c0       	push   0xc002440c
c001446c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014472:	e8 13 68 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014477:	59                   	pop    ecx
c0014478:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001447d:	5b                   	pop    ebx
c001447e:	68 4c 44 02 c0       	push   0xc002444c
c0014483:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014489:	e8 fc 67 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c001448e:	58                   	pop    eax
c001448f:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014494:	5a                   	pop    edx
c0014495:	68 f9 42 02 c0       	push   0xc00242f9
c001449a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144a0:	e8 e5 67 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c00144a5:	59                   	pop    ecx
c00144a6:	5b                   	pop    ebx
c00144a7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00144aa:	68 11 43 02 c0       	push   0xc0024311
c00144af:	e8 74 85 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00144b4:	58                   	pop    eax
c00144b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144b8:	5a                   	pop    edx
c00144b9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144bc:	68 1a 43 02 c0       	push   0xc002431a
c00144c1:	e8 62 85 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00144c6:	59                   	pop    ecx
c00144c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144ca:	5b                   	pop    ebx
c00144cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00144cd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144d0:	68 23 43 02 c0       	push   0xc0024323
c00144d5:	e8 4e 85 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00144da:	58                   	pop    eax
c00144db:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00144e0:	5a                   	pop    edx
c00144e1:	68 90 44 02 c0       	push   0xc0024490
c00144e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144ec:	e8 99 67 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c00144f1:	59                   	pop    ecx
c00144f2:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00144f7:	5b                   	pop    ebx
c00144f8:	68 2c 43 02 c0       	push   0xc002432c
c00144fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014503:	e8 82 67 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014508:	0f 20 c0             	mov    eax,cr0
c001450b:	5a                   	pop    edx
c001450c:	59                   	pop    ecx
c001450d:	50                   	push   eax
c001450e:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014513:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014519:	e8 26 67 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c001451e:	5b                   	pop    ebx
c001451f:	58                   	pop    eax
c0014520:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014525:	68 36 43 02 c0       	push   0xc0024336
c001452a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014530:	e8 55 67 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014535:	0f 20 d0             	mov    eax,cr2
c0014538:	5a                   	pop    edx
c0014539:	59                   	pop    ecx
c001453a:	50                   	push   eax
c001453b:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014540:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014546:	e8 f9 66 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c001454b:	5b                   	pop    ebx
c001454c:	58                   	pop    eax
c001454d:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014552:	68 40 43 02 c0       	push   0xc0024340
c0014557:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001455d:	e8 28 67 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014562:	0f 20 d8             	mov    eax,cr3
c0014565:	5a                   	pop    edx
c0014566:	59                   	pop    ecx
c0014567:	50                   	push   eax
c0014568:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001456d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014573:	e8 cc 66 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c0014578:	5b                   	pop    ebx
c0014579:	58                   	pop    eax
c001457a:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001457f:	68 53 43 02 c0       	push   0xc0024353
c0014584:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001458a:	e8 fb 66 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c001458f:	0f 20 e0             	mov    eax,cr4
c0014592:	5a                   	pop    edx
c0014593:	59                   	pop    ecx
c0014594:	50                   	push   eax
c0014595:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001459a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145a0:	e8 9f 66 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c00145a5:	5b                   	pop    ebx
c00145a6:	58                   	pop    eax
c00145a7:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00145ac:	68 5d 43 02 c0       	push   0xc002435d
c00145b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145b7:	e8 ce 66 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c00145bc:	5a                   	pop    edx
c00145bd:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00145c2:	59                   	pop    ecx
c00145c3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00145c9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00145cc:	50                   	push   eax
c00145cd:	e8 72 66 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c00145d2:	5b                   	pop    ebx
c00145d3:	58                   	pop    eax
c00145d4:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00145d9:	68 74 43 02 c0       	push   0xc0024374
c00145de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145e4:	e8 a1 66 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c00145e9:	5a                   	pop    edx
c00145ea:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00145ef:	59                   	pop    ecx
c00145f0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00145f6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00145f9:	ff 72 04             	push   DWORD PTR [edx+0x4]
c00145fc:	50                   	push   eax
c00145fd:	e8 42 66 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c0014602:	5b                   	pop    ebx
c0014603:	58                   	pop    eax
c0014604:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014609:	68 74 43 02 c0       	push   0xc0024374
c001460e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014614:	e8 71 66 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014619:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001461e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014621:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014627:	8b 12                	mov    edx,DWORD PTR [edx]
c0014629:	59                   	pop    ecx
c001462a:	5b                   	pop    ebx
c001462b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001462e:	50                   	push   eax
c001462f:	e8 10 66 ff ff       	call   c000ac44 <VgaText::putx(unsigned int)>
c0014634:	83 c4 10             	add    esp,0x10
c0014637:	b2 fe                	mov    dl,0xfe
c0014639:	e4 60                	in     al,0x60
c001463b:	3c 1c                	cmp    al,0x1c
c001463d:	74 04                	je     c0014643 <Krnl::panic(char const*)+0x33a>
c001463f:	3c 5a                	cmp    al,0x5a
c0014641:	75 f6                	jne    c0014639 <Krnl::panic(char const*)+0x330>
c0014643:	e4 64                	in     al,0x64
c0014645:	a8 02                	test   al,0x2
c0014647:	75 fa                	jne    c0014643 <Krnl::panic(char const*)+0x33a>
c0014649:	88 d0                	mov    al,dl
c001464b:	e6 64                	out    0x64,al
c001464d:	fa                   	cli    
c001464e:	f4                   	hlt    
c001464f:	eb e8                	jmp    c0014639 <Krnl::panic(char const*)+0x330>
c0014651:	50                   	push   eax
c0014652:	50                   	push   eax
c0014653:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014658:	68 e0 43 02 c0       	push   0xc00243e0
c001465d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014663:	e8 22 66 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c0014668:	58                   	pop    eax
c0014669:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001466e:	5a                   	pop    edx
c001466f:	68 ee 42 02 c0       	push   0xc00242ee
c0014674:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001467a:	e8 0b 66 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c001467f:	59                   	pop    ecx
c0014680:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014685:	5b                   	pop    ebx
c0014686:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014689:	83 c0 0c             	add    eax,0xc
c001468c:	50                   	push   eax
c001468d:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014692:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014698:	e8 ed 65 ff ff       	call   c000ac8a <VgaText::puts(char const*)>
c001469d:	83 c4 10             	add    esp,0x10
c00146a0:	e9 a3 fd ff ff       	jmp    c0014448 <Krnl::panic(char const*)+0x13f>
c00146a5:	66 90                	xchg   ax,ax
c00146a7:	90                   	nop

c00146a8 <Net::switchEndian16(unsigned short)>:
c00146a8:	83 ec 04             	sub    esp,0x4
c00146ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00146af:	66 89 04 24          	mov    WORD PTR [esp],ax
c00146b3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00146b7:	c1 f8 08             	sar    eax,0x8
c00146ba:	89 c2                	mov    edx,eax
c00146bc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00146c0:	c1 e0 08             	shl    eax,0x8
c00146c3:	09 d0                	or     eax,edx
c00146c5:	83 c4 04             	add    esp,0x4
c00146c8:	c3                   	ret    
c00146c9:	8d 76 00             	lea    esi,[esi+0x0]

c00146cc <Net::switchEndian32(unsigned int)>:
c00146cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146d0:	c1 e8 18             	shr    eax,0x18
c00146d3:	89 c2                	mov    edx,eax
c00146d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146d9:	c1 e0 08             	shl    eax,0x8
c00146dc:	25 00 00 ff 00       	and    eax,0xff0000
c00146e1:	09 c2                	or     edx,eax
c00146e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146e7:	c1 e8 08             	shr    eax,0x8
c00146ea:	25 00 ff 00 00       	and    eax,0xff00
c00146ef:	09 c2                	or     edx,eax
c00146f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146f5:	c1 e0 18             	shl    eax,0x18
c00146f8:	09 d0                	or     eax,edx
c00146fa:	c3                   	ret    
c00146fb:	90                   	nop

c00146fc <Net::crc32Calc(unsigned char*, int)>:
c00146fc:	83 ec 10             	sub    esp,0x10
c00146ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014704:	75 0a                	jne    c0014710 <Net::crc32Calc(unsigned char*, int)+0x14>
c0014706:	b8 00 00 00 00       	mov    eax,0x0
c001470b:	e9 8c 00 00 00       	jmp    c001479c <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014710:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014715:	7f 09                	jg     c0014720 <Net::crc32Calc(unsigned char*, int)+0x24>
c0014717:	b8 00 00 00 00       	mov    eax,0x0
c001471c:	eb 7e                	jmp    c001479c <Net::crc32Calc(unsigned char*, int)+0xa0>
c001471e:	66 90                	xchg   ax,ax
c0014720:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0014728:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014730:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014734:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0014738:	7d 5a                	jge    c0014794 <Net::crc32Calc(unsigned char*, int)+0x98>
c001473a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001473e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014742:	01 d0                	add    eax,edx
c0014744:	8a 00                	mov    al,BYTE PTR [eax]
c0014746:	0f b6 c0             	movzx  eax,al
c0014749:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001474d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014755:	8d 76 00             	lea    esi,[esi+0x0]
c0014758:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001475d:	7f 2d                	jg     c001478c <Net::crc32Calc(unsigned char*, int)+0x90>
c001475f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014763:	83 e0 01             	and    eax,0x1
c0014766:	74 10                	je     c0014778 <Net::crc32Calc(unsigned char*, int)+0x7c>
c0014768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001476c:	d1 e8                	shr    eax,1
c001476e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0014773:	eb 0b                	jmp    c0014780 <Net::crc32Calc(unsigned char*, int)+0x84>
c0014775:	8d 76 00             	lea    esi,[esi+0x0]
c0014778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001477c:	d1 e8                	shr    eax,1
c001477e:	66 90                	xchg   ax,ax
c0014780:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014784:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014788:	eb ce                	jmp    c0014758 <Net::crc32Calc(unsigned char*, int)+0x5c>
c001478a:	66 90                	xchg   ax,ax
c001478c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014790:	eb 9e                	jmp    c0014730 <Net::crc32Calc(unsigned char*, int)+0x34>
c0014792:	66 90                	xchg   ax,ax
c0014794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014798:	f7 d0                	not    eax
c001479a:	66 90                	xchg   ax,ax
c001479c:	83 c4 10             	add    esp,0x10
c001479f:	c3                   	ret    

c00147a0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c00147a0:	57                   	push   edi
c00147a1:	56                   	push   esi
c00147a2:	53                   	push   ebx
c00147a3:	83 ec 60             	sub    esp,0x60
c00147a6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147ad:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00147b1:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00147b9:	8d 76 00             	lea    esi,[esi+0x0]
c00147bc:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c00147c1:	7f 1d                	jg     c00147e0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c00147c3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147ca:	8d 50 01             	lea    edx,[eax+0x1]
c00147cd:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00147d4:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c00147d7:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00147db:	eb df                	jmp    c00147bc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c00147dd:	8d 76 00             	lea    esi,[esi+0x0]
c00147e0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147e7:	8d 50 01             	lea    edx,[eax+0x1]
c00147ea:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00147f1:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c00147f4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147ff:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0014803:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014807:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001480f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014813:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014817:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001481b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001481f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014823:	89 c6                	mov    esi,eax
c0014825:	89 d7                	mov    edi,edx
c0014827:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014829:	89 c8                	mov    eax,ecx
c001482b:	89 fa                	mov    edx,edi
c001482d:	89 f3                	mov    ebx,esi
c001482f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014833:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014837:	89 04 24             	mov    DWORD PTR [esp],eax
c001483a:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014842:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014849:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001484d:	8d 44 24 78          	lea    eax,[esp+0x78]
c0014851:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014855:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001485d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014861:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014869:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001486d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014871:	89 c6                	mov    esi,eax
c0014873:	89 d7                	mov    edi,edx
c0014875:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014877:	89 c8                	mov    eax,ecx
c0014879:	89 fa                	mov    edx,edi
c001487b:	89 f3                	mov    ebx,esi
c001487d:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014881:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014885:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014889:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014891:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014898:	0f b7 c0             	movzx  eax,ax
c001489b:	c1 f8 08             	sar    eax,0x8
c001489e:	89 c1                	mov    ecx,eax
c00148a0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148a7:	8d 50 01             	lea    edx,[eax+0x1]
c00148aa:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00148b1:	88 ca                	mov    dl,cl
c00148b3:	88 10                	mov    BYTE PTR [eax],dl
c00148b5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00148bc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148c3:	8d 48 01             	lea    ecx,[eax+0x1]
c00148c6:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c00148cd:	88 10                	mov    BYTE PTR [eax],dl
c00148cf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00148d3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00148d7:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c00148de:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c00148e2:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00148e6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00148ea:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00148ee:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00148f2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00148f6:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00148fa:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00148fe:	89 c6                	mov    esi,eax
c0014900:	89 d7                	mov    edi,edx
c0014902:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014904:	89 c8                	mov    eax,ecx
c0014906:	89 fa                	mov    edx,edi
c0014908:	89 f3                	mov    ebx,esi
c001490a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001490e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014912:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014916:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001491a:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0014921:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014928:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001492c:	50                   	push   eax
c001492d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014931:	e8 c6 fd ff ff       	call   c00146fc <Net::crc32Calc(unsigned char*, int)>
c0014936:	83 c4 08             	add    esp,0x8
c0014939:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001493d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014941:	c1 e8 18             	shr    eax,0x18
c0014944:	89 c1                	mov    ecx,eax
c0014946:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001494d:	8d 50 01             	lea    edx,[eax+0x1]
c0014950:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014957:	88 ca                	mov    dl,cl
c0014959:	88 10                	mov    BYTE PTR [eax],dl
c001495b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001495f:	c1 e8 10             	shr    eax,0x10
c0014962:	89 c1                	mov    ecx,eax
c0014964:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001496b:	8d 50 01             	lea    edx,[eax+0x1]
c001496e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014975:	88 ca                	mov    dl,cl
c0014977:	88 10                	mov    BYTE PTR [eax],dl
c0014979:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001497d:	c1 e8 08             	shr    eax,0x8
c0014980:	89 c1                	mov    ecx,eax
c0014982:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014989:	8d 50 01             	lea    edx,[eax+0x1]
c001498c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014993:	88 ca                	mov    dl,cl
c0014995:	88 10                	mov    BYTE PTR [eax],dl
c0014997:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001499e:	8d 50 01             	lea    edx,[eax+0x1]
c00149a1:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00149a8:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00149ac:	88 10                	mov    BYTE PTR [eax],dl
c00149ae:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00149b2:	83 c4 60             	add    esp,0x60
c00149b5:	5b                   	pop    ebx
c00149b6:	5e                   	pop    esi
c00149b7:	5f                   	pop    edi
c00149b8:	c3                   	ret    
c00149b9:	8d 76 00             	lea    esi,[esi+0x0]

c00149bc <Net::unwrapEthernetFrame(unsigned char*, int)>:
c00149bc:	57                   	push   edi
c00149bd:	56                   	push   esi
c00149be:	53                   	push   ebx
c00149bf:	83 ec 70             	sub    esp,0x70
c00149c2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00149c9:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00149cd:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c00149d5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00149dc:	83 c0 0e             	add    eax,0xe
c00149df:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00149e3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00149ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00149ee:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c00149f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00149fa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00149fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a02:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a06:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014a0a:	89 c6                	mov    esi,eax
c0014a0c:	89 d7                	mov    edi,edx
c0014a0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a10:	89 c8                	mov    eax,ecx
c0014a12:	89 fa                	mov    edx,edi
c0014a14:	89 f3                	mov    ebx,esi
c0014a16:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014a1a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014a1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a22:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014a2a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014a31:	83 c0 08             	add    eax,0x8
c0014a34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0014a38:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a3f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0014a43:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0014a4b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014a4f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014a53:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014a57:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014a5b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014a5f:	89 c6                	mov    esi,eax
c0014a61:	89 d7                	mov    edi,edx
c0014a63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a65:	89 c8                	mov    eax,ecx
c0014a67:	89 fa                	mov    edx,edi
c0014a69:	89 f3                	mov    ebx,esi
c0014a6b:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014a6f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014a73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014a77:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014a7f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a86:	8d 50 01             	lea    edx,[eax+0x1]
c0014a89:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014a90:	8a 00                	mov    al,BYTE PTR [eax]
c0014a92:	0f b6 c0             	movzx  eax,al
c0014a95:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0014a9a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014aa1:	8d 50 01             	lea    edx,[eax+0x1]
c0014aa4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014aab:	8a 00                	mov    al,BYTE PTR [eax]
c0014aad:	0f b6 c0             	movzx  eax,al
c0014ab0:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0014ab5:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0014aba:	c1 e0 08             	shl    eax,0x8
c0014abd:	89 c2                	mov    edx,eax
c0014abf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0014ac3:	09 d0                	or     eax,edx
c0014ac5:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014acc:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0014ad0:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0014ad8:	75 46                	jne    c0014b20 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014ada:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014ae1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014ae4:	66 3d dc 05          	cmp    ax,0x5dc
c0014ae8:	77 16                	ja     c0014b00 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0014aea:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014af1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014af4:	0f b7 c0             	movzx  eax,ax
c0014af7:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0014afe:	eb 20                	jmp    c0014b20 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014b00:	83 ec 0c             	sub    esp,0xc
c0014b03:	68 b8 44 02 c0       	push   0xc00244b8
c0014b08:	e8 1b 7f ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0014b0d:	83 c4 10             	add    esp,0x10
c0014b10:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b17:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0014b1b:	e9 18 01 00 00       	jmp    c0014c38 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0014b20:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014b27:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014b2e:	8b 12                	mov    edx,DWORD PTR [edx]
c0014b30:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014b34:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014b3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014b3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b4f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014b57:	89 c6                	mov    esi,eax
c0014b59:	89 d7                	mov    edi,edx
c0014b5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b5d:	89 c8                	mov    eax,ecx
c0014b5f:	89 fa                	mov    edx,edi
c0014b61:	89 f3                	mov    ebx,esi
c0014b63:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014b67:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014b6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b6e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014b75:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0014b7c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b83:	8d 50 01             	lea    edx,[eax+0x1]
c0014b86:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014b8d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b8f:	0f b6 c0             	movzx  eax,al
c0014b92:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0014b96:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b9d:	8d 50 01             	lea    edx,[eax+0x1]
c0014ba0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014ba7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ba9:	0f b6 c0             	movzx  eax,al
c0014bac:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0014bb0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bb7:	8d 50 01             	lea    edx,[eax+0x1]
c0014bba:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bc1:	8a 00                	mov    al,BYTE PTR [eax]
c0014bc3:	0f b6 c0             	movzx  eax,al
c0014bc6:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0014bca:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bd1:	8d 50 01             	lea    edx,[eax+0x1]
c0014bd4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bdb:	8a 00                	mov    al,BYTE PTR [eax]
c0014bdd:	0f b6 c0             	movzx  eax,al
c0014be0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014be4:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0014be8:	c1 e0 18             	shl    eax,0x18
c0014beb:	89 c2                	mov    edx,eax
c0014bed:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0014bf1:	c1 e0 10             	shl    eax,0x10
c0014bf4:	09 c2                	or     edx,eax
c0014bf6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0014bfa:	c1 e0 08             	shl    eax,0x8
c0014bfd:	09 d0                	or     eax,edx
c0014bff:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0014c03:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014c07:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c0e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0014c12:	83 e8 04             	sub    eax,0x4
c0014c15:	83 ec 08             	sub    esp,0x8
c0014c18:	50                   	push   eax
c0014c19:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014c1d:	e8 da fa ff ff       	call   c00146fc <Net::crc32Calc(unsigned char*, int)>
c0014c22:	83 c4 10             	add    esp,0x10
c0014c25:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0014c29:	0f 94 c2             	sete   dl
c0014c2c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c33:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0014c36:	90                   	nop
c0014c37:	90                   	nop
c0014c38:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c3f:	83 c4 70             	add    esp,0x70
c0014c42:	5b                   	pop    ebx
c0014c43:	5e                   	pop    esi
c0014c44:	5f                   	pop    edi
c0014c45:	c2 04 00             	ret    0x4

c0014c48 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014c48:	55                   	push   ebp
c0014c49:	57                   	push   edi
c0014c4a:	56                   	push   esi
c0014c4b:	53                   	push   ebx
c0014c4c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014c52:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014c59:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014c5b:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014c5e:	80 fb 40             	cmp    bl,0x40
c0014c61:	75 1b                	jne    c0014c7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014c63:	8a 16                	mov    dl,BYTE PTR [esi]
c0014c65:	84 d2                	test   dl,dl
c0014c67:	0f 84 f1 00 00 00    	je     c0014d5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014c6d:	8d 46 01             	lea    eax,[esi+0x1]
c0014c70:	80 fa 3a             	cmp    dl,0x3a
c0014c73:	74 04                	je     c0014c79 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014c75:	89 c6                	mov    esi,eax
c0014c77:	eb ea                	jmp    c0014c63 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014c79:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014c7c:	89 c6                	mov    esi,eax
c0014c7e:	50                   	push   eax
c0014c7f:	6a 40                	push   0x40
c0014c81:	6a 00                	push   0x0
c0014c83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014c87:	50                   	push   eax
c0014c88:	e8 f7 b9 fe ff       	call   c0000684 <memset>
c0014c8d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014c94:	31 c0                	xor    eax,eax
c0014c96:	83 c4 10             	add    esp,0x10
c0014c99:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014c9b:	84 c9                	test   cl,cl
c0014c9d:	0f 84 bb 00 00 00    	je     c0014d5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014ca3:	3d c7 00 00 00       	cmp    eax,0xc7
c0014ca8:	0f 8f b0 00 00 00    	jg     c0014d5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014cae:	80 f9 0a             	cmp    cl,0xa
c0014cb1:	0f 85 98 00 00 00    	jne    c0014d4f <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014cb7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014cbc:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014cc0:	a8 df                	test   al,0xdf
c0014cc2:	0f 94 c1             	sete   cl
c0014cc5:	3c 23                	cmp    al,0x23
c0014cc7:	0f 94 c2             	sete   dl
c0014cca:	08 d1                	or     cl,dl
c0014ccc:	75 4a                	jne    c0014d18 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cce:	8d 50 f7             	lea    edx,[eax-0x9]
c0014cd1:	80 fa 01             	cmp    dl,0x1
c0014cd4:	76 42                	jbe    c0014d18 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cd6:	3c 5b                	cmp    al,0x5b
c0014cd8:	75 42                	jne    c0014d1c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014cda:	80 fb 40             	cmp    bl,0x40
c0014cdd:	75 39                	jne    c0014d18 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cdf:	83 ec 0c             	sub    esp,0xc
c0014ce2:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014ce6:	52                   	push   edx
c0014ce7:	e8 b4 b9 fe ff       	call   c00006a0 <strlen>
c0014cec:	83 c4 10             	add    esp,0x10
c0014cef:	83 f8 3f             	cmp    eax,0x3f
c0014cf2:	77 6a                	ja     c0014d5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014cf4:	50                   	push   eax
c0014cf5:	50                   	push   eax
c0014cf6:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014cfa:	52                   	push   edx
c0014cfb:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014cff:	52                   	push   edx
c0014d00:	e8 3b ba fe ff       	call   c0000740 <strcpy>
c0014d05:	58                   	pop    eax
c0014d06:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d0a:	52                   	push   edx
c0014d0b:	e8 90 b9 fe ff       	call   c00006a0 <strlen>
c0014d10:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014d15:	83 c4 10             	add    esp,0x10
c0014d18:	31 d2                	xor    edx,edx
c0014d1a:	eb 3a                	jmp    c0014d56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014d1c:	80 fb 40             	cmp    bl,0x40
c0014d1f:	74 06                	je     c0014d27 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014d21:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014d25:	eb 20                	jmp    c0014d47 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014d27:	50                   	push   eax
c0014d28:	50                   	push   eax
c0014d29:	55                   	push   ebp
c0014d2a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014d2e:	50                   	push   eax
c0014d2f:	e8 98 ba fe ff       	call   c00007cc <strcmp>
c0014d34:	83 c4 10             	add    esp,0x10
c0014d37:	85 c0                	test   eax,eax
c0014d39:	75 dd                	jne    c0014d18 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d3b:	eb e4                	jmp    c0014d21 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014d3d:	8d 50 01             	lea    edx,[eax+0x1]
c0014d40:	80 f9 3d             	cmp    cl,0x3d
c0014d43:	74 1d                	je     c0014d62 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014d45:	89 d0                	mov    eax,edx
c0014d47:	8a 08                	mov    cl,BYTE PTR [eax]
c0014d49:	84 c9                	test   cl,cl
c0014d4b:	75 f0                	jne    c0014d3d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014d4d:	eb 0f                	jmp    c0014d5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d4f:	8d 50 01             	lea    edx,[eax+0x1]
c0014d52:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014d56:	47                   	inc    edi
c0014d57:	89 d0                	mov    eax,edx
c0014d59:	e9 3b ff ff ff       	jmp    c0014c99 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014d5e:	31 c0                	xor    eax,eax
c0014d60:	eb 33                	jmp    c0014d95 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014d66:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014d69:	50                   	push   eax
c0014d6a:	50                   	push   eax
c0014d6b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014d6f:	50                   	push   eax
c0014d70:	56                   	push   esi
c0014d71:	e8 56 ba fe ff       	call   c00007cc <strcmp>
c0014d76:	83 c4 10             	add    esp,0x10
c0014d79:	85 c0                	test   eax,eax
c0014d7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d7f:	75 97                	jne    c0014d18 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d81:	51                   	push   ecx
c0014d82:	51                   	push   ecx
c0014d83:	52                   	push   edx
c0014d84:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014d8b:	e8 b0 b9 fe ff       	call   c0000740 <strcpy>
c0014d90:	83 c4 10             	add    esp,0x10
c0014d93:	b0 01                	mov    al,0x1
c0014d95:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014d9b:	5b                   	pop    ebx
c0014d9c:	5e                   	pop    esi
c0014d9d:	5f                   	pop    edi
c0014d9e:	5d                   	pop    ebp
c0014d9f:	c3                   	ret    

c0014da0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014da0:	57                   	push   edi
c0014da1:	56                   	push   esi
c0014da2:	53                   	push   ebx
c0014da3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014da9:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0014db0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0014db7:	53                   	push   ebx
c0014db8:	e8 e3 b8 fe ff       	call   c00006a0 <strlen>
c0014dbd:	89 34 24             	mov    DWORD PTR [esp],esi
c0014dc0:	89 c7                	mov    edi,eax
c0014dc2:	e8 d9 b8 fe ff       	call   c00006a0 <strlen>
c0014dc7:	83 c4 10             	add    esp,0x10
c0014dca:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014dce:	3d ff 00 00 00       	cmp    eax,0xff
c0014dd3:	0f 87 d3 00 00 00    	ja     c0014eac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014dd9:	57                   	push   edi
c0014dda:	57                   	push   edi
c0014ddb:	56                   	push   esi
c0014ddc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014de0:	56                   	push   esi
c0014de1:	e8 5a b9 fe ff       	call   c0000740 <strcpy>
c0014de6:	58                   	pop    eax
c0014de7:	5a                   	pop    edx
c0014de8:	68 5a 48 02 c0       	push   0xc002485a
c0014ded:	56                   	push   esi
c0014dee:	e8 8d ba fe ff       	call   c0000880 <strcat>
c0014df3:	59                   	pop    ecx
c0014df4:	5f                   	pop    edi
c0014df5:	53                   	push   ebx
c0014df6:	56                   	push   esi
c0014df7:	e8 84 ba fe ff       	call   c0000880 <strcat>
c0014dfc:	58                   	pop    eax
c0014dfd:	5a                   	pop    edx
c0014dfe:	68 04 45 02 c0       	push   0xc0024504
c0014e03:	56                   	push   esi
c0014e04:	e8 77 ba fe ff       	call   c0000880 <strcat>
c0014e09:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014e10:	e8 ae 4b ff ff       	call   c00099c3 <malloc>
c0014e15:	83 c4 0c             	add    esp,0xc
c0014e18:	89 c3                	mov    ebx,eax
c0014e1a:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c0014e20:	56                   	push   esi
c0014e21:	50                   	push   eax
c0014e22:	e8 6b 81 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0014e27:	83 c4 10             	add    esp,0x10
c0014e2a:	85 db                	test   ebx,ebx
c0014e2c:	74 7e                	je     c0014eac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014e2e:	51                   	push   ecx
c0014e2f:	51                   	push   ecx
c0014e30:	6a 01                	push   0x1
c0014e32:	53                   	push   ebx
c0014e33:	e8 be 81 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c0014e38:	83 c4 10             	add    esp,0x10
c0014e3b:	85 c0                	test   eax,eax
c0014e3d:	74 08                	je     c0014e47 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0014e3f:	83 ec 0c             	sub    esp,0xc
c0014e42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e44:	53                   	push   ebx
c0014e45:	eb 5f                	jmp    c0014ea6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014e47:	52                   	push   edx
c0014e48:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014e4c:	50                   	push   eax
c0014e4d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014e51:	50                   	push   eax
c0014e52:	53                   	push   ebx
c0014e53:	e8 4a 84 ff ff       	call   c000d2a2 <File::stat(unsigned long long*, bool*)>
c0014e58:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e5c:	83 c4 10             	add    esp,0x10
c0014e5f:	89 c1                	mov    ecx,eax
c0014e61:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0014e65:	74 31                	je     c0014e98 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014e67:	83 ec 0c             	sub    esp,0xc
c0014e6a:	50                   	push   eax
c0014e6b:	e8 53 4b ff ff       	call   c00099c3 <malloc>
c0014e70:	89 c6                	mov    esi,eax
c0014e72:	58                   	pop    eax
c0014e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e75:	8d 54 24 20          	lea    edx,[esp+0x20]
c0014e79:	52                   	push   edx
c0014e7a:	56                   	push   esi
c0014e7b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014e7f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014e83:	53                   	push   ebx
c0014e84:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e87:	83 c4 20             	add    esp,0x20
c0014e8a:	85 c0                	test   eax,eax
c0014e8c:	75 0a                	jne    c0014e98 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014e8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e92:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0014e96:	74 18                	je     c0014eb0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0014e98:	83 ec 0c             	sub    esp,0xc
c0014e9b:	53                   	push   ebx
c0014e9c:	e8 b3 81 ff ff       	call   c000d054 <File::close()>
c0014ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ea3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ea6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ea9:	83 c4 10             	add    esp,0x10
c0014eac:	31 c0                	xor    eax,eax
c0014eae:	eb 3b                	jmp    c0014eeb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0014eb0:	83 ec 0c             	sub    esp,0xc
c0014eb3:	53                   	push   ebx
c0014eb4:	e8 9b 81 ff ff       	call   c000d054 <File::close()>
c0014eb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ebb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ebe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ec1:	83 c4 0c             	add    esp,0xc
c0014ec4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014ecb:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014ed2:	56                   	push   esi
c0014ed3:	e8 70 fd ff ff       	call   c0014c48 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014ed8:	89 34 24             	mov    DWORD PTR [esp],esi
c0014edb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014edf:	e8 ef 4a ff ff       	call   c00099d3 <free>
c0014ee4:	83 c4 10             	add    esp,0x10
c0014ee7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014eeb:	81 c4 20 01 00 00    	add    esp,0x120
c0014ef1:	5b                   	pop    ebx
c0014ef2:	5e                   	pop    esi
c0014ef3:	5f                   	pop    edi
c0014ef4:	c3                   	ret    

c0014ef5 <Reg::getLine(char*, char*, char*)>:
c0014ef5:	57                   	push   edi
c0014ef6:	56                   	push   esi
c0014ef7:	53                   	push   ebx
c0014ef8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014efc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014f00:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014f04:	57                   	push   edi
c0014f05:	56                   	push   esi
c0014f06:	53                   	push   ebx
c0014f07:	68 09 45 02 c0       	push   0xc0024509
c0014f0c:	e8 8f fe ff ff       	call   c0014da0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f11:	83 c4 10             	add    esp,0x10
c0014f14:	84 c0                	test   al,al
c0014f16:	75 10                	jne    c0014f28 <Reg::getLine(char*, char*, char*)+0x33>
c0014f18:	57                   	push   edi
c0014f19:	56                   	push   esi
c0014f1a:	53                   	push   ebx
c0014f1b:	68 2e 45 02 c0       	push   0xc002452e
c0014f20:	e8 7b fe ff ff       	call   c0014da0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f25:	83 c4 10             	add    esp,0x10
c0014f28:	5b                   	pop    ebx
c0014f29:	5e                   	pop    esi
c0014f2a:	5f                   	pop    edi
c0014f2b:	c3                   	ret    

c0014f2c <Reg::readInt(char*, char*, int*)>:
c0014f2c:	55                   	push   ebp
c0014f2d:	57                   	push   edi
c0014f2e:	56                   	push   esi
c0014f2f:	53                   	push   ebx
c0014f30:	81 ec f0 00 00 00    	sub    esp,0xf0
c0014f36:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0014f3a:	57                   	push   edi
c0014f3b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f42:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f49:	e8 a7 ff ff ff       	call   c0014ef5 <Reg::getLine(char*, char*, char*)>
c0014f4e:	83 c4 10             	add    esp,0x10
c0014f51:	84 c0                	test   al,al
c0014f53:	0f 84 b3 00 00 00    	je     c001500c <Reg::readInt(char*, char*, int*)+0xe0>
c0014f59:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0014f5d:	80 fa 2b             	cmp    dl,0x2b
c0014f60:	74 0c                	je     c0014f6e <Reg::readInt(char*, char*, int*)+0x42>
c0014f62:	80 fa 2d             	cmp    dl,0x2d
c0014f65:	75 0e                	jne    c0014f75 <Reg::readInt(char*, char*, int*)+0x49>
c0014f67:	ba 01 00 00 00       	mov    edx,0x1
c0014f6c:	eb 0b                	jmp    c0014f79 <Reg::readInt(char*, char*, int*)+0x4d>
c0014f6e:	ba 01 00 00 00       	mov    edx,0x1
c0014f73:	eb 02                	jmp    c0014f77 <Reg::readInt(char*, char*, int*)+0x4b>
c0014f75:	31 d2                	xor    edx,edx
c0014f77:	31 c0                	xor    eax,eax
c0014f79:	be 0a 00 00 00       	mov    esi,0xa
c0014f7e:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0014f83:	75 20                	jne    c0014fa5 <Reg::readInt(char*, char*, int*)+0x79>
c0014f85:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0014f89:	80 f9 78             	cmp    cl,0x78
c0014f8c:	75 0a                	jne    c0014f98 <Reg::readInt(char*, char*, int*)+0x6c>
c0014f8e:	83 c2 02             	add    edx,0x2
c0014f91:	be 10 00 00 00       	mov    esi,0x10
c0014f96:	eb 0d                	jmp    c0014fa5 <Reg::readInt(char*, char*, int*)+0x79>
c0014f98:	80 f9 62             	cmp    cl,0x62
c0014f9b:	75 08                	jne    c0014fa5 <Reg::readInt(char*, char*, int*)+0x79>
c0014f9d:	83 c2 02             	add    edx,0x2
c0014fa0:	be 02 00 00 00       	mov    esi,0x2
c0014fa5:	01 d7                	add    edi,edx
c0014fa7:	31 d2                	xor    edx,edx
c0014fa9:	8a 1f                	mov    bl,BYTE PTR [edi]
c0014fab:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0014faf:	80 fb 0d             	cmp    bl,0xd
c0014fb2:	0f 94 c3             	sete   bl
c0014fb5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014fba:	0f 94 c1             	sete   cl
c0014fbd:	08 cb                	or     bl,cl
c0014fbf:	75 3a                	jne    c0014ffb <Reg::readInt(char*, char*, int*)+0xcf>
c0014fc1:	0f af d6             	imul   edx,esi
c0014fc4:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0014fc9:	83 fe 10             	cmp    esi,0x10
c0014fcc:	75 26                	jne    c0014ff4 <Reg::readInt(char*, char*, int*)+0xc8>
c0014fce:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014fd2:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0014fd5:	89 e9                	mov    ecx,ebp
c0014fd7:	80 f9 05             	cmp    cl,0x5
c0014fda:	77 06                	ja     c0014fe2 <Reg::readInt(char*, char*, int*)+0xb6>
c0014fdc:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0014fe0:	eb 16                	jmp    c0014ff8 <Reg::readInt(char*, char*, int*)+0xcc>
c0014fe2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014fe6:	83 e9 61             	sub    ecx,0x61
c0014fe9:	80 f9 05             	cmp    cl,0x5
c0014fec:	77 06                	ja     c0014ff4 <Reg::readInt(char*, char*, int*)+0xc8>
c0014fee:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0014ff2:	eb 04                	jmp    c0014ff8 <Reg::readInt(char*, char*, int*)+0xcc>
c0014ff4:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0014ff8:	47                   	inc    edi
c0014ff9:	eb ae                	jmp    c0014fa9 <Reg::readInt(char*, char*, int*)+0x7d>
c0014ffb:	84 c0                	test   al,al
c0014ffd:	74 02                	je     c0015001 <Reg::readInt(char*, char*, int*)+0xd5>
c0014fff:	f7 da                	neg    edx
c0015001:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015008:	89 10                	mov    DWORD PTR [eax],edx
c001500a:	88 d8                	mov    al,bl
c001500c:	81 c4 ec 00 00 00    	add    esp,0xec
c0015012:	5b                   	pop    ebx
c0015013:	5e                   	pop    esi
c0015014:	5f                   	pop    edi
c0015015:	5d                   	pop    ebp
c0015016:	c3                   	ret    

c0015017 <Reg::readString(char*, char*, char*, int)>:
c0015017:	57                   	push   edi
c0015018:	56                   	push   esi
c0015019:	53                   	push   ebx
c001501a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015020:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015027:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001502b:	57                   	push   edi
c001502c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015033:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001503a:	e8 b6 fe ff ff       	call   c0014ef5 <Reg::getLine(char*, char*, char*)>
c001503f:	83 c4 10             	add    esp,0x10
c0015042:	89 c6                	mov    esi,eax
c0015044:	84 c0                	test   al,al
c0015046:	74 44                	je     c001508c <Reg::readString(char*, char*, char*, int)+0x75>
c0015048:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001504f:	31 c0                	xor    eax,eax
c0015051:	4a                   	dec    edx
c0015052:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015055:	84 c9                	test   cl,cl
c0015057:	74 0f                	je     c0015068 <Reg::readString(char*, char*, char*, int)+0x51>
c0015059:	39 c2                	cmp    edx,eax
c001505b:	7e 0b                	jle    c0015068 <Reg::readString(char*, char*, char*, int)+0x51>
c001505d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015060:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015065:	40                   	inc    eax
c0015066:	eb ea                	jmp    c0015052 <Reg::readString(char*, char*, char*, int)+0x3b>
c0015068:	83 ec 0c             	sub    esp,0xc
c001506b:	53                   	push   ebx
c001506c:	e8 2f b6 fe ff       	call   c00006a0 <strlen>
c0015071:	83 c4 10             	add    esp,0x10
c0015074:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015079:	75 11                	jne    c001508c <Reg::readString(char*, char*, char*, int)+0x75>
c001507b:	83 ec 0c             	sub    esp,0xc
c001507e:	53                   	push   ebx
c001507f:	e8 1c b6 fe ff       	call   c00006a0 <strlen>
c0015084:	83 c4 10             	add    esp,0x10
c0015087:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001508c:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015092:	89 f0                	mov    eax,esi
c0015094:	5b                   	pop    ebx
c0015095:	5e                   	pop    esi
c0015096:	5f                   	pop    edi
c0015097:	c3                   	ret    

c0015098 <Reg::readBool(char*, char*, bool*)>:
c0015098:	83 ec 20             	sub    esp,0x20
c001509b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001509f:	50                   	push   eax
c00150a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150a8:	e8 7f fe ff ff       	call   c0014f2c <Reg::readInt(char*, char*, int*)>
c00150ad:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00150b2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00150b6:	0f 95 02             	setne  BYTE PTR [edx]
c00150b9:	83 c4 2c             	add    esp,0x2c
c00150bc:	c3                   	ret    

c00150bd <Reg::readBoolWithDefault(char*, char*, bool)>:
c00150bd:	53                   	push   ebx
c00150be:	83 ec 1c             	sub    esp,0x1c
c00150c1:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00150c5:	8d 44 24 13          	lea    eax,[esp+0x13]
c00150c9:	50                   	push   eax
c00150ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150d2:	e8 c1 ff ff ff       	call   c0015098 <Reg::readBool(char*, char*, bool*)>
c00150d7:	83 c4 10             	add    esp,0x10
c00150da:	84 c0                	test   al,al
c00150dc:	74 04                	je     c00150e2 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00150de:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00150e2:	88 d8                	mov    al,bl
c00150e4:	83 c4 18             	add    esp,0x18
c00150e7:	5b                   	pop    ebx
c00150e8:	c3                   	ret    

c00150e9 <Reg::readIntWithDefault(char*, char*, int)>:
c00150e9:	53                   	push   ebx
c00150ea:	83 ec 1c             	sub    esp,0x1c
c00150ed:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00150f1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00150f5:	50                   	push   eax
c00150f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150fe:	e8 29 fe ff ff       	call   c0014f2c <Reg::readInt(char*, char*, int*)>
c0015103:	83 c4 10             	add    esp,0x10
c0015106:	84 c0                	test   al,al
c0015108:	74 04                	je     c001510e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001510a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001510e:	89 d8                	mov    eax,ebx
c0015110:	83 c4 18             	add    esp,0x18
c0015113:	5b                   	pop    ebx
c0015114:	c3                   	ret    

c0015115 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015115:	57                   	push   edi
c0015116:	56                   	push   esi
c0015117:	56                   	push   esi
c0015118:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001511c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015120:	56                   	push   esi
c0015121:	57                   	push   edi
c0015122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001512a:	e8 e8 fe ff ff       	call   c0015017 <Reg::readString(char*, char*, char*, int)>
c001512f:	83 c4 10             	add    esp,0x10
c0015132:	84 c0                	test   al,al
c0015134:	75 1a                	jne    c0015150 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015136:	51                   	push   ecx
c0015137:	56                   	push   esi
c0015138:	6a 00                	push   0x0
c001513a:	57                   	push   edi
c001513b:	e8 44 b5 fe ff       	call   c0000684 <memset>
c0015140:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015143:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015147:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015149:	83 c4 10             	add    esp,0x10
c001514c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015150:	89 f8                	mov    eax,edi
c0015152:	5a                   	pop    edx
c0015153:	5e                   	pop    esi
c0015154:	5f                   	pop    edi
c0015155:	c3                   	ret    

c0015156 <Sys::eject(regs*)>:
c0015156:	83 ec 0c             	sub    esp,0xc
c0015159:	83 ca ff             	or     edx,0xffffffff
c001515c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015160:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015163:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015168:	83 e9 41             	sub    ecx,0x41
c001516b:	83 f9 19             	cmp    ecx,0x19
c001516e:	77 18                	ja     c0015188 <Sys::eject(regs*)+0x32>
c0015170:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c0015177:	85 c9                	test   ecx,ecx
c0015179:	74 0d                	je     c0015188 <Sys::eject(regs*)+0x32>
c001517b:	83 ec 0c             	sub    esp,0xc
c001517e:	51                   	push   ecx
c001517f:	e8 5e af ff ff       	call   c00100e2 <LogicalDisk::eject()>
c0015184:	83 c4 10             	add    esp,0x10
c0015187:	99                   	cdq    
c0015188:	83 c4 0c             	add    esp,0xc
c001518b:	c3                   	ret    

c001518c <Sys::exit(regs*)>:
c001518c:	83 ec 18             	sub    esp,0x18
c001518f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015193:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015196:	e8 99 36 00 00       	call   c0018834 <terminateTask(int)>
c001519b:	83 c8 ff             	or     eax,0xffffffff
c001519e:	83 c4 1c             	add    esp,0x1c
c00151a1:	89 c2                	mov    edx,eax
c00151a3:	c3                   	ret    

c00151a4 <Sys::getCwd(regs*)>:
c00151a4:	83 ec 10             	sub    esp,0x10
c00151a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00151ab:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00151ae:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00151b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151b6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00151b9:	e8 d6 7b ff ff       	call   c000cd94 <Fs::getcwd(Process*, char*, int)>
c00151be:	83 c4 1c             	add    esp,0x1c
c00151c1:	99                   	cdq    
c00151c2:	c3                   	ret    

c00151c3 <Sys::getPID(regs*)>:
c00151c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00151cd:	99                   	cdq    
c00151ce:	c3                   	ret    

c00151cf <Sys::getRAMData(regs*)>:
c00151cf:	8b 0d 74 64 02 c0    	mov    ecx,DWORD PTR ds:0xc0026474
c00151d5:	69 05 70 64 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026470,0xc8
c00151df:	99                   	cdq    
c00151e0:	f7 f9                	idiv   ecx
c00151e2:	c1 e0 18             	shl    eax,0x18
c00151e5:	09 c8                	or     eax,ecx
c00151e7:	99                   	cdq    
c00151e8:	c3                   	ret    

c00151e9 <Sys::getVGAPtr(regs*)>:
c00151e9:	55                   	push   ebp
c00151ea:	57                   	push   edi
c00151eb:	56                   	push   esi
c00151ec:	53                   	push   ebx
c00151ed:	83 ec 18             	sub    esp,0x18
c00151f0:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00151f4:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00151f7:	e8 38 31 00 00       	call   c0018334 <Thr::processFromPID(int)>
c00151fc:	83 c4 10             	add    esp,0x10
c00151ff:	89 c1                	mov    ecx,eax
c0015201:	b8 01 00 00 00       	mov    eax,0x1
c0015206:	85 c9                	test   ecx,ecx
c0015208:	74 59                	je     c0015263 <Sys::getVGAPtr(regs*)+0x7a>
c001520a:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c0015210:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015214:	74 0c                	je     c0015222 <Sys::getVGAPtr(regs*)+0x39>
c0015216:	83 ec 0c             	sub    esp,0xc
c0015219:	53                   	push   ebx
c001521a:	e8 5e 55 ff ff       	call   c000a77d <setActiveTerminal(VgaText*)>
c001521f:	83 c4 10             	add    esp,0x10
c0015222:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015225:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015228:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001522d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001522f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015232:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015235:	81 c3 82 00 00 00    	add    ebx,0x82
c001523b:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015241:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015244:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0015247:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001524d:	50                   	push   eax
c001524e:	50                   	push   eax
c001524f:	53                   	push   ebx
c0015250:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015253:	05 a8 0f 00 00       	add    eax,0xfa8
c0015258:	50                   	push   eax
c0015259:	e8 e2 b4 fe ff       	call   c0000740 <strcpy>
c001525e:	83 c4 10             	add    esp,0x10
c0015261:	31 c0                	xor    eax,eax
c0015263:	83 c4 0c             	add    esp,0xc
c0015266:	31 d2                	xor    edx,edx
c0015268:	5b                   	pop    ebx
c0015269:	5e                   	pop    esi
c001526a:	5f                   	pop    edi
c001526b:	5d                   	pop    ebp
c001526c:	c3                   	ret    

c001526d <Sys::loadDLL(regs*)>:
c001526d:	56                   	push   esi
c001526e:	53                   	push   ebx
c001526f:	31 d2                	xor    edx,edx
c0015271:	51                   	push   ecx
c0015272:	b8 01 00 00 00       	mov    eax,0x1
c0015277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001527b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001527f:	0f 84 8c 00 00 00    	je     c0015311 <Sys::loadDLL(regs*)+0xa4>
c0015285:	83 ec 0c             	sub    esp,0xc
c0015288:	68 14 01 00 00       	push   0x114
c001528d:	e8 31 47 ff ff       	call   c00099c3 <malloc>
c0015292:	83 c4 0c             	add    esp,0xc
c0015295:	89 c3                	mov    ebx,eax
c0015297:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001529c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001529f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00152a2:	53                   	push   ebx
c00152a3:	e8 ea 7c ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c00152a8:	83 c4 10             	add    esp,0x10
c00152ab:	31 d2                	xor    edx,edx
c00152ad:	b8 02 00 00 00       	mov    eax,0x2
c00152b2:	85 db                	test   ebx,ebx
c00152b4:	74 5b                	je     c0015311 <Sys::loadDLL(regs*)+0xa4>
c00152b6:	83 ec 0c             	sub    esp,0xc
c00152b9:	53                   	push   ebx
c00152ba:	e8 a5 7f ff ff       	call   c000d264 <File::exists()>
c00152bf:	83 c4 10             	add    esp,0x10
c00152c2:	84 c0                	test   al,al
c00152c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00152c6:	75 11                	jne    c00152d9 <Sys::loadDLL(regs*)+0x6c>
c00152c8:	83 ec 0c             	sub    esp,0xc
c00152cb:	53                   	push   ebx
c00152cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152cf:	83 c4 10             	add    esp,0x10
c00152d2:	b8 03 00 00 00       	mov    eax,0x3
c00152d7:	eb 36                	jmp    c001530f <Sys::loadDLL(regs*)+0xa2>
c00152d9:	83 ec 0c             	sub    esp,0xc
c00152dc:	53                   	push   ebx
c00152dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152e0:	58                   	pop    eax
c00152e1:	5a                   	pop    edx
c00152e2:	6a 00                	push   0x0
c00152e4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00152e7:	e8 16 22 00 00       	call   c0017502 <Thr::loadDLL(char const*, bool)>
c00152ec:	83 c4 10             	add    esp,0x10
c00152ef:	89 c1                	mov    ecx,eax
c00152f1:	31 d2                	xor    edx,edx
c00152f3:	b8 04 00 00 00       	mov    eax,0x4
c00152f8:	85 c9                	test   ecx,ecx
c00152fa:	74 15                	je     c0015311 <Sys::loadDLL(regs*)+0xa4>
c00152fc:	53                   	push   ebx
c00152fd:	53                   	push   ebx
c00152fe:	ff 35 28 64 02 c0    	push   DWORD PTR ds:0xc0026428
c0015304:	51                   	push   ecx
c0015305:	e8 29 24 00 00       	call   c0017733 <Thr::executeDLL(unsigned long, void*)>
c001530a:	83 c4 10             	add    esp,0x10
c001530d:	31 c0                	xor    eax,eax
c001530f:	31 d2                	xor    edx,edx
c0015311:	59                   	pop    ecx
c0015312:	5b                   	pop    ebx
c0015313:	5e                   	pop    esi
c0015314:	c3                   	ret    

c0015315 <Sys::read(regs*)>:
c0015315:	57                   	push   edi
c0015316:	56                   	push   esi
c0015317:	53                   	push   ebx
c0015318:	83 ec 10             	sub    esp,0x10
c001531b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001531f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015322:	83 f8 02             	cmp    eax,0x2
c0015325:	77 10                	ja     c0015337 <Sys::read(regs*)+0x22>
c0015327:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001532c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001532f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015335:	eb 0e                	jmp    c0015345 <Sys::read(regs*)+0x30>
c0015337:	83 ec 0c             	sub    esp,0xc
c001533a:	50                   	push   eax
c001533b:	e8 b7 61 ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c0015340:	83 c4 10             	add    esp,0x10
c0015343:	89 c1                	mov    ecx,eax
c0015345:	83 c8 ff             	or     eax,0xffffffff
c0015348:	85 c9                	test   ecx,ecx
c001534a:	89 c2                	mov    edx,eax
c001534c:	74 28                	je     c0015376 <Sys::read(regs*)+0x61>
c001534e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015356:	31 ff                	xor    edi,edi
c0015358:	83 ec 0c             	sub    esp,0xc
c001535b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001535d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015361:	52                   	push   edx
c0015362:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015365:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015368:	57                   	push   edi
c0015369:	56                   	push   esi
c001536a:	51                   	push   ecx
c001536b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001536e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015372:	83 c4 20             	add    esp,0x20
c0015375:	99                   	cdq    
c0015376:	83 c4 10             	add    esp,0x10
c0015379:	5b                   	pop    ebx
c001537a:	5e                   	pop    esi
c001537b:	5f                   	pop    edi
c001537c:	c3                   	ret    

c001537d <Sys::sbrk(regs*)>:
c001537d:	56                   	push   esi
c001537e:	53                   	push   ebx
c001537f:	50                   	push   eax
c0015380:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015385:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015389:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001538c:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001538f:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0015395:	85 db                	test   ebx,ebx
c0015397:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001539a:	74 02                	je     c001539e <Sys::sbrk(regs*)+0x21>
c001539c:	79 06                	jns    c00153a4 <Sys::sbrk(regs*)+0x27>
c001539e:	89 f0                	mov    eax,esi
c00153a0:	31 d2                	xor    edx,edx
c00153a2:	eb 2a                	jmp    c00153ce <Sys::sbrk(regs*)+0x51>
c00153a4:	83 c8 ff             	or     eax,0xffffffff
c00153a7:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00153ad:	89 c2                	mov    edx,eax
c00153af:	77 1d                	ja     c00153ce <Sys::sbrk(regs*)+0x51>
c00153b1:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00153b7:	50                   	push   eax
c00153b8:	c1 ea 0c             	shr    edx,0xc
c00153bb:	68 07 0c 00 00       	push   0xc07
c00153c0:	52                   	push   edx
c00153c1:	51                   	push   ecx
c00153c2:	e8 2f 6a ff ff       	call   c000bdf6 <VAS::allocatePages(int, int)>
c00153c7:	89 f0                	mov    eax,esi
c00153c9:	31 d2                	xor    edx,edx
c00153cb:	83 c4 10             	add    esp,0x10
c00153ce:	59                   	pop    ecx
c00153cf:	5b                   	pop    ebx
c00153d0:	5e                   	pop    esi
c00153d1:	c3                   	ret    

c00153d2 <Sys::setCwd(regs*)>:
c00153d2:	83 ec 14             	sub    esp,0x14
c00153d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153d9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00153dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153e1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00153e4:	e8 1a 7f ff ff       	call   c000d303 <Fs::setcwd(Process*, char*)>
c00153e9:	83 c4 1c             	add    esp,0x1c
c00153ec:	99                   	cdq    
c00153ed:	c3                   	ret    

c00153ee <Sys::setTime(regs*)>:
c00153ee:	55                   	push   ebp
c00153ef:	31 c9                	xor    ecx,ecx
c00153f1:	57                   	push   edi
c00153f2:	bd 0c 00 00 00       	mov    ebp,0xc
c00153f7:	56                   	push   esi
c00153f8:	53                   	push   ebx
c00153f9:	31 db                	xor    ebx,ebx
c00153fb:	83 ec 10             	sub    esp,0x10
c00153fe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015402:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015405:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015408:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001540b:	89 c2                	mov    edx,eax
c001540d:	66 81 ef 6c 07       	sub    di,0x76c
c0015412:	83 e2 1f             	and    edx,0x1f
c0015415:	c1 e7 10             	shl    edi,0x10
c0015418:	42                   	inc    edx
c0015419:	c1 e8 05             	shr    eax,0x5
c001541c:	88 d1                	mov    cl,dl
c001541e:	31 d2                	xor    edx,edx
c0015420:	f7 f5                	div    ebp
c0015422:	89 dd                	mov    ebp,ebx
c0015424:	88 d5                	mov    ch,dl
c0015426:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001542c:	0f b7 c1             	movzx  eax,cx
c001542f:	31 d2                	xor    edx,edx
c0015431:	09 f8                	or     eax,edi
c0015433:	bf 3c 00 00 00       	mov    edi,0x3c
c0015438:	89 c1                	mov    ecx,eax
c001543a:	89 f0                	mov    eax,esi
c001543c:	f7 f7                	div    edi
c001543e:	c1 e2 10             	shl    edx,0x10
c0015441:	09 d5                	or     ebp,edx
c0015443:	31 d2                	xor    edx,edx
c0015445:	89 eb                	mov    ebx,ebp
c0015447:	f7 f7                	div    edi
c0015449:	bf 10 0e 00 00       	mov    edi,0xe10
c001544e:	88 d7                	mov    bh,dl
c0015450:	89 f0                	mov    eax,esi
c0015452:	31 d2                	xor    edx,edx
c0015454:	f7 f7                	div    edi
c0015456:	bf 18 00 00 00       	mov    edi,0x18
c001545b:	31 d2                	xor    edx,edx
c001545d:	f7 f7                	div    edi
c001545f:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0015464:	88 d3                	mov    bl,dl
c0015466:	53                   	push   ebx
c0015467:	51                   	push   ecx
c0015468:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001546e:	e8 e3 86 ff ff       	call   c000db56 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015473:	83 c4 1c             	add    esp,0x1c
c0015476:	83 f0 01             	xor    eax,0x1
c0015479:	5b                   	pop    ebx
c001547a:	0f b6 c0             	movzx  eax,al
c001547d:	5e                   	pop    esi
c001547e:	31 d2                	xor    edx,edx
c0015480:	5f                   	pop    edi
c0015481:	5d                   	pop    ebp
c0015482:	c3                   	ret    

c0015483 <Sys::timezone(regs*)>:
c0015483:	53                   	push   ebx
c0015484:	83 ec 08             	sub    esp,0x8
c0015487:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001548b:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001548f:	75 17                	jne    c00154a8 <Sys::timezone(regs*)+0x25>
c0015491:	83 ec 0c             	sub    esp,0xc
c0015494:	68 49 45 02 c0       	push   0xc0024549
c0015499:	e8 8a 75 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001549e:	83 c8 ff             	or     eax,0xffffffff
c00154a1:	83 c4 10             	add    esp,0x10
c00154a4:	89 c2                	mov    edx,eax
c00154a6:	eb 20                	jmp    c00154c8 <Sys::timezone(regs*)+0x45>
c00154a8:	83 ec 0c             	sub    esp,0xc
c00154ab:	68 5e 45 02 c0       	push   0xc002455e
c00154b0:	e8 73 75 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00154b5:	58                   	pop    eax
c00154b6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00154b9:	e8 fa 83 ff ff       	call   c000d8b8 <User::loadClockSettings(int)>
c00154be:	83 c4 10             	add    esp,0x10
c00154c1:	b8 01 00 00 00       	mov    eax,0x1
c00154c6:	31 d2                	xor    edx,edx
c00154c8:	83 c4 08             	add    esp,0x8
c00154cb:	5b                   	pop    ebx
c00154cc:	c3                   	ret    

c00154cd <Sys::write(regs*)>:
c00154cd:	57                   	push   edi
c00154ce:	56                   	push   esi
c00154cf:	53                   	push   ebx
c00154d0:	83 ec 10             	sub    esp,0x10
c00154d3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00154d7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00154da:	83 f8 02             	cmp    eax,0x2
c00154dd:	77 10                	ja     c00154ef <Sys::write(regs*)+0x22>
c00154df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154e4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154e7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00154ed:	eb 0e                	jmp    c00154fd <Sys::write(regs*)+0x30>
c00154ef:	83 ec 0c             	sub    esp,0xc
c00154f2:	50                   	push   eax
c00154f3:	e8 ff 5f ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c00154f8:	83 c4 10             	add    esp,0x10
c00154fb:	89 c1                	mov    ecx,eax
c00154fd:	83 c8 ff             	or     eax,0xffffffff
c0015500:	85 c9                	test   ecx,ecx
c0015502:	89 c2                	mov    edx,eax
c0015504:	74 28                	je     c001552e <Sys::write(regs*)+0x61>
c0015506:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001550e:	31 ff                	xor    edi,edi
c0015510:	83 ec 0c             	sub    esp,0xc
c0015513:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015515:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015519:	52                   	push   edx
c001551a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001551d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015520:	57                   	push   edi
c0015521:	56                   	push   esi
c0015522:	51                   	push   ecx
c0015523:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015526:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001552a:	83 c4 20             	add    esp,0x20
c001552d:	99                   	cdq    
c001552e:	83 c4 10             	add    esp,0x10
c0015531:	5b                   	pop    ebx
c0015532:	5e                   	pop    esi
c0015533:	5f                   	pop    edi
c0015534:	c3                   	ret    

c0015535 <Sys::wsbe(regs*)>:
c0015535:	57                   	push   edi
c0015536:	b9 0b 00 00 00       	mov    ecx,0xb
c001553b:	56                   	push   esi
c001553c:	be 9d 45 02 c0       	mov    esi,0xc002459d
c0015541:	53                   	push   ebx
c0015542:	83 ec 30             	sub    esp,0x30
c0015545:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015549:	fc                   	cld    
c001554a:	83 ec 0c             	sub    esp,0xc
c001554d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001554f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015553:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015558:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001555b:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c0015561:	8b 06                	mov    eax,DWORD PTR [esi]
c0015563:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015566:	57                   	push   edi
c0015567:	e8 34 b1 fe ff       	call   c00006a0 <strlen>
c001556c:	5a                   	pop    edx
c001556d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015571:	52                   	push   edx
c0015572:	31 d2                	xor    edx,edx
c0015574:	57                   	push   edi
c0015575:	52                   	push   edx
c0015576:	50                   	push   eax
c0015577:	56                   	push   esi
c0015578:	ff d3                	call   ebx
c001557a:	83 c4 14             	add    esp,0x14
c001557d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015581:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015584:	e8 ab 32 00 00       	call   c0018834 <terminateTask(int)>
c0015589:	83 c4 40             	add    esp,0x40
c001558c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015591:	5b                   	pop    ebx
c0015592:	31 d2                	xor    edx,edx
c0015594:	5e                   	pop    esi
c0015595:	5f                   	pop    edi
c0015596:	c3                   	ret    

c0015597 <Sys::yield(regs*)>:
c0015597:	57                   	push   edi
c0015598:	56                   	push   esi
c0015599:	53                   	push   ebx
c001559a:	fa                   	cli    
c001559b:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c00155a1:	e8 56 29 00 00       	call   c0017efc <schedule()>
c00155a6:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00155ab:	48                   	dec    eax
c00155ac:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00155b1:	75 01                	jne    c00155b4 <Sys::yield(regs*)+0x1d>
c00155b3:	fb                   	sti    
c00155b4:	8b 35 90 6a 02 c0    	mov    esi,DWORD PTR ds:0xc0026a90
c00155ba:	8b 3d 94 6a 02 c0    	mov    edi,DWORD PTR ds:0xc0026a94
c00155c0:	89 f0                	mov    eax,esi
c00155c2:	89 fb                	mov    ebx,edi
c00155c4:	89 f1                	mov    ecx,esi
c00155c6:	c1 e0 07             	shl    eax,0x7
c00155c9:	0f ac d9 17          	shrd   ecx,ebx,0x17
c00155cd:	25 80 30 0f 00       	and    eax,0xf3080
c00155d2:	c1 eb 17             	shr    ebx,0x17
c00155d5:	31 c8                	xor    eax,ecx
c00155d7:	89 da                	mov    edx,ebx
c00155d9:	5b                   	pop    ebx
c00155da:	5e                   	pop    esi
c00155db:	5f                   	pop    edi
c00155dc:	c3                   	ret    

c00155dd <sysCallSeekDir(regs*)>:
c00155dd:	31 c0                	xor    eax,eax
c00155df:	31 d2                	xor    edx,edx
c00155e1:	c3                   	ret    

c00155e2 <sysCallTellDir(regs*)>:
c00155e2:	31 c0                	xor    eax,eax
c00155e4:	31 d2                	xor    edx,edx
c00155e6:	c3                   	ret    

c00155e7 <sysCallVerify(regs*)>:
c00155e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155eb:	31 d2                	xor    edx,edx
c00155ed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155f0:	c3                   	ret    

c00155f1 <sysCallGetArgc(regs*)>:
c00155f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155f9:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00155ff:	99                   	cdq    
c0015600:	c3                   	ret    

c0015601 <sysFormatDisk(regs*)>:
c0015601:	56                   	push   esi
c0015602:	53                   	push   ebx
c0015603:	53                   	push   ebx
c0015604:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015608:	8b 1d 94 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026594
c001560e:	eb 25                	jmp    c0015635 <sysFormatDisk(regs*)+0x34>
c0015610:	83 ec 0c             	sub    esp,0xc
c0015613:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015616:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015618:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001561b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001561e:	50                   	push   eax
c001561f:	ff 34 85 20 6a 02 c0 	push   DWORD PTR [eax*4-0x3ffd95e0]
c0015626:	53                   	push   ebx
c0015627:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001562a:	83 c4 20             	add    esp,0x20
c001562d:	83 f8 08             	cmp    eax,0x8
c0015630:	75 12                	jne    c0015644 <sysFormatDisk(regs*)+0x43>
c0015632:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015635:	85 db                	test   ebx,ebx
c0015637:	75 d7                	jne    c0015610 <sysFormatDisk(regs*)+0xf>
c0015639:	59                   	pop    ecx
c001563a:	b8 03 00 00 00       	mov    eax,0x3
c001563f:	31 d2                	xor    edx,edx
c0015641:	5b                   	pop    ebx
c0015642:	5e                   	pop    esi
c0015643:	c3                   	ret    
c0015644:	85 c0                	test   eax,eax
c0015646:	74 1b                	je     c0015663 <sysFormatDisk(regs*)+0x62>
c0015648:	83 f8 09             	cmp    eax,0x9
c001564b:	74 0b                	je     c0015658 <sysFormatDisk(regs*)+0x57>
c001564d:	59                   	pop    ecx
c001564e:	b8 02 00 00 00       	mov    eax,0x2
c0015653:	31 d2                	xor    edx,edx
c0015655:	5b                   	pop    ebx
c0015656:	5e                   	pop    esi
c0015657:	c3                   	ret    
c0015658:	59                   	pop    ecx
c0015659:	b8 01 00 00 00       	mov    eax,0x1
c001565e:	31 d2                	xor    edx,edx
c0015660:	5b                   	pop    ebx
c0015661:	5e                   	pop    esi
c0015662:	c3                   	ret    
c0015663:	59                   	pop    ecx
c0015664:	31 c0                	xor    eax,eax
c0015666:	31 d2                	xor    edx,edx
c0015668:	5b                   	pop    ebx
c0015669:	5e                   	pop    esi
c001566a:	c3                   	ret    

c001566b <sysSetDiskVolumeLabel(regs*)>:
c001566b:	56                   	push   esi
c001566c:	53                   	push   ebx
c001566d:	53                   	push   ebx
c001566e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015672:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015675:	83 f8 19             	cmp    eax,0x19
c0015678:	77 2d                	ja     c00156a7 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001567a:	8b 0c 85 20 6a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd95e0]
c0015681:	85 c9                	test   ecx,ecx
c0015683:	74 22                	je     c00156a7 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015685:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0015688:	85 db                	test   ebx,ebx
c001568a:	74 1b                	je     c00156a7 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001568c:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015692:	85 d2                	test   edx,edx
c0015694:	74 11                	je     c00156a7 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015696:	8b 32                	mov    esi,DWORD PTR [edx]
c0015698:	53                   	push   ebx
c0015699:	50                   	push   eax
c001569a:	51                   	push   ecx
c001569b:	52                   	push   edx
c001569c:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001569f:	83 c4 10             	add    esp,0x10
c00156a2:	99                   	cdq    
c00156a3:	59                   	pop    ecx
c00156a4:	5b                   	pop    ebx
c00156a5:	5e                   	pop    esi
c00156a6:	c3                   	ret    
c00156a7:	59                   	pop    ecx
c00156a8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00156ad:	ba ff ff ff ff       	mov    edx,0xffffffff
c00156b2:	5b                   	pop    ebx
c00156b3:	5e                   	pop    esi
c00156b4:	c3                   	ret    

c00156b5 <sysGetDiskVolumeLabel(regs*)>:
c00156b5:	57                   	push   edi
c00156b6:	56                   	push   esi
c00156b7:	53                   	push   ebx
c00156b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156bc:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00156bf:	83 fa 19             	cmp    edx,0x19
c00156c2:	77 38                	ja     c00156fc <sysGetDiskVolumeLabel(regs*)+0x47>
c00156c4:	8b 0c 95 20 6a 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd95e0]
c00156cb:	85 c9                	test   ecx,ecx
c00156cd:	74 2d                	je     c00156fc <sysGetDiskVolumeLabel(regs*)+0x47>
c00156cf:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00156d2:	85 db                	test   ebx,ebx
c00156d4:	74 26                	je     c00156fc <sysGetDiskVolumeLabel(regs*)+0x47>
c00156d6:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00156d9:	85 f6                	test   esi,esi
c00156db:	74 1f                	je     c00156fc <sysGetDiskVolumeLabel(regs*)+0x47>
c00156dd:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00156e3:	85 c0                	test   eax,eax
c00156e5:	74 15                	je     c00156fc <sysGetDiskVolumeLabel(regs*)+0x47>
c00156e7:	83 ec 0c             	sub    esp,0xc
c00156ea:	8b 38                	mov    edi,DWORD PTR [eax]
c00156ec:	56                   	push   esi
c00156ed:	53                   	push   ebx
c00156ee:	52                   	push   edx
c00156ef:	51                   	push   ecx
c00156f0:	50                   	push   eax
c00156f1:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00156f4:	83 c4 20             	add    esp,0x20
c00156f7:	99                   	cdq    
c00156f8:	5b                   	pop    ebx
c00156f9:	5e                   	pop    esi
c00156fa:	5f                   	pop    edi
c00156fb:	c3                   	ret    
c00156fc:	5b                   	pop    ebx
c00156fd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015702:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015707:	5e                   	pop    esi
c0015708:	5f                   	pop    edi
c0015709:	c3                   	ret    

c001570a <sysShutdown(regs*)>:
c001570a:	83 ec 0c             	sub    esp,0xc
c001570d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015711:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015714:	85 c0                	test   eax,eax
c0015716:	74 18                	je     c0015730 <sysShutdown(regs*)+0x26>
c0015718:	83 f8 01             	cmp    eax,0x1
c001571b:	74 38                	je     c0015755 <sysShutdown(regs*)+0x4b>
c001571d:	83 f8 02             	cmp    eax,0x2
c0015720:	74 24                	je     c0015746 <sysShutdown(regs*)+0x3c>
c0015722:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015727:	ba ff ff ff ff       	mov    edx,0xffffffff
c001572c:	83 c4 0c             	add    esp,0xc
c001572f:	c3                   	ret    
c0015730:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0015735:	8b 10                	mov    edx,DWORD PTR [eax]
c0015737:	6a 00                	push   0x0
c0015739:	6a 00                	push   0x0
c001573b:	6a 00                	push   0x0
c001573d:	50                   	push   eax
c001573e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015741:	83 c4 10             	add    esp,0x10
c0015744:	eb dc                	jmp    c0015722 <sysShutdown(regs*)+0x18>
c0015746:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c001574b:	8b 10                	mov    edx,DWORD PTR [eax]
c001574d:	6a 00                	push   0x0
c001574f:	6a 00                	push   0x0
c0015751:	6a 01                	push   0x1
c0015753:	eb e8                	jmp    c001573d <sysShutdown(regs*)+0x33>
c0015755:	a1 a0 6a 02 c0       	mov    eax,ds:0xc0026aa0
c001575a:	85 c0                	test   eax,eax
c001575c:	74 02                	je     c0015760 <sysShutdown(regs*)+0x56>
c001575e:	ff d0                	call   eax
c0015760:	31 c0                	xor    eax,eax
c0015762:	31 d2                	xor    edx,edx
c0015764:	83 c4 0c             	add    esp,0xc
c0015767:	c3                   	ret    

c0015768 <sysCallRealpath(regs*)>:
c0015768:	83 ec 0c             	sub    esp,0xc
c001576b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001576f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015772:	85 d2                	test   edx,edx
c0015774:	74 07                	je     c001577d <sysCallRealpath(regs*)+0x15>
c0015776:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015779:	85 c0                	test   eax,eax
c001577b:	75 0b                	jne    c0015788 <sysCallRealpath(regs*)+0x20>
c001577d:	b8 01 00 00 00       	mov    eax,0x1
c0015782:	31 d2                	xor    edx,edx
c0015784:	83 c4 0c             	add    esp,0xc
c0015787:	c3                   	ret    
c0015788:	51                   	push   ecx
c0015789:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001578f:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015792:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015798:	51                   	push   ecx
c0015799:	52                   	push   edx
c001579a:	50                   	push   eax
c001579b:	e8 48 76 ff ff       	call   c000cde8 <Fs::standardiseFiles(char*, char const*, char const*)>
c00157a0:	83 c4 10             	add    esp,0x10
c00157a3:	31 c0                	xor    eax,eax
c00157a5:	31 d2                	xor    edx,edx
c00157a7:	83 c4 0c             	add    esp,0xc
c00157aa:	c3                   	ret    

c00157ab <sysCallReadDir(regs*)>:
c00157ab:	53                   	push   ebx
c00157ac:	83 ec 18             	sub    esp,0x18
c00157af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00157b3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00157b6:	83 f8 02             	cmp    eax,0x2
c00157b9:	76 60                	jbe    c001581b <sysCallReadDir(regs*)+0x70>
c00157bb:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00157c2:	77 48                	ja     c001580c <sysCallReadDir(regs*)+0x61>
c00157c4:	83 ec 0c             	sub    esp,0xc
c00157c7:	50                   	push   eax
c00157c8:	e8 2a 5d ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c00157cd:	83 c4 10             	add    esp,0x10
c00157d0:	85 c0                	test   eax,eax
c00157d2:	74 38                	je     c001580c <sysCallReadDir(regs*)+0x61>
c00157d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00157dc:	83 ec 0c             	sub    esp,0xc
c00157df:	8b 10                	mov    edx,DWORD PTR [eax]
c00157e1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00157e5:	51                   	push   ecx
c00157e6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00157e9:	6a 00                	push   0x0
c00157eb:	68 10 01 00 00       	push   0x110
c00157f0:	50                   	push   eax
c00157f1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00157f4:	83 c4 20             	add    esp,0x20
c00157f7:	85 c0                	test   eax,eax
c00157f9:	74 29                	je     c0015824 <sysCallReadDir(regs*)+0x79>
c00157fb:	83 f8 07             	cmp    eax,0x7
c00157fe:	74 1b                	je     c001581b <sysCallReadDir(regs*)+0x70>
c0015800:	b8 02 00 00 00       	mov    eax,0x2
c0015805:	31 d2                	xor    edx,edx
c0015807:	83 c4 18             	add    esp,0x18
c001580a:	5b                   	pop    ebx
c001580b:	c3                   	ret    
c001580c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015811:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015816:	83 c4 18             	add    esp,0x18
c0015819:	5b                   	pop    ebx
c001581a:	c3                   	ret    
c001581b:	b8 01 00 00 00       	mov    eax,0x1
c0015820:	31 d2                	xor    edx,edx
c0015822:	eb e3                	jmp    c0015807 <sysCallReadDir(regs*)+0x5c>
c0015824:	31 c0                	xor    eax,eax
c0015826:	31 d2                	xor    edx,edx
c0015828:	eb dd                	jmp    c0015807 <sysCallReadDir(regs*)+0x5c>

c001582a <sysCallIsATTY(regs*)>:
c001582a:	83 ec 0c             	sub    esp,0xc
c001582d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015831:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015834:	83 f8 02             	cmp    eax,0x2
c0015837:	76 07                	jbe    c0015840 <sysCallIsATTY(regs*)+0x16>
c0015839:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001583e:	75 26                	jne    c0015866 <sysCallIsATTY(regs*)+0x3c>
c0015840:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015845:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015848:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001584e:	85 c0                	test   eax,eax
c0015850:	74 24                	je     c0015876 <sysCallIsATTY(regs*)+0x4c>
c0015852:	83 ec 0c             	sub    esp,0xc
c0015855:	8b 10                	mov    edx,DWORD PTR [eax]
c0015857:	50                   	push   eax
c0015858:	ff 12                	call   DWORD PTR [edx]
c001585a:	31 d2                	xor    edx,edx
c001585c:	0f b6 c0             	movzx  eax,al
c001585f:	83 c4 10             	add    esp,0x10
c0015862:	83 c4 0c             	add    esp,0xc
c0015865:	c3                   	ret    
c0015866:	83 ec 0c             	sub    esp,0xc
c0015869:	50                   	push   eax
c001586a:	e8 88 5c ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c001586f:	83 c4 10             	add    esp,0x10
c0015872:	85 c0                	test   eax,eax
c0015874:	75 dc                	jne    c0015852 <sysCallIsATTY(regs*)+0x28>
c0015876:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001587b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015880:	83 c4 0c             	add    esp,0xc
c0015883:	c3                   	ret    

c0015884 <sysCallSeek(regs*)>:
c0015884:	53                   	push   ebx
c0015885:	83 ec 08             	sub    esp,0x8
c0015888:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001588c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001588f:	8d 50 fd             	lea    edx,[eax-0x3]
c0015892:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015898:	77 32                	ja     c00158cc <sysCallSeek(regs*)+0x48>
c001589a:	83 ec 0c             	sub    esp,0xc
c001589d:	50                   	push   eax
c001589e:	e8 54 5c ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c00158a3:	83 c4 0c             	add    esp,0xc
c00158a6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00158a9:	31 db                	xor    ebx,ebx
c00158ab:	53                   	push   ebx
c00158ac:	51                   	push   ecx
c00158ad:	50                   	push   eax
c00158ae:	e8 01 78 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c00158b3:	83 c4 10             	add    esp,0x10
c00158b6:	85 c0                	test   eax,eax
c00158b8:	0f 95 c0             	setne  al
c00158bb:	31 d2                	xor    edx,edx
c00158bd:	0f b6 c0             	movzx  eax,al
c00158c0:	f7 d8                	neg    eax
c00158c2:	83 d2 00             	adc    edx,0x0
c00158c5:	83 c4 08             	add    esp,0x8
c00158c8:	f7 da                	neg    edx
c00158ca:	5b                   	pop    ebx
c00158cb:	c3                   	ret    
c00158cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158d1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158d6:	83 c4 08             	add    esp,0x8
c00158d9:	5b                   	pop    ebx
c00158da:	c3                   	ret    

c00158db <sysCallTell(regs*)>:
c00158db:	53                   	push   ebx
c00158dc:	83 ec 08             	sub    esp,0x8
c00158df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158e3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00158e6:	83 f8 02             	cmp    eax,0x2
c00158e9:	76 4d                	jbe    c0015938 <sysCallTell(regs*)+0x5d>
c00158eb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00158f0:	76 19                	jbe    c001590b <sysCallTell(regs*)+0x30>
c00158f2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00158f5:	31 d2                	xor    edx,edx
c00158f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00158fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015904:	31 c0                	xor    eax,eax
c0015906:	83 c4 08             	add    esp,0x8
c0015909:	5b                   	pop    ebx
c001590a:	c3                   	ret    
c001590b:	83 ec 0c             	sub    esp,0xc
c001590e:	50                   	push   eax
c001590f:	e8 e3 5b ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c0015914:	5a                   	pop    edx
c0015915:	59                   	pop    ecx
c0015916:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015919:	50                   	push   eax
c001591a:	e8 eb 77 ff ff       	call   c000d10a <File::tell(unsigned long long*)>
c001591f:	83 c4 10             	add    esp,0x10
c0015922:	85 c0                	test   eax,eax
c0015924:	0f 95 c0             	setne  al
c0015927:	31 d2                	xor    edx,edx
c0015929:	0f b6 c0             	movzx  eax,al
c001592c:	f7 d8                	neg    eax
c001592e:	83 d2 00             	adc    edx,0x0
c0015931:	83 c4 08             	add    esp,0x8
c0015934:	f7 da                	neg    edx
c0015936:	5b                   	pop    ebx
c0015937:	c3                   	ret    
c0015938:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001593d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015942:	83 c4 08             	add    esp,0x8
c0015945:	5b                   	pop    ebx
c0015946:	c3                   	ret    

c0015947 <sysCallSize(regs*)>:
c0015947:	53                   	push   ebx
c0015948:	83 ec 18             	sub    esp,0x18
c001594b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001594f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015952:	83 f8 02             	cmp    eax,0x2
c0015955:	76 53                	jbe    c00159aa <sysCallSize(regs*)+0x63>
c0015957:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001595c:	76 19                	jbe    c0015977 <sysCallSize(regs*)+0x30>
c001595e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015961:	31 d2                	xor    edx,edx
c0015963:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015969:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015970:	31 c0                	xor    eax,eax
c0015972:	83 c4 18             	add    esp,0x18
c0015975:	5b                   	pop    ebx
c0015976:	c3                   	ret    
c0015977:	83 ec 0c             	sub    esp,0xc
c001597a:	50                   	push   eax
c001597b:	e8 77 5b ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c0015980:	83 c4 0c             	add    esp,0xc
c0015983:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015987:	52                   	push   edx
c0015988:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001598b:	50                   	push   eax
c001598c:	e8 11 79 ff ff       	call   c000d2a2 <File::stat(unsigned long long*, bool*)>
c0015991:	83 c4 10             	add    esp,0x10
c0015994:	85 c0                	test   eax,eax
c0015996:	0f 95 c0             	setne  al
c0015999:	31 d2                	xor    edx,edx
c001599b:	0f b6 c0             	movzx  eax,al
c001599e:	f7 d8                	neg    eax
c00159a0:	83 d2 00             	adc    edx,0x0
c00159a3:	83 c4 18             	add    esp,0x18
c00159a6:	f7 da                	neg    edx
c00159a8:	5b                   	pop    ebx
c00159a9:	c3                   	ret    
c00159aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159af:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159b4:	83 c4 18             	add    esp,0x18
c00159b7:	5b                   	pop    ebx
c00159b8:	c3                   	ret    

c00159b9 <sysCallSizeFromFilename(regs*)>:
c00159b9:	57                   	push   edi
c00159ba:	56                   	push   esi
c00159bb:	53                   	push   ebx
c00159bc:	83 ec 20             	sub    esp,0x20
c00159bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00159c3:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00159c6:	83 fb 02             	cmp    ebx,0x2
c00159c9:	0f 86 88 00 00 00    	jbe    c0015a57 <sysCallSizeFromFilename(regs*)+0x9e>
c00159cf:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00159d5:	76 1b                	jbe    c00159f2 <sysCallSizeFromFilename(regs*)+0x39>
c00159d7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00159da:	31 d2                	xor    edx,edx
c00159dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00159e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00159e9:	83 c4 20             	add    esp,0x20
c00159ec:	31 c0                	xor    eax,eax
c00159ee:	5b                   	pop    ebx
c00159ef:	5e                   	pop    esi
c00159f0:	5f                   	pop    edi
c00159f1:	c3                   	ret    
c00159f2:	83 ec 0c             	sub    esp,0xc
c00159f5:	68 14 01 00 00       	push   0x114
c00159fa:	e8 c4 3f ff ff       	call   c00099c3 <malloc>
c00159ff:	83 c4 0c             	add    esp,0xc
c0015a02:	89 c7                	mov    edi,eax
c0015a04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a09:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015a0c:	53                   	push   ebx
c0015a0d:	57                   	push   edi
c0015a0e:	e8 7f 75 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0015a13:	83 c4 0c             	add    esp,0xc
c0015a16:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015a1a:	50                   	push   eax
c0015a1b:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015a1e:	57                   	push   edi
c0015a1f:	e8 7e 78 ff ff       	call   c000d2a2 <File::stat(unsigned long long*, bool*)>
c0015a24:	83 c4 10             	add    esp,0x10
c0015a27:	85 ff                	test   edi,edi
c0015a29:	74 14                	je     c0015a3f <sysCallSizeFromFilename(regs*)+0x86>
c0015a2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a2f:	8b 17                	mov    edx,DWORD PTR [edi]
c0015a31:	83 ec 0c             	sub    esp,0xc
c0015a34:	57                   	push   edi
c0015a35:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015a38:	83 c4 10             	add    esp,0x10
c0015a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015a3f:	85 c0                	test   eax,eax
c0015a41:	0f 95 c0             	setne  al
c0015a44:	31 d2                	xor    edx,edx
c0015a46:	0f b6 c0             	movzx  eax,al
c0015a49:	f7 d8                	neg    eax
c0015a4b:	83 d2 00             	adc    edx,0x0
c0015a4e:	83 c4 20             	add    esp,0x20
c0015a51:	f7 da                	neg    edx
c0015a53:	5b                   	pop    ebx
c0015a54:	5e                   	pop    esi
c0015a55:	5f                   	pop    edi
c0015a56:	c3                   	ret    
c0015a57:	83 c4 20             	add    esp,0x20
c0015a5a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a5f:	5b                   	pop    ebx
c0015a60:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a65:	5e                   	pop    esi
c0015a66:	5f                   	pop    edi
c0015a67:	c3                   	ret    

c0015a68 <sysCallClose(regs*)>:
c0015a68:	53                   	push   ebx
c0015a69:	83 ec 08             	sub    esp,0x8
c0015a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a70:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a73:	83 f8 02             	cmp    eax,0x2
c0015a76:	76 41                	jbe    c0015ab9 <sysCallClose(regs*)+0x51>
c0015a78:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015a7e:	83 fa 01             	cmp    edx,0x1
c0015a81:	76 2d                	jbe    c0015ab0 <sysCallClose(regs*)+0x48>
c0015a83:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015a88:	77 2f                	ja     c0015ab9 <sysCallClose(regs*)+0x51>
c0015a8a:	83 ec 0c             	sub    esp,0xc
c0015a8d:	50                   	push   eax
c0015a8e:	e8 64 5a ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c0015a93:	89 c3                	mov    ebx,eax
c0015a95:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a98:	e8 b7 75 ff ff       	call   c000d054 <File::close()>
c0015a9d:	83 c4 10             	add    esp,0x10
c0015aa0:	85 db                	test   ebx,ebx
c0015aa2:	74 0c                	je     c0015ab0 <sysCallClose(regs*)+0x48>
c0015aa4:	83 ec 0c             	sub    esp,0xc
c0015aa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015aa9:	53                   	push   ebx
c0015aaa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015aad:	83 c4 10             	add    esp,0x10
c0015ab0:	31 c0                	xor    eax,eax
c0015ab2:	31 d2                	xor    edx,edx
c0015ab4:	83 c4 08             	add    esp,0x8
c0015ab7:	5b                   	pop    ebx
c0015ab8:	c3                   	ret    
c0015ab9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015abe:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ac3:	83 c4 08             	add    esp,0x8
c0015ac6:	5b                   	pop    ebx
c0015ac7:	c3                   	ret    

c0015ac8 <sysCallOpenDir(regs*)>:
c0015ac8:	56                   	push   esi
c0015ac9:	53                   	push   ebx
c0015aca:	53                   	push   ebx
c0015acb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015acf:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015ad2:	85 f6                	test   esi,esi
c0015ad4:	74 59                	je     c0015b2f <sysCallOpenDir(regs*)+0x67>
c0015ad6:	83 ec 0c             	sub    esp,0xc
c0015ad9:	68 14 01 00 00       	push   0x114
c0015ade:	e8 e0 3e ff ff       	call   c00099c3 <malloc>
c0015ae3:	83 c4 0c             	add    esp,0xc
c0015ae6:	89 c6                	mov    esi,eax
c0015ae8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015aed:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015af0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015af3:	56                   	push   esi
c0015af4:	e8 45 79 ff ff       	call   c000d43e <Directory::Directory(char const*, Process*)>
c0015af9:	83 c4 10             	add    esp,0x10
c0015afc:	85 f6                	test   esi,esi
c0015afe:	74 2f                	je     c0015b2f <sysCallOpenDir(regs*)+0x67>
c0015b00:	83 ec 0c             	sub    esp,0xc
c0015b03:	56                   	push   esi
c0015b04:	e8 99 79 ff ff       	call   c000d4a2 <Directory::open()>
c0015b09:	83 c4 10             	add    esp,0x10
c0015b0c:	85 c0                	test   eax,eax
c0015b0e:	75 1f                	jne    c0015b2f <sysCallOpenDir(regs*)+0x67>
c0015b10:	83 ec 0c             	sub    esp,0xc
c0015b13:	56                   	push   esi
c0015b14:	e8 e9 56 ff ff       	call   c000b202 <UnixFile::getFileDescriptor()>
c0015b19:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015b1c:	83 c4 10             	add    esp,0x10
c0015b1f:	89 02                	mov    DWORD PTR [edx],eax
c0015b21:	c1 f8 1f             	sar    eax,0x1f
c0015b24:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b27:	31 c0                	xor    eax,eax
c0015b29:	59                   	pop    ecx
c0015b2a:	31 d2                	xor    edx,edx
c0015b2c:	5b                   	pop    ebx
c0015b2d:	5e                   	pop    esi
c0015b2e:	c3                   	ret    
c0015b2f:	59                   	pop    ecx
c0015b30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b35:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b3a:	5b                   	pop    ebx
c0015b3b:	5e                   	pop    esi
c0015b3c:	c3                   	ret    

c0015b3d <sysCallCloseDir(regs*)>:
c0015b3d:	53                   	push   ebx
c0015b3e:	83 ec 08             	sub    esp,0x8
c0015b41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b45:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015b48:	8d 50 fd             	lea    edx,[eax-0x3]
c0015b4b:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015b51:	77 2f                	ja     c0015b82 <sysCallCloseDir(regs*)+0x45>
c0015b53:	83 ec 0c             	sub    esp,0xc
c0015b56:	50                   	push   eax
c0015b57:	e8 9b 59 ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c0015b5c:	89 c3                	mov    ebx,eax
c0015b5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b61:	e8 98 79 ff ff       	call   c000d4fe <Directory::close()>
c0015b66:	83 c4 10             	add    esp,0x10
c0015b69:	85 db                	test   ebx,ebx
c0015b6b:	74 0c                	je     c0015b79 <sysCallCloseDir(regs*)+0x3c>
c0015b6d:	83 ec 0c             	sub    esp,0xc
c0015b70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b72:	53                   	push   ebx
c0015b73:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b76:	83 c4 10             	add    esp,0x10
c0015b79:	31 c0                	xor    eax,eax
c0015b7b:	31 d2                	xor    edx,edx
c0015b7d:	83 c4 08             	add    esp,0x8
c0015b80:	5b                   	pop    ebx
c0015b81:	c3                   	ret    
c0015b82:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b87:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b8c:	83 c4 08             	add    esp,0x8
c0015b8f:	5b                   	pop    ebx
c0015b90:	c3                   	ret    

c0015b91 <sysCallMakeDir(regs*)>:
c0015b91:	56                   	push   esi
c0015b92:	53                   	push   ebx
c0015b93:	83 ec 10             	sub    esp,0x10
c0015b96:	68 14 01 00 00       	push   0x114
c0015b9b:	e8 23 3e ff ff       	call   c00099c3 <malloc>
c0015ba0:	83 c4 0c             	add    esp,0xc
c0015ba3:	89 c3                	mov    ebx,eax
c0015ba5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015baa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015bad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015bb1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015bb4:	53                   	push   ebx
c0015bb5:	e8 84 78 ff ff       	call   c000d43e <Directory::Directory(char const*, Process*)>
c0015bba:	83 c4 10             	add    esp,0x10
c0015bbd:	85 db                	test   ebx,ebx
c0015bbf:	74 32                	je     c0015bf3 <sysCallMakeDir(regs*)+0x62>
c0015bc1:	83 ec 0c             	sub    esp,0xc
c0015bc4:	53                   	push   ebx
c0015bc5:	e8 b8 7a ff ff       	call   c000d682 <Directory::create()>
c0015bca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bcd:	89 c6                	mov    esi,eax
c0015bcf:	e8 2a 79 ff ff       	call   c000d4fe <Directory::close()>
c0015bd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bd9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bdc:	83 c4 10             	add    esp,0x10
c0015bdf:	31 c0                	xor    eax,eax
c0015be1:	59                   	pop    ecx
c0015be2:	85 f6                	test   esi,esi
c0015be4:	5b                   	pop    ebx
c0015be5:	0f 95 c0             	setne  al
c0015be8:	5e                   	pop    esi
c0015be9:	31 d2                	xor    edx,edx
c0015beb:	f7 d8                	neg    eax
c0015bed:	83 d2 00             	adc    edx,0x0
c0015bf0:	f7 da                	neg    edx
c0015bf2:	c3                   	ret    
c0015bf3:	59                   	pop    ecx
c0015bf4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bf9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015bfe:	5b                   	pop    ebx
c0015bff:	5e                   	pop    esi
c0015c00:	c3                   	ret    

c0015c01 <sysCallWait(regs*)>:
c0015c01:	83 ec 10             	sub    esp,0x10
c0015c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c08:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015c0b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c0e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015c11:	e8 0e 25 00 00       	call   c0018124 <waitTask(int, int*, int)>
c0015c16:	83 c4 1c             	add    esp,0x1c
c0015c19:	99                   	cdq    
c0015c1a:	c3                   	ret    

c0015c1b <sysCallNotImpl(regs*)>:
c0015c1b:	83 ec 18             	sub    esp,0x18
c0015c1e:	68 c9 45 02 c0       	push   0xc00245c9
c0015c23:	e8 e1 e6 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0015c28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c2d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c32:	83 c4 1c             	add    esp,0x1c
c0015c35:	c3                   	ret    

c0015c36 <sysPanic(regs*)>:
c0015c36:	83 ec 18             	sub    esp,0x18
c0015c39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c3d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c40:	e8 c4 e6 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0015c45:	b8 01 00 00 00       	mov    eax,0x1
c0015c4a:	31 d2                	xor    edx,edx
c0015c4c:	83 c4 1c             	add    esp,0x1c
c0015c4f:	c3                   	ret    

c0015c50 <sysCallRmdir(regs*)>:
c0015c50:	56                   	push   esi
c0015c51:	53                   	push   ebx
c0015c52:	83 ec 20             	sub    esp,0x20
c0015c55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c59:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015c5c:	68 14 01 00 00       	push   0x114
c0015c61:	e8 5d 3d ff ff       	call   c00099c3 <malloc>
c0015c66:	83 c4 0c             	add    esp,0xc
c0015c69:	89 c3                	mov    ebx,eax
c0015c6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c70:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015c73:	56                   	push   esi
c0015c74:	53                   	push   ebx
c0015c75:	e8 18 73 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0015c7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c7d:	e8 ec 74 ff ff       	call   c000d16e <File::unlink()>
c0015c82:	83 c4 10             	add    esp,0x10
c0015c85:	85 db                	test   ebx,ebx
c0015c87:	74 14                	je     c0015c9d <sysCallRmdir(regs*)+0x4d>
c0015c89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c8d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015c8f:	83 ec 0c             	sub    esp,0xc
c0015c92:	53                   	push   ebx
c0015c93:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015c96:	83 c4 10             	add    esp,0x10
c0015c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c9d:	85 c0                	test   eax,eax
c0015c9f:	0f 95 c0             	setne  al
c0015ca2:	31 d2                	xor    edx,edx
c0015ca4:	0f b6 c0             	movzx  eax,al
c0015ca7:	f7 d8                	neg    eax
c0015ca9:	83 d2 00             	adc    edx,0x0
c0015cac:	83 c4 14             	add    esp,0x14
c0015caf:	f7 da                	neg    edx
c0015cb1:	5b                   	pop    ebx
c0015cb2:	5e                   	pop    esi
c0015cb3:	c3                   	ret    

c0015cb4 <sysCallUnlink(regs*)>:
c0015cb4:	56                   	push   esi
c0015cb5:	53                   	push   ebx
c0015cb6:	83 ec 20             	sub    esp,0x20
c0015cb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015cbd:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015cc0:	68 14 01 00 00       	push   0x114
c0015cc5:	e8 f9 3c ff ff       	call   c00099c3 <malloc>
c0015cca:	83 c4 0c             	add    esp,0xc
c0015ccd:	89 c3                	mov    ebx,eax
c0015ccf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cd4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015cd7:	56                   	push   esi
c0015cd8:	53                   	push   ebx
c0015cd9:	e8 b4 72 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0015cde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ce1:	e8 88 74 ff ff       	call   c000d16e <File::unlink()>
c0015ce6:	83 c4 10             	add    esp,0x10
c0015ce9:	85 db                	test   ebx,ebx
c0015ceb:	74 14                	je     c0015d01 <sysCallUnlink(regs*)+0x4d>
c0015ced:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cf1:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015cf3:	83 ec 0c             	sub    esp,0xc
c0015cf6:	53                   	push   ebx
c0015cf7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015cfa:	83 c4 10             	add    esp,0x10
c0015cfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d01:	85 c0                	test   eax,eax
c0015d03:	0f 95 c0             	setne  al
c0015d06:	31 d2                	xor    edx,edx
c0015d08:	0f b6 c0             	movzx  eax,al
c0015d0b:	f7 d8                	neg    eax
c0015d0d:	83 d2 00             	adc    edx,0x0
c0015d10:	83 c4 14             	add    esp,0x14
c0015d13:	f7 da                	neg    edx
c0015d15:	5b                   	pop    ebx
c0015d16:	5e                   	pop    esi
c0015d17:	c3                   	ret    

c0015d18 <sysCallGetArgv(regs*)>:
c0015d18:	83 ec 0c             	sub    esp,0xc
c0015d1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d1f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015d22:	85 c0                	test   eax,eax
c0015d24:	78 2b                	js     c0015d51 <sysCallGetArgv(regs*)+0x39>
c0015d26:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015d2c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015d2f:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0015d35:	7d 1a                	jge    c0015d51 <sysCallGetArgv(regs*)+0x39>
c0015d37:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0015d3e:	85 c0                	test   eax,eax
c0015d40:	74 17                	je     c0015d59 <sysCallGetArgv(regs*)+0x41>
c0015d42:	83 ec 08             	sub    esp,0x8
c0015d45:	50                   	push   eax
c0015d46:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015d49:	e8 f2 a9 fe ff       	call   c0000740 <strcpy>
c0015d4e:	83 c4 10             	add    esp,0x10
c0015d51:	31 c0                	xor    eax,eax
c0015d53:	31 d2                	xor    edx,edx
c0015d55:	83 c4 0c             	add    esp,0xc
c0015d58:	c3                   	ret    
c0015d59:	b8 01 00 00 00       	mov    eax,0x1
c0015d5e:	31 d2                	xor    edx,edx
c0015d60:	83 c4 0c             	add    esp,0xc
c0015d63:	c3                   	ret    

c0015d64 <sysCallTTYName(regs*)>:
c0015d64:	56                   	push   esi
c0015d65:	53                   	push   ebx
c0015d66:	53                   	push   ebx
c0015d67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d6b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015d6e:	85 c0                	test   eax,eax
c0015d70:	74 5f                	je     c0015dd1 <sysCallTTYName(regs*)+0x6d>
c0015d72:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015d75:	83 f8 02             	cmp    eax,0x2
c0015d78:	77 3e                	ja     c0015db8 <sysCallTTYName(regs*)+0x54>
c0015d7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d7f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d82:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015d88:	85 db                	test   ebx,ebx
c0015d8a:	74 45                	je     c0015dd1 <sysCallTTYName(regs*)+0x6d>
c0015d8c:	83 ec 0c             	sub    esp,0xc
c0015d8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d91:	53                   	push   ebx
c0015d92:	ff 10                	call   DWORD PTR [eax]
c0015d94:	83 c4 10             	add    esp,0x10
c0015d97:	84 c0                	test   al,al
c0015d99:	74 41                	je     c0015ddc <sysCallTTYName(regs*)+0x78>
c0015d9b:	83 ec 08             	sub    esp,0x8
c0015d9e:	81 c3 82 00 00 00    	add    ebx,0x82
c0015da4:	53                   	push   ebx
c0015da5:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015da8:	e8 93 a9 fe ff       	call   c0000740 <strcpy>
c0015dad:	83 c4 10             	add    esp,0x10
c0015db0:	31 c0                	xor    eax,eax
c0015db2:	59                   	pop    ecx
c0015db3:	31 d2                	xor    edx,edx
c0015db5:	5b                   	pop    ebx
c0015db6:	5e                   	pop    esi
c0015db7:	c3                   	ret    
c0015db8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015dbd:	74 bb                	je     c0015d7a <sysCallTTYName(regs*)+0x16>
c0015dbf:	83 ec 0c             	sub    esp,0xc
c0015dc2:	50                   	push   eax
c0015dc3:	e8 2f 57 ff ff       	call   c000b4f7 <getFromFileDescriptor(int)>
c0015dc8:	83 c4 10             	add    esp,0x10
c0015dcb:	89 c3                	mov    ebx,eax
c0015dcd:	85 db                	test   ebx,ebx
c0015dcf:	75 bb                	jne    c0015d8c <sysCallTTYName(regs*)+0x28>
c0015dd1:	59                   	pop    ecx
c0015dd2:	b8 01 00 00 00       	mov    eax,0x1
c0015dd7:	31 d2                	xor    edx,edx
c0015dd9:	5b                   	pop    ebx
c0015dda:	5e                   	pop    esi
c0015ddb:	c3                   	ret    
c0015ddc:	59                   	pop    ecx
c0015ddd:	b8 02 00 00 00       	mov    eax,0x2
c0015de2:	31 d2                	xor    edx,edx
c0015de4:	5b                   	pop    ebx
c0015de5:	5e                   	pop    esi
c0015de6:	c3                   	ret    

c0015de7 <sysCallUSleep(regs*)>:
c0015de7:	83 ec 14             	sub    esp,0x14
c0015dea:	b8 e8 03 00 00       	mov    eax,0x3e8
c0015def:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015df3:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0015dfa:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0015dfd:	01 ca                	add    edx,ecx
c0015dff:	52                   	push   edx
c0015e00:	50                   	push   eax
c0015e01:	e8 fe 23 00 00       	call   c0018204 <nanoSleep(unsigned long long)>
c0015e06:	31 c0                	xor    eax,eax
c0015e08:	31 d2                	xor    edx,edx
c0015e0a:	83 c4 1c             	add    esp,0x1c
c0015e0d:	c3                   	ret    

c0015e0e <sysCallSpawn(regs*)>:
c0015e0e:	56                   	push   esi
c0015e0f:	53                   	push   ebx
c0015e10:	50                   	push   eax
c0015e11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e15:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015e18:	85 c0                	test   eax,eax
c0015e1a:	75 08                	jne    c0015e24 <sysCallSpawn(regs*)+0x16>
c0015e1c:	59                   	pop    ecx
c0015e1d:	31 c0                	xor    eax,eax
c0015e1f:	31 d2                	xor    edx,edx
c0015e21:	5b                   	pop    ebx
c0015e22:	5e                   	pop    esi
c0015e23:	c3                   	ret    
c0015e24:	83 ec 0c             	sub    esp,0xc
c0015e27:	68 3f 07 00 00       	push   0x73f
c0015e2c:	e8 92 3b ff ff       	call   c00099c3 <malloc>
c0015e31:	83 c4 10             	add    esp,0x10
c0015e34:	89 c6                	mov    esi,eax
c0015e36:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0015e39:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015e3c:	85 c0                	test   eax,eax
c0015e3e:	75 32                	jne    c0015e72 <sysCallSpawn(regs*)+0x64>
c0015e40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e45:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015e48:	52                   	push   edx
c0015e49:	50                   	push   eax
c0015e4a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015e4d:	56                   	push   esi
c0015e4e:	e8 85 1a 00 00       	call   c00178d8 <Process::Process(char const*, Process*, char**)>
c0015e53:	83 c4 10             	add    esp,0x10
c0015e56:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c0015e5d:	75 bd                	jne    c0015e1c <sysCallSpawn(regs*)+0xe>
c0015e5f:	83 ec 0c             	sub    esp,0xc
c0015e62:	56                   	push   esi
c0015e63:	e8 70 1f 00 00       	call   c0017dd8 <Process::createUserThread()>
c0015e68:	8b 06                	mov    eax,DWORD PTR [esi]
c0015e6a:	83 c4 10             	add    esp,0x10
c0015e6d:	99                   	cdq    
c0015e6e:	59                   	pop    ecx
c0015e6f:	5b                   	pop    ebx
c0015e70:	5e                   	pop    esi
c0015e71:	c3                   	ret    
c0015e72:	31 c0                	xor    eax,eax
c0015e74:	eb d2                	jmp    c0015e48 <sysCallSpawn(regs*)+0x3a>

c0015e76 <sysCallGetEnv(regs*)>:
c0015e76:	57                   	push   edi
c0015e77:	56                   	push   esi
c0015e78:	53                   	push   ebx
c0015e79:	83 ec 1c             	sub    esp,0x1c
c0015e7c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015e80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e85:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0015e88:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015e8b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015e8e:	e8 c2 e3 ff ff       	call   c0014255 <Krnl::getProcessTotalEnvCount(Process*)>
c0015e93:	83 c4 10             	add    esp,0x10
c0015e96:	39 c7                	cmp    edi,eax
c0015e98:	7c 14                	jl     c0015eae <sysCallGetEnv(regs*)+0x38>
c0015e9a:	85 f6                	test   esi,esi
c0015e9c:	75 0b                	jne    c0015ea9 <sysCallGetEnv(regs*)+0x33>
c0015e9e:	83 c4 10             	add    esp,0x10
c0015ea1:	31 c0                	xor    eax,eax
c0015ea3:	5b                   	pop    ebx
c0015ea4:	31 d2                	xor    edx,edx
c0015ea6:	5e                   	pop    esi
c0015ea7:	5f                   	pop    edi
c0015ea8:	c3                   	ret    
c0015ea9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015eac:	eb f0                	jmp    c0015e9e <sysCallGetEnv(regs*)+0x28>
c0015eae:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015eb2:	52                   	push   edx
c0015eb3:	57                   	push   edi
c0015eb4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015eba:	ff 72 40             	push   DWORD PTR [edx+0x40]
c0015ebd:	50                   	push   eax
c0015ebe:	e8 b2 e3 ff ff       	call   c0014275 <Krnl::getProcessEnvPair(Process*, int)>
c0015ec3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015ec6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015eca:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015ece:	83 c4 0c             	add    esp,0xc
c0015ed1:	85 c9                	test   ecx,ecx
c0015ed3:	75 23                	jne    c0015ef8 <sysCallGetEnv(regs*)+0x82>
c0015ed5:	83 ec 0c             	sub    esp,0xc
c0015ed8:	50                   	push   eax
c0015ed9:	e8 c2 a7 fe ff       	call   c00006a0 <strlen>
c0015ede:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015ee1:	89 c3                	mov    ebx,eax
c0015ee3:	e8 b8 a7 fe ff       	call   c00006a0 <strlen>
c0015ee8:	83 c4 10             	add    esp,0x10
c0015eeb:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0015eef:	83 c4 10             	add    esp,0x10
c0015ef2:	31 d2                	xor    edx,edx
c0015ef4:	5b                   	pop    ebx
c0015ef5:	5e                   	pop    esi
c0015ef6:	5f                   	pop    edi
c0015ef7:	c3                   	ret    
c0015ef8:	83 ec 08             	sub    esp,0x8
c0015efb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015efe:	50                   	push   eax
c0015eff:	56                   	push   esi
c0015f00:	e8 3b a8 fe ff       	call   c0000740 <strcpy>
c0015f05:	58                   	pop    eax
c0015f06:	5a                   	pop    edx
c0015f07:	68 e3 45 02 c0       	push   0xc00245e3
c0015f0c:	56                   	push   esi
c0015f0d:	e8 6e a9 fe ff       	call   c0000880 <strcat>
c0015f12:	59                   	pop    ecx
c0015f13:	5b                   	pop    ebx
c0015f14:	57                   	push   edi
c0015f15:	56                   	push   esi
c0015f16:	e8 65 a9 fe ff       	call   c0000880 <strcat>
c0015f1b:	83 c4 10             	add    esp,0x10
c0015f1e:	e9 7b ff ff ff       	jmp    c0015e9e <sysCallGetEnv(regs*)+0x28>

c0015f23 <sysAppSettings(regs*)>:
c0015f23:	57                   	push   edi
c0015f24:	56                   	push   esi
c0015f25:	56                   	push   esi
c0015f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f2a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015f2d:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0015f33:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015f38:	66 3d c0 09          	cmp    ax,0x9c0
c0015f3c:	75 2e                	jne    c0015f6c <sysAppSettings(regs*)+0x49>
c0015f3e:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0015f44:	83 e0 1f             	and    eax,0x1f
c0015f47:	3c 01                	cmp    al,0x1
c0015f49:	74 2c                	je     c0015f77 <sysAppSettings(regs*)+0x54>
c0015f4b:	3c 07                	cmp    al,0x7
c0015f4d:	0f 84 b3 00 00 00    	je     c0016006 <sysAppSettings(regs*)+0xe3>
c0015f53:	84 c0                	test   al,al
c0015f55:	0f 84 d2 00 00 00    	je     c001602d <sysAppSettings(regs*)+0x10a>
c0015f5b:	3c 08                	cmp    al,0x8
c0015f5d:	74 63                	je     c0015fc2 <sysAppSettings(regs*)+0x9f>
c0015f5f:	59                   	pop    ecx
c0015f60:	0f b6 c0             	movzx  eax,al
c0015f63:	5e                   	pop    esi
c0015f64:	05 e8 03 00 00       	add    eax,0x3e8
c0015f69:	5f                   	pop    edi
c0015f6a:	99                   	cdq    
c0015f6b:	c3                   	ret    
c0015f6c:	b8 01 00 00 00       	mov    eax,0x1
c0015f71:	59                   	pop    ecx
c0015f72:	31 d2                	xor    edx,edx
c0015f74:	5e                   	pop    esi
c0015f75:	5f                   	pop    edi
c0015f76:	c3                   	ret    
c0015f77:	50                   	push   eax
c0015f78:	68 00 01 00 00       	push   0x100
c0015f7d:	6a 00                	push   0x0
c0015f7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f84:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015f87:	83 c0 0c             	add    eax,0xc
c0015f8a:	50                   	push   eax
c0015f8b:	e8 f4 a6 fe ff       	call   c0000684 <memset>
c0015f90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f95:	b9 ff 00 00 00       	mov    ecx,0xff
c0015f9a:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c0015f9d:	83 c7 0c             	add    edi,0xc
c0015fa0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015fa2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fa7:	5a                   	pop    edx
c0015fa8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015fab:	59                   	pop    ecx
c0015fac:	8d 50 0c             	lea    edx,[eax+0xc]
c0015faf:	52                   	push   edx
c0015fb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015fb6:	e8 61 46 ff ff       	call   c000a61c <VgaText::setTitle(char*)>
c0015fbb:	83 c4 10             	add    esp,0x10
c0015fbe:	31 c0                	xor    eax,eax
c0015fc0:	eb af                	jmp    c0015f71 <sysAppSettings(regs*)+0x4e>
c0015fc2:	83 ec 08             	sub    esp,0x8
c0015fc5:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015fcb:	83 e0 0f             	and    eax,0xf
c0015fce:	50                   	push   eax
c0015fcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fd4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015fd7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015fdd:	e8 2a 46 ff ff       	call   c000a60c <VgaText::setTitleColour(VgaColour)>
c0015fe2:	5f                   	pop    edi
c0015fe3:	58                   	pop    eax
c0015fe4:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015fea:	c1 e8 04             	shr    eax,0x4
c0015fed:	83 e0 0f             	and    eax,0xf
c0015ff0:	50                   	push   eax
c0015ff1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ff6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015ff9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015fff:	e8 f8 45 ff ff       	call   c000a5fc <VgaText::setTitleTextColour(VgaColour)>
c0016004:	eb b5                	jmp    c0015fbb <sysAppSettings(regs*)+0x98>
c0016006:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001600b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001600e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016014:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001601a:	c0 e8 06             	shr    al,0x6
c001601d:	83 e0 01             	and    eax,0x1
c0016020:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0016026:	31 c0                	xor    eax,eax
c0016028:	e9 44 ff ff ff       	jmp    c0015f71 <sysAppSettings(regs*)+0x4e>
c001602d:	b8 02 00 00 00       	mov    eax,0x2
c0016032:	e9 3a ff ff ff       	jmp    c0015f71 <sysAppSettings(regs*)+0x4e>

c0016037 <sysSetFatAttrib(regs*)>:
c0016037:	57                   	push   edi
c0016038:	56                   	push   esi
c0016039:	53                   	push   ebx
c001603a:	83 ec 1c             	sub    esp,0x1c
c001603d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016041:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016044:	68 14 01 00 00       	push   0x114
c0016049:	e8 75 39 ff ff       	call   c00099c3 <malloc>
c001604e:	83 c4 0c             	add    esp,0xc
c0016051:	89 c3                	mov    ebx,eax
c0016053:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016058:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001605b:	57                   	push   edi
c001605c:	53                   	push   ebx
c001605d:	e8 30 6f ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0016062:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016065:	83 c4 0c             	add    esp,0xc
c0016068:	0f b6 d4             	movzx  edx,ah
c001606b:	0f b6 c0             	movzx  eax,al
c001606e:	52                   	push   edx
c001606f:	50                   	push   eax
c0016070:	53                   	push   ebx
c0016071:	e8 92 71 ff ff       	call   c000d208 <File::chfatattr(unsigned char, unsigned char)>
c0016076:	83 c4 10             	add    esp,0x10
c0016079:	85 db                	test   ebx,ebx
c001607b:	74 14                	je     c0016091 <sysSetFatAttrib(regs*)+0x5a>
c001607d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016081:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016083:	83 ec 0c             	sub    esp,0xc
c0016086:	53                   	push   ebx
c0016087:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001608a:	83 c4 10             	add    esp,0x10
c001608d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016091:	85 c0                	test   eax,eax
c0016093:	0f 95 c0             	setne  al
c0016096:	31 d2                	xor    edx,edx
c0016098:	0f b6 c0             	movzx  eax,al
c001609b:	f7 d8                	neg    eax
c001609d:	83 d2 00             	adc    edx,0x0
c00160a0:	83 c4 10             	add    esp,0x10
c00160a3:	f7 da                	neg    edx
c00160a5:	5b                   	pop    ebx
c00160a6:	5e                   	pop    esi
c00160a7:	5f                   	pop    edi
c00160a8:	c3                   	ret    

c00160a9 <sysPipe(regs*)>:
c00160a9:	57                   	push   edi
c00160aa:	56                   	push   esi
c00160ab:	53                   	push   ebx
c00160ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160b0:	83 ec 0c             	sub    esp,0xc
c00160b3:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00160b6:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00160b9:	6a 20                	push   0x20
c00160bb:	e8 03 39 ff ff       	call   c00099c3 <malloc>
c00160c0:	89 c3                	mov    ebx,eax
c00160c2:	58                   	pop    eax
c00160c3:	5a                   	pop    edx
c00160c4:	68 00 50 00 00       	push   0x5000
c00160c9:	53                   	push   ebx
c00160ca:	e8 c5 42 ff ff       	call   c000a394 <Pipe::Pipe(int)>
c00160cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160d2:	e8 2b 51 ff ff       	call   c000b202 <UnixFile::getFileDescriptor()>
c00160d7:	89 07                	mov    DWORD PTR [edi],eax
c00160d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160dc:	e8 21 51 ff ff       	call   c000b202 <UnixFile::getFileDescriptor()>
c00160e1:	83 c4 10             	add    esp,0x10
c00160e4:	89 06                	mov    DWORD PTR [esi],eax
c00160e6:	31 d2                	xor    edx,edx
c00160e8:	5b                   	pop    ebx
c00160e9:	31 c0                	xor    eax,eax
c00160eb:	5e                   	pop    esi
c00160ec:	5f                   	pop    edi
c00160ed:	c3                   	ret    

c00160ee <sysGetUnixTime(regs*)>:
c00160ee:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c00160f3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00160f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00160fd:	e9 8c 78 ff ff       	jmp    c000d98e <Clock::timeInSecondsLocal()>

c0016102 <string_ends_with(char const*, char const*)>:
c0016102:	57                   	push   edi
c0016103:	56                   	push   esi
c0016104:	53                   	push   ebx
c0016105:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016109:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001610d:	83 ec 0c             	sub    esp,0xc
c0016110:	53                   	push   ebx
c0016111:	e8 8a a5 fe ff       	call   c00006a0 <strlen>
c0016116:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016119:	89 c6                	mov    esi,eax
c001611b:	e8 80 a5 fe ff       	call   c00006a0 <strlen>
c0016120:	83 c4 10             	add    esp,0x10
c0016123:	39 c6                	cmp    esi,eax
c0016125:	7d 06                	jge    c001612d <string_ends_with(char const*, char const*)+0x2b>
c0016127:	5b                   	pop    ebx
c0016128:	31 c0                	xor    eax,eax
c001612a:	5e                   	pop    esi
c001612b:	5f                   	pop    edi
c001612c:	c3                   	ret    
c001612d:	83 ec 08             	sub    esp,0x8
c0016130:	29 c6                	sub    esi,eax
c0016132:	57                   	push   edi
c0016133:	01 f3                	add    ebx,esi
c0016135:	53                   	push   ebx
c0016136:	e8 91 a6 fe ff       	call   c00007cc <strcmp>
c001613b:	83 c4 10             	add    esp,0x10
c001613e:	85 c0                	test   eax,eax
c0016140:	5b                   	pop    ebx
c0016141:	0f 94 c0             	sete   al
c0016144:	5e                   	pop    esi
c0016145:	0f b6 c0             	movzx  eax,al
c0016148:	5f                   	pop    edi
c0016149:	c3                   	ret    

c001614a <sysCallOpen(regs*)>:
c001614a:	56                   	push   esi
c001614b:	53                   	push   ebx
c001614c:	81 ec 04 01 00 00    	sub    esp,0x104
c0016152:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016159:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001615c:	85 c9                	test   ecx,ecx
c001615e:	0f 84 ad 01 00 00    	je     c0016311 <sysCallOpen(regs*)+0x1c7>
c0016164:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016167:	85 c0                	test   eax,eax
c0016169:	0f 84 a2 01 00 00    	je     c0016311 <sysCallOpen(regs*)+0x1c7>
c001616f:	52                   	push   edx
c0016170:	68 e5 45 02 c0       	push   0xc00245e5
c0016175:	50                   	push   eax
c0016176:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001617a:	56                   	push   esi
c001617b:	e8 68 6c ff ff       	call   c000cde8 <Fs::standardiseFiles(char*, char const*, char const*)>
c0016180:	89 34 24             	mov    DWORD PTR [esp],esi
c0016183:	e8 18 a5 fe ff       	call   c00006a0 <strlen>
c0016188:	83 c4 10             	add    esp,0x10
c001618b:	48                   	dec    eax
c001618c:	74 1d                	je     c00161ab <sysCallOpen(regs*)+0x61>
c001618e:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016191:	eb 0f                	jmp    c00161a2 <sysCallOpen(regs*)+0x58>
c0016193:	80 fa 3a             	cmp    dl,0x3a
c0016196:	74 0f                	je     c00161a7 <sysCallOpen(regs*)+0x5d>
c0016198:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001619c:	48                   	dec    eax
c001619d:	74 0c                	je     c00161ab <sysCallOpen(regs*)+0x61>
c001619f:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00161a2:	80 fa 2e             	cmp    dl,0x2e
c00161a5:	75 ec                	jne    c0016193 <sysCallOpen(regs*)+0x49>
c00161a7:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00161ab:	83 ec 08             	sub    esp,0x8
c00161ae:	68 e9 45 02 c0       	push   0xc00245e9
c00161b3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161b6:	e8 47 ff ff ff       	call   c0016102 <string_ends_with(char const*, char const*)>
c00161bb:	83 c4 10             	add    esp,0x10
c00161be:	85 c0                	test   eax,eax
c00161c0:	74 1d                	je     c00161df <sysCallOpen(regs*)+0x95>
c00161c2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00161c5:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00161cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00161d2:	81 c4 04 01 00 00    	add    esp,0x104
c00161d8:	31 c0                	xor    eax,eax
c00161da:	31 d2                	xor    edx,edx
c00161dc:	5b                   	pop    ebx
c00161dd:	5e                   	pop    esi
c00161de:	c3                   	ret    
c00161df:	83 ec 08             	sub    esp,0x8
c00161e2:	68 ee 45 02 c0       	push   0xc00245ee
c00161e7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161ea:	e8 13 ff ff ff       	call   c0016102 <string_ends_with(char const*, char const*)>
c00161ef:	83 c4 10             	add    esp,0x10
c00161f2:	85 c0                	test   eax,eax
c00161f4:	75 cc                	jne    c00161c2 <sysCallOpen(regs*)+0x78>
c00161f6:	83 ec 08             	sub    esp,0x8
c00161f9:	68 ea 45 02 c0       	push   0xc00245ea
c00161fe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016201:	e8 c6 a5 fe ff       	call   c00007cc <strcmp>
c0016206:	83 c4 10             	add    esp,0x10
c0016209:	85 c0                	test   eax,eax
c001620b:	74 b5                	je     c00161c2 <sysCallOpen(regs*)+0x78>
c001620d:	83 ec 08             	sub    esp,0x8
c0016210:	68 e9 45 02 c0       	push   0xc00245e9
c0016215:	56                   	push   esi
c0016216:	e8 e7 fe ff ff       	call   c0016102 <string_ends_with(char const*, char const*)>
c001621b:	83 c4 10             	add    esp,0x10
c001621e:	85 c0                	test   eax,eax
c0016220:	75 a0                	jne    c00161c2 <sysCallOpen(regs*)+0x78>
c0016222:	83 ec 08             	sub    esp,0x8
c0016225:	68 f3 45 02 c0       	push   0xc00245f3
c001622a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001622d:	e8 d0 fe ff ff       	call   c0016102 <string_ends_with(char const*, char const*)>
c0016232:	83 c4 10             	add    esp,0x10
c0016235:	85 c0                	test   eax,eax
c0016237:	0f 85 e7 00 00 00    	jne    c0016324 <sysCallOpen(regs*)+0x1da>
c001623d:	83 ec 08             	sub    esp,0x8
c0016240:	68 f8 45 02 c0       	push   0xc00245f8
c0016245:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016248:	e8 b5 fe ff ff       	call   c0016102 <string_ends_with(char const*, char const*)>
c001624d:	83 c4 10             	add    esp,0x10
c0016250:	85 c0                	test   eax,eax
c0016252:	0f 85 cc 00 00 00    	jne    c0016324 <sysCallOpen(regs*)+0x1da>
c0016258:	83 ec 08             	sub    esp,0x8
c001625b:	68 f4 45 02 c0       	push   0xc00245f4
c0016260:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016263:	e8 64 a5 fe ff       	call   c00007cc <strcmp>
c0016268:	83 c4 10             	add    esp,0x10
c001626b:	85 c0                	test   eax,eax
c001626d:	0f 84 b1 00 00 00    	je     c0016324 <sysCallOpen(regs*)+0x1da>
c0016273:	83 ec 08             	sub    esp,0x8
c0016276:	68 f3 45 02 c0       	push   0xc00245f3
c001627b:	56                   	push   esi
c001627c:	e8 81 fe ff ff       	call   c0016102 <string_ends_with(char const*, char const*)>
c0016281:	83 c4 10             	add    esp,0x10
c0016284:	85 c0                	test   eax,eax
c0016286:	0f 85 98 00 00 00    	jne    c0016324 <sysCallOpen(regs*)+0x1da>
c001628c:	83 ec 0c             	sub    esp,0xc
c001628f:	68 14 01 00 00       	push   0x114
c0016294:	e8 2a 37 ff ff       	call   c00099c3 <malloc>
c0016299:	83 c4 0c             	add    esp,0xc
c001629c:	89 c6                	mov    esi,eax
c001629e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162a3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00162a6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162a9:	56                   	push   esi
c00162aa:	e8 e3 6c ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c00162af:	83 c4 10             	add    esp,0x10
c00162b2:	85 f6                	test   esi,esi
c00162b4:	74 5b                	je     c0016311 <sysCallOpen(regs*)+0x1c7>
c00162b6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00162b9:	0f b6 c2             	movzx  eax,dl
c00162bc:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00162bf:	89 d0                	mov    eax,edx
c00162c1:	83 e0 01             	and    eax,0x1
c00162c4:	f6 c2 02             	test   dl,0x2
c00162c7:	74 03                	je     c00162cc <sysCallOpen(regs*)+0x182>
c00162c9:	83 c8 02             	or     eax,0x2
c00162cc:	f6 c2 04             	test   dl,0x4
c00162cf:	74 03                	je     c00162d4 <sysCallOpen(regs*)+0x18a>
c00162d1:	83 c8 04             	or     eax,0x4
c00162d4:	f6 c2 08             	test   dl,0x8
c00162d7:	74 03                	je     c00162dc <sysCallOpen(regs*)+0x192>
c00162d9:	83 c8 0a             	or     eax,0xa
c00162dc:	83 e2 10             	and    edx,0x10
c00162df:	74 03                	je     c00162e4 <sysCallOpen(regs*)+0x19a>
c00162e1:	83 c8 12             	or     eax,0x12
c00162e4:	83 ec 08             	sub    esp,0x8
c00162e7:	50                   	push   eax
c00162e8:	56                   	push   esi
c00162e9:	e8 08 6d ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c00162ee:	83 c4 10             	add    esp,0x10
c00162f1:	85 c0                	test   eax,eax
c00162f3:	75 1c                	jne    c0016311 <sysCallOpen(regs*)+0x1c7>
c00162f5:	83 ec 0c             	sub    esp,0xc
c00162f8:	56                   	push   esi
c00162f9:	e8 04 4f ff ff       	call   c000b202 <UnixFile::getFileDescriptor()>
c00162fe:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016301:	83 c4 10             	add    esp,0x10
c0016304:	89 02                	mov    DWORD PTR [edx],eax
c0016306:	c1 f8 1f             	sar    eax,0x1f
c0016309:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001630c:	e9 c1 fe ff ff       	jmp    c00161d2 <sysCallOpen(regs*)+0x88>
c0016311:	81 c4 04 01 00 00    	add    esp,0x104
c0016317:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001631c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016321:	5b                   	pop    ebx
c0016322:	5e                   	pop    esi
c0016323:	c3                   	ret    
c0016324:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016327:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001632d:	e9 99 fe ff ff       	jmp    c00161cb <sysCallOpen(regs*)+0x81>

c0016332 <Sys::loadSyscalls()>:
c0016332:	c7 05 60 6f 02 c0 97 55 01 c0 	mov    DWORD PTR ds:0xc0026f60,0xc0015597
c001633c:	c7 05 64 6f 02 c0 8c 51 01 c0 	mov    DWORD PTR ds:0xc0026f64,0xc001518c
c0016346:	c7 05 68 6f 02 c0 7d 53 01 c0 	mov    DWORD PTR ds:0xc0026f68,0xc001537d
c0016350:	c7 05 6c 6f 02 c0 cd 54 01 c0 	mov    DWORD PTR ds:0xc0026f6c,0xc00154cd
c001635a:	c7 05 70 6f 02 c0 15 53 01 c0 	mov    DWORD PTR ds:0xc0026f70,0xc0015315
c0016364:	c7 05 74 6f 02 c0 c3 51 01 c0 	mov    DWORD PTR ds:0xc0026f74,0xc00151c3
c001636e:	c7 05 78 6f 02 c0 a4 51 01 c0 	mov    DWORD PTR ds:0xc0026f78,0xc00151a4
c0016378:	c7 05 7c 6f 02 c0 d2 53 01 c0 	mov    DWORD PTR ds:0xc0026f7c,0xc00153d2
c0016382:	c7 05 84 6f 02 c0 68 5a 01 c0 	mov    DWORD PTR ds:0xc0026f84,0xc0015a68
c001638c:	c7 05 80 6f 02 c0 4a 61 01 c0 	mov    DWORD PTR ds:0xc0026f80,0xc001614a
c0016396:	c7 05 88 6f 02 c0 c8 5a 01 c0 	mov    DWORD PTR ds:0xc0026f88,0xc0015ac8
c00163a0:	c7 05 8c 6f 02 c0 ab 57 01 c0 	mov    DWORD PTR ds:0xc0026f8c,0xc00157ab
c00163aa:	c7 05 90 6f 02 c0 dd 55 01 c0 	mov    DWORD PTR ds:0xc0026f90,0xc00155dd
c00163b4:	c7 05 94 6f 02 c0 e2 55 01 c0 	mov    DWORD PTR ds:0xc0026f94,0xc00155e2
c00163be:	c7 05 98 6f 02 c0 91 5b 01 c0 	mov    DWORD PTR ds:0xc0026f98,0xc0015b91
c00163c8:	c7 05 9c 6f 02 c0 3d 5b 01 c0 	mov    DWORD PTR ds:0xc0026f9c,0xc0015b3d
c00163d2:	c7 05 a0 6f 02 c0 84 58 01 c0 	mov    DWORD PTR ds:0xc0026fa0,0xc0015884
c00163dc:	c7 05 a4 6f 02 c0 db 58 01 c0 	mov    DWORD PTR ds:0xc0026fa4,0xc00158db
c00163e6:	c7 05 a8 6f 02 c0 47 59 01 c0 	mov    DWORD PTR ds:0xc0026fa8,0xc0015947
c00163f0:	c7 05 ac 6f 02 c0 e7 55 01 c0 	mov    DWORD PTR ds:0xc0026fac,0xc00155e7
c00163fa:	c7 05 b0 6f 02 c0 01 5c 01 c0 	mov    DWORD PTR ds:0xc0026fb0,0xc0015c01
c0016404:	c7 05 b4 6f 02 c0 1b 5c 01 c0 	mov    DWORD PTR ds:0xc0026fb4,0xc0015c1b
c001640e:	c7 05 b8 6f 02 c0 1b 5c 01 c0 	mov    DWORD PTR ds:0xc0026fb8,0xc0015c1b
c0016418:	c7 05 bc 6f 02 c0 50 5c 01 c0 	mov    DWORD PTR ds:0xc0026fbc,0xc0015c50
c0016422:	c7 05 c0 6f 02 c0 b4 5c 01 c0 	mov    DWORD PTR ds:0xc0026fc0,0xc0015cb4
c001642c:	c7 05 c4 6f 02 c0 f1 55 01 c0 	mov    DWORD PTR ds:0xc0026fc4,0xc00155f1
c0016436:	c7 05 c8 6f 02 c0 18 5d 01 c0 	mov    DWORD PTR ds:0xc0026fc8,0xc0015d18
c0016440:	c7 05 cc 6f 02 c0 68 57 01 c0 	mov    DWORD PTR ds:0xc0026fcc,0xc0015768
c001644a:	c7 05 d0 6f 02 c0 64 5d 01 c0 	mov    DWORD PTR ds:0xc0026fd0,0xc0015d64
c0016454:	c7 05 d4 6f 02 c0 2a 58 01 c0 	mov    DWORD PTR ds:0xc0026fd4,0xc001582a
c001645e:	c7 05 d8 6f 02 c0 e7 5d 01 c0 	mov    DWORD PTR ds:0xc0026fd8,0xc0015de7
c0016468:	c7 05 dc 6f 02 c0 b9 59 01 c0 	mov    DWORD PTR ds:0xc0026fdc,0xc00159b9
c0016472:	c7 05 e0 6f 02 c0 0e 5e 01 c0 	mov    DWORD PTR ds:0xc0026fe0,0xc0015e0e
c001647c:	c7 05 e4 6f 02 c0 76 5e 01 c0 	mov    DWORD PTR ds:0xc0026fe4,0xc0015e76
c0016486:	c7 05 e8 6f 02 c0 23 5f 01 c0 	mov    DWORD PTR ds:0xc0026fe8,0xc0015f23
c0016490:	c7 05 ec 6f 02 c0 01 56 01 c0 	mov    DWORD PTR ds:0xc0026fec,0xc0015601
c001649a:	c7 05 f0 6f 02 c0 6b 56 01 c0 	mov    DWORD PTR ds:0xc0026ff0,0xc001566b
c00164a4:	c7 05 f4 6f 02 c0 b5 56 01 c0 	mov    DWORD PTR ds:0xc0026ff4,0xc00156b5
c00164ae:	c7 05 f8 6f 02 c0 37 60 01 c0 	mov    DWORD PTR ds:0xc0026ff8,0xc0016037
c00164b8:	c7 05 fc 6f 02 c0 36 5c 01 c0 	mov    DWORD PTR ds:0xc0026ffc,0xc0015c36
c00164c2:	c7 05 00 70 02 c0 0a 57 01 c0 	mov    DWORD PTR ds:0xc0027000,0xc001570a
c00164cc:	c7 05 04 70 02 c0 a9 60 01 c0 	mov    DWORD PTR ds:0xc0027004,0xc00160a9
c00164d6:	c7 05 08 70 02 c0 ee 60 01 c0 	mov    DWORD PTR ds:0xc0027008,0xc00160ee
c00164e0:	c7 05 0c 70 02 c0 6d 52 01 c0 	mov    DWORD PTR ds:0xc002700c,0xc001526d
c00164ea:	c7 05 10 70 02 c0 ee 53 01 c0 	mov    DWORD PTR ds:0xc0027010,0xc00153ee
c00164f4:	c7 05 14 70 02 c0 83 54 01 c0 	mov    DWORD PTR ds:0xc0027014,0xc0015483
c00164fe:	c7 05 18 70 02 c0 56 51 01 c0 	mov    DWORD PTR ds:0xc0027018,0xc0015156
c0016508:	c7 05 1c 70 02 c0 35 55 01 c0 	mov    DWORD PTR ds:0xc002701c,0xc0015535
c0016512:	c7 05 20 70 02 c0 cf 51 01 c0 	mov    DWORD PTR ds:0xc0027020,0xc00151cf
c001651c:	c7 05 24 70 02 c0 e9 51 01 c0 	mov    DWORD PTR ds:0xc0027024,0xc00151e9
c0016526:	c3                   	ret    

c0016527 <Sys::systemCall(regs*, void*)>:
c0016527:	53                   	push   ebx
c0016528:	83 ec 08             	sub    esp,0x8
c001652b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001652f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016532:	83 f8 7f             	cmp    eax,0x7f
c0016535:	77 16                	ja     c001654d <Sys::systemCall(regs*, void*)+0x26>
c0016537:	8b 14 85 60 6f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd90a0]
c001653e:	85 d2                	test   edx,edx
c0016540:	74 0b                	je     c001654d <Sys::systemCall(regs*, void*)+0x26>
c0016542:	83 ec 0c             	sub    esp,0xc
c0016545:	53                   	push   ebx
c0016546:	ff d2                	call   edx
c0016548:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001654b:	eb 0d                	jmp    c001655a <Sys::systemCall(regs*, void*)+0x33>
c001654d:	52                   	push   edx
c001654e:	52                   	push   edx
c001654f:	50                   	push   eax
c0016550:	68 fd 45 02 c0       	push   0xc00245fd
c0016555:	e8 ce 64 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001655a:	83 c4 10             	add    esp,0x10
c001655d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016562:	31 d2                	xor    edx,edx
c0016564:	83 c4 08             	add    esp,0x8
c0016567:	5b                   	pop    ebx
c0016568:	c3                   	ret    

c0016569 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016569:	55                   	push   ebp
c001656a:	57                   	push   edi
c001656b:	56                   	push   esi
c001656c:	53                   	push   ebx
c001656d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016573:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001657a:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016581:	85 c0                	test   eax,eax
c0016583:	0f 95 c1             	setne  cl
c0016586:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001658e:	0f 94 c2             	sete   dl
c0016591:	84 d1                	test   cl,dl
c0016593:	74 23                	je     c00165b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016595:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001659b:	74 1b                	je     c00165b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001659d:	81 c3 00 10 00 00    	add    ebx,0x1000
c00165a3:	89 da                	mov    edx,ebx
c00165a5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00165ab:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00165b1:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00165b8:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c00165bf:	05 ff 0f 00 00       	add    eax,0xfff
c00165c4:	83 ec 0c             	sub    esp,0xc
c00165c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00165cb:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c00165d1:	c1 e8 0c             	shr    eax,0xc
c00165d4:	89 fe                	mov    esi,edi
c00165d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00165da:	c1 ee 0c             	shr    esi,0xc
c00165dd:	6a 01                	push   0x1
c00165df:	e8 69 50 ff ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c00165e4:	89 c5                	mov    ebp,eax
c00165e6:	58                   	pop    eax
c00165e7:	5a                   	pop    edx
c00165e8:	56                   	push   esi
c00165e9:	68 11 46 02 c0       	push   0xc0024611
c00165ee:	e8 35 64 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00165f3:	59                   	pop    ecx
c00165f4:	58                   	pop    eax
c00165f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00165f9:	68 23 46 02 c0       	push   0xc0024623
c00165fe:	e8 25 64 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0016603:	83 c4 10             	add    esp,0x10
c0016606:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001660c:	0f 86 31 01 00 00    	jbe    c0016743 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016612:	c1 e6 0c             	shl    esi,0xc
c0016615:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016618:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001661b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001661f:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016626:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016629:	01 df                	add    edi,ebx
c001662b:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001662e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016632:	0f 84 08 01 00 00    	je     c0016740 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016638:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001663e:	76 05                	jbe    c0016645 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016640:	bf 00 10 00 00       	mov    edi,0x1000
c0016645:	83 ec 0c             	sub    esp,0xc
c0016648:	31 d2                	xor    edx,edx
c001664a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016651:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016653:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016657:	50                   	push   eax
c0016658:	8d 74 24 30          	lea    esi,[esp+0x30]
c001665c:	56                   	push   esi
c001665d:	52                   	push   edx
c001665e:	57                   	push   edi
c001665f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016666:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016669:	83 c4 20             	add    esp,0x20
c001666c:	85 c0                	test   eax,eax
c001666e:	74 0a                	je     c001667a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016670:	53                   	push   ebx
c0016671:	53                   	push   ebx
c0016672:	50                   	push   eax
c0016673:	68 35 46 02 c0       	push   0xc0024635
c0016678:	eb 0f                	jmp    c0016689 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001667a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001667e:	74 20                	je     c00166a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016680:	51                   	push   ecx
c0016681:	51                   	push   ecx
c0016682:	6a 00                	push   0x0
c0016684:	68 60 46 02 c0       	push   0xc0024660
c0016689:	e8 9a 63 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001668e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016691:	e8 e7 52 ff ff       	call   c000b97d <Virt::freeKernelVirtualPages(unsigned long)>
c0016696:	83 c4 10             	add    esp,0x10
c0016699:	31 c0                	xor    eax,eax
c001669b:	e9 68 01 00 00       	jmp    c0016808 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c00166a0:	fa                   	cli    
c00166a1:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c00166a7:	e8 13 37 ff ff       	call   c0009dbf <Phys::allocatePage()>
c00166ac:	6a 07                	push   0x7
c00166ae:	89 c7                	mov    edi,eax
c00166b0:	55                   	push   ebp
c00166b1:	50                   	push   eax
c00166b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166b7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166ba:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00166c0:	e8 2f 56 ff ff       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00166c5:	83 c4 0c             	add    esp,0xc
c00166c8:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00166cf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00166d5:	6a 00                	push   0x0
c00166d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166df:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00166e5:	e8 64 54 ff ff       	call   c000bb4e <VAS::mapOtherVASIn(bool, VAS*)>
c00166ea:	58                   	pop    eax
c00166eb:	5a                   	pop    edx
c00166ec:	68 07 0c 00 00       	push   0xc07
c00166f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00166f5:	57                   	push   edi
c00166f6:	89 ef                	mov    edi,ebp
c00166f8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00166ff:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016705:	6a 00                	push   0x0
c0016707:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001670c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001670f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016715:	e8 96 59 ff ff       	call   c000c0b0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001671a:	b9 00 10 00 00       	mov    ecx,0x1000
c001671f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016721:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0016726:	83 c4 20             	add    esp,0x20
c0016729:	48                   	dec    eax
c001672a:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c001672f:	85 c0                	test   eax,eax
c0016731:	75 01                	jne    c0016734 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016733:	fb                   	sti    
c0016734:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001673b:	e9 df fe ff ff       	jmp    c001661f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016740:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016743:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001674b:	0f 86 a9 00 00 00    	jbe    c00167fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016751:	fa                   	cli    
c0016752:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0016758:	51                   	push   ecx
c0016759:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016760:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016766:	6a 00                	push   0x0
c0016768:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001676d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016770:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016776:	e8 d3 53 ff ff       	call   c000bb4e <VAS::mapOtherVASIn(bool, VAS*)>
c001677b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001677f:	c1 e6 0c             	shl    esi,0xc
c0016782:	01 de                	add    esi,ebx
c0016784:	83 c4 10             	add    esp,0x10
c0016787:	39 de                	cmp    esi,ebx
c0016789:	74 61                	je     c00167ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001678b:	e8 2f 36 ff ff       	call   c0009dbf <Phys::allocatePage()>
c0016790:	6a 07                	push   0x7
c0016792:	89 c7                	mov    edi,eax
c0016794:	55                   	push   ebp
c0016795:	50                   	push   eax
c0016796:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001679b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001679e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00167a4:	e8 4b 55 ff ff       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00167a9:	58                   	pop    eax
c00167aa:	5a                   	pop    edx
c00167ab:	68 07 0c 00 00       	push   0xc07
c00167b0:	53                   	push   ebx
c00167b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00167b7:	57                   	push   edi
c00167b8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00167bf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00167c5:	6a 00                	push   0x0
c00167c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167cf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00167d5:	e8 d6 58 ff ff       	call   c000c0b0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00167da:	83 c4 1c             	add    esp,0x1c
c00167dd:	68 00 10 00 00       	push   0x1000
c00167e2:	6a 00                	push   0x0
c00167e4:	55                   	push   ebp
c00167e5:	e8 9a 9e fe ff       	call   c0000684 <memset>
c00167ea:	eb 98                	jmp    c0016784 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c00167ec:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00167f1:	48                   	dec    eax
c00167f2:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00167f7:	75 01                	jne    c00167fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c00167f9:	fb                   	sti    
c00167fa:	83 ec 0c             	sub    esp,0xc
c00167fd:	55                   	push   ebp
c00167fe:	e8 7a 51 ff ff       	call   c000b97d <Virt::freeKernelVirtualPages(unsigned long)>
c0016803:	83 c4 10             	add    esp,0x10
c0016806:	b0 01                	mov    al,0x1
c0016808:	81 c4 2c 10 00 00    	add    esp,0x102c
c001680e:	5b                   	pop    ebx
c001680f:	5e                   	pop    esi
c0016810:	5f                   	pop    edi
c0016811:	5d                   	pop    ebp
c0016812:	c3                   	ret    

c0016813 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016813:	55                   	push   ebp
c0016814:	57                   	push   edi
c0016815:	56                   	push   esi
c0016816:	53                   	push   ebx
c0016817:	83 ec 48             	sub    esp,0x48
c001681a:	68 14 01 00 00       	push   0x114
c001681f:	e8 9f 31 ff ff       	call   c00099c3 <malloc>
c0016824:	83 c4 0c             	add    esp,0xc
c0016827:	89 c6                	mov    esi,eax
c0016829:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001682d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016831:	50                   	push   eax
c0016832:	e8 5b 67 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0016837:	58                   	pop    eax
c0016838:	5a                   	pop    edx
c0016839:	6a 01                	push   0x1
c001683b:	56                   	push   esi
c001683c:	e8 b5 67 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c0016841:	83 c4 10             	add    esp,0x10
c0016844:	85 c0                	test   eax,eax
c0016846:	0f 85 47 01 00 00    	jne    c0016993 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001684c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016854:	83 ec 0c             	sub    esp,0xc
c0016857:	6a 34                	push   0x34
c0016859:	e8 65 31 ff ff       	call   c00099c3 <malloc>
c001685e:	89 c3                	mov    ebx,eax
c0016860:	58                   	pop    eax
c0016861:	8b 06                	mov    eax,DWORD PTR [esi]
c0016863:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0016867:	57                   	push   edi
c0016868:	53                   	push   ebx
c0016869:	6a 00                	push   0x0
c001686b:	6a 34                	push   0x34
c001686d:	56                   	push   esi
c001686e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016871:	83 c4 20             	add    esp,0x20
c0016874:	85 c0                	test   eax,eax
c0016876:	0f 85 17 01 00 00    	jne    c0016993 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001687c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016882:	0f 85 0b 01 00 00    	jne    c0016993 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016888:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001688b:	85 c0                	test   eax,eax
c001688d:	0f 84 00 01 00 00    	je     c0016993 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016893:	31 d2                	xor    edx,edx
c0016895:	55                   	push   ebp
c0016896:	52                   	push   edx
c0016897:	50                   	push   eax
c0016898:	56                   	push   esi
c0016899:	e8 16 68 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c001689e:	83 c4 10             	add    esp,0x10
c00168a1:	85 c0                	test   eax,eax
c00168a3:	0f 85 ea 00 00 00    	jne    c0016993 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168a9:	83 ec 0c             	sub    esp,0xc
c00168ac:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00168af:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00168b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00168b7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00168bb:	0f af c2             	imul   eax,edx
c00168be:	50                   	push   eax
c00168bf:	e8 ff 30 ff ff       	call   c00099c3 <malloc>
c00168c4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00168c6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00168ca:	89 3c 24             	mov    DWORD PTR [esp],edi
c00168cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00168d1:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00168d5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00168d9:	0f af c2             	imul   eax,edx
c00168dc:	99                   	cdq    
c00168dd:	52                   	push   edx
c00168de:	50                   	push   eax
c00168df:	56                   	push   esi
c00168e0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00168e3:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00168e6:	83 c4 20             	add    esp,0x20
c00168e9:	85 c0                	test   eax,eax
c00168eb:	0f 84 a2 00 00 00    	je     c0016993 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168f1:	31 d2                	xor    edx,edx
c00168f3:	51                   	push   ecx
c00168f4:	52                   	push   edx
c00168f5:	50                   	push   eax
c00168f6:	56                   	push   esi
c00168f7:	e8 b8 67 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c00168fc:	83 c4 10             	add    esp,0x10
c00168ff:	85 c0                	test   eax,eax
c0016901:	0f 85 8c 00 00 00    	jne    c0016993 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016907:	83 ec 0c             	sub    esp,0xc
c001690a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001690e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016912:	31 ed                	xor    ebp,ebp
c0016914:	0f af c2             	imul   eax,edx
c0016917:	50                   	push   eax
c0016918:	e8 a6 30 ff ff       	call   c00099c3 <malloc>
c001691d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001691f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016923:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001692a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001692e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016932:	0f af c2             	imul   eax,edx
c0016935:	99                   	cdq    
c0016936:	52                   	push   edx
c0016937:	50                   	push   eax
c0016938:	56                   	push   esi
c0016939:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001693c:	83 c4 20             	add    esp,0x20
c001693f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016947:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001694b:	0f 86 80 00 00 00    	jbe    c00169d1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016951:	0f b7 fd             	movzx  edi,bp
c0016954:	c1 e7 05             	shl    edi,0x5
c0016957:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001695b:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001695e:	75 6b                	jne    c00169cb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016960:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016963:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016967:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001696a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001696e:	52                   	push   edx
c001696f:	31 d2                	xor    edx,edx
c0016971:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016974:	52                   	push   edx
c0016975:	50                   	push   eax
c0016976:	56                   	push   esi
c0016977:	e8 38 67 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c001697c:	83 c4 10             	add    esp,0x10
c001697f:	85 c0                	test   eax,eax
c0016981:	74 17                	je     c001699a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016983:	83 ec 0c             	sub    esp,0xc
c0016986:	68 8c 46 02 c0       	push   0xc002468c
c001698b:	e8 98 60 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0016990:	83 c4 10             	add    esp,0x10
c0016993:	31 c0                	xor    eax,eax
c0016995:	e9 87 00 00 00       	jmp    c0016a21 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001699a:	83 ec 0c             	sub    esp,0xc
c001699d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00169a0:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00169a3:	50                   	push   eax
c00169a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00169a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169ac:	56                   	push   esi
c00169ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00169b1:	e8 b3 fb ff ff       	call   c0016569 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00169b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00169ba:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00169be:	83 c4 20             	add    esp,0x20
c00169c1:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00169c5:	73 04                	jae    c00169cb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00169c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00169cb:	45                   	inc    ebp
c00169cc:	e9 76 ff ff ff       	jmp    c0016947 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00169d1:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00169d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00169d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00169dd:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c00169e3:	83 ec 0c             	sub    esp,0xc
c00169e6:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c00169ec:	25 00 f0 ff ff       	and    eax,0xfffff000
c00169f1:	05 00 10 00 00       	add    eax,0x1000
c00169f6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00169f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169fd:	e8 d1 2f ff ff       	call   c00099d3 <free>
c0016a02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a05:	e8 c9 2f ff ff       	call   c00099d3 <free>
c0016a0a:	58                   	pop    eax
c0016a0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a0f:	e8 bf 2f ff ff       	call   c00099d3 <free>
c0016a14:	89 34 24             	mov    DWORD PTR [esp],esi
c0016a17:	e8 38 66 ff ff       	call   c000d054 <File::close()>
c0016a1c:	83 c4 10             	add    esp,0x10
c0016a1f:	b0 01                	mov    al,0x1
c0016a21:	83 c4 3c             	add    esp,0x3c
c0016a24:	5b                   	pop    ebx
c0016a25:	5e                   	pop    esi
c0016a26:	5f                   	pop    edi
c0016a27:	5d                   	pop    ebp
c0016a28:	c3                   	ret    

c0016a29 <Thr::runtimeReferenceHelper()>:
c0016a29:	83 ec 18             	sub    esp,0x18
c0016a2c:	68 94 46 02 c0       	push   0xc0024694
c0016a31:	e8 f2 5f ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0016a36:	fa                   	cli    
c0016a37:	83 c4 10             	add    esp,0x10
c0016a3a:	eb fe                	jmp    c0016a3a <Thr::runtimeReferenceHelper()+0x11>

c0016a3c <Thr::getAddressOfKernelSymbol(char const*)>:
c0016a3c:	57                   	push   edi
c0016a3d:	56                   	push   esi
c0016a3e:	53                   	push   ebx
c0016a3f:	31 db                	xor    ebx,ebx
c0016a41:	39 1d 00 79 02 c0    	cmp    DWORD PTR ds:0xc0027900,ebx
c0016a47:	7e 3c                	jle    c0016a85 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016a49:	8b 34 9d 80 78 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8780]
c0016a50:	31 ff                	xor    edi,edi
c0016a52:	39 3c 9d 80 77 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8880],edi
c0016a59:	7e 27                	jle    c0016a82 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016a5b:	50                   	push   eax
c0016a5c:	50                   	push   eax
c0016a5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a61:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a63:	03 04 9d 00 78 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8800]
c0016a6a:	50                   	push   eax
c0016a6b:	e8 5c 9d fe ff       	call   c00007cc <strcmp>
c0016a70:	83 c4 10             	add    esp,0x10
c0016a73:	85 c0                	test   eax,eax
c0016a75:	75 05                	jne    c0016a7c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016a77:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016a7a:	eb 0b                	jmp    c0016a87 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016a7c:	83 c6 10             	add    esi,0x10
c0016a7f:	47                   	inc    edi
c0016a80:	eb d0                	jmp    c0016a52 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016a82:	43                   	inc    ebx
c0016a83:	eb bc                	jmp    c0016a41 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016a85:	31 c0                	xor    eax,eax
c0016a87:	5b                   	pop    ebx
c0016a88:	5e                   	pop    esi
c0016a89:	5f                   	pop    edi
c0016a8a:	c3                   	ret    

c0016a8b <Thr::loadKernelSymbolTable(char const*)>:
c0016a8b:	55                   	push   ebp
c0016a8c:	57                   	push   edi
c0016a8d:	56                   	push   esi
c0016a8e:	53                   	push   ebx
c0016a8f:	83 ec 68             	sub    esp,0x68
c0016a92:	8b 35 50 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027950
c0016a98:	68 14 01 00 00       	push   0x114
c0016a9d:	e8 21 2f ff ff       	call   c00099c3 <malloc>
c0016aa2:	83 c4 0c             	add    esp,0xc
c0016aa5:	89 c3                	mov    ebx,eax
c0016aa7:	56                   	push   esi
c0016aa8:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016aac:	50                   	push   eax
c0016aad:	e8 e0 64 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0016ab2:	5e                   	pop    esi
c0016ab3:	5f                   	pop    edi
c0016ab4:	6a 01                	push   0x1
c0016ab6:	53                   	push   ebx
c0016ab7:	e8 3a 65 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c0016abc:	83 c4 10             	add    esp,0x10
c0016abf:	85 c0                	test   eax,eax
c0016ac1:	74 0a                	je     c0016acd <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016ac3:	83 ec 0c             	sub    esp,0xc
c0016ac6:	68 b6 46 02 c0       	push   0xc00246b6
c0016acb:	eb 34                	jmp    c0016b01 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016acd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016ad5:	83 ec 0c             	sub    esp,0xc
c0016ad8:	6a 34                	push   0x34
c0016ada:	e8 e4 2e ff ff       	call   c00099c3 <malloc>
c0016adf:	59                   	pop    ecx
c0016ae0:	89 c7                	mov    edi,eax
c0016ae2:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016ae6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ae8:	56                   	push   esi
c0016ae9:	57                   	push   edi
c0016aea:	6a 00                	push   0x0
c0016aec:	6a 34                	push   0x34
c0016aee:	53                   	push   ebx
c0016aef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016af2:	83 c4 20             	add    esp,0x20
c0016af5:	85 c0                	test   eax,eax
c0016af7:	74 17                	je     c0016b10 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016af9:	83 ec 0c             	sub    esp,0xc
c0016afc:	68 cd 46 02 c0       	push   0xc00246cd
c0016b01:	e8 03 d8 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0016b06:	83 c4 10             	add    esp,0x10
c0016b09:	31 c0                	xor    eax,eax
c0016b0b:	e9 31 02 00 00       	jmp    c0016d41 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016b10:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016b16:	75 e1                	jne    c0016af9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b18:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016b1b:	85 c0                	test   eax,eax
c0016b1d:	74 da                	je     c0016af9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b1f:	52                   	push   edx
c0016b20:	31 d2                	xor    edx,edx
c0016b22:	52                   	push   edx
c0016b23:	50                   	push   eax
c0016b24:	53                   	push   ebx
c0016b25:	e8 8a 65 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0016b2a:	83 c4 10             	add    esp,0x10
c0016b2d:	85 c0                	test   eax,eax
c0016b2f:	75 c8                	jne    c0016af9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b31:	83 ec 0c             	sub    esp,0xc
c0016b34:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016b38:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016b3c:	31 ed                	xor    ebp,ebp
c0016b3e:	0f af c2             	imul   eax,edx
c0016b41:	50                   	push   eax
c0016b42:	e8 7c 2e ff ff       	call   c00099c3 <malloc>
c0016b47:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016b49:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b4d:	89 34 24             	mov    DWORD PTR [esp],esi
c0016b50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b54:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016b58:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016b5c:	0f af c2             	imul   eax,edx
c0016b5f:	99                   	cdq    
c0016b60:	52                   	push   edx
c0016b61:	50                   	push   eax
c0016b62:	53                   	push   ebx
c0016b63:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016b66:	83 c4 20             	add    esp,0x20
c0016b69:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b71:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b79:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016b81:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016b89:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016b8d:	0f 86 aa 00 00 00    	jbe    c0016c3d <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0016b93:	0f b7 f5             	movzx  esi,bp
c0016b96:	6b f6 28             	imul   esi,esi,0x28
c0016b99:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016b9d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016ba0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ba4:	50                   	push   eax
c0016ba5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ba9:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016bad:	8b 16                	mov    edx,DWORD PTR [esi]
c0016baf:	6b c0 28             	imul   eax,eax,0x28
c0016bb2:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016bb6:	89 d0                	mov    eax,edx
c0016bb8:	31 d2                	xor    edx,edx
c0016bba:	52                   	push   edx
c0016bbb:	50                   	push   eax
c0016bbc:	53                   	push   ebx
c0016bbd:	e8 f2 64 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0016bc2:	83 c4 0c             	add    esp,0xc
c0016bc5:	6a 20                	push   0x20
c0016bc7:	6a 00                	push   0x0
c0016bc9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016bcd:	52                   	push   edx
c0016bce:	e8 b1 9a fe ff       	call   c0000684 <memset>
c0016bd3:	58                   	pop    eax
c0016bd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bd6:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016bda:	51                   	push   ecx
c0016bdb:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016bdf:	52                   	push   edx
c0016be0:	6a 00                	push   0x0
c0016be2:	6a 1f                	push   0x1f
c0016be4:	53                   	push   ebx
c0016be5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016be8:	83 c4 18             	add    esp,0x18
c0016beb:	68 e4 46 02 c0       	push   0xc00246e4
c0016bf0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016bf4:	52                   	push   edx
c0016bf5:	e8 d2 9b fe ff       	call   c00007cc <strcmp>
c0016bfa:	83 c4 10             	add    esp,0x10
c0016bfd:	85 c0                	test   eax,eax
c0016bff:	75 0f                	jne    c0016c10 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0016c01:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016c04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c10:	50                   	push   eax
c0016c11:	50                   	push   eax
c0016c12:	68 ec 46 02 c0       	push   0xc00246ec
c0016c17:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016c1b:	50                   	push   eax
c0016c1c:	e8 ab 9b fe ff       	call   c00007cc <strcmp>
c0016c21:	83 c4 10             	add    esp,0x10
c0016c24:	85 c0                	test   eax,eax
c0016c26:	75 0f                	jne    c0016c37 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016c28:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016c2b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c37:	45                   	inc    ebp
c0016c38:	e9 4c ff ff ff       	jmp    c0016b89 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0016c3d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016c42:	75 10                	jne    c0016c54 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0016c44:	83 ec 0c             	sub    esp,0xc
c0016c47:	68 f4 46 02 c0       	push   0xc00246f4
c0016c4c:	e8 b8 d6 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0016c51:	83 c4 10             	add    esp,0x10
c0016c54:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0016c59:	75 10                	jne    c0016c6b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0016c5b:	83 ec 0c             	sub    esp,0xc
c0016c5e:	68 f4 46 02 c0       	push   0xc00246f4
c0016c63:	e8 a1 d6 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0016c68:	83 c4 10             	add    esp,0x10
c0016c6b:	31 d2                	xor    edx,edx
c0016c6d:	50                   	push   eax
c0016c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c72:	52                   	push   edx
c0016c73:	50                   	push   eax
c0016c74:	53                   	push   ebx
c0016c75:	e8 3a 64 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0016c7a:	5a                   	pop    edx
c0016c7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016c7f:	e8 3f 2d ff ff       	call   c00099c3 <malloc>
c0016c84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c88:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c8c:	31 c9                	xor    ecx,ecx
c0016c8e:	5e                   	pop    esi
c0016c8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c91:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016c95:	55                   	push   ebp
c0016c96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c9a:	51                   	push   ecx
c0016c9b:	52                   	push   edx
c0016c9c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016ca0:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0016ca4:	53                   	push   ebx
c0016ca5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ca8:	83 c4 14             	add    esp,0x14
c0016cab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016caf:	e8 0f 2d ff ff       	call   c00099c3 <malloc>
c0016cb4:	89 c6                	mov    esi,eax
c0016cb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016cb8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016cbb:	56                   	push   esi
c0016cbc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016cc0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016cc4:	51                   	push   ecx
c0016cc5:	52                   	push   edx
c0016cc6:	53                   	push   ebx
c0016cc7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016cca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016cce:	8b 15 00 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027900
c0016cd4:	83 c4 1c             	add    esp,0x1c
c0016cd7:	c1 e8 04             	shr    eax,0x4
c0016cda:	89 04 95 80 77 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8880],eax
c0016ce1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ce5:	31 d2                	xor    edx,edx
c0016ce7:	52                   	push   edx
c0016ce8:	50                   	push   eax
c0016ce9:	53                   	push   ebx
c0016cea:	e8 c5 63 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0016cef:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016cf1:	31 d2                	xor    edx,edx
c0016cf3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016cf6:	56                   	push   esi
c0016cf7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016cfb:	52                   	push   edx
c0016cfc:	50                   	push   eax
c0016cfd:	53                   	push   ebx
c0016cfe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d01:	83 c4 14             	add    esp,0x14
c0016d04:	53                   	push   ebx
c0016d05:	e8 4a 63 ff ff       	call   c000d054 <File::close()>
c0016d0a:	5d                   	pop    ebp
c0016d0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d0f:	e8 bf 2c ff ff       	call   c00099d3 <free>
c0016d14:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016d17:	e8 b7 2c ff ff       	call   c00099d3 <free>
c0016d1c:	a1 00 79 02 c0       	mov    eax,ds:0xc0027900
c0016d21:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016d25:	8d 50 01             	lea    edx,[eax+0x1]
c0016d28:	89 0c 85 80 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8780],ecx
c0016d2f:	89 34 85 00 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8800],esi
c0016d36:	89 15 00 79 02 c0    	mov    DWORD PTR ds:0xc0027900,edx
c0016d3c:	83 c4 10             	add    esp,0x10
c0016d3f:	b0 01                	mov    al,0x1
c0016d41:	83 c4 5c             	add    esp,0x5c
c0016d44:	5b                   	pop    ebx
c0016d45:	5e                   	pop    esi
c0016d46:	5f                   	pop    edi
c0016d47:	5d                   	pop    ebp
c0016d48:	c3                   	ret    

c0016d49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016d49:	55                   	push   ebp
c0016d4a:	57                   	push   edi
c0016d4b:	56                   	push   esi
c0016d4c:	53                   	push   ebx
c0016d4d:	81 ec 68 03 00 00    	sub    esp,0x368
c0016d53:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016d5a:	8b 1d 50 79 02 c0    	mov    ebx,DWORD PTR ds:0xc0027950
c0016d60:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016d64:	68 14 01 00 00       	push   0x114
c0016d69:	e8 55 2c ff ff       	call   c00099c3 <malloc>
c0016d6e:	83 c4 0c             	add    esp,0xc
c0016d71:	89 c5                	mov    ebp,eax
c0016d73:	53                   	push   ebx
c0016d74:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016d7b:	50                   	push   eax
c0016d7c:	e8 11 62 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0016d81:	5e                   	pop    esi
c0016d82:	5f                   	pop    edi
c0016d83:	6a 01                	push   0x1
c0016d85:	55                   	push   ebp
c0016d86:	e8 6b 62 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c0016d8b:	83 c4 10             	add    esp,0x10
c0016d8e:	85 c0                	test   eax,eax
c0016d90:	0f 85 a7 06 00 00    	jne    c001743d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016d96:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016d9e:	83 ec 0c             	sub    esp,0xc
c0016da1:	6a 34                	push   0x34
c0016da3:	e8 1b 2c ff ff       	call   c00099c3 <malloc>
c0016da8:	5b                   	pop    ebx
c0016da9:	89 c7                	mov    edi,eax
c0016dab:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016daf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016db2:	53                   	push   ebx
c0016db3:	57                   	push   edi
c0016db4:	6a 00                	push   0x0
c0016db6:	6a 34                	push   0x34
c0016db8:	55                   	push   ebp
c0016db9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016dbc:	83 c4 20             	add    esp,0x20
c0016dbf:	85 c0                	test   eax,eax
c0016dc1:	0f 85 76 06 00 00    	jne    c001743d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016dc7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016dcd:	0f 85 6a 06 00 00    	jne    c001743d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016dd3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016dd6:	85 c0                	test   eax,eax
c0016dd8:	0f 84 5f 06 00 00    	je     c001743d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016dde:	31 d2                	xor    edx,edx
c0016de0:	51                   	push   ecx
c0016de1:	52                   	push   edx
c0016de2:	50                   	push   eax
c0016de3:	55                   	push   ebp
c0016de4:	e8 cb 62 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0016de9:	83 c4 10             	add    esp,0x10
c0016dec:	85 c0                	test   eax,eax
c0016dee:	0f 85 49 06 00 00    	jne    c001743d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016df4:	83 ec 0c             	sub    esp,0xc
c0016df7:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016dfa:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016dfe:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016e02:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016e06:	0f af c2             	imul   eax,edx
c0016e09:	50                   	push   eax
c0016e0a:	e8 b4 2b ff ff       	call   c00099c3 <malloc>
c0016e0f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e12:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e1d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016e21:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016e25:	0f af c2             	imul   eax,edx
c0016e28:	99                   	cdq    
c0016e29:	52                   	push   edx
c0016e2a:	50                   	push   eax
c0016e2b:	55                   	push   ebp
c0016e2c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e2f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016e32:	83 c4 20             	add    esp,0x20
c0016e35:	85 c0                	test   eax,eax
c0016e37:	0f 84 00 06 00 00    	je     c001743d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e3d:	52                   	push   edx
c0016e3e:	31 d2                	xor    edx,edx
c0016e40:	52                   	push   edx
c0016e41:	50                   	push   eax
c0016e42:	55                   	push   ebp
c0016e43:	e8 6c 62 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0016e48:	83 c4 10             	add    esp,0x10
c0016e4b:	85 c0                	test   eax,eax
c0016e4d:	0f 85 ea 05 00 00    	jne    c001743d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e53:	83 ec 0c             	sub    esp,0xc
c0016e56:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016e5a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016e5e:	31 f6                	xor    esi,esi
c0016e60:	0f af c2             	imul   eax,edx
c0016e63:	50                   	push   eax
c0016e64:	e8 5a 2b ff ff       	call   c00099c3 <malloc>
c0016e69:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e6c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016e70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e73:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e77:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016e7b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016e7f:	0f af c2             	imul   eax,edx
c0016e82:	99                   	cdq    
c0016e83:	52                   	push   edx
c0016e84:	50                   	push   eax
c0016e85:	55                   	push   ebp
c0016e86:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e89:	83 c4 20             	add    esp,0x20
c0016e8c:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016e90:	0f 86 8a 00 00 00    	jbe    c0016f20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016e96:	0f b7 de             	movzx  ebx,si
c0016e99:	c1 e3 05             	shl    ebx,0x5
c0016e9c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0016ea0:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016ea3:	75 75                	jne    c0016f1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016ea5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ea8:	31 d2                	xor    edx,edx
c0016eaa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016eae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016eb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016eb5:	50                   	push   eax
c0016eb6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016eb9:	52                   	push   edx
c0016eba:	50                   	push   eax
c0016ebb:	55                   	push   ebp
c0016ebc:	e8 f3 61 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0016ec1:	83 c4 10             	add    esp,0x10
c0016ec4:	85 c0                	test   eax,eax
c0016ec6:	0f 85 71 05 00 00    	jne    c001743d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016ecc:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016ed3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016ed6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016eda:	31 d2                	xor    edx,edx
c0016edc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016ee0:	83 ec 0c             	sub    esp,0xc
c0016ee3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ee7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016eee:	50                   	push   eax
c0016eef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ef3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ef7:	52                   	push   edx
c0016ef8:	50                   	push   eax
c0016ef9:	55                   	push   ebp
c0016efa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016efd:	83 c4 1c             	add    esp,0x1c
c0016f00:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016f03:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016f06:	50                   	push   eax
c0016f07:	6a 00                	push   0x0
c0016f09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f0d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0016f11:	50                   	push   eax
c0016f12:	e8 6d 97 fe ff       	call   c0000684 <memset>
c0016f17:	83 c4 10             	add    esp,0x10
c0016f1a:	46                   	inc    esi
c0016f1b:	e9 6c ff ff ff       	jmp    c0016e8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016f20:	53                   	push   ebx
c0016f21:	31 db                	xor    ebx,ebx
c0016f23:	68 00 01 00 00       	push   0x100
c0016f28:	6a 00                	push   0x0
c0016f2a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016f2e:	50                   	push   eax
c0016f2f:	e8 50 97 fe ff       	call   c0000684 <memset>
c0016f34:	83 c4 0c             	add    esp,0xc
c0016f37:	68 00 01 00 00       	push   0x100
c0016f3c:	6a 00                	push   0x0
c0016f3e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016f45:	50                   	push   eax
c0016f46:	e8 39 97 fe ff       	call   c0000684 <memset>
c0016f4b:	83 c4 10             	add    esp,0x10
c0016f4e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016f56:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016f5e:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0016f66:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016f6e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016f76:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0016f7a:	0f 86 30 01 00 00    	jbe    c00170b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0016f80:	0f b7 f3             	movzx  esi,bx
c0016f83:	6b f6 28             	imul   esi,esi,0x28
c0016f86:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016f8a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016f8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f91:	52                   	push   edx
c0016f92:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f96:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0016f9a:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f9c:	6b d2 28             	imul   edx,edx,0x28
c0016f9f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0016fa3:	31 d2                	xor    edx,edx
c0016fa5:	52                   	push   edx
c0016fa6:	50                   	push   eax
c0016fa7:	55                   	push   ebp
c0016fa8:	e8 07 61 ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0016fad:	83 c4 0c             	add    esp,0xc
c0016fb0:	6a 20                	push   0x20
c0016fb2:	6a 00                	push   0x0
c0016fb4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016fbb:	51                   	push   ecx
c0016fbc:	e8 c3 96 fe ff       	call   c0000684 <memset>
c0016fc1:	59                   	pop    ecx
c0016fc2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016fc5:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016fc9:	52                   	push   edx
c0016fca:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0016fd1:	51                   	push   ecx
c0016fd2:	6a 00                	push   0x0
c0016fd4:	6a 1f                	push   0x1f
c0016fd6:	55                   	push   ebp
c0016fd7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fda:	83 c4 1c             	add    esp,0x1c
c0016fdd:	6a 09                	push   0x9
c0016fdf:	68 0e 47 02 c0       	push   0xc002470e
c0016fe4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016feb:	51                   	push   ecx
c0016fec:	e8 8f 95 fe ff       	call   c0000580 <memcmp>
c0016ff1:	83 c4 10             	add    esp,0x10
c0016ff4:	85 c0                	test   eax,eax
c0016ff6:	75 21                	jne    c0017019 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0016ff8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ffc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017000:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017004:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017008:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001700b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017012:	89 d0                	mov    eax,edx
c0017014:	40                   	inc    eax
c0017015:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017019:	50                   	push   eax
c001701a:	6a 09                	push   0x9
c001701c:	68 18 47 02 c0       	push   0xc0024718
c0017021:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017028:	50                   	push   eax
c0017029:	e8 52 95 fe ff       	call   c0000580 <memcmp>
c001702e:	83 c4 10             	add    esp,0x10
c0017031:	85 c0                	test   eax,eax
c0017033:	75 21                	jne    c0017056 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017035:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017039:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001703d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017041:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017045:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017048:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001704f:	89 d0                	mov    eax,edx
c0017051:	40                   	inc    eax
c0017052:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017056:	50                   	push   eax
c0017057:	50                   	push   eax
c0017058:	68 e4 46 02 c0       	push   0xc00246e4
c001705d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017064:	50                   	push   eax
c0017065:	e8 62 97 fe ff       	call   c00007cc <strcmp>
c001706a:	83 c4 10             	add    esp,0x10
c001706d:	85 c0                	test   eax,eax
c001706f:	75 0f                	jne    c0017080 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017071:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017074:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017078:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001707c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017080:	50                   	push   eax
c0017081:	50                   	push   eax
c0017082:	68 ec 46 02 c0       	push   0xc00246ec
c0017087:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001708e:	50                   	push   eax
c001708f:	e8 38 97 fe ff       	call   c00007cc <strcmp>
c0017094:	83 c4 10             	add    esp,0x10
c0017097:	85 c0                	test   eax,eax
c0017099:	75 0f                	jne    c00170aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001709b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001709e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00170a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170a6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00170aa:	43                   	inc    ebx
c00170ab:	e9 c6 fe ff ff       	jmp    c0016f76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00170b0:	31 d2                	xor    edx,edx
c00170b2:	50                   	push   eax
c00170b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170b7:	52                   	push   edx
c00170b8:	50                   	push   eax
c00170b9:	55                   	push   ebp
c00170ba:	e8 f5 5f ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c00170bf:	58                   	pop    eax
c00170c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00170c4:	e8 fa 28 ff ff       	call   c00099c3 <malloc>
c00170c9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00170cc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00170d0:	31 d2                	xor    edx,edx
c00170d2:	58                   	pop    eax
c00170d3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00170d7:	53                   	push   ebx
c00170d8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00170dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170e0:	52                   	push   edx
c00170e1:	50                   	push   eax
c00170e2:	55                   	push   ebp
c00170e3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170e6:	83 c4 14             	add    esp,0x14
c00170e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170ed:	e8 d1 28 ff ff       	call   c00099c3 <malloc>
c00170f2:	31 d2                	xor    edx,edx
c00170f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00170f8:	83 c4 0c             	add    esp,0xc
c00170fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170ff:	52                   	push   edx
c0017100:	50                   	push   eax
c0017101:	55                   	push   ebp
c0017102:	e8 ad 5f ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c0017107:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001710a:	31 d2                	xor    edx,edx
c001710c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001710f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017113:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017117:	52                   	push   edx
c0017118:	50                   	push   eax
c0017119:	55                   	push   ebp
c001711a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001711d:	83 c4 20             	add    esp,0x20
c0017120:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017128:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001712c:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017130:	0f 84 0b 03 00 00    	je     c0017441 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0017136:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001713d:	31 d2                	xor    edx,edx
c001713f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017143:	c1 e8 03             	shr    eax,0x3
c0017146:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001714a:	51                   	push   ecx
c001714b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001714f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017153:	52                   	push   edx
c0017154:	50                   	push   eax
c0017155:	55                   	push   ebp
c0017156:	e8 59 5f ff ff       	call   c000d0b4 <File::seek(unsigned long long)>
c001715b:	5b                   	pop    ebx
c001715c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017160:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017167:	e8 57 28 ff ff       	call   c00099c3 <malloc>
c001716c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001716f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017173:	31 d2                	xor    edx,edx
c0017175:	5e                   	pop    esi
c0017176:	8d 44 24 58          	lea    eax,[esp+0x58]
c001717a:	50                   	push   eax
c001717b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001717f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017183:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001718a:	52                   	push   edx
c001718b:	50                   	push   eax
c001718c:	55                   	push   ebp
c001718d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017190:	83 c4 20             	add    esp,0x20
c0017193:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001719b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001719f:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00171a3:	0f 8d 7c 02 00 00    	jge    c0017425 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00171a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00171ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171b1:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00171b6:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00171b9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00171bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171c1:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00171c5:	89 d8                	mov    eax,ebx
c00171c7:	c1 e8 08             	shr    eax,0x8
c00171ca:	89 c6                	mov    esi,eax
c00171cc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171d0:	c1 e6 04             	shl    esi,0x4
c00171d3:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00171d7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00171da:	85 d2                	test   edx,edx
c00171dc:	0f 85 bf 00 00 00    	jne    c00172a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00171e2:	83 ec 0c             	sub    esp,0xc
c00171e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171e9:	03 06                	add    eax,DWORD PTR [esi]
c00171eb:	50                   	push   eax
c00171ec:	e8 4b f8 ff ff       	call   c0016a3c <Thr::getAddressOfKernelSymbol(char const*)>
c00171f1:	83 c4 10             	add    esp,0x10
c00171f4:	89 c2                	mov    edx,eax
c00171f6:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c00171fb:	85 c0                	test   eax,eax
c00171fd:	0f 85 9e 00 00 00    	jne    c00172a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017203:	83 ec 0c             	sub    esp,0xc
c0017206:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001720a:	03 06                	add    eax,DWORD PTR [esi]
c001720c:	50                   	push   eax
c001720d:	e8 fe 16 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c0017212:	83 c4 10             	add    esp,0x10
c0017215:	89 c2                	mov    edx,eax
c0017217:	85 c0                	test   eax,eax
c0017219:	0f 85 82 00 00 00    	jne    c00172a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001721f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017223:	50                   	push   eax
c0017224:	50                   	push   eax
c0017225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017229:	03 06                	add    eax,DWORD PTR [esi]
c001722b:	50                   	push   eax
c001722c:	68 22 47 02 c0       	push   0xc0024722
c0017231:	e8 f2 57 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0017236:	58                   	pop    eax
c0017237:	5a                   	pop    edx
c0017238:	68 3c 47 02 c0       	push   0xc002473c
c001723d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017244:	50                   	push   eax
c0017245:	e8 f6 94 fe ff       	call   c0000740 <strcpy>
c001724a:	59                   	pop    ecx
c001724b:	58                   	pop    eax
c001724c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017250:	03 06                	add    eax,DWORD PTR [esi]
c0017252:	50                   	push   eax
c0017253:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001725a:	50                   	push   eax
c001725b:	e8 20 96 fe ff       	call   c0000880 <strcat>
c0017260:	58                   	pop    eax
c0017261:	5a                   	pop    edx
c0017262:	68 d2 47 02 c0       	push   0xc00247d2
c0017267:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001726e:	50                   	push   eax
c001726f:	e8 0c 96 fe ff       	call   c0000880 <strcat>
c0017274:	83 c4 10             	add    esp,0x10
c0017277:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001727c:	0f 84 5d 01 00 00    	je     c00173df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017282:	83 ec 0c             	sub    esp,0xc
c0017285:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001728c:	50                   	push   eax
c001728d:	e8 77 d0 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0017292:	83 c4 10             	add    esp,0x10
c0017295:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017299:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001729d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00172a1:	80 fb 01             	cmp    bl,0x1
c00172a4:	0f 85 88 00 00 00    	jne    c0017332 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00172aa:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00172b1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00172b5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00172b9:	01 ce                	add    esi,ecx
c00172bb:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00172c1:	0f 94 c0             	sete   al
c00172c4:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00172ca:	0f 94 c3             	sete   bl
c00172cd:	09 c3                	or     ebx,eax
c00172cf:	8b 06                	mov    eax,DWORD PTR [esi]
c00172d1:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00172d6:	74 41                	je     c0017319 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00172d8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00172db:	84 db                	test   bl,bl
c00172dd:	75 15                	jne    c00172f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00172df:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172e3:	66 83 f8 0c          	cmp    ax,0xc
c00172e7:	76 05                	jbe    c00172ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00172e9:	b8 0c 00 00 00       	mov    eax,0xc
c00172ee:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00172f2:	76 37                	jbe    c001732b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00172f4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00172f8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00172fd:	0f 84 dc 00 00 00    	je     c00173df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017303:	83 ec 0c             	sub    esp,0xc
c0017306:	68 53 47 02 c0       	push   0xc0024753
c001730b:	e8 f9 cf ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0017310:	83 c4 10             	add    esp,0x10
c0017313:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0017317:	eb 12                	jmp    c001732b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017319:	01 c1                	add    ecx,eax
c001731b:	84 db                	test   bl,bl
c001731d:	75 0c                	jne    c001732b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001731f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017323:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017327:	77 02                	ja     c001732b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017329:	01 d1                	add    ecx,edx
c001732b:	89 0e                	mov    DWORD PTR [esi],ecx
c001732d:	e9 ea 00 00 00       	jmp    c001741c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017332:	80 fb 02             	cmp    bl,0x2
c0017335:	75 7c                	jne    c00173b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0017337:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001733e:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0017342:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0017346:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001734c:	74 20                	je     c001736e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001734e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017354:	74 18                	je     c001736e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017356:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001735a:	b9 0a 00 00 00       	mov    ecx,0xa
c001735f:	66 83 f8 0e          	cmp    ax,0xe
c0017363:	77 03                	ja     c0017368 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0017365:	8d 48 fc             	lea    ecx,[eax-0x4]
c0017368:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001736c:	76 1f                	jbe    c001738d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001736e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0017372:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017377:	74 66                	je     c00173df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017379:	83 ec 0c             	sub    esp,0xc
c001737c:	68 6f 47 02 c0       	push   0xc002476f
c0017381:	e8 83 cf ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0017386:	83 c4 10             	add    esp,0x10
c0017389:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001738d:	8b 06                	mov    eax,DWORD PTR [esi]
c001738f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017394:	74 13                	je     c00173a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0017396:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001739a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00173a1:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00173a5:	01 c8                	add    eax,ecx
c00173a7:	eb 04                	jmp    c00173ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00173a9:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00173ad:	01 c2                	add    edx,eax
c00173af:	89 16                	mov    DWORD PTR [esi],edx
c00173b1:	eb 69                	jmp    c001741c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00173b3:	0f b6 db             	movzx  ebx,bl
c00173b6:	50                   	push   eax
c00173b7:	50                   	push   eax
c00173b8:	53                   	push   ebx
c00173b9:	68 8b 47 02 c0       	push   0xc002478b
c00173be:	e8 65 56 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00173c3:	83 c4 10             	add    esp,0x10
c00173c6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00173cb:	74 12                	je     c00173df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00173cd:	83 ec 0c             	sub    esp,0xc
c00173d0:	68 96 47 02 c0       	push   0xc0024796
c00173d5:	e8 2f cf ff ff       	call   c0014309 <Krnl::panic(char const*)>
c00173da:	83 c4 10             	add    esp,0x10
c00173dd:	eb 3d                	jmp    c001741c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00173df:	83 ec 0c             	sub    esp,0xc
c00173e2:	55                   	push   ebp
c00173e3:	e8 6c 5c ff ff       	call   c000d054 <File::close()>
c00173e8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00173eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00173f1:	59                   	pop    ecx
c00173f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173f6:	e8 d8 25 ff ff       	call   c00099d3 <free>
c00173fb:	5b                   	pop    ebx
c00173fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017400:	e8 ce 25 ff ff       	call   c00099d3 <free>
c0017405:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017408:	e8 c6 25 ff ff       	call   c00099d3 <free>
c001740d:	5e                   	pop    esi
c001740e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017412:	e8 bc 25 ff ff       	call   c00099d3 <free>
c0017417:	83 c4 10             	add    esp,0x10
c001741a:	eb 21                	jmp    c001743d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001741c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017420:	e9 76 fd ff ff       	jmp    c001719b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017425:	83 ec 0c             	sub    esp,0xc
c0017428:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001742c:	e8 a2 25 ff ff       	call   c00099d3 <free>
c0017431:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0017435:	83 c4 10             	add    esp,0x10
c0017438:	e9 eb fc ff ff       	jmp    c0017128 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001743d:	31 c0                	xor    eax,eax
c001743f:	eb 33                	jmp    c0017474 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017441:	83 ec 0c             	sub    esp,0xc
c0017444:	55                   	push   ebp
c0017445:	e8 0a 5c ff ff       	call   c000d054 <File::close()>
c001744a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001744d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017450:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017453:	58                   	pop    eax
c0017454:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017458:	e8 76 25 ff ff       	call   c00099d3 <free>
c001745d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017460:	e8 6e 25 ff ff       	call   c00099d3 <free>
c0017465:	5a                   	pop    edx
c0017466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001746a:	e8 64 25 ff ff       	call   c00099d3 <free>
c001746f:	83 c4 10             	add    esp,0x10
c0017472:	b0 01                	mov    al,0x1
c0017474:	81 c4 5c 03 00 00    	add    esp,0x35c
c001747a:	5b                   	pop    ebx
c001747b:	5e                   	pop    esi
c001747c:	5f                   	pop    edi
c001747d:	5d                   	pop    ebp
c001747e:	c3                   	ret    

c001747f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001747f:	56                   	push   esi
c0017480:	31 d2                	xor    edx,edx
c0017482:	53                   	push   ebx
c0017483:	8b 1d 60 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027160
c0017489:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001748d:	39 d3                	cmp    ebx,edx
c001748f:	7e 1b                	jle    c00174ac <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017491:	8b 04 95 80 73 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8c80]
c0017498:	39 c8                	cmp    eax,ecx
c001749a:	77 0d                	ja     c00174a9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001749c:	8b 34 95 80 71 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8e80]
c00174a3:	01 c6                	add    esi,eax
c00174a5:	39 ce                	cmp    esi,ecx
c00174a7:	77 05                	ja     c00174ae <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00174a9:	42                   	inc    edx
c00174aa:	eb e1                	jmp    c001748d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00174ac:	31 c0                	xor    eax,eax
c00174ae:	5b                   	pop    ebx
c00174af:	5e                   	pop    esi
c00174b0:	c3                   	ret    

c00174b1 <Thr::getDriverNameFromAddress(unsigned long)>:
c00174b1:	53                   	push   ebx
c00174b2:	31 c0                	xor    eax,eax
c00174b4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00174b8:	8b 1d 60 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027160
c00174be:	39 c3                	cmp    ebx,eax
c00174c0:	7e 22                	jle    c00174e4 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00174c2:	8b 14 85 80 73 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8c80]
c00174c9:	39 ca                	cmp    edx,ecx
c00174cb:	77 14                	ja     c00174e1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00174cd:	03 14 85 80 71 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8e80]
c00174d4:	39 ca                	cmp    edx,ecx
c00174d6:	76 09                	jbe    c00174e1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00174d8:	8b 04 85 80 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8a80]
c00174df:	eb 05                	jmp    c00174e6 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00174e1:	40                   	inc    eax
c00174e2:	eb da                	jmp    c00174be <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00174e4:	31 c0                	xor    eax,eax
c00174e6:	5b                   	pop    ebx
c00174e7:	c3                   	ret    

c00174e8 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00174e8:	53                   	push   ebx
c00174e9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00174ed:	53                   	push   ebx
c00174ee:	e8 8c ff ff ff       	call   c001747f <Thr::getDriverBaseFromAddress(unsigned long)>
c00174f3:	5a                   	pop    edx
c00174f4:	31 d2                	xor    edx,edx
c00174f6:	85 c0                	test   eax,eax
c00174f8:	74 04                	je     c00174fe <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00174fa:	89 da                	mov    edx,ebx
c00174fc:	29 c2                	sub    edx,eax
c00174fe:	89 d0                	mov    eax,edx
c0017500:	5b                   	pop    ebx
c0017501:	c3                   	ret    

c0017502 <Thr::loadDLL(char const*, bool)>:
c0017502:	55                   	push   ebp
c0017503:	57                   	push   edi
c0017504:	56                   	push   esi
c0017505:	53                   	push   ebx
c0017506:	81 ec 34 01 00 00    	sub    esp,0x134
c001750c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017513:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001751a:	56                   	push   esi
c001751b:	68 ae 47 02 c0       	push   0xc00247ae
c0017520:	e8 03 55 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0017525:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001752c:	e8 92 24 ff ff       	call   c00099c3 <malloc>
c0017531:	83 c4 0c             	add    esp,0xc
c0017534:	89 c3                	mov    ebx,eax
c0017536:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c001753c:	56                   	push   esi
c001753d:	50                   	push   eax
c001753e:	e8 4f 5a ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0017543:	83 c4 10             	add    esp,0x10
c0017546:	85 db                	test   ebx,ebx
c0017548:	75 3c                	jne    c0017586 <Thr::loadDLL(char const*, bool)+0x84>
c001754a:	89 f8                	mov    eax,edi
c001754c:	84 c0                	test   al,al
c001754e:	0f 84 d2 01 00 00    	je     c0017726 <Thr::loadDLL(char const*, bool)+0x224>
c0017554:	55                   	push   ebp
c0017555:	55                   	push   ebp
c0017556:	68 bf 47 02 c0       	push   0xc00247bf
c001755b:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001755f:	55                   	push   ebp
c0017560:	e8 db 91 fe ff       	call   c0000740 <strcpy>
c0017565:	58                   	pop    eax
c0017566:	5a                   	pop    edx
c0017567:	56                   	push   esi
c0017568:	55                   	push   ebp
c0017569:	e8 12 93 fe ff       	call   c0000880 <strcat>
c001756e:	59                   	pop    ecx
c001756f:	58                   	pop    eax
c0017570:	68 d2 47 02 c0       	push   0xc00247d2
c0017575:	55                   	push   ebp
c0017576:	e8 05 93 fe ff       	call   c0000880 <strcat>
c001757b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001757e:	e8 86 cd ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0017583:	83 c4 10             	add    esp,0x10
c0017586:	51                   	push   ecx
c0017587:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001758b:	50                   	push   eax
c001758c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017590:	50                   	push   eax
c0017591:	53                   	push   ebx
c0017592:	e8 0b 5d ff ff       	call   c000d2a2 <File::stat(unsigned long long*, bool*)>
c0017597:	83 c4 10             	add    esp,0x10
c001759a:	85 db                	test   ebx,ebx
c001759c:	74 0c                	je     c00175aa <Thr::loadDLL(char const*, bool)+0xa8>
c001759e:	83 ec 0c             	sub    esp,0xc
c00175a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00175a3:	53                   	push   ebx
c00175a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00175a7:	83 c4 10             	add    esp,0x10
c00175aa:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00175af:	75 0a                	jne    c00175bb <Thr::loadDLL(char const*, bool)+0xb9>
c00175b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00175b5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00175b9:	75 3c                	jne    c00175f7 <Thr::loadDLL(char const*, bool)+0xf5>
c00175bb:	89 f8                	mov    eax,edi
c00175bd:	84 c0                	test   al,al
c00175bf:	0f 84 49 01 00 00    	je     c001770e <Thr::loadDLL(char const*, bool)+0x20c>
c00175c5:	51                   	push   ecx
c00175c6:	51                   	push   ecx
c00175c7:	68 bf 47 02 c0       	push   0xc00247bf
c00175cc:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00175d0:	53                   	push   ebx
c00175d1:	e8 6a 91 fe ff       	call   c0000740 <strcpy>
c00175d6:	5d                   	pop    ebp
c00175d7:	58                   	pop    eax
c00175d8:	56                   	push   esi
c00175d9:	53                   	push   ebx
c00175da:	e8 a1 92 fe ff       	call   c0000880 <strcat>
c00175df:	58                   	pop    eax
c00175e0:	5a                   	pop    edx
c00175e1:	68 d2 47 02 c0       	push   0xc00247d2
c00175e6:	53                   	push   ebx
c00175e7:	e8 94 92 fe ff       	call   c0000880 <strcat>
c00175ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00175ef:	e8 15 cd ff ff       	call   c0014309 <Krnl::panic(char const*)>
c00175f4:	83 c4 10             	add    esp,0x10
c00175f7:	52                   	push   edx
c00175f8:	6a 03                	push   0x3
c00175fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175fe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017602:	05 ff 0f 00 00       	add    eax,0xfff
c0017607:	83 d2 00             	adc    edx,0x0
c001760a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001760e:	50                   	push   eax
c001760f:	ff 35 90 65 02 c0    	push   DWORD PTR ds:0xc0026590
c0017615:	e8 dc 47 ff ff       	call   c000bdf6 <VAS::allocatePages(int, int)>
c001761a:	59                   	pop    ecx
c001761b:	89 c3                	mov    ebx,eax
c001761d:	5d                   	pop    ebp
c001761e:	50                   	push   eax
c001761f:	68 69 29 02 c0       	push   0xc0022969
c0017624:	e8 ff 53 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0017629:	89 34 24             	mov    DWORD PTR [esp],esi
c001762c:	e8 6f 90 fe ff       	call   c00006a0 <strlen>
c0017631:	8b 2d 60 71 02 c0    	mov    ebp,DWORD PTR ds:0xc0027160
c0017637:	40                   	inc    eax
c0017638:	89 04 24             	mov    DWORD PTR [esp],eax
c001763b:	e8 83 23 ff ff       	call   c00099c3 <malloc>
c0017640:	89 04 ad 80 75 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8a80],eax
c0017647:	58                   	pop    eax
c0017648:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c001764d:	5a                   	pop    edx
c001764e:	56                   	push   esi
c001764f:	ff 34 85 80 75 02 c0 	push   DWORD PTR [eax*4-0x3ffd8a80]
c0017656:	e8 e5 90 fe ff       	call   c0000740 <strcpy>
c001765b:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0017660:	8d 50 01             	lea    edx,[eax+0x1]
c0017663:	89 1c 85 80 73 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8c80],ebx
c001766a:	89 15 60 71 02 c0    	mov    DWORD PTR ds:0xc0027160,edx
c0017670:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017674:	83 c4 0c             	add    esp,0xc
c0017677:	89 14 85 80 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8e80],edx
c001767e:	6a 01                	push   0x1
c0017680:	53                   	push   ebx
c0017681:	56                   	push   esi
c0017682:	e8 c2 f6 ff ff       	call   c0016d49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017687:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001768b:	83 c4 10             	add    esp,0x10
c001768e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017693:	0f 85 89 00 00 00    	jne    c0017722 <Thr::loadDLL(char const*, bool)+0x220>
c0017699:	89 f8                	mov    eax,edi
c001769b:	84 c0                	test   al,al
c001769d:	74 73                	je     c0017712 <Thr::loadDLL(char const*, bool)+0x210>
c001769f:	83 ec 0c             	sub    esp,0xc
c00176a2:	68 d4 47 02 c0       	push   0xc00247d4
c00176a7:	e8 5d cc ff ff       	call   c0014309 <Krnl::panic(char const*)>
c00176ac:	83 c4 10             	add    esp,0x10
c00176af:	eb 61                	jmp    c0017712 <Thr::loadDLL(char const*, bool)+0x210>
c00176b1:	50                   	push   eax
c00176b2:	50                   	push   eax
c00176b3:	89 e8                	mov    eax,ebp
c00176b5:	c1 e0 0c             	shl    eax,0xc
c00176b8:	01 d8                	add    eax,ebx
c00176ba:	50                   	push   eax
c00176bb:	ff 35 90 65 02 c0    	push   DWORD PTR ds:0xc0026590
c00176c1:	e8 98 42 ff ff       	call   c000b95e <VAS::getPageTableEntry(unsigned long)>
c00176c6:	83 c4 10             	add    esp,0x10
c00176c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00176cb:	a8 60                	test   al,0x60
c00176cd:	75 11                	jne    c00176e0 <Thr::loadDLL(char const*, bool)+0x1de>
c00176cf:	83 ec 0c             	sub    esp,0xc
c00176d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00176d7:	50                   	push   eax
c00176d8:	e8 71 26 ff ff       	call   c0009d4e <Phys::freePage(unsigned long)>
c00176dd:	83 c4 10             	add    esp,0x10
c00176e0:	45                   	inc    ebp
c00176e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00176e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176e9:	05 ff 0f 00 00       	add    eax,0xfff
c00176ee:	bf 00 00 00 00       	mov    edi,0x0
c00176f3:	83 d2 00             	adc    edx,0x0
c00176f6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00176fa:	c1 ea 0c             	shr    edx,0xc
c00176fd:	39 c5                	cmp    ebp,eax
c00176ff:	89 d1                	mov    ecx,edx
c0017701:	89 f8                	mov    eax,edi
c0017703:	19 c8                	sbb    eax,ecx
c0017705:	72 aa                	jb     c00176b1 <Thr::loadDLL(char const*, bool)+0x1af>
c0017707:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001770c:	75 18                	jne    c0017726 <Thr::loadDLL(char const*, bool)+0x224>
c001770e:	31 db                	xor    ebx,ebx
c0017710:	eb 14                	jmp    c0017726 <Thr::loadDLL(char const*, bool)+0x224>
c0017712:	83 ec 0c             	sub    esp,0xc
c0017715:	68 f3 47 02 c0       	push   0xc00247f3
c001771a:	e8 ea cb ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001771f:	83 c4 10             	add    esp,0x10
c0017722:	31 ed                	xor    ebp,ebp
c0017724:	eb bb                	jmp    c00176e1 <Thr::loadDLL(char const*, bool)+0x1df>
c0017726:	81 c4 2c 01 00 00    	add    esp,0x12c
c001772c:	89 d8                	mov    eax,ebx
c001772e:	5b                   	pop    ebx
c001772f:	5e                   	pop    esi
c0017730:	5f                   	pop    edi
c0017731:	5d                   	pop    ebp
c0017732:	c3                   	ret    

c0017733 <Thr::executeDLL(unsigned long, void*)>:
c0017733:	56                   	push   esi
c0017734:	53                   	push   ebx
c0017735:	52                   	push   edx
c0017736:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001773a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001773e:	85 db                	test   ebx,ebx
c0017740:	75 10                	jne    c0017752 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017742:	83 ec 0c             	sub    esp,0xc
c0017745:	68 0f 48 02 c0       	push   0xc002480f
c001774a:	e8 ba cb ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001774f:	83 c4 10             	add    esp,0x10
c0017752:	50                   	push   eax
c0017753:	50                   	push   eax
c0017754:	53                   	push   ebx
c0017755:	68 39 48 02 c0       	push   0xc0024839
c001775a:	e8 c9 52 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001775f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017763:	89 d8                	mov    eax,ebx
c0017765:	83 c4 14             	add    esp,0x14
c0017768:	5b                   	pop    ebx
c0017769:	5e                   	pop    esi
c001776a:	ff e0                	jmp    eax

c001776c <userModeEntryPoint(void*)>:
c001776c:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0017771:	48                   	dec    eax
c0017772:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0017777:	75 03                	jne    c001777c <userModeEntryPoint(void*)+0x10>
c0017779:	fb                   	sti    
c001777a:	66 90                	xchg   ax,ax
c001777c:	fb                   	sti    
c001777d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017782:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017785:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001778b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001778f:	e9 cb 8a fe ff       	jmp    c000025f <goToUsermode>

c0017794 <changeTSS>:
c0017794:	83 ec 14             	sub    esp,0x14
c0017797:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001779c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001779f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00177a4:	c1 e2 15             	shl    edx,0x15
c00177a7:	29 d0                	sub    eax,edx
c00177a9:	50                   	push   eax
c00177aa:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c00177af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00177b5:	05 7c 11 00 00       	add    eax,0x117c
c00177ba:	50                   	push   eax
c00177bb:	e8 e0 37 ff ff       	call   c000afa0 <TSS::setESP(unsigned long)>
c00177c0:	83 c4 1c             	add    esp,0x1c
c00177c3:	c3                   	ret    

c00177c4 <switchToThread(ThreadControlBlock*)>:
c00177c4:	57                   	push   edi
c00177c5:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c00177ca:	56                   	push   esi
c00177cb:	85 c0                	test   eax,eax
c00177cd:	53                   	push   ebx
c00177ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00177d2:	0f 85 90 00 00 00    	jne    c0017868 <switchToThread(ThreadControlBlock*)+0xa4>
c00177d8:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c00177db:	3c ff                	cmp    al,0xff
c00177dd:	0f 84 81 00 00 00    	je     c0017864 <switchToThread(ThreadControlBlock*)+0xa0>
c00177e3:	0f b6 d0             	movzx  edx,al
c00177e6:	b8 84 03 00 00       	mov    eax,0x384
c00177eb:	29 d0                	sub    eax,edx
c00177ed:	c1 e0 10             	shl    eax,0x10
c00177f0:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c00177f3:	90                   	nop
c00177f4:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00177f7:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c00177fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017802:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017809:	74 4d                	je     c0017858 <switchToThread(ThreadControlBlock*)+0x94>
c001780b:	0f 31                	rdtsc  
c001780d:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c0017812:	89 c6                	mov    esi,eax
c0017814:	89 d7                	mov    edi,edx
c0017816:	2b 35 58 79 02 c0    	sub    esi,DWORD PTR ds:0xc0027958
c001781c:	89 15 6c 79 02 c0    	mov    DWORD PTR ds:0xc002796c,edx
c0017822:	1b 3d 5c 79 02 c0    	sbb    edi,DWORD PTR ds:0xc002795c
c0017828:	89 35 60 79 02 c0    	mov    DWORD PTR ds:0xc0027960,esi
c001782e:	a3 58 79 02 c0       	mov    ds:0xc0027958,eax
c0017833:	89 3d 64 79 02 c0    	mov    DWORD PTR ds:0xc0027964,edi
c0017839:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001783f:	89 15 5c 79 02 c0    	mov    DWORD PTR ds:0xc002795c,edx
c0017845:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017848:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001784b:	01 c6                	add    esi,eax
c001784d:	11 d7                	adc    edi,edx
c001784f:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0017852:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0017855:	8d 76 00             	lea    esi,[esi+0x0]
c0017858:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001785c:	5b                   	pop    ebx
c001785d:	5e                   	pop    esi
c001785e:	5f                   	pop    edi
c001785f:	e9 33 8a fe ff       	jmp    c0000297 <switchToThreadASM>
c0017864:	31 c0                	xor    eax,eax
c0017866:	eb 8c                	jmp    c00177f4 <switchToThread(ThreadControlBlock*)+0x30>
c0017868:	5b                   	pop    ebx
c0017869:	c7 05 20 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x1
c0017873:	5e                   	pop    esi
c0017874:	5f                   	pop    edi
c0017875:	c3                   	ret    
c0017876:	66 90                	xchg   ax,ax

c0017878 <Process::addArgs(char**)>:
c0017878:	57                   	push   edi
c0017879:	56                   	push   esi
c001787a:	53                   	push   ebx
c001787b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001787f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017883:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001788d:	85 ff                	test   edi,edi
c001788f:	74 43                	je     c00178d4 <Process::addArgs(char**)+0x5c>
c0017891:	8b 07                	mov    eax,DWORD PTR [edi]
c0017893:	85 c0                	test   eax,eax
c0017895:	74 3d                	je     c00178d4 <Process::addArgs(char**)+0x5c>
c0017897:	31 db                	xor    ebx,ebx
c0017899:	8d 76 00             	lea    esi,[esi+0x0]
c001789c:	83 ec 0c             	sub    esp,0xc
c001789f:	50                   	push   eax
c00178a0:	e8 fb 8d fe ff       	call   c00006a0 <strlen>
c00178a5:	40                   	inc    eax
c00178a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00178a9:	e8 15 21 ff ff       	call   c00099c3 <malloc>
c00178ae:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00178b5:	5a                   	pop    edx
c00178b6:	59                   	pop    ecx
c00178b7:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00178ba:	43                   	inc    ebx
c00178bb:	50                   	push   eax
c00178bc:	e8 7f 8e fe ff       	call   c0000740 <strcpy>
c00178c1:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c00178c7:	83 c4 10             	add    esp,0x10
c00178ca:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00178cd:	85 c0                	test   eax,eax
c00178cf:	75 cb                	jne    c001789c <Process::addArgs(char**)+0x24>
c00178d1:	8d 76 00             	lea    esi,[esi+0x0]
c00178d4:	5b                   	pop    ebx
c00178d5:	5e                   	pop    esi
c00178d6:	5f                   	pop    edi
c00178d7:	c3                   	ret    

c00178d8 <Process::Process(char const*, Process*, char**)>:
c00178d8:	56                   	push   esi
c00178d9:	53                   	push   ebx
c00178da:	83 ec 14             	sub    esp,0x14
c00178dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178e1:	05 0c 02 00 00       	add    eax,0x20c
c00178e6:	bb 07 00 00 00       	mov    ebx,0x7
c00178eb:	89 c6                	mov    esi,eax
c00178ed:	8d 76 00             	lea    esi,[esi+0x0]
c00178f0:	85 db                	test   ebx,ebx
c00178f2:	78 14                	js     c0017908 <Process::Process(char const*, Process*, char**)+0x30>
c00178f4:	83 ec 0c             	sub    esp,0xc
c00178f7:	56                   	push   esi
c00178f8:	e8 a3 9f 00 00       	call   c00218a0 <ThreadControlBlock::ThreadControlBlock()>
c00178fd:	83 c4 10             	add    esp,0x10
c0017900:	83 c6 63             	add    esi,0x63
c0017903:	4b                   	dec    ebx
c0017904:	eb ea                	jmp    c00178f0 <Process::Process(char const*, Process*, char**)+0x18>
c0017906:	66 90                	xchg   ax,ax
c0017908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001790c:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c0017913:	83 ec 0c             	sub    esp,0xc
c0017916:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001791a:	e8 73 c8 ff ff       	call   c0014192 <Krnl::newProcessEnv(Process*)>
c001791f:	83 c4 10             	add    esp,0x10
c0017922:	89 c2                	mov    edx,eax
c0017924:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017928:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001792e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017932:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001793b:	a1 50 5e 02 c0       	mov    eax,ds:0xc0025e50
c0017940:	8d 50 01             	lea    edx,[eax+0x1]
c0017943:	89 15 50 5e 02 c0    	mov    DWORD PTR ds:0xc0025e50,edx
c0017949:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001794d:	89 02                	mov    DWORD PTR [edx],eax
c001794f:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0017957:	83 ec 0c             	sub    esp,0xc
c001795a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001795e:	e8 60 20 ff ff       	call   c00099c3 <malloc>
c0017963:	83 c4 10             	add    esp,0x10
c0017966:	89 c3                	mov    ebx,eax
c0017968:	83 ec 08             	sub    esp,0x8
c001796b:	6a 00                	push   0x0
c001796d:	53                   	push   ebx
c001796e:	e8 2b 48 ff ff       	call   c000c19e <VAS::VAS(bool)>
c0017973:	83 c4 10             	add    esp,0x10
c0017976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001797a:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0017980:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017984:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001798e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017992:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017996:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001799c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179a0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00179a6:	85 c0                	test   eax,eax
c00179a8:	74 42                	je     c00179ec <Process::Process(char const*, Process*, char**)+0x114>
c00179aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ae:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00179b4:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00179ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179be:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c00179c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179c8:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00179ce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00179d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179d8:	05 0c 01 00 00       	add    eax,0x10c
c00179dd:	83 ec 08             	sub    esp,0x8
c00179e0:	52                   	push   edx
c00179e1:	50                   	push   eax
c00179e2:	e8 59 8d fe ff       	call   c0000740 <strcpy>
c00179e7:	83 c4 10             	add    esp,0x10
c00179ea:	eb 64                	jmp    c0017a50 <Process::Process(char const*, Process*, char**)+0x178>
c00179ec:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c00179f4:	83 ec 0c             	sub    esp,0xc
c00179f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00179fb:	e8 c3 1f ff ff       	call   c00099c3 <malloc>
c0017a00:	83 c4 10             	add    esp,0x10
c0017a03:	89 c3                	mov    ebx,eax
c0017a05:	83 ec 08             	sub    esp,0x8
c0017a08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a0c:	53                   	push   ebx
c0017a0d:	e8 9e 32 ff ff       	call   c000acb0 <VgaText::VgaText(char const*)>
c0017a12:	83 c4 10             	add    esp,0x10
c0017a15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a19:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0017a1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a23:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0017a29:	83 ec 0c             	sub    esp,0xc
c0017a2c:	50                   	push   eax
c0017a2d:	e8 3d 2a ff ff       	call   c000a46f <addToTerminalCycle(VgaText*)>
c0017a32:	83 c4 10             	add    esp,0x10
c0017a35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a39:	05 0c 01 00 00       	add    eax,0x10c
c0017a3e:	83 ec 08             	sub    esp,0x8
c0017a41:	68 58 48 02 c0       	push   0xc0024858
c0017a46:	50                   	push   eax
c0017a47:	e8 f4 8c fe ff       	call   c0000740 <strcpy>
c0017a4c:	83 c4 10             	add    esp,0x10
c0017a4f:	90                   	nop
c0017a50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a54:	83 c0 0c             	add    eax,0xc
c0017a57:	83 ec 08             	sub    esp,0x8
c0017a5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a5e:	50                   	push   eax
c0017a5f:	e8 dc 8c fe ff       	call   c0000740 <strcpy>
c0017a64:	83 c4 10             	add    esp,0x10
c0017a67:	83 ec 08             	sub    esp,0x8
c0017a6a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017a6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a72:	e8 01 fe ff ff       	call   c0017878 <Process::addArgs(char**)>
c0017a77:	83 c4 10             	add    esp,0x10
c0017a7a:	83 ec 08             	sub    esp,0x8
c0017a7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a85:	e8 89 ed ff ff       	call   c0016813 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017a8a:	83 c4 10             	add    esp,0x10
c0017a8d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017a91:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017a95:	83 f0 01             	xor    eax,0x1
c0017a98:	88 c2                	mov    dl,al
c0017a9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a9e:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c0017aa4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017aa9:	83 ec 08             	sub    esp,0x8
c0017aac:	50                   	push   eax
c0017aad:	68 b0 48 02 c0       	push   0xc00248b0
c0017ab2:	e8 71 4f ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0017ab7:	83 c4 10             	add    esp,0x10
c0017aba:	90                   	nop
c0017abb:	83 c4 14             	add    esp,0x14
c0017abe:	5b                   	pop    ebx
c0017abf:	5e                   	pop    esi
c0017ac0:	c3                   	ret    
c0017ac1:	90                   	nop
c0017ac2:	66 90                	xchg   ax,ax

c0017ac4 <Process::Process(bool, char const*, Process*, char**)>:
c0017ac4:	56                   	push   esi
c0017ac5:	53                   	push   ebx
c0017ac6:	83 ec 24             	sub    esp,0x24
c0017ac9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017acd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017ad1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ad5:	05 0c 02 00 00       	add    eax,0x20c
c0017ada:	bb 07 00 00 00       	mov    ebx,0x7
c0017adf:	89 c6                	mov    esi,eax
c0017ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ae4:	85 db                	test   ebx,ebx
c0017ae6:	78 14                	js     c0017afc <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017ae8:	83 ec 0c             	sub    esp,0xc
c0017aeb:	56                   	push   esi
c0017aec:	e8 af 9d 00 00       	call   c00218a0 <ThreadControlBlock::ThreadControlBlock()>
c0017af1:	83 c4 10             	add    esp,0x10
c0017af4:	83 c6 63             	add    esi,0x63
c0017af7:	4b                   	dec    ebx
c0017af8:	eb ea                	jmp    c0017ae4 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0017afa:	66 90                	xchg   ax,ax
c0017afc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b00:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c0017b07:	83 ec 0c             	sub    esp,0xc
c0017b0a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017b0e:	e8 7f c6 ff ff       	call   c0014192 <Krnl::newProcessEnv(Process*)>
c0017b13:	83 c4 10             	add    esp,0x10
c0017b16:	89 c2                	mov    edx,eax
c0017b18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b1c:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c0017b22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b26:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0017b2f:	a1 50 5e 02 c0       	mov    eax,ds:0xc0025e50
c0017b34:	8d 50 01             	lea    edx,[eax+0x1]
c0017b37:	89 15 50 5e 02 c0    	mov    DWORD PTR ds:0xc0025e50,edx
c0017b3d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b41:	89 02                	mov    DWORD PTR [edx],eax
c0017b43:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0017b4b:	83 ec 0c             	sub    esp,0xc
c0017b4e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017b52:	e8 6c 1e ff ff       	call   c00099c3 <malloc>
c0017b57:	83 c4 10             	add    esp,0x10
c0017b5a:	89 c3                	mov    ebx,eax
c0017b5c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017b61:	83 ec 08             	sub    esp,0x8
c0017b64:	50                   	push   eax
c0017b65:	53                   	push   ebx
c0017b66:	e8 33 46 ff ff       	call   c000c19e <VAS::VAS(bool)>
c0017b6b:	83 c4 10             	add    esp,0x10
c0017b6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b72:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0017b78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b7c:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017b86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b8a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017b8e:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0017b94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b98:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017b9e:	85 c0                	test   eax,eax
c0017ba0:	74 42                	je     c0017be4 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0017ba2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ba6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017bac:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017bb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bb6:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017bbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bc0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017bc6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017bcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bd0:	05 0c 01 00 00       	add    eax,0x10c
c0017bd5:	83 ec 08             	sub    esp,0x8
c0017bd8:	52                   	push   edx
c0017bd9:	50                   	push   eax
c0017bda:	e8 61 8b fe ff       	call   c0000740 <strcpy>
c0017bdf:	83 c4 10             	add    esp,0x10
c0017be2:	eb 64                	jmp    c0017c48 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0017be4:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0017bec:	83 ec 0c             	sub    esp,0xc
c0017bef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017bf3:	e8 cb 1d ff ff       	call   c00099c3 <malloc>
c0017bf8:	83 c4 10             	add    esp,0x10
c0017bfb:	89 c3                	mov    ebx,eax
c0017bfd:	83 ec 08             	sub    esp,0x8
c0017c00:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017c04:	53                   	push   ebx
c0017c05:	e8 a6 30 ff ff       	call   c000acb0 <VgaText::VgaText(char const*)>
c0017c0a:	83 c4 10             	add    esp,0x10
c0017c0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c11:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0017c17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c1b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0017c21:	83 ec 0c             	sub    esp,0xc
c0017c24:	50                   	push   eax
c0017c25:	e8 45 28 ff ff       	call   c000a46f <addToTerminalCycle(VgaText*)>
c0017c2a:	83 c4 10             	add    esp,0x10
c0017c2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c31:	05 0c 01 00 00       	add    eax,0x10c
c0017c36:	83 ec 08             	sub    esp,0x8
c0017c39:	68 58 48 02 c0       	push   0xc0024858
c0017c3e:	50                   	push   eax
c0017c3f:	e8 fc 8a fe ff       	call   c0000740 <strcpy>
c0017c44:	83 c4 10             	add    esp,0x10
c0017c47:	90                   	nop
c0017c48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c4c:	83 c0 0c             	add    eax,0xc
c0017c4f:	83 ec 08             	sub    esp,0x8
c0017c52:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017c56:	50                   	push   eax
c0017c57:	e8 e4 8a fe ff       	call   c0000740 <strcpy>
c0017c5c:	83 c4 10             	add    esp,0x10
c0017c5f:	83 ec 08             	sub    esp,0x8
c0017c62:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017c66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017c6a:	e8 09 fc ff ff       	call   c0017878 <Process::addArgs(char**)>
c0017c6f:	83 c4 10             	add    esp,0x10
c0017c72:	90                   	nop
c0017c73:	83 c4 24             	add    esp,0x24
c0017c76:	5b                   	pop    ebx
c0017c77:	5e                   	pop    esi
c0017c78:	c3                   	ret    
c0017c79:	8d 76 00             	lea    esi,[esi+0x0]

c0017c7c <taskStartupFunction>:
c0017c7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c81:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0017c84:	c3                   	ret    
c0017c85:	90                   	nop
c0017c86:	66 90                	xchg   ax,ax

c0017c88 <Semaphore::Semaphore(int)>:
c0017c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c90:	89 10                	mov    DWORD PTR [eax],edx
c0017c92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c96:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017c9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ca1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017cb3:	90                   	nop
c0017cb4:	c3                   	ret    
c0017cb5:	90                   	nop
c0017cb6:	66 90                	xchg   ax,ax

c0017cb8 <Mutex::Mutex()>:
c0017cb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cbc:	6a 01                	push   0x1
c0017cbe:	50                   	push   eax
c0017cbf:	e8 c4 ff ff ff       	call   c0017c88 <Semaphore::Semaphore(int)>
c0017cc4:	83 c4 08             	add    esp,0x8
c0017cc7:	90                   	nop
c0017cc8:	c3                   	ret    
c0017cc9:	90                   	nop
c0017cca:	66 90                	xchg   ax,ax

c0017ccc <Process::createThread(void (*)(void*), void*, int)>:
c0017ccc:	55                   	push   ebp
c0017ccd:	31 c9                	xor    ecx,ecx
c0017ccf:	57                   	push   edi
c0017cd0:	56                   	push   esi
c0017cd1:	53                   	push   ebx
c0017cd2:	83 ec 1c             	sub    esp,0x1c
c0017cd5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017cd9:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0017ce0:	89 f2                	mov    edx,esi
c0017ce2:	66 90                	xchg   ax,ax
c0017ce4:	0f b7 c2             	movzx  eax,dx
c0017ce7:	83 e2 01             	and    edx,0x1
c0017cea:	74 18                	je     c0017d04 <Process::createThread(void (*)(void*), void*, int)+0x38>
c0017cec:	d1 f8                	sar    eax,1
c0017cee:	41                   	inc    ecx
c0017cef:	89 c2                	mov    edx,eax
c0017cf1:	83 f9 10             	cmp    ecx,0x10
c0017cf4:	75 ee                	jne    c0017ce4 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0017cf6:	83 c4 1c             	add    esp,0x1c
c0017cf9:	31 db                	xor    ebx,ebx
c0017cfb:	89 d8                	mov    eax,ebx
c0017cfd:	5b                   	pop    ebx
c0017cfe:	5e                   	pop    esi
c0017cff:	5f                   	pop    edi
c0017d00:	5d                   	pop    ebp
c0017d01:	c3                   	ret    
c0017d02:	66 90                	xchg   ax,ax
c0017d04:	b8 01 00 00 00       	mov    eax,0x1
c0017d09:	8d 14 09             	lea    edx,[ecx+ecx*1]
c0017d0c:	d3 e0                	shl    eax,cl
c0017d0e:	09 c6                	or     esi,eax
c0017d10:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0017d13:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0017d1a:	89 c6                	mov    esi,eax
c0017d1c:	c1 e6 05             	shl    esi,0x5
c0017d1f:	01 f0                	add    eax,esi
c0017d21:	01 d8                	add    eax,ebx
c0017d23:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0017d2a:	75 0c                	jne    c0017d38 <Process::createThread(void (*)(void*), void*, int)+0x6c>
c0017d2c:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0017d36:	66 90                	xchg   ax,ax
c0017d38:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017d3e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0017d42:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0017d45:	01 ca                	add    edx,ecx
c0017d47:	83 ec 08             	sub    esp,0x8
c0017d4a:	89 d0                	mov    eax,edx
c0017d4c:	c1 e0 05             	shl    eax,0x5
c0017d4f:	01 d0                	add    eax,edx
c0017d51:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c0017d55:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d59:	01 d8                	add    eax,ebx
c0017d5b:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c0017d61:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c0017d67:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0017d6d:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0017d73:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0017d79:	89 cd                	mov    ebp,ecx
c0017d7b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0017d7f:	f7 dd                	neg    ebp
c0017d81:	c1 e5 15             	shl    ebp,0x15
c0017d84:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c0017d8a:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c0017d90:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017d9a:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0017da0:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017daa:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017db4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017db8:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c0017dbf:	53                   	push   ebx
c0017dc0:	68 44 79 02 c0       	push   0xc0027944
c0017dc5:	e8 76 98 00 00       	call   c0021640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017dca:	89 d8                	mov    eax,ebx
c0017dcc:	83 c4 10             	add    esp,0x10
c0017dcf:	83 c4 1c             	add    esp,0x1c
c0017dd2:	5b                   	pop    ebx
c0017dd3:	5e                   	pop    esi
c0017dd4:	5f                   	pop    edi
c0017dd5:	5d                   	pop    ebp
c0017dd6:	c3                   	ret    
c0017dd7:	90                   	nop

c0017dd8 <Process::createUserThread()>:
c0017dd8:	83 ec 0c             	sub    esp,0xc
c0017ddb:	68 80 00 00 00       	push   0x80
c0017de0:	6a 00                	push   0x0
c0017de2:	68 6c 77 01 c0       	push   0xc001776c
c0017de7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017deb:	e8 dc fe ff ff       	call   c0017ccc <Process::createThread(void (*)(void*), void*, int)>
c0017df0:	83 c4 1c             	add    esp,0x1c
c0017df3:	c3                   	ret    

c0017df4 <setupMultitasking(void (*)())>:
c0017df4:	56                   	push   esi
c0017df5:	53                   	push   ebx
c0017df6:	51                   	push   ecx
c0017df7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017dfb:	eb 13                	jmp    c0017e10 <setupMultitasking(void (*)())+0x1c>
c0017dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0017e00:	83 ec 0c             	sub    esp,0xc
c0017e03:	68 44 79 02 c0       	push   0xc0027944
c0017e08:	e8 7b 97 00 00       	call   c0021588 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017e0d:	83 c4 10             	add    esp,0x10
c0017e10:	83 ec 0c             	sub    esp,0xc
c0017e13:	68 44 79 02 c0       	push   0xc0027944
c0017e18:	e8 47 97 00 00       	call   c0021564 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017e1d:	83 c4 10             	add    esp,0x10
c0017e20:	84 c0                	test   al,al
c0017e22:	74 dc                	je     c0017e00 <setupMultitasking(void (*)())+0xc>
c0017e24:	83 ec 0c             	sub    esp,0xc
c0017e27:	68 3f 07 00 00       	push   0x73f
c0017e2c:	e8 92 1b ff ff       	call   c00099c3 <malloc>
c0017e31:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e38:	89 c3                	mov    ebx,eax
c0017e3a:	6a 00                	push   0x0
c0017e3c:	68 5c 48 02 c0       	push   0xc002485c
c0017e41:	6a 01                	push   0x1
c0017e43:	50                   	push   eax
c0017e44:	e8 7b fc ff ff       	call   c0017ac4 <Process::Process(bool, char const*, Process*, char**)>
c0017e49:	83 c4 14             	add    esp,0x14
c0017e4c:	89 1d 50 79 02 c0    	mov    DWORD PTR ds:0xc0027950,ebx
c0017e52:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017e58:	e8 20 29 ff ff       	call   c000a77d <setActiveTerminal(VgaText*)>
c0017e5d:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c0017e65:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0017e6f:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017e75:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017e78:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017e82:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017e88:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017e8e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017e98:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0017ea2:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017eac:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017eb2:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017ebc:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017ec2:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017ecc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017ed2:	58                   	pop    eax
c0017ed3:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017ed9:	5a                   	pop    edx
c0017eda:	68 58 48 02 c0       	push   0xc0024858
c0017edf:	50                   	push   eax
c0017ee0:	e8 5b 88 fe ff       	call   c0000740 <strcpy>
c0017ee5:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0017eec:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017ef0:	83 c4 14             	add    esp,0x14
c0017ef3:	5b                   	pop    ebx
c0017ef4:	5e                   	pop    esi
c0017ef5:	e9 8f 83 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0017efa:	66 90                	xchg   ax,ax

c0017efc <schedule()>:
c0017efc:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c0017f01:	85 c0                	test   eax,eax
c0017f03:	74 0b                	je     c0017f10 <schedule()+0x14>
c0017f05:	c7 05 20 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x1
c0017f0f:	c3                   	ret    
c0017f10:	53                   	push   ebx
c0017f11:	83 ec 14             	sub    esp,0x14
c0017f14:	68 44 79 02 c0       	push   0xc0027944
c0017f19:	e8 46 96 00 00       	call   c0021564 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017f1e:	83 c4 10             	add    esp,0x10
c0017f21:	84 c0                	test   al,al
c0017f23:	75 3b                	jne    c0017f60 <schedule()+0x64>
c0017f25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f2a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017f2d:	4a                   	dec    edx
c0017f2e:	74 38                	je     c0017f68 <schedule()+0x6c>
c0017f30:	83 ec 0c             	sub    esp,0xc
c0017f33:	68 44 79 02 c0       	push   0xc0027944
c0017f38:	e8 43 96 00 00       	call   c0021580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017f3d:	c7 04 24 44 79 02 c0 	mov    DWORD PTR [esp],0xc0027944
c0017f44:	89 c3                	mov    ebx,eax
c0017f46:	e8 3d 96 00 00       	call   c0021588 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017f4b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017f52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f55:	e8 6a f8 ff ff       	call   c00177c4 <switchToThread(ThreadControlBlock*)>
c0017f5a:	83 c4 10             	add    esp,0x10
c0017f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0017f60:	83 c4 08             	add    esp,0x8
c0017f63:	5b                   	pop    ebx
c0017f64:	c3                   	ret    
c0017f65:	8d 76 00             	lea    esi,[esi+0x0]
c0017f68:	83 ec 08             	sub    esp,0x8
c0017f6b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017f72:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017f78:	68 44 79 02 c0       	push   0xc0027944
c0017f7d:	e8 be 96 00 00       	call   c0021640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017f82:	83 c4 10             	add    esp,0x10
c0017f85:	eb a9                	jmp    c0017f30 <schedule()+0x34>
c0017f87:	90                   	nop

c0017f88 <Semaphore::tryAcquire()>:
c0017f88:	53                   	push   ebx
c0017f89:	83 ec 08             	sub    esp,0x8
c0017f8c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017f90:	fa                   	cli    
c0017f91:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0017f96:	8d 50 01             	lea    edx,[eax+0x1]
c0017f99:	89 15 28 79 02 c0    	mov    DWORD PTR ds:0xc0027928,edx
c0017f9f:	8b 15 24 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027924
c0017fa5:	8d 5a 01             	lea    ebx,[edx+0x1]
c0017fa8:	89 1d 24 79 02 c0    	mov    DWORD PTR ds:0xc0027924,ebx
c0017fae:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0017fb1:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0017fb3:	7c 33                	jl     c0017fe8 <Semaphore::tryAcquire()+0x60>
c0017fb5:	89 15 24 79 02 c0    	mov    DWORD PTR ds:0xc0027924,edx
c0017fbb:	85 d2                	test   edx,edx
c0017fbd:	75 0d                	jne    c0017fcc <Semaphore::tryAcquire()+0x44>
c0017fbf:	8b 15 20 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027920
c0017fc5:	85 d2                	test   edx,edx
c0017fc7:	75 6b                	jne    c0018034 <Semaphore::tryAcquire()+0xac>
c0017fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0017fcc:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0017fd1:	85 c0                	test   eax,eax
c0017fd3:	74 0b                	je     c0017fe0 <Semaphore::tryAcquire()+0x58>
c0017fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0017fd8:	31 c0                	xor    eax,eax
c0017fda:	83 c4 08             	add    esp,0x8
c0017fdd:	5b                   	pop    ebx
c0017fde:	c3                   	ret    
c0017fdf:	90                   	nop
c0017fe0:	fb                   	sti    
c0017fe1:	83 c4 08             	add    esp,0x8
c0017fe4:	5b                   	pop    ebx
c0017fe5:	c3                   	ret    
c0017fe6:	66 90                	xchg   ax,ax
c0017fe8:	43                   	inc    ebx
c0017fe9:	89 15 24 79 02 c0    	mov    DWORD PTR ds:0xc0027924,edx
c0017fef:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0017ff2:	85 d2                	test   edx,edx
c0017ff4:	75 22                	jne    c0018018 <Semaphore::tryAcquire()+0x90>
c0017ff6:	8b 0d 20 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027920
c0017ffc:	85 c9                	test   ecx,ecx
c0017ffe:	74 18                	je     c0018018 <Semaphore::tryAcquire()+0x90>
c0018000:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c001800a:	e8 ed fe ff ff       	call   c0017efc <schedule()>
c001800f:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018014:	48                   	dec    eax
c0018015:	8d 76 00             	lea    esi,[esi+0x0]
c0018018:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c001801d:	85 c0                	test   eax,eax
c001801f:	75 0b                	jne    c001802c <Semaphore::tryAcquire()+0xa4>
c0018021:	fb                   	sti    
c0018022:	b0 01                	mov    al,0x1
c0018024:	83 c4 08             	add    esp,0x8
c0018027:	5b                   	pop    ebx
c0018028:	c3                   	ret    
c0018029:	8d 76 00             	lea    esi,[esi+0x0]
c001802c:	b0 01                	mov    al,0x1
c001802e:	83 c4 08             	add    esp,0x8
c0018031:	5b                   	pop    ebx
c0018032:	c3                   	ret    
c0018033:	90                   	nop
c0018034:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c001803e:	e8 b9 fe ff ff       	call   c0017efc <schedule()>
c0018043:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018048:	48                   	dec    eax
c0018049:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c001804e:	85 c0                	test   eax,eax
c0018050:	75 86                	jne    c0017fd8 <Semaphore::tryAcquire()+0x50>
c0018052:	eb 8c                	jmp    c0017fe0 <Semaphore::tryAcquire()+0x58>

c0018054 <Semaphore::assertLocked(char const*)>:
c0018054:	83 ec 0c             	sub    esp,0xc
c0018057:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001805b:	fa                   	cli    
c001805c:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0018062:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c0018067:	8d 48 01             	lea    ecx,[eax+0x1]
c001806a:	89 0d 24 79 02 c0    	mov    DWORD PTR ds:0xc0027924,ecx
c0018070:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018072:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018075:	7c 29                	jl     c00180a0 <Semaphore::assertLocked(char const*)+0x4c>
c0018077:	90                   	nop
c0018078:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c001807d:	85 c0                	test   eax,eax
c001807f:	75 0b                	jne    c001808c <Semaphore::assertLocked(char const*)+0x38>
c0018081:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c0018086:	85 c0                	test   eax,eax
c0018088:	75 2e                	jne    c00180b8 <Semaphore::assertLocked(char const*)+0x64>
c001808a:	66 90                	xchg   ax,ax
c001808c:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018091:	48                   	dec    eax
c0018092:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018097:	75 03                	jne    c001809c <Semaphore::assertLocked(char const*)+0x48>
c0018099:	fb                   	sti    
c001809a:	66 90                	xchg   ax,ax
c001809c:	83 c4 0c             	add    esp,0xc
c001809f:	c3                   	ret    
c00180a0:	83 ec 0c             	sub    esp,0xc
c00180a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180a7:	e8 5d c2 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c00180ac:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c00180b1:	83 c4 10             	add    esp,0x10
c00180b4:	48                   	dec    eax
c00180b5:	eb c1                	jmp    c0018078 <Semaphore::assertLocked(char const*)+0x24>
c00180b7:	90                   	nop
c00180b8:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c00180c2:	e8 35 fe ff ff       	call   c0017efc <schedule()>
c00180c7:	eb c3                	jmp    c001808c <Semaphore::assertLocked(char const*)+0x38>
c00180c9:	8d 76 00             	lea    esi,[esi+0x0]

c00180cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00180cc:	83 ec 0c             	sub    esp,0xc
c00180cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180d8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00180db:	e8 1c fe ff ff       	call   c0017efc <schedule()>
c00180e0:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00180e5:	48                   	dec    eax
c00180e6:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00180eb:	75 03                	jne    c00180f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00180ed:	fb                   	sti    
c00180ee:	66 90                	xchg   ax,ax
c00180f0:	83 c4 0c             	add    esp,0xc
c00180f3:	c3                   	ret    

c00180f4 <blockTask(TaskState)>:
c00180f4:	83 ec 0c             	sub    esp,0xc
c00180f7:	fa                   	cli    
c00180f8:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c00180fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018102:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018107:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001810a:	e8 ed fd ff ff       	call   c0017efc <schedule()>
c001810f:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018114:	48                   	dec    eax
c0018115:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c001811a:	75 04                	jne    c0018120 <blockTask(TaskState)+0x2c>
c001811c:	fb                   	sti    
c001811d:	8d 76 00             	lea    esi,[esi+0x0]
c0018120:	83 c4 0c             	add    esp,0xc
c0018123:	c3                   	ret    

c0018124 <waitTask(int, int*, int)>:
c0018124:	83 ec 18             	sub    esp,0x18
c0018127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001812c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018130:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018133:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001813c:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001813f:	6a 07                	push   0x7
c0018141:	e8 ae ff ff ff       	call   c00180f4 <blockTask(TaskState)>
c0018146:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001814b:	83 c4 10             	add    esp,0x10
c001814e:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018151:	85 d2                	test   edx,edx
c0018153:	74 0b                	je     c0018160 <waitTask(int, int*, int)+0x3c>
c0018155:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018158:	89 02                	mov    DWORD PTR [edx],eax
c001815a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001815f:	90                   	nop
c0018160:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018163:	83 c4 0c             	add    esp,0xc
c0018166:	c3                   	ret    
c0018167:	90                   	nop

c0018168 <nanoSleepUntil(unsigned long long)>:
c0018168:	83 ec 0c             	sub    esp,0xc
c001816b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001816f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018173:	3b 05 90 6a 02 c0    	cmp    eax,DWORD PTR ds:0xc0026a90
c0018179:	89 d1                	mov    ecx,edx
c001817b:	1b 0d 94 6a 02 c0    	sbb    ecx,DWORD PTR ds:0xc0026a94
c0018181:	73 05                	jae    c0018188 <nanoSleepUntil(unsigned long long)+0x20>
c0018183:	90                   	nop
c0018184:	83 c4 0c             	add    esp,0xc
c0018187:	c3                   	ret    
c0018188:	fa                   	cli    
c0018189:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c001818f:	83 ec 08             	sub    esp,0x8
c0018192:	ff 05 24 79 02 c0    	inc    DWORD PTR ds:0xc0027924
c0018198:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001819e:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c00181a1:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c00181a4:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00181aa:	68 38 79 02 c0       	push   0xc0027938
c00181af:	e8 8c 94 00 00       	call   c0021640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00181b4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00181bb:	e8 34 ff ff ff       	call   c00180f4 <blockTask(TaskState)>
c00181c0:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c00181c5:	83 c4 10             	add    esp,0x10
c00181c8:	48                   	dec    eax
c00181c9:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c00181ce:	85 c0                	test   eax,eax
c00181d0:	75 0a                	jne    c00181dc <nanoSleepUntil(unsigned long long)+0x74>
c00181d2:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c00181d7:	85 c0                	test   eax,eax
c00181d9:	75 15                	jne    c00181f0 <nanoSleepUntil(unsigned long long)+0x88>
c00181db:	90                   	nop
c00181dc:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00181e1:	48                   	dec    eax
c00181e2:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00181e7:	75 9b                	jne    c0018184 <nanoSleepUntil(unsigned long long)+0x1c>
c00181e9:	fb                   	sti    
c00181ea:	83 c4 0c             	add    esp,0xc
c00181ed:	c3                   	ret    
c00181ee:	66 90                	xchg   ax,ax
c00181f0:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c00181fa:	e8 fd fc ff ff       	call   c0017efc <schedule()>
c00181ff:	eb db                	jmp    c00181dc <nanoSleepUntil(unsigned long long)+0x74>
c0018201:	8d 76 00             	lea    esi,[esi+0x0]

c0018204 <nanoSleep(unsigned long long)>:
c0018204:	a1 90 6a 02 c0       	mov    eax,ds:0xc0026a90
c0018209:	8b 15 94 6a 02 c0    	mov    edx,DWORD PTR ds:0xc0026a94
c001820f:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018213:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018217:	e9 4c ff ff ff       	jmp    c0018168 <nanoSleepUntil(unsigned long long)>

c001821c <sleep(unsigned long long)>:
c001821c:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018224:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018229:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001822d:	01 ca                	add    edx,ecx
c001822f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018233:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018237:	eb cb                	jmp    c0018204 <nanoSleep(unsigned long long)>
c0018239:	90                   	nop
c001823a:	66 90                	xchg   ax,ax

c001823c <Semaphore::acquire()>:
c001823c:	83 ec 0c             	sub    esp,0xc
c001823f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018243:	fa                   	cli    
c0018244:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c0018249:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c001824f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018252:	89 0d 24 79 02 c0    	mov    DWORD PTR ds:0xc0027924,ecx
c0018258:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001825b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001825d:	7d 2d                	jge    c001828c <Semaphore::acquire()+0x50>
c001825f:	41                   	inc    ecx
c0018260:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0018263:	90                   	nop
c0018264:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c0018269:	85 c0                	test   eax,eax
c001826b:	75 0b                	jne    c0018278 <Semaphore::acquire()+0x3c>
c001826d:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c0018272:	85 c0                	test   eax,eax
c0018274:	75 62                	jne    c00182d8 <Semaphore::acquire()+0x9c>
c0018276:	66 90                	xchg   ax,ax
c0018278:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c001827d:	48                   	dec    eax
c001827e:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018283:	75 03                	jne    c0018288 <Semaphore::acquire()+0x4c>
c0018285:	fb                   	sti    
c0018286:	66 90                	xchg   ax,ax
c0018288:	83 c4 0c             	add    esp,0xc
c001828b:	c3                   	ret    
c001828c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018291:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018298:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001829b:	85 c9                	test   ecx,ecx
c001829d:	74 4d                	je     c00182ec <Semaphore::acquire()+0xb0>
c001829f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00182a2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00182a8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00182ab:	90                   	nop
c00182ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182b1:	83 ec 0c             	sub    esp,0xc
c00182b4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00182b7:	68 d8 48 02 c0       	push   0xc00248d8
c00182bc:	e8 67 47 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00182c1:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00182c8:	e8 27 fe ff ff       	call   c00180f4 <blockTask(TaskState)>
c00182cd:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c00182d2:	83 c4 10             	add    esp,0x10
c00182d5:	48                   	dec    eax
c00182d6:	eb 8c                	jmp    c0018264 <Semaphore::acquire()+0x28>
c00182d8:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c00182e2:	e8 15 fc ff ff       	call   c0017efc <schedule()>
c00182e7:	eb 8f                	jmp    c0018278 <Semaphore::acquire()+0x3c>
c00182e9:	8d 76 00             	lea    esi,[esi+0x0]
c00182ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182f1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00182f4:	eb b6                	jmp    c00182ac <Semaphore::acquire()+0x70>
c00182f6:	66 90                	xchg   ax,ax

c00182f8 <taskReturned>:
c00182f8:	83 ec 18             	sub    esp,0x18
c00182fb:	68 f8 48 02 c0       	push   0xc00248f8
c0018300:	e8 04 c0 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0018305:	83 c4 10             	add    esp,0x10
c0018308:	83 ec 0c             	sub    esp,0xc
c001830b:	6a 02                	push   0x2
c001830d:	e8 e2 fd ff ff       	call   c00180f4 <blockTask(TaskState)>
c0018312:	fa                   	cli    
c0018313:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0018319:	e8 de fb ff ff       	call   c0017efc <schedule()>
c001831e:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018323:	83 c4 10             	add    esp,0x10
c0018326:	48                   	dec    eax
c0018327:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c001832c:	85 c0                	test   eax,eax
c001832e:	75 d8                	jne    c0018308 <taskReturned+0x10>
c0018330:	fb                   	sti    
c0018331:	eb d5                	jmp    c0018308 <taskReturned+0x10>
c0018333:	90                   	nop

c0018334 <Thr::processFromPID(int)>:
c0018334:	57                   	push   edi
c0018335:	56                   	push   esi
c0018336:	53                   	push   ebx
c0018337:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001833b:	fa                   	cli    
c001833c:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0018342:	83 ec 0c             	sub    esp,0xc
c0018345:	68 44 79 02 c0       	push   0xc0027944
c001834a:	e8 31 92 00 00       	call   c0021580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001834f:	83 c4 10             	add    esp,0x10
c0018352:	89 c7                	mov    edi,eax
c0018354:	eb 16                	jmp    c001836c <Thr::processFromPID(int)+0x38>
c0018356:	66 90                	xchg   ax,ax
c0018358:	83 ec 0c             	sub    esp,0xc
c001835b:	68 44 79 02 c0       	push   0xc0027944
c0018360:	e8 1b 92 00 00       	call   c0021580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018365:	83 c4 10             	add    esp,0x10
c0018368:	39 f8                	cmp    eax,edi
c001836a:	74 4c                	je     c00183b8 <Thr::processFromPID(int)+0x84>
c001836c:	83 ec 0c             	sub    esp,0xc
c001836f:	68 44 79 02 c0       	push   0xc0027944
c0018374:	e8 07 92 00 00       	call   c0021580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018379:	c7 04 24 44 79 02 c0 	mov    DWORD PTR [esp],0xc0027944
c0018380:	89 c3                	mov    ebx,eax
c0018382:	e8 01 92 00 00       	call   c0021588 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018387:	58                   	pop    eax
c0018388:	5a                   	pop    edx
c0018389:	53                   	push   ebx
c001838a:	68 44 79 02 c0       	push   0xc0027944
c001838f:	e8 ac 92 00 00       	call   c0021640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018394:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018397:	83 c4 10             	add    esp,0x10
c001839a:	39 30                	cmp    DWORD PTR [eax],esi
c001839c:	75 ba                	jne    c0018358 <Thr::processFromPID(int)+0x24>
c001839e:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00183a3:	48                   	dec    eax
c00183a4:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00183a9:	74 09                	je     c00183b4 <Thr::processFromPID(int)+0x80>
c00183ab:	90                   	nop
c00183ac:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00183af:	5b                   	pop    ebx
c00183b0:	5e                   	pop    esi
c00183b1:	5f                   	pop    edi
c00183b2:	c3                   	ret    
c00183b3:	90                   	nop
c00183b4:	fb                   	sti    
c00183b5:	eb f5                	jmp    c00183ac <Thr::processFromPID(int)+0x78>
c00183b7:	90                   	nop
c00183b8:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00183bd:	48                   	dec    eax
c00183be:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00183c3:	75 07                	jne    c00183cc <Thr::processFromPID(int)+0x98>
c00183c5:	fb                   	sti    
c00183c6:	5b                   	pop    ebx
c00183c7:	5e                   	pop    esi
c00183c8:	5f                   	pop    edi
c00183c9:	c3                   	ret    
c00183ca:	66 90                	xchg   ax,ax
c00183cc:	5b                   	pop    ebx
c00183cd:	31 c0                	xor    eax,eax
c00183cf:	5e                   	pop    esi
c00183d0:	5f                   	pop    edi
c00183d1:	c3                   	ret    
c00183d2:	66 90                	xchg   ax,ax

c00183d4 <unblockTask(ThreadControlBlock*)>:
c00183d4:	53                   	push   ebx
c00183d5:	83 ec 08             	sub    esp,0x8
c00183d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183dc:	fa                   	cli    
c00183dd:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c00183e3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00183e6:	85 c0                	test   eax,eax
c00183e8:	74 66                	je     c0018450 <unblockTask(ThreadControlBlock*)+0x7c>
c00183ea:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00183ed:	48                   	dec    eax
c00183ee:	74 38                	je     c0018428 <unblockTask(ThreadControlBlock*)+0x54>
c00183f0:	83 ec 0c             	sub    esp,0xc
c00183f3:	68 44 79 02 c0       	push   0xc0027944
c00183f8:	e8 83 91 00 00       	call   c0021580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183fd:	83 c4 10             	add    esp,0x10
c0018400:	85 c0                	test   eax,eax
c0018402:	75 1c                	jne    c0018420 <unblockTask(ThreadControlBlock*)+0x4c>
c0018404:	eb 5e                	jmp    c0018464 <unblockTask(ThreadControlBlock*)+0x90>
c0018406:	66 90                	xchg   ax,ax
c0018408:	83 ec 08             	sub    esp,0x8
c001840b:	50                   	push   eax
c001840c:	68 44 79 02 c0       	push   0xc0027944
c0018411:	e8 1a 95 00 00       	call   c0021930 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018416:	83 c4 10             	add    esp,0x10
c0018419:	85 c0                	test   eax,eax
c001841b:	74 47                	je     c0018464 <unblockTask(ThreadControlBlock*)+0x90>
c001841d:	8d 76 00             	lea    esi,[esi+0x0]
c0018420:	39 c3                	cmp    ebx,eax
c0018422:	75 e4                	jne    c0018408 <unblockTask(ThreadControlBlock*)+0x34>
c0018424:	eb 12                	jmp    c0018438 <unblockTask(ThreadControlBlock*)+0x64>
c0018426:	66 90                	xchg   ax,ax
c0018428:	83 ec 0c             	sub    esp,0xc
c001842b:	68 7a 48 02 c0       	push   0xc002487a
c0018430:	e8 f3 45 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c0018435:	83 c4 10             	add    esp,0x10
c0018438:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c001843d:	48                   	dec    eax
c001843e:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018443:	75 03                	jne    c0018448 <unblockTask(ThreadControlBlock*)+0x74>
c0018445:	fb                   	sti    
c0018446:	66 90                	xchg   ax,ax
c0018448:	83 c4 08             	add    esp,0x8
c001844b:	5b                   	pop    ebx
c001844c:	c3                   	ret    
c001844d:	8d 76 00             	lea    esi,[esi+0x0]
c0018450:	83 ec 0c             	sub    esp,0xc
c0018453:	68 63 48 02 c0       	push   0xc0024863
c0018458:	e8 cb 45 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001845d:	83 c4 10             	add    esp,0x10
c0018460:	eb d6                	jmp    c0018438 <unblockTask(ThreadControlBlock*)+0x64>
c0018462:	66 90                	xchg   ax,ax
c0018464:	83 ec 08             	sub    esp,0x8
c0018467:	53                   	push   ebx
c0018468:	68 44 79 02 c0       	push   0xc0027944
c001846d:	e8 ce 91 00 00       	call   c0021640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018472:	83 c4 10             	add    esp,0x10
c0018475:	eb c1                	jmp    c0018438 <unblockTask(ThreadControlBlock*)+0x64>
c0018477:	90                   	nop

c0018478 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018478:	55                   	push   ebp
c0018479:	57                   	push   edi
c001847a:	56                   	push   esi
c001847b:	53                   	push   ebx
c001847c:	83 ec 1c             	sub    esp,0x1c
c001847f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018483:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018486:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001848c:	85 ff                	test   edi,edi
c001848e:	7e 24                	jle    c00184b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018490:	31 f6                	xor    esi,esi
c0018492:	66 90                	xchg   ax,ax
c0018494:	83 ec 0c             	sub    esp,0xc
c0018497:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001849e:	46                   	inc    esi
c001849f:	e8 2f 15 ff ff       	call   c00099d3 <free>
c00184a4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00184a7:	83 c4 10             	add    esp,0x10
c00184aa:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c00184b0:	7f e2                	jg     c0018494 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00184b2:	66 90                	xchg   ax,ax
c00184b4:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c00184be:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00184c3:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c00184c6:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00184c9:	d3 c0                	rol    eax,cl
c00184cb:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c00184d2:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00184d5:	89 f7                	mov    edi,esi
c00184d7:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c00184df:	0f 85 77 01 00 00    	jne    c001865c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c00184e5:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c00184eb:	85 ed                	test   ebp,ebp
c00184ed:	74 1d                	je     c001850c <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00184ef:	83 ec 0c             	sub    esp,0xc
c00184f2:	55                   	push   ebp
c00184f3:	e8 b6 bb ff ff       	call   c00140ae <EnvVarContainer::~EnvVarContainer()>
c00184f8:	59                   	pop    ecx
c00184f9:	5e                   	pop    esi
c00184fa:	6a 0c                	push   0xc
c00184fc:	55                   	push   ebp
c00184fd:	e8 45 44 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0018502:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018505:	83 c4 10             	add    esp,0x10
c0018508:	89 f7                	mov    edi,esi
c001850a:	66 90                	xchg   ax,ax
c001850c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018512:	85 c0                	test   eax,eax
c0018514:	0f 84 b6 00 00 00    	je     c00185d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c001851a:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001851d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018521:	31 c9                	xor    ecx,ecx
c0018523:	eb 17                	jmp    c001853c <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018525:	8d 76 00             	lea    esi,[esi+0x0]
c0018528:	41                   	inc    ecx
c0018529:	83 f9 10             	cmp    ecx,0x10
c001852c:	0f 84 9e 00 00 00    	je     c00185d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0018532:	66 90                	xchg   ax,ax
c0018534:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001853a:	66 90                	xchg   ax,ax
c001853c:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c0018543:	d3 fa                	sar    edx,cl
c0018545:	83 e2 01             	and    edx,0x1
c0018548:	74 de                	je     c0018528 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001854a:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001854d:	01 ca                	add    edx,ecx
c001854f:	89 d5                	mov    ebp,edx
c0018551:	c1 e5 05             	shl    ebp,0x5
c0018554:	01 ea                	add    edx,ebp
c0018556:	01 d0                	add    eax,edx
c0018558:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001855e:	83 fd 07             	cmp    ebp,0x7
c0018561:	75 c5                	jne    c0018528 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018563:	05 40 02 00 00       	add    eax,0x240
c0018568:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001856b:	83 fd ff             	cmp    ebp,0xffffffff
c001856e:	0f 8c f0 00 00 00    	jl     c0018664 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0018574:	0f 84 ae 01 00 00    	je     c0018728 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c001857a:	85 ed                	test   ebp,ebp
c001857c:	0f 84 92 01 00 00    	je     c0018714 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0018582:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018584:	75 a2                	jne    c0018528 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018586:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001858c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018590:	01 d0                	add    eax,edx
c0018592:	66 90                	xchg   ax,ax
c0018594:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018598:	83 ec 0c             	sub    esp,0xc
c001859b:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c00185a1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00185a4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00185aa:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00185b1:	50                   	push   eax
c00185b2:	e8 1d fe ff ff       	call   c00183d4 <unblockTask(ThreadControlBlock*)>
c00185b7:	83 c4 10             	add    esp,0x10
c00185ba:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00185bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185c1:	89 f7                	mov    edi,esi
c00185c3:	41                   	inc    ecx
c00185c4:	83 f9 10             	cmp    ecx,0x10
c00185c7:	0f 85 67 ff ff ff    	jne    c0018534 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00185cd:	8d 76 00             	lea    esi,[esi+0x0]
c00185d0:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c00185d6:	85 c0                	test   eax,eax
c00185d8:	74 62                	je     c001863c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c00185da:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c00185e0:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c00185e6:	74 54                	je     c001863c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c00185e8:	83 ec 0c             	sub    esp,0xc
c00185eb:	68 44 79 02 c0       	push   0xc0027944
c00185f0:	e8 8b 8f 00 00       	call   c0021580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00185f5:	c7 04 24 44 79 02 c0 	mov    DWORD PTR [esp],0xc0027944
c00185fc:	89 c7                	mov    edi,eax
c00185fe:	e8 61 8f 00 00       	call   c0021564 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018603:	83 c4 10             	add    esp,0x10
c0018606:	84 c0                	test   al,al
c0018608:	0f 84 ce 00 00 00    	je     c00186dc <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c001860e:	66 90                	xchg   ax,ax
c0018610:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018613:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018619:	85 d2                	test   edx,edx
c001861b:	74 0f                	je     c001862c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c001861d:	83 ec 0c             	sub    esp,0xc
c0018620:	8b 02                	mov    eax,DWORD PTR [edx]
c0018622:	52                   	push   edx
c0018623:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018626:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018629:	83 c4 10             	add    esp,0x10
c001862c:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c0018636:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018639:	8d 76 00             	lea    esi,[esi+0x0]
c001863c:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c0018642:	85 db                	test   ebx,ebx
c0018644:	74 16                	je     c001865c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0018646:	83 ec 0c             	sub    esp,0xc
c0018649:	53                   	push   ebx
c001864a:	e8 29 35 ff ff       	call   c000bb78 <VAS::~VAS()>
c001864f:	58                   	pop    eax
c0018650:	5a                   	pop    edx
c0018651:	6a 14                	push   0x14
c0018653:	53                   	push   ebx
c0018654:	e8 ee 42 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0018659:	83 c4 10             	add    esp,0x10
c001865c:	83 c4 1c             	add    esp,0x1c
c001865f:	5b                   	pop    ebx
c0018660:	5e                   	pop    esi
c0018661:	5f                   	pop    edi
c0018662:	5d                   	pop    ebp
c0018663:	c3                   	ret    
c0018664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018668:	83 ec 0c             	sub    esp,0xc
c001866b:	68 2c 49 02 c0       	push   0xc002492c
c0018670:	e8 94 bc ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0018675:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018678:	83 c4 10             	add    esp,0x10
c001867b:	89 f7                	mov    edi,esi
c001867d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018681:	e9 a2 fe ff ff       	jmp    c0018528 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018686:	66 90                	xchg   ax,ax
c0018688:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001868e:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c0018694:	75 1e                	jne    c00186b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0018696:	83 ec 0c             	sub    esp,0xc
c0018699:	68 94 49 02 c0       	push   0xc0024994
c001869e:	e8 85 43 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00186a3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00186aa:	e8 45 fa ff ff       	call   c00180f4 <blockTask(TaskState)>
c00186af:	83 c4 10             	add    esp,0x10
c00186b2:	66 90                	xchg   ax,ax
c00186b4:	83 ec 08             	sub    esp,0x8
c00186b7:	56                   	push   esi
c00186b8:	68 44 79 02 c0       	push   0xc0027944
c00186bd:	e8 7e 8f 00 00       	call   c0021640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00186c2:	c7 04 24 44 79 02 c0 	mov    DWORD PTR [esp],0xc0027944
c00186c9:	e8 b2 8e 00 00       	call   c0021580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186ce:	83 c4 10             	add    esp,0x10
c00186d1:	39 f8                	cmp    eax,edi
c00186d3:	0f 84 37 ff ff ff    	je     c0018610 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c00186d9:	8d 76 00             	lea    esi,[esi+0x0]
c00186dc:	83 ec 0c             	sub    esp,0xc
c00186df:	68 44 79 02 c0       	push   0xc0027944
c00186e4:	e8 97 8e 00 00       	call   c0021580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186e9:	c7 04 24 44 79 02 c0 	mov    DWORD PTR [esp],0xc0027944
c00186f0:	89 c6                	mov    esi,eax
c00186f2:	e8 91 8e 00 00       	call   c0021588 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00186f7:	83 c4 10             	add    esp,0x10
c00186fa:	39 f3                	cmp    ebx,esi
c00186fc:	74 b6                	je     c00186b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00186fe:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0018701:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018704:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001870a:	75 a8                	jne    c00186b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001870c:	e9 77 ff ff ff       	jmp    c0018688 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0018711:	8d 76 00             	lea    esi,[esi+0x0]
c0018714:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018718:	83 ec 0c             	sub    esp,0xc
c001871b:	68 60 49 02 c0       	push   0xc0024960
c0018720:	e9 4b ff ff ff       	jmp    c0018670 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0018725:	8d 76 00             	lea    esi,[esi+0x0]
c0018728:	8b 36                	mov    esi,DWORD PTR [esi]
c001872a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001872e:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0018731:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018734:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001873a:	01 d7                	add    edi,edx
c001873c:	89 f8                	mov    eax,edi
c001873e:	e9 51 fe ff ff       	jmp    c0018594 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0018743:	90                   	nop

c0018744 <cleanerTaskFunction(void*)>:
c0018744:	53                   	push   ebx
c0018745:	83 ec 08             	sub    esp,0x8
c0018748:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c001874d:	48                   	dec    eax
c001874e:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018753:	75 03                	jne    c0018758 <cleanerTaskFunction(void*)+0x14>
c0018755:	fb                   	sti    
c0018756:	66 90                	xchg   ax,ax
c0018758:	fa                   	cli    
c0018759:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c001875e:	80 3d 0c 79 02 c0 00 	cmp    BYTE PTR ds:0xc002790c,0x0
c0018765:	8d 50 01             	lea    edx,[eax+0x1]
c0018768:	89 15 28 79 02 c0    	mov    DWORD PTR ds:0xc0027928,edx
c001876e:	0f 84 ac 00 00 00    	je     c0018820 <cleanerTaskFunction(void*)+0xdc>
c0018774:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018779:	85 c0                	test   eax,eax
c001877b:	75 03                	jne    c0018780 <cleanerTaskFunction(void*)+0x3c>
c001877d:	fb                   	sti    
c001877e:	66 90                	xchg   ax,ax
c0018780:	c6 05 0c 79 02 c0 00 	mov    BYTE PTR ds:0xc002790c,0x0
c0018787:	fa                   	cli    
c0018788:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c001878e:	ff 05 24 79 02 c0    	inc    DWORD PTR ds:0xc0027924
c0018794:	fa                   	cli    
c0018795:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c001879b:	eb 2b                	jmp    c00187c8 <cleanerTaskFunction(void*)+0x84>
c001879d:	8d 76 00             	lea    esi,[esi+0x0]
c00187a0:	83 ec 0c             	sub    esp,0xc
c00187a3:	68 2c 79 02 c0       	push   0xc002792c
c00187a8:	e8 d3 8d 00 00       	call   c0021580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00187ad:	c7 04 24 2c 79 02 c0 	mov    DWORD PTR [esp],0xc002792c
c00187b4:	89 c3                	mov    ebx,eax
c00187b6:	e8 cd 8d 00 00       	call   c0021588 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00187bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187be:	e8 b5 fc ff ff       	call   c0018478 <cleanupTerminatedTask(ThreadControlBlock*)>
c00187c3:	83 c4 10             	add    esp,0x10
c00187c6:	66 90                	xchg   ax,ax
c00187c8:	83 ec 0c             	sub    esp,0xc
c00187cb:	68 2c 79 02 c0       	push   0xc002792c
c00187d0:	e8 8f 8d 00 00       	call   c0021564 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00187d5:	83 c4 10             	add    esp,0x10
c00187d8:	84 c0                	test   al,al
c00187da:	74 c4                	je     c00187a0 <cleanerTaskFunction(void*)+0x5c>
c00187dc:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00187e1:	48                   	dec    eax
c00187e2:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00187e7:	75 03                	jne    c00187ec <cleanerTaskFunction(void*)+0xa8>
c00187e9:	fb                   	sti    
c00187ea:	66 90                	xchg   ax,ax
c00187ec:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c00187f1:	48                   	dec    eax
c00187f2:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c00187f7:	0f 85 4b ff ff ff    	jne    c0018748 <cleanerTaskFunction(void*)+0x4>
c00187fd:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c0018802:	85 c0                	test   eax,eax
c0018804:	0f 84 3e ff ff ff    	je     c0018748 <cleanerTaskFunction(void*)+0x4>
c001880a:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c0018814:	e8 e3 f6 ff ff       	call   c0017efc <schedule()>
c0018819:	e9 2a ff ff ff       	jmp    c0018748 <cleanerTaskFunction(void*)+0x4>
c001881e:	66 90                	xchg   ax,ax
c0018820:	83 ec 0c             	sub    esp,0xc
c0018823:	6a 02                	push   0x2
c0018825:	e8 a2 f8 ff ff       	call   c00180cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001882a:	83 c4 10             	add    esp,0x10
c001882d:	e9 4e ff ff ff       	jmp    c0018780 <cleanerTaskFunction(void*)+0x3c>
c0018832:	66 90                	xchg   ax,ax

c0018834 <terminateTask(int)>:
c0018834:	83 ec 14             	sub    esp,0x14
c0018837:	fa                   	cli    
c0018838:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c001883e:	ff 05 24 79 02 c0    	inc    DWORD PTR ds:0xc0027924
c0018844:	fa                   	cli    
c0018845:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c001884b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001884f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018854:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0018857:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001885c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001885f:	50                   	push   eax
c0018860:	68 2c 79 02 c0       	push   0xc002792c
c0018865:	e8 d6 8d 00 00       	call   c0021640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001886a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001886f:	83 c4 10             	add    esp,0x10
c0018872:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018879:	a1 08 79 02 c0       	mov    eax,ds:0xc0027908
c001887e:	85 c0                	test   eax,eax
c0018880:	74 5e                	je     c00188e0 <terminateTask(int)+0xac>
c0018882:	83 ec 0c             	sub    esp,0xc
c0018885:	c6 05 0c 79 02 c0 01 	mov    BYTE PTR ds:0xc002790c,0x1
c001888c:	50                   	push   eax
c001888d:	e8 42 fb ff ff       	call   c00183d4 <unblockTask(ThreadControlBlock*)>
c0018892:	83 c4 10             	add    esp,0x10
c0018895:	8d 76 00             	lea    esi,[esi+0x0]
c0018898:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c001889d:	48                   	dec    eax
c001889e:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00188a3:	75 03                	jne    c00188a8 <terminateTask(int)+0x74>
c00188a5:	fb                   	sti    
c00188a6:	66 90                	xchg   ax,ax
c00188a8:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c00188ad:	48                   	dec    eax
c00188ae:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c00188b3:	75 0b                	jne    c00188c0 <terminateTask(int)+0x8c>
c00188b5:	83 3d 20 79 02 c0 00 	cmp    DWORD PTR ds:0xc0027920,0x0
c00188bc:	75 36                	jne    c00188f4 <terminateTask(int)+0xc0>
c00188be:	66 90                	xchg   ax,ax
c00188c0:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00188c5:	48                   	dec    eax
c00188c6:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00188cb:	75 03                	jne    c00188d0 <terminateTask(int)+0x9c>
c00188cd:	fb                   	sti    
c00188ce:	66 90                	xchg   ax,ax
c00188d0:	fa                   	cli    
c00188d1:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c00188d7:	90                   	nop
c00188d8:	e8 1f f6 ff ff       	call   c0017efc <schedule()>
c00188dd:	eb e1                	jmp    c00188c0 <terminateTask(int)+0x8c>
c00188df:	90                   	nop
c00188e0:	83 ec 0c             	sub    esp,0xc
c00188e3:	68 91 48 02 c0       	push   0xc0024891
c00188e8:	e8 3b 41 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00188ed:	83 c4 10             	add    esp,0x10
c00188f0:	eb a6                	jmp    c0018898 <terminateTask(int)+0x64>
c00188f2:	66 90                	xchg   ax,ax
c00188f4:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c00188fe:	eb d8                	jmp    c00188d8 <terminateTask(int)+0xa4>

c0018900 <Thr::terminateFromIRQ(int)>:
c0018900:	83 ec 18             	sub    esp,0x18
c0018903:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018907:	e8 28 ff ff ff       	call   c0018834 <terminateTask(int)>

c001890c <Semaphore::release()>:
c001890c:	83 ec 0c             	sub    esp,0xc
c001890f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018913:	fa                   	cli    
c0018914:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c0018919:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c001891f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018922:	89 0d 24 79 02 c0    	mov    DWORD PTR ds:0xc0027924,ecx
c0018928:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001892b:	85 c9                	test   ecx,ecx
c001892d:	74 41                	je     c0018970 <Semaphore::release()+0x64>
c001892f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0018932:	83 ec 0c             	sub    esp,0xc
c0018935:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018938:	51                   	push   ecx
c0018939:	e8 96 fa ff ff       	call   c00183d4 <unblockTask(ThreadControlBlock*)>
c001893e:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c0018943:	83 c4 10             	add    esp,0x10
c0018946:	48                   	dec    eax
c0018947:	90                   	nop
c0018948:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c001894d:	85 c0                	test   eax,eax
c001894f:	75 0b                	jne    c001895c <Semaphore::release()+0x50>
c0018951:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c0018956:	85 c0                	test   eax,eax
c0018958:	75 1e                	jne    c0018978 <Semaphore::release()+0x6c>
c001895a:	66 90                	xchg   ax,ax
c001895c:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018961:	48                   	dec    eax
c0018962:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018967:	75 03                	jne    c001896c <Semaphore::release()+0x60>
c0018969:	fb                   	sti    
c001896a:	66 90                	xchg   ax,ax
c001896c:	83 c4 0c             	add    esp,0xc
c001896f:	c3                   	ret    
c0018970:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0018973:	eb d3                	jmp    c0018948 <Semaphore::release()+0x3c>
c0018975:	8d 76 00             	lea    esi,[esi+0x0]
c0018978:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c0018982:	e8 75 f5 ff ff       	call   c0017efc <schedule()>
c0018987:	eb d3                	jmp    c001895c <Semaphore::release()+0x50>
c0018989:	8d 76 00             	lea    esi,[esi+0x0]

c001898c <__static_initialization_and_destruction_0(int, int)>:
c001898c:	83 ec 0c             	sub    esp,0xc
c001898f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018994:	0f 85 8e 00 00 00    	jne    c0018a28 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001899a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00189a2:	0f 85 80 00 00 00    	jne    c0018a28 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00189a8:	83 ec 0c             	sub    esp,0xc
c00189ab:	68 44 79 02 c0       	push   0xc0027944
c00189b0:	e8 37 8f 00 00       	call   c00218ec <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00189b5:	83 c4 10             	add    esp,0x10
c00189b8:	83 ec 04             	sub    esp,0x4
c00189bb:	68 88 56 02 c0       	push   0xc0025688
c00189c0:	68 44 79 02 c0       	push   0xc0027944
c00189c5:	68 9c 18 02 c0       	push   0xc002189c
c00189ca:	e8 f2 3e ff ff       	call   c000c8c1 <__cxa_atexit>
c00189cf:	83 c4 10             	add    esp,0x10
c00189d2:	83 ec 0c             	sub    esp,0xc
c00189d5:	68 38 79 02 c0       	push   0xc0027938
c00189da:	e8 0d 8f 00 00       	call   c00218ec <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00189df:	83 c4 10             	add    esp,0x10
c00189e2:	83 ec 04             	sub    esp,0x4
c00189e5:	68 88 56 02 c0       	push   0xc0025688
c00189ea:	68 38 79 02 c0       	push   0xc0027938
c00189ef:	68 9c 18 02 c0       	push   0xc002189c
c00189f4:	e8 c8 3e ff ff       	call   c000c8c1 <__cxa_atexit>
c00189f9:	83 c4 10             	add    esp,0x10
c00189fc:	83 ec 0c             	sub    esp,0xc
c00189ff:	68 2c 79 02 c0       	push   0xc002792c
c0018a04:	e8 e3 8e 00 00       	call   c00218ec <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018a09:	83 c4 10             	add    esp,0x10
c0018a0c:	83 ec 04             	sub    esp,0x4
c0018a0f:	68 88 56 02 c0       	push   0xc0025688
c0018a14:	68 2c 79 02 c0       	push   0xc002792c
c0018a19:	68 9c 18 02 c0       	push   0xc002189c
c0018a1e:	e8 9e 3e ff ff       	call   c000c8c1 <__cxa_atexit>
c0018a23:	83 c4 10             	add    esp,0x10
c0018a26:	66 90                	xchg   ax,ax
c0018a28:	90                   	nop
c0018a29:	83 c4 0c             	add    esp,0xc
c0018a2c:	c3                   	ret    
c0018a2d:	8d 76 00             	lea    esi,[esi+0x0]

c0018a30 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018a30:	83 ec 0c             	sub    esp,0xc
c0018a33:	83 ec 08             	sub    esp,0x8
c0018a36:	68 ff ff 00 00       	push   0xffff
c0018a3b:	6a 01                	push   0x1
c0018a3d:	e8 4a ff ff ff       	call   c001898c <__static_initialization_and_destruction_0(int, int)>
c0018a42:	83 c4 10             	add    esp,0x10
c0018a45:	83 c4 0c             	add    esp,0xc
c0018a48:	c3                   	ret    

c0018a49 <Vm::inbv(unsigned short)>:
c0018a49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a4d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018a52:	75 06                	jne    c0018a5a <Vm::inbv(unsigned short)+0x11>
c0018a54:	a0 8c 79 02 c0       	mov    al,ds:0xc002798c
c0018a59:	c3                   	ret    
c0018a5a:	ec                   	in     al,dx
c0018a5b:	c3                   	ret    

c0018a5c <Vm::outbv(unsigned short, unsigned char)>:
c0018a5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a64:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018a69:	75 25                	jne    c0018a90 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018a6b:	8b 0d 8c 79 02 c0    	mov    ecx,DWORD PTR ds:0xc002798c
c0018a71:	8d 51 01             	lea    edx,[ecx+0x1]
c0018a74:	88 81 a0 79 02 c0    	mov    BYTE PTR [ecx-0x3ffd8660],al
c0018a7a:	89 15 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,edx
c0018a80:	83 fa 20             	cmp    edx,0x20
c0018a83:	75 0c                	jne    c0018a91 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018a85:	c7 05 8c 79 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x1f
c0018a8f:	c3                   	ret    
c0018a90:	ee                   	out    dx,al
c0018a91:	c3                   	ret    

c0018a92 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018a92:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018a97:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018a9c:	c1 e0 04             	shl    eax,0x4
c0018a9f:	01 d0                	add    eax,edx
c0018aa1:	c3                   	ret    

c0018aa2 <Vm::getSegment(unsigned int)>:
c0018aa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018aa6:	c1 e8 10             	shr    eax,0x10
c0018aa9:	c3                   	ret    

c0018aaa <Vm::getOffset(unsigned int)>:
c0018aaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018aae:	c3                   	ret    

c0018aaf <Vm::mainloop2()>:
c0018aaf:	83 ec 18             	sub    esp,0x18
c0018ab2:	fa                   	cli    
c0018ab3:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0018ab9:	6a 02                	push   0x2
c0018abb:	c6 05 85 79 02 c0 01 	mov    BYTE PTR ds:0xc0027985,0x1
c0018ac2:	e8 05 f6 ff ff       	call   c00180cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018ac7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018acc:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0018ad0:	52                   	push   edx
c0018ad1:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0018ad5:	52                   	push   edx
c0018ad6:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018ada:	52                   	push   edx
c0018adb:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0018adf:	50                   	push   eax
c0018ae0:	e8 4a 77 fe ff       	call   c000022f <goToVM86>
c0018ae5:	83 c4 2c             	add    esp,0x2c
c0018ae8:	c3                   	ret    

c0018ae9 <Vm::mainVm8086Loop(void*)>:
c0018ae9:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018aee:	48                   	dec    eax
c0018aef:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018af4:	75 01                	jne    c0018af7 <Vm::mainVm8086Loop(void*)+0xe>
c0018af6:	fb                   	sti    
c0018af7:	eb b6                	jmp    c0018aaf <Vm::mainloop2()>

c0018af9 <Vm::mainloop3(unsigned long)>:
c0018af9:	83 ec 18             	sub    esp,0x18
c0018afc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b00:	fa                   	cli    
c0018b01:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0018b07:	6a 02                	push   0x2
c0018b09:	c6 05 84 79 02 c0 01 	mov    BYTE PTR ds:0xc0027984,0x1
c0018b10:	a3 80 79 02 c0       	mov    ds:0xc0027980,eax
c0018b15:	e8 b2 f5 ff ff       	call   c00180cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018b1a:	83 c4 1c             	add    esp,0x1c
c0018b1d:	eb 90                	jmp    c0018aaf <Vm::mainloop2()>

c0018b1f <Vm::initialise8086()>:
c0018b1f:	83 ec 0c             	sub    esp,0xc
c0018b22:	68 80 00 00 00       	push   0x80
c0018b27:	6a 00                	push   0x0
c0018b29:	68 e9 8a 01 c0       	push   0xc0018ae9
c0018b2e:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c0018b34:	e8 93 f1 ff ff       	call   c0017ccc <Process::createThread(void (*)(void*), void*, int)>
c0018b39:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018b40:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0018b45:	68 00 01 00 00       	push   0x100
c0018b4a:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0018b4f:	6a 00                	push   0x0
c0018b51:	6a 00                	push   0x0
c0018b53:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0018b59:	e8 8c 34 ff ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018b5e:	83 c4 2c             	add    esp,0x2c
c0018b61:	c3                   	ret    

c0018b62 <Vm::finish8086()>:
c0018b62:	53                   	push   ebx
c0018b63:	83 ec 08             	sub    esp,0x8
c0018b66:	fa                   	cli    
c0018b67:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0018b6d:	80 3d 84 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027984,0x0
c0018b74:	75 15                	jne    c0018b8b <Vm::finish8086()+0x29>
c0018b76:	e8 81 f3 ff ff       	call   c0017efc <schedule()>
c0018b7b:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018b80:	48                   	dec    eax
c0018b81:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018b86:	75 de                	jne    c0018b66 <Vm::finish8086()+0x4>
c0018b88:	fb                   	sti    
c0018b89:	eb db                	jmp    c0018b66 <Vm::finish8086()+0x4>
c0018b8b:	83 ec 0c             	sub    esp,0xc
c0018b8e:	8b 1d 80 79 02 c0    	mov    ebx,DWORD PTR ds:0xc0027980
c0018b94:	ff 35 88 79 02 c0    	push   DWORD PTR ds:0xc0027988
c0018b9a:	c6 05 84 79 02 c0 00 	mov    BYTE PTR ds:0xc0027984,0x0
c0018ba1:	e8 2e f8 ff ff       	call   c00183d4 <unblockTask(ThreadControlBlock*)>
c0018ba6:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018bab:	83 c4 10             	add    esp,0x10
c0018bae:	8d 50 ff             	lea    edx,[eax-0x1]
c0018bb1:	89 15 28 79 02 c0    	mov    DWORD PTR ds:0xc0027928,edx
c0018bb7:	85 d2                	test   edx,edx
c0018bb9:	75 01                	jne    c0018bbc <Vm::finish8086()+0x5a>
c0018bbb:	fb                   	sti    
c0018bbc:	89 d8                	mov    eax,ebx
c0018bbe:	83 c4 08             	add    esp,0x8
c0018bc1:	5b                   	pop    ebx
c0018bc2:	c3                   	ret    

c0018bc3 <Vm::getOutput8086(unsigned char*)>:
c0018bc3:	57                   	push   edi
c0018bc4:	8b 0d 8c 79 02 c0    	mov    ecx,DWORD PTR ds:0xc002798c
c0018bca:	56                   	push   esi
c0018bcb:	be a0 79 02 c0       	mov    esi,0xc00279a0
c0018bd0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018bd4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018bd6:	a1 8c 79 02 c0       	mov    eax,ds:0xc002798c
c0018bdb:	5e                   	pop    esi
c0018bdc:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c0018be6:	5f                   	pop    edi
c0018be7:	c3                   	ret    

c0018be8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018be8:	55                   	push   ebp
c0018be9:	57                   	push   edi
c0018bea:	56                   	push   esi
c0018beb:	53                   	push   ebx
c0018bec:	83 ec 2c             	sub    esp,0x2c
c0018bef:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0018bf3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018bf7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0018bfb:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0018bff:	fa                   	cli    
c0018c00:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0018c06:	0f b6 35 85 79 02 c0 	movzx  esi,BYTE PTR ds:0xc0027985
c0018c0d:	89 f0                	mov    eax,esi
c0018c0f:	84 c0                	test   al,al
c0018c11:	75 1d                	jne    c0018c30 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0018c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c17:	e8 e0 f2 ff ff       	call   c0017efc <schedule()>
c0018c1c:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018c21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c25:	48                   	dec    eax
c0018c26:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018c2b:	75 d2                	jne    c0018bff <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018c2d:	fb                   	sti    
c0018c2e:	eb cf                	jmp    c0018bff <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018c30:	a1 88 79 02 c0       	mov    eax,ds:0xc0027988
c0018c35:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c0018c3f:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0018c43:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c0018c47:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0018c4b:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c0018c4f:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0018c53:	50                   	push   eax
c0018c54:	6a 20                	push   0x20
c0018c56:	6a 00                	push   0x0
c0018c58:	68 a0 79 02 c0       	push   0xc00279a0
c0018c5d:	e8 22 7a fe ff       	call   c0000684 <memset>
c0018c62:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018c69:	e8 55 0d ff ff       	call   c00099c3 <malloc>
c0018c6e:	83 c4 0c             	add    esp,0xc
c0018c71:	89 c3                	mov    ebx,eax
c0018c73:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c0018c79:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c7d:	50                   	push   eax
c0018c7e:	e8 0f 43 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c0018c83:	83 c4 10             	add    esp,0x10
c0018c86:	85 db                	test   ebx,ebx
c0018c88:	75 0a                	jne    c0018c94 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0018c8a:	83 ec 0c             	sub    esp,0xc
c0018c8d:	68 bc 49 02 c0       	push   0xc00249bc
c0018c92:	eb 3e                	jmp    c0018cd2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018c94:	50                   	push   eax
c0018c95:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018c99:	50                   	push   eax
c0018c9a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018c9e:	50                   	push   eax
c0018c9f:	53                   	push   ebx
c0018ca0:	e8 fd 45 ff ff       	call   c000d2a2 <File::stat(unsigned long long*, bool*)>
c0018ca5:	83 c4 10             	add    esp,0x10
c0018ca8:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0018cad:	74 0a                	je     c0018cb9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0018caf:	83 ec 0c             	sub    esp,0xc
c0018cb2:	68 d0 49 02 c0       	push   0xc00249d0
c0018cb7:	eb 19                	jmp    c0018cd2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018cb9:	51                   	push   ecx
c0018cba:	51                   	push   ecx
c0018cbb:	6a 01                	push   0x1
c0018cbd:	53                   	push   ebx
c0018cbe:	e8 33 43 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c0018cc3:	83 c4 10             	add    esp,0x10
c0018cc6:	85 c0                	test   eax,eax
c0018cc8:	74 24                	je     c0018cee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0018cca:	83 ec 0c             	sub    esp,0xc
c0018ccd:	68 e9 49 02 c0       	push   0xc00249e9
c0018cd2:	e8 32 b6 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0018cd7:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018cdc:	83 c4 10             	add    esp,0x10
c0018cdf:	48                   	dec    eax
c0018ce0:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018ce5:	85 c0                	test   eax,eax
c0018ce7:	75 01                	jne    c0018cea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0018ce9:	fb                   	sti    
c0018cea:	31 f6                	xor    esi,esi
c0018cec:	eb 58                	jmp    c0018d46 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0018cee:	0f b7 ed             	movzx  ebp,bp
c0018cf1:	50                   	push   eax
c0018cf2:	0f b7 ff             	movzx  edi,di
c0018cf5:	50                   	push   eax
c0018cf6:	55                   	push   ebp
c0018cf7:	57                   	push   edi
c0018cf8:	e8 95 fd ff ff       	call   c0018a92 <Vm::realToLinear(unsigned short, unsigned short)>
c0018cfd:	5a                   	pop    edx
c0018cfe:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018d00:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018d04:	51                   	push   ecx
c0018d05:	50                   	push   eax
c0018d06:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d0a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d0e:	53                   	push   ebx
c0018d0f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018d12:	83 c4 14             	add    esp,0x14
c0018d15:	53                   	push   ebx
c0018d16:	e8 39 43 ff ff       	call   c000d054 <File::close()>
c0018d1b:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018d20:	83 c4 10             	add    esp,0x10
c0018d23:	48                   	dec    eax
c0018d24:	c6 05 85 79 02 c0 00 	mov    BYTE PTR ds:0xc0027985,0x0
c0018d2b:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018d30:	85 c0                	test   eax,eax
c0018d32:	75 01                	jne    c0018d35 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0018d34:	fb                   	sti    
c0018d35:	83 ec 0c             	sub    esp,0xc
c0018d38:	ff 35 88 79 02 c0    	push   DWORD PTR ds:0xc0027988
c0018d3e:	e8 91 f6 ff ff       	call   c00183d4 <unblockTask(ThreadControlBlock*)>
c0018d43:	83 c4 10             	add    esp,0x10
c0018d46:	83 c4 2c             	add    esp,0x2c
c0018d49:	89 f0                	mov    eax,esi
c0018d4b:	5b                   	pop    ebx
c0018d4c:	5e                   	pop    esi
c0018d4d:	5f                   	pop    edi
c0018d4e:	5d                   	pop    ebp
c0018d4f:	c3                   	ret    

c0018d50 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018d50:	57                   	push   edi
c0018d51:	56                   	push   esi
c0018d52:	53                   	push   ebx
c0018d53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018d57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d5b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018d5f:	83 e8 06             	sub    eax,0x6
c0018d62:	0f b7 c0             	movzx  eax,ax
c0018d65:	50                   	push   eax
c0018d66:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018d6b:	50                   	push   eax
c0018d6c:	e8 21 fd ff ff       	call   c0018a92 <Vm::realToLinear(unsigned short, unsigned short)>
c0018d71:	5a                   	pop    edx
c0018d72:	5e                   	pop    esi
c0018d73:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018d76:	8d 56 fa             	lea    edx,[esi-0x6]
c0018d79:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018d7f:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018d82:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018d85:	83 c2 02             	add    edx,0x2
c0018d88:	66 89 10             	mov    WORD PTR [eax],dx
c0018d8b:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018d8e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018d92:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018d95:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018d99:	89 d6                	mov    esi,edx
c0018d9b:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018da1:	66 81 e6 ff fd       	and    si,0xfdff
c0018da6:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0018daa:	74 07                	je     c0018db3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018dac:	89 d6                	mov    esi,edx
c0018dae:	66 81 ce 00 02       	or     si,0x200
c0018db3:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018db7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018dbc:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018dc0:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018dc8:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018dcb:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018dd3:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018dd6:	5b                   	pop    ebx
c0018dd7:	5e                   	pop    esi
c0018dd8:	5f                   	pop    edi
c0018dd9:	c3                   	ret    

c0018dda <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018dda:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018ddf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018de4:	c1 e0 04             	shl    eax,0x4
c0018de7:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018dea:	c3                   	ret    

c0018deb <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018deb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018df0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018df5:	c1 e0 04             	shl    eax,0x4
c0018df8:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018dfc:	c3                   	ret    

c0018dfd <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018dfd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e02:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e07:	c1 e0 04             	shl    eax,0x4
c0018e0a:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018e0d:	c3                   	ret    

c0018e0e <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018e0e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e13:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e18:	c1 e0 04             	shl    eax,0x4
c0018e1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e1f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018e22:	c3                   	ret    

c0018e23 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018e23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e28:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e2d:	c1 e0 04             	shl    eax,0x4
c0018e30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e34:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018e38:	c3                   	ret    

c0018e39 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018e39:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e3e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e43:	c1 e0 04             	shl    eax,0x4
c0018e46:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e4a:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018e4d:	c3                   	ret    

c0018e4e <Vm::faultHandler(regs*)>:
c0018e4e:	55                   	push   ebp
c0018e4f:	57                   	push   edi
c0018e50:	56                   	push   esi
c0018e51:	53                   	push   ebx
c0018e52:	83 ec 1c             	sub    esp,0x1c
c0018e55:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018e59:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018e5c:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018e60:	0f b7 f8             	movzx  edi,ax
c0018e63:	52                   	push   edx
c0018e64:	0f b7 c0             	movzx  eax,ax
c0018e67:	50                   	push   eax
c0018e68:	e8 25 fc ff ff       	call   c0018a92 <Vm::realToLinear(unsigned short, unsigned short)>
c0018e6d:	5a                   	pop    edx
c0018e6e:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018e71:	59                   	pop    ecx
c0018e72:	89 c1                	mov    ecx,eax
c0018e74:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018e77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e7b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018e84:	0f b7 c5             	movzx  eax,bp
c0018e87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e8b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018e8f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018e93:	e8 fa fb ff ff       	call   c0018a92 <Vm::realToLinear(unsigned short, unsigned short)>
c0018e98:	5e                   	pop    esi
c0018e99:	be 06 00 00 00       	mov    esi,0x6
c0018e9e:	5a                   	pop    edx
c0018e9f:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018ea4:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018ea9:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0018eac:	80 fa 9d             	cmp    dl,0x9d
c0018eaf:	0f 84 2c 02 00 00    	je     c00190e1 <Vm::faultHandler(regs*)+0x293>
c0018eb5:	0f 87 91 00 00 00    	ja     c0018f4c <Vm::faultHandler(regs*)+0xfe>
c0018ebb:	80 fa 66             	cmp    dl,0x66
c0018ebe:	0f 84 98 01 00 00    	je     c001905c <Vm::faultHandler(regs*)+0x20e>
c0018ec4:	77 47                	ja     c0018f0d <Vm::faultHandler(regs*)+0xbf>
c0018ec6:	80 fa 36             	cmp    dl,0x36
c0018ec9:	0f 84 80 01 00 00    	je     c001904f <Vm::faultHandler(regs*)+0x201>
c0018ecf:	77 1a                	ja     c0018eeb <Vm::faultHandler(regs*)+0x9d>
c0018ed1:	80 fa 26             	cmp    dl,0x26
c0018ed4:	0f 84 4e 01 00 00    	je     c0019028 <Vm::faultHandler(regs*)+0x1da>
c0018eda:	80 fa 2e             	cmp    dl,0x2e
c0018edd:	0f 85 e2 05 00 00    	jne    c00194c5 <Vm::faultHandler(regs*)+0x677>
c0018ee3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ee6:	31 f6                	xor    esi,esi
c0018ee8:	41                   	inc    ecx
c0018ee9:	eb be                	jmp    c0018ea9 <Vm::faultHandler(regs*)+0x5b>
c0018eeb:	80 fa 64             	cmp    dl,0x64
c0018eee:	0f 84 41 01 00 00    	je     c0019035 <Vm::faultHandler(regs*)+0x1e7>
c0018ef4:	0f 87 48 01 00 00    	ja     c0019042 <Vm::faultHandler(regs*)+0x1f4>
c0018efa:	80 fa 3e             	cmp    dl,0x3e
c0018efd:	0f 85 c2 05 00 00    	jne    c00194c5 <Vm::faultHandler(regs*)+0x677>
c0018f03:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018f06:	be 01 00 00 00       	mov    esi,0x1
c0018f0b:	eb db                	jmp    c0018ee8 <Vm::faultHandler(regs*)+0x9a>
c0018f0d:	80 fa 6d             	cmp    dl,0x6d
c0018f10:	0f 84 ec 02 00 00    	je     c0019202 <Vm::faultHandler(regs*)+0x3b4>
c0018f16:	77 17                	ja     c0018f2f <Vm::faultHandler(regs*)+0xe1>
c0018f18:	80 fa 67             	cmp    dl,0x67
c0018f1b:	0f 84 48 01 00 00    	je     c0019069 <Vm::faultHandler(regs*)+0x21b>
c0018f21:	80 fa 6c             	cmp    dl,0x6c
c0018f24:	0f 84 69 02 00 00    	je     c0019193 <Vm::faultHandler(regs*)+0x345>
c0018f2a:	e9 96 05 00 00       	jmp    c00194c5 <Vm::faultHandler(regs*)+0x677>
c0018f2f:	80 fa 6f             	cmp    dl,0x6f
c0018f32:	0f 84 f4 03 00 00    	je     c001932c <Vm::faultHandler(regs*)+0x4de>
c0018f38:	0f 82 59 03 00 00    	jb     c0019297 <Vm::faultHandler(regs*)+0x449>
c0018f3e:	80 fa 9c             	cmp    dl,0x9c
c0018f41:	0f 84 2f 01 00 00    	je     c0019076 <Vm::faultHandler(regs*)+0x228>
c0018f47:	e9 79 05 00 00       	jmp    c00194c5 <Vm::faultHandler(regs*)+0x677>
c0018f4c:	80 fa ec             	cmp    dl,0xec
c0018f4f:	0f 84 14 05 00 00    	je     c0019469 <Vm::faultHandler(regs*)+0x61b>
c0018f55:	77 7b                	ja     c0018fd2 <Vm::faultHandler(regs*)+0x184>
c0018f57:	80 fa e4             	cmp    dl,0xe4
c0018f5a:	0f 84 93 04 00 00    	je     c00193f3 <Vm::faultHandler(regs*)+0x5a5>
c0018f60:	77 53                	ja     c0018fb5 <Vm::faultHandler(regs*)+0x167>
c0018f62:	80 fa cd             	cmp    dl,0xcd
c0018f65:	0f 84 d9 01 00 00    	je     c0019144 <Vm::faultHandler(regs*)+0x2f6>
c0018f6b:	80 fa cf             	cmp    dl,0xcf
c0018f6e:	0f 85 51 05 00 00    	jne    c00194c5 <Vm::faultHandler(regs*)+0x677>
c0018f74:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018f77:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018f7a:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018f7e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018f81:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018f85:	81 ca 00 02 02 00    	or     edx,0x20200
c0018f8b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018f8e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018f92:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018f98:	66 c1 e8 09          	shr    ax,0x9
c0018f9c:	83 e0 01             	and    eax,0x1
c0018f9f:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018fa2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018fa5:	83 c0 06             	add    eax,0x6
c0018fa8:	25 ff ff 00 00       	and    eax,0xffff
c0018fad:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018fb0:	e9 0c 05 00 00       	jmp    c00194c1 <Vm::faultHandler(regs*)+0x673>
c0018fb5:	80 fa e6             	cmp    dl,0xe6
c0018fb8:	0f 84 7f 04 00 00    	je     c001943d <Vm::faultHandler(regs*)+0x5ef>
c0018fbe:	0f 82 4b 04 00 00    	jb     c001940f <Vm::faultHandler(regs*)+0x5c1>
c0018fc4:	80 fa e7             	cmp    dl,0xe7
c0018fc7:	0f 84 87 04 00 00    	je     c0019454 <Vm::faultHandler(regs*)+0x606>
c0018fcd:	e9 f3 04 00 00       	jmp    c00194c5 <Vm::faultHandler(regs*)+0x677>
c0018fd2:	80 fa ef             	cmp    dl,0xef
c0018fd5:	0f 84 d1 04 00 00    	je     c00194ac <Vm::faultHandler(regs*)+0x65e>
c0018fdb:	77 28                	ja     c0019005 <Vm::faultHandler(regs*)+0x1b7>
c0018fdd:	80 fa ed             	cmp    dl,0xed
c0018fe0:	0f 84 9f 04 00 00    	je     c0019485 <Vm::faultHandler(regs*)+0x637>
c0018fe6:	80 fa ee             	cmp    dl,0xee
c0018fe9:	0f 85 d6 04 00 00    	jne    c00194c5 <Vm::faultHandler(regs*)+0x677>
c0018fef:	50                   	push   eax
c0018ff0:	50                   	push   eax
c0018ff1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018ff5:	50                   	push   eax
c0018ff6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018ffa:	50                   	push   eax
c0018ffb:	e8 5c fa ff ff       	call   c0018a5c <Vm::outbv(unsigned short, unsigned char)>
c0019000:	e9 9f 04 00 00       	jmp    c00194a4 <Vm::faultHandler(regs*)+0x656>
c0019005:	80 fa fa             	cmp    dl,0xfa
c0019008:	0f 84 69 01 00 00    	je     c0019177 <Vm::faultHandler(regs*)+0x329>
c001900e:	80 fa fb             	cmp    dl,0xfb
c0019011:	0f 84 6e 01 00 00    	je     c0019185 <Vm::faultHandler(regs*)+0x337>
c0019017:	80 fa f3             	cmp    dl,0xf3
c001901a:	0f 85 a5 04 00 00    	jne    c00194c5 <Vm::faultHandler(regs*)+0x677>
c0019020:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019023:	e9 c0 fe ff ff       	jmp    c0018ee8 <Vm::faultHandler(regs*)+0x9a>
c0019028:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001902b:	be 02 00 00 00       	mov    esi,0x2
c0019030:	e9 b3 fe ff ff       	jmp    c0018ee8 <Vm::faultHandler(regs*)+0x9a>
c0019035:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019038:	be 03 00 00 00       	mov    esi,0x3
c001903d:	e9 a6 fe ff ff       	jmp    c0018ee8 <Vm::faultHandler(regs*)+0x9a>
c0019042:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019045:	be 04 00 00 00       	mov    esi,0x4
c001904a:	e9 99 fe ff ff       	jmp    c0018ee8 <Vm::faultHandler(regs*)+0x9a>
c001904f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019052:	be 05 00 00 00       	mov    esi,0x5
c0019057:	e9 8c fe ff ff       	jmp    c0018ee8 <Vm::faultHandler(regs*)+0x9a>
c001905c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001905f:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019064:	e9 7f fe ff ff       	jmp    c0018ee8 <Vm::faultHandler(regs*)+0x9a>
c0019069:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001906c:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019071:	e9 72 fe ff ff       	jmp    c0018ee8 <Vm::faultHandler(regs*)+0x9a>
c0019076:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019079:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001907d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019082:	74 30                	je     c00190b4 <Vm::faultHandler(regs*)+0x266>
c0019084:	83 e9 04             	sub    ecx,0x4
c0019087:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001908d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019093:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019096:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019099:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001909f:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00190a3:	0f 84 15 04 00 00    	je     c00194be <Vm::faultHandler(regs*)+0x670>
c00190a9:	80 ce 02             	or     dh,0x2
c00190ac:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00190af:	e9 0a 04 00 00       	jmp    c00194be <Vm::faultHandler(regs*)+0x670>
c00190b4:	83 e9 02             	sub    ecx,0x2
c00190b7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00190bd:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00190c0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00190c4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00190ca:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00190ce:	74 05                	je     c00190d5 <Vm::faultHandler(regs*)+0x287>
c00190d0:	80 ce 02             	or     dh,0x2
c00190d3:	eb 03                	jmp    c00190d8 <Vm::faultHandler(regs*)+0x28a>
c00190d5:	80 e6 fd             	and    dh,0xfd
c00190d8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00190dc:	e9 dd 03 00 00       	jmp    c00194be <Vm::faultHandler(regs*)+0x670>
c00190e1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00190e6:	74 2a                	je     c0019112 <Vm::faultHandler(regs*)+0x2c4>
c00190e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00190ea:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00190f0:	81 ca 00 02 02 00    	or     edx,0x20200
c00190f6:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00190f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00190fb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019101:	c1 e8 09             	shr    eax,0x9
c0019104:	83 e0 01             	and    eax,0x1
c0019107:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001910a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001910d:	83 c0 04             	add    eax,0x4
c0019110:	eb 25                	jmp    c0019137 <Vm::faultHandler(regs*)+0x2e9>
c0019112:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019115:	81 ca 00 02 02 00    	or     edx,0x20200
c001911b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001911e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019121:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019127:	66 c1 e8 09          	shr    ax,0x9
c001912b:	83 e0 01             	and    eax,0x1
c001912e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019131:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019134:	83 c0 02             	add    eax,0x2
c0019137:	25 ff ff 00 00       	and    eax,0xffff
c001913c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001913f:	e9 7a 03 00 00       	jmp    c00194be <Vm::faultHandler(regs*)+0x670>
c0019144:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019148:	3c ee                	cmp    al,0xee
c001914a:	75 10                	jne    c001915c <Vm::faultHandler(regs*)+0x30e>
c001914c:	83 ec 0c             	sub    esp,0xc
c001914f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019152:	e8 a2 f9 ff ff       	call   c0018af9 <Vm::mainloop3(unsigned long)>
c0019157:	e9 4b 03 00 00       	jmp    c00194a7 <Vm::faultHandler(regs*)+0x659>
c001915c:	83 ec 0c             	sub    esp,0xc
c001915f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019163:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019167:	51                   	push   ecx
c0019168:	50                   	push   eax
c0019169:	53                   	push   ebx
c001916a:	e8 e1 fb ff ff       	call   c0018d50 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001916f:	83 c4 20             	add    esp,0x20
c0019172:	e9 4a 03 00 00       	jmp    c00194c1 <Vm::faultHandler(regs*)+0x673>
c0019177:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001917c:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019180:	e9 39 03 00 00       	jmp    c00194be <Vm::faultHandler(regs*)+0x670>
c0019185:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001918a:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001918e:	e9 2b 03 00 00       	jmp    c00194be <Vm::faultHandler(regs*)+0x670>
c0019193:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019196:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001919b:	74 2b                	je     c00191c8 <Vm::faultHandler(regs*)+0x37a>
c001919d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00191a4:	76 22                	jbe    c00191c8 <Vm::faultHandler(regs*)+0x37a>
c00191a6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00191aa:	50                   	push   eax
c00191ab:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00191af:	50                   	push   eax
c00191b0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00191b4:	50                   	push   eax
c00191b5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00191b9:	50                   	push   eax
c00191ba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00191be:	50                   	push   eax
c00191bf:	6a 6c                	push   0x6c
c00191c1:	6a 6c                	push   0x6c
c00191c3:	e9 b9 01 00 00       	jmp    c0019381 <Vm::faultHandler(regs*)+0x533>
c00191c8:	83 ec 0c             	sub    esp,0xc
c00191cb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00191cf:	0f b7 f6             	movzx  esi,si
c00191d2:	50                   	push   eax
c00191d3:	e8 71 f8 ff ff       	call   c0018a49 <Vm::inbv(unsigned short)>
c00191d8:	83 c4 0c             	add    esp,0xc
c00191db:	0f b6 c0             	movzx  eax,al
c00191de:	50                   	push   eax
c00191df:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00191e3:	50                   	push   eax
c00191e4:	56                   	push   esi
c00191e5:	e8 24 fc ff ff       	call   c0018e0e <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00191ea:	83 c4 10             	add    esp,0x10
c00191ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00191f0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00191f4:	74 03                	je     c00191f9 <Vm::faultHandler(regs*)+0x3ab>
c00191f6:	48                   	dec    eax
c00191f7:	eb 01                	jmp    c00191fa <Vm::faultHandler(regs*)+0x3ac>
c00191f9:	40                   	inc    eax
c00191fa:	0f b7 c0             	movzx  eax,ax
c00191fd:	e9 8d 00 00 00       	jmp    c001928f <Vm::faultHandler(regs*)+0x441>
c0019202:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019205:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019208:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001920d:	74 29                	je     c0019238 <Vm::faultHandler(regs*)+0x3ea>
c001920f:	3d ff ff 00 00       	cmp    eax,0xffff
c0019214:	76 22                	jbe    c0019238 <Vm::faultHandler(regs*)+0x3ea>
c0019216:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001921a:	50                   	push   eax
c001921b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001921f:	50                   	push   eax
c0019220:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019224:	50                   	push   eax
c0019225:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019229:	50                   	push   eax
c001922a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001922e:	50                   	push   eax
c001922f:	6a 6d                	push   0x6d
c0019231:	6a 6d                	push   0x6d
c0019233:	e9 49 01 00 00       	jmp    c0019381 <Vm::faultHandler(regs*)+0x533>
c0019238:	0f b7 c8             	movzx  ecx,ax
c001923b:	0f b7 f6             	movzx  esi,si
c001923e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019241:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019246:	74 20                	je     c0019268 <Vm::faultHandler(regs*)+0x41a>
c0019248:	ed                   	in     eax,dx
c0019249:	55                   	push   ebp
c001924a:	50                   	push   eax
c001924b:	51                   	push   ecx
c001924c:	56                   	push   esi
c001924d:	e8 e7 fb ff ff       	call   c0018e39 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019252:	83 c4 10             	add    esp,0x10
c0019255:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019258:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001925c:	74 05                	je     c0019263 <Vm::faultHandler(regs*)+0x415>
c001925e:	83 e8 04             	sub    eax,0x4
c0019261:	eb 27                	jmp    c001928a <Vm::faultHandler(regs*)+0x43c>
c0019263:	83 c0 04             	add    eax,0x4
c0019266:	eb 22                	jmp    c001928a <Vm::faultHandler(regs*)+0x43c>
c0019268:	66 ed                	in     ax,dx
c001926a:	0f b7 c0             	movzx  eax,ax
c001926d:	57                   	push   edi
c001926e:	50                   	push   eax
c001926f:	51                   	push   ecx
c0019270:	56                   	push   esi
c0019271:	e8 ad fb ff ff       	call   c0018e23 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019276:	83 c4 10             	add    esp,0x10
c0019279:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001927c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019280:	74 05                	je     c0019287 <Vm::faultHandler(regs*)+0x439>
c0019282:	83 e8 02             	sub    eax,0x2
c0019285:	eb 03                	jmp    c001928a <Vm::faultHandler(regs*)+0x43c>
c0019287:	83 c0 02             	add    eax,0x2
c001928a:	25 ff ff 00 00       	and    eax,0xffff
c001928f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019292:	e9 27 02 00 00       	jmp    c00194be <Vm::faultHandler(regs*)+0x670>
c0019297:	8d 46 ff             	lea    eax,[esi-0x1]
c001929a:	3c 05                	cmp    al,0x5
c001929c:	77 24                	ja     c00192c2 <Vm::faultHandler(regs*)+0x474>
c001929e:	0f b6 c0             	movzx  eax,al
c00192a1:	ff 24 85 5c 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb5a4]
c00192a8:	0f b7 fd             	movzx  edi,bp
c00192ab:	eb 15                	jmp    c00192c2 <Vm::faultHandler(regs*)+0x474>
c00192ad:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00192b1:	eb 0f                	jmp    c00192c2 <Vm::faultHandler(regs*)+0x474>
c00192b3:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00192b7:	eb 09                	jmp    c00192c2 <Vm::faultHandler(regs*)+0x474>
c00192b9:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00192bd:	eb 03                	jmp    c00192c2 <Vm::faultHandler(regs*)+0x474>
c00192bf:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00192c2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00192c5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00192ca:	74 29                	je     c00192f5 <Vm::faultHandler(regs*)+0x4a7>
c00192cc:	3d ff ff 00 00       	cmp    eax,0xffff
c00192d1:	76 22                	jbe    c00192f5 <Vm::faultHandler(regs*)+0x4a7>
c00192d3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00192d7:	50                   	push   eax
c00192d8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00192dc:	50                   	push   eax
c00192dd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00192e1:	50                   	push   eax
c00192e2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00192e6:	50                   	push   eax
c00192e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00192eb:	50                   	push   eax
c00192ec:	6a 6e                	push   0x6e
c00192ee:	6a 6e                	push   0x6e
c00192f0:	e9 8c 00 00 00       	jmp    c0019381 <Vm::faultHandler(regs*)+0x533>
c00192f5:	0f b7 c0             	movzx  eax,ax
c00192f8:	52                   	push   edx
c00192f9:	52                   	push   edx
c00192fa:	50                   	push   eax
c00192fb:	57                   	push   edi
c00192fc:	e8 d9 fa ff ff       	call   c0018dda <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019301:	59                   	pop    ecx
c0019302:	0f b6 c0             	movzx  eax,al
c0019305:	5e                   	pop    esi
c0019306:	50                   	push   eax
c0019307:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001930b:	50                   	push   eax
c001930c:	e8 4b f7 ff ff       	call   c0018a5c <Vm::outbv(unsigned short, unsigned char)>
c0019311:	83 c4 10             	add    esp,0x10
c0019314:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019317:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001931b:	74 03                	je     c0019320 <Vm::faultHandler(regs*)+0x4d2>
c001931d:	48                   	dec    eax
c001931e:	eb 01                	jmp    c0019321 <Vm::faultHandler(regs*)+0x4d3>
c0019320:	40                   	inc    eax
c0019321:	0f b7 c0             	movzx  eax,ax
c0019324:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019327:	e9 92 01 00 00       	jmp    c00194be <Vm::faultHandler(regs*)+0x670>
c001932c:	8d 46 ff             	lea    eax,[esi-0x1]
c001932f:	3c 05                	cmp    al,0x5
c0019331:	77 1f                	ja     c0019352 <Vm::faultHandler(regs*)+0x504>
c0019333:	0f b6 c0             	movzx  eax,al
c0019336:	ff 24 85 74 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb58c]
c001933d:	89 ef                	mov    edi,ebp
c001933f:	eb 11                	jmp    c0019352 <Vm::faultHandler(regs*)+0x504>
c0019341:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019344:	eb 0c                	jmp    c0019352 <Vm::faultHandler(regs*)+0x504>
c0019346:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0019349:	eb 07                	jmp    c0019352 <Vm::faultHandler(regs*)+0x504>
c001934b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001934e:	eb 02                	jmp    c0019352 <Vm::faultHandler(regs*)+0x504>
c0019350:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0019352:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019355:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001935a:	74 37                	je     c0019393 <Vm::faultHandler(regs*)+0x545>
c001935c:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0019362:	76 2f                	jbe    c0019393 <Vm::faultHandler(regs*)+0x545>
c0019364:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019368:	50                   	push   eax
c0019369:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001936d:	50                   	push   eax
c001936e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019372:	50                   	push   eax
c0019373:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019377:	50                   	push   eax
c0019378:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001937c:	50                   	push   eax
c001937d:	6a 6f                	push   0x6f
c001937f:	6a 6f                	push   0x6f
c0019381:	68 02 4a 02 c0       	push   0xc0024a02
c0019386:	e8 9d 36 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001938b:	83 c4 20             	add    esp,0x20
c001938e:	e9 86 01 00 00       	jmp    c0019519 <Vm::faultHandler(regs*)+0x6cb>
c0019393:	0f b7 d7             	movzx  edx,di
c0019396:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0019399:	0f b7 c6             	movzx  eax,si
c001939c:	81 e1 00 04 00 00    	and    ecx,0x400
c00193a2:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00193a5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00193aa:	74 1d                	je     c00193c9 <Vm::faultHandler(regs*)+0x57b>
c00193ac:	55                   	push   ebp
c00193ad:	55                   	push   ebp
c00193ae:	50                   	push   eax
c00193af:	52                   	push   edx
c00193b0:	e8 48 fa ff ff       	call   c0018dfd <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00193b5:	83 c4 10             	add    esp,0x10
c00193b8:	89 fa                	mov    edx,edi
c00193ba:	ef                   	out    dx,eax
c00193bb:	85 c9                	test   ecx,ecx
c00193bd:	74 05                	je     c00193c4 <Vm::faultHandler(regs*)+0x576>
c00193bf:	83 ee 04             	sub    esi,0x4
c00193c2:	eb 21                	jmp    c00193e5 <Vm::faultHandler(regs*)+0x597>
c00193c4:	83 c6 04             	add    esi,0x4
c00193c7:	eb 1c                	jmp    c00193e5 <Vm::faultHandler(regs*)+0x597>
c00193c9:	55                   	push   ebp
c00193ca:	55                   	push   ebp
c00193cb:	50                   	push   eax
c00193cc:	52                   	push   edx
c00193cd:	e8 19 fa ff ff       	call   c0018deb <Vm::readWordFromReal(unsigned short, unsigned short)>
c00193d2:	83 c4 10             	add    esp,0x10
c00193d5:	89 fa                	mov    edx,edi
c00193d7:	66 ef                	out    dx,ax
c00193d9:	85 c9                	test   ecx,ecx
c00193db:	74 05                	je     c00193e2 <Vm::faultHandler(regs*)+0x594>
c00193dd:	83 ee 02             	sub    esi,0x2
c00193e0:	eb 03                	jmp    c00193e5 <Vm::faultHandler(regs*)+0x597>
c00193e2:	83 c6 02             	add    esi,0x2
c00193e5:	81 e6 ff ff 00 00    	and    esi,0xffff
c00193eb:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00193ee:	e9 cb 00 00 00       	jmp    c00194be <Vm::faultHandler(regs*)+0x670>
c00193f3:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00193fa:	83 ec 0c             	sub    esp,0xc
c00193fd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019401:	50                   	push   eax
c0019402:	e8 42 f6 ff ff       	call   c0018a49 <Vm::inbv(unsigned short)>
c0019407:	0f b6 c0             	movzx  eax,al
c001940a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001940d:	eb 3f                	jmp    c001944e <Vm::faultHandler(regs*)+0x600>
c001940f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019414:	74 07                	je     c001941d <Vm::faultHandler(regs*)+0x5cf>
c0019416:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001941a:	ed                   	in     eax,dx
c001941b:	eb 14                	jmp    c0019431 <Vm::faultHandler(regs*)+0x5e3>
c001941d:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019420:	66 31 f6             	xor    si,si
c0019423:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0019426:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001942a:	66 ed                	in     ax,dx
c001942c:	0f b7 c0             	movzx  eax,ax
c001942f:	09 f0                	or     eax,esi
c0019431:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019434:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019438:	e9 84 00 00 00       	jmp    c00194c1 <Vm::faultHandler(regs*)+0x673>
c001943d:	52                   	push   edx
c001943e:	52                   	push   edx
c001943f:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019443:	50                   	push   eax
c0019444:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019448:	50                   	push   eax
c0019449:	e8 0e f6 ff ff       	call   c0018a5c <Vm::outbv(unsigned short, unsigned char)>
c001944e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019452:	eb 53                	jmp    c00194a7 <Vm::faultHandler(regs*)+0x659>
c0019454:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019457:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001945b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019460:	74 03                	je     c0019465 <Vm::faultHandler(regs*)+0x617>
c0019462:	ef                   	out    dx,eax
c0019463:	eb cf                	jmp    c0019434 <Vm::faultHandler(regs*)+0x5e6>
c0019465:	66 ef                	out    dx,ax
c0019467:	eb cb                	jmp    c0019434 <Vm::faultHandler(regs*)+0x5e6>
c0019469:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019470:	83 ec 0c             	sub    esp,0xc
c0019473:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019477:	50                   	push   eax
c0019478:	e8 cc f5 ff ff       	call   c0018a49 <Vm::inbv(unsigned short)>
c001947d:	0f b6 c0             	movzx  eax,al
c0019480:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019483:	eb 1f                	jmp    c00194a4 <Vm::faultHandler(regs*)+0x656>
c0019485:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019488:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001948d:	74 03                	je     c0019492 <Vm::faultHandler(regs*)+0x644>
c001948f:	ed                   	in     eax,dx
c0019490:	eb 0d                	jmp    c001949f <Vm::faultHandler(regs*)+0x651>
c0019492:	66 ed                	in     ax,dx
c0019494:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019497:	0f b7 c0             	movzx  eax,ax
c001949a:	66 31 d2             	xor    dx,dx
c001949d:	09 d0                	or     eax,edx
c001949f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00194a2:	eb 1a                	jmp    c00194be <Vm::faultHandler(regs*)+0x670>
c00194a4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00194a7:	83 c4 10             	add    esp,0x10
c00194aa:	eb 15                	jmp    c00194c1 <Vm::faultHandler(regs*)+0x673>
c00194ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00194af:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00194b2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00194b7:	74 03                	je     c00194bc <Vm::faultHandler(regs*)+0x66e>
c00194b9:	ef                   	out    dx,eax
c00194ba:	eb 02                	jmp    c00194be <Vm::faultHandler(regs*)+0x670>
c00194bc:	66 ef                	out    dx,ax
c00194be:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00194c1:	b0 01                	mov    al,0x1
c00194c3:	eb 56                	jmp    c001951b <Vm::faultHandler(regs*)+0x6cd>
c00194c5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00194c9:	50                   	push   eax
c00194ca:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00194ce:	50                   	push   eax
c00194cf:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00194d3:	50                   	push   eax
c00194d4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00194d8:	50                   	push   eax
c00194d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00194dd:	50                   	push   eax
c00194de:	52                   	push   edx
c00194df:	52                   	push   edx
c00194e0:	68 2f 4a 02 c0       	push   0xc0024a2f
c00194e5:	e8 3e 35 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00194ea:	83 c4 20             	add    esp,0x20
c00194ed:	83 ec 0c             	sub    esp,0xc
c00194f0:	6a 60                	push   0x60
c00194f2:	e8 52 f5 ff ff       	call   c0018a49 <Vm::inbv(unsigned short)>
c00194f7:	83 c4 10             	add    esp,0x10
c00194fa:	3c 1c                	cmp    al,0x1c
c00194fc:	74 04                	je     c0019502 <Vm::faultHandler(regs*)+0x6b4>
c00194fe:	3c 5a                	cmp    al,0x5a
c0019500:	75 eb                	jne    c00194ed <Vm::faultHandler(regs*)+0x69f>
c0019502:	3c 5a                	cmp    al,0x5a
c0019504:	74 04                	je     c001950a <Vm::faultHandler(regs*)+0x6bc>
c0019506:	3c 1c                	cmp    al,0x1c
c0019508:	75 0f                	jne    c0019519 <Vm::faultHandler(regs*)+0x6cb>
c001950a:	83 ec 0c             	sub    esp,0xc
c001950d:	6a 60                	push   0x60
c001950f:	e8 35 f5 ff ff       	call   c0018a49 <Vm::inbv(unsigned short)>
c0019514:	83 c4 10             	add    esp,0x10
c0019517:	eb e9                	jmp    c0019502 <Vm::faultHandler(regs*)+0x6b4>
c0019519:	31 c0                	xor    eax,eax
c001951b:	83 c4 1c             	add    esp,0x1c
c001951e:	5b                   	pop    ebx
c001951f:	5e                   	pop    esi
c0019520:	5f                   	pop    edi
c0019521:	5d                   	pop    ebp
c0019522:	c3                   	ret    
c0019523:	90                   	nop

c0019524 <Vm::fpuInternalTo32(unsigned long long)>:
c0019524:	57                   	push   edi
c0019525:	56                   	push   esi
c0019526:	53                   	push   ebx
c0019527:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001952b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001952f:	89 d6                	mov    esi,edx
c0019531:	89 d7                	mov    edi,edx
c0019533:	89 c1                	mov    ecx,eax
c0019535:	c1 ef 14             	shr    edi,0x14
c0019538:	89 d3                	mov    ebx,edx
c001953a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019540:	31 d2                	xor    edx,edx
c0019542:	89 f8                	mov    eax,edi
c0019544:	81 e6 00 00 00 80    	and    esi,0x80000000
c001954a:	bf ff 00 00 00       	mov    edi,0xff
c001954f:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019554:	83 d2 ff             	adc    edx,0xffffffff
c0019557:	39 c7                	cmp    edi,eax
c0019559:	bf 00 00 00 00       	mov    edi,0x0
c001955e:	19 d7                	sbb    edi,edx
c0019560:	72 16                	jb     c0019578 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019562:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019566:	c1 e0 17             	shl    eax,0x17
c0019569:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001956f:	09 f1                	or     ecx,esi
c0019571:	09 c1                	or     ecx,eax
c0019573:	89 cf                	mov    edi,ecx
c0019575:	eb 05                	jmp    c001957c <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019577:	90                   	nop
c0019578:	31 ff                	xor    edi,edi
c001957a:	66 90                	xchg   ax,ax
c001957c:	89 f8                	mov    eax,edi
c001957e:	5b                   	pop    ebx
c001957f:	5e                   	pop    esi
c0019580:	5f                   	pop    edi
c0019581:	c3                   	ret    

c0019582 <Vm::fpuInternalTo64(unsigned long long)>:
c0019582:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019586:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001958a:	c3                   	ret    

c001958b <Vm::fpu32ToInternal(unsigned int)>:
c001958b:	57                   	push   edi
c001958c:	31 ff                	xor    edi,edi
c001958e:	56                   	push   esi
c001958f:	53                   	push   ebx
c0019590:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019594:	89 cb                	mov    ebx,ecx
c0019596:	89 ce                	mov    esi,ecx
c0019598:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001959e:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c00195a4:	c1 e9 17             	shr    ecx,0x17
c00195a7:	89 f0                	mov    eax,esi
c00195a9:	0f b6 d1             	movzx  edx,cl
c00195ac:	81 c2 80 03 00 00    	add    edx,0x380
c00195b2:	89 d1                	mov    ecx,edx
c00195b4:	89 fa                	mov    edx,edi
c00195b6:	c1 e1 14             	shl    ecx,0x14
c00195b9:	0f a4 c2 1d          	shld   edx,eax,0x1d
c00195bd:	c1 e0 1d             	shl    eax,0x1d
c00195c0:	89 d7                	mov    edi,edx
c00195c2:	89 c6                	mov    esi,eax
c00195c4:	89 ca                	mov    edx,ecx
c00195c6:	89 f0                	mov    eax,esi
c00195c8:	09 fa                	or     edx,edi
c00195ca:	09 da                	or     edx,ebx
c00195cc:	5b                   	pop    ebx
c00195cd:	5e                   	pop    esi
c00195ce:	5f                   	pop    edi
c00195cf:	c3                   	ret    

c00195d0 <Vm::fpu64ToInternal(unsigned long long)>:
c00195d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00195d8:	c3                   	ret    

c00195d9 <Vm::fpuFloatToLong(unsigned long long)>:
c00195d9:	57                   	push   edi
c00195da:	31 c0                	xor    eax,eax
c00195dc:	56                   	push   esi
c00195dd:	31 d2                	xor    edx,edx
c00195df:	53                   	push   ebx
c00195e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00195e4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00195e8:	89 d9                	mov    ecx,ebx
c00195ea:	c1 e9 14             	shr    ecx,0x14
c00195ed:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00195f3:	89 cf                	mov    edi,ecx
c00195f5:	81 ef ff 03 00 00    	sub    edi,0x3ff
c00195fb:	78 37                	js     c0019634 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c00195fd:	89 d9                	mov    ecx,ebx
c00195ff:	89 f0                	mov    eax,esi
c0019601:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019607:	81 c9 00 00 10 00    	or     ecx,0x100000
c001960d:	89 ca                	mov    edx,ecx
c001960f:	b9 34 00 00 00       	mov    ecx,0x34
c0019614:	29 f9                	sub    ecx,edi
c0019616:	0f ad d0             	shrd   eax,edx,cl
c0019619:	d3 fa                	sar    edx,cl
c001961b:	f6 c1 20             	test   cl,0x20
c001961e:	74 08                	je     c0019628 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019620:	89 d0                	mov    eax,edx
c0019622:	c1 fa 1f             	sar    edx,0x1f
c0019625:	8d 76 00             	lea    esi,[esi+0x0]
c0019628:	85 db                	test   ebx,ebx
c001962a:	79 08                	jns    c0019634 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001962c:	f7 d8                	neg    eax
c001962e:	83 d2 00             	adc    edx,0x0
c0019631:	f7 da                	neg    edx
c0019633:	90                   	nop
c0019634:	5b                   	pop    ebx
c0019635:	5e                   	pop    esi
c0019636:	5f                   	pop    edi
c0019637:	c3                   	ret    

c0019638 <Vm::fpuULongToFloat(unsigned long long)>:
c0019638:	57                   	push   edi
c0019639:	31 c9                	xor    ecx,ecx
c001963b:	56                   	push   esi
c001963c:	53                   	push   ebx
c001963d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019641:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019645:	8d 76 00             	lea    esi,[esi+0x0]
c0019648:	0f ba e7 14          	bt     edi,0x14
c001964c:	72 0a                	jb     c0019658 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001964e:	01 f6                	add    esi,esi
c0019650:	11 ff                	adc    edi,edi
c0019652:	41                   	inc    ecx
c0019653:	eb f3                	jmp    c0019648 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019655:	8d 76 00             	lea    esi,[esi+0x0]
c0019658:	89 fa                	mov    edx,edi
c001965a:	89 f0                	mov    eax,esi
c001965c:	bb 33 04 00 00       	mov    ebx,0x433
c0019661:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019667:	29 cb                	sub    ebx,ecx
c0019669:	89 d9                	mov    ecx,ebx
c001966b:	5b                   	pop    ebx
c001966c:	c1 e1 14             	shl    ecx,0x14
c001966f:	5e                   	pop    esi
c0019670:	09 ca                	or     edx,ecx
c0019672:	5f                   	pop    edi
c0019673:	c3                   	ret    

c0019674 <Vm::fpuLongToFloat(long long)>:
c0019674:	56                   	push   esi
c0019675:	31 c0                	xor    eax,eax
c0019677:	53                   	push   ebx
c0019678:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001967c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019680:	39 c8                	cmp    eax,ecx
c0019682:	19 d8                	sbb    eax,ebx
c0019684:	7d 06                	jge    c001968c <Vm::fpuLongToFloat(long long)+0x18>
c0019686:	31 f6                	xor    esi,esi
c0019688:	eb 0e                	jmp    c0019698 <Vm::fpuLongToFloat(long long)+0x24>
c001968a:	66 90                	xchg   ax,ax
c001968c:	f7 d9                	neg    ecx
c001968e:	be 01 00 00 00       	mov    esi,0x1
c0019693:	83 d3 00             	adc    ebx,0x0
c0019696:	f7 db                	neg    ebx
c0019698:	31 c0                	xor    eax,eax
c001969a:	66 90                	xchg   ax,ax
c001969c:	0f ba e3 14          	bt     ebx,0x14
c00196a0:	72 0a                	jb     c00196ac <Vm::fpuLongToFloat(long long)+0x38>
c00196a2:	01 c9                	add    ecx,ecx
c00196a4:	11 db                	adc    ebx,ebx
c00196a6:	40                   	inc    eax
c00196a7:	eb f3                	jmp    c001969c <Vm::fpuLongToFloat(long long)+0x28>
c00196a9:	8d 76 00             	lea    esi,[esi+0x0]
c00196ac:	ba 33 04 00 00       	mov    edx,0x433
c00196b1:	29 c2                	sub    edx,eax
c00196b3:	89 c8                	mov    eax,ecx
c00196b5:	c1 e2 14             	shl    edx,0x14
c00196b8:	89 d9                	mov    ecx,ebx
c00196ba:	89 f3                	mov    ebx,esi
c00196bc:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00196c2:	09 ca                	or     edx,ecx
c00196c4:	84 db                	test   bl,bl
c00196c6:	74 08                	je     c00196d0 <Vm::fpuLongToFloat(long long)+0x5c>
c00196c8:	81 ca 00 00 00 80    	or     edx,0x80000000
c00196ce:	66 90                	xchg   ax,ax
c00196d0:	5b                   	pop    ebx
c00196d1:	5e                   	pop    esi
c00196d2:	c3                   	ret    

c00196d3 <Vm::fpuGet0()>:
c00196d3:	31 c0                	xor    eax,eax
c00196d5:	31 d2                	xor    edx,edx
c00196d7:	c3                   	ret    

c00196d8 <Vm::fpuGet1()>:
c00196d8:	b8 01 00 00 00       	mov    eax,0x1
c00196dd:	31 d2                	xor    edx,edx
c00196df:	c3                   	ret    

c00196e0 <Vm::fpuGetPi()>:
c00196e0:	b8 03 00 00 00       	mov    eax,0x3
c00196e5:	31 d2                	xor    edx,edx
c00196e7:	c3                   	ret    

c00196e8 <Vm::fpuGetLog2E()>:
c00196e8:	83 ec 18             	sub    esp,0x18
c00196eb:	68 8c 4a 02 c0       	push   0xc0024a8c
c00196f0:	e8 14 ac ff ff       	call   c0014309 <Krnl::panic(char const*)>
c00196f5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196fa:	31 d2                	xor    edx,edx
c00196fc:	83 c4 1c             	add    esp,0x1c
c00196ff:	c3                   	ret    

c0019700 <Vm::fpuGetLogE2()>:
c0019700:	83 ec 18             	sub    esp,0x18
c0019703:	68 98 4a 02 c0       	push   0xc0024a98
c0019708:	e8 fc ab ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001970d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019712:	31 d2                	xor    edx,edx
c0019714:	83 c4 1c             	add    esp,0x1c
c0019717:	c3                   	ret    

c0019718 <Vm::fpuGetLog210()>:
c0019718:	83 ec 18             	sub    esp,0x18
c001971b:	68 a4 4a 02 c0       	push   0xc0024aa4
c0019720:	e8 e4 ab ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0019725:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001972a:	31 d2                	xor    edx,edx
c001972c:	83 c4 1c             	add    esp,0x1c
c001972f:	c3                   	ret    

c0019730 <Vm::fpuGetLog102()>:
c0019730:	83 ec 18             	sub    esp,0x18
c0019733:	68 b1 4a 02 c0       	push   0xc0024ab1
c0019738:	e8 cc ab ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001973d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019742:	31 d2                	xor    edx,edx
c0019744:	83 c4 1c             	add    esp,0x1c
c0019747:	c3                   	ret    

c0019748 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019748:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001974c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019750:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019754:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019758:	0f 92 c0             	setb   al
c001975b:	c3                   	ret    

c001975c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001975c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019764:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019768:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001976c:	09 c2                	or     edx,eax
c001976e:	0f 94 c0             	sete   al
c0019771:	c3                   	ret    

c0019772 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019772:	57                   	push   edi
c0019773:	56                   	push   esi
c0019774:	53                   	push   ebx
c0019775:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019779:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001977d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019781:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019785:	57                   	push   edi
c0019786:	56                   	push   esi
c0019787:	53                   	push   ebx
c0019788:	51                   	push   ecx
c0019789:	e8 ce ff ff ff       	call   c001975c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001978e:	83 c4 10             	add    esp,0x10
c0019791:	88 c2                	mov    dl,al
c0019793:	31 c0                	xor    eax,eax
c0019795:	84 d2                	test   dl,dl
c0019797:	75 0f                	jne    c00197a8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019799:	57                   	push   edi
c001979a:	56                   	push   esi
c001979b:	53                   	push   ebx
c001979c:	51                   	push   ecx
c001979d:	e8 a6 ff ff ff       	call   c0019748 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c00197a2:	83 c4 10             	add    esp,0x10
c00197a5:	8d 76 00             	lea    esi,[esi+0x0]
c00197a8:	83 e0 01             	and    eax,0x1
c00197ab:	5b                   	pop    ebx
c00197ac:	88 c1                	mov    cl,al
c00197ae:	83 e2 01             	and    edx,0x1
c00197b1:	a0 c1 79 02 c0       	mov    al,ds:0xc00279c1
c00197b6:	c1 e2 06             	shl    edx,0x6
c00197b9:	83 e0 ba             	and    eax,0xffffffba
c00197bc:	5e                   	pop    esi
c00197bd:	09 c8                	or     eax,ecx
c00197bf:	5f                   	pop    edi
c00197c0:	09 d0                	or     eax,edx
c00197c2:	a2 c1 79 02 c0       	mov    ds:0xc00279c1,al
c00197c7:	c3                   	ret    

c00197c8 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c00197c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00197d0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00197d4:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c00197d8:	c3                   	ret    

c00197d9 <Vm::fpuAbs(unsigned long long)>:
c00197d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00197e1:	c3                   	ret    

c00197e2 <Vm::fpuChs(unsigned long long)>:
c00197e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00197ea:	f7 d8                	neg    eax
c00197ec:	83 d2 00             	adc    edx,0x0
c00197ef:	f7 da                	neg    edx
c00197f1:	c3                   	ret    

c00197f2 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c00197f2:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c00197f6:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c00197fb:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c00197ff:	eb c7                	jmp    c00197c8 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0019801 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0019801:	53                   	push   ebx
c0019802:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001980a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001980e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019812:	0f af ca             	imul   ecx,edx
c0019815:	0f af d8             	imul   ebx,eax
c0019818:	f7 e2                	mul    edx
c001981a:	01 d9                	add    ecx,ebx
c001981c:	5b                   	pop    ebx
c001981d:	01 ca                	add    edx,ecx
c001981f:	c3                   	ret    

c0019820 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0019820:	83 ec 0c             	sub    esp,0xc
c0019823:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019827:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001982b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001982f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019833:	e8 5c 77 00 00       	call   c0020f94 <__udivdi3>
c0019838:	83 c4 1c             	add    esp,0x1c
c001983b:	c3                   	ret    

c001983c <Vm::fpuSquare(unsigned long long)>:
c001983c:	50                   	push   eax
c001983d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019841:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019845:	52                   	push   edx
c0019846:	50                   	push   eax
c0019847:	52                   	push   edx
c0019848:	50                   	push   eax
c0019849:	e8 b3 ff ff ff       	call   c0019801 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001984e:	83 c4 14             	add    esp,0x14
c0019851:	c3                   	ret    

c0019852 <Vm::fpuGetReg(int)>:
c0019852:	83 ec 0c             	sub    esp,0xc
c0019855:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001985a:	76 10                	jbe    c001986c <Vm::fpuGetReg(int)+0x1a>
c001985c:	83 ec 0c             	sub    esp,0xc
c001985f:	68 be 4a 02 c0       	push   0xc0024abe
c0019864:	e8 a0 aa ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0019869:	83 c4 10             	add    esp,0x10
c001986c:	a0 c1 79 02 c0       	mov    al,ds:0xc00279c1
c0019871:	b9 08 00 00 00       	mov    ecx,0x8
c0019876:	c0 e8 03             	shr    al,0x3
c0019879:	83 e0 07             	and    eax,0x7
c001987c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019880:	99                   	cdq    
c0019881:	f7 f9                	idiv   ecx
c0019883:	8b 04 d5 c4 79 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd863c]
c001988a:	8b 14 d5 c8 79 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd8638]
c0019891:	83 c4 0c             	add    esp,0xc
c0019894:	c3                   	ret    

c0019895 <Vm::fpuSetReg(int, unsigned long long)>:
c0019895:	57                   	push   edi
c0019896:	56                   	push   esi
c0019897:	52                   	push   edx
c0019898:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001989c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00198a0:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00198a5:	76 11                	jbe    c00198b8 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c00198a7:	83 ec 0c             	sub    esp,0xc
c00198aa:	68 d1 4a 02 c0       	push   0xc0024ad1
c00198af:	e8 55 aa ff ff       	call   c0014309 <Krnl::panic(char const*)>
c00198b4:	83 c4 10             	add    esp,0x10
c00198b7:	90                   	nop
c00198b8:	a0 c1 79 02 c0       	mov    al,ds:0xc00279c1
c00198bd:	b9 08 00 00 00       	mov    ecx,0x8
c00198c2:	c0 e8 03             	shr    al,0x3
c00198c5:	83 e0 07             	and    eax,0x7
c00198c8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00198cc:	99                   	cdq    
c00198cd:	f7 f9                	idiv   ecx
c00198cf:	89 34 d5 c4 79 02 c0 	mov    DWORD PTR [edx*8-0x3ffd863c],esi
c00198d6:	89 3c d5 c8 79 02 c0 	mov    DWORD PTR [edx*8-0x3ffd8638],edi
c00198dd:	58                   	pop    eax
c00198de:	5e                   	pop    esi
c00198df:	5f                   	pop    edi
c00198e0:	c3                   	ret    

c00198e1 <Vm::fpuPush(unsigned long long)>:
c00198e1:	a0 c1 79 02 c0       	mov    al,ds:0xc00279c1
c00198e6:	c0 e8 03             	shr    al,0x3
c00198e9:	83 e0 07             	and    eax,0x7
c00198ec:	83 c0 07             	add    eax,0x7
c00198ef:	88 c2                	mov    dl,al
c00198f1:	83 e0 07             	and    eax,0x7
c00198f4:	83 e2 07             	and    edx,0x7
c00198f7:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c00198fe:	8a 15 c1 79 02 c0    	mov    dl,BYTE PTR ds:0xc00279c1
c0019904:	83 e2 c7             	and    edx,0xffffffc7
c0019907:	09 ca                	or     edx,ecx
c0019909:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001990d:	88 15 c1 79 02 c0    	mov    BYTE PTR ds:0xc00279c1,dl
c0019913:	89 0c c5 c8 79 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8638],ecx
c001991a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001991e:	89 14 c5 c4 79 02 c0 	mov    DWORD PTR [eax*8-0x3ffd863c],edx
c0019925:	a1 04 7a 02 c0       	mov    eax,ds:0xc0027a04
c001992a:	83 f8 08             	cmp    eax,0x8
c001992d:	75 09                	jne    c0019938 <Vm::fpuPush(unsigned long long)+0x57>
c001992f:	80 0d c0 79 02 c0 40 	or     BYTE PTR ds:0xc00279c0,0x40
c0019936:	c3                   	ret    
c0019937:	90                   	nop
c0019938:	40                   	inc    eax
c0019939:	a3 04 7a 02 c0       	mov    ds:0xc0027a04,eax
c001993e:	c3                   	ret    

c001993f <Vm::fpuPop()>:
c001993f:	8a 0d c1 79 02 c0    	mov    cl,BYTE PTR ds:0xc00279c1
c0019945:	53                   	push   ebx
c0019946:	c0 e9 03             	shr    cl,0x3
c0019949:	8a 1d c1 79 02 c0    	mov    bl,BYTE PTR ds:0xc00279c1
c001994f:	83 e1 07             	and    ecx,0x7
c0019952:	83 e3 c7             	and    ebx,0xffffffc7
c0019955:	8b 04 cd c4 79 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd863c]
c001995c:	8b 14 cd c8 79 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd8638]
c0019963:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001996a:	83 e1 38             	and    ecx,0x38
c001996d:	09 d9                	or     ecx,ebx
c001996f:	88 0d c1 79 02 c0    	mov    BYTE PTR ds:0xc00279c1,cl
c0019975:	8b 0d 04 7a 02 c0    	mov    ecx,DWORD PTR ds:0xc0027a04
c001997b:	85 c9                	test   ecx,ecx
c001997d:	74 09                	je     c0019988 <Vm::fpuPop()+0x49>
c001997f:	49                   	dec    ecx
c0019980:	89 0d 04 7a 02 c0    	mov    DWORD PTR ds:0xc0027a04,ecx
c0019986:	eb 08                	jmp    c0019990 <Vm::fpuPop()+0x51>
c0019988:	80 0d c0 79 02 c0 40 	or     BYTE PTR ds:0xc00279c0,0x40
c001998f:	90                   	nop
c0019990:	5b                   	pop    ebx
c0019991:	c3                   	ret    

c0019992 <Vm::x87Handler(regs*)>:
c0019992:	55                   	push   ebp
c0019993:	57                   	push   edi
c0019994:	56                   	push   esi
c0019995:	53                   	push   ebx
c0019996:	83 ec 1c             	sub    esp,0x1c
c0019999:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001999d:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00199a2:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00199a5:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00199ad:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00199b1:	50                   	push   eax
c00199b2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00199b6:	50                   	push   eax
c00199b7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199bb:	50                   	push   eax
c00199bc:	53                   	push   ebx
c00199bd:	e8 60 a0 ff ff       	call   c0013a22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00199c2:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c00199c5:	83 c4 10             	add    esp,0x10
c00199c8:	89 c6                	mov    esi,eax
c00199ca:	80 fa d9             	cmp    dl,0xd9
c00199cd:	0f 85 79 01 00 00    	jne    c0019b4c <Vm::x87Handler(regs*)+0x1ba>
c00199d3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00199d7:	8d 50 20             	lea    edx,[eax+0x20]
c00199da:	80 fa 0e             	cmp    dl,0xe
c00199dd:	0f 87 a5 00 00 00    	ja     c0019a88 <Vm::x87Handler(regs*)+0xf6>
c00199e3:	0f b6 d2             	movzx  edx,dl
c00199e6:	ff 24 95 e4 4a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb51c]
c00199ed:	8d 76 00             	lea    esi,[esi+0x0]
c00199f0:	e8 de fc ff ff       	call   c00196d3 <Vm::fpuGet0()>
c00199f5:	eb 09                	jmp    c0019a00 <Vm::x87Handler(regs*)+0x6e>
c00199f7:	90                   	nop
c00199f8:	e8 db fc ff ff       	call   c00196d8 <Vm::fpuGet1()>
c00199fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019a00:	57                   	push   edi
c0019a01:	57                   	push   edi
c0019a02:	66 90                	xchg   ax,ax
c0019a04:	52                   	push   edx
c0019a05:	50                   	push   eax
c0019a06:	e8 d6 fe ff ff       	call   c00198e1 <Vm::fpuPush(unsigned long long)>
c0019a0b:	90                   	nop
c0019a0c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019a10:	83 c4 10             	add    esp,0x10
c0019a13:	90                   	nop
c0019a14:	b0 01                	mov    al,0x1
c0019a16:	e9 89 0a 00 00       	jmp    c001a4a4 <Vm::x87Handler(regs*)+0xb12>
c0019a1b:	90                   	nop
c0019a1c:	83 ec 0c             	sub    esp,0xc
c0019a1f:	6a 00                	push   0x0
c0019a21:	e8 2c fe ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019a26:	59                   	pop    ecx
c0019a27:	5e                   	pop    esi
c0019a28:	52                   	push   edx
c0019a29:	50                   	push   eax
c0019a2a:	e8 b3 fd ff ff       	call   c00197e2 <Vm::fpuChs(unsigned long long)>
c0019a2f:	eb 17                	jmp    c0019a48 <Vm::x87Handler(regs*)+0xb6>
c0019a31:	8d 76 00             	lea    esi,[esi+0x0]
c0019a34:	83 ec 0c             	sub    esp,0xc
c0019a37:	6a 00                	push   0x0
c0019a39:	e8 14 fe ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019a3e:	5f                   	pop    edi
c0019a3f:	5d                   	pop    ebp
c0019a40:	52                   	push   edx
c0019a41:	50                   	push   eax
c0019a42:	e8 92 fd ff ff       	call   c00197d9 <Vm::fpuAbs(unsigned long long)>
c0019a47:	90                   	nop
c0019a48:	83 c4 0c             	add    esp,0xc
c0019a4b:	90                   	nop
c0019a4c:	52                   	push   edx
c0019a4d:	50                   	push   eax
c0019a4e:	66 90                	xchg   ax,ax
c0019a50:	6a 00                	push   0x0
c0019a52:	66 90                	xchg   ax,ax
c0019a54:	e8 3c fe ff ff       	call   c0019895 <Vm::fpuSetReg(int, unsigned long long)>
c0019a59:	eb b1                	jmp    c0019a0c <Vm::x87Handler(regs*)+0x7a>
c0019a5b:	90                   	nop
c0019a5c:	e8 b7 fc ff ff       	call   c0019718 <Vm::fpuGetLog210()>
c0019a61:	eb 9d                	jmp    c0019a00 <Vm::x87Handler(regs*)+0x6e>
c0019a63:	90                   	nop
c0019a64:	e8 7f fc ff ff       	call   c00196e8 <Vm::fpuGetLog2E()>
c0019a69:	eb 95                	jmp    c0019a00 <Vm::x87Handler(regs*)+0x6e>
c0019a6b:	90                   	nop
c0019a6c:	e8 6f fc ff ff       	call   c00196e0 <Vm::fpuGetPi()>
c0019a71:	eb 8d                	jmp    c0019a00 <Vm::x87Handler(regs*)+0x6e>
c0019a73:	90                   	nop
c0019a74:	e8 b7 fc ff ff       	call   c0019730 <Vm::fpuGetLog102()>
c0019a79:	eb 85                	jmp    c0019a00 <Vm::x87Handler(regs*)+0x6e>
c0019a7b:	90                   	nop
c0019a7c:	e8 7f fc ff ff       	call   c0019700 <Vm::fpuGetLogE2()>
c0019a81:	e9 7a ff ff ff       	jmp    c0019a00 <Vm::x87Handler(regs*)+0x6e>
c0019a86:	66 90                	xchg   ax,ax
c0019a88:	8d 50 40             	lea    edx,[eax+0x40]
c0019a8b:	80 fa 07             	cmp    dl,0x7
c0019a8e:	77 18                	ja     c0019aa8 <Vm::x87Handler(regs*)+0x116>
c0019a90:	83 ec 0c             	sub    esp,0xc
c0019a93:	2d c0 00 00 00       	sub    eax,0xc0
c0019a98:	50                   	push   eax
c0019a99:	e8 b4 fd ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019a9e:	59                   	pop    ecx
c0019a9f:	5e                   	pop    esi
c0019aa0:	e9 5f ff ff ff       	jmp    c0019a04 <Vm::x87Handler(regs*)+0x72>
c0019aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0019aa8:	8d 50 38             	lea    edx,[eax+0x38]
c0019aab:	80 fa 07             	cmp    dl,0x7
c0019aae:	77 3c                	ja     c0019aec <Vm::x87Handler(regs*)+0x15a>
c0019ab0:	83 ec 0c             	sub    esp,0xc
c0019ab3:	2d c8 00 00 00       	sub    eax,0xc8
c0019ab8:	50                   	push   eax
c0019ab9:	e8 94 fd ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019abe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ac5:	89 c6                	mov    esi,eax
c0019ac7:	89 d7                	mov    edi,edx
c0019ac9:	e8 84 fd ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019ace:	83 c4 0c             	add    esp,0xc
c0019ad1:	52                   	push   edx
c0019ad2:	50                   	push   eax
c0019ad3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ad7:	2d c8 00 00 00       	sub    eax,0xc8
c0019adc:	50                   	push   eax
c0019add:	e8 b3 fd ff ff       	call   c0019895 <Vm::fpuSetReg(int, unsigned long long)>
c0019ae2:	83 c4 0c             	add    esp,0xc
c0019ae5:	57                   	push   edi
c0019ae6:	56                   	push   esi
c0019ae7:	e9 64 ff ff ff       	jmp    c0019a50 <Vm::x87Handler(regs*)+0xbe>
c0019aec:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019af0:	84 d2                	test   dl,dl
c0019af2:	75 10                	jne    c0019b04 <Vm::x87Handler(regs*)+0x172>
c0019af4:	83 ec 0c             	sub    esp,0xc
c0019af7:	ff 36                	push   DWORD PTR [esi]
c0019af9:	e8 8d fa ff ff       	call   c001958b <Vm::fpu32ToInternal(unsigned int)>
c0019afe:	e9 c9 00 00 00       	jmp    c0019bcc <Vm::x87Handler(regs*)+0x23a>
c0019b03:	90                   	nop
c0019b04:	80 fa 03             	cmp    dl,0x3
c0019b07:	75 13                	jne    c0019b1c <Vm::x87Handler(regs*)+0x18a>
c0019b09:	e8 31 fe ff ff       	call   c001993f <Vm::fpuPop()>
c0019b0e:	55                   	push   ebp
c0019b0f:	55                   	push   ebp
c0019b10:	52                   	push   edx
c0019b11:	50                   	push   eax
c0019b12:	e8 0d fa ff ff       	call   c0019524 <Vm::fpuInternalTo32(unsigned long long)>
c0019b17:	e9 90 00 00 00       	jmp    c0019bac <Vm::x87Handler(regs*)+0x21a>
c0019b1c:	80 fa 05             	cmp    dl,0x5
c0019b1f:	75 0f                	jne    c0019b30 <Vm::x87Handler(regs*)+0x19e>
c0019b21:	66 8b 06             	mov    ax,WORD PTR [esi]
c0019b24:	66 a3 c2 79 02 c0    	mov    ds:0xc00279c2,ax
c0019b2a:	e9 ed 00 00 00       	jmp    c0019c1c <Vm::x87Handler(regs*)+0x28a>
c0019b2f:	90                   	nop
c0019b30:	31 c0                	xor    eax,eax
c0019b32:	80 fa 07             	cmp    dl,0x7
c0019b35:	0f 85 69 09 00 00    	jne    c001a4a4 <Vm::x87Handler(regs*)+0xb12>
c0019b3b:	66 a1 c2 79 02 c0    	mov    ax,ds:0xc00279c2
c0019b41:	66 89 06             	mov    WORD PTR [esi],ax
c0019b44:	e9 d3 00 00 00       	jmp    c0019c1c <Vm::x87Handler(regs*)+0x28a>
c0019b49:	8d 76 00             	lea    esi,[esi+0x0]
c0019b4c:	80 fa d8             	cmp    dl,0xd8
c0019b4f:	0f 84 d3 00 00 00    	je     c0019c28 <Vm::x87Handler(regs*)+0x296>
c0019b55:	80 fa dc             	cmp    dl,0xdc
c0019b58:	0f 84 2a 02 00 00    	je     c0019d88 <Vm::x87Handler(regs*)+0x3f6>
c0019b5e:	80 fa de             	cmp    dl,0xde
c0019b61:	0f 84 f1 02 00 00    	je     c0019e58 <Vm::x87Handler(regs*)+0x4c6>
c0019b67:	80 fa dd             	cmp    dl,0xdd
c0019b6a:	0f 84 94 04 00 00    	je     c001a004 <Vm::x87Handler(regs*)+0x672>
c0019b70:	80 fa da             	cmp    dl,0xda
c0019b73:	0f 84 5f 05 00 00    	je     c001a0d8 <Vm::x87Handler(regs*)+0x746>
c0019b79:	80 fa df             	cmp    dl,0xdf
c0019b7c:	0f 84 aa 05 00 00    	je     c001a12c <Vm::x87Handler(regs*)+0x79a>
c0019b82:	31 c0                	xor    eax,eax
c0019b84:	80 fa db             	cmp    dl,0xdb
c0019b87:	0f 85 17 09 00 00    	jne    c001a4a4 <Vm::x87Handler(regs*)+0xb12>
c0019b8d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b91:	80 fa 03             	cmp    dl,0x3
c0019b94:	0f 85 c2 06 00 00    	jne    c001a25c <Vm::x87Handler(regs*)+0x8ca>
c0019b9a:	e8 a0 fd ff ff       	call   c001993f <Vm::fpuPop()>
c0019b9f:	55                   	push   ebp
c0019ba0:	55                   	push   ebp
c0019ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ba4:	52                   	push   edx
c0019ba5:	50                   	push   eax
c0019ba6:	e8 2e fa ff ff       	call   c00195d9 <Vm::fpuFloatToLong(unsigned long long)>
c0019bab:	90                   	nop
c0019bac:	83 c4 10             	add    esp,0x10
c0019baf:	89 06                	mov    DWORD PTR [esi],eax
c0019bb1:	eb 69                	jmp    c0019c1c <Vm::x87Handler(regs*)+0x28a>
c0019bb3:	90                   	nop
c0019bb4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019bb8:	84 d2                	test   dl,dl
c0019bba:	0f 85 2c 06 00 00    	jne    c001a1ec <Vm::x87Handler(regs*)+0x85a>
c0019bc0:	57                   	push   edi
c0019bc1:	57                   	push   edi
c0019bc2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019bc5:	ff 36                	push   DWORD PTR [esi]
c0019bc7:	e8 04 fa ff ff       	call   c00195d0 <Vm::fpu64ToInternal(unsigned long long)>
c0019bcc:	5e                   	pop    esi
c0019bcd:	5f                   	pop    edi
c0019bce:	52                   	push   edx
c0019bcf:	50                   	push   eax
c0019bd0:	e8 0c fd ff ff       	call   c00198e1 <Vm::fpuPush(unsigned long long)>
c0019bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0019bd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bdc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019bdf:	e9 2c fe ff ff       	jmp    c0019a10 <Vm::x87Handler(regs*)+0x7e>
c0019be4:	80 fa 03             	cmp    dl,0x3
c0019be7:	0f 85 2b 07 00 00    	jne    c001a318 <Vm::x87Handler(regs*)+0x986>
c0019bed:	57                   	push   edi
c0019bee:	57                   	push   edi
c0019bef:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019bf2:	ff 36                	push   DWORD PTR [esi]
c0019bf4:	e8 d7 f9 ff ff       	call   c00195d0 <Vm::fpu64ToInternal(unsigned long long)>
c0019bf9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c00:	89 c6                	mov    esi,eax
c0019c02:	89 d7                	mov    edi,edx
c0019c04:	e8 49 fc ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019c09:	57                   	push   edi
c0019c0a:	56                   	push   esi
c0019c0b:	52                   	push   edx
c0019c0c:	50                   	push   eax
c0019c0d:	e8 60 fb ff ff       	call   c0019772 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019c12:	83 c4 20             	add    esp,0x20
c0019c15:	e8 25 fd ff ff       	call   c001993f <Vm::fpuPop()>
c0019c1a:	66 90                	xchg   ax,ax
c0019c1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c20:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019c23:	e9 ec fd ff ff       	jmp    c0019a14 <Vm::x87Handler(regs*)+0x82>
c0019c28:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019c2c:	8d 50 40             	lea    edx,[eax+0x40]
c0019c2f:	80 fa 07             	cmp    dl,0x7
c0019c32:	77 2c                	ja     c0019c60 <Vm::x87Handler(regs*)+0x2ce>
c0019c34:	83 ec 0c             	sub    esp,0xc
c0019c37:	2d c0 00 00 00       	sub    eax,0xc0
c0019c3c:	50                   	push   eax
c0019c3d:	e8 10 fc ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019c42:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c49:	89 c6                	mov    esi,eax
c0019c4b:	89 d7                	mov    edi,edx
c0019c4d:	e8 00 fc ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019c52:	57                   	push   edi
c0019c53:	56                   	push   esi
c0019c54:	52                   	push   edx
c0019c55:	50                   	push   eax
c0019c56:	e8 6d fb ff ff       	call   c00197c8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019c5b:	eb 33                	jmp    c0019c90 <Vm::x87Handler(regs*)+0x2fe>
c0019c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c60:	8d 50 38             	lea    edx,[eax+0x38]
c0019c63:	80 fa 07             	cmp    dl,0x7
c0019c66:	77 30                	ja     c0019c98 <Vm::x87Handler(regs*)+0x306>
c0019c68:	83 ec 0c             	sub    esp,0xc
c0019c6b:	2d c8 00 00 00       	sub    eax,0xc8
c0019c70:	50                   	push   eax
c0019c71:	e8 dc fb ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019c76:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c7d:	89 c6                	mov    esi,eax
c0019c7f:	89 d7                	mov    edi,edx
c0019c81:	e8 cc fb ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019c86:	57                   	push   edi
c0019c87:	56                   	push   esi
c0019c88:	52                   	push   edx
c0019c89:	50                   	push   eax
c0019c8a:	e8 72 fb ff ff       	call   c0019801 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019c8f:	90                   	nop
c0019c90:	83 c4 1c             	add    esp,0x1c
c0019c93:	e9 b4 fd ff ff       	jmp    c0019a4c <Vm::x87Handler(regs*)+0xba>
c0019c98:	8d 50 30             	lea    edx,[eax+0x30]
c0019c9b:	80 fa 07             	cmp    dl,0x7
c0019c9e:	77 10                	ja     c0019cb0 <Vm::x87Handler(regs*)+0x31e>
c0019ca0:	83 ec 0c             	sub    esp,0xc
c0019ca3:	2d d0 00 00 00       	sub    eax,0xd0
c0019ca8:	e9 c3 03 00 00       	jmp    c001a070 <Vm::x87Handler(regs*)+0x6de>
c0019cad:	8d 76 00             	lea    esi,[esi+0x0]
c0019cb0:	8d 50 28             	lea    edx,[eax+0x28]
c0019cb3:	80 fa 07             	cmp    dl,0x7
c0019cb6:	77 10                	ja     c0019cc8 <Vm::x87Handler(regs*)+0x336>
c0019cb8:	83 ec 0c             	sub    esp,0xc
c0019cbb:	2d d8 00 00 00       	sub    eax,0xd8
c0019cc0:	e9 e7 03 00 00       	jmp    c001a0ac <Vm::x87Handler(regs*)+0x71a>
c0019cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cc8:	8d 50 20             	lea    edx,[eax+0x20]
c0019ccb:	80 fa 07             	cmp    dl,0x7
c0019cce:	77 1c                	ja     c0019cec <Vm::x87Handler(regs*)+0x35a>
c0019cd0:	83 ec 0c             	sub    esp,0xc
c0019cd3:	2d e0 00 00 00       	sub    eax,0xe0
c0019cd8:	50                   	push   eax
c0019cd9:	e8 74 fb ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019cde:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ce5:	89 c6                	mov    esi,eax
c0019ce7:	89 d7                	mov    edi,edx
c0019ce9:	eb 25                	jmp    c0019d10 <Vm::x87Handler(regs*)+0x37e>
c0019ceb:	90                   	nop
c0019cec:	8d 50 18             	lea    edx,[eax+0x18]
c0019cef:	80 fa 07             	cmp    dl,0x7
c0019cf2:	77 30                	ja     c0019d24 <Vm::x87Handler(regs*)+0x392>
c0019cf4:	83 ec 0c             	sub    esp,0xc
c0019cf7:	6a 00                	push   0x0
c0019cf9:	e8 54 fb ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019cfe:	89 c6                	mov    esi,eax
c0019d00:	89 d7                	mov    edi,edx
c0019d02:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d06:	2d e8 00 00 00       	sub    eax,0xe8
c0019d0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d0e:	66 90                	xchg   ax,ax
c0019d10:	e8 3d fb ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019d15:	57                   	push   edi
c0019d16:	56                   	push   esi
c0019d17:	52                   	push   edx
c0019d18:	50                   	push   eax
c0019d19:	e8 d4 fa ff ff       	call   c00197f2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019d1e:	e9 6d ff ff ff       	jmp    c0019c90 <Vm::x87Handler(regs*)+0x2fe>
c0019d23:	90                   	nop
c0019d24:	8d 50 10             	lea    edx,[eax+0x10]
c0019d27:	80 fa 07             	cmp    dl,0x7
c0019d2a:	77 1c                	ja     c0019d48 <Vm::x87Handler(regs*)+0x3b6>
c0019d2c:	83 ec 0c             	sub    esp,0xc
c0019d2f:	2d f0 00 00 00       	sub    eax,0xf0
c0019d34:	50                   	push   eax
c0019d35:	e8 18 fb ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019d3a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d41:	89 c6                	mov    esi,eax
c0019d43:	89 d7                	mov    edi,edx
c0019d45:	eb 25                	jmp    c0019d6c <Vm::x87Handler(regs*)+0x3da>
c0019d47:	90                   	nop
c0019d48:	3c f7                	cmp    al,0xf7
c0019d4a:	0f 86 00 04 00 00    	jbe    c001a150 <Vm::x87Handler(regs*)+0x7be>
c0019d50:	83 ec 0c             	sub    esp,0xc
c0019d53:	6a 00                	push   0x0
c0019d55:	e8 f8 fa ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019d5a:	89 c6                	mov    esi,eax
c0019d5c:	89 d7                	mov    edi,edx
c0019d5e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d62:	2d f8 00 00 00       	sub    eax,0xf8
c0019d67:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d6a:	66 90                	xchg   ax,ax
c0019d6c:	e8 e1 fa ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019d71:	57                   	push   edi
c0019d72:	56                   	push   esi
c0019d73:	52                   	push   edx
c0019d74:	50                   	push   eax
c0019d75:	e8 a6 fa ff ff       	call   c0019820 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019d7a:	83 c4 1c             	add    esp,0x1c
c0019d7d:	52                   	push   edx
c0019d7e:	50                   	push   eax
c0019d7f:	6a 00                	push   0x0
c0019d81:	e9 6a 02 00 00       	jmp    c0019ff0 <Vm::x87Handler(regs*)+0x65e>
c0019d86:	66 90                	xchg   ax,ax
c0019d88:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d8c:	8d 50 40             	lea    edx,[eax+0x40]
c0019d8f:	80 fa 07             	cmp    dl,0x7
c0019d92:	77 38                	ja     c0019dcc <Vm::x87Handler(regs*)+0x43a>
c0019d94:	83 ec 0c             	sub    esp,0xc
c0019d97:	2d c0 00 00 00       	sub    eax,0xc0
c0019d9c:	50                   	push   eax
c0019d9d:	e8 b0 fa ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019da2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019da9:	89 c6                	mov    esi,eax
c0019dab:	89 d7                	mov    edi,edx
c0019dad:	e8 a0 fa ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019db2:	57                   	push   edi
c0019db3:	56                   	push   esi
c0019db4:	52                   	push   edx
c0019db5:	50                   	push   eax
c0019db6:	e8 0d fa ff ff       	call   c00197c8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019dbb:	83 c4 1c             	add    esp,0x1c
c0019dbe:	52                   	push   edx
c0019dbf:	50                   	push   eax
c0019dc0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019dc4:	2d c0 00 00 00       	sub    eax,0xc0
c0019dc9:	eb 41                	jmp    c0019e0c <Vm::x87Handler(regs*)+0x47a>
c0019dcb:	90                   	nop
c0019dcc:	8d 50 38             	lea    edx,[eax+0x38]
c0019dcf:	80 fa 07             	cmp    dl,0x7
c0019dd2:	77 40                	ja     c0019e14 <Vm::x87Handler(regs*)+0x482>
c0019dd4:	83 ec 0c             	sub    esp,0xc
c0019dd7:	2d c8 00 00 00       	sub    eax,0xc8
c0019ddc:	50                   	push   eax
c0019ddd:	e8 70 fa ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019de2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019de9:	89 c6                	mov    esi,eax
c0019deb:	89 d7                	mov    edi,edx
c0019ded:	e8 60 fa ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019df2:	57                   	push   edi
c0019df3:	56                   	push   esi
c0019df4:	52                   	push   edx
c0019df5:	50                   	push   eax
c0019df6:	e8 06 fa ff ff       	call   c0019801 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019dfb:	83 c4 1c             	add    esp,0x1c
c0019dfe:	52                   	push   edx
c0019dff:	50                   	push   eax
c0019e00:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e04:	2d c8 00 00 00       	sub    eax,0xc8
c0019e09:	8d 76 00             	lea    esi,[esi+0x0]
c0019e0c:	50                   	push   eax
c0019e0d:	e9 42 fc ff ff       	jmp    c0019a54 <Vm::x87Handler(regs*)+0xc2>
c0019e12:	66 90                	xchg   ax,ax
c0019e14:	83 c0 18             	add    eax,0x18
c0019e17:	3c 07                	cmp    al,0x7
c0019e19:	0f 87 6d 04 00 00    	ja     c001a28c <Vm::x87Handler(regs*)+0x8fa>
c0019e1f:	83 ec 0c             	sub    esp,0xc
c0019e22:	6a 00                	push   0x0
c0019e24:	e8 29 fa ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019e29:	89 c6                	mov    esi,eax
c0019e2b:	89 d7                	mov    edi,edx
c0019e2d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e31:	2d e8 00 00 00       	sub    eax,0xe8
c0019e36:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e39:	e8 14 fa ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019e3e:	57                   	push   edi
c0019e3f:	56                   	push   esi
c0019e40:	52                   	push   edx
c0019e41:	50                   	push   eax
c0019e42:	e8 ab f9 ff ff       	call   c00197f2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019e47:	83 c4 1c             	add    esp,0x1c
c0019e4a:	52                   	push   edx
c0019e4b:	50                   	push   eax
c0019e4c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e50:	2d e8 00 00 00       	sub    eax,0xe8
c0019e55:	eb b5                	jmp    c0019e0c <Vm::x87Handler(regs*)+0x47a>
c0019e57:	90                   	nop
c0019e58:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e5c:	8d 50 40             	lea    edx,[eax+0x40]
c0019e5f:	80 fa 07             	cmp    dl,0x7
c0019e62:	77 3c                	ja     c0019ea0 <Vm::x87Handler(regs*)+0x50e>
c0019e64:	83 ec 0c             	sub    esp,0xc
c0019e67:	2d c0 00 00 00       	sub    eax,0xc0
c0019e6c:	50                   	push   eax
c0019e6d:	e8 e0 f9 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019e72:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e79:	89 c6                	mov    esi,eax
c0019e7b:	89 d7                	mov    edi,edx
c0019e7d:	e8 d0 f9 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019e82:	57                   	push   edi
c0019e83:	56                   	push   esi
c0019e84:	52                   	push   edx
c0019e85:	50                   	push   eax
c0019e86:	e8 3d f9 ff ff       	call   c00197c8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019e8b:	83 c4 1c             	add    esp,0x1c
c0019e8e:	52                   	push   edx
c0019e8f:	50                   	push   eax
c0019e90:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e94:	2d c0 00 00 00       	sub    eax,0xc0
c0019e99:	e9 b2 01 00 00       	jmp    c001a050 <Vm::x87Handler(regs*)+0x6be>
c0019e9e:	66 90                	xchg   ax,ax
c0019ea0:	8d 50 20             	lea    edx,[eax+0x20]
c0019ea3:	80 fa 07             	cmp    dl,0x7
c0019ea6:	77 3c                	ja     c0019ee4 <Vm::x87Handler(regs*)+0x552>
c0019ea8:	83 ec 0c             	sub    esp,0xc
c0019eab:	2d e0 00 00 00       	sub    eax,0xe0
c0019eb0:	50                   	push   eax
c0019eb1:	e8 9c f9 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019eb6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ebd:	89 c6                	mov    esi,eax
c0019ebf:	89 d7                	mov    edi,edx
c0019ec1:	e8 8c f9 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019ec6:	57                   	push   edi
c0019ec7:	56                   	push   esi
c0019ec8:	52                   	push   edx
c0019ec9:	50                   	push   eax
c0019eca:	e8 23 f9 ff ff       	call   c00197f2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019ecf:	83 c4 1c             	add    esp,0x1c
c0019ed2:	52                   	push   edx
c0019ed3:	50                   	push   eax
c0019ed4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ed8:	2d e0 00 00 00       	sub    eax,0xe0
c0019edd:	e9 6e 01 00 00       	jmp    c001a050 <Vm::x87Handler(regs*)+0x6be>
c0019ee2:	66 90                	xchg   ax,ax
c0019ee4:	8d 50 18             	lea    edx,[eax+0x18]
c0019ee7:	80 fa 07             	cmp    dl,0x7
c0019eea:	77 3c                	ja     c0019f28 <Vm::x87Handler(regs*)+0x596>
c0019eec:	83 ec 0c             	sub    esp,0xc
c0019eef:	6a 00                	push   0x0
c0019ef1:	e8 5c f9 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019ef6:	89 c6                	mov    esi,eax
c0019ef8:	89 d7                	mov    edi,edx
c0019efa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019efe:	2d e8 00 00 00       	sub    eax,0xe8
c0019f03:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f06:	e8 47 f9 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019f0b:	57                   	push   edi
c0019f0c:	56                   	push   esi
c0019f0d:	52                   	push   edx
c0019f0e:	50                   	push   eax
c0019f0f:	e8 de f8 ff ff       	call   c00197f2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019f14:	83 c4 1c             	add    esp,0x1c
c0019f17:	52                   	push   edx
c0019f18:	50                   	push   eax
c0019f19:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f1d:	2d e8 00 00 00       	sub    eax,0xe8
c0019f22:	e9 29 01 00 00       	jmp    c001a050 <Vm::x87Handler(regs*)+0x6be>
c0019f27:	90                   	nop
c0019f28:	8d 50 38             	lea    edx,[eax+0x38]
c0019f2b:	80 fa 07             	cmp    dl,0x7
c0019f2e:	77 3c                	ja     c0019f6c <Vm::x87Handler(regs*)+0x5da>
c0019f30:	83 ec 0c             	sub    esp,0xc
c0019f33:	2d c8 00 00 00       	sub    eax,0xc8
c0019f38:	50                   	push   eax
c0019f39:	e8 14 f9 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019f3e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019f45:	89 c6                	mov    esi,eax
c0019f47:	89 d7                	mov    edi,edx
c0019f49:	e8 04 f9 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019f4e:	57                   	push   edi
c0019f4f:	56                   	push   esi
c0019f50:	52                   	push   edx
c0019f51:	50                   	push   eax
c0019f52:	e8 aa f8 ff ff       	call   c0019801 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019f57:	83 c4 1c             	add    esp,0x1c
c0019f5a:	52                   	push   edx
c0019f5b:	50                   	push   eax
c0019f5c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f60:	2d c8 00 00 00       	sub    eax,0xc8
c0019f65:	e9 82 00 00 00       	jmp    c0019fec <Vm::x87Handler(regs*)+0x65a>
c0019f6a:	66 90                	xchg   ax,ax
c0019f6c:	3c f7                	cmp    al,0xf7
c0019f6e:	76 38                	jbe    c0019fa8 <Vm::x87Handler(regs*)+0x616>
c0019f70:	83 ec 0c             	sub    esp,0xc
c0019f73:	6a 00                	push   0x0
c0019f75:	e8 d8 f8 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019f7a:	89 c6                	mov    esi,eax
c0019f7c:	89 d7                	mov    edi,edx
c0019f7e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f82:	2d f8 00 00 00       	sub    eax,0xf8
c0019f87:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f8a:	e8 c3 f8 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019f8f:	57                   	push   edi
c0019f90:	56                   	push   esi
c0019f91:	52                   	push   edx
c0019f92:	50                   	push   eax
c0019f93:	e8 88 f8 ff ff       	call   c0019820 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019f98:	83 c4 1c             	add    esp,0x1c
c0019f9b:	52                   	push   edx
c0019f9c:	50                   	push   eax
c0019f9d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fa1:	2d f8 00 00 00       	sub    eax,0xf8
c0019fa6:	eb 44                	jmp    c0019fec <Vm::x87Handler(regs*)+0x65a>
c0019fa8:	8d 50 10             	lea    edx,[eax+0x10]
c0019fab:	80 fa 07             	cmp    dl,0x7
c0019fae:	0f 87 6c 01 00 00    	ja     c001a120 <Vm::x87Handler(regs*)+0x78e>
c0019fb4:	83 ec 0c             	sub    esp,0xc
c0019fb7:	2d f0 00 00 00       	sub    eax,0xf0
c0019fbc:	50                   	push   eax
c0019fbd:	e8 90 f8 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019fc2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019fc9:	89 c6                	mov    esi,eax
c0019fcb:	89 d7                	mov    edi,edx
c0019fcd:	e8 80 f8 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c0019fd2:	57                   	push   edi
c0019fd3:	56                   	push   esi
c0019fd4:	52                   	push   edx
c0019fd5:	50                   	push   eax
c0019fd6:	e8 45 f8 ff ff       	call   c0019820 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019fdb:	83 c4 1c             	add    esp,0x1c
c0019fde:	52                   	push   edx
c0019fdf:	50                   	push   eax
c0019fe0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fe4:	2d f0 00 00 00       	sub    eax,0xf0
c0019fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fec:	50                   	push   eax
c0019fed:	8d 76 00             	lea    esi,[esi+0x0]
c0019ff0:	e8 a0 f8 ff ff       	call   c0019895 <Vm::fpuSetReg(int, unsigned long long)>
c0019ff5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019ff9:	e8 41 f9 ff ff       	call   c001993f <Vm::fpuPop()>
c0019ffe:	e9 0d fa ff ff       	jmp    c0019a10 <Vm::x87Handler(regs*)+0x7e>
c001a003:	90                   	nop
c001a004:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a008:	8d 50 30             	lea    edx,[eax+0x30]
c001a00b:	80 fa 07             	cmp    dl,0x7
c001a00e:	77 20                	ja     c001a030 <Vm::x87Handler(regs*)+0x69e>
c001a010:	83 ec 0c             	sub    esp,0xc
c001a013:	6a 00                	push   0x0
c001a015:	e8 38 f8 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a01a:	83 c4 0c             	add    esp,0xc
c001a01d:	52                   	push   edx
c001a01e:	50                   	push   eax
c001a01f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a023:	2d d0 00 00 00       	sub    eax,0xd0
c001a028:	e9 df fd ff ff       	jmp    c0019e0c <Vm::x87Handler(regs*)+0x47a>
c001a02d:	8d 76 00             	lea    esi,[esi+0x0]
c001a030:	8d 50 28             	lea    edx,[eax+0x28]
c001a033:	80 fa 07             	cmp    dl,0x7
c001a036:	77 28                	ja     c001a060 <Vm::x87Handler(regs*)+0x6ce>
c001a038:	83 ec 0c             	sub    esp,0xc
c001a03b:	6a 00                	push   0x0
c001a03d:	e8 10 f8 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a042:	83 c4 0c             	add    esp,0xc
c001a045:	52                   	push   edx
c001a046:	50                   	push   eax
c001a047:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a04b:	2d d8 00 00 00       	sub    eax,0xd8
c001a050:	50                   	push   eax
c001a051:	e8 3f f8 ff ff       	call   c0019895 <Vm::fpuSetReg(int, unsigned long long)>
c001a056:	e8 e4 f8 ff ff       	call   c001993f <Vm::fpuPop()>
c001a05b:	e9 ac f9 ff ff       	jmp    c0019a0c <Vm::x87Handler(regs*)+0x7a>
c001a060:	8d 50 20             	lea    edx,[eax+0x20]
c001a063:	80 fa 07             	cmp    dl,0x7
c001a066:	77 30                	ja     c001a098 <Vm::x87Handler(regs*)+0x706>
c001a068:	83 ec 0c             	sub    esp,0xc
c001a06b:	2d e0 00 00 00       	sub    eax,0xe0
c001a070:	50                   	push   eax
c001a071:	e8 dc f7 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a076:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a07d:	89 c6                	mov    esi,eax
c001a07f:	89 d7                	mov    edi,edx
c001a081:	e8 cc f7 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a086:	57                   	push   edi
c001a087:	56                   	push   esi
c001a088:	52                   	push   edx
c001a089:	50                   	push   eax
c001a08a:	e8 e3 f6 ff ff       	call   c0019772 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a08f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a093:	e9 78 02 00 00       	jmp    c001a310 <Vm::x87Handler(regs*)+0x97e>
c001a098:	8d 50 18             	lea    edx,[eax+0x18]
c001a09b:	80 fa 07             	cmp    dl,0x7
c001a09e:	0f 87 10 fb ff ff    	ja     c0019bb4 <Vm::x87Handler(regs*)+0x222>
c001a0a4:	83 ec 0c             	sub    esp,0xc
c001a0a7:	2d e8 00 00 00       	sub    eax,0xe8
c001a0ac:	50                   	push   eax
c001a0ad:	e8 a0 f7 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a0b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0b9:	89 c6                	mov    esi,eax
c001a0bb:	89 d7                	mov    edi,edx
c001a0bd:	e8 90 f7 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a0c2:	57                   	push   edi
c001a0c3:	56                   	push   esi
c001a0c4:	52                   	push   edx
c001a0c5:	50                   	push   eax
c001a0c6:	e8 a7 f6 ff ff       	call   c0019772 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0cb:	83 c4 20             	add    esp,0x20
c001a0ce:	e8 6c f8 ff ff       	call   c001993f <Vm::fpuPop()>
c001a0d3:	eb 6f                	jmp    c001a144 <Vm::x87Handler(regs*)+0x7b2>
c001a0d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0d8:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a0dc:	0f 85 22 01 00 00    	jne    c001a204 <Vm::x87Handler(regs*)+0x872>
c001a0e2:	66 90                	xchg   ax,ax
c001a0e4:	83 ec 0c             	sub    esp,0xc
c001a0e7:	6a 01                	push   0x1
c001a0e9:	e8 64 f7 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a0ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0f5:	89 c6                	mov    esi,eax
c001a0f7:	89 d7                	mov    edi,edx
c001a0f9:	e8 54 f7 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a0fe:	57                   	push   edi
c001a0ff:	56                   	push   esi
c001a100:	52                   	push   edx
c001a101:	50                   	push   eax
c001a102:	e8 6b f6 ff ff       	call   c0019772 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a107:	83 c4 20             	add    esp,0x20
c001a10a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a10e:	e8 2c f8 ff ff       	call   c001993f <Vm::fpuPop()>
c001a113:	e8 27 f8 ff ff       	call   c001993f <Vm::fpuPop()>
c001a118:	e9 f7 f8 ff ff       	jmp    c0019a14 <Vm::x87Handler(regs*)+0x82>
c001a11d:	8d 76 00             	lea    esi,[esi+0x0]
c001a120:	3c d9                	cmp    al,0xd9
c001a122:	0f 85 e8 02 00 00    	jne    c001a410 <Vm::x87Handler(regs*)+0xa7e>
c001a128:	eb ba                	jmp    c001a0e4 <Vm::x87Handler(regs*)+0x752>
c001a12a:	66 90                	xchg   ax,ax
c001a12c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a130:	0f 85 2a 03 00 00    	jne    c001a460 <Vm::x87Handler(regs*)+0xace>
c001a136:	0f b7 05 c0 79 02 c0 	movzx  eax,WORD PTR ds:0xc00279c0
c001a13d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a141:	8d 76 00             	lea    esi,[esi+0x0]
c001a144:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a148:	e9 c7 f8 ff ff       	jmp    c0019a14 <Vm::x87Handler(regs*)+0x82>
c001a14d:	8d 76 00             	lea    esi,[esi+0x0]
c001a150:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a154:	84 d2                	test   dl,dl
c001a156:	75 10                	jne    c001a168 <Vm::x87Handler(regs*)+0x7d6>
c001a158:	83 ec 0c             	sub    esp,0xc
c001a15b:	ff 36                	push   DWORD PTR [esi]
c001a15d:	e8 29 f4 ff ff       	call   c001958b <Vm::fpu32ToInternal(unsigned int)>
c001a162:	e9 39 01 00 00       	jmp    c001a2a0 <Vm::x87Handler(regs*)+0x90e>
c001a167:	90                   	nop
c001a168:	80 fa 01             	cmp    dl,0x1
c001a16b:	75 0f                	jne    c001a17c <Vm::x87Handler(regs*)+0x7ea>
c001a16d:	83 ec 0c             	sub    esp,0xc
c001a170:	ff 36                	push   DWORD PTR [esi]
c001a172:	e8 14 f4 ff ff       	call   c001958b <Vm::fpu32ToInternal(unsigned int)>
c001a177:	e9 b4 02 00 00       	jmp    c001a430 <Vm::x87Handler(regs*)+0xa9e>
c001a17c:	80 fa 04             	cmp    dl,0x4
c001a17f:	75 0f                	jne    c001a190 <Vm::x87Handler(regs*)+0x7fe>
c001a181:	83 ec 0c             	sub    esp,0xc
c001a184:	ff 36                	push   DWORD PTR [esi]
c001a186:	e8 00 f4 ff ff       	call   c001958b <Vm::fpu32ToInternal(unsigned int)>
c001a18b:	e9 9c 01 00 00       	jmp    c001a32c <Vm::x87Handler(regs*)+0x99a>
c001a190:	80 fa 05             	cmp    dl,0x5
c001a193:	75 1b                	jne    c001a1b0 <Vm::x87Handler(regs*)+0x81e>
c001a195:	83 ec 0c             	sub    esp,0xc
c001a198:	6a 00                	push   0x0
c001a19a:	e8 b3 f6 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a19f:	89 c7                	mov    edi,eax
c001a1a1:	89 d5                	mov    ebp,edx
c001a1a3:	58                   	pop    eax
c001a1a4:	ff 36                	push   DWORD PTR [esi]
c001a1a6:	e8 e0 f3 ff ff       	call   c001958b <Vm::fpu32ToInternal(unsigned int)>
c001a1ab:	e9 bc 01 00 00       	jmp    c001a36c <Vm::x87Handler(regs*)+0x9da>
c001a1b0:	80 fa 06             	cmp    dl,0x6
c001a1b3:	75 0f                	jne    c001a1c4 <Vm::x87Handler(regs*)+0x832>
c001a1b5:	83 ec 0c             	sub    esp,0xc
c001a1b8:	ff 36                	push   DWORD PTR [esi]
c001a1ba:	e8 cc f3 ff ff       	call   c001958b <Vm::fpu32ToInternal(unsigned int)>
c001a1bf:	e9 cc 01 00 00       	jmp    c001a390 <Vm::x87Handler(regs*)+0x9fe>
c001a1c4:	31 c0                	xor    eax,eax
c001a1c6:	80 fa 07             	cmp    dl,0x7
c001a1c9:	0f 85 d5 02 00 00    	jne    c001a4a4 <Vm::x87Handler(regs*)+0xb12>
c001a1cf:	83 ec 0c             	sub    esp,0xc
c001a1d2:	6a 00                	push   0x0
c001a1d4:	e8 79 f6 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a1d9:	89 c7                	mov    edi,eax
c001a1db:	89 d5                	mov    ebp,edx
c001a1dd:	58                   	pop    eax
c001a1de:	ff 36                	push   DWORD PTR [esi]
c001a1e0:	e8 a6 f3 ff ff       	call   c001958b <Vm::fpu32ToInternal(unsigned int)>
c001a1e5:	e9 ee 01 00 00       	jmp    c001a3d8 <Vm::x87Handler(regs*)+0xa46>
c001a1ea:	66 90                	xchg   ax,ax
c001a1ec:	80 fa 03             	cmp    dl,0x3
c001a1ef:	0f 85 f7 01 00 00    	jne    c001a3ec <Vm::x87Handler(regs*)+0xa5a>
c001a1f5:	e8 45 f7 ff ff       	call   c001993f <Vm::fpuPop()>
c001a1fa:	51                   	push   ecx
c001a1fb:	51                   	push   ecx
c001a1fc:	e9 03 02 00 00       	jmp    c001a404 <Vm::x87Handler(regs*)+0xa72>
c001a201:	8d 76 00             	lea    esi,[esi+0x0]
c001a204:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a208:	80 fa 01             	cmp    dl,0x1
c001a20b:	75 0b                	jne    c001a218 <Vm::x87Handler(regs*)+0x886>
c001a20d:	57                   	push   edi
c001a20e:	57                   	push   edi
c001a20f:	8b 06                	mov    eax,DWORD PTR [esi]
c001a211:	e9 0e 02 00 00       	jmp    c001a424 <Vm::x87Handler(regs*)+0xa92>
c001a216:	66 90                	xchg   ax,ax
c001a218:	80 fa 04             	cmp    dl,0x4
c001a21b:	75 13                	jne    c001a230 <Vm::x87Handler(regs*)+0x89e>
c001a21d:	31 d2                	xor    edx,edx
c001a21f:	51                   	push   ecx
c001a220:	51                   	push   ecx
c001a221:	8b 06                	mov    eax,DWORD PTR [esi]
c001a223:	52                   	push   edx
c001a224:	50                   	push   eax
c001a225:	e8 4a f4 ff ff       	call   c0019674 <Vm::fpuLongToFloat(long long)>
c001a22a:	e9 fd 00 00 00       	jmp    c001a32c <Vm::x87Handler(regs*)+0x99a>
c001a22f:	90                   	nop
c001a230:	31 c0                	xor    eax,eax
c001a232:	80 fa 07             	cmp    dl,0x7
c001a235:	0f 85 69 02 00 00    	jne    c001a4a4 <Vm::x87Handler(regs*)+0xb12>
c001a23b:	83 ec 0c             	sub    esp,0xc
c001a23e:	6a 00                	push   0x0
c001a240:	e8 0d f6 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a245:	89 c7                	mov    edi,eax
c001a247:	89 d5                	mov    ebp,edx
c001a249:	58                   	pop    eax
c001a24a:	8b 06                	mov    eax,DWORD PTR [esi]
c001a24c:	5a                   	pop    edx
c001a24d:	31 d2                	xor    edx,edx
c001a24f:	52                   	push   edx
c001a250:	50                   	push   eax
c001a251:	e8 1e f4 ff ff       	call   c0019674 <Vm::fpuLongToFloat(long long)>
c001a256:	e9 7d 01 00 00       	jmp    c001a3d8 <Vm::x87Handler(regs*)+0xa46>
c001a25b:	90                   	nop
c001a25c:	84 d2                	test   dl,dl
c001a25e:	75 10                	jne    c001a270 <Vm::x87Handler(regs*)+0x8de>
c001a260:	31 d2                	xor    edx,edx
c001a262:	55                   	push   ebp
c001a263:	55                   	push   ebp
c001a264:	8b 06                	mov    eax,DWORD PTR [esi]
c001a266:	52                   	push   edx
c001a267:	50                   	push   eax
c001a268:	e9 03 02 00 00       	jmp    c001a470 <Vm::x87Handler(regs*)+0xade>
c001a26d:	8d 76 00             	lea    esi,[esi+0x0]
c001a270:	31 c0                	xor    eax,eax
c001a272:	80 fa 02             	cmp    dl,0x2
c001a275:	0f 85 29 02 00 00    	jne    c001a4a4 <Vm::x87Handler(regs*)+0xb12>
c001a27b:	83 ec 0c             	sub    esp,0xc
c001a27e:	6a 00                	push   0x0
c001a280:	e8 cd f5 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a285:	59                   	pop    ecx
c001a286:	5f                   	pop    edi
c001a287:	e9 18 f9 ff ff       	jmp    c0019ba4 <Vm::x87Handler(regs*)+0x212>
c001a28c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a290:	84 d2                	test   dl,dl
c001a292:	75 2c                	jne    c001a2c0 <Vm::x87Handler(regs*)+0x92e>
c001a294:	50                   	push   eax
c001a295:	50                   	push   eax
c001a296:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a299:	ff 36                	push   DWORD PTR [esi]
c001a29b:	e8 30 f3 ff ff       	call   c00195d0 <Vm::fpu64ToInternal(unsigned long long)>
c001a2a0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2a7:	89 c6                	mov    esi,eax
c001a2a9:	89 d7                	mov    edi,edx
c001a2ab:	e8 a2 f5 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a2b0:	57                   	push   edi
c001a2b1:	56                   	push   esi
c001a2b2:	52                   	push   edx
c001a2b3:	50                   	push   eax
c001a2b4:	e8 0f f5 ff ff       	call   c00197c8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a2b9:	e9 8e 01 00 00       	jmp    c001a44c <Vm::x87Handler(regs*)+0xaba>
c001a2be:	66 90                	xchg   ax,ax
c001a2c0:	80 fa 01             	cmp    dl,0x1
c001a2c3:	75 13                	jne    c001a2d8 <Vm::x87Handler(regs*)+0x946>
c001a2c5:	50                   	push   eax
c001a2c6:	50                   	push   eax
c001a2c7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2ca:	ff 36                	push   DWORD PTR [esi]
c001a2cc:	e8 ff f2 ff ff       	call   c00195d0 <Vm::fpu64ToInternal(unsigned long long)>
c001a2d1:	e9 5a 01 00 00       	jmp    c001a430 <Vm::x87Handler(regs*)+0xa9e>
c001a2d6:	66 90                	xchg   ax,ax
c001a2d8:	80 fa 02             	cmp    dl,0x2
c001a2db:	0f 85 03 f9 ff ff    	jne    c0019be4 <Vm::x87Handler(regs*)+0x252>
c001a2e1:	55                   	push   ebp
c001a2e2:	55                   	push   ebp
c001a2e3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2e6:	ff 36                	push   DWORD PTR [esi]
c001a2e8:	e8 e3 f2 ff ff       	call   c00195d0 <Vm::fpu64ToInternal(unsigned long long)>
c001a2ed:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2f4:	89 c6                	mov    esi,eax
c001a2f6:	89 d7                	mov    edi,edx
c001a2f8:	e8 55 f5 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a2fd:	57                   	push   edi
c001a2fe:	56                   	push   esi
c001a2ff:	52                   	push   edx
c001a300:	50                   	push   eax
c001a301:	e8 6c f4 ff ff       	call   c0019772 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a306:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a30a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a30d:	8d 76 00             	lea    esi,[esi+0x0]
c001a310:	83 c4 20             	add    esp,0x20
c001a313:	e9 fc f6 ff ff       	jmp    c0019a14 <Vm::x87Handler(regs*)+0x82>
c001a318:	80 fa 04             	cmp    dl,0x4
c001a31b:	75 2f                	jne    c001a34c <Vm::x87Handler(regs*)+0x9ba>
c001a31d:	51                   	push   ecx
c001a31e:	51                   	push   ecx
c001a31f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a322:	ff 36                	push   DWORD PTR [esi]
c001a324:	e8 a7 f2 ff ff       	call   c00195d0 <Vm::fpu64ToInternal(unsigned long long)>
c001a329:	8d 76 00             	lea    esi,[esi+0x0]
c001a32c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a333:	89 c6                	mov    esi,eax
c001a335:	89 d7                	mov    edi,edx
c001a337:	e8 16 f5 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a33c:	57                   	push   edi
c001a33d:	56                   	push   esi
c001a33e:	52                   	push   edx
c001a33f:	50                   	push   eax
c001a340:	e8 ad f4 ff ff       	call   c00197f2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a345:	e9 02 01 00 00       	jmp    c001a44c <Vm::x87Handler(regs*)+0xaba>
c001a34a:	66 90                	xchg   ax,ax
c001a34c:	80 fa 05             	cmp    dl,0x5
c001a34f:	75 2b                	jne    c001a37c <Vm::x87Handler(regs*)+0x9ea>
c001a351:	83 ec 0c             	sub    esp,0xc
c001a354:	6a 00                	push   0x0
c001a356:	e8 f7 f4 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a35b:	89 c7                	mov    edi,eax
c001a35d:	89 d5                	mov    ebp,edx
c001a35f:	58                   	pop    eax
c001a360:	5a                   	pop    edx
c001a361:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a364:	ff 36                	push   DWORD PTR [esi]
c001a366:	e8 65 f2 ff ff       	call   c00195d0 <Vm::fpu64ToInternal(unsigned long long)>
c001a36b:	90                   	nop
c001a36c:	83 c4 10             	add    esp,0x10
c001a36f:	55                   	push   ebp
c001a370:	57                   	push   edi
c001a371:	52                   	push   edx
c001a372:	50                   	push   eax
c001a373:	e8 7a f4 ff ff       	call   c00197f2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a378:	eb 6a                	jmp    c001a3e4 <Vm::x87Handler(regs*)+0xa52>
c001a37a:	66 90                	xchg   ax,ax
c001a37c:	80 fa 06             	cmp    dl,0x6
c001a37f:	75 2f                	jne    c001a3b0 <Vm::x87Handler(regs*)+0xa1e>
c001a381:	51                   	push   ecx
c001a382:	51                   	push   ecx
c001a383:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a386:	ff 36                	push   DWORD PTR [esi]
c001a388:	e8 43 f2 ff ff       	call   c00195d0 <Vm::fpu64ToInternal(unsigned long long)>
c001a38d:	8d 76 00             	lea    esi,[esi+0x0]
c001a390:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a397:	89 c6                	mov    esi,eax
c001a399:	89 d7                	mov    edi,edx
c001a39b:	e8 b2 f4 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a3a0:	57                   	push   edi
c001a3a1:	56                   	push   esi
c001a3a2:	52                   	push   edx
c001a3a3:	50                   	push   eax
c001a3a4:	e8 77 f4 ff ff       	call   c0019820 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a3a9:	e9 9e 00 00 00       	jmp    c001a44c <Vm::x87Handler(regs*)+0xaba>
c001a3ae:	66 90                	xchg   ax,ax
c001a3b0:	31 c0                	xor    eax,eax
c001a3b2:	80 fa 07             	cmp    dl,0x7
c001a3b5:	0f 85 e9 00 00 00    	jne    c001a4a4 <Vm::x87Handler(regs*)+0xb12>
c001a3bb:	83 ec 0c             	sub    esp,0xc
c001a3be:	6a 00                	push   0x0
c001a3c0:	e8 8d f4 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a3c5:	89 c7                	mov    edi,eax
c001a3c7:	89 d5                	mov    ebp,edx
c001a3c9:	58                   	pop    eax
c001a3ca:	5a                   	pop    edx
c001a3cb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3ce:	ff 36                	push   DWORD PTR [esi]
c001a3d0:	e8 fb f1 ff ff       	call   c00195d0 <Vm::fpu64ToInternal(unsigned long long)>
c001a3d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3d8:	83 c4 10             	add    esp,0x10
c001a3db:	55                   	push   ebp
c001a3dc:	57                   	push   edi
c001a3dd:	52                   	push   edx
c001a3de:	50                   	push   eax
c001a3df:	e8 3c f4 ff ff       	call   c0019820 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a3e4:	83 c4 0c             	add    esp,0xc
c001a3e7:	eb 67                	jmp    c001a450 <Vm::x87Handler(regs*)+0xabe>
c001a3e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a3ec:	31 c0                	xor    eax,eax
c001a3ee:	80 fa 02             	cmp    dl,0x2
c001a3f1:	0f 85 ad 00 00 00    	jne    c001a4a4 <Vm::x87Handler(regs*)+0xb12>
c001a3f7:	83 ec 0c             	sub    esp,0xc
c001a3fa:	6a 00                	push   0x0
c001a3fc:	e8 51 f4 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a401:	59                   	pop    ecx
c001a402:	5f                   	pop    edi
c001a403:	90                   	nop
c001a404:	52                   	push   edx
c001a405:	50                   	push   eax
c001a406:	e8 77 f1 ff ff       	call   c0019582 <Vm::fpuInternalTo64(unsigned long long)>
c001a40b:	e9 84 00 00 00       	jmp    c001a494 <Vm::x87Handler(regs*)+0xb02>
c001a410:	31 c0                	xor    eax,eax
c001a412:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a417:	0f 85 87 00 00 00    	jne    c001a4a4 <Vm::x87Handler(regs*)+0xb12>
c001a41d:	50                   	push   eax
c001a41e:	50                   	push   eax
c001a41f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a422:	66 90                	xchg   ax,ax
c001a424:	31 d2                	xor    edx,edx
c001a426:	52                   	push   edx
c001a427:	50                   	push   eax
c001a428:	e8 47 f2 ff ff       	call   c0019674 <Vm::fpuLongToFloat(long long)>
c001a42d:	8d 76 00             	lea    esi,[esi+0x0]
c001a430:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a437:	89 c6                	mov    esi,eax
c001a439:	89 d7                	mov    edi,edx
c001a43b:	e8 12 f4 ff ff       	call   c0019852 <Vm::fpuGetReg(int)>
c001a440:	57                   	push   edi
c001a441:	56                   	push   esi
c001a442:	52                   	push   edx
c001a443:	50                   	push   eax
c001a444:	e8 b8 f3 ff ff       	call   c0019801 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a449:	8d 76 00             	lea    esi,[esi+0x0]
c001a44c:	83 c4 1c             	add    esp,0x1c
c001a44f:	90                   	nop
c001a450:	52                   	push   edx
c001a451:	50                   	push   eax
c001a452:	6a 00                	push   0x0
c001a454:	e8 3c f4 ff ff       	call   c0019895 <Vm::fpuSetReg(int, unsigned long long)>
c001a459:	e9 7a f7 ff ff       	jmp    c0019bd8 <Vm::x87Handler(regs*)+0x246>
c001a45e:	66 90                	xchg   ax,ax
c001a460:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a464:	80 fa 05             	cmp    dl,0x5
c001a467:	75 13                	jne    c001a47c <Vm::x87Handler(regs*)+0xaea>
c001a469:	55                   	push   ebp
c001a46a:	55                   	push   ebp
c001a46b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a46e:	ff 36                	push   DWORD PTR [esi]
c001a470:	e8 c3 f1 ff ff       	call   c0019638 <Vm::fpuULongToFloat(unsigned long long)>
c001a475:	e9 52 f7 ff ff       	jmp    c0019bcc <Vm::x87Handler(regs*)+0x23a>
c001a47a:	66 90                	xchg   ax,ax
c001a47c:	31 c0                	xor    eax,eax
c001a47e:	80 fa 07             	cmp    dl,0x7
c001a481:	75 21                	jne    c001a4a4 <Vm::x87Handler(regs*)+0xb12>
c001a483:	e8 b7 f4 ff ff       	call   c001993f <Vm::fpuPop()>
c001a488:	51                   	push   ecx
c001a489:	51                   	push   ecx
c001a48a:	52                   	push   edx
c001a48b:	50                   	push   eax
c001a48c:	e8 48 f1 ff ff       	call   c00195d9 <Vm::fpuFloatToLong(unsigned long long)>
c001a491:	8d 76 00             	lea    esi,[esi+0x0]
c001a494:	83 c4 10             	add    esp,0x10
c001a497:	89 06                	mov    DWORD PTR [esi],eax
c001a499:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a49c:	e9 7b f7 ff ff       	jmp    c0019c1c <Vm::x87Handler(regs*)+0x28a>
c001a4a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a4a4:	83 c4 1c             	add    esp,0x1c
c001a4a7:	5b                   	pop    ebx
c001a4a8:	5e                   	pop    esi
c001a4a9:	5f                   	pop    edi
c001a4aa:	5d                   	pop    ebp
c001a4ab:	c3                   	ret    

c001a4ac <__static_initialization_and_destruction_0(int, int)>:
c001a4ac:	83 ec 0c             	sub    esp,0xc
c001a4af:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a4b4:	75 1a                	jne    c001a4d0 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a4b6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a4be:	75 10                	jne    c001a4d0 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a4c0:	83 ec 0c             	sub    esp,0xc
c001a4c3:	68 c0 79 02 c0       	push   0xc00279c0
c001a4c8:	e8 6b 74 00 00       	call   c0021938 <Vm::_FPUState::_FPUState()>
c001a4cd:	83 c4 10             	add    esp,0x10
c001a4d0:	90                   	nop
c001a4d1:	83 c4 0c             	add    esp,0xc
c001a4d4:	c3                   	ret    
c001a4d5:	8d 76 00             	lea    esi,[esi+0x0]

c001a4d8 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a4d8:	83 ec 0c             	sub    esp,0xc
c001a4db:	83 ec 08             	sub    esp,0x8
c001a4de:	68 ff ff 00 00       	push   0xffff
c001a4e3:	6a 01                	push   0x1
c001a4e5:	e8 c2 ff ff ff       	call   c001a4ac <__static_initialization_and_destruction_0(int, int)>
c001a4ea:	83 c4 10             	add    esp,0x10
c001a4ed:	83 c4 0c             	add    esp,0xc
c001a4f0:	c3                   	ret    
c001a4f1:	66 90                	xchg   ax,ax
c001a4f3:	90                   	nop

c001a4f4 <FAT::getName()>:
c001a4f4:	b8 20 4b 02 c0       	mov    eax,0xc0024b20
c001a4f9:	c3                   	ret    
c001a4fa:	66 90                	xchg   ax,ax

c001a4fc <FAT::tell(void*, unsigned long long*)>:
c001a4fc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a501:	75 09                	jne    c001a50c <FAT::tell(void*, unsigned long long*)+0x10>
c001a503:	b8 04 00 00 00       	mov    eax,0x4
c001a508:	c3                   	ret    
c001a509:	8d 76 00             	lea    esi,[esi+0x0]
c001a50c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a511:	75 09                	jne    c001a51c <FAT::tell(void*, unsigned long long*)+0x20>
c001a513:	b8 04 00 00 00       	mov    eax,0x4
c001a518:	c3                   	ret    
c001a519:	8d 76 00             	lea    esi,[esi+0x0]
c001a51c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a520:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a523:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a526:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a52a:	89 01                	mov    DWORD PTR [ecx],eax
c001a52c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a52f:	b8 00 00 00 00       	mov    eax,0x0
c001a534:	c3                   	ret    
c001a535:	90                   	nop
c001a536:	66 90                	xchg   ax,ax

c001a538 <FAT::stat(void*, unsigned long long*)>:
c001a538:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a53d:	75 09                	jne    c001a548 <FAT::stat(void*, unsigned long long*)+0x10>
c001a53f:	b8 04 00 00 00       	mov    eax,0x4
c001a544:	c3                   	ret    
c001a545:	8d 76 00             	lea    esi,[esi+0x0]
c001a548:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a54d:	75 09                	jne    c001a558 <FAT::stat(void*, unsigned long long*)+0x20>
c001a54f:	b8 04 00 00 00       	mov    eax,0x4
c001a554:	c3                   	ret    
c001a555:	8d 76 00             	lea    esi,[esi+0x0]
c001a558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a55c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a55f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a562:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a566:	89 01                	mov    DWORD PTR [ecx],eax
c001a568:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a56b:	b8 00 00 00 00       	mov    eax,0x0
c001a570:	c3                   	ret    
c001a571:	90                   	nop
c001a572:	66 90                	xchg   ax,ax

c001a574 <FAT::~FAT()>:
c001a574:	83 ec 0c             	sub    esp,0xc
c001a577:	ba 6c 4b 02 c0       	mov    edx,0xc0024b6c
c001a57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a580:	89 10                	mov    DWORD PTR [eax],edx
c001a582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a586:	83 ec 0c             	sub    esp,0xc
c001a589:	50                   	push   eax
c001a58a:	e8 d3 27 ff ff       	call   c000cd62 <Filesystem::~Filesystem()>
c001a58f:	83 c4 10             	add    esp,0x10
c001a592:	90                   	nop
c001a593:	83 c4 0c             	add    esp,0xc
c001a596:	c3                   	ret    
c001a597:	90                   	nop

c001a598 <FAT::~FAT()>:
c001a598:	83 ec 0c             	sub    esp,0xc
c001a59b:	83 ec 0c             	sub    esp,0xc
c001a59e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5a2:	e8 cd ff ff ff       	call   c001a574 <FAT::~FAT()>
c001a5a7:	83 c4 10             	add    esp,0x10
c001a5aa:	83 ec 08             	sub    esp,0x8
c001a5ad:	6a 08                	push   0x8
c001a5af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5b3:	e8 8f 23 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c001a5b8:	83 c4 10             	add    esp,0x10
c001a5bb:	83 c4 0c             	add    esp,0xc
c001a5be:	c3                   	ret    
c001a5bf:	90                   	nop

c001a5c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a5c0:	83 ec 1c             	sub    esp,0x1c
c001a5c3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a5ca:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a5cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5d3:	8b 04 85 40 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85c0]
c001a5da:	83 f8 ff             	cmp    eax,0xffffffff
c001a5dd:	75 35                	jne    c001a614 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a5df:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a5e3:	88 c2                	mov    dl,al
c001a5e5:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001a5ea:	01 d0                	add    eax,edx
c001a5ec:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a5f0:	8b 15 20 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a20
c001a5f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5fa:	89 14 85 40 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85c0],edx
c001a601:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001a606:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a60a:	89 14 85 c0 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8540],edx
c001a611:	eb 19                	jmp    c001a62c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a613:	90                   	nop
c001a614:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a618:	88 c2                	mov    dl,al
c001a61a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a61e:	8b 04 85 40 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85c0]
c001a625:	01 d0                	add    eax,edx
c001a627:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a62b:	90                   	nop
c001a62c:	83 ec 04             	sub    esp,0x4
c001a62f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a633:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a637:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a63b:	50                   	push   eax
c001a63c:	e8 f1 c5 fe ff       	call   c0006c32 <f_getlabel>
c001a641:	83 c4 10             	add    esp,0x10
c001a644:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a648:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a64d:	75 09                	jne    c001a658 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a64f:	b8 00 00 00 00       	mov    eax,0x0
c001a654:	eb 0a                	jmp    c001a660 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a656:	66 90                	xchg   ax,ax
c001a658:	b8 01 00 00 00       	mov    eax,0x1
c001a65d:	8d 76 00             	lea    esi,[esi+0x0]
c001a660:	83 c4 1c             	add    esp,0x1c
c001a663:	c3                   	ret    

c001a664 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a664:	57                   	push   edi
c001a665:	83 ec 58             	sub    esp,0x58
c001a668:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a670:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a674:	b9 0f 00 00 00       	mov    ecx,0xf
c001a679:	b8 00 00 00 00       	mov    eax,0x0
c001a67e:	fc                   	cld    
c001a67f:	89 d7                	mov    edi,edx
c001a681:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a683:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a687:	8b 04 85 40 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85c0]
c001a68e:	83 f8 ff             	cmp    eax,0xffffffff
c001a691:	75 35                	jne    c001a6c8 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a693:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a697:	88 c2                	mov    dl,al
c001a699:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001a69e:	01 d0                	add    eax,edx
c001a6a0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6a4:	8b 15 20 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a20
c001a6aa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a6ae:	89 14 85 40 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85c0],edx
c001a6b5:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001a6ba:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a6be:	89 14 85 c0 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8540],edx
c001a6c5:	eb 19                	jmp    c001a6e0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a6c7:	90                   	nop
c001a6c8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6cc:	88 c2                	mov    dl,al
c001a6ce:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a6d2:	8b 04 85 40 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85c0]
c001a6d9:	01 d0                	add    eax,edx
c001a6db:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6df:	90                   	nop
c001a6e0:	83 ec 08             	sub    esp,0x8
c001a6e3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a6e7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a6eb:	50                   	push   eax
c001a6ec:	e8 8f 61 fe ff       	call   c0000880 <strcat>
c001a6f1:	83 c4 10             	add    esp,0x10
c001a6f4:	83 ec 0c             	sub    esp,0xc
c001a6f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a6fb:	50                   	push   eax
c001a6fc:	e8 1f c7 fe ff       	call   c0006e20 <f_setlabel>
c001a701:	83 c4 10             	add    esp,0x10
c001a704:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a708:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a70d:	75 09                	jne    c001a718 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a70f:	b8 00 00 00 00       	mov    eax,0x0
c001a714:	eb 0a                	jmp    c001a720 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a716:	66 90                	xchg   ax,ax
c001a718:	b8 01 00 00 00       	mov    eax,0x1
c001a71d:	8d 76 00             	lea    esi,[esi+0x0]
c001a720:	83 c4 58             	add    esp,0x58
c001a723:	5f                   	pop    edi
c001a724:	c3                   	ret    
c001a725:	90                   	nop
c001a726:	66 90                	xchg   ax,ax

c001a728 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a728:	83 ec 2c             	sub    esp,0x2c
c001a72b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a733:	83 ec 08             	sub    esp,0x8
c001a736:	68 44 4b 02 c0       	push   0xc0024b44
c001a73b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a73f:	e8 88 60 fe ff       	call   c00007cc <strcmp>
c001a744:	83 c4 10             	add    esp,0x10
c001a747:	85 c0                	test   eax,eax
c001a749:	0f 94 c0             	sete   al
c001a74c:	84 c0                	test   al,al
c001a74e:	74 10                	je     c001a760 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a750:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a758:	e9 b3 00 00 00       	jmp    c001a810 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a75d:	8d 76 00             	lea    esi,[esi+0x0]
c001a760:	83 ec 08             	sub    esp,0x8
c001a763:	68 36 4b 02 c0       	push   0xc0024b36
c001a768:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a76c:	e8 5b 60 fe ff       	call   c00007cc <strcmp>
c001a771:	83 c4 10             	add    esp,0x10
c001a774:	85 c0                	test   eax,eax
c001a776:	0f 94 c0             	sete   al
c001a779:	84 c0                	test   al,al
c001a77b:	74 0f                	je     c001a78c <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001a77d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a785:	e9 86 00 00 00       	jmp    c001a810 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a78a:	66 90                	xchg   ax,ax
c001a78c:	83 ec 08             	sub    esp,0x8
c001a78f:	68 3c 4b 02 c0       	push   0xc0024b3c
c001a794:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a798:	e8 2f 60 fe ff       	call   c00007cc <strcmp>
c001a79d:	83 c4 10             	add    esp,0x10
c001a7a0:	85 c0                	test   eax,eax
c001a7a2:	0f 94 c0             	sete   al
c001a7a5:	84 c0                	test   al,al
c001a7a7:	74 0b                	je     c001a7b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001a7a9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a7b1:	eb 5d                	jmp    c001a810 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7b3:	90                   	nop
c001a7b4:	83 ec 08             	sub    esp,0x8
c001a7b7:	68 ac 20 02 c0       	push   0xc00220ac
c001a7bc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7c0:	e8 07 60 fe ff       	call   c00007cc <strcmp>
c001a7c5:	83 c4 10             	add    esp,0x10
c001a7c8:	85 c0                	test   eax,eax
c001a7ca:	0f 94 c0             	sete   al
c001a7cd:	84 c0                	test   al,al
c001a7cf:	74 0b                	je     c001a7dc <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001a7d1:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a7d9:	eb 35                	jmp    c001a810 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7db:	90                   	nop
c001a7dc:	83 ec 08             	sub    esp,0x8
c001a7df:	68 42 4b 02 c0       	push   0xc0024b42
c001a7e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7e8:	e8 df 5f fe ff       	call   c00007cc <strcmp>
c001a7ed:	83 c4 10             	add    esp,0x10
c001a7f0:	85 c0                	test   eax,eax
c001a7f2:	0f 94 c0             	sete   al
c001a7f5:	84 c0                	test   al,al
c001a7f7:	74 0b                	je     c001a804 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001a7f9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a801:	eb 0d                	jmp    c001a810 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a803:	90                   	nop
c001a804:	b8 08 00 00 00       	mov    eax,0x8
c001a809:	e9 ea 00 00 00       	jmp    c001a8f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a80e:	66 90                	xchg   ax,ax
c001a810:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a817:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a81c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a820:	8b 04 85 40 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85c0]
c001a827:	83 f8 ff             	cmp    eax,0xffffffff
c001a82a:	75 34                	jne    c001a860 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001a82c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a830:	88 c2                	mov    dl,al
c001a832:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001a837:	01 d0                	add    eax,edx
c001a839:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a83d:	8b 15 20 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a20
c001a843:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a847:	89 14 85 40 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85c0],edx
c001a84e:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001a853:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a857:	89 14 85 c0 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8540],edx
c001a85e:	eb 18                	jmp    c001a878 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001a860:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a864:	88 c2                	mov    dl,al
c001a866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a86a:	8b 04 85 40 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85c0]
c001a871:	01 d0                	add    eax,edx
c001a873:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a877:	90                   	nop
c001a878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a87c:	88 04 24             	mov    BYTE PTR [esp],al
c001a87f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a883:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a887:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a88f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a894:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a89c:	83 ec 0c             	sub    esp,0xc
c001a89f:	68 00 20 00 00       	push   0x2000
c001a8a4:	e8 1a f1 fe ff       	call   c00099c3 <malloc>
c001a8a9:	83 c4 10             	add    esp,0x10
c001a8ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8b0:	68 00 20 00 00       	push   0x2000
c001a8b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8b9:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a8bd:	50                   	push   eax
c001a8be:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a8c2:	50                   	push   eax
c001a8c3:	e8 d9 cb fe ff       	call   c00074a1 <f_mkfs>
c001a8c8:	83 c4 10             	add    esp,0x10
c001a8cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a8cf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a8d4:	75 0a                	jne    c001a8e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001a8d6:	b8 00 00 00 00       	mov    eax,0x0
c001a8db:	eb 1b                	jmp    c001a8f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a8dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a8e0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a8e5:	75 09                	jne    c001a8f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a8e7:	b8 09 00 00 00       	mov    eax,0x9
c001a8ec:	eb 0a                	jmp    c001a8f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a8ee:	66 90                	xchg   ax,ax
c001a8f0:	b8 01 00 00 00       	mov    eax,0x1
c001a8f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a8f8:	83 c4 2c             	add    esp,0x2c
c001a8fb:	c3                   	ret    

c001a8fc <FAT::tryMount(LogicalDisk*, int)>:
c001a8fc:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a902:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001a907:	83 f8 14             	cmp    eax,0x14
c001a90a:	75 18                	jne    c001a924 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a90c:	83 ec 0c             	sub    esp,0xc
c001a90f:	68 48 4b 02 c0       	push   0xc0024b48
c001a914:	e8 f0 99 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001a919:	83 c4 10             	add    esp,0x10
c001a91c:	b0 00                	mov    al,0x0
c001a91e:	e9 e9 01 00 00       	jmp    c001ab0c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a923:	90                   	nop
c001a924:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a92b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a931:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a937:	3d 00 02 00 00       	cmp    eax,0x200
c001a93c:	74 0a                	je     c001a948 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a93e:	b0 00                	mov    al,0x0
c001a940:	e9 c7 01 00 00       	jmp    c001ab0c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a945:	8d 76 00             	lea    esi,[esi+0x0]
c001a948:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a950:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a957:	8b 04 85 40 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85c0]
c001a95e:	83 f8 ff             	cmp    eax,0xffffffff
c001a961:	74 09                	je     c001a96c <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a963:	b0 01                	mov    al,0x1
c001a965:	e9 a2 01 00 00       	jmp    c001ab0c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a96a:	66 90                	xchg   ax,ax
c001a96c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a976:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a97e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a985:	88 c2                	mov    dl,al
c001a987:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001a98c:	01 d0                	add    eax,edx
c001a98e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a995:	8b 15 20 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a20
c001a99b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a9a2:	89 14 85 40 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85c0],edx
c001a9a9:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001a9ae:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a9b5:	89 14 85 c0 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8540],edx
c001a9bc:	83 ec 0c             	sub    esp,0xc
c001a9bf:	68 54 02 00 00       	push   0x254
c001a9c4:	e8 fa ef fe ff       	call   c00099c3 <malloc>
c001a9c9:	83 c4 10             	add    esp,0x10
c001a9cc:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a9d3:	83 ec 04             	sub    esp,0x4
c001a9d6:	6a 00                	push   0x0
c001a9d8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a9df:	50                   	push   eax
c001a9e0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a9e7:	e8 3d a4 fe ff       	call   c0004e29 <f_mount>
c001a9ec:	83 c4 10             	add    esp,0x10
c001a9ef:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a9f6:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a9fe:	74 1c                	je     c001aa1c <FAT::tryMount(LogicalDisk*, int)+0x120>
c001aa00:	83 ec 0c             	sub    esp,0xc
c001aa03:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aa0a:	e8 d4 ef fe ff       	call   c00099e3 <rfree>
c001aa0f:	83 c4 10             	add    esp,0x10
c001aa12:	b0 00                	mov    al,0x0
c001aa14:	e9 f3 00 00 00       	jmp    c001ab0c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001aa19:	8d 76 00             	lea    esi,[esi+0x0]
c001aa1c:	83 ec 04             	sub    esp,0x4
c001aa1f:	68 00 01 00 00       	push   0x100
c001aa24:	6a 00                	push   0x0
c001aa26:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa2d:	50                   	push   eax
c001aa2e:	e8 51 5c fe ff       	call   c0000684 <memset>
c001aa33:	83 c4 10             	add    esp,0x10
c001aa36:	83 ec 08             	sub    esp,0x8
c001aa39:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aa40:	50                   	push   eax
c001aa41:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa48:	50                   	push   eax
c001aa49:	e8 32 5e fe ff       	call   c0000880 <strcat>
c001aa4e:	83 c4 10             	add    esp,0x10
c001aa51:	83 ec 08             	sub    esp,0x8
c001aa54:	68 56 4b 02 c0       	push   0xc0024b56
c001aa59:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa60:	50                   	push   eax
c001aa61:	e8 1a 5e fe ff       	call   c0000880 <strcat>
c001aa66:	83 c4 10             	add    esp,0x10
c001aa69:	83 ec 04             	sub    esp,0x4
c001aa6c:	6a 01                	push   0x1
c001aa6e:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001aa75:	50                   	push   eax
c001aa76:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa7a:	50                   	push   eax
c001aa7b:	e8 0b a4 fe ff       	call   c0004e8b <f_open>
c001aa80:	83 c4 10             	add    esp,0x10
c001aa83:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001aa8a:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001aa91:	85 c0                	test   eax,eax
c001aa93:	74 0b                	je     c001aaa0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001aa95:	78 31                	js     c001aac8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aa97:	83 e8 04             	sub    eax,0x4
c001aa9a:	83 f8 01             	cmp    eax,0x1
c001aa9d:	77 29                	ja     c001aac8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aa9f:	90                   	nop
c001aaa0:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001aaa8:	83 ec 0c             	sub    esp,0xc
c001aaab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aaaf:	50                   	push   eax
c001aab0:	e8 28 af fe ff       	call   c00059dd <f_close>
c001aab5:	83 c4 10             	add    esp,0x10
c001aab8:	90                   	nop
c001aab9:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001aac1:	74 41                	je     c001ab04 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001aac3:	eb 33                	jmp    c001aaf8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001aac5:	8d 76 00             	lea    esi,[esi+0x0]
c001aac8:	83 ec 0c             	sub    esp,0xc
c001aacb:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aad2:	e8 0c ef fe ff       	call   c00099e3 <rfree>
c001aad7:	83 c4 10             	add    esp,0x10
c001aada:	83 ec 04             	sub    esp,0x4
c001aadd:	6a 00                	push   0x0
c001aadf:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aae6:	50                   	push   eax
c001aae7:	6a 00                	push   0x0
c001aae9:	e8 3b a3 fe ff       	call   c0004e29 <f_mount>
c001aaee:	83 c4 10             	add    esp,0x10
c001aaf1:	b0 00                	mov    al,0x0
c001aaf3:	eb 17                	jmp    c001ab0c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001aaf5:	8d 76 00             	lea    esi,[esi+0x0]
c001aaf8:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001aafd:	40                   	inc    eax
c001aafe:	a3 20 7a 02 c0       	mov    ds:0xc0027a20,eax
c001ab03:	90                   	nop
c001ab04:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001ab0b:	90                   	nop
c001ab0c:	81 c4 6c 03 00 00    	add    esp,0x36c
c001ab12:	c3                   	ret    
c001ab13:	90                   	nop

c001ab14 <FAT::allocateSwapfile(char const*, int)>:
c001ab14:	55                   	push   ebp
c001ab15:	57                   	push   edi
c001ab16:	56                   	push   esi
c001ab17:	53                   	push   ebx
c001ab18:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001ab1e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001ab29:	83 ec 0c             	sub    esp,0xc
c001ab2c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001ab33:	e8 8b ee fe ff       	call   c00099c3 <malloc>
c001ab38:	83 c4 10             	add    esp,0x10
c001ab3b:	89 c7                	mov    edi,eax
c001ab3d:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001ab42:	83 ec 04             	sub    esp,0x4
c001ab45:	50                   	push   eax
c001ab46:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001ab4d:	57                   	push   edi
c001ab4e:	e8 3f 24 ff ff       	call   c000cf92 <File::File(char const*, Process*)>
c001ab53:	83 c4 10             	add    esp,0x10
c001ab56:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001ab5d:	83 ec 04             	sub    esp,0x4
c001ab60:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ab64:	50                   	push   eax
c001ab65:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab69:	50                   	push   eax
c001ab6a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab71:	e8 2c 27 ff ff       	call   c000d2a2 <File::stat(unsigned long long*, bool*)>
c001ab76:	83 c4 10             	add    esp,0x10
c001ab79:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ab80:	c1 e0 14             	shl    eax,0x14
c001ab83:	89 c7                	mov    edi,eax
c001ab85:	89 c5                	mov    ebp,eax
c001ab87:	c1 fd 1f             	sar    ebp,0x1f
c001ab8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab92:	89 f9                	mov    ecx,edi
c001ab94:	31 c1                	xor    ecx,eax
c001ab96:	89 cb                	mov    ebx,ecx
c001ab98:	89 e9                	mov    ecx,ebp
c001ab9a:	31 d1                	xor    ecx,edx
c001ab9c:	89 ce                	mov    esi,ecx
c001ab9e:	89 f0                	mov    eax,esi
c001aba0:	09 d8                	or     eax,ebx
c001aba2:	0f 84 98 00 00 00    	je     c001ac40 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001aba8:	83 ec 0c             	sub    esp,0xc
c001abab:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001abb2:	e8 b7 25 ff ff       	call   c000d16e <File::unlink()>
c001abb7:	83 c4 10             	add    esp,0x10
c001abba:	83 ec 08             	sub    esp,0x8
c001abbd:	6a 12                	push   0x12
c001abbf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001abc6:	e8 2b 24 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c001abcb:	83 c4 10             	add    esp,0x10
c001abce:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001abd5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001abdb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001abe2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001abe9:	c1 e0 14             	shl    eax,0x14
c001abec:	99                   	cdq    
c001abed:	6a 01                	push   0x1
c001abef:	52                   	push   edx
c001abf0:	50                   	push   eax
c001abf1:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001abf8:	e8 90 c4 fe ff       	call   c000708d <f_expand>
c001abfd:	83 c4 10             	add    esp,0x10
c001ac00:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac07:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac09:	83 c0 10             	add    eax,0x10
c001ac0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac0e:	83 ec 0c             	sub    esp,0xc
c001ac11:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac15:	52                   	push   edx
c001ac16:	8d 54 24 30          	lea    edx,[esp+0x30]
c001ac1a:	52                   	push   edx
c001ac1b:	6a 00                	push   0x0
c001ac1d:	68 00 04 00 00       	push   0x400
c001ac22:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ac29:	ff d0                	call   eax
c001ac2b:	83 c4 20             	add    esp,0x20
c001ac2e:	83 ec 0c             	sub    esp,0xc
c001ac31:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac38:	e8 17 24 ff ff       	call   c000d054 <File::close()>
c001ac3d:	83 c4 10             	add    esp,0x10
c001ac40:	83 ec 08             	sub    esp,0x8
c001ac43:	6a 01                	push   0x1
c001ac45:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac4c:	e8 a5 23 ff ff       	call   c000cff6 <File::open(FileOpenMode)>
c001ac51:	83 c4 10             	add    esp,0x10
c001ac54:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac5d:	83 c0 0c             	add    eax,0xc
c001ac60:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac62:	83 ec 0c             	sub    esp,0xc
c001ac65:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac69:	52                   	push   edx
c001ac6a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001ac6e:	52                   	push   edx
c001ac6f:	6a 00                	push   0x0
c001ac71:	6a 04                	push   0x4
c001ac73:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ac7a:	ff d0                	call   eax
c001ac7c:	83 c4 20             	add    esp,0x20
c001ac7f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac86:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ac8c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ac93:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001ac9a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001ac9d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001aca0:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001aca7:	83 ec 0c             	sub    esp,0xc
c001acaa:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001acb1:	e8 9e 23 ff ff       	call   c000d054 <File::close()>
c001acb6:	83 c4 10             	add    esp,0x10
c001acb9:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001acc0:	ba 00 00 00 00       	mov    edx,0x0
c001acc5:	81 c4 3c 04 00 00    	add    esp,0x43c
c001accb:	5b                   	pop    ebx
c001accc:	5e                   	pop    esi
c001accd:	5f                   	pop    edi
c001acce:	5d                   	pop    ebp
c001accf:	c3                   	ret    

c001acd0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001acd0:	57                   	push   edi
c001acd1:	56                   	push   esi
c001acd2:	53                   	push   ebx
c001acd3:	81 ec 50 02 00 00    	sub    esp,0x250
c001acd9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001ace1:	74 0d                	je     c001acf0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001ace3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001aceb:	75 0f                	jne    c001acfc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001aced:	8d 76 00             	lea    esi,[esi+0x0]
c001acf0:	b8 04 00 00 00       	mov    eax,0x4
c001acf5:	e9 36 01 00 00       	jmp    c001ae30 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001acfa:	66 90                	xchg   ax,ax
c001acfc:	83 ec 08             	sub    esp,0x8
c001acff:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ad06:	50                   	push   eax
c001ad07:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001ad0e:	e8 d4 b2 fe ff       	call   c0005fe7 <f_readdir>
c001ad13:	83 c4 10             	add    esp,0x10
c001ad16:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001ad1d:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001ad24:	83 ec 0c             	sub    esp,0xc
c001ad27:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ad2e:	83 c0 1a             	add    eax,0x1a
c001ad31:	50                   	push   eax
c001ad32:	e8 69 59 fe ff       	call   c00006a0 <strlen>
c001ad37:	83 c4 10             	add    esp,0x10
c001ad3a:	ba 00 00 00 00       	mov    edx,0x0
c001ad3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad47:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001ad4e:	0f b6 c0             	movzx  eax,al
c001ad51:	83 e0 10             	and    eax,0x10
c001ad54:	74 0a                	je     c001ad60 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001ad56:	b8 02 00 00 00       	mov    eax,0x2
c001ad5b:	eb 0b                	jmp    c001ad68 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001ad5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad60:	b8 01 00 00 00       	mov    eax,0x1
c001ad65:	8d 76 00             	lea    esi,[esi+0x0]
c001ad68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad6c:	83 ec 08             	sub    esp,0x8
c001ad6f:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ad76:	83 c0 1a             	add    eax,0x1a
c001ad79:	50                   	push   eax
c001ad7a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ad7e:	83 c0 10             	add    eax,0x10
c001ad81:	50                   	push   eax
c001ad82:	e8 b9 59 fe ff       	call   c0000740 <strcpy>
c001ad87:	83 c4 10             	add    esp,0x10
c001ad8a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001ad91:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001ad98:	8d 44 24 04          	lea    eax,[esp+0x4]
c001ad9c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001ada3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001adaa:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001adb1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001adb8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001adbf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001adc6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001adcd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001add4:	89 c6                	mov    esi,eax
c001add6:	89 d7                	mov    edi,edx
c001add8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adda:	89 c8                	mov    eax,ecx
c001addc:	89 fa                	mov    edx,edi
c001adde:	89 f3                	mov    ebx,esi
c001ade0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001ade7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001adee:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001adf5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001adfc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ae02:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001ae09:	84 c0                	test   al,al
c001ae0b:	75 07                	jne    c001ae14 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001ae0d:	b8 07 00 00 00       	mov    eax,0x7
c001ae12:	eb 1c                	jmp    c001ae30 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ae14:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001ae1b:	85 c0                	test   eax,eax
c001ae1d:	75 09                	jne    c001ae28 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001ae1f:	b8 00 00 00 00       	mov    eax,0x0
c001ae24:	eb 0a                	jmp    c001ae30 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ae26:	66 90                	xchg   ax,ax
c001ae28:	b8 01 00 00 00       	mov    eax,0x1
c001ae2d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae30:	81 c4 50 02 00 00    	add    esp,0x250
c001ae36:	5b                   	pop    ebx
c001ae37:	5e                   	pop    esi
c001ae38:	5f                   	pop    edi
c001ae39:	c3                   	ret    
c001ae3a:	66 90                	xchg   ax,ax

c001ae3c <FAT::read(void*, unsigned long, void*, int*)>:
c001ae3c:	83 ec 1c             	sub    esp,0x1c
c001ae3f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae44:	74 0a                	je     c001ae50 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001ae46:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ae4b:	75 0b                	jne    c001ae58 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001ae4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae50:	b8 04 00 00 00       	mov    eax,0x4
c001ae55:	eb 41                	jmp    c001ae98 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ae57:	90                   	nop
c001ae58:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ae5c:	50                   	push   eax
c001ae5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae65:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae69:	e8 59 a4 fe ff       	call   c00052c7 <f_read>
c001ae6e:	83 c4 10             	add    esp,0x10
c001ae71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae79:	89 c2                	mov    edx,eax
c001ae7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae7f:	89 10                	mov    DWORD PTR [eax],edx
c001ae81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae85:	85 c0                	test   eax,eax
c001ae87:	75 07                	jne    c001ae90 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001ae89:	b8 00 00 00 00       	mov    eax,0x0
c001ae8e:	eb 08                	jmp    c001ae98 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ae90:	b8 01 00 00 00       	mov    eax,0x1
c001ae95:	8d 76 00             	lea    esi,[esi+0x0]
c001ae98:	83 c4 1c             	add    esp,0x1c
c001ae9b:	c3                   	ret    

c001ae9c <FAT::write(void*, unsigned long, void*, int*)>:
c001ae9c:	83 ec 1c             	sub    esp,0x1c
c001ae9f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001aea4:	74 0a                	je     c001aeb0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001aea6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001aeab:	75 0b                	jne    c001aeb8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001aead:	8d 76 00             	lea    esi,[esi+0x0]
c001aeb0:	b8 04 00 00 00       	mov    eax,0x4
c001aeb5:	eb 41                	jmp    c001aef8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001aeb7:	90                   	nop
c001aeb8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aebc:	50                   	push   eax
c001aebd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aec1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001aec5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aec9:	e8 79 a6 fe ff       	call   c0005547 <f_write>
c001aece:	83 c4 10             	add    esp,0x10
c001aed1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aed5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aed9:	89 c2                	mov    edx,eax
c001aedb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aedf:	89 10                	mov    DWORD PTR [eax],edx
c001aee1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aee5:	85 c0                	test   eax,eax
c001aee7:	75 07                	jne    c001aef0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001aee9:	b8 00 00 00 00       	mov    eax,0x0
c001aeee:	eb 08                	jmp    c001aef8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001aef0:	b8 01 00 00 00       	mov    eax,0x1
c001aef5:	8d 76 00             	lea    esi,[esi+0x0]
c001aef8:	83 c4 1c             	add    esp,0x1c
c001aefb:	c3                   	ret    

c001aefc <FAT::close(void*)>:
c001aefc:	83 ec 1c             	sub    esp,0x1c
c001aeff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001af04:	75 0a                	jne    c001af10 <FAT::close(void*)+0x14>
c001af06:	b8 04 00 00 00       	mov    eax,0x4
c001af0b:	eb 3f                	jmp    c001af4c <FAT::close(void*)+0x50>
c001af0d:	8d 76 00             	lea    esi,[esi+0x0]
c001af10:	83 ec 0c             	sub    esp,0xc
c001af13:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af17:	e8 c1 aa fe ff       	call   c00059dd <f_close>
c001af1c:	83 c4 10             	add    esp,0x10
c001af1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af23:	83 ec 0c             	sub    esp,0xc
c001af26:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af2a:	e8 a4 ea fe ff       	call   c00099d3 <free>
c001af2f:	83 c4 10             	add    esp,0x10
c001af32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af36:	85 c0                	test   eax,eax
c001af38:	75 0a                	jne    c001af44 <FAT::close(void*)+0x48>
c001af3a:	b8 00 00 00 00       	mov    eax,0x0
c001af3f:	eb 0b                	jmp    c001af4c <FAT::close(void*)+0x50>
c001af41:	8d 76 00             	lea    esi,[esi+0x0]
c001af44:	b8 01 00 00 00       	mov    eax,0x1
c001af49:	8d 76 00             	lea    esi,[esi+0x0]
c001af4c:	83 c4 1c             	add    esp,0x1c
c001af4f:	c3                   	ret    

c001af50 <FAT::closeDir(void*)>:
c001af50:	83 ec 1c             	sub    esp,0x1c
c001af53:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001af58:	75 0a                	jne    c001af64 <FAT::closeDir(void*)+0x14>
c001af5a:	b8 04 00 00 00       	mov    eax,0x4
c001af5f:	eb 3f                	jmp    c001afa0 <FAT::closeDir(void*)+0x50>
c001af61:	8d 76 00             	lea    esi,[esi+0x0]
c001af64:	83 ec 0c             	sub    esp,0xc
c001af67:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af6b:	e8 55 b0 fe ff       	call   c0005fc5 <f_closedir>
c001af70:	83 c4 10             	add    esp,0x10
c001af73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af77:	83 ec 0c             	sub    esp,0xc
c001af7a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af7e:	e8 50 ea fe ff       	call   c00099d3 <free>
c001af83:	83 c4 10             	add    esp,0x10
c001af86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af8a:	85 c0                	test   eax,eax
c001af8c:	75 0a                	jne    c001af98 <FAT::closeDir(void*)+0x48>
c001af8e:	b8 00 00 00 00       	mov    eax,0x0
c001af93:	eb 0b                	jmp    c001afa0 <FAT::closeDir(void*)+0x50>
c001af95:	8d 76 00             	lea    esi,[esi+0x0]
c001af98:	b8 01 00 00 00       	mov    eax,0x1
c001af9d:	8d 76 00             	lea    esi,[esi+0x0]
c001afa0:	83 c4 1c             	add    esp,0x1c
c001afa3:	c3                   	ret    

c001afa4 <FAT::seek(void*, unsigned long long)>:
c001afa4:	83 ec 2c             	sub    esp,0x2c
c001afa7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001afab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001afaf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001afb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afb7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001afbc:	75 0a                	jne    c001afc8 <FAT::seek(void*, unsigned long long)+0x24>
c001afbe:	b8 04 00 00 00       	mov    eax,0x4
c001afc3:	eb 37                	jmp    c001affc <FAT::seek(void*, unsigned long long)+0x58>
c001afc5:	8d 76 00             	lea    esi,[esi+0x0]
c001afc8:	83 ec 04             	sub    esp,0x4
c001afcb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001afcf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001afd3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001afd7:	e8 30 aa fe ff       	call   c0005a0c <f_lseek>
c001afdc:	83 c4 10             	add    esp,0x10
c001afdf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001afe3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afe7:	85 c0                	test   eax,eax
c001afe9:	75 09                	jne    c001aff4 <FAT::seek(void*, unsigned long long)+0x50>
c001afeb:	b8 00 00 00 00       	mov    eax,0x0
c001aff0:	eb 0a                	jmp    c001affc <FAT::seek(void*, unsigned long long)+0x58>
c001aff2:	66 90                	xchg   ax,ax
c001aff4:	b8 01 00 00 00       	mov    eax,0x1
c001aff9:	8d 76 00             	lea    esi,[esi+0x0]
c001affc:	83 c4 2c             	add    esp,0x2c
c001afff:	c3                   	ret    

c001b000 <fatWrapperReadDisk>:
c001b000:	83 ec 1c             	sub    esp,0x1c
c001b003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b007:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b00b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b00f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b012:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b016:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b01a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b01f:	8b 04 85 20 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95e0]
c001b026:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b02a:	83 ec 0c             	sub    esp,0xc
c001b02d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b031:	52                   	push   edx
c001b032:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b036:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b03a:	50                   	push   eax
c001b03b:	e8 0c 51 ff ff       	call   c001014c <LogicalDisk::read(unsigned long long, int, void*)>
c001b040:	83 c4 20             	add    esp,0x20
c001b043:	83 c4 1c             	add    esp,0x1c
c001b046:	c3                   	ret    
c001b047:	90                   	nop

c001b048 <fatWrapperWriteDisk>:
c001b048:	83 ec 1c             	sub    esp,0x1c
c001b04b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b04f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b053:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b057:	89 04 24             	mov    DWORD PTR [esp],eax
c001b05a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b05e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b062:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b067:	8b 04 85 20 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95e0]
c001b06e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b072:	83 ec 0c             	sub    esp,0xc
c001b075:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b079:	52                   	push   edx
c001b07a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b07e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b082:	50                   	push   eax
c001b083:	e8 30 51 ff ff       	call   c00101b8 <LogicalDisk::write(unsigned long long, int, void*)>
c001b088:	83 c4 20             	add    esp,0x20
c001b08b:	83 c4 1c             	add    esp,0x1c
c001b08e:	c3                   	ret    
c001b08f:	90                   	nop

c001b090 <fatWrapperIoctl>:
c001b090:	53                   	push   ebx
c001b091:	83 ec 28             	sub    esp,0x28
c001b094:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b098:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b09c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b0a0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b0a4:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b0a9:	75 31                	jne    c001b0dc <fatWrapperIoctl+0x4c>
c001b0ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b0af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b0b3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b0b8:	8b 04 85 20 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95e0]
c001b0bf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b0c5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b0cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b0cf:	66 89 02             	mov    WORD PTR [edx],ax
c001b0d2:	b8 00 00 00 00       	mov    eax,0x0
c001b0d7:	e9 bc 00 00 00       	jmp    c001b198 <fatWrapperIoctl+0x108>
c001b0dc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b0e1:	75 6d                	jne    c001b150 <fatWrapperIoctl+0xc0>
c001b0e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b0e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0eb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b0f0:	8b 04 85 20 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95e0]
c001b0f7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b0fd:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b103:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b109:	89 c8                	mov    eax,ecx
c001b10b:	89 da                	mov    edx,ebx
c001b10d:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b111:	c1 e0 0a             	shl    eax,0xa
c001b114:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b119:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c001b120:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b126:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b12c:	89 cb                	mov    ebx,ecx
c001b12e:	c1 fb 1f             	sar    ebx,0x1f
c001b131:	53                   	push   ebx
c001b132:	51                   	push   ecx
c001b133:	52                   	push   edx
c001b134:	50                   	push   eax
c001b135:	e8 5a 5e 00 00       	call   c0020f94 <__udivdi3>
c001b13a:	83 c4 10             	add    esp,0x10
c001b13d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b141:	89 01                	mov    DWORD PTR [ecx],eax
c001b143:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b146:	b8 00 00 00 00       	mov    eax,0x0
c001b14b:	eb 4b                	jmp    c001b198 <fatWrapperIoctl+0x108>
c001b14d:	8d 76 00             	lea    esi,[esi+0x0]
c001b150:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b155:	75 09                	jne    c001b160 <fatWrapperIoctl+0xd0>
c001b157:	b8 00 00 00 00       	mov    eax,0x0
c001b15c:	eb 3a                	jmp    c001b198 <fatWrapperIoctl+0x108>
c001b15e:	66 90                	xchg   ax,ax
c001b160:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b165:	75 19                	jne    c001b180 <fatWrapperIoctl+0xf0>
c001b167:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b16b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b16f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b173:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b179:	b8 00 00 00 00       	mov    eax,0x0
c001b17e:	eb 18                	jmp    c001b198 <fatWrapperIoctl+0x108>
c001b180:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b185:	75 09                	jne    c001b190 <fatWrapperIoctl+0x100>
c001b187:	b8 00 00 00 00       	mov    eax,0x0
c001b18c:	eb 0a                	jmp    c001b198 <fatWrapperIoctl+0x108>
c001b18e:	66 90                	xchg   ax,ax
c001b190:	b8 04 00 00 00       	mov    eax,0x4
c001b195:	8d 76 00             	lea    esi,[esi+0x0]
c001b198:	83 c4 28             	add    esp,0x28
c001b19b:	5b                   	pop    ebx
c001b19c:	c3                   	ret    
c001b19d:	90                   	nop
c001b19e:	66 90                	xchg   ax,ax

c001b1a0 <FAT::FAT()>:
c001b1a0:	83 ec 1c             	sub    esp,0x1c
c001b1a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1a7:	83 ec 0c             	sub    esp,0xc
c001b1aa:	50                   	push   eax
c001b1ab:	e8 8e 1b ff ff       	call   c000cd3e <Filesystem::Filesystem()>
c001b1b0:	83 c4 10             	add    esp,0x10
c001b1b3:	ba 6c 4b 02 c0       	mov    edx,0xc0024b6c
c001b1b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1bc:	89 10                	mov    DWORD PTR [eax],edx
c001b1be:	c7 05 20 7a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027a20,0x0
c001b1c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b1d0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b1d5:	7f 15                	jg     c001b1ec <FAT::FAT()+0x4c>
c001b1d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1db:	c7 04 85 40 7a 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd85c0],0xffffffff
c001b1e6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b1ea:	eb e4                	jmp    c001b1d0 <FAT::FAT()+0x30>
c001b1ec:	90                   	nop
c001b1ed:	83 c4 1c             	add    esp,0x1c
c001b1f0:	c3                   	ret    
c001b1f1:	90                   	nop
c001b1f2:	66 90                	xchg   ax,ax

c001b1f4 <FAT::fixFilepath(char*)>:
c001b1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1f8:	8a 00                	mov    al,BYTE PTR [eax]
c001b1fa:	3c 40                	cmp    al,0x40
c001b1fc:	7e 2e                	jle    c001b22c <FAT::fixFilepath(char*)+0x38>
c001b1fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b202:	8a 00                	mov    al,BYTE PTR [eax]
c001b204:	83 e8 41             	sub    eax,0x41
c001b207:	88 c2                	mov    dl,al
c001b209:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b20d:	88 10                	mov    BYTE PTR [eax],dl
c001b20f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b213:	8a 00                	mov    al,BYTE PTR [eax]
c001b215:	0f be c0             	movsx  eax,al
c001b218:	8b 04 85 40 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85c0]
c001b21f:	83 c0 30             	add    eax,0x30
c001b222:	88 c2                	mov    dl,al
c001b224:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b228:	88 10                	mov    BYTE PTR [eax],dl
c001b22a:	66 90                	xchg   ax,ax
c001b22c:	90                   	nop
c001b22d:	c3                   	ret    
c001b22e:	66 90                	xchg   ax,ax

c001b230 <FAT::open(char const*, void**, FileOpenMode)>:
c001b230:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b236:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b23e:	74 0c                	je     c001b24c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b240:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b248:	75 0e                	jne    c001b258 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b24a:	66 90                	xchg   ax,ax
c001b24c:	b8 04 00 00 00       	mov    eax,0x4
c001b251:	e9 06 01 00 00       	jmp    c001b35c <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b256:	66 90                	xchg   ax,ax
c001b258:	83 ec 08             	sub    esp,0x8
c001b25b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b262:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b266:	50                   	push   eax
c001b267:	e8 d4 54 fe ff       	call   c0000740 <strcpy>
c001b26c:	83 c4 10             	add    esp,0x10
c001b26f:	83 ec 08             	sub    esp,0x8
c001b272:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b276:	50                   	push   eax
c001b277:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b27e:	e8 71 ff ff ff       	call   c001b1f4 <FAT::fixFilepath(char*)>
c001b283:	83 c4 10             	add    esp,0x10
c001b286:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b28e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b295:	83 e0 01             	and    eax,0x1
c001b298:	74 0a                	je     c001b2a4 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b29a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b2a2:	66 90                	xchg   ax,ax
c001b2a4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2ab:	83 e0 04             	and    eax,0x4
c001b2ae:	74 10                	je     c001b2c0 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b2b0:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b2b8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b2c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2c7:	83 e0 02             	and    eax,0x2
c001b2ca:	74 08                	je     c001b2d4 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b2cc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b2d4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2db:	83 e0 08             	and    eax,0x8
c001b2de:	74 08                	je     c001b2e8 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b2e0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b2e8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2ef:	83 e0 10             	and    eax,0x10
c001b2f2:	74 08                	je     c001b2fc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b2f4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b2fc:	83 ec 0c             	sub    esp,0xc
c001b2ff:	68 50 02 00 00       	push   0x250
c001b304:	e8 ba e6 fe ff       	call   c00099c3 <malloc>
c001b309:	83 c4 10             	add    esp,0x10
c001b30c:	89 c2                	mov    edx,eax
c001b30e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b315:	89 10                	mov    DWORD PTR [eax],edx
c001b317:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b31f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b326:	8b 00                	mov    eax,DWORD PTR [eax]
c001b328:	83 ec 04             	sub    esp,0x4
c001b32b:	52                   	push   edx
c001b32c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b330:	52                   	push   edx
c001b331:	50                   	push   eax
c001b332:	e8 54 9b fe ff       	call   c0004e8b <f_open>
c001b337:	83 c4 10             	add    esp,0x10
c001b33a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b341:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b349:	74 09                	je     c001b354 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b34b:	b8 01 00 00 00       	mov    eax,0x1
c001b350:	eb 0a                	jmp    c001b35c <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b352:	66 90                	xchg   ax,ax
c001b354:	b8 00 00 00 00       	mov    eax,0x0
c001b359:	8d 76 00             	lea    esi,[esi+0x0]
c001b35c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b362:	c3                   	ret    
c001b363:	90                   	nop

c001b364 <FAT::openDir(char const*, void**)>:
c001b364:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b36a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b372:	74 0c                	je     c001b380 <FAT::openDir(char const*, void**)+0x1c>
c001b374:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b37c:	75 0e                	jne    c001b38c <FAT::openDir(char const*, void**)+0x28>
c001b37e:	66 90                	xchg   ax,ax
c001b380:	b8 04 00 00 00       	mov    eax,0x4
c001b385:	e9 82 00 00 00       	jmp    c001b40c <FAT::openDir(char const*, void**)+0xa8>
c001b38a:	66 90                	xchg   ax,ax
c001b38c:	83 ec 08             	sub    esp,0x8
c001b38f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b396:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b39a:	50                   	push   eax
c001b39b:	e8 a0 53 fe ff       	call   c0000740 <strcpy>
c001b3a0:	83 c4 10             	add    esp,0x10
c001b3a3:	83 ec 08             	sub    esp,0x8
c001b3a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b3aa:	50                   	push   eax
c001b3ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b3b2:	e8 3d fe ff ff       	call   c001b1f4 <FAT::fixFilepath(char*)>
c001b3b7:	83 c4 10             	add    esp,0x10
c001b3ba:	83 ec 0c             	sub    esp,0xc
c001b3bd:	6a 4c                	push   0x4c
c001b3bf:	e8 ff e5 fe ff       	call   c00099c3 <malloc>
c001b3c4:	83 c4 10             	add    esp,0x10
c001b3c7:	89 c2                	mov    edx,eax
c001b3c9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b3d0:	89 10                	mov    DWORD PTR [eax],edx
c001b3d2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b3d9:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3db:	83 ec 08             	sub    esp,0x8
c001b3de:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b3e2:	52                   	push   edx
c001b3e3:	50                   	push   eax
c001b3e4:	e8 da aa fe ff       	call   c0005ec3 <f_opendir>
c001b3e9:	83 c4 10             	add    esp,0x10
c001b3ec:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b3f3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b3fb:	74 07                	je     c001b404 <FAT::openDir(char const*, void**)+0xa0>
c001b3fd:	b8 01 00 00 00       	mov    eax,0x1
c001b402:	eb 08                	jmp    c001b40c <FAT::openDir(char const*, void**)+0xa8>
c001b404:	b8 00 00 00 00       	mov    eax,0x0
c001b409:	8d 76 00             	lea    esi,[esi+0x0]
c001b40c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b412:	c3                   	ret    
c001b413:	90                   	nop

c001b414 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b414:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b41a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b422:	75 0c                	jne    c001b430 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b424:	b8 04 00 00 00       	mov    eax,0x4
c001b429:	e9 d2 00 00 00       	jmp    c001b500 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b42e:	66 90                	xchg   ax,ax
c001b430:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b438:	75 0a                	jne    c001b444 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b43a:	b8 04 00 00 00       	mov    eax,0x4
c001b43f:	e9 bc 00 00 00       	jmp    c001b500 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b444:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b44c:	75 0a                	jne    c001b458 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b44e:	b8 04 00 00 00       	mov    eax,0x4
c001b453:	e9 a8 00 00 00       	jmp    c001b500 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b458:	83 ec 08             	sub    esp,0x8
c001b45b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b462:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b469:	50                   	push   eax
c001b46a:	e8 d1 52 fe ff       	call   c0000740 <strcpy>
c001b46f:	83 c4 10             	add    esp,0x10
c001b472:	83 ec 08             	sub    esp,0x8
c001b475:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b47c:	50                   	push   eax
c001b47d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b484:	e8 6b fd ff ff       	call   c001b1f4 <FAT::fixFilepath(char*)>
c001b489:	83 c4 10             	add    esp,0x10
c001b48c:	83 ec 08             	sub    esp,0x8
c001b48f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b493:	50                   	push   eax
c001b494:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b49b:	50                   	push   eax
c001b49c:	e8 e1 ab fe ff       	call   c0006082 <f_stat>
c001b4a1:	83 c4 10             	add    esp,0x10
c001b4a4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b4ab:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b4b2:	85 c0                	test   eax,eax
c001b4b4:	74 0a                	je     c001b4c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b4b6:	83 f8 04             	cmp    eax,0x4
c001b4b9:	74 35                	je     c001b4f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b4bb:	eb 3b                	jmp    c001b4f8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b4bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b4c0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b4c4:	0f b6 c0             	movzx  eax,al
c001b4c7:	83 e0 10             	and    eax,0x10
c001b4ca:	0f 95 c2             	setne  dl
c001b4cd:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b4d4:	88 10                	mov    BYTE PTR [eax],dl
c001b4d6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b4d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b4dd:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b4e4:	89 01                	mov    DWORD PTR [ecx],eax
c001b4e6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b4e9:	b8 00 00 00 00       	mov    eax,0x0
c001b4ee:	eb 10                	jmp    c001b500 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b4f0:	b8 02 00 00 00       	mov    eax,0x2
c001b4f5:	eb 09                	jmp    c001b500 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b4f7:	90                   	nop
c001b4f8:	b8 01 00 00 00       	mov    eax,0x1
c001b4fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b500:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b506:	c3                   	ret    
c001b507:	90                   	nop

c001b508 <FAT::unlink(char const*)>:
c001b508:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b50e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b516:	75 08                	jne    c001b520 <FAT::unlink(char const*)+0x18>
c001b518:	b8 04 00 00 00       	mov    eax,0x4
c001b51d:	eb 61                	jmp    c001b580 <FAT::unlink(char const*)+0x78>
c001b51f:	90                   	nop
c001b520:	83 ec 08             	sub    esp,0x8
c001b523:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b52a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b52e:	50                   	push   eax
c001b52f:	e8 0c 52 fe ff       	call   c0000740 <strcpy>
c001b534:	83 c4 10             	add    esp,0x10
c001b537:	83 ec 08             	sub    esp,0x8
c001b53a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b53e:	50                   	push   eax
c001b53f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b546:	e8 a9 fc ff ff       	call   c001b1f4 <FAT::fixFilepath(char*)>
c001b54b:	83 c4 10             	add    esp,0x10
c001b54e:	83 ec 0c             	sub    esp,0xc
c001b551:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b555:	50                   	push   eax
c001b556:	e8 79 ae fe ff       	call   c00063d4 <f_unlink>
c001b55b:	83 c4 10             	add    esp,0x10
c001b55e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b565:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b56c:	85 c0                	test   eax,eax
c001b56e:	75 08                	jne    c001b578 <FAT::unlink(char const*)+0x70>
c001b570:	b8 00 00 00 00       	mov    eax,0x0
c001b575:	eb 09                	jmp    c001b580 <FAT::unlink(char const*)+0x78>
c001b577:	90                   	nop
c001b578:	b8 01 00 00 00       	mov    eax,0x1
c001b57d:	8d 76 00             	lea    esi,[esi+0x0]
c001b580:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b586:	c3                   	ret    
c001b587:	90                   	nop

c001b588 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b588:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b58e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b595:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b59c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b5a0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b5a4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b5ac:	75 0a                	jne    c001b5b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b5ae:	b8 04 00 00 00       	mov    eax,0x4
c001b5b3:	e9 30 01 00 00       	jmp    c001b6e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b5b8:	83 ec 08             	sub    esp,0x8
c001b5bb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b5c2:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b5c6:	50                   	push   eax
c001b5c7:	e8 74 51 fe ff       	call   c0000740 <strcpy>
c001b5cc:	83 c4 10             	add    esp,0x10
c001b5cf:	83 ec 08             	sub    esp,0x8
c001b5d2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b5d6:	50                   	push   eax
c001b5d7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b5de:	e8 11 fc ff ff       	call   c001b1f4 <FAT::fixFilepath(char*)>
c001b5e3:	83 c4 10             	add    esp,0x10
c001b5e6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b5ee:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b5f6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5fb:	83 e0 01             	and    eax,0x1
c001b5fe:	74 08                	je     c001b608 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b600:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b608:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b60d:	83 e0 02             	and    eax,0x2
c001b610:	74 0a                	je     c001b61c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001b612:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b61a:	66 90                	xchg   ax,ax
c001b61c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b621:	83 e0 04             	and    eax,0x4
c001b624:	74 0a                	je     c001b630 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b626:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b62e:	66 90                	xchg   ax,ax
c001b630:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b635:	83 e0 08             	and    eax,0x8
c001b638:	74 0a                	je     c001b644 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001b63a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b642:	66 90                	xchg   ax,ax
c001b644:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b649:	83 e0 01             	and    eax,0x1
c001b64c:	74 0a                	je     c001b658 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001b64e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b656:	66 90                	xchg   ax,ax
c001b658:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b65d:	83 e0 02             	and    eax,0x2
c001b660:	74 0a                	je     c001b66c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b662:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b66a:	66 90                	xchg   ax,ax
c001b66c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b671:	83 e0 04             	and    eax,0x4
c001b674:	74 0a                	je     c001b680 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001b676:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b67e:	66 90                	xchg   ax,ax
c001b680:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b685:	83 e0 08             	and    eax,0x8
c001b688:	74 0a                	je     c001b694 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001b68a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b692:	66 90                	xchg   ax,ax
c001b694:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b69b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b6a2:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b6aa:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b6b2:	83 ec 04             	sub    esp,0x4
c001b6b5:	52                   	push   edx
c001b6b6:	50                   	push   eax
c001b6b7:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b6bb:	50                   	push   eax
c001b6bc:	e8 b5 b3 fe ff       	call   c0006a76 <f_chmod>
c001b6c1:	83 c4 10             	add    esp,0x10
c001b6c4:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b6cb:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b6d2:	85 c0                	test   eax,eax
c001b6d4:	75 0a                	jne    c001b6e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001b6d6:	b8 00 00 00 00       	mov    eax,0x0
c001b6db:	eb 0b                	jmp    c001b6e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b6dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b6e0:	b8 01 00 00 00       	mov    eax,0x1
c001b6e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b6e8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b6ee:	c3                   	ret    
c001b6ef:	90                   	nop

c001b6f0 <FAT::rename(char const*, char const*)>:
c001b6f0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b6f6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b6fe:	74 0c                	je     c001b70c <FAT::rename(char const*, char const*)+0x1c>
c001b700:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b708:	75 0e                	jne    c001b718 <FAT::rename(char const*, char const*)+0x28>
c001b70a:	66 90                	xchg   ax,ax
c001b70c:	b8 04 00 00 00       	mov    eax,0x4
c001b711:	e9 9e 00 00 00       	jmp    c001b7b4 <FAT::rename(char const*, char const*)+0xc4>
c001b716:	66 90                	xchg   ax,ax
c001b718:	83 ec 08             	sub    esp,0x8
c001b71b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b722:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b729:	50                   	push   eax
c001b72a:	e8 11 50 fe ff       	call   c0000740 <strcpy>
c001b72f:	83 c4 10             	add    esp,0x10
c001b732:	83 ec 08             	sub    esp,0x8
c001b735:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b73c:	50                   	push   eax
c001b73d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b744:	e8 ab fa ff ff       	call   c001b1f4 <FAT::fixFilepath(char*)>
c001b749:	83 c4 10             	add    esp,0x10
c001b74c:	83 ec 08             	sub    esp,0x8
c001b74f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b756:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b75a:	50                   	push   eax
c001b75b:	e8 e0 4f fe ff       	call   c0000740 <strcpy>
c001b760:	83 c4 10             	add    esp,0x10
c001b763:	83 ec 08             	sub    esp,0x8
c001b766:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b76a:	50                   	push   eax
c001b76b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b772:	e8 7d fa ff ff       	call   c001b1f4 <FAT::fixFilepath(char*)>
c001b777:	83 c4 10             	add    esp,0x10
c001b77a:	83 ec 08             	sub    esp,0x8
c001b77d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b781:	50                   	push   eax
c001b782:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b789:	50                   	push   eax
c001b78a:	e8 f4 af fe ff       	call   c0006783 <f_rename>
c001b78f:	83 c4 10             	add    esp,0x10
c001b792:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b799:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b7a0:	85 c0                	test   eax,eax
c001b7a2:	75 08                	jne    c001b7ac <FAT::rename(char const*, char const*)+0xbc>
c001b7a4:	b8 00 00 00 00       	mov    eax,0x0
c001b7a9:	eb 09                	jmp    c001b7b4 <FAT::rename(char const*, char const*)+0xc4>
c001b7ab:	90                   	nop
c001b7ac:	b8 01 00 00 00       	mov    eax,0x1
c001b7b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b7b4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b7ba:	c3                   	ret    
c001b7bb:	90                   	nop

c001b7bc <FAT::mkdir(char const*)>:
c001b7bc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b7c2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b7ca:	75 08                	jne    c001b7d4 <FAT::mkdir(char const*)+0x18>
c001b7cc:	b8 04 00 00 00       	mov    eax,0x4
c001b7d1:	eb 61                	jmp    c001b834 <FAT::mkdir(char const*)+0x78>
c001b7d3:	90                   	nop
c001b7d4:	83 ec 08             	sub    esp,0x8
c001b7d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7de:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7e2:	50                   	push   eax
c001b7e3:	e8 58 4f fe ff       	call   c0000740 <strcpy>
c001b7e8:	83 c4 10             	add    esp,0x10
c001b7eb:	83 ec 08             	sub    esp,0x8
c001b7ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7f2:	50                   	push   eax
c001b7f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7fa:	e8 f5 f9 ff ff       	call   c001b1f4 <FAT::fixFilepath(char*)>
c001b7ff:	83 c4 10             	add    esp,0x10
c001b802:	83 ec 0c             	sub    esp,0xc
c001b805:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b809:	50                   	push   eax
c001b80a:	e8 48 ad fe ff       	call   c0006557 <f_mkdir>
c001b80f:	83 c4 10             	add    esp,0x10
c001b812:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b819:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b820:	85 c0                	test   eax,eax
c001b822:	75 08                	jne    c001b82c <FAT::mkdir(char const*)+0x70>
c001b824:	b8 00 00 00 00       	mov    eax,0x0
c001b829:	eb 09                	jmp    c001b834 <FAT::mkdir(char const*)+0x78>
c001b82b:	90                   	nop
c001b82c:	b8 01 00 00 00       	mov    eax,0x1
c001b831:	8d 76 00             	lea    esi,[esi+0x0]
c001b834:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b83a:	c3                   	ret    
c001b83b:	90                   	nop

c001b83c <FAT::exists(char const*)>:
c001b83c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b842:	83 ec 08             	sub    esp,0x8
c001b845:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b84c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b850:	50                   	push   eax
c001b851:	e8 ea 4e fe ff       	call   c0000740 <strcpy>
c001b856:	83 c4 10             	add    esp,0x10
c001b859:	83 ec 08             	sub    esp,0x8
c001b85c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b860:	50                   	push   eax
c001b861:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b868:	e8 87 f9 ff ff       	call   c001b1f4 <FAT::fixFilepath(char*)>
c001b86d:	83 c4 10             	add    esp,0x10
c001b870:	83 ec 08             	sub    esp,0x8
c001b873:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b87a:	50                   	push   eax
c001b87b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b87f:	50                   	push   eax
c001b880:	e8 fd a7 fe ff       	call   c0006082 <f_stat>
c001b885:	83 c4 10             	add    esp,0x10
c001b888:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b88f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b896:	85 c0                	test   eax,eax
c001b898:	75 06                	jne    c001b8a0 <FAT::exists(char const*)+0x64>
c001b89a:	b0 01                	mov    al,0x1
c001b89c:	eb 06                	jmp    c001b8a4 <FAT::exists(char const*)+0x68>
c001b89e:	66 90                	xchg   ax,ax
c001b8a0:	b0 00                	mov    al,0x0
c001b8a2:	66 90                	xchg   ax,ax
c001b8a4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b8aa:	c3                   	ret    
c001b8ab:	90                   	nop

c001b8ac <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b8ac:	b8 08 00 00 00       	mov    eax,0x8
c001b8b1:	c3                   	ret    

c001b8b2 <ISO9660::seek(void*, unsigned long long)>:
c001b8b2:	53                   	push   ebx
c001b8b3:	b8 04 00 00 00       	mov    eax,0x4
c001b8b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b8bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b8c4:	85 d2                	test   edx,edx
c001b8c6:	74 17                	je     c001b8df <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b8c8:	89 c8                	mov    eax,ecx
c001b8ca:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b8cd:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b8d0:	b8 01 00 00 00       	mov    eax,0x1
c001b8d5:	73 08                	jae    c001b8df <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b8d7:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b8da:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b8dd:	31 c0                	xor    eax,eax
c001b8df:	5b                   	pop    ebx
c001b8e0:	c3                   	ret    
c001b8e1:	90                   	nop

c001b8e2 <ISO9660::tell(void*, unsigned long long*)>:
c001b8e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b8e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8ea:	85 d2                	test   edx,edx
c001b8ec:	74 12                	je     c001b900 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b8ee:	85 c0                	test   eax,eax
c001b8f0:	74 0e                	je     c001b900 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b8f2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b8f5:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b8f8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b8fb:	89 10                	mov    DWORD PTR [eax],edx
c001b8fd:	31 c0                	xor    eax,eax
c001b8ff:	c3                   	ret    
c001b900:	b8 04 00 00 00       	mov    eax,0x4
c001b905:	c3                   	ret    

c001b906 <ISO9660::getName()>:
c001b906:	b8 cc 4b 02 c0       	mov    eax,0xc0024bcc
c001b90b:	c3                   	ret    

c001b90c <ISO9660::stat(void*, unsigned long long*)>:
c001b90c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b914:	85 d2                	test   edx,edx
c001b916:	74 12                	je     c001b92a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b918:	85 c0                	test   eax,eax
c001b91a:	74 0e                	je     c001b92a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b91c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b91f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b922:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b925:	89 10                	mov    DWORD PTR [eax],edx
c001b927:	31 c0                	xor    eax,eax
c001b929:	c3                   	ret    
c001b92a:	b8 04 00 00 00       	mov    eax,0x4
c001b92f:	c3                   	ret    

c001b930 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b930:	b8 01 00 00 00       	mov    eax,0x1
c001b935:	c3                   	ret    

c001b936 <ISO9660::unlink(char const*)>:
c001b936:	b8 01 00 00 00       	mov    eax,0x1
c001b93b:	c3                   	ret    

c001b93c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b93c:	b8 01 00 00 00       	mov    eax,0x1
c001b941:	c3                   	ret    

c001b942 <ISO9660::rename(char const*, char const*)>:
c001b942:	b8 01 00 00 00       	mov    eax,0x1
c001b947:	c3                   	ret    

c001b948 <ISO9660::mkdir(char const*)>:
c001b948:	b8 01 00 00 00       	mov    eax,0x1
c001b94d:	c3                   	ret    

c001b94e <ISO9660::close(void*)>:
c001b94e:	83 ec 0c             	sub    esp,0xc
c001b951:	b8 04 00 00 00       	mov    eax,0x4
c001b956:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b95a:	85 d2                	test   edx,edx
c001b95c:	74 0e                	je     c001b96c <ISO9660::close(void*)+0x1e>
c001b95e:	83 ec 0c             	sub    esp,0xc
c001b961:	52                   	push   edx
c001b962:	e8 6c e0 fe ff       	call   c00099d3 <free>
c001b967:	83 c4 10             	add    esp,0x10
c001b96a:	31 c0                	xor    eax,eax
c001b96c:	83 c4 0c             	add    esp,0xc
c001b96f:	c3                   	ret    

c001b970 <ISO9660::closeDir(void*)>:
c001b970:	83 ec 0c             	sub    esp,0xc
c001b973:	b8 04 00 00 00       	mov    eax,0x4
c001b978:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b97c:	85 d2                	test   edx,edx
c001b97e:	74 0e                	je     c001b98e <ISO9660::closeDir(void*)+0x1e>
c001b980:	83 ec 0c             	sub    esp,0xc
c001b983:	52                   	push   edx
c001b984:	e8 4a e0 fe ff       	call   c00099d3 <free>
c001b989:	83 c4 10             	add    esp,0x10
c001b98c:	31 c0                	xor    eax,eax
c001b98e:	83 c4 0c             	add    esp,0xc
c001b991:	c3                   	ret    

c001b992 <ISO9660::~ISO9660()>:
c001b992:	83 ec 0c             	sub    esp,0xc
c001b995:	ba f0 4b 02 c0       	mov    edx,0xc0024bf0
c001b99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b99e:	89 10                	mov    DWORD PTR [eax],edx
c001b9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a4:	83 ec 0c             	sub    esp,0xc
c001b9a7:	50                   	push   eax
c001b9a8:	e8 b5 13 ff ff       	call   c000cd62 <Filesystem::~Filesystem()>
c001b9ad:	83 c4 10             	add    esp,0x10
c001b9b0:	90                   	nop
c001b9b1:	83 c4 0c             	add    esp,0xc
c001b9b4:	c3                   	ret    
c001b9b5:	90                   	nop

c001b9b6 <ISO9660::~ISO9660()>:
c001b9b6:	83 ec 0c             	sub    esp,0xc
c001b9b9:	83 ec 0c             	sub    esp,0xc
c001b9bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9c0:	e8 cd ff ff ff       	call   c001b992 <ISO9660::~ISO9660()>
c001b9c5:	83 c4 10             	add    esp,0x10
c001b9c8:	83 ec 08             	sub    esp,0x8
c001b9cb:	6a 08                	push   0x8
c001b9cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9d1:	e8 71 0f ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c001b9d6:	83 c4 10             	add    esp,0x10
c001b9d9:	83 c4 0c             	add    esp,0xc
c001b9dc:	c3                   	ret    

c001b9dd <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b9dd:	55                   	push   ebp
c001b9de:	31 c9                	xor    ecx,ecx
c001b9e0:	57                   	push   edi
c001b9e1:	56                   	push   esi
c001b9e2:	53                   	push   ebx
c001b9e3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b9e7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b9eb:	89 eb                	mov    ebx,ebp
c001b9ed:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b9f1:	39 ce                	cmp    esi,ecx
c001b9f3:	7e 17                	jle    c001ba0c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b9f5:	31 d2                	xor    edx,edx
c001b9f7:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b9fb:	7d 13                	jge    c001ba10 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b9fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ba01:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ba04:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001ba07:	75 0d                	jne    c001ba16 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001ba09:	42                   	inc    edx
c001ba0a:	eb eb                	jmp    c001b9f7 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001ba0c:	31 c0                	xor    eax,eax
c001ba0e:	eb 0a                	jmp    c001ba1a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ba10:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001ba14:	eb 04                	jmp    c001ba1a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ba16:	41                   	inc    ecx
c001ba17:	43                   	inc    ebx
c001ba18:	eb d7                	jmp    c001b9f1 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001ba1a:	5b                   	pop    ebx
c001ba1b:	5e                   	pop    esi
c001ba1c:	5f                   	pop    edi
c001ba1d:	5d                   	pop    ebp
c001ba1e:	c3                   	ret    

c001ba1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ba1f:	57                   	push   edi
c001ba20:	56                   	push   esi
c001ba21:	53                   	push   ebx
c001ba22:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba2a:	39 0d 20 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b20,ecx
c001ba30:	75 08                	jne    c001ba3a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001ba32:	38 05 54 5e 02 c0    	cmp    BYTE PTR ds:0xc0025e54,al
c001ba38:	74 2b                	je     c001ba65 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001ba3a:	83 ec 0c             	sub    esp,0xc
c001ba3d:	a2 54 5e 02 c0       	mov    ds:0xc0025e54,al
c001ba42:	68 40 7b 02 c0       	push   0xc0027b40
c001ba47:	0f be c0             	movsx  eax,al
c001ba4a:	6a 01                	push   0x1
c001ba4c:	89 0d 20 7b 02 c0    	mov    DWORD PTR ds:0xc0027b20,ecx
c001ba52:	31 db                	xor    ebx,ebx
c001ba54:	53                   	push   ebx
c001ba55:	51                   	push   ecx
c001ba56:	ff 34 85 1c 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd96e4]
c001ba5d:	e8 ea 46 ff ff       	call   c001014c <LogicalDisk::read(unsigned long long, int, void*)>
c001ba62:	83 c4 20             	add    esp,0x20
c001ba65:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ba69:	be 40 7b 02 c0       	mov    esi,0xc0027b40
c001ba6e:	b9 00 08 00 00       	mov    ecx,0x800
c001ba73:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ba75:	5b                   	pop    ebx
c001ba76:	5e                   	pop    esi
c001ba77:	5f                   	pop    edi
c001ba78:	c3                   	ret    
c001ba79:	90                   	nop

c001ba7a <ISO9660::tryMount(LogicalDisk*, int)>:
c001ba7a:	81 ec 10 08 00 00    	sub    esp,0x810
c001ba80:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001ba87:	83 c0 41             	add    eax,0x41
c001ba8a:	0f be c0             	movsx  eax,al
c001ba8d:	50                   	push   eax
c001ba8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ba92:	50                   	push   eax
c001ba93:	6a 10                	push   0x10
c001ba95:	e8 85 ff ff ff       	call   c001ba1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ba9a:	83 c4 10             	add    esp,0x10
c001ba9d:	31 c0                	xor    eax,eax
c001ba9f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001baa4:	75 1d                	jne    c001bac3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001baa6:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001baab:	75 16                	jne    c001bac3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001baad:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001bab2:	75 0f                	jne    c001bac3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bab4:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001bab9:	75 08                	jne    c001bac3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001babb:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001bac0:	0f 94 c0             	sete   al
c001bac3:	81 c4 0c 08 00 00    	add    esp,0x80c
c001bac9:	c3                   	ret    

c001baca <ISO9660::read(void*, unsigned long, void*, int*)>:
c001baca:	55                   	push   ebp
c001bacb:	57                   	push   edi
c001bacc:	56                   	push   esi
c001bacd:	53                   	push   ebx
c001bace:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001bad4:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001badb:	85 ed                	test   ebp,ebp
c001badd:	0f 84 da 01 00 00    	je     c001bcbd <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bae3:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001baeb:	0f 84 cc 01 00 00    	je     c001bcbd <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001baf1:	b8 01 00 00 00       	mov    eax,0x1
c001baf6:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001bafa:	0f 85 c2 01 00 00    	jne    c001bcc2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bb00:	31 d2                	xor    edx,edx
c001bb02:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001bb09:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bb0c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bb0f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bb12:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bb19:	01 c8                	add    eax,ecx
c001bb1b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bb1e:	11 da                	adc    edx,ebx
c001bb20:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001bb24:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bb28:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bb2c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb30:	19 d7                	sbb    edi,edx
c001bb32:	72 11                	jb     c001bb45 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001bb34:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001bb37:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001bb3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bb43:	eb 0c                	jmp    c001bb51 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001bb45:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001bb49:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb4d:	29 ce                	sub    esi,ecx
c001bb4f:	19 df                	sbb    edi,ebx
c001bb51:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bb54:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001bb57:	0f a4 c2 0b          	shld   edx,eax,0xb
c001bb5b:	c1 e0 0b             	shl    eax,0xb
c001bb5e:	01 c8                	add    eax,ecx
c001bb60:	11 da                	adc    edx,ebx
c001bb62:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bb69:	51                   	push   ecx
c001bb6a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bb6e:	50                   	push   eax
c001bb6f:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001bb73:	53                   	push   ebx
c001bb74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb7c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bb80:	50                   	push   eax
c001bb81:	e8 99 fe ff ff       	call   c001ba1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bb86:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001bb89:	b8 00 08 00 00       	mov    eax,0x800
c001bb8e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001bb94:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001bb98:	29 d0                	sub    eax,edx
c001bb9a:	83 c4 10             	add    esp,0x10
c001bb9d:	89 f9                	mov    ecx,edi
c001bb9f:	39 c6                	cmp    esi,eax
c001bba1:	83 d9 00             	sbb    ecx,0x0
c001bba4:	7d 1b                	jge    c001bbc1 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001bba6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001bbab:	75 12                	jne    c001bbbf <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001bbad:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bbb4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbba:	e9 fa 00 00 00       	jmp    c001bcb9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001bbbf:	89 f0                	mov    eax,esi
c001bbc1:	01 d3                	add    ebx,edx
c001bbc3:	31 d2                	xor    edx,edx
c001bbc5:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001bbc9:	39 c2                	cmp    edx,eax
c001bbcb:	7d 14                	jge    c001bbe1 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001bbcd:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001bbd4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bbd8:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001bbdb:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001bbde:	42                   	inc    edx
c001bbdf:	eb e8                	jmp    c001bbc9 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001bbe1:	89 c2                	mov    edx,eax
c001bbe3:	85 c0                	test   eax,eax
c001bbe5:	79 02                	jns    c001bbe9 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001bbe7:	31 d2                	xor    edx,edx
c001bbe9:	01 c2                	add    edx,eax
c001bbeb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001bbee:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001bbf5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001bbf9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bbfd:	99                   	cdq    
c001bbfe:	01 c1                	add    ecx,eax
c001bc00:	11 d3                	adc    ebx,edx
c001bc02:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001bc06:	29 c6                	sub    esi,eax
c001bc08:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001bc0c:	19 d7                	sbb    edi,edx
c001bc0e:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc11:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001bc15:	b8 ff 07 00 00       	mov    eax,0x7ff
c001bc1a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001bc1d:	b8 00 00 00 00       	mov    eax,0x0
c001bc22:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001bc26:	7d 43                	jge    c001bc6b <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001bc28:	52                   	push   edx
c001bc29:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc2d:	50                   	push   eax
c001bc2e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bc32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc36:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bc3a:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bc3e:	50                   	push   eax
c001bc3f:	e8 db fd ff ff       	call   c001ba1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc44:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001bc4c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001bc51:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001bc59:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001bc61:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001bc66:	83 c4 10             	add    esp,0x10
c001bc69:	eb aa                	jmp    c001bc15 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001bc6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc6f:	0b 04 24             	or     eax,DWORD PTR [esp]
c001bc72:	74 2a                	je     c001bc9e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001bc74:	50                   	push   eax
c001bc75:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc79:	50                   	push   eax
c001bc7a:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bc7e:	56                   	push   esi
c001bc7f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bc83:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc87:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001bc8b:	51                   	push   ecx
c001bc8c:	e8 8e fd ff ff       	call   c001ba1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc91:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bc95:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bc99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bc9b:	83 c4 10             	add    esp,0x10
c001bc9e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bca5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bca9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bcad:	89 18                	mov    DWORD PTR [eax],ebx
c001bcaf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bcb3:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bcb6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bcb9:	31 c0                	xor    eax,eax
c001bcbb:	eb 05                	jmp    c001bcc2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bcbd:	b8 04 00 00 00       	mov    eax,0x4
c001bcc2:	81 c4 2c 08 00 00    	add    esp,0x82c
c001bcc8:	5b                   	pop    ebx
c001bcc9:	5e                   	pop    esi
c001bcca:	5f                   	pop    edi
c001bccb:	5d                   	pop    ebp
c001bccc:	c3                   	ret    
c001bccd:	90                   	nop

c001bcce <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001bcce:	55                   	push   ebp
c001bccf:	57                   	push   edi
c001bcd0:	56                   	push   esi
c001bcd1:	53                   	push   ebx
c001bcd2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001bcd8:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001bcdf:	85 ed                	test   ebp,ebp
c001bce1:	0f 84 51 02 00 00    	je     c001bf38 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bce7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001bcef:	0f 84 43 02 00 00    	je     c001bf38 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bcf5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bcf8:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001bcfb:	75 0a                	jne    c001bd07 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001bcfd:	b8 07 00 00 00       	mov    eax,0x7
c001bd02:	e9 36 02 00 00       	jmp    c001bf3d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bd07:	50                   	push   eax
c001bd08:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bd0c:	50                   	push   eax
c001bd0d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bd14:	53                   	push   ebx
c001bd15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bd18:	c1 e0 0b             	shl    eax,0xb
c001bd1b:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001bd1e:	c1 e8 0b             	shr    eax,0xb
c001bd21:	50                   	push   eax
c001bd22:	e8 f8 fc ff ff       	call   c001ba1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd27:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd2a:	83 c4 10             	add    esp,0x10
c001bd2d:	89 c1                	mov    ecx,eax
c001bd2f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001bd32:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001bd38:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001bd3b:	84 db                	test   bl,bl
c001bd3d:	0f 85 8b 00 00 00    	jne    c001bdce <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001bd43:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001bd49:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bd4c:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001bd52:	29 c6                	sub    esi,eax
c001bd54:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001bd58:	89 f3                	mov    ebx,esi
c001bd5a:	89 f1                	mov    ecx,esi
c001bd5c:	c1 fb 1f             	sar    ebx,0x1f
c001bd5f:	01 f0                	add    eax,esi
c001bd61:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bd64:	11 da                	adc    edx,ebx
c001bd66:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd69:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bd6d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bd70:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bd73:	89 d8                	mov    eax,ebx
c001bd75:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001bd79:	ba 00 00 00 00       	mov    edx,0x0
c001bd7e:	19 f8                	sbb    eax,edi
c001bd80:	b8 00 00 00 00       	mov    eax,0x0
c001bd85:	73 08                	jae    c001bd8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001bd87:	89 f0                	mov    eax,esi
c001bd89:	89 fa                	mov    edx,edi
c001bd8b:	29 c8                	sub    eax,ecx
c001bd8d:	19 da                	sbb    edx,ebx
c001bd8f:	89 d7                	mov    edi,edx
c001bd91:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bd94:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bd97:	09 c7                	or     edi,eax
c001bd99:	0f 84 5e ff ff ff    	je     c001bcfd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001bd9f:	57                   	push   edi
c001bda0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bda4:	50                   	push   eax
c001bda5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bdac:	53                   	push   ebx
c001bdad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bdb0:	c1 e0 0b             	shl    eax,0xb
c001bdb3:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001bdb7:	c1 e8 0b             	shr    eax,0xb
c001bdba:	50                   	push   eax
c001bdbb:	e8 5f fc ff ff       	call   c001ba1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bdc0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bdc3:	83 c4 10             	add    esp,0x10
c001bdc6:	25 ff 07 00 00       	and    eax,0x7ff
c001bdcb:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001bdce:	31 ff                	xor    edi,edi
c001bdd0:	56                   	push   esi
c001bdd1:	6a 28                	push   0x28
c001bdd3:	6a 00                	push   0x0
c001bdd5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bdd9:	50                   	push   eax
c001bdda:	e8 a5 48 fe ff       	call   c0000684 <memset>
c001bddf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bde2:	25 ff 07 00 00       	and    eax,0x7ff
c001bde7:	89 c6                	mov    esi,eax
c001bde9:	83 c6 21             	add    esi,0x21
c001bdec:	83 d7 00             	adc    edi,0x0
c001bdef:	83 c4 10             	add    esp,0x10
c001bdf2:	31 c9                	xor    ecx,ecx
c001bdf4:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001bdfb:	83 f9 28             	cmp    ecx,0x28
c001bdfe:	88 04 24             	mov    BYTE PTR [esp],al
c001be01:	0f 94 c2             	sete   dl
c001be04:	88 d0                	mov    al,dl
c001be06:	ba ff 07 00 00       	mov    edx,0x7ff
c001be0b:	39 f2                	cmp    edx,esi
c001be0d:	ba 00 00 00 00       	mov    edx,0x0
c001be12:	19 fa                	sbb    edx,edi
c001be14:	0f 92 c2             	setb   dl
c001be17:	09 c2                	or     edx,eax
c001be19:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001be1d:	0f 94 c0             	sete   al
c001be20:	08 d0                	or     al,dl
c001be22:	75 16                	jne    c001be3a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001be24:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001be28:	74 10                	je     c001be3a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001be2a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001be2d:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001be31:	41                   	inc    ecx
c001be32:	83 c6 01             	add    esi,0x1
c001be35:	83 d7 00             	adc    edi,0x0
c001be38:	eb ba                	jmp    c001bdf4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001be3a:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001be41:	83 ec 0c             	sub    esp,0xc
c001be44:	8d 74 24 24          	lea    esi,[esp+0x24]
c001be48:	56                   	push   esi
c001be49:	e8 52 48 fe ff       	call   c00006a0 <strlen>
c001be4e:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001be55:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001be59:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001be61:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001be64:	5a                   	pop    edx
c001be65:	25 ff 07 00 00       	and    eax,0x7ff
c001be6a:	59                   	pop    ecx
c001be6b:	01 f8                	add    eax,edi
c001be6d:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001be73:	83 e0 02             	and    eax,0x2
c001be76:	3c 01                	cmp    al,0x1
c001be78:	19 c0                	sbb    eax,eax
c001be7a:	83 c0 02             	add    eax,0x2
c001be7d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001be81:	56                   	push   esi
c001be82:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001be86:	50                   	push   eax
c001be87:	e8 b4 48 fe ff       	call   c0000740 <strcpy>
c001be8c:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001be90:	83 c4 10             	add    esp,0x10
c001be93:	84 c0                	test   al,al
c001be95:	75 21                	jne    c001beb8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001be97:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001be9f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bea7:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001beaf:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001beb6:	eb 28                	jmp    c001bee0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001beb8:	fe c8                	dec    al
c001beba:	75 24                	jne    c001bee0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bebc:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001bec4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001becc:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bed4:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001bedb:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001bee0:	8d 74 24 40          	lea    esi,[esp+0x40]
c001bee4:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001beeb:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001bef2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bef4:	0f b6 f3             	movzx  esi,bl
c001bef7:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001befe:	31 db                	xor    ebx,ebx
c001bf00:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bf06:	89 df                	mov    edi,ebx
c001bf08:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001bf0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf0e:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001bf11:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bf14:	39 c6                	cmp    esi,eax
c001bf16:	19 d7                	sbb    edi,edx
c001bf18:	72 10                	jb     c001bf2a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001bf1a:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001bf21:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001bf28:	eb 0a                	jmp    c001bf34 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001bf2a:	29 f0                	sub    eax,esi
c001bf2c:	19 da                	sbb    edx,ebx
c001bf2e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bf31:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bf34:	31 c0                	xor    eax,eax
c001bf36:	eb 05                	jmp    c001bf3d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bf38:	b8 04 00 00 00       	mov    eax,0x4
c001bf3d:	81 c4 5c 09 00 00    	add    esp,0x95c
c001bf43:	5b                   	pop    ebx
c001bf44:	5e                   	pop    esi
c001bf45:	5f                   	pop    edi
c001bf46:	5d                   	pop    ebp
c001bf47:	c3                   	ret    

c001bf48 <readRoot(unsigned int*, unsigned int*, char)>:
c001bf48:	57                   	push   edi
c001bf49:	56                   	push   esi
c001bf4a:	81 ec 38 08 00 00    	sub    esp,0x838
c001bf50:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001bf58:	50                   	push   eax
c001bf59:	8d 44 24 38          	lea    eax,[esp+0x38]
c001bf5d:	50                   	push   eax
c001bf5e:	6a 10                	push   0x10
c001bf60:	e8 ba fa ff ff       	call   c001ba1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bf65:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001bf6c:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001bf70:	b9 22 00 00 00       	mov    ecx,0x22
c001bf75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf77:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bf7e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bf82:	89 10                	mov    DWORD PTR [eax],edx
c001bf84:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001bf8b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bf8f:	89 10                	mov    DWORD PTR [eax],edx
c001bf91:	81 c4 44 08 00 00    	add    esp,0x844
c001bf97:	b0 01                	mov    al,0x1
c001bf99:	5e                   	pop    esi
c001bf9a:	5f                   	pop    edi
c001bf9b:	c3                   	ret    

c001bf9c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001bf9c:	55                   	push   ebp
c001bf9d:	57                   	push   edi
c001bf9e:	56                   	push   esi
c001bf9f:	53                   	push   ebx
c001bfa0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bfa6:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001bfad:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001bfb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bfb8:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001bfbc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bfc0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bfc4:	75 03                	jne    c001bfc9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bfc6:	83 c3 02             	add    ebx,0x2
c001bfc9:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001bfcc:	75 03                	jne    c001bfd1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001bfce:	43                   	inc    ebx
c001bfcf:	eb f8                	jmp    c001bfc9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bfd1:	51                   	push   ecx
c001bfd2:	68 00 01 00 00       	push   0x100
c001bfd7:	6a 00                	push   0x0
c001bfd9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bfdd:	50                   	push   eax
c001bfde:	e8 a1 46 fe ff       	call   c0000684 <memset>
c001bfe3:	83 c4 10             	add    esp,0x10
c001bfe6:	31 d2                	xor    edx,edx
c001bfe8:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001bfeb:	84 c0                	test   al,al
c001bfed:	74 21                	je     c001c010 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001bfef:	3c 2f                	cmp    al,0x2f
c001bff1:	75 0b                	jne    c001bffe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001bff3:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001bff7:	bd 01 00 00 00       	mov    ebp,0x1
c001bffc:	eb 14                	jmp    c001c012 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001bffe:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c001:	80 f9 19             	cmp    cl,0x19
c001c004:	77 03                	ja     c001c009 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c006:	83 e8 20             	sub    eax,0x20
c001c009:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c00d:	42                   	inc    edx
c001c00e:	eb d8                	jmp    c001bfe8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c010:	31 ed                	xor    ebp,ebp
c001c012:	83 ec 0c             	sub    esp,0xc
c001c015:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c01c:	e8 a2 d9 fe ff       	call   c00099c3 <malloc>
c001c021:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c028:	89 c6                	mov    esi,eax
c001c02a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001c030:	c1 ef 0b             	shr    edi,0xb
c001c033:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c03a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c03e:	83 c4 10             	add    esp,0x10
c001c041:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c046:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c04a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c051:	74 28                	je     c001c07b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c053:	52                   	push   edx
c001c054:	57                   	push   edi
c001c055:	50                   	push   eax
c001c056:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c05a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c061:	e8 b9 f9 ff ff       	call   c001ba1f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c066:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c06a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c071:	05 00 08 00 00       	add    eax,0x800
c001c076:	83 c4 10             	add    esp,0x10
c001c079:	eb cb                	jmp    c001c046 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c07b:	83 ec 0c             	sub    esp,0xc
c001c07e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c082:	57                   	push   edi
c001c083:	e8 18 46 fe ff       	call   c00006a0 <strlen>
c001c088:	50                   	push   eax
c001c089:	57                   	push   edi
c001c08a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c091:	56                   	push   esi
c001c092:	e8 46 f9 ff ff       	call   c001b9dd <__memmem(unsigned char*, int, unsigned char*, int)>
c001c097:	83 c4 20             	add    esp,0x20
c001c09a:	85 c0                	test   eax,eax
c001c09c:	75 13                	jne    c001c0b1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c09e:	83 ec 0c             	sub    esp,0xc
c001c0a1:	56                   	push   esi
c001c0a2:	e8 2c d9 fe ff       	call   c00099d3 <free>
c001c0a7:	83 c4 10             	add    esp,0x10
c001c0aa:	31 c0                	xor    eax,eax
c001c0ac:	e9 b3 00 00 00       	jmp    c001c164 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c0b1:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c0b5:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c0b9:	c1 e7 08             	shl    edi,0x8
c001c0bc:	c1 e2 10             	shl    edx,0x10
c001c0bf:	09 d7                	or     edi,edx
c001c0c1:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c0c5:	09 d7                	or     edi,edx
c001c0c7:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c0cb:	c1 e2 18             	shl    edx,0x18
c001c0ce:	09 d7                	or     edi,edx
c001c0d0:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c0d4:	89 d1                	mov    ecx,edx
c001c0d6:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c0da:	c1 e1 08             	shl    ecx,0x8
c001c0dd:	c1 e2 10             	shl    edx,0x10
c001c0e0:	09 ca                	or     edx,ecx
c001c0e2:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c0e6:	09 ca                	or     edx,ecx
c001c0e8:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c0ec:	c1 e1 18             	shl    ecx,0x18
c001c0ef:	09 ca                	or     edx,ecx
c001c0f1:	89 e9                	mov    ecx,ebp
c001c0f3:	84 c9                	test   cl,cl
c001c0f5:	74 3c                	je     c001c133 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c0f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c0fb:	83 ec 0c             	sub    esp,0xc
c001c0fe:	56                   	push   esi
c001c0ff:	e8 cf d8 fe ff       	call   c00099d3 <free>
c001c104:	83 c4 0c             	add    esp,0xc
c001c107:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c10e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c113:	50                   	push   eax
c001c114:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c11b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c122:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c126:	52                   	push   edx
c001c127:	57                   	push   edi
c001c128:	53                   	push   ebx
c001c129:	e8 6e fe ff ff       	call   c001bf9c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c12e:	83 c4 20             	add    esp,0x20
c001c131:	eb 31                	jmp    c001c164 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c133:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c136:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c13d:	d0 e8                	shr    al,1
c001c13f:	89 3b                	mov    DWORD PTR [ebx],edi
c001c141:	83 e0 01             	and    eax,0x1
c001c144:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c14b:	83 ec 0c             	sub    esp,0xc
c001c14e:	89 13                	mov    DWORD PTR [ebx],edx
c001c150:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c157:	89 03                	mov    DWORD PTR [ebx],eax
c001c159:	56                   	push   esi
c001c15a:	e8 74 d8 fe ff       	call   c00099d3 <free>
c001c15f:	83 c4 10             	add    esp,0x10
c001c162:	b0 01                	mov    al,0x1
c001c164:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c16a:	5b                   	pop    ebx
c001c16b:	5e                   	pop    esi
c001c16c:	5f                   	pop    edi
c001c16d:	5d                   	pop    ebp
c001c16e:	c3                   	ret    

c001c16f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c16f:	55                   	push   ebp
c001c170:	57                   	push   edi
c001c171:	56                   	push   esi
c001c172:	53                   	push   ebx
c001c173:	83 ec 20             	sub    esp,0x20
c001c176:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c17a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c17e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c182:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c18a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c192:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c197:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c19d:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c1a3:	57                   	push   edi
c001c1a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c1a8:	50                   	push   eax
c001c1a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c1ad:	50                   	push   eax
c001c1ae:	e8 95 fd ff ff       	call   c001bf48 <readRoot(unsigned int*, unsigned int*, char)>
c001c1b3:	5a                   	pop    edx
c001c1b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c1b8:	e8 e3 44 fe ff       	call   c00006a0 <strlen>
c001c1bd:	83 c4 10             	add    esp,0x10
c001c1c0:	83 f8 03             	cmp    eax,0x3
c001c1c3:	77 17                	ja     c001c1dc <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c1c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1c9:	89 03                	mov    DWORD PTR [ebx],eax
c001c1cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1cf:	89 06                	mov    DWORD PTR [esi],eax
c001c1d1:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c1d8:	b0 01                	mov    al,0x1
c001c1da:	eb 19                	jmp    c001c1f5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c1dc:	50                   	push   eax
c001c1dd:	55                   	push   ebp
c001c1de:	57                   	push   edi
c001c1df:	56                   	push   esi
c001c1e0:	53                   	push   ebx
c001c1e1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1e9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c1ed:	e8 aa fd ff ff       	call   c001bf9c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c1f2:	83 c4 20             	add    esp,0x20
c001c1f5:	83 c4 1c             	add    esp,0x1c
c001c1f8:	5b                   	pop    ebx
c001c1f9:	5e                   	pop    esi
c001c1fa:	5f                   	pop    edi
c001c1fb:	5d                   	pop    ebp
c001c1fc:	c3                   	ret    
c001c1fd:	90                   	nop

c001c1fe <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c1fe:	57                   	push   edi
c001c1ff:	56                   	push   esi
c001c200:	53                   	push   ebx
c001c201:	83 ec 10             	sub    esp,0x10
c001c204:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c208:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c20c:	85 ff                	test   edi,edi
c001c20e:	0f 84 8b 00 00 00    	je     c001c29f <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c214:	85 f6                	test   esi,esi
c001c216:	0f 84 83 00 00 00    	je     c001c29f <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c21c:	b8 03 00 00 00       	mov    eax,0x3
c001c221:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c226:	75 7c                	jne    c001c2a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c228:	83 ec 0c             	sub    esp,0xc
c001c22b:	6a 1c                	push   0x1c
c001c22d:	e8 91 d7 fe ff       	call   c00099c3 <malloc>
c001c232:	89 07                	mov    DWORD PTR [edi],eax
c001c234:	89 c3                	mov    ebx,eax
c001c236:	58                   	pop    eax
c001c237:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c23b:	50                   	push   eax
c001c23c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c23f:	50                   	push   eax
c001c240:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c244:	50                   	push   eax
c001c245:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c249:	50                   	push   eax
c001c24a:	56                   	push   esi
c001c24b:	e8 1f ff ff ff       	call   c001c16f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c250:	83 c4 20             	add    esp,0x20
c001c253:	84 c0                	test   al,al
c001c255:	74 07                	je     c001c25e <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c257:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c25c:	74 0b                	je     c001c269 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c25e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c262:	b8 01 00 00 00       	mov    eax,0x1
c001c267:	eb 3b                	jmp    c001c2a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c269:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c26d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c271:	89 03                	mov    DWORD PTR [ebx],eax
c001c273:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c27a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c27e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c285:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c28c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c28f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c296:	8a 06                	mov    al,BYTE PTR [esi]
c001c298:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c29b:	31 c0                	xor    eax,eax
c001c29d:	eb 05                	jmp    c001c2a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c29f:	b8 04 00 00 00       	mov    eax,0x4
c001c2a4:	83 c4 10             	add    esp,0x10
c001c2a7:	5b                   	pop    ebx
c001c2a8:	5e                   	pop    esi
c001c2a9:	5f                   	pop    edi
c001c2aa:	c3                   	ret    
c001c2ab:	90                   	nop

c001c2ac <ISO9660::exists(char const*)>:
c001c2ac:	83 ec 28             	sub    esp,0x28
c001c2af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c2b3:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c2b7:	52                   	push   edx
c001c2b8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c2bb:	52                   	push   edx
c001c2bc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c2c0:	52                   	push   edx
c001c2c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c2c5:	52                   	push   edx
c001c2c6:	50                   	push   eax
c001c2c7:	e8 a3 fe ff ff       	call   c001c16f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c2cc:	83 c4 3c             	add    esp,0x3c
c001c2cf:	c3                   	ret    

c001c2d0 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c2d0:	56                   	push   esi
c001c2d1:	53                   	push   ebx
c001c2d2:	83 ec 14             	sub    esp,0x14
c001c2d5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c2d9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c2dd:	85 db                	test   ebx,ebx
c001c2df:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c2e3:	0f 94 c2             	sete   dl
c001c2e6:	85 f6                	test   esi,esi
c001c2e8:	0f 94 c0             	sete   al
c001c2eb:	08 c2                	or     dl,al
c001c2ed:	75 68                	jne    c001c357 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c2ef:	85 c9                	test   ecx,ecx
c001c2f1:	74 64                	je     c001c357 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c2f3:	83 ec 0c             	sub    esp,0xc
c001c2f6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c2f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c2fd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c303:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c30a:	50                   	push   eax
c001c30b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c30e:	50                   	push   eax
c001c30f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c313:	50                   	push   eax
c001c314:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c318:	50                   	push   eax
c001c319:	51                   	push   ecx
c001c31a:	e8 50 fe ff ff       	call   c001c16f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c31f:	83 c4 20             	add    esp,0x20
c001c322:	ba 01 00 00 00       	mov    edx,0x1
c001c327:	84 c0                	test   al,al
c001c329:	74 31                	je     c001c35c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c32b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c32f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c336:	89 03                	mov    DWORD PTR [ebx],eax
c001c338:	ba 00 00 00 00       	mov    edx,0x0
c001c33d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c341:	85 c0                	test   eax,eax
c001c343:	0f 95 06             	setne  BYTE PTR [esi]
c001c346:	74 14                	je     c001c35c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c348:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c34e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c355:	eb 05                	jmp    c001c35c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c357:	ba 04 00 00 00       	mov    edx,0x4
c001c35c:	83 c4 14             	add    esp,0x14
c001c35f:	89 d0                	mov    eax,edx
c001c361:	5b                   	pop    ebx
c001c362:	5e                   	pop    esi
c001c363:	c3                   	ret    

c001c364 <ISO9660::openDir(char const*, void**)>:
c001c364:	57                   	push   edi
c001c365:	56                   	push   esi
c001c366:	53                   	push   ebx
c001c367:	83 ec 10             	sub    esp,0x10
c001c36a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c36e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c372:	85 ff                	test   edi,edi
c001c374:	74 7b                	je     c001c3f1 <ISO9660::openDir(char const*, void**)+0x8d>
c001c376:	85 f6                	test   esi,esi
c001c378:	74 77                	je     c001c3f1 <ISO9660::openDir(char const*, void**)+0x8d>
c001c37a:	83 ec 0c             	sub    esp,0xc
c001c37d:	6a 1c                	push   0x1c
c001c37f:	e8 3f d6 fe ff       	call   c00099c3 <malloc>
c001c384:	89 07                	mov    DWORD PTR [edi],eax
c001c386:	89 c3                	mov    ebx,eax
c001c388:	58                   	pop    eax
c001c389:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c38d:	50                   	push   eax
c001c38e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c391:	50                   	push   eax
c001c392:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c396:	50                   	push   eax
c001c397:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c39b:	50                   	push   eax
c001c39c:	56                   	push   esi
c001c39d:	e8 cd fd ff ff       	call   c001c16f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c3a2:	83 c4 20             	add    esp,0x20
c001c3a5:	84 c0                	test   al,al
c001c3a7:	74 07                	je     c001c3b0 <ISO9660::openDir(char const*, void**)+0x4c>
c001c3a9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c3ae:	75 0b                	jne    c001c3bb <ISO9660::openDir(char const*, void**)+0x57>
c001c3b0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c3b4:	b8 01 00 00 00       	mov    eax,0x1
c001c3b9:	eb 3b                	jmp    c001c3f6 <ISO9660::openDir(char const*, void**)+0x92>
c001c3bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3bf:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c3c3:	89 03                	mov    DWORD PTR [ebx],eax
c001c3c5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c3cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3d0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c3d7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c3de:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c3e1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c3e8:	8a 06                	mov    al,BYTE PTR [esi]
c001c3ea:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c3ed:	31 c0                	xor    eax,eax
c001c3ef:	eb 05                	jmp    c001c3f6 <ISO9660::openDir(char const*, void**)+0x92>
c001c3f1:	b8 04 00 00 00       	mov    eax,0x4
c001c3f6:	83 c4 10             	add    esp,0x10
c001c3f9:	5b                   	pop    ebx
c001c3fa:	5e                   	pop    esi
c001c3fb:	5f                   	pop    edi
c001c3fc:	c3                   	ret    
c001c3fd:	90                   	nop

c001c3fe <ISO9660::ISO9660()>:
c001c3fe:	83 ec 0c             	sub    esp,0xc
c001c401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c405:	83 ec 0c             	sub    esp,0xc
c001c408:	50                   	push   eax
c001c409:	e8 30 09 ff ff       	call   c000cd3e <Filesystem::Filesystem()>
c001c40e:	83 c4 10             	add    esp,0x10
c001c411:	ba f0 4b 02 c0       	mov    edx,0xc0024bf0
c001c416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c41a:	89 10                	mov    DWORD PTR [eax],edx
c001c41c:	90                   	nop
c001c41d:	83 c4 0c             	add    esp,0xc
c001c420:	c3                   	ret    
c001c421:	90                   	nop

c001c422 <SoundCard::beginPlayback()>:
c001c422:	c7 44 24 04 50 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024c50
c001c42a:	e9 da 7e ff ff       	jmp    c0014309 <Krnl::panic(char const*)>
c001c42f:	90                   	nop

c001c430 <SoundCard::stopPlayback()>:
c001c430:	c7 44 24 04 84 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024c84
c001c438:	e9 cc 7e ff ff       	jmp    c0014309 <Krnl::panic(char const*)>
c001c43d:	90                   	nop

c001c43e <SoundCard::SoundCard(char const*)>:
c001c43e:	83 ec 1c             	sub    esp,0x1c
c001c441:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c445:	83 ec 08             	sub    esp,0x8
c001c448:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c44c:	50                   	push   eax
c001c44d:	e8 28 1c ff ff       	call   c000e07a <Device::Device(char const*)>
c001c452:	83 c4 10             	add    esp,0x10
c001c455:	ba 90 4d 02 c0       	mov    edx,0xc0024d90
c001c45a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c45e:	89 10                	mov    DWORD PTR [eax],edx
c001c460:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c464:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c46b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c46f:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c479:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c47d:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c487:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c48b:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c495:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c499:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c4a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c4ab:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c4b0:	7f 19                	jg     c001c4cb <SoundCard::SoundCard(char const*)+0x8d>
c001c4b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c4ba:	83 c2 54             	add    edx,0x54
c001c4bd:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c4c5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c4c9:	eb e0                	jmp    c001c4ab <SoundCard::SoundCard(char const*)+0x6d>
c001c4cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4cf:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c4d6:	90                   	nop
c001c4d7:	83 c4 1c             	add    esp,0x1c
c001c4da:	c3                   	ret    
c001c4db:	90                   	nop

c001c4dc <SoundCard::~SoundCard()>:
c001c4dc:	83 ec 0c             	sub    esp,0xc
c001c4df:	ba 90 4d 02 c0       	mov    edx,0xc0024d90
c001c4e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e8:	89 10                	mov    DWORD PTR [eax],edx
c001c4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ee:	83 ec 0c             	sub    esp,0xc
c001c4f1:	50                   	push   eax
c001c4f2:	e8 4d 18 ff ff       	call   c000dd44 <Device::~Device()>
c001c4f7:	83 c4 10             	add    esp,0x10
c001c4fa:	90                   	nop
c001c4fb:	83 c4 0c             	add    esp,0xc
c001c4fe:	c3                   	ret    
c001c4ff:	90                   	nop

c001c500 <SoundCard::~SoundCard()>:
c001c500:	83 ec 0c             	sub    esp,0xc
c001c503:	83 ec 0c             	sub    esp,0xc
c001c506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c50a:	e8 cd ff ff ff       	call   c001c4dc <SoundCard::~SoundCard()>
c001c50f:	83 c4 10             	add    esp,0x10
c001c512:	83 ec 08             	sub    esp,0x8
c001c515:	68 e8 01 00 00       	push   0x1e8
c001c51a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c51e:	e8 24 04 ff ff       	call   c000c947 <operator delete(void*, unsigned long)>
c001c523:	83 c4 10             	add    esp,0x10
c001c526:	83 c4 0c             	add    esp,0xc
c001c529:	c3                   	ret    

c001c52a <SoundCard::configureRates(int, int, int)>:
c001c52a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c52e:	31 c0                	xor    eax,eax
c001c530:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c537:	75 20                	jne    c001c559 <SoundCard::configureRates(int, int, int)+0x2f>
c001c539:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c53d:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c543:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c547:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c54d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c551:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c557:	b0 01                	mov    al,0x1
c001c559:	c3                   	ret    

c001c55a <SoundCard::getSamples16(int, short*)>:
c001c55a:	55                   	push   ebp
c001c55b:	57                   	push   edi
c001c55c:	31 ff                	xor    edi,edi
c001c55e:	56                   	push   esi
c001c55f:	53                   	push   ebx
c001c560:	83 ec 28             	sub    esp,0x28
c001c563:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c567:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c56b:	8d 5c 2d 00          	lea    ebx,[ebp+ebp*1+0x0]
c001c56f:	68 b7 4c 02 c0       	push   0xc0024cb7
c001c574:	e8 af 04 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c579:	83 c4 0c             	add    esp,0xc
c001c57c:	53                   	push   ebx
c001c57d:	6a 00                	push   0x0
c001c57f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c583:	e8 fc 40 fe ff       	call   c0000684 <memset>
c001c588:	58                   	pop    eax
c001c589:	5a                   	pop    edx
c001c58a:	53                   	push   ebx
c001c58b:	31 db                	xor    ebx,ebx
c001c58d:	68 d6 4c 02 c0       	push   0xc0024cd6
c001c592:	e8 91 04 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c597:	83 c4 10             	add    esp,0x10
c001c59a:	52                   	push   edx
c001c59b:	52                   	push   edx
c001c59c:	53                   	push   ebx
c001c59d:	68 e9 4c 02 c0       	push   0xc0024ce9
c001c5a2:	e8 81 04 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c5a7:	59                   	pop    ecx
c001c5a8:	58                   	pop    eax
c001c5a9:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c5b0:	68 01 4d 02 c0       	push   0xc0024d01
c001c5b5:	e8 6e 04 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c5ba:	8b 84 9e 58 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x158]
c001c5c1:	83 c4 10             	add    esp,0x10
c001c5c4:	85 c0                	test   eax,eax
c001c5c6:	74 44                	je     c001c60c <SoundCard::getSamples16(int, short*)+0xb2>
c001c5c8:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c5cc:	75 3e                	jne    c001c60c <SoundCard::getSamples16(int, short*)+0xb2>
c001c5ce:	50                   	push   eax
c001c5cf:	50                   	push   eax
c001c5d0:	53                   	push   ebx
c001c5d1:	68 13 4d 02 c0       	push   0xc0024d13
c001c5d6:	e8 4d 04 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c5db:	56                   	push   esi
c001c5dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c5e0:	55                   	push   ebp
c001c5e1:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c5e8:	e8 6f 03 00 00       	call   c001c95c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c5ed:	83 c4 18             	add    esp,0x18
c001c5f0:	50                   	push   eax
c001c5f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c5f5:	68 2a 4d 02 c0       	push   0xc0024d2a
c001c5fa:	e8 29 04 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c5ff:	83 c4 10             	add    esp,0x10
c001c602:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c606:	39 c7                	cmp    edi,eax
c001c608:	7d 02                	jge    c001c60c <SoundCard::getSamples16(int, short*)+0xb2>
c001c60a:	89 c7                	mov    edi,eax
c001c60c:	43                   	inc    ebx
c001c60d:	83 fb 20             	cmp    ebx,0x20
c001c610:	75 88                	jne    c001c59a <SoundCard::getSamples16(int, short*)+0x40>
c001c612:	83 c4 1c             	add    esp,0x1c
c001c615:	89 f8                	mov    eax,edi
c001c617:	5b                   	pop    ebx
c001c618:	5e                   	pop    esi
c001c619:	5f                   	pop    edi
c001c61a:	5d                   	pop    ebp
c001c61b:	c3                   	ret    

c001c61c <SoundCard::getSamples32(int, int*)>:
c001c61c:	55                   	push   ebp
c001c61d:	57                   	push   edi
c001c61e:	31 ff                	xor    edi,edi
c001c620:	56                   	push   esi
c001c621:	31 f6                	xor    esi,esi
c001c623:	53                   	push   ebx
c001c624:	83 ec 10             	sub    esp,0x10
c001c627:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c62b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c62f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c633:	c1 e0 02             	shl    eax,0x2
c001c636:	50                   	push   eax
c001c637:	6a 00                	push   0x0
c001c639:	55                   	push   ebp
c001c63a:	e8 45 40 fe ff       	call   c0000684 <memset>
c001c63f:	83 c4 10             	add    esp,0x10
c001c642:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c649:	85 c0                	test   eax,eax
c001c64b:	74 1b                	je     c001c668 <SoundCard::getSamples32(int, int*)+0x4c>
c001c64d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c651:	75 15                	jne    c001c668 <SoundCard::getSamples32(int, int*)+0x4c>
c001c653:	53                   	push   ebx
c001c654:	55                   	push   ebp
c001c655:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c659:	50                   	push   eax
c001c65a:	e8 f9 03 00 00       	call   c001ca58 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c65f:	83 c4 10             	add    esp,0x10
c001c662:	39 c6                	cmp    esi,eax
c001c664:	7d 02                	jge    c001c668 <SoundCard::getSamples32(int, int*)+0x4c>
c001c666:	89 c6                	mov    esi,eax
c001c668:	47                   	inc    edi
c001c669:	83 ff 20             	cmp    edi,0x20
c001c66c:	75 d4                	jne    c001c642 <SoundCard::getSamples32(int, int*)+0x26>
c001c66e:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c674:	85 f6                	test   esi,esi
c001c676:	75 0f                	jne    c001c687 <SoundCard::getSamples32(int, int*)+0x6b>
c001c678:	84 c0                	test   al,al
c001c67a:	74 1b                	je     c001c697 <SoundCard::getSamples32(int, int*)+0x7b>
c001c67c:	83 ec 0c             	sub    esp,0xc
c001c67f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c681:	53                   	push   ebx
c001c682:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c685:	eb 0d                	jmp    c001c694 <SoundCard::getSamples32(int, int*)+0x78>
c001c687:	84 c0                	test   al,al
c001c689:	75 0c                	jne    c001c697 <SoundCard::getSamples32(int, int*)+0x7b>
c001c68b:	83 ec 0c             	sub    esp,0xc
c001c68e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c690:	53                   	push   ebx
c001c691:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c694:	83 c4 10             	add    esp,0x10
c001c697:	83 c4 0c             	add    esp,0xc
c001c69a:	89 f0                	mov    eax,esi
c001c69c:	5b                   	pop    ebx
c001c69d:	5e                   	pop    esi
c001c69e:	5f                   	pop    edi
c001c69f:	5d                   	pop    ebp
c001c6a0:	c3                   	ret    
c001c6a1:	90                   	nop

c001c6a2 <SoundCard::addChannel(SoundPort*)>:
c001c6a2:	56                   	push   esi
c001c6a3:	53                   	push   ebx
c001c6a4:	53                   	push   ebx
c001c6a5:	31 db                	xor    ebx,ebx
c001c6a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6ab:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c6b3:	74 27                	je     c001c6dc <SoundCard::addChannel(SoundPort*)+0x3a>
c001c6b5:	43                   	inc    ebx
c001c6b6:	83 fb 20             	cmp    ebx,0x20
c001c6b9:	75 f0                	jne    c001c6ab <SoundCard::addChannel(SoundPort*)+0x9>
c001c6bb:	83 ec 0c             	sub    esp,0xc
c001c6be:	83 cb ff             	or     ebx,0xffffffff
c001c6c1:	68 4f 4d 02 c0       	push   0xc0024d4f
c001c6c6:	e8 5d 03 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c6cb:	c7 04 24 48 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d48
c001c6d2:	e8 32 7c ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001c6d7:	83 c4 10             	add    esp,0x10
c001c6da:	eb 1b                	jmp    c001c6f7 <SoundCard::addChannel(SoundPort*)+0x55>
c001c6dc:	51                   	push   ecx
c001c6dd:	51                   	push   ecx
c001c6de:	53                   	push   ebx
c001c6df:	68 67 4d 02 c0       	push   0xc0024d67
c001c6e4:	e8 3f 03 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c6e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c6ed:	83 c4 10             	add    esp,0x10
c001c6f0:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c6f7:	89 d8                	mov    eax,ebx
c001c6f9:	5a                   	pop    edx
c001c6fa:	5b                   	pop    ebx
c001c6fb:	5e                   	pop    esi
c001c6fc:	c3                   	ret    
c001c6fd:	90                   	nop

c001c6fe <SoundCard::removeChannel(int)>:
c001c6fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c702:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c706:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c711:	c3                   	ret    
c001c712:	66 90                	xchg   ax,ax

c001c714 <SoundPort::SoundPort(int, int, int, int)>:
c001c714:	83 ec 0c             	sub    esp,0xc
c001c717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c726:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c732:	89 10                	mov    DWORD PTR [eax],edx
c001c734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c738:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c73c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c73f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c743:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c747:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c74a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c74f:	75 13                	jne    c001c764 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c755:	8b 00                	mov    eax,DWORD PTR [eax]
c001c757:	05 a0 0f 00 00       	add    eax,0xfa0
c001c75c:	01 c0                	add    eax,eax
c001c75e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c762:	66 90                	xchg   ax,ax
c001c764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c768:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c76c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c773:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c781:	c1 e0 02             	shl    eax,0x2
c001c784:	83 ec 0c             	sub    esp,0xc
c001c787:	50                   	push   eax
c001c788:	e8 36 d2 fe ff       	call   c00099c3 <malloc>
c001c78d:	83 c4 10             	add    esp,0x10
c001c790:	89 c2                	mov    edx,eax
c001c792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c796:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c799:	90                   	nop
c001c79a:	83 c4 0c             	add    esp,0xc
c001c79d:	c3                   	ret    
c001c79e:	66 90                	xchg   ax,ax

c001c7a0 <SoundPort::~SoundPort()>:
c001c7a0:	83 ec 0c             	sub    esp,0xc
c001c7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c7aa:	85 c0                	test   eax,eax
c001c7ac:	74 1e                	je     c001c7cc <SoundPort::~SoundPort()+0x2c>
c001c7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c7b5:	83 ec 0c             	sub    esp,0xc
c001c7b8:	50                   	push   eax
c001c7b9:	e8 15 d2 fe ff       	call   c00099d3 <free>
c001c7be:	83 c4 10             	add    esp,0x10
c001c7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c7cc:	90                   	nop
c001c7cd:	83 c4 0c             	add    esp,0xc
c001c7d0:	c3                   	ret    
c001c7d1:	90                   	nop
c001c7d2:	66 90                	xchg   ax,ax

c001c7d4 <SoundPort::unpause()>:
c001c7d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7d8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c7dc:	c3                   	ret    
c001c7dd:	90                   	nop
c001c7de:	66 90                	xchg   ax,ax

c001c7e0 <SoundPort::pause()>:
c001c7e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7e4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c7e8:	c3                   	ret    
c001c7e9:	90                   	nop
c001c7ea:	66 90                	xchg   ax,ax

c001c7ec <SoundPort::getBufferUsed()>:
c001c7ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7f0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c7f3:	c3                   	ret    

c001c7f4 <SoundPort::getBufferSize()>:
c001c7f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c7fb:	c3                   	ret    

c001c7fc <SoundPort::buffer16(short*, int)>:
c001c7fc:	55                   	push   ebp
c001c7fd:	57                   	push   edi
c001c7fe:	56                   	push   esi
c001c7ff:	53                   	push   ebx
c001c800:	83 ec 1c             	sub    esp,0x1c
c001c803:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c807:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c80b:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c80e:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c811:	0f 84 85 00 00 00    	je     c001c89c <SoundPort::buffer16(short*, int)+0xa0>
c001c817:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c81b:	85 c9                	test   ecx,ecx
c001c81d:	7e 7d                	jle    c001c89c <SoundPort::buffer16(short*, int)+0xa0>
c001c81f:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001c823:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c826:	c1 e1 0f             	shl    ecx,0xf
c001c829:	8d 70 01             	lea    esi,[eax+0x1]
c001c82c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c82f:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c832:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c835:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c838:	74 6e                	je     c001c8a8 <SoundPort::buffer16(short*, int)+0xac>
c001c83a:	31 f6                	xor    esi,esi
c001c83c:	eb 22                	jmp    c001c860 <SoundPort::buffer16(short*, int)+0x64>
c001c83e:	66 90                	xchg   ax,ax
c001c840:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001c845:	8d 79 01             	lea    edi,[ecx+0x1]
c001c848:	c1 e3 0f             	shl    ebx,0xf
c001c84b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001c84e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001c851:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001c854:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c857:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c85a:	74 1c                	je     c001c878 <SoundPort::buffer16(short*, int)+0x7c>
c001c85c:	89 c6                	mov    esi,eax
c001c85e:	66 90                	xchg   ax,ax
c001c860:	8d 46 01             	lea    eax,[esi+0x1]
c001c863:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001c867:	75 d7                	jne    c001c840 <SoundPort::buffer16(short*, int)+0x44>
c001c869:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c86d:	83 c4 1c             	add    esp,0x1c
c001c870:	5b                   	pop    ebx
c001c871:	5e                   	pop    esi
c001c872:	5f                   	pop    edi
c001c873:	5d                   	pop    ebp
c001c874:	c3                   	ret    
c001c875:	8d 76 00             	lea    esi,[esi+0x0]
c001c878:	8d 46 02             	lea    eax,[esi+0x2]
c001c87b:	90                   	nop
c001c87c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c880:	83 ec 0c             	sub    esp,0xc
c001c883:	68 bc 4d 02 c0       	push   0xc0024dbc
c001c888:	e8 9b 01 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c88d:	83 c4 10             	add    esp,0x10
c001c890:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c894:	83 c4 1c             	add    esp,0x1c
c001c897:	5b                   	pop    ebx
c001c898:	5e                   	pop    esi
c001c899:	5f                   	pop    edi
c001c89a:	5d                   	pop    ebp
c001c89b:	c3                   	ret    
c001c89c:	83 c4 1c             	add    esp,0x1c
c001c89f:	31 c0                	xor    eax,eax
c001c8a1:	5b                   	pop    ebx
c001c8a2:	5e                   	pop    esi
c001c8a3:	5f                   	pop    edi
c001c8a4:	5d                   	pop    ebp
c001c8a5:	c3                   	ret    
c001c8a6:	66 90                	xchg   ax,ax
c001c8a8:	b8 01 00 00 00       	mov    eax,0x1
c001c8ad:	eb cd                	jmp    c001c87c <SoundPort::buffer16(short*, int)+0x80>
c001c8af:	90                   	nop

c001c8b0 <SoundPort::buffer32(int*, int)>:
c001c8b0:	55                   	push   ebp
c001c8b1:	57                   	push   edi
c001c8b2:	56                   	push   esi
c001c8b3:	53                   	push   ebx
c001c8b4:	83 ec 1c             	sub    esp,0x1c
c001c8b7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c8bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c8bf:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8c2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c8c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8ca:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c8cd:	74 79                	je     c001c948 <SoundPort::buffer32(int*, int)+0x98>
c001c8cf:	85 c0                	test   eax,eax
c001c8d1:	7e 75                	jle    c001c948 <SoundPort::buffer32(int*, int)+0x98>
c001c8d3:	8d 71 01             	lea    esi,[ecx+0x1]
c001c8d6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c8d9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c8dc:	8b 37                	mov    esi,DWORD PTR [edi]
c001c8de:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c8e1:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8e4:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c8e7:	74 6b                	je     c001c954 <SoundPort::buffer32(int*, int)+0xa4>
c001c8e9:	31 f6                	xor    esi,esi
c001c8eb:	eb 1f                	jmp    c001c90c <SoundPort::buffer32(int*, int)+0x5c>
c001c8ed:	8d 76 00             	lea    esi,[esi+0x0]
c001c8f0:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c8f3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c8f6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c8f9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c8fc:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c900:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c903:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c906:	74 1c                	je     c001c924 <SoundPort::buffer32(int*, int)+0x74>
c001c908:	89 de                	mov    esi,ebx
c001c90a:	66 90                	xchg   ax,ax
c001c90c:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c90f:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001c913:	75 db                	jne    c001c8f0 <SoundPort::buffer32(int*, int)+0x40>
c001c915:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c919:	83 c4 1c             	add    esp,0x1c
c001c91c:	5b                   	pop    ebx
c001c91d:	5e                   	pop    esi
c001c91e:	5f                   	pop    edi
c001c91f:	5d                   	pop    ebp
c001c920:	c3                   	ret    
c001c921:	8d 76 00             	lea    esi,[esi+0x0]
c001c924:	8d 46 02             	lea    eax,[esi+0x2]
c001c927:	90                   	nop
c001c928:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c92c:	83 ec 0c             	sub    esp,0xc
c001c92f:	68 d7 4d 02 c0       	push   0xc0024dd7
c001c934:	e8 ef 00 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001c939:	83 c4 10             	add    esp,0x10
c001c93c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c940:	83 c4 1c             	add    esp,0x1c
c001c943:	5b                   	pop    ebx
c001c944:	5e                   	pop    esi
c001c945:	5f                   	pop    edi
c001c946:	5d                   	pop    ebp
c001c947:	c3                   	ret    
c001c948:	83 c4 1c             	add    esp,0x1c
c001c94b:	31 c0                	xor    eax,eax
c001c94d:	5b                   	pop    ebx
c001c94e:	5e                   	pop    esi
c001c94f:	5f                   	pop    edi
c001c950:	5d                   	pop    ebp
c001c951:	c3                   	ret    
c001c952:	66 90                	xchg   ax,ax
c001c954:	b8 01 00 00 00       	mov    eax,0x1
c001c959:	eb cd                	jmp    c001c928 <SoundPort::buffer32(int*, int)+0x78>
c001c95b:	90                   	nop

c001c95c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c95c:	57                   	push   edi
c001c95d:	56                   	push   esi
c001c95e:	53                   	push   ebx
c001c95f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c963:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c967:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c96d:	39 03                	cmp    DWORD PTR [ebx],eax
c001c96f:	74 13                	je     c001c984 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001c971:	83 ec 0c             	sub    esp,0xc
c001c974:	68 2c 4e 02 c0       	push   0xc0024e2c
c001c979:	e8 8b 79 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001c97e:	83 c4 10             	add    esp,0x10
c001c981:	8d 76 00             	lea    esi,[esi+0x0]
c001c984:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c98a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c98d:	74 11                	je     c001c9a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001c98f:	83 ec 0c             	sub    esp,0xc
c001c992:	68 f2 4d 02 c0       	push   0xc0024df2
c001c997:	e8 6d 79 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001c99c:	83 c4 10             	add    esp,0x10
c001c99f:	90                   	nop
c001c9a0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c9a6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c9a9:	74 11                	je     c001c9bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001c9ab:	83 ec 0c             	sub    esp,0xc
c001c9ae:	68 f2 4d 02 c0       	push   0xc0024df2
c001c9b3:	e8 51 79 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001c9b8:	83 c4 10             	add    esp,0x10
c001c9bb:	90                   	nop
c001c9bc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c9bf:	89 c6                	mov    esi,eax
c001c9c1:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001c9c5:	7e 05                	jle    c001c9cc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001c9c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c9cb:	90                   	nop
c001c9cc:	85 f6                	test   esi,esi
c001c9ce:	7e 30                	jle    c001ca00 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001c9d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c9d4:	8d 3c 36             	lea    edi,[esi+esi*1]
c001c9d7:	31 c9                	xor    ecx,ecx
c001c9d9:	01 d7                	add    edi,edx
c001c9db:	90                   	nop
c001c9dc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c9df:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001c9e2:	85 c0                	test   eax,eax
c001c9e4:	79 06                	jns    c001c9ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001c9e6:	05 ff 7f 00 00       	add    eax,0x7fff
c001c9eb:	90                   	nop
c001c9ec:	c1 f8 0f             	sar    eax,0xf
c001c9ef:	83 c1 04             	add    ecx,0x4
c001c9f2:	66 01 02             	add    WORD PTR [edx],ax
c001c9f5:	83 c2 02             	add    edx,0x2
c001c9f8:	39 d7                	cmp    edi,edx
c001c9fa:	75 e0                	jne    c001c9dc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001c9fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c9ff:	90                   	nop
c001ca00:	56                   	push   esi
c001ca01:	89 c2                	mov    edx,eax
c001ca03:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001ca0a:	29 f2                	sub    edx,esi
c001ca0c:	52                   	push   edx
c001ca0d:	50                   	push   eax
c001ca0e:	68 4c 4e 02 c0       	push   0xc0024e4c
c001ca13:	e8 10 00 ff ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001ca18:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ca1b:	50                   	push   eax
c001ca1c:	01 f8                	add    eax,edi
c001ca1e:	50                   	push   eax
c001ca1f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca22:	29 f0                	sub    eax,esi
c001ca24:	c1 e0 02             	shl    eax,0x2
c001ca27:	50                   	push   eax
c001ca28:	68 7c 4e 02 c0       	push   0xc0024e7c
c001ca2d:	e8 f6 ff fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001ca32:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ca35:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca38:	83 c4 1c             	add    esp,0x1c
c001ca3b:	01 d7                	add    edi,edx
c001ca3d:	29 f0                	sub    eax,esi
c001ca3f:	c1 e0 02             	shl    eax,0x2
c001ca42:	50                   	push   eax
c001ca43:	57                   	push   edi
c001ca44:	52                   	push   edx
c001ca45:	e8 72 3b fe ff       	call   c00005bc <memmove>
c001ca4a:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001ca4d:	83 c4 10             	add    esp,0x10
c001ca50:	89 f0                	mov    eax,esi
c001ca52:	5b                   	pop    ebx
c001ca53:	5e                   	pop    esi
c001ca54:	5f                   	pop    edi
c001ca55:	c3                   	ret    
c001ca56:	66 90                	xchg   ax,ax

c001ca58 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ca58:	57                   	push   edi
c001ca59:	56                   	push   esi
c001ca5a:	53                   	push   ebx
c001ca5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca5f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ca63:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ca67:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001ca6d:	39 06                	cmp    DWORD PTR [esi],eax
c001ca6f:	74 13                	je     c001ca84 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001ca71:	83 ec 0c             	sub    esp,0xc
c001ca74:	68 a0 4e 02 c0       	push   0xc0024ea0
c001ca79:	e8 8b 78 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001ca7e:	83 c4 10             	add    esp,0x10
c001ca81:	8d 76 00             	lea    esi,[esi+0x0]
c001ca84:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001ca8a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001ca8d:	74 11                	je     c001caa0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001ca8f:	83 ec 0c             	sub    esp,0xc
c001ca92:	68 0e 4e 02 c0       	push   0xc0024e0e
c001ca97:	e8 6d 78 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001ca9c:	83 c4 10             	add    esp,0x10
c001ca9f:	90                   	nop
c001caa0:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001caa6:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001caa9:	74 11                	je     c001cabc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001caab:	83 ec 0c             	sub    esp,0xc
c001caae:	68 0e 4e 02 c0       	push   0xc0024e0e
c001cab3:	e8 51 78 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001cab8:	83 c4 10             	add    esp,0x10
c001cabb:	90                   	nop
c001cabc:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001cabf:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001cac3:	7e 07                	jle    c001cacc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001cac5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cac9:	8d 76 00             	lea    esi,[esi+0x0]
c001cacc:	85 ff                	test   edi,edi
c001cace:	7e 1c                	jle    c001caec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001cad0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001cad7:	31 c0                	xor    eax,eax
c001cad9:	8d 76 00             	lea    esi,[esi+0x0]
c001cadc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cadf:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001cae2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001cae5:	83 c0 04             	add    eax,0x4
c001cae8:	39 c1                	cmp    ecx,eax
c001caea:	75 f0                	jne    c001cadc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001caec:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001caef:	50                   	push   eax
c001caf0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001caf3:	29 f8                	sub    eax,edi
c001caf5:	c1 e0 02             	shl    eax,0x2
c001caf8:	50                   	push   eax
c001caf9:	8d 04 ba             	lea    eax,[edx+edi*4]
c001cafc:	50                   	push   eax
c001cafd:	52                   	push   edx
c001cafe:	e8 b9 3a fe ff       	call   c00005bc <memmove>
c001cb03:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001cb06:	83 c4 10             	add    esp,0x10
c001cb09:	89 f8                	mov    eax,edi
c001cb0b:	5b                   	pop    ebx
c001cb0c:	5e                   	pop    esi
c001cb0d:	5f                   	pop    edi
c001cb0e:	c3                   	ret    
c001cb0f:	90                   	nop

c001cb10 <PCI::open(int, int, void*)>:
c001cb10:	83 ec 18             	sub    esp,0x18
c001cb13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb17:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cb1b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cb21:	8b 10                	mov    edx,DWORD PTR [eax]
c001cb23:	50                   	push   eax
c001cb24:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001cb27:	31 c0                	xor    eax,eax
c001cb29:	83 c4 1c             	add    esp,0x1c
c001cb2c:	c3                   	ret    
c001cb2d:	90                   	nop

c001cb2e <PCI::close(int, int, void*)>:
c001cb2e:	31 c0                	xor    eax,eax
c001cb30:	c3                   	ret    
c001cb31:	90                   	nop

c001cb32 <PCI::PCI()>:
c001cb32:	83 ec 0c             	sub    esp,0xc
c001cb35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb39:	83 ec 08             	sub    esp,0x8
c001cb3c:	68 bf 4e 02 c0       	push   0xc0024ebf
c001cb41:	50                   	push   eax
c001cb42:	e8 8d 0b ff ff       	call   c000d6d4 <Bus::Bus(char const*)>
c001cb47:	83 c4 10             	add    esp,0x10
c001cb4a:	ba a8 4f 02 c0       	mov    edx,0xc0024fa8
c001cb4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb53:	89 10                	mov    DWORD PTR [eax],edx
c001cb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb59:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001cb63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb67:	a3 40 83 02 c0       	mov    ds:0xc0028340,eax
c001cb6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb70:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb76:	0f b6 d0             	movzx  edx,al
c001cb79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb7d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001cb84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb8e:	0f b6 d0             	movzx  edx,al
c001cb91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb95:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001cb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb9e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cba4:	8d 50 01             	lea    edx,[eax+0x1]
c001cba7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cbab:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001cbb1:	0f b6 d0             	movzx  edx,al
c001cbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001cbbc:	83 c9 c0             	or     ecx,0xffffffc0
c001cbbf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001cbc3:	90                   	nop
c001cbc4:	83 c4 0c             	add    esp,0xc
c001cbc7:	c3                   	ret    

c001cbc8 <PCI::readBAR8(unsigned int, int)>:
c001cbc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbd0:	f6 c2 01             	test   dl,0x1
c001cbd3:	74 07                	je     c001cbdc <PCI::readBAR8(unsigned int, int)+0x14>
c001cbd5:	83 e2 fc             	and    edx,0xfffffffc
c001cbd8:	01 c2                	add    edx,eax
c001cbda:	ec                   	in     al,dx
c001cbdb:	c3                   	ret    
c001cbdc:	83 e2 f0             	and    edx,0xfffffff0
c001cbdf:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001cbe2:	c3                   	ret    
c001cbe3:	90                   	nop

c001cbe4 <PCI::readBAR16(unsigned int, int)>:
c001cbe4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbe8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbec:	f6 c2 01             	test   dl,0x1
c001cbef:	74 08                	je     c001cbf9 <PCI::readBAR16(unsigned int, int)+0x15>
c001cbf1:	83 e2 fc             	and    edx,0xfffffffc
c001cbf4:	01 c2                	add    edx,eax
c001cbf6:	66 ed                	in     ax,dx
c001cbf8:	c3                   	ret    
c001cbf9:	83 e2 f0             	and    edx,0xfffffff0
c001cbfc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001cc00:	c3                   	ret    
c001cc01:	90                   	nop

c001cc02 <PCI::readBAR32(unsigned int, int)>:
c001cc02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc0a:	f6 c2 01             	test   dl,0x1
c001cc0d:	74 07                	je     c001cc16 <PCI::readBAR32(unsigned int, int)+0x14>
c001cc0f:	83 e2 fc             	and    edx,0xfffffffc
c001cc12:	01 c2                	add    edx,eax
c001cc14:	ed                   	in     eax,dx
c001cc15:	c3                   	ret    
c001cc16:	83 e2 f0             	and    edx,0xfffffff0
c001cc19:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001cc1c:	c3                   	ret    
c001cc1d:	90                   	nop

c001cc1e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001cc1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc26:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc2a:	f6 c2 01             	test   dl,0x1
c001cc2d:	74 07                	je     c001cc36 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001cc2f:	83 e2 fc             	and    edx,0xfffffffc
c001cc32:	01 ca                	add    edx,ecx
c001cc34:	ee                   	out    dx,al
c001cc35:	c3                   	ret    
c001cc36:	83 e2 f0             	and    edx,0xfffffff0
c001cc39:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001cc3c:	c3                   	ret    
c001cc3d:	90                   	nop

c001cc3e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001cc3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc46:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc4a:	f6 c2 01             	test   dl,0x1
c001cc4d:	74 08                	je     c001cc57 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001cc4f:	83 e2 fc             	and    edx,0xfffffffc
c001cc52:	01 ca                	add    edx,ecx
c001cc54:	66 ef                	out    dx,ax
c001cc56:	c3                   	ret    
c001cc57:	83 e2 f0             	and    edx,0xfffffff0
c001cc5a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001cc5e:	c3                   	ret    
c001cc5f:	90                   	nop

c001cc60 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001cc60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc68:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc6c:	f6 c2 01             	test   dl,0x1
c001cc6f:	74 07                	je     c001cc78 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001cc71:	83 e2 fc             	and    edx,0xfffffffc
c001cc74:	01 ca                	add    edx,ecx
c001cc76:	ef                   	out    dx,eax
c001cc77:	c3                   	ret    
c001cc78:	83 e2 f0             	and    edx,0xfffffff0
c001cc7b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001cc7e:	c3                   	ret    
c001cc7f:	90                   	nop

c001cc80 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cc80:	55                   	push   ebp
c001cc81:	57                   	push   edi
c001cc82:	56                   	push   esi
c001cc83:	53                   	push   ebx
c001cc84:	83 ec 0c             	sub    esp,0xc
c001cc87:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cc8b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001cc8f:	89 f0                	mov    eax,esi
c001cc91:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cc95:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cc99:	3c 07                	cmp    al,0x7
c001cc9b:	76 10                	jbe    c001ccad <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001cc9d:	83 ec 0c             	sub    esp,0xc
c001cca0:	68 c7 4e 02 c0       	push   0xc0024ec7
c001cca5:	e8 5f 76 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001ccaa:	83 c4 10             	add    esp,0x10
c001ccad:	80 fb 0f             	cmp    bl,0xf
c001ccb0:	76 10                	jbe    c001ccc2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001ccb2:	83 ec 0c             	sub    esp,0xc
c001ccb5:	68 f7 4e 02 c0       	push   0xc0024ef7
c001ccba:	e8 4a 76 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001ccbf:	83 c4 10             	add    esp,0x10
c001ccc2:	8d 04 36             	lea    eax,[esi+esi*1]
c001ccc5:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ccca:	83 c8 f0             	or     eax,0xfffffff0
c001cccd:	ee                   	out    dx,al
c001ccce:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ccd3:	89 e8                	mov    eax,ebp
c001ccd5:	ee                   	out    dx,al
c001ccd6:	83 c4 0c             	add    esp,0xc
c001ccd9:	89 d8                	mov    eax,ebx
c001ccdb:	66 81 e7 fc 00       	and    di,0xfc
c001cce0:	5b                   	pop    ebx
c001cce1:	c1 e0 08             	shl    eax,0x8
c001cce4:	5e                   	pop    esi
c001cce5:	09 f8                	or     eax,edi
c001cce7:	5f                   	pop    edi
c001cce8:	66 0d 00 c0          	or     ax,0xc000
c001ccec:	5d                   	pop    ebp
c001cced:	c3                   	ret    

c001ccee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ccee:	57                   	push   edi
c001ccef:	56                   	push   esi
c001ccf0:	53                   	push   ebx
c001ccf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ccf5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ccf9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ccff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cd03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd07:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cd0b:	83 ff 01             	cmp    edi,0x1
c001cd0e:	75 3e                	jne    c001cd4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001cd10:	89 de                	mov    esi,ebx
c001cd12:	0f b6 c0             	movzx  eax,al
c001cd15:	81 e6 fc 00 00 00    	and    esi,0xfc
c001cd1b:	c1 e0 10             	shl    eax,0x10
c001cd1e:	0f b6 c9             	movzx  ecx,cl
c001cd21:	09 f0                	or     eax,esi
c001cd23:	c1 e1 08             	shl    ecx,0x8
c001cd26:	0f b6 d2             	movzx  edx,dl
c001cd29:	09 c8                	or     eax,ecx
c001cd2b:	c1 e2 0b             	shl    edx,0xb
c001cd2e:	09 d0                	or     eax,edx
c001cd30:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cd35:	0d 00 00 00 80       	or     eax,0x80000000
c001cd3a:	ef                   	out    dx,eax
c001cd3b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cd40:	ed                   	in     eax,dx
c001cd41:	83 e3 02             	and    ebx,0x2
c001cd44:	0f b6 cb             	movzx  ecx,bl
c001cd47:	c1 e1 03             	shl    ecx,0x3
c001cd4a:	d3 e8                	shr    eax,cl
c001cd4c:	eb 43                	jmp    c001cd91 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cd4e:	83 ff 02             	cmp    edi,0x2
c001cd51:	75 2c                	jne    c001cd7f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001cd53:	83 ec 0c             	sub    esp,0xc
c001cd56:	0f b6 c9             	movzx  ecx,cl
c001cd59:	0f b6 d2             	movzx  edx,dl
c001cd5c:	0f b6 fb             	movzx  edi,bl
c001cd5f:	0f b6 c0             	movzx  eax,al
c001cd62:	57                   	push   edi
c001cd63:	51                   	push   ecx
c001cd64:	52                   	push   edx
c001cd65:	50                   	push   eax
c001cd66:	56                   	push   esi
c001cd67:	e8 14 ff ff ff       	call   c001cc80 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd6c:	89 c2                	mov    edx,eax
c001cd6e:	ed                   	in     eax,dx
c001cd6f:	83 e3 02             	and    ebx,0x2
c001cd72:	83 c4 20             	add    esp,0x20
c001cd75:	0f b6 cb             	movzx  ecx,bl
c001cd78:	c1 e1 03             	shl    ecx,0x3
c001cd7b:	d3 e8                	shr    eax,cl
c001cd7d:	eb 12                	jmp    c001cd91 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cd7f:	83 ec 0c             	sub    esp,0xc
c001cd82:	68 27 4f 02 c0       	push   0xc0024f27
c001cd87:	e8 7d 75 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001cd8c:	83 c4 10             	add    esp,0x10
c001cd8f:	31 c0                	xor    eax,eax
c001cd91:	5b                   	pop    ebx
c001cd92:	5e                   	pop    esi
c001cd93:	5f                   	pop    edi
c001cd94:	c3                   	ret    
c001cd95:	90                   	nop

c001cd96 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001cd96:	83 ec 18             	sub    esp,0x18
c001cd99:	6a 00                	push   0x0
c001cd9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cda0:	50                   	push   eax
c001cda1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cda6:	50                   	push   eax
c001cda7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdac:	50                   	push   eax
c001cdad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cdb1:	e8 38 ff ff ff       	call   c001ccee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdb6:	83 c4 2c             	add    esp,0x2c
c001cdb9:	c3                   	ret    

c001cdba <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001cdba:	83 ec 18             	sub    esp,0x18
c001cdbd:	6a 0e                	push   0xe
c001cdbf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdc4:	50                   	push   eax
c001cdc5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdca:	50                   	push   eax
c001cdcb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdd0:	50                   	push   eax
c001cdd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cdd5:	e8 14 ff ff ff       	call   c001ccee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdda:	83 c4 2c             	add    esp,0x2c
c001cddd:	0f b6 c0             	movzx  eax,al
c001cde0:	c3                   	ret    
c001cde1:	90                   	nop

c001cde2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001cde2:	55                   	push   ebp
c001cde3:	57                   	push   edi
c001cde4:	56                   	push   esi
c001cde5:	53                   	push   ebx
c001cde6:	83 ec 18             	sub    esp,0x18
c001cde9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001cdee:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001cdf3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001cdf8:	6a 0a                	push   0xa
c001cdfa:	56                   	push   esi
c001cdfb:	55                   	push   ebp
c001cdfc:	57                   	push   edi
c001cdfd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce01:	e8 e8 fe ff ff       	call   c001ccee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce06:	83 c4 14             	add    esp,0x14
c001ce09:	89 c3                	mov    ebx,eax
c001ce0b:	6a 0a                	push   0xa
c001ce0d:	0f b6 db             	movzx  ebx,bl
c001ce10:	56                   	push   esi
c001ce11:	55                   	push   ebp
c001ce12:	57                   	push   edi
c001ce13:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce17:	e8 d2 fe ff ff       	call   c001ccee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce1c:	83 c4 2c             	add    esp,0x2c
c001ce1f:	25 00 ff 00 00       	and    eax,0xff00
c001ce24:	09 d8                	or     eax,ebx
c001ce26:	5b                   	pop    ebx
c001ce27:	5e                   	pop    esi
c001ce28:	5f                   	pop    edi
c001ce29:	5d                   	pop    ebp
c001ce2a:	c3                   	ret    
c001ce2b:	90                   	nop

c001ce2c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001ce2c:	83 ec 18             	sub    esp,0x18
c001ce2f:	6a 08                	push   0x8
c001ce31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce36:	50                   	push   eax
c001ce37:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce3c:	50                   	push   eax
c001ce3d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce42:	50                   	push   eax
c001ce43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce47:	e8 a2 fe ff ff       	call   c001ccee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce4c:	83 c4 2c             	add    esp,0x2c
c001ce4f:	0f b6 c4             	movzx  eax,ah
c001ce52:	c3                   	ret    
c001ce53:	90                   	nop

c001ce54 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001ce54:	83 ec 18             	sub    esp,0x18
c001ce57:	6a 08                	push   0x8
c001ce59:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce5e:	50                   	push   eax
c001ce5f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce64:	50                   	push   eax
c001ce65:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce6a:	50                   	push   eax
c001ce6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce6f:	e8 7a fe ff ff       	call   c001ccee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce74:	83 c4 2c             	add    esp,0x2c
c001ce77:	c3                   	ret    

c001ce78 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001ce78:	83 ec 18             	sub    esp,0x18
c001ce7b:	6a 3c                	push   0x3c
c001ce7d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce82:	50                   	push   eax
c001ce83:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce88:	50                   	push   eax
c001ce89:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce8e:	50                   	push   eax
c001ce8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce93:	e8 56 fe ff ff       	call   c001ccee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce98:	83 c4 2c             	add    esp,0x2c
c001ce9b:	c3                   	ret    

c001ce9c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001ce9c:	83 ec 18             	sub    esp,0x18
c001ce9f:	6a 18                	push   0x18
c001cea1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cea6:	50                   	push   eax
c001cea7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ceac:	50                   	push   eax
c001cead:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ceb2:	50                   	push   eax
c001ceb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ceb7:	e8 32 fe ff ff       	call   c001ccee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cebc:	83 c4 2c             	add    esp,0x2c
c001cebf:	0f b6 c4             	movzx  eax,ah
c001cec2:	c3                   	ret    
c001cec3:	90                   	nop

c001cec4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cec4:	55                   	push   ebp
c001cec5:	57                   	push   edi
c001cec6:	56                   	push   esi
c001cec7:	53                   	push   ebx
c001cec8:	83 ec 28             	sub    esp,0x28
c001cecb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cecf:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001ced4:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001ced9:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001cede:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001cee5:	8d 43 12             	lea    eax,[ebx+0x12]
c001cee8:	83 c3 10             	add    ebx,0x10
c001ceeb:	0f b6 c0             	movzx  eax,al
c001ceee:	0f b6 db             	movzx  ebx,bl
c001cef1:	50                   	push   eax
c001cef2:	51                   	push   ecx
c001cef3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001cef7:	57                   	push   edi
c001cef8:	55                   	push   ebp
c001cef9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cefd:	e8 ec fd ff ff       	call   c001ccee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf02:	83 c4 14             	add    esp,0x14
c001cf05:	89 c6                	mov    esi,eax
c001cf07:	53                   	push   ebx
c001cf08:	c1 e6 10             	shl    esi,0x10
c001cf0b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf0f:	51                   	push   ecx
c001cf10:	57                   	push   edi
c001cf11:	55                   	push   ebp
c001cf12:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cf16:	e8 d3 fd ff ff       	call   c001ccee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf1b:	83 c4 3c             	add    esp,0x3c
c001cf1e:	0f b7 c0             	movzx  eax,ax
c001cf21:	5b                   	pop    ebx
c001cf22:	09 f0                	or     eax,esi
c001cf24:	5e                   	pop    esi
c001cf25:	5f                   	pop    edi
c001cf26:	5d                   	pop    ebp
c001cf27:	c3                   	ret    

c001cf28 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001cf28:	55                   	push   ebp
c001cf29:	57                   	push   edi
c001cf2a:	56                   	push   esi
c001cf2b:	53                   	push   ebx
c001cf2c:	83 ec 0c             	sub    esp,0xc
c001cf2f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cf33:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cf37:	89 f5                	mov    ebp,esi
c001cf39:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001cf3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf4b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf4f:	83 f9 01             	cmp    ecx,0x1
c001cf52:	75 5d                	jne    c001cfb1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001cf54:	0f b6 c8             	movzx  ecx,al
c001cf57:	0f b6 d2             	movzx  edx,dl
c001cf5a:	c1 e1 10             	shl    ecx,0x10
c001cf5d:	c1 e2 0b             	shl    edx,0xb
c001cf60:	89 f0                	mov    eax,esi
c001cf62:	25 fc 00 00 00       	and    eax,0xfc
c001cf67:	09 c1                	or     ecx,eax
c001cf69:	89 e8                	mov    eax,ebp
c001cf6b:	0f b6 c0             	movzx  eax,al
c001cf6e:	c1 e0 08             	shl    eax,0x8
c001cf71:	09 c1                	or     ecx,eax
c001cf73:	09 d1                	or     ecx,edx
c001cf75:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cf7a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cf80:	89 c8                	mov    eax,ecx
c001cf82:	ef                   	out    dx,eax
c001cf83:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cf88:	ed                   	in     eax,dx
c001cf89:	0f b7 db             	movzx  ebx,bx
c001cf8c:	83 e6 02             	and    esi,0x2
c001cf8f:	74 0a                	je     c001cf9b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001cf91:	0f b7 d0             	movzx  edx,ax
c001cf94:	c1 e3 10             	shl    ebx,0x10
c001cf97:	09 d3                	or     ebx,edx
c001cf99:	eb 05                	jmp    c001cfa0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001cf9b:	66 31 c0             	xor    ax,ax
c001cf9e:	09 c3                	or     ebx,eax
c001cfa0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cfa5:	89 c8                	mov    eax,ecx
c001cfa7:	ef                   	out    dx,eax
c001cfa8:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cfad:	89 d8                	mov    eax,ebx
c001cfaf:	eb 41                	jmp    c001cff2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cfb1:	83 f9 02             	cmp    ecx,0x2
c001cfb4:	75 45                	jne    c001cffb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001cfb6:	83 ec 0c             	sub    esp,0xc
c001cfb9:	0f b6 d2             	movzx  edx,dl
c001cfbc:	89 f1                	mov    ecx,esi
c001cfbe:	0f b6 c0             	movzx  eax,al
c001cfc1:	0f b6 f1             	movzx  esi,cl
c001cfc4:	89 e9                	mov    ecx,ebp
c001cfc6:	56                   	push   esi
c001cfc7:	0f b6 c9             	movzx  ecx,cl
c001cfca:	51                   	push   ecx
c001cfcb:	52                   	push   edx
c001cfcc:	50                   	push   eax
c001cfcd:	57                   	push   edi
c001cfce:	e8 ad fc ff ff       	call   c001cc80 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cfd3:	89 c2                	mov    edx,eax
c001cfd5:	ed                   	in     eax,dx
c001cfd6:	83 c4 20             	add    esp,0x20
c001cfd9:	0f b7 db             	movzx  ebx,bx
c001cfdc:	f6 c2 02             	test   dl,0x2
c001cfdf:	74 0c                	je     c001cfed <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001cfe1:	0f b7 c8             	movzx  ecx,ax
c001cfe4:	89 d8                	mov    eax,ebx
c001cfe6:	c1 e0 10             	shl    eax,0x10
c001cfe9:	09 c8                	or     eax,ecx
c001cfeb:	eb 05                	jmp    c001cff2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cfed:	66 31 c0             	xor    ax,ax
c001cff0:	09 d8                	or     eax,ebx
c001cff2:	ef                   	out    dx,eax
c001cff3:	83 c4 0c             	add    esp,0xc
c001cff6:	5b                   	pop    ebx
c001cff7:	5e                   	pop    esi
c001cff8:	5f                   	pop    edi
c001cff9:	5d                   	pop    ebp
c001cffa:	c3                   	ret    
c001cffb:	c7 44 24 20 27 4f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024f27
c001d003:	83 c4 0c             	add    esp,0xc
c001d006:	5b                   	pop    ebx
c001d007:	5e                   	pop    esi
c001d008:	5f                   	pop    edi
c001d009:	5d                   	pop    ebp
c001d00a:	e9 fa 72 ff ff       	jmp    c0014309 <Krnl::panic(char const*)>
c001d00f:	90                   	nop

c001d010 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d010:	55                   	push   ebp
c001d011:	57                   	push   edi
c001d012:	56                   	push   esi
c001d013:	53                   	push   ebx
c001d014:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d01a:	80 3d 4c 83 02 c0 00 	cmp    BYTE PTR ds:0xc002834c,0x0
c001d021:	0f 85 84 00 00 00    	jne    c001d0ab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001d027:	83 ec 0c             	sub    esp,0xc
c001d02a:	68 14 01 00 00       	push   0x114
c001d02f:	e8 8f c9 fe ff       	call   c00099c3 <malloc>
c001d034:	83 c4 0c             	add    esp,0xc
c001d037:	89 c3                	mov    ebx,eax
c001d039:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c001d03f:	68 2d 4f 02 c0       	push   0xc0024f2d
c001d044:	50                   	push   eax
c001d045:	e8 48 ff fe ff       	call   c000cf92 <File::File(char const*, Process*)>
c001d04a:	5a                   	pop    edx
c001d04b:	59                   	pop    ecx
c001d04c:	6a 01                	push   0x1
c001d04e:	53                   	push   ebx
c001d04f:	e8 a2 ff fe ff       	call   c000cff6 <File::open(FileOpenMode)>
c001d054:	83 c4 0c             	add    esp,0xc
c001d057:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d05b:	50                   	push   eax
c001d05c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d060:	50                   	push   eax
c001d061:	53                   	push   ebx
c001d062:	e8 3b 02 ff ff       	call   c000d2a2 <File::stat(unsigned long long*, bool*)>
c001d067:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d06b:	40                   	inc    eax
c001d06c:	89 04 24             	mov    DWORD PTR [esp],eax
c001d06f:	e8 4f c9 fe ff       	call   c00099c3 <malloc>
c001d074:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d078:	a3 48 83 02 c0       	mov    ds:0xc0028348,eax
c001d07d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d081:	5e                   	pop    esi
c001d082:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d084:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d088:	51                   	push   ecx
c001d089:	50                   	push   eax
c001d08a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d08e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d092:	53                   	push   ebx
c001d093:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d096:	83 c4 14             	add    esp,0x14
c001d099:	53                   	push   ebx
c001d09a:	e8 b5 ff fe ff       	call   c000d054 <File::close()>
c001d09f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0a3:	83 c4 10             	add    esp,0x10
c001d0a6:	a3 44 83 02 c0       	mov    ds:0xc0028344,eax
c001d0ab:	a1 44 83 02 c0       	mov    eax,ds:0xc0028344
c001d0b0:	8b 15 48 83 02 c0    	mov    edx,DWORD PTR ds:0xc0028348
c001d0b6:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0b9:	31 ff                	xor    edi,edi
c001d0bb:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c001d0c3:	31 f6                	xor    esi,esi
c001d0c5:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001d0ca:	31 db                	xor    ebx,ebx
c001d0cc:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001d0d4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001d0d9:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c001d0e0:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001d0e4:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001d0eb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d0ef:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d0f2:	0f 8e 6b 01 00 00    	jle    c001d263 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c001d0f8:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d0fb:	d4 40                	aam    0x40
c001d0fd:	d5 39                	aad    0x39
c001d0ff:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d103:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001d107:	d4 40                	aam    0x40
c001d109:	d5 39                	aad    0x39
c001d10b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d10f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001d113:	d4 40                	aam    0x40
c001d115:	d5 39                	aad    0x39
c001d117:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d11b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001d11f:	d4 40                	aam    0x40
c001d121:	d5 39                	aad    0x39
c001d123:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d127:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001d12b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d12f:	3c 56                	cmp    al,0x56
c001d131:	74 45                	je     c001d178 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001d133:	d4 40                	aam    0x40
c001d135:	d5 39                	aad    0x39
c001d137:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d13a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001d13e:	0f b6 c9             	movzx  ecx,cl
c001d141:	c1 e1 04             	shl    ecx,0x4
c001d144:	d4 40                	aam    0x40
c001d146:	d5 39                	aad    0x39
c001d148:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d14b:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001d14f:	0f b6 db             	movzx  ebx,bl
c001d152:	09 cb                	or     ebx,ecx
c001d154:	c1 e3 04             	shl    ebx,0x4
c001d157:	d4 40                	aam    0x40
c001d159:	d5 39                	aad    0x39
c001d15b:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d15e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001d162:	0f b6 c9             	movzx  ecx,cl
c001d165:	09 cb                	or     ebx,ecx
c001d167:	c1 e3 04             	shl    ebx,0x4
c001d16a:	89 d9                	mov    ecx,ebx
c001d16c:	d4 40                	aam    0x40
c001d16e:	d5 39                	aad    0x39
c001d170:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d173:	0f b6 db             	movzx  ebx,bl
c001d176:	09 cb                	or     ebx,ecx
c001d178:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001d17c:	80 f9 44             	cmp    cl,0x44
c001d17f:	74 47                	je     c001d1c8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001d181:	88 c8                	mov    al,cl
c001d183:	d4 40                	aam    0x40
c001d185:	d5 39                	aad    0x39
c001d187:	83 e8 30             	sub    eax,0x30
c001d18a:	0f b6 e8             	movzx  ebp,al
c001d18d:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001d191:	c1 e5 04             	shl    ebp,0x4
c001d194:	d4 40                	aam    0x40
c001d196:	d5 39                	aad    0x39
c001d198:	83 e8 30             	sub    eax,0x30
c001d19b:	0f b6 f0             	movzx  esi,al
c001d19e:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001d1a2:	09 ee                	or     esi,ebp
c001d1a4:	c1 e6 04             	shl    esi,0x4
c001d1a7:	d4 40                	aam    0x40
c001d1a9:	d5 39                	aad    0x39
c001d1ab:	83 e8 30             	sub    eax,0x30
c001d1ae:	0f b6 e8             	movzx  ebp,al
c001d1b1:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c001d1b5:	09 ee                	or     esi,ebp
c001d1b7:	c1 e6 04             	shl    esi,0x4
c001d1ba:	89 f5                	mov    ebp,esi
c001d1bc:	d4 40                	aam    0x40
c001d1be:	d5 39                	aad    0x39
c001d1c0:	83 e8 30             	sub    eax,0x30
c001d1c3:	0f b6 f0             	movzx  esi,al
c001d1c6:	09 ee                	or     esi,ebp
c001d1c8:	83 c7 10             	add    edi,0x10
c001d1cb:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001d1cf:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d1d2:	3c 0a                	cmp    al,0xa
c001d1d4:	74 09                	je     c001d1df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001d1d6:	45                   	inc    ebp
c001d1d7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d1da:	75 16                	jne    c001d1f2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001d1dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d1df:	3c 0a                	cmp    al,0xa
c001d1e1:	0f 94 c0             	sete   al
c001d1e4:	0f b6 c0             	movzx  eax,al
c001d1e7:	01 c7                	add    edi,eax
c001d1e9:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001d1ee:	75 0c                	jne    c001d1fc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c001d1f0:	eb 15                	jmp    c001d207 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c001d1f2:	47                   	inc    edi
c001d1f3:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001d1f6:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001d1fa:	eb d3                	jmp    c001d1cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001d1fc:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001d201:	0f 85 e8 fe ff ff    	jne    c001d0ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d207:	80 f9 44             	cmp    cl,0x44
c001d20a:	74 0b                	je     c001d217 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001d20c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001d211:	0f 85 d8 fe ff ff    	jne    c001d0ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d217:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d21b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001d21f:	c1 e1 04             	shl    ecx,0x4
c001d222:	83 e8 30             	sub    eax,0x30
c001d225:	09 c8                	or     eax,ecx
c001d227:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001d22b:	0f 85 be fe ff ff    	jne    c001d0ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d231:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001d235:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d239:	c1 e1 04             	shl    ecx,0x4
c001d23c:	83 e8 30             	sub    eax,0x30
c001d23f:	09 c8                	or     eax,ecx
c001d241:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001d245:	0f 85 a4 fe ff ff    	jne    c001d0ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d24b:	50                   	push   eax
c001d24c:	50                   	push   eax
c001d24d:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d251:	50                   	push   eax
c001d252:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d259:	e8 e2 34 fe ff       	call   c0000740 <strcpy>
c001d25e:	83 c4 10             	add    esp,0x10
c001d261:	eb 15                	jmp    c001d278 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001d263:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d26a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d275:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d278:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d27f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d285:	5b                   	pop    ebx
c001d286:	5e                   	pop    esi
c001d287:	5f                   	pop    edi
c001d288:	5d                   	pop    ebp
c001d289:	c3                   	ret    

c001d28a <PCI::checkBus(unsigned char)>:
c001d28a:	56                   	push   esi
c001d28b:	53                   	push   ebx
c001d28c:	31 db                	xor    ebx,ebx
c001d28e:	51                   	push   ecx
c001d28f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d294:	52                   	push   edx
c001d295:	53                   	push   ebx
c001d296:	43                   	inc    ebx
c001d297:	56                   	push   esi
c001d298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d29c:	e8 37 03 00 00       	call   c001d5d8 <PCI::checkDevice(unsigned char, unsigned char)>
c001d2a1:	83 c4 10             	add    esp,0x10
c001d2a4:	83 fb 20             	cmp    ebx,0x20
c001d2a7:	75 eb                	jne    c001d294 <PCI::checkBus(unsigned char)+0xa>
c001d2a9:	58                   	pop    eax
c001d2aa:	5b                   	pop    ebx
c001d2ab:	5e                   	pop    esi
c001d2ac:	c3                   	ret    
c001d2ad:	90                   	nop

c001d2ae <PCI::foundDevice(PCIDeviceInfo)>:
c001d2ae:	55                   	push   ebp
c001d2af:	57                   	push   edi
c001d2b0:	56                   	push   esi
c001d2b1:	53                   	push   ebx
c001d2b2:	83 ec 1c             	sub    esp,0x1c
c001d2b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d2b9:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d2bf:	0f 84 52 01 00 00    	je     c001d417 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d2c5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d2c9:	66 81 f9 06 04       	cmp    cx,0x406
c001d2ce:	75 2c                	jne    c001d2fc <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001d2d0:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d2d5:	50                   	push   eax
c001d2d6:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d2db:	50                   	push   eax
c001d2dc:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d2e1:	50                   	push   eax
c001d2e2:	56                   	push   esi
c001d2e3:	e8 b4 fb ff ff       	call   c001ce9c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d2e8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d2ec:	0f b6 c0             	movzx  eax,al
c001d2ef:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d2f3:	83 c4 2c             	add    esp,0x2c
c001d2f6:	5b                   	pop    ebx
c001d2f7:	5e                   	pop    esi
c001d2f8:	5f                   	pop    edi
c001d2f9:	5d                   	pop    ebp
c001d2fa:	eb 8e                	jmp    c001d28a <PCI::checkBus(unsigned char)>
c001d2fc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d300:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001d306:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d30a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d30e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d312:	88 d3                	mov    bl,dl
c001d314:	85 c0                	test   eax,eax
c001d316:	74 33                	je     c001d34b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001d318:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d31b:	85 d2                	test   edx,edx
c001d31d:	74 28                	je     c001d347 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d31f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d325:	31 ef                	xor    edi,ebp
c001d327:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d32d:	75 18                	jne    c001d347 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d32f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d333:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001d339:	75 0c                	jne    c001d347 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d33b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001d341:	0f 84 d0 00 00 00    	je     c001d417 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d347:	8b 00                	mov    eax,DWORD PTR [eax]
c001d349:	eb c9                	jmp    c001d314 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001d34b:	66 81 f9 01 06       	cmp    cx,0x601
c001d350:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001d354:	75 19                	jne    c001d36f <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001d356:	83 ec 0c             	sub    esp,0xc
c001d359:	68 64 01 00 00       	push   0x164
c001d35e:	e8 60 c6 fe ff       	call   c00099c3 <malloc>
c001d363:	89 c5                	mov    ebp,eax
c001d365:	89 04 24             	mov    DWORD PTR [esp],eax
c001d368:	e8 85 0e 00 00       	call   c001e1f2 <SATABus::SATABus()>
c001d36d:	eb 1e                	jmp    c001d38d <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001d36f:	66 81 f9 01 01       	cmp    cx,0x101
c001d374:	75 60                	jne    c001d3d6 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001d376:	83 ec 0c             	sub    esp,0xc
c001d379:	68 70 02 00 00       	push   0x270
c001d37e:	e8 40 c6 fe ff       	call   c00099c3 <malloc>
c001d383:	89 c5                	mov    ebp,eax
c001d385:	89 04 24             	mov    DWORD PTR [esp],eax
c001d388:	e8 0f 03 00 00       	call   c001d69c <IDE::IDE()>
c001d38d:	58                   	pop    eax
c001d38e:	5a                   	pop    edx
c001d38f:	55                   	push   ebp
c001d390:	56                   	push   esi
c001d391:	e8 e0 0a ff ff       	call   c000de76 <Device::addChild(Device*)>
c001d396:	83 ec 1c             	sub    esp,0x1c
c001d399:	b9 09 00 00 00       	mov    ecx,0x9
c001d39e:	fc                   	cld    
c001d39f:	89 e7                	mov    edi,esp
c001d3a1:	89 de                	mov    esi,ebx
c001d3a3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d3a5:	55                   	push   ebp
c001d3a6:	e8 dd 09 ff ff       	call   c000dd88 <Device::preOpenPCI(PCIDeviceInfo)>
c001d3ab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d3ae:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001d3b2:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001d3ba:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001d3c2:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001d3ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d3cd:	83 c4 4c             	add    esp,0x4c
c001d3d0:	5b                   	pop    ebx
c001d3d1:	5e                   	pop    esi
c001d3d2:	5f                   	pop    edi
c001d3d3:	5d                   	pop    ebp
c001d3d4:	ff e0                	jmp    eax
c001d3d6:	83 ec 0c             	sub    esp,0xc
c001d3d9:	68 58 01 00 00       	push   0x158
c001d3de:	e8 e0 c5 fe ff       	call   c00099c3 <malloc>
c001d3e3:	89 c5                	mov    ebp,eax
c001d3e5:	58                   	pop    eax
c001d3e6:	5a                   	pop    edx
c001d3e7:	68 46 4f 02 c0       	push   0xc0024f46
c001d3ec:	55                   	push   ebp
c001d3ed:	e8 8e 0d ff ff       	call   c000e180 <DriverlessDevice::DriverlessDevice(char const*)>
c001d3f2:	59                   	pop    ecx
c001d3f3:	5f                   	pop    edi
c001d3f4:	55                   	push   ebp
c001d3f5:	56                   	push   esi
c001d3f6:	e8 7b 0a ff ff       	call   c000de76 <Device::addChild(Device*)>
c001d3fb:	b9 09 00 00 00       	mov    ecx,0x9
c001d400:	fc                   	cld    
c001d401:	89 df                	mov    edi,ebx
c001d403:	89 de                	mov    esi,ebx
c001d405:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d407:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001d40b:	83 c4 2c             	add    esp,0x2c
c001d40e:	5b                   	pop    ebx
c001d40f:	5e                   	pop    esi
c001d410:	5f                   	pop    edi
c001d411:	5d                   	pop    ebp
c001d412:	e9 71 09 ff ff       	jmp    c000dd88 <Device::preOpenPCI(PCIDeviceInfo)>
c001d417:	83 c4 1c             	add    esp,0x1c
c001d41a:	5b                   	pop    ebx
c001d41b:	5e                   	pop    esi
c001d41c:	5f                   	pop    edi
c001d41d:	5d                   	pop    ebp
c001d41e:	c3                   	ret    
c001d41f:	90                   	nop

c001d420 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d420:	55                   	push   ebp
c001d421:	57                   	push   edi
c001d422:	56                   	push   esi
c001d423:	53                   	push   ebx
c001d424:	83 ec 68             	sub    esp,0x68
c001d427:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d42b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d432:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d436:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d43d:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c001d442:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d446:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d44d:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001d452:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d456:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c001d45b:	6a 0c                	push   0xc
c001d45d:	57                   	push   edi
c001d45e:	53                   	push   ebx
c001d45f:	56                   	push   esi
c001d460:	55                   	push   ebp
c001d461:	e8 88 f8 ff ff       	call   c001ccee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d466:	83 c4 20             	add    esp,0x20
c001d469:	57                   	push   edi
c001d46a:	53                   	push   ebx
c001d46b:	56                   	push   esi
c001d46c:	55                   	push   ebp
c001d46d:	e8 70 f9 ff ff       	call   c001cde2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d472:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001d477:	57                   	push   edi
c001d478:	53                   	push   ebx
c001d479:	56                   	push   esi
c001d47a:	55                   	push   ebp
c001d47b:	e8 f8 f9 ff ff       	call   c001ce78 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d480:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d484:	83 c4 14             	add    esp,0x14
c001d487:	6a 3c                	push   0x3c
c001d489:	57                   	push   edi
c001d48a:	53                   	push   ebx
c001d48b:	56                   	push   esi
c001d48c:	55                   	push   ebp
c001d48d:	e8 5c f8 ff ff       	call   c001ccee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d492:	0f b6 c4             	movzx  eax,ah
c001d495:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d499:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d49d:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d4a1:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c001d4a6:	83 c4 20             	add    esp,0x20
c001d4a9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d4af:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001d4b6:	74 7c                	je     c001d534 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d4b8:	31 c0                	xor    eax,eax
c001d4ba:	8b 15 28 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026428
c001d4c0:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d4c6:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c001d4cc:	7e 66                	jle    c001d534 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d4ce:	8d 14 c2             	lea    edx,[edx+eax*8]
c001d4d1:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001d4d8:	39 cb                	cmp    ebx,ecx
c001d4da:	75 55                	jne    c001d531 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d4dc:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001d4e3:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001d4e7:	75 48                	jne    c001d531 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d4e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d4ed:	83 ec 0c             	sub    esp,0xc
c001d4f0:	68 60 4f 02 c0       	push   0xc0024f60
c001d4f5:	e8 2e f5 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001d4fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4fe:	8b 15 28 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026428
c001d504:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d508:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d50e:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c001d516:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c001d51a:	52                   	push   edx
c001d51b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d51f:	53                   	push   ebx
c001d520:	68 85 4f 02 c0       	push   0xc0024f85
c001d525:	e8 fe f4 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001d52a:	83 c4 20             	add    esp,0x20
c001d52d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d531:	40                   	inc    eax
c001d532:	eb 86                	jmp    c001d4ba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c001d534:	31 d2                	xor    edx,edx
c001d536:	83 ec 0c             	sub    esp,0xc
c001d539:	57                   	push   edi
c001d53a:	53                   	push   ebx
c001d53b:	56                   	push   esi
c001d53c:	52                   	push   edx
c001d53d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d541:	55                   	push   ebp
c001d542:	e8 7d f9 ff ff       	call   c001cec4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d547:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d54b:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001d54f:	42                   	inc    edx
c001d550:	83 c4 20             	add    esp,0x20
c001d553:	83 fa 06             	cmp    edx,0x6
c001d556:	75 de                	jne    c001d536 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c001d558:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d55d:	83 ec 0c             	sub    esp,0xc
c001d560:	86 e0                	xchg   al,ah
c001d562:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001d567:	6a 02                	push   0x2
c001d569:	57                   	push   edi
c001d56a:	53                   	push   ebx
c001d56b:	56                   	push   esi
c001d56c:	55                   	push   ebp
c001d56d:	e8 7c f7 ff ff       	call   c001ccee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d572:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001d577:	83 c4 20             	add    esp,0x20
c001d57a:	57                   	push   edi
c001d57b:	53                   	push   ebx
c001d57c:	56                   	push   esi
c001d57d:	55                   	push   ebp
c001d57e:	e8 a9 f8 ff ff       	call   c001ce2c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d583:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d587:	57                   	push   edi
c001d588:	53                   	push   ebx
c001d589:	56                   	push   esi
c001d58a:	55                   	push   ebp
c001d58b:	e8 06 f8 ff ff       	call   c001cd96 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d590:	b9 09 00 00 00       	mov    ecx,0x9
c001d595:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001d59a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001d59e:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d5a2:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001d5a6:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001d5aa:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d5ae:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001d5b2:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d5b6:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001d5ba:	83 ec 0c             	sub    esp,0xc
c001d5bd:	fc                   	cld    
c001d5be:	89 e7                	mov    edi,esp
c001d5c0:	8d 74 24 58          	lea    esi,[esp+0x58]
c001d5c4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d5c6:	55                   	push   ebp
c001d5c7:	e8 e2 fc ff ff       	call   c001d2ae <PCI::foundDevice(PCIDeviceInfo)>
c001d5cc:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d5d2:	5b                   	pop    ebx
c001d5d3:	5e                   	pop    esi
c001d5d4:	5f                   	pop    edi
c001d5d5:	5d                   	pop    ebp
c001d5d6:	c3                   	ret    
c001d5d7:	90                   	nop

c001d5d8 <PCI::checkDevice(unsigned char, unsigned char)>:
c001d5d8:	55                   	push   ebp
c001d5d9:	57                   	push   edi
c001d5da:	56                   	push   esi
c001d5db:	53                   	push   ebx
c001d5dc:	83 ec 0c             	sub    esp,0xc
c001d5df:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d5e3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d5e8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d5ed:	6a 00                	push   0x0
c001d5ef:	56                   	push   esi
c001d5f0:	57                   	push   edi
c001d5f1:	55                   	push   ebp
c001d5f2:	e8 9f f7 ff ff       	call   c001cd96 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d5f7:	6a 00                	push   0x0
c001d5f9:	56                   	push   esi
c001d5fa:	57                   	push   edi
c001d5fb:	55                   	push   ebp
c001d5fc:	e8 1f fe ff ff       	call   c001d420 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d601:	83 c4 20             	add    esp,0x20
c001d604:	6a 00                	push   0x0
c001d606:	56                   	push   esi
c001d607:	57                   	push   edi
c001d608:	55                   	push   ebp
c001d609:	e8 ac f7 ff ff       	call   c001cdba <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d60e:	83 c4 10             	add    esp,0x10
c001d611:	84 c0                	test   al,al
c001d613:	79 27                	jns    c001d63c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d615:	bb 01 00 00 00       	mov    ebx,0x1
c001d61a:	53                   	push   ebx
c001d61b:	56                   	push   esi
c001d61c:	57                   	push   edi
c001d61d:	55                   	push   ebp
c001d61e:	e8 73 f7 ff ff       	call   c001cd96 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d623:	83 c4 10             	add    esp,0x10
c001d626:	66 40                	inc    ax
c001d628:	74 0c                	je     c001d636 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001d62a:	53                   	push   ebx
c001d62b:	56                   	push   esi
c001d62c:	57                   	push   edi
c001d62d:	55                   	push   ebp
c001d62e:	e8 ed fd ff ff       	call   c001d420 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d633:	83 c4 10             	add    esp,0x10
c001d636:	43                   	inc    ebx
c001d637:	83 fb 08             	cmp    ebx,0x8
c001d63a:	75 de                	jne    c001d61a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d63c:	83 c4 0c             	add    esp,0xc
c001d63f:	5b                   	pop    ebx
c001d640:	5e                   	pop    esi
c001d641:	5f                   	pop    edi
c001d642:	5d                   	pop    ebp
c001d643:	c3                   	ret    

c001d644 <PCI::detect()>:
c001d644:	56                   	push   esi
c001d645:	53                   	push   ebx
c001d646:	53                   	push   ebx
c001d647:	31 db                	xor    ebx,ebx
c001d649:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d64d:	6a 00                	push   0x0
c001d64f:	6a 00                	push   0x0
c001d651:	6a 00                	push   0x0
c001d653:	56                   	push   esi
c001d654:	e8 61 f7 ff ff       	call   c001cdba <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d659:	83 c4 10             	add    esp,0x10
c001d65c:	a8 80                	test   al,0x80
c001d65e:	75 21                	jne    c001d681 <PCI::detect()+0x3d>
c001d660:	51                   	push   ecx
c001d661:	51                   	push   ecx
c001d662:	6a 00                	push   0x0
c001d664:	56                   	push   esi
c001d665:	e8 20 fc ff ff       	call   c001d28a <PCI::checkBus(unsigned char)>
c001d66a:	83 c4 10             	add    esp,0x10
c001d66d:	eb 24                	jmp    c001d693 <PCI::detect()+0x4f>
c001d66f:	52                   	push   edx
c001d670:	52                   	push   edx
c001d671:	53                   	push   ebx
c001d672:	43                   	inc    ebx
c001d673:	56                   	push   esi
c001d674:	e8 11 fc ff ff       	call   c001d28a <PCI::checkBus(unsigned char)>
c001d679:	83 c4 10             	add    esp,0x10
c001d67c:	83 fb 08             	cmp    ebx,0x8
c001d67f:	74 12                	je     c001d693 <PCI::detect()+0x4f>
c001d681:	53                   	push   ebx
c001d682:	6a 00                	push   0x0
c001d684:	6a 00                	push   0x0
c001d686:	56                   	push   esi
c001d687:	e8 0a f7 ff ff       	call   c001cd96 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d68c:	83 c4 10             	add    esp,0x10
c001d68f:	66 40                	inc    ax
c001d691:	74 dc                	je     c001d66f <PCI::detect()+0x2b>
c001d693:	58                   	pop    eax
c001d694:	5b                   	pop    ebx
c001d695:	5e                   	pop    esi
c001d696:	c3                   	ret    
c001d697:	90                   	nop

c001d698 <IDE::close(int, int, void*)>:
c001d698:	83 c8 ff             	or     eax,0xffffffff
c001d69b:	c3                   	ret    

c001d69c <IDE::IDE()>:
c001d69c:	83 ec 0c             	sub    esp,0xc
c001d69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6a3:	83 ec 08             	sub    esp,0x8
c001d6a6:	68 cc 4f 02 c0       	push   0xc0024fcc
c001d6ab:	50                   	push   eax
c001d6ac:	e8 73 0b ff ff       	call   c000e224 <HardDiskController::HardDiskController(char const*)>
c001d6b1:	83 c4 10             	add    esp,0x10
c001d6b4:	ba 5c 50 02 c0       	mov    edx,0xc002505c
c001d6b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6bd:	89 10                	mov    DWORD PTR [eax],edx
c001d6bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6c3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001d6ca:	90                   	nop
c001d6cb:	83 c4 0c             	add    esp,0xc
c001d6ce:	c3                   	ret    
c001d6cf:	90                   	nop

c001d6d0 <IDE::prepareInterrupt(unsigned char)>:
c001d6d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d6d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d6d9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001d6e1:	c3                   	ret    

c001d6e2 <selectDrive(unsigned char, unsigned char)>:
c001d6e2:	c3                   	ret    
c001d6e3:	90                   	nop

c001d6e4 <IDE::getBase(unsigned char)>:
c001d6e4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001d6e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6ed:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001d6f5:	c3                   	ret    

c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001d6f6:	55                   	push   ebp
c001d6f7:	57                   	push   edi
c001d6f8:	56                   	push   esi
c001d6f9:	53                   	push   ebx
c001d6fa:	83 ec 1c             	sub    esp,0x1c
c001d6fd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d701:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d705:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001d708:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d70c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d710:	80 f9 03             	cmp    cl,0x3
c001d713:	77 51                	ja     c001d766 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001d715:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d719:	0f b6 f2             	movzx  esi,dl
c001d71c:	0f b6 db             	movzx  ebx,bl
c001d71f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d722:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001d726:	83 ca 80             	or     edx,0xffffff80
c001d729:	0f b6 d2             	movzx  edx,dl
c001d72c:	52                   	push   edx
c001d72d:	6a 0c                	push   0xc
c001d72f:	56                   	push   esi
c001d730:	57                   	push   edi
c001d731:	e8 c0 ff ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d736:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001d73b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d73f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001d743:	ee                   	out    dx,al
c001d744:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001d749:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001d74d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001d751:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d755:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d75d:	83 c4 2c             	add    esp,0x2c
c001d760:	5b                   	pop    ebx
c001d761:	5e                   	pop    esi
c001d762:	5f                   	pop    edi
c001d763:	5d                   	pop    ebp
c001d764:	eb 90                	jmp    c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d766:	80 fb 07             	cmp    bl,0x7
c001d769:	77 12                	ja     c001d77d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001d76b:	0f b6 d2             	movzx  edx,dl
c001d76e:	0f b6 db             	movzx  ebx,bl
c001d771:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001d779:	89 da                	mov    edx,ebx
c001d77b:	eb 2f                	jmp    c001d7ac <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d77d:	80 fb 0d             	cmp    bl,0xd
c001d780:	77 13                	ja     c001d795 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001d782:	0f b6 d2             	movzx  edx,dl
c001d785:	0f b6 db             	movzx  ebx,bl
c001d788:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001d78f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001d793:	eb 17                	jmp    c001d7ac <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d795:	80 fb 15             	cmp    bl,0x15
c001d798:	77 13                	ja     c001d7ad <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d79a:	0f b6 d2             	movzx  edx,dl
c001d79d:	0f b6 db             	movzx  ebx,bl
c001d7a0:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001d7a8:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001d7ac:	ee                   	out    dx,al
c001d7ad:	83 c4 1c             	add    esp,0x1c
c001d7b0:	5b                   	pop    ebx
c001d7b1:	5e                   	pop    esi
c001d7b2:	5f                   	pop    edi
c001d7b3:	5d                   	pop    ebp
c001d7b4:	c3                   	ret    
c001d7b5:	90                   	nop

c001d7b6 <IDE::read(unsigned char, unsigned char)>:
c001d7b6:	55                   	push   ebp
c001d7b7:	57                   	push   edi
c001d7b8:	56                   	push   esi
c001d7b9:	53                   	push   ebx
c001d7ba:	83 ec 1c             	sub    esp,0x1c
c001d7bd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d7c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d7c5:	8d 43 f8             	lea    eax,[ebx-0x8]
c001d7c8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d7cc:	3c 03                	cmp    al,0x3
c001d7ce:	77 43                	ja     c001d813 <IDE::read(unsigned char, unsigned char)+0x5d>
c001d7d0:	0f b6 f2             	movzx  esi,dl
c001d7d3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d7d6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001d7da:	83 c8 80             	or     eax,0xffffff80
c001d7dd:	0f b6 c0             	movzx  eax,al
c001d7e0:	50                   	push   eax
c001d7e1:	6a 0c                	push   0xc
c001d7e3:	56                   	push   esi
c001d7e4:	57                   	push   edi
c001d7e5:	e8 0c ff ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7ea:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001d7ef:	0f b6 c3             	movzx  eax,bl
c001d7f2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001d7f6:	ec                   	in     al,dx
c001d7f7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d7fb:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001d800:	52                   	push   edx
c001d801:	6a 0c                	push   0xc
c001d803:	56                   	push   esi
c001d804:	57                   	push   edi
c001d805:	e8 ec fe ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d80a:	83 c4 20             	add    esp,0x20
c001d80d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d811:	eb 49                	jmp    c001d85c <IDE::read(unsigned char, unsigned char)+0xa6>
c001d813:	80 fb 07             	cmp    bl,0x7
c001d816:	77 12                	ja     c001d82a <IDE::read(unsigned char, unsigned char)+0x74>
c001d818:	0f b6 d2             	movzx  edx,dl
c001d81b:	0f b6 c3             	movzx  eax,bl
c001d81e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001d826:	89 c2                	mov    edx,eax
c001d828:	eb 31                	jmp    c001d85b <IDE::read(unsigned char, unsigned char)+0xa5>
c001d82a:	80 fb 0d             	cmp    bl,0xd
c001d82d:	77 13                	ja     c001d842 <IDE::read(unsigned char, unsigned char)+0x8c>
c001d82f:	0f b6 d2             	movzx  edx,dl
c001d832:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001d839:	0f b6 d3             	movzx  edx,bl
c001d83c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d840:	eb 19                	jmp    c001d85b <IDE::read(unsigned char, unsigned char)+0xa5>
c001d842:	31 c0                	xor    eax,eax
c001d844:	80 fb 15             	cmp    bl,0x15
c001d847:	77 13                	ja     c001d85c <IDE::read(unsigned char, unsigned char)+0xa6>
c001d849:	0f b6 d2             	movzx  edx,dl
c001d84c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001d854:	0f b6 d3             	movzx  edx,bl
c001d857:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d85b:	ec                   	in     al,dx
c001d85c:	83 c4 1c             	add    esp,0x1c
c001d85f:	5b                   	pop    ebx
c001d860:	5e                   	pop    esi
c001d861:	5f                   	pop    edi
c001d862:	5d                   	pop    ebp
c001d863:	c3                   	ret    

c001d864 <IDE::waitInterrupt(unsigned char)>:
c001d864:	55                   	push   ebp
c001d865:	57                   	push   edi
c001d866:	56                   	push   esi
c001d867:	53                   	push   ebx
c001d868:	31 db                	xor    ebx,ebx
c001d86a:	83 ec 0c             	sub    esp,0xc
c001d86d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d871:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001d876:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001d87e:	89 e8                	mov    eax,ebp
c001d880:	84 c0                	test   al,al
c001d882:	75 34                	jne    c001d8b8 <IDE::waitInterrupt(unsigned char)+0x54>
c001d884:	52                   	push   edx
c001d885:	6a 0c                	push   0xc
c001d887:	56                   	push   esi
c001d888:	57                   	push   edi
c001d889:	e8 28 ff ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001d88e:	83 c4 10             	add    esp,0x10
c001d891:	a8 01                	test   al,0x1
c001d893:	75 2b                	jne    c001d8c0 <IDE::waitInterrupt(unsigned char)+0x5c>
c001d895:	f6 c3 04             	test   bl,0x4
c001d898:	75 16                	jne    c001d8b0 <IDE::waitInterrupt(unsigned char)+0x4c>
c001d89a:	83 fb 32             	cmp    ebx,0x32
c001d89d:	7e 11                	jle    c001d8b0 <IDE::waitInterrupt(unsigned char)+0x4c>
c001d89f:	50                   	push   eax
c001d8a0:	50                   	push   eax
c001d8a1:	6a 00                	push   0x0
c001d8a3:	68 80 96 98 00       	push   0x989680
c001d8a8:	e8 57 a9 ff ff       	call   c0018204 <nanoSleep(unsigned long long)>
c001d8ad:	83 c4 10             	add    esp,0x10
c001d8b0:	83 fb 3c             	cmp    ebx,0x3c
c001d8b3:	74 0b                	je     c001d8c0 <IDE::waitInterrupt(unsigned char)+0x5c>
c001d8b5:	43                   	inc    ebx
c001d8b6:	eb be                	jmp    c001d876 <IDE::waitInterrupt(unsigned char)+0x12>
c001d8b8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001d8c0:	83 c4 0c             	add    esp,0xc
c001d8c3:	89 e8                	mov    eax,ebp
c001d8c5:	5b                   	pop    ebx
c001d8c6:	5e                   	pop    esi
c001d8c7:	5f                   	pop    edi
c001d8c8:	5d                   	pop    ebp
c001d8c9:	c3                   	ret    

c001d8ca <ideChannel0IRQHandler(regs*, void*)>:
c001d8ca:	83 ec 10             	sub    esp,0x10
c001d8cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8d1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001d8d8:	6a 07                	push   0x7
c001d8da:	6a 00                	push   0x0
c001d8dc:	50                   	push   eax
c001d8dd:	e8 d4 fe ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001d8e2:	83 c4 1c             	add    esp,0x1c
c001d8e5:	c3                   	ret    

c001d8e6 <ideChannel1IRQHandler(regs*, void*)>:
c001d8e6:	83 ec 10             	sub    esp,0x10
c001d8e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8ed:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001d8f4:	6a 07                	push   0x7
c001d8f6:	6a 01                	push   0x1
c001d8f8:	50                   	push   eax
c001d8f9:	e8 b8 fe ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001d8fe:	83 c4 1c             	add    esp,0x1c
c001d901:	c3                   	ret    

c001d902 <IDE::enableIRQs(unsigned char, bool)>:
c001d902:	57                   	push   edi
c001d903:	56                   	push   esi
c001d904:	be 04 00 00 00       	mov    esi,0x4
c001d909:	53                   	push   ebx
c001d90a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001d90f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d913:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001d918:	0f 94 c0             	sete   al
c001d91b:	d1 e0                	shl    eax,1
c001d91d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001d924:	0f b6 c0             	movzx  eax,al
c001d927:	50                   	push   eax
c001d928:	6a 0c                	push   0xc
c001d92a:	57                   	push   edi
c001d92b:	53                   	push   ebx
c001d92c:	e8 c5 fd ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d931:	83 c4 10             	add    esp,0x10
c001d934:	50                   	push   eax
c001d935:	6a 0c                	push   0xc
c001d937:	57                   	push   edi
c001d938:	53                   	push   ebx
c001d939:	e8 78 fe ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001d93e:	83 c4 10             	add    esp,0x10
c001d941:	4e                   	dec    esi
c001d942:	75 f0                	jne    c001d934 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001d944:	5b                   	pop    ebx
c001d945:	5e                   	pop    esi
c001d946:	5f                   	pop    edi
c001d947:	c3                   	ret    

c001d948 <IDE::open(int, int, void*)>:
c001d948:	55                   	push   ebp
c001d949:	57                   	push   edi
c001d94a:	56                   	push   esi
c001d94b:	53                   	push   ebx
c001d94c:	83 ec 1c             	sub    esp,0x1c
c001d94f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d953:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001d95c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001d965:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001d96c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001d973:	0f 85 b0 02 00 00    	jne    c001dc29 <IDE::open(int, int, void*)+0x2e1>
c001d979:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001d97f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001d983:	83 e0 7f             	and    eax,0x7f
c001d986:	3c 05                	cmp    al,0x5
c001d988:	74 04                	je     c001d98e <IDE::open(int, int, void*)+0x46>
c001d98a:	3c 0f                	cmp    al,0xf
c001d98c:	75 32                	jne    c001d9c0 <IDE::open(int, int, void*)+0x78>
c001d98e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001d994:	83 e0 fc             	and    eax,0xfffffffc
c001d997:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d99e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001d9a4:	83 e0 fc             	and    eax,0xfffffffc
c001d9a7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d9ae:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001d9b4:	83 e0 fc             	and    eax,0xfffffffc
c001d9b7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d9be:	eb 14                	jmp    c001d9d4 <IDE::open(int, int, void*)+0x8c>
c001d9c0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001d9ca:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001d9d4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001d9db:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001d9e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d9e6:	89 c6                	mov    esi,eax
c001d9e8:	bf f8 0c 00 00       	mov    edi,0xcf8
c001d9ed:	c1 e6 10             	shl    esi,0x10
c001d9f0:	89 e8                	mov    eax,ebp
c001d9f2:	89 fa                	mov    edx,edi
c001d9f4:	c1 e0 0b             	shl    eax,0xb
c001d9f7:	09 f0                	or     eax,esi
c001d9f9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001da00:	c1 e6 08             	shl    esi,0x8
c001da03:	09 c6                	or     esi,eax
c001da05:	89 f0                	mov    eax,esi
c001da07:	0d 08 00 00 80       	or     eax,0x80000008
c001da0c:	ef                   	out    dx,eax
c001da0d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001da12:	89 ca                	mov    edx,ecx
c001da14:	ed                   	in     eax,dx
c001da15:	c1 e8 10             	shr    eax,0x10
c001da18:	3d ff ff 00 00       	cmp    eax,0xffff
c001da1d:	0f 84 f5 00 00 00    	je     c001db18 <IDE::open(int, int, void*)+0x1d0>
c001da23:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001da29:	89 fa                	mov    edx,edi
c001da2b:	89 f0                	mov    eax,esi
c001da2d:	ef                   	out    dx,eax
c001da2e:	b0 fe                	mov    al,0xfe
c001da30:	89 ca                	mov    edx,ecx
c001da32:	ee                   	out    dx,al
c001da33:	89 f0                	mov    eax,esi
c001da35:	89 fa                	mov    edx,edi
c001da37:	ef                   	out    dx,eax
c001da38:	89 ca                	mov    edx,ecx
c001da3a:	ed                   	in     eax,dx
c001da3b:	3c fe                	cmp    al,0xfe
c001da3d:	0f 85 a9 00 00 00    	jne    c001daec <IDE::open(int, int, void*)+0x1a4>
c001da43:	8b 15 28 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026428
c001da49:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001da50:	74 33                	je     c001da85 <IDE::open(int, int, void*)+0x13d>
c001da52:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001da58:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001da5c:	40                   	inc    eax
c001da5d:	83 ec 0c             	sub    esp,0xc
c001da60:	0f b6 c0             	movzx  eax,al
c001da63:	50                   	push   eax
c001da64:	55                   	push   ebp
c001da65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001da69:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001da6f:	51                   	push   ecx
c001da70:	e8 cb 43 ff ff       	call   c0011e40 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001da75:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001da7a:	83 c4 1c             	add    esp,0x1c
c001da7d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001da83:	eb 0a                	jmp    c001da8f <IDE::open(int, int, void*)+0x147>
c001da85:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001da8f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001da96:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001da9d:	c1 e1 10             	shl    ecx,0x10
c001daa0:	c1 e0 08             	shl    eax,0x8
c001daa3:	bf f8 0c 00 00       	mov    edi,0xcf8
c001daa8:	09 c1                	or     ecx,eax
c001daaa:	89 fa                	mov    edx,edi
c001daac:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001dab3:	c1 e0 0b             	shl    eax,0xb
c001dab6:	09 c1                	or     ecx,eax
c001dab8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001dabe:	89 c8                	mov    eax,ecx
c001dac0:	ef                   	out    dx,eax
c001dac1:	be fc 0c 00 00       	mov    esi,0xcfc
c001dac6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001dacc:	89 f2                	mov    edx,esi
c001dace:	ee                   	out    dx,al
c001dacf:	89 c8                	mov    eax,ecx
c001dad1:	89 fa                	mov    edx,edi
c001dad3:	ef                   	out    dx,eax
c001dad4:	89 f2                	mov    edx,esi
c001dad6:	ed                   	in     eax,dx
c001dad7:	0f b6 c0             	movzx  eax,al
c001dada:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001dae0:	74 46                	je     c001db28 <IDE::open(int, int, void*)+0x1e0>
c001dae2:	83 ec 0c             	sub    esp,0xc
c001dae5:	68 e4 4f 02 c0       	push   0xc0024fe4
c001daea:	eb 34                	jmp    c001db20 <IDE::open(int, int, void*)+0x1d8>
c001daec:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001daf5:	75 17                	jne    c001db0e <IDE::open(int, int, void*)+0x1c6>
c001daf7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001dafc:	74 07                	je     c001db05 <IDE::open(int, int, void*)+0x1bd>
c001dafe:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001db03:	75 09                	jne    c001db0e <IDE::open(int, int, void*)+0x1c6>
c001db05:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001db0c:	eb 1a                	jmp    c001db28 <IDE::open(int, int, void*)+0x1e0>
c001db0e:	83 ec 0c             	sub    esp,0xc
c001db11:	68 ec 4f 02 c0       	push   0xc0024fec
c001db16:	eb 08                	jmp    c001db20 <IDE::open(int, int, void*)+0x1d8>
c001db18:	83 ec 0c             	sub    esp,0xc
c001db1b:	68 1d 50 02 c0       	push   0xc002501d
c001db20:	e8 e4 67 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001db25:	83 c4 10             	add    esp,0x10
c001db28:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001db2f:	79 1a                	jns    c001db4b <IDE::open(int, int, void*)+0x203>
c001db31:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001db37:	83 e0 fc             	and    eax,0xfffffffc
c001db3a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001db41:	83 c0 08             	add    eax,0x8
c001db44:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001db4b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001db51:	89 c2                	mov    edx,eax
c001db53:	83 e2 0f             	and    edx,0xf
c001db56:	66 83 fa 08          	cmp    dx,0x8
c001db5a:	75 0a                	jne    c001db66 <IDE::open(int, int, void*)+0x21e>
c001db5c:	83 e8 02             	sub    eax,0x2
c001db5f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001db66:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001db6c:	89 c2                	mov    edx,eax
c001db6e:	83 e2 0f             	and    edx,0xf
c001db71:	66 83 fa 08          	cmp    dx,0x8
c001db75:	75 0a                	jne    c001db81 <IDE::open(int, int, void*)+0x239>
c001db77:	83 e8 02             	sub    eax,0x2
c001db7a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001db81:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001db88:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001db8f:	89 d0                	mov    eax,edx
c001db91:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001db94:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001db98:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001db9c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001db9f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dba4:	0f b6 c9             	movzx  ecx,cl
c001dba7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001dbae:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dbb1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dbb5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001dbb9:	8d 50 02             	lea    edx,[eax+0x2]
c001dbbc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001dbc1:	0f b6 d2             	movzx  edx,dl
c001dbc4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001dbca:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dbcd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dbd1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001dbd5:	8d 48 03             	lea    ecx,[eax+0x3]
c001dbd8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dbdd:	0f b6 c9             	movzx  ecx,cl
c001dbe0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001dbe6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dbe9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dbed:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001dbf1:	8d 50 04             	lea    edx,[eax+0x4]
c001dbf4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001dbfa:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001dbff:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001dc06:	66 85 f6             	test   si,si
c001dc09:	74 5b                	je     c001dc66 <IDE::open(int, int, void*)+0x31e>
c001dc0b:	0f b6 d2             	movzx  edx,dl
c001dc0e:	83 c0 05             	add    eax,0x5
c001dc11:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dc14:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dc18:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001dc1c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001dc22:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dc27:	eb 3d                	jmp    c001dc66 <IDE::open(int, int, void*)+0x31e>
c001dc29:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001dc2f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001dc36:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001dc3d:	66 05 06 02          	add    ax,0x206
c001dc41:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dc48:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001dc4f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001dc56:	66 05 06 02          	add    ax,0x206
c001dc5a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dc61:	e9 e5 fe ff ff       	jmp    c001db4b <IDE::open(int, int, void*)+0x203>
c001dc66:	50                   	push   eax
c001dc67:	50                   	push   eax
c001dc68:	6a 00                	push   0x0
c001dc6a:	53                   	push   ebx
c001dc6b:	e8 60 fa ff ff       	call   c001d6d0 <IDE::prepareInterrupt(unsigned char)>
c001dc70:	5a                   	pop    edx
c001dc71:	59                   	pop    ecx
c001dc72:	6a 01                	push   0x1
c001dc74:	53                   	push   ebx
c001dc75:	e8 56 fa ff ff       	call   c001d6d0 <IDE::prepareInterrupt(unsigned char)>
c001dc7a:	83 c4 0c             	add    esp,0xc
c001dc7d:	6a 00                	push   0x0
c001dc7f:	6a 00                	push   0x0
c001dc81:	53                   	push   ebx
c001dc82:	e8 7b fc ff ff       	call   c001d902 <IDE::enableIRQs(unsigned char, bool)>
c001dc87:	83 c4 0c             	add    esp,0xc
c001dc8a:	6a 00                	push   0x0
c001dc8c:	6a 01                	push   0x1
c001dc8e:	53                   	push   ebx
c001dc8f:	e8 6e fc ff ff       	call   c001d902 <IDE::enableIRQs(unsigned char, bool)>
c001dc94:	83 c4 10             	add    esp,0x10
c001dc97:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001dc9e:	74 34                	je     c001dcd4 <IDE::open(int, int, void*)+0x38c>
c001dca0:	83 ec 0c             	sub    esp,0xc
c001dca3:	53                   	push   ebx
c001dca4:	6a 01                	push   0x1
c001dca6:	68 ca d8 01 c0       	push   0xc001d8ca
c001dcab:	6a 0e                	push   0xe
c001dcad:	53                   	push   ebx
c001dcae:	e8 3b 01 ff ff       	call   c000ddee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dcb3:	83 c4 14             	add    esp,0x14
c001dcb6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001dcbc:	53                   	push   ebx
c001dcbd:	6a 01                	push   0x1
c001dcbf:	68 e6 d8 01 c0       	push   0xc001d8e6
c001dcc4:	6a 0f                	push   0xf
c001dcc6:	53                   	push   ebx
c001dcc7:	e8 22 01 ff ff       	call   c000ddee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dccc:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001dcd2:	eb 38                	jmp    c001dd0c <IDE::open(int, int, void*)+0x3c4>
c001dcd4:	83 ec 0c             	sub    esp,0xc
c001dcd7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001dce1:	53                   	push   ebx
c001dce2:	6a 00                	push   0x0
c001dce4:	68 ca d8 01 c0       	push   0xc001d8ca
c001dce9:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001dcef:	53                   	push   ebx
c001dcf0:	e8 f9 00 ff ff       	call   c000ddee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dcf5:	83 c4 14             	add    esp,0x14
c001dcf8:	53                   	push   ebx
c001dcf9:	6a 00                	push   0x0
c001dcfb:	68 e6 d8 01 c0       	push   0xc001d8e6
c001dd00:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001dd06:	53                   	push   ebx
c001dd07:	e8 e2 00 ff ff       	call   c000ddee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dd0e:	83 c4 20             	add    esp,0x20
c001dd11:	83 ec 0c             	sub    esp,0xc
c001dd14:	53                   	push   ebx
c001dd15:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001dd18:	83 c4 0c             	add    esp,0xc
c001dd1b:	6a 07                	push   0x7
c001dd1d:	6a 00                	push   0x0
c001dd1f:	53                   	push   ebx
c001dd20:	e8 91 fa ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001dd25:	83 c4 0c             	add    esp,0xc
c001dd28:	6a 07                	push   0x7
c001dd2a:	6a 01                	push   0x1
c001dd2c:	53                   	push   ebx
c001dd2d:	e8 84 fa ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001dd32:	83 c4 0c             	add    esp,0xc
c001dd35:	6a 01                	push   0x1
c001dd37:	6a 00                	push   0x0
c001dd39:	53                   	push   ebx
c001dd3a:	e8 c3 fb ff ff       	call   c001d902 <IDE::enableIRQs(unsigned char, bool)>
c001dd3f:	83 c4 0c             	add    esp,0xc
c001dd42:	6a 01                	push   0x1
c001dd44:	6a 01                	push   0x1
c001dd46:	53                   	push   ebx
c001dd47:	e8 b6 fb ff ff       	call   c001d902 <IDE::enableIRQs(unsigned char, bool)>
c001dd4c:	83 c4 2c             	add    esp,0x2c
c001dd4f:	31 c0                	xor    eax,eax
c001dd51:	5b                   	pop    ebx
c001dd52:	5e                   	pop    esi
c001dd53:	5f                   	pop    edi
c001dd54:	5d                   	pop    ebp
c001dd55:	c3                   	ret    

c001dd56 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001dd56:	55                   	push   ebp
c001dd57:	57                   	push   edi
c001dd58:	56                   	push   esi
c001dd59:	53                   	push   ebx
c001dd5a:	83 ec 1c             	sub    esp,0x1c
c001dd5d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dd61:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dd65:	8d 50 f8             	lea    edx,[eax-0x8]
c001dd68:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dd6c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001dd70:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dd74:	80 fa 03             	cmp    dl,0x3
c001dd77:	77 5d                	ja     c001ddd6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001dd79:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dd7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd81:	0f b6 db             	movzx  ebx,bl
c001dd84:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001dd87:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001dd8b:	83 ca 80             	or     edx,0xffffff80
c001dd8e:	0f b6 d2             	movzx  edx,dl
c001dd91:	52                   	push   edx
c001dd92:	6a 0c                	push   0xc
c001dd94:	53                   	push   ebx
c001dd95:	56                   	push   esi
c001dd96:	e8 5b f9 ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd9b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001dda0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dda4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dda8:	0f b6 c0             	movzx  eax,al
c001ddab:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ddaf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ddb1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ddb6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ddba:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ddbe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ddc2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ddca:	83 c4 2c             	add    esp,0x2c
c001ddcd:	5b                   	pop    ebx
c001ddce:	5e                   	pop    esi
c001ddcf:	5f                   	pop    edi
c001ddd0:	5d                   	pop    ebp
c001ddd1:	e9 20 f9 ff ff       	jmp    c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddd6:	3c 07                	cmp    al,0x7
c001ddd8:	77 10                	ja     c001ddea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ddda:	0f b6 db             	movzx  ebx,bl
c001dddd:	0f b6 d0             	movzx  edx,al
c001dde0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001dde8:	eb 2d                	jmp    c001de17 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ddea:	3c 0d                	cmp    al,0xd
c001ddec:	77 13                	ja     c001de01 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ddee:	0f b6 db             	movzx  ebx,bl
c001ddf1:	0f b6 c0             	movzx  eax,al
c001ddf4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ddfb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ddff:	eb 16                	jmp    c001de17 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001de01:	3c 15                	cmp    al,0x15
c001de03:	77 14                	ja     c001de19 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001de05:	0f b6 db             	movzx  ebx,bl
c001de08:	0f b6 c0             	movzx  eax,al
c001de0b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001de13:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001de17:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001de19:	83 c4 1c             	add    esp,0x1c
c001de1c:	5b                   	pop    ebx
c001de1d:	5e                   	pop    esi
c001de1e:	5f                   	pop    edi
c001de1f:	5d                   	pop    ebp
c001de20:	c3                   	ret    
c001de21:	90                   	nop

c001de22 <IDE::detect()>:
c001de22:	55                   	push   ebp
c001de23:	57                   	push   edi
c001de24:	56                   	push   esi
c001de25:	53                   	push   ebx
c001de26:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001de2c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001de33:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001de3a:	0f 85 9d 02 00 00    	jne    c001e0dd <IDE::detect()+0x2bb>
c001de40:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001de47:	31 f6                	xor    esi,esi
c001de49:	31 ed                	xor    ebp,ebp
c001de4b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001de53:	89 e8                	mov    eax,ebp
c001de55:	c1 e0 06             	shl    eax,0x6
c001de58:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001de60:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001de64:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001de68:	c1 e0 04             	shl    eax,0x4
c001de6b:	83 c8 a0             	or     eax,0xffffffa0
c001de6e:	0f b6 c0             	movzx  eax,al
c001de71:	50                   	push   eax
c001de72:	6a 06                	push   0x6
c001de74:	56                   	push   esi
c001de75:	53                   	push   ebx
c001de76:	e8 7b f8 ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de7b:	83 c4 0c             	add    esp,0xc
c001de7e:	6a 0c                	push   0xc
c001de80:	56                   	push   esi
c001de81:	53                   	push   ebx
c001de82:	e8 2f f9 ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001de87:	83 c4 0c             	add    esp,0xc
c001de8a:	6a 0c                	push   0xc
c001de8c:	56                   	push   esi
c001de8d:	53                   	push   ebx
c001de8e:	e8 23 f9 ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001de93:	83 c4 0c             	add    esp,0xc
c001de96:	6a 0c                	push   0xc
c001de98:	56                   	push   esi
c001de99:	53                   	push   ebx
c001de9a:	e8 17 f9 ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001de9f:	83 c4 0c             	add    esp,0xc
c001dea2:	6a 0c                	push   0xc
c001dea4:	56                   	push   esi
c001dea5:	53                   	push   ebx
c001dea6:	e8 0b f9 ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001deab:	68 ec 00 00 00       	push   0xec
c001deb0:	6a 07                	push   0x7
c001deb2:	56                   	push   esi
c001deb3:	53                   	push   ebx
c001deb4:	e8 3d f8 ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001deb9:	83 c4 1c             	add    esp,0x1c
c001debc:	6a 0c                	push   0xc
c001debe:	56                   	push   esi
c001debf:	53                   	push   ebx
c001dec0:	e8 f1 f8 ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001dec5:	83 c4 0c             	add    esp,0xc
c001dec8:	6a 0c                	push   0xc
c001deca:	56                   	push   esi
c001decb:	53                   	push   ebx
c001decc:	e8 e5 f8 ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001ded1:	83 c4 0c             	add    esp,0xc
c001ded4:	6a 0c                	push   0xc
c001ded6:	56                   	push   esi
c001ded7:	53                   	push   ebx
c001ded8:	e8 d9 f8 ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001dedd:	83 c4 0c             	add    esp,0xc
c001dee0:	6a 0c                	push   0xc
c001dee2:	56                   	push   esi
c001dee3:	53                   	push   ebx
c001dee4:	e8 cd f8 ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001dee9:	83 c4 0c             	add    esp,0xc
c001deec:	6a 0c                	push   0xc
c001deee:	56                   	push   esi
c001deef:	53                   	push   ebx
c001def0:	e8 c1 f8 ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001def5:	83 c4 10             	add    esp,0x10
c001def8:	84 c0                	test   al,al
c001defa:	0f 84 63 01 00 00    	je     c001e063 <IDE::detect()+0x241>
c001df00:	31 ff                	xor    edi,edi
c001df02:	50                   	push   eax
c001df03:	6a 0c                	push   0xc
c001df05:	56                   	push   esi
c001df06:	53                   	push   ebx
c001df07:	e8 aa f8 ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001df0c:	83 c4 10             	add    esp,0x10
c001df0f:	a8 01                	test   al,0x1
c001df11:	0f 85 6d 01 00 00    	jne    c001e084 <IDE::detect()+0x262>
c001df17:	84 c0                	test   al,al
c001df19:	78 04                	js     c001df1f <IDE::detect()+0xfd>
c001df1b:	a8 08                	test   al,0x8
c001df1d:	75 27                	jne    c001df46 <IDE::detect()+0x124>
c001df1f:	47                   	inc    edi
c001df20:	81 ff 17 01 00 00    	cmp    edi,0x117
c001df26:	7e da                	jle    c001df02 <IDE::detect()+0xe0>
c001df28:	50                   	push   eax
c001df29:	50                   	push   eax
c001df2a:	6a 00                	push   0x0
c001df2c:	68 40 4b 4c 00       	push   0x4c4b40
c001df31:	e8 ce a2 ff ff       	call   c0018204 <nanoSleep(unsigned long long)>
c001df36:	83 c4 10             	add    esp,0x10
c001df39:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001df3f:	75 c1                	jne    c001df02 <IDE::detect()+0xe0>
c001df41:	e9 3e 01 00 00       	jmp    c001e084 <IDE::detect()+0x262>
c001df46:	31 c9                	xor    ecx,ecx
c001df48:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001df4c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001df50:	83 ec 0c             	sub    esp,0xc
c001df53:	68 80 00 00 00       	push   0x80
c001df58:	57                   	push   edi
c001df59:	6a 00                	push   0x0
c001df5b:	56                   	push   esi
c001df5c:	53                   	push   ebx
c001df5d:	e8 f4 fd ff ff       	call   c001dd56 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001df62:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001df67:	89 e8                	mov    eax,ebp
c001df69:	89 d1                	mov    ecx,edx
c001df6b:	c1 e0 06             	shl    eax,0x6
c001df6e:	01 d8                	add    eax,ebx
c001df70:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001df77:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001df7e:	89 f2                	mov    edx,esi
c001df80:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001df86:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001df8a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001df90:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001df94:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001df9b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001dfa3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001dfaa:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001dfb2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001dfb8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001dfbf:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001dfc5:	8d 54 24 58          	lea    edx,[esp+0x58]
c001dfc9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001dfcd:	83 c4 20             	add    esp,0x20
c001dfd0:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001dfd3:	83 c0 02             	add    eax,0x2
c001dfd6:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001dfdc:	83 c7 02             	add    edi,0x2
c001dfdf:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001dfe2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001dfe8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001dfec:	75 e2                	jne    c001dfd0 <IDE::detect()+0x1ae>
c001dfee:	89 e8                	mov    eax,ebp
c001dff0:	c1 e0 06             	shl    eax,0x6
c001dff3:	01 d8                	add    eax,ebx
c001dff5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001dffb:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001e002:	66 c1 ea 09          	shr    dx,0x9
c001e006:	83 e2 01             	and    edx,0x1
c001e009:	84 c9                	test   cl,cl
c001e00b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001e011:	75 22                	jne    c001e035 <IDE::detect()+0x213>
c001e013:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001e01a:	74 46                	je     c001e062 <IDE::detect()+0x240>
c001e01c:	83 ec 0c             	sub    esp,0xc
c001e01f:	68 7c 01 00 00       	push   0x17c
c001e024:	e8 9a b9 fe ff       	call   c00099c3 <malloc>
c001e029:	89 c7                	mov    edi,eax
c001e02b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e02e:	e8 15 05 00 00       	call   c001e548 <ATA::ATA()>
c001e033:	eb 17                	jmp    c001e04c <IDE::detect()+0x22a>
c001e035:	83 ec 0c             	sub    esp,0xc
c001e038:	68 80 01 00 00       	push   0x180
c001e03d:	e8 81 b9 fe ff       	call   c00099c3 <malloc>
c001e042:	89 c7                	mov    edi,eax
c001e044:	89 04 24             	mov    DWORD PTR [esp],eax
c001e047:	e8 88 0b 00 00       	call   c001ebd4 <ATAPI::ATAPI()>
c001e04c:	5a                   	pop    edx
c001e04d:	59                   	pop    ecx
c001e04e:	57                   	push   edi
c001e04f:	53                   	push   ebx
c001e050:	e8 21 fe fe ff       	call   c000de76 <Device::addChild(Device*)>
c001e055:	8b 07                	mov    eax,DWORD PTR [edi]
c001e057:	53                   	push   ebx
c001e058:	55                   	push   ebp
c001e059:	6a 00                	push   0x0
c001e05b:	57                   	push   edi
c001e05c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e05f:	83 c4 20             	add    esp,0x20
c001e062:	45                   	inc    ebp
c001e063:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001e068:	74 0d                	je     c001e077 <IDE::detect()+0x255>
c001e06a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001e072:	e9 dc fd ff ff       	jmp    c001de53 <IDE::detect()+0x31>
c001e077:	4e                   	dec    esi
c001e078:	74 63                	je     c001e0dd <IDE::detect()+0x2bb>
c001e07a:	be 01 00 00 00       	mov    esi,0x1
c001e07f:	e9 c7 fd ff ff       	jmp    c001de4b <IDE::detect()+0x29>
c001e084:	50                   	push   eax
c001e085:	6a 04                	push   0x4
c001e087:	56                   	push   esi
c001e088:	53                   	push   ebx
c001e089:	e8 28 f7 ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001e08e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e092:	83 c4 0c             	add    esp,0xc
c001e095:	6a 05                	push   0x5
c001e097:	56                   	push   esi
c001e098:	53                   	push   ebx
c001e099:	e8 18 f7 ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001e09e:	83 c4 10             	add    esp,0x10
c001e0a1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001e0a5:	80 fa 14             	cmp    dl,0x14
c001e0a8:	75 04                	jne    c001e0ae <IDE::detect()+0x28c>
c001e0aa:	3c eb                	cmp    al,0xeb
c001e0ac:	eb 07                	jmp    c001e0b5 <IDE::detect()+0x293>
c001e0ae:	3c 96                	cmp    al,0x96
c001e0b0:	75 b1                	jne    c001e063 <IDE::detect()+0x241>
c001e0b2:	80 fa 69             	cmp    dl,0x69
c001e0b5:	75 ac                	jne    c001e063 <IDE::detect()+0x241>
c001e0b7:	68 a1 00 00 00       	push   0xa1
c001e0bc:	6a 07                	push   0x7
c001e0be:	56                   	push   esi
c001e0bf:	53                   	push   ebx
c001e0c0:	e8 31 f6 ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0c5:	5f                   	pop    edi
c001e0c6:	58                   	pop    eax
c001e0c7:	6a 00                	push   0x0
c001e0c9:	68 40 42 0f 00       	push   0xf4240
c001e0ce:	e8 31 a1 ff ff       	call   c0018204 <nanoSleep(unsigned long long)>
c001e0d3:	83 c4 10             	add    esp,0x10
c001e0d6:	b1 01                	mov    cl,0x1
c001e0d8:	e9 6b fe ff ff       	jmp    c001df48 <IDE::detect()+0x126>
c001e0dd:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e0e3:	5b                   	pop    ebx
c001e0e4:	5e                   	pop    esi
c001e0e5:	5f                   	pop    edi
c001e0e6:	5d                   	pop    ebp
c001e0e7:	c3                   	ret    

c001e0e8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e0e8:	55                   	push   ebp
c001e0e9:	57                   	push   edi
c001e0ea:	56                   	push   esi
c001e0eb:	53                   	push   ebx
c001e0ec:	83 ec 1c             	sub    esp,0x1c
c001e0ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e0f3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e0f7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e0fb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e0ff:	88 c3                	mov    bl,al
c001e101:	84 c0                	test   al,al
c001e103:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e107:	0f 84 81 00 00 00    	je     c001e18e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e10d:	83 ec 0c             	sub    esp,0xc
c001e110:	68 47 50 02 c0       	push   0xc0025047
c001e115:	e8 0e e9 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001e11a:	83 c4 10             	add    esp,0x10
c001e11d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e121:	3c 01                	cmp    al,0x1
c001e123:	74 63                	je     c001e188 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001e125:	3c 02                	cmp    al,0x2
c001e127:	75 53                	jne    c001e17c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e129:	d1 e6                	shl    esi,1
c001e12b:	09 ee                	or     esi,ebp
c001e12d:	50                   	push   eax
c001e12e:	89 f0                	mov    eax,esi
c001e130:	6a 01                	push   0x1
c001e132:	0f b6 f0             	movzx  esi,al
c001e135:	c1 e6 06             	shl    esi,0x6
c001e138:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001e140:	50                   	push   eax
c001e141:	57                   	push   edi
c001e142:	e8 6f f6 ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001e147:	83 c4 10             	add    esp,0x10
c001e14a:	a8 01                	test   al,0x1
c001e14c:	74 02                	je     c001e150 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001e14e:	b3 07                	mov    bl,0x7
c001e150:	a8 02                	test   al,0x2
c001e152:	74 02                	je     c001e156 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001e154:	b3 03                	mov    bl,0x3
c001e156:	a8 04                	test   al,0x4
c001e158:	74 02                	je     c001e15c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001e15a:	b3 14                	mov    bl,0x14
c001e15c:	a8 08                	test   al,0x8
c001e15e:	74 02                	je     c001e162 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001e160:	b3 03                	mov    bl,0x3
c001e162:	a8 10                	test   al,0x10
c001e164:	74 02                	je     c001e168 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001e166:	b3 15                	mov    bl,0x15
c001e168:	a8 20                	test   al,0x20
c001e16a:	74 02                	je     c001e16e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001e16c:	b3 03                	mov    bl,0x3
c001e16e:	a8 40                	test   al,0x40
c001e170:	74 02                	je     c001e174 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001e172:	b3 16                	mov    bl,0x16
c001e174:	84 c0                	test   al,al
c001e176:	79 16                	jns    c001e18e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e178:	b3 0d                	mov    bl,0xd
c001e17a:	eb 12                	jmp    c001e18e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e17c:	3c 03                	cmp    al,0x3
c001e17e:	74 0c                	je     c001e18c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001e180:	3c 04                	cmp    al,0x4
c001e182:	75 0a                	jne    c001e18e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e184:	b3 08                	mov    bl,0x8
c001e186:	eb 06                	jmp    c001e18e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e188:	b3 13                	mov    bl,0x13
c001e18a:	eb 02                	jmp    c001e18e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e18c:	b3 17                	mov    bl,0x17
c001e18e:	83 c4 1c             	add    esp,0x1c
c001e191:	88 d8                	mov    al,bl
c001e193:	5b                   	pop    ebx
c001e194:	5e                   	pop    esi
c001e195:	5f                   	pop    edi
c001e196:	5d                   	pop    ebp
c001e197:	c3                   	ret    

c001e198 <IDE::polling(unsigned char, unsigned int)>:
c001e198:	57                   	push   edi
c001e199:	56                   	push   esi
c001e19a:	53                   	push   ebx
c001e19b:	bb 04 00 00 00       	mov    ebx,0x4
c001e1a0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e1a4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e1a9:	52                   	push   edx
c001e1aa:	6a 0c                	push   0xc
c001e1ac:	56                   	push   esi
c001e1ad:	57                   	push   edi
c001e1ae:	e8 03 f6 ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001e1b3:	83 c4 10             	add    esp,0x10
c001e1b6:	4b                   	dec    ebx
c001e1b7:	75 f0                	jne    c001e1a9 <IDE::polling(unsigned char, unsigned int)+0x11>
c001e1b9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e1be:	50                   	push   eax
c001e1bf:	6a 0c                	push   0xc
c001e1c1:	56                   	push   esi
c001e1c2:	57                   	push   edi
c001e1c3:	e8 ee f5 ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001e1c8:	83 c4 10             	add    esp,0x10
c001e1cb:	a8 01                	test   al,0x1
c001e1cd:	75 17                	jne    c001e1e6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e1cf:	a8 20                	test   al,0x20
c001e1d1:	75 0f                	jne    c001e1e2 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e1d3:	4b                   	dec    ebx
c001e1d4:	74 10                	je     c001e1e6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e1d6:	84 c0                	test   al,al
c001e1d8:	78 e4                	js     c001e1be <IDE::polling(unsigned char, unsigned int)+0x26>
c001e1da:	a8 08                	test   al,0x8
c001e1dc:	74 e0                	je     c001e1be <IDE::polling(unsigned char, unsigned int)+0x26>
c001e1de:	31 c0                	xor    eax,eax
c001e1e0:	eb 06                	jmp    c001e1e8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001e1e2:	b0 01                	mov    al,0x1
c001e1e4:	eb 02                	jmp    c001e1e8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001e1e6:	b0 02                	mov    al,0x2
c001e1e8:	5b                   	pop    ebx
c001e1e9:	5e                   	pop    esi
c001e1ea:	5f                   	pop    edi
c001e1eb:	c3                   	ret    

c001e1ec <SATABus::close(int, int, void*)>:
c001e1ec:	31 c0                	xor    eax,eax
c001e1ee:	c3                   	ret    
c001e1ef:	90                   	nop

c001e1f0 <SATABus::detect()>:
c001e1f0:	c3                   	ret    
c001e1f1:	90                   	nop

c001e1f2 <SATABus::SATABus()>:
c001e1f2:	83 ec 0c             	sub    esp,0xc
c001e1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f9:	83 ec 08             	sub    esp,0x8
c001e1fc:	68 80 50 02 c0       	push   0xc0025080
c001e201:	50                   	push   eax
c001e202:	e8 1d 00 ff ff       	call   c000e224 <HardDiskController::HardDiskController(char const*)>
c001e207:	83 c4 10             	add    esp,0x10
c001e20a:	ba d4 50 02 c0       	mov    edx,0xc00250d4
c001e20f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e213:	89 10                	mov    DWORD PTR [eax],edx
c001e215:	83 ec 0c             	sub    esp,0xc
c001e218:	6a 50                	push   0x50
c001e21a:	e8 98 bc fe ff       	call   c0009eb7 <Phys::allocateContiguousPages(int)>
c001e21f:	83 c4 10             	add    esp,0x10
c001e222:	89 c2                	mov    edx,eax
c001e224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e228:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e22e:	83 ec 0c             	sub    esp,0xc
c001e231:	6a 50                	push   0x50
c001e233:	e8 15 d4 fe ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c001e238:	83 c4 10             	add    esp,0x10
c001e23b:	89 c2                	mov    edx,eax
c001e23d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e241:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e247:	a1 90 65 02 c0       	mov    eax,ds:0xc0026590
c001e24c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e250:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e256:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e25a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e260:	83 ec 0c             	sub    esp,0xc
c001e263:	6a 03                	push   0x3
c001e265:	6a 50                	push   0x50
c001e267:	51                   	push   ecx
c001e268:	52                   	push   edx
c001e269:	50                   	push   eax
c001e26a:	e8 7b dd fe ff       	call   c000bfea <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e26f:	83 c4 20             	add    esp,0x20
c001e272:	90                   	nop
c001e273:	83 c4 0c             	add    esp,0xc
c001e276:	c3                   	ret    
c001e277:	90                   	nop

c001e278 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e278:	83 ec 0c             	sub    esp,0xc
c001e27b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e27f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e282:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e285:	09 c2                	or     edx,eax
c001e287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e28b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e291:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e293:	31 c0                	xor    eax,eax
c001e295:	c1 e9 08             	shr    ecx,0x8
c001e298:	83 e1 0f             	and    ecx,0xf
c001e29b:	39 c8                	cmp    eax,ecx
c001e29d:	74 0a                	je     c001e2a9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e29f:	f6 c2 01             	test   dl,0x1
c001e2a2:	74 18                	je     c001e2bc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c001e2a4:	d1 ea                	shr    edx,1
c001e2a6:	40                   	inc    eax
c001e2a7:	eb f2                	jmp    c001e29b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c001e2a9:	83 ec 0c             	sub    esp,0xc
c001e2ac:	68 a4 50 02 c0       	push   0xc00250a4
c001e2b1:	e8 53 60 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001e2b6:	83 c4 10             	add    esp,0x10
c001e2b9:	83 c8 ff             	or     eax,0xffffffff
c001e2bc:	83 c4 0c             	add    esp,0xc
c001e2bf:	c3                   	ret    

c001e2c0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e2c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e2c4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e2c7:	89 c2                	mov    edx,eax
c001e2c9:	c1 ea 08             	shr    edx,0x8
c001e2cc:	83 e2 0f             	and    edx,0xf
c001e2cf:	fe ca                	dec    dl
c001e2d1:	75 31                	jne    c001e304 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e2d3:	83 e0 0f             	and    eax,0xf
c001e2d6:	3c 03                	cmp    al,0x3
c001e2d8:	75 2a                	jne    c001e304 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e2da:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e2dd:	b8 02 00 00 00       	mov    eax,0x2
c001e2e2:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e2e8:	74 1c                	je     c001e306 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e2ea:	b8 04 00 00 00       	mov    eax,0x4
c001e2ef:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e2f5:	74 0f                	je     c001e306 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e2f7:	31 c0                	xor    eax,eax
c001e2f9:	83 fa 03             	cmp    edx,0x3
c001e2fc:	0f 94 c0             	sete   al
c001e2ff:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e303:	c3                   	ret    
c001e304:	31 c0                	xor    eax,eax
c001e306:	c3                   	ret    
c001e307:	90                   	nop

c001e308 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e308:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e30c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e30f:	0f ba e2 0f          	bt     edx,0xf
c001e313:	72 f7                	jb     c001e30c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e315:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e318:	83 ca 10             	or     edx,0x10
c001e31b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e31e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e321:	83 ca 01             	or     edx,0x1
c001e324:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e327:	c3                   	ret    

c001e328 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e328:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e32c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e32f:	83 e2 fe             	and    edx,0xfffffffe
c001e332:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e335:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e338:	83 e2 ef             	and    edx,0xffffffef
c001e33b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e33e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e341:	0f ba e2 0e          	bt     edx,0xe
c001e345:	72 f7                	jb     c001e33e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e347:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e34a:	0f ba e2 0f          	bt     edx,0xf
c001e34e:	72 ee                	jb     c001e33e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e350:	c3                   	ret    
c001e351:	90                   	nop

c001e352 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e352:	55                   	push   ebp
c001e353:	57                   	push   edi
c001e354:	56                   	push   esi
c001e355:	53                   	push   ebx
c001e356:	83 ec 1c             	sub    esp,0x1c
c001e359:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e35d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e361:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e365:	53                   	push   ebx
c001e366:	89 fd                	mov    ebp,edi
c001e368:	56                   	push   esi
c001e369:	c1 e5 0a             	shl    ebp,0xa
c001e36c:	e8 b7 ff ff ff       	call   c001e328 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e371:	83 ec 0c             	sub    esp,0xc
c001e374:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e37a:	01 e8                	add    eax,ebp
c001e37c:	89 03                	mov    DWORD PTR [ebx],eax
c001e37e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e380:	68 00 04 00 00       	push   0x400
c001e385:	6a 00                	push   0x0
c001e387:	50                   	push   eax
c001e388:	e8 f7 22 fe ff       	call   c0000684 <memset>
c001e38d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e393:	89 fa                	mov    edx,edi
c001e395:	01 e8                	add    eax,ebp
c001e397:	c1 e7 0d             	shl    edi,0xd
c001e39a:	89 03                	mov    DWORD PTR [ebx],eax
c001e39c:	c1 e2 08             	shl    edx,0x8
c001e39f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e3a6:	81 c2 00 80 00 00    	add    edx,0x8000
c001e3ac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e3b0:	89 d0                	mov    eax,edx
c001e3b2:	83 c4 1c             	add    esp,0x1c
c001e3b5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e3bb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e3be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e3c1:	68 00 01 00 00       	push   0x100
c001e3c6:	6a 00                	push   0x0
c001e3c8:	50                   	push   eax
c001e3c9:	e8 b6 22 fe ff       	call   c0000684 <memset>
c001e3ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e3d2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e3d8:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001e3de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e3e2:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e3e5:	83 c4 10             	add    esp,0x10
c001e3e8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e3ef:	31 ff                	xor    edi,edi
c001e3f1:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e3f7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e3fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e401:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e407:	83 c5 20             	add    ebp,0x20
c001e40a:	01 f8                	add    eax,edi
c001e40c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e40f:	52                   	push   edx
c001e410:	68 00 01 00 00       	push   0x100
c001e415:	6a 00                	push   0x0
c001e417:	50                   	push   eax
c001e418:	e8 67 22 fe ff       	call   c0000684 <memset>
c001e41d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e421:	83 c4 10             	add    esp,0x10
c001e424:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e42a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e431:	01 f8                	add    eax,edi
c001e433:	81 c7 00 01 00 00    	add    edi,0x100
c001e439:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e43c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e442:	75 b3                	jne    c001e3f7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001e444:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001e448:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001e44c:	83 c4 1c             	add    esp,0x1c
c001e44f:	5b                   	pop    ebx
c001e450:	5e                   	pop    esi
c001e451:	5f                   	pop    edi
c001e452:	5d                   	pop    ebp
c001e453:	e9 b0 fe ff ff       	jmp    c001e308 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001e458 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e458:	55                   	push   ebp
c001e459:	57                   	push   edi
c001e45a:	56                   	push   esi
c001e45b:	53                   	push   ebx
c001e45c:	31 db                	xor    ebx,ebx
c001e45e:	83 ec 0c             	sub    esp,0xc
c001e461:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e465:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e469:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001e46c:	f7 c7 01 00 00 00    	test   edi,0x1
c001e472:	74 7a                	je     c001e4ee <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e474:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e478:	89 d8                	mov    eax,ebx
c001e47a:	c1 e0 07             	shl    eax,0x7
c001e47d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001e484:	55                   	push   ebp
c001e485:	56                   	push   esi
c001e486:	e8 35 fe ff ff       	call   c001e2c0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e48b:	5a                   	pop    edx
c001e48c:	83 f8 01             	cmp    eax,0x1
c001e48f:	59                   	pop    ecx
c001e490:	75 21                	jne    c001e4b3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001e492:	50                   	push   eax
c001e493:	53                   	push   ebx
c001e494:	55                   	push   ebp
c001e495:	56                   	push   esi
c001e496:	e8 b7 fe ff ff       	call   c001e352 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e49b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001e4a2:	e8 1c b5 fe ff       	call   c00099c3 <malloc>
c001e4a7:	89 c5                	mov    ebp,eax
c001e4a9:	89 04 24             	mov    DWORD PTR [esp],eax
c001e4ac:	e8 87 0d 00 00       	call   c001f238 <SATA::SATA()>
c001e4b1:	eb 24                	jmp    c001e4d7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001e4b3:	83 f8 04             	cmp    eax,0x4
c001e4b6:	75 36                	jne    c001e4ee <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e4b8:	51                   	push   ecx
c001e4b9:	53                   	push   ebx
c001e4ba:	55                   	push   ebp
c001e4bb:	56                   	push   esi
c001e4bc:	e8 91 fe ff ff       	call   c001e352 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e4c1:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001e4c8:	e8 f6 b4 fe ff       	call   c00099c3 <malloc>
c001e4cd:	89 c5                	mov    ebp,eax
c001e4cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001e4d2:	e8 d7 10 00 00       	call   c001f5ae <SATAPI::SATAPI()>
c001e4d7:	58                   	pop    eax
c001e4d8:	5a                   	pop    edx
c001e4d9:	55                   	push   ebp
c001e4da:	56                   	push   esi
c001e4db:	e8 96 f9 fe ff       	call   c000de76 <Device::addChild(Device*)>
c001e4e0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001e4e3:	56                   	push   esi
c001e4e4:	6a 00                	push   0x0
c001e4e6:	53                   	push   ebx
c001e4e7:	55                   	push   ebp
c001e4e8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001e4eb:	83 c4 20             	add    esp,0x20
c001e4ee:	d1 ef                	shr    edi,1
c001e4f0:	43                   	inc    ebx
c001e4f1:	83 fb 20             	cmp    ebx,0x20
c001e4f4:	0f 85 72 ff ff ff    	jne    c001e46c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001e4fa:	83 c4 0c             	add    esp,0xc
c001e4fd:	5b                   	pop    ebx
c001e4fe:	5e                   	pop    esi
c001e4ff:	5f                   	pop    edi
c001e500:	5d                   	pop    ebp
c001e501:	c3                   	ret    

c001e502 <SATABus::open(int, int, void*)>:
c001e502:	83 ec 14             	sub    esp,0x14
c001e505:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e509:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001e50f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e515:	52                   	push   edx
c001e516:	50                   	push   eax
c001e517:	e8 3c ff ff ff       	call   c001e458 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e51c:	31 c0                	xor    eax,eax
c001e51e:	83 c4 1c             	add    esp,0x1c
c001e521:	c3                   	ret    

c001e522 <ATA::close(int, int, void*)>:
c001e522:	83 ec 0c             	sub    esp,0xc
c001e525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e529:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e52f:	85 c0                	test   eax,eax
c001e531:	74 0c                	je     c001e53f <ATA::close(int, int, void*)+0x1d>
c001e533:	83 ec 0c             	sub    esp,0xc
c001e536:	8b 10                	mov    edx,DWORD PTR [eax]
c001e538:	50                   	push   eax
c001e539:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e53c:	83 c4 10             	add    esp,0x10
c001e53f:	31 c0                	xor    eax,eax
c001e541:	83 c4 0c             	add    esp,0xc
c001e544:	c3                   	ret    
c001e545:	90                   	nop

c001e546 <ATA::powerSaving(PowerSavingLevel)>:
c001e546:	c3                   	ret    
c001e547:	90                   	nop

c001e548 <ATA::ATA()>:
c001e548:	83 ec 0c             	sub    esp,0xc
c001e54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e54f:	83 ec 04             	sub    esp,0x4
c001e552:	68 00 02 00 00       	push   0x200
c001e557:	68 c9 51 02 c0       	push   0xc00251c9
c001e55c:	50                   	push   eax
c001e55d:	e8 4c fd fe ff       	call   c000e2ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e562:	83 c4 10             	add    esp,0x10
c001e565:	ba 4c 51 02 c0       	mov    edx,0xc002514c
c001e56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e56e:	89 10                	mov    DWORD PTR [eax],edx
c001e570:	90                   	nop
c001e571:	83 c4 0c             	add    esp,0xc
c001e574:	c3                   	ret    
c001e575:	90                   	nop

c001e576 <ATA::flush(bool)>:
c001e576:	53                   	push   ebx
c001e577:	83 ec 08             	sub    esp,0x8
c001e57a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001e57f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e583:	19 c0                	sbb    eax,eax
c001e585:	83 e0 fd             	and    eax,0xfffffffd
c001e588:	05 ea 00 00 00       	add    eax,0xea
c001e58d:	50                   	push   eax
c001e58e:	6a 07                	push   0x7
c001e590:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e597:	50                   	push   eax
c001e598:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e59e:	e8 53 f1 ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e5a3:	83 c4 0c             	add    esp,0xc
c001e5a6:	6a 00                	push   0x0
c001e5a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e5af:	50                   	push   eax
c001e5b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e5b6:	e8 dd fb ff ff       	call   c001e198 <IDE::polling(unsigned char, unsigned int)>
c001e5bb:	83 c4 18             	add    esp,0x18
c001e5be:	5b                   	pop    ebx
c001e5bf:	c3                   	ret    

c001e5c0 <ATA::readyForCommand()>:
c001e5c0:	56                   	push   esi
c001e5c1:	53                   	push   ebx
c001e5c2:	31 db                	xor    ebx,ebx
c001e5c4:	50                   	push   eax
c001e5c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e5c9:	50                   	push   eax
c001e5ca:	6a 0c                	push   0xc
c001e5cc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e5d3:	50                   	push   eax
c001e5d4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e5da:	e8 d7 f1 ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001e5df:	83 c4 10             	add    esp,0x10
c001e5e2:	a8 88                	test   al,0x88
c001e5e4:	74 23                	je     c001e609 <ATA::readyForCommand()+0x49>
c001e5e6:	43                   	inc    ebx
c001e5e7:	83 fb 63             	cmp    ebx,0x63
c001e5ea:	7e dd                	jle    c001e5c9 <ATA::readyForCommand()+0x9>
c001e5ec:	51                   	push   ecx
c001e5ed:	51                   	push   ecx
c001e5ee:	6a 00                	push   0x0
c001e5f0:	68 40 42 0f 00       	push   0xf4240
c001e5f5:	e8 0a 9c ff ff       	call   c0018204 <nanoSleep(unsigned long long)>
c001e5fa:	83 c4 10             	add    esp,0x10
c001e5fd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e603:	75 c4                	jne    c001e5c9 <ATA::readyForCommand()+0x9>
c001e605:	31 c0                	xor    eax,eax
c001e607:	eb 02                	jmp    c001e60b <ATA::readyForCommand()+0x4b>
c001e609:	b0 01                	mov    al,0x1
c001e60b:	5a                   	pop    edx
c001e60c:	5b                   	pop    ebx
c001e60d:	5e                   	pop    esi
c001e60e:	c3                   	ret    
c001e60f:	90                   	nop

c001e610 <ATA::access(unsigned long long, int, void*, bool)>:
c001e610:	55                   	push   ebp
c001e611:	57                   	push   edi
c001e612:	56                   	push   esi
c001e613:	53                   	push   ebx
c001e614:	83 ec 38             	sub    esp,0x38
c001e617:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001e61b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e61f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e623:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e627:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e62b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e62f:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001e633:	68 f8 50 02 c0       	push   0xc00250f8
c001e638:	e8 eb e3 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001e63d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e643:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e647:	83 c4 10             	add    esp,0x10
c001e64a:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e650:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e654:	c1 e0 06             	shl    eax,0x6
c001e657:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001e65f:	74 5d                	je     c001e6be <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001e661:	89 fa                	mov    edx,edi
c001e663:	89 f0                	mov    eax,esi
c001e665:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001e669:	c1 ea 1c             	shr    edx,0x1c
c001e66c:	89 d1                	mov    ecx,edx
c001e66e:	09 c1                	or     ecx,eax
c001e670:	74 25                	je     c001e697 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001e672:	31 ed                	xor    ebp,ebp
c001e674:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001e67b:	89 fa                	mov    edx,edi
c001e67d:	89 f0                	mov    eax,esi
c001e67f:	0f ad d0             	shrd   eax,edx,cl
c001e682:	d3 ea                	shr    edx,cl
c001e684:	f6 c1 20             	test   cl,0x20
c001e687:	74 02                	je     c001e68b <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001e689:	89 d0                	mov    eax,edx
c001e68b:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001e68f:	45                   	inc    ebp
c001e690:	83 fd 06             	cmp    ebp,0x6
c001e693:	75 df                	jne    c001e674 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001e695:	eb 76                	jmp    c001e70d <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001e697:	89 f0                	mov    eax,esi
c001e699:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001e69e:	89 fa                	mov    edx,edi
c001e6a0:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e6a7:	0f ac d0 10          	shrd   eax,edx,0x10
c001e6ab:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e6b0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e6b4:	c1 ee 18             	shr    esi,0x18
c001e6b7:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e6bc:	eb 56                	jmp    c001e714 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e6be:	6a 00                	push   0x0
c001e6c0:	6a 3f                	push   0x3f
c001e6c2:	57                   	push   edi
c001e6c3:	56                   	push   esi
c001e6c4:	e8 cb 29 00 00       	call   c0021094 <__umoddi3>
c001e6c9:	83 c4 10             	add    esp,0x10
c001e6cc:	40                   	inc    eax
c001e6cd:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001e6d1:	6a 00                	push   0x0
c001e6d3:	68 f0 03 00 00       	push   0x3f0
c001e6d8:	57                   	push   edi
c001e6d9:	56                   	push   esi
c001e6da:	e8 b5 28 00 00       	call   c0020f94 <__udivdi3>
c001e6df:	83 c4 10             	add    esp,0x10
c001e6e2:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001e6e7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e6ee:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e6f3:	6a 00                	push   0x0
c001e6f5:	6a 3f                	push   0x3f
c001e6f7:	57                   	push   edi
c001e6f8:	56                   	push   esi
c001e6f9:	e8 96 28 00 00       	call   c0020f94 <__udivdi3>
c001e6fe:	83 c4 10             	add    esp,0x10
c001e701:	89 c6                	mov    esi,eax
c001e703:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e708:	83 e6 0f             	and    esi,0xf
c001e70b:	eb 07                	jmp    c001e714 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e70d:	31 f6                	xor    esi,esi
c001e70f:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001e714:	bf 01 00 00 00       	mov    edi,0x1
c001e719:	50                   	push   eax
c001e71a:	6a 00                	push   0x0
c001e71c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e723:	50                   	push   eax
c001e724:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e728:	e8 d5 f1 ff ff       	call   c001d902 <IDE::enableIRQs(unsigned char, bool)>
c001e72d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e730:	e8 8b fe ff ff       	call   c001e5c0 <ATA::readyForCommand()>
c001e735:	83 c4 10             	add    esp,0x10
c001e738:	84 c0                	test   al,al
c001e73a:	0f 84 bc 02 00 00    	je     c001e9fc <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e740:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e746:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e74c:	c1 e0 04             	shl    eax,0x4
c001e74f:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001e756:	09 c6                	or     esi,eax
c001e758:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e75d:	75 05                	jne    c001e764 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001e75f:	83 ce a0             	or     esi,0xffffffa0
c001e762:	eb 03                	jmp    c001e767 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001e764:	83 ce e0             	or     esi,0xffffffe0
c001e767:	89 f0                	mov    eax,esi
c001e769:	0f b6 f0             	movzx  esi,al
c001e76c:	56                   	push   esi
c001e76d:	6a 06                	push   0x6
c001e76f:	51                   	push   ecx
c001e770:	52                   	push   edx
c001e771:	e8 80 ef ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e776:	83 c4 10             	add    esp,0x10
c001e779:	6a 00                	push   0x0
c001e77b:	6a 01                	push   0x1
c001e77d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e784:	50                   	push   eax
c001e785:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e78b:	e8 66 ef ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e790:	83 c4 10             	add    esp,0x10
c001e793:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e798:	75 6e                	jne    c001e808 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001e79a:	6a 00                	push   0x0
c001e79c:	6a 08                	push   0x8
c001e79e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7a5:	50                   	push   eax
c001e7a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7ac:	e8 45 ef ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7b1:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e7b6:	50                   	push   eax
c001e7b7:	6a 09                	push   0x9
c001e7b9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7c0:	50                   	push   eax
c001e7c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7c7:	e8 2a ef ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7cc:	83 c4 20             	add    esp,0x20
c001e7cf:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e7d4:	50                   	push   eax
c001e7d5:	6a 0a                	push   0xa
c001e7d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7de:	50                   	push   eax
c001e7df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7e5:	e8 0c ef ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7ea:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e7ef:	50                   	push   eax
c001e7f0:	6a 0b                	push   0xb
c001e7f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7f9:	50                   	push   eax
c001e7fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e800:	e8 f1 ee ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e805:	83 c4 20             	add    esp,0x20
c001e808:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e80d:	50                   	push   eax
c001e80e:	6a 02                	push   0x2
c001e810:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e817:	50                   	push   eax
c001e818:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e81e:	e8 d3 ee ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e823:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e828:	50                   	push   eax
c001e829:	6a 03                	push   0x3
c001e82b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e832:	50                   	push   eax
c001e833:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e839:	e8 b8 ee ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e83e:	83 c4 20             	add    esp,0x20
c001e841:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e846:	50                   	push   eax
c001e847:	6a 04                	push   0x4
c001e849:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e850:	50                   	push   eax
c001e851:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e857:	e8 9a ee ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e85c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e861:	50                   	push   eax
c001e862:	6a 05                	push   0x5
c001e864:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e86b:	50                   	push   eax
c001e86c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e872:	e8 7f ee ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e877:	83 c4 20             	add    esp,0x20
c001e87a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e87f:	0f 94 c0             	sete   al
c001e882:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e887:	74 09                	je     c001e892 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001e889:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001e890:	eb 07                	jmp    c001e899 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001e892:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001e899:	0f b6 c0             	movzx  eax,al
c001e89c:	50                   	push   eax
c001e89d:	6a 07                	push   0x7
c001e89f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8a6:	50                   	push   eax
c001e8a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8ad:	e8 44 ee ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e8b2:	c7 04 24 05 51 02 c0 	mov    DWORD PTR [esp],0xc0025105
c001e8b9:	e8 6a e1 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001e8be:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001e8c2:	83 c4 10             	add    esp,0x10
c001e8c5:	85 f6                	test   esi,esi
c001e8c7:	0f 84 f7 00 00 00    	je     c001e9c4 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001e8cd:	83 ec 0c             	sub    esp,0xc
c001e8d0:	68 08 51 02 c0       	push   0xc0025108
c001e8d5:	e8 4e e1 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001e8da:	83 c4 0c             	add    esp,0xc
c001e8dd:	6a 01                	push   0x1
c001e8df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8e6:	50                   	push   eax
c001e8e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8ed:	e8 a6 f8 ff ff       	call   c001e198 <IDE::polling(unsigned char, unsigned int)>
c001e8f2:	c7 04 24 0b 51 02 c0 	mov    DWORD PTR [esp],0xc002510b
c001e8f9:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e8fd:	e8 26 e1 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001e902:	83 c4 10             	add    esp,0x10
c001e905:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e909:	84 c0                	test   al,al
c001e90b:	74 2b                	je     c001e938 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001e90d:	0f b6 f8             	movzx  edi,al
c001e910:	57                   	push   edi
c001e911:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001e918:	50                   	push   eax
c001e919:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e920:	50                   	push   eax
c001e921:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e927:	e8 bc f7 ff ff       	call   c001e0e8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e92c:	c7 04 24 0e 51 02 c0 	mov    DWORD PTR [esp],0xc002510e
c001e933:	e9 bc 00 00 00       	jmp    c001e9f4 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001e938:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e93d:	74 50                	je     c001e98f <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001e93f:	83 ec 0c             	sub    esp,0xc
c001e942:	31 ed                	xor    ebp,ebp
c001e944:	68 19 51 02 c0       	push   0xc0025119
c001e949:	e8 da e0 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001e94e:	83 c4 10             	add    esp,0x10
c001e951:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e955:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001e959:	50                   	push   eax
c001e95a:	50                   	push   eax
c001e95b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e962:	50                   	push   eax
c001e963:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e969:	e8 76 ed ff ff       	call   c001d6e4 <IDE::getBase(unsigned char)>
c001e96e:	89 c2                	mov    edx,eax
c001e970:	89 f8                	mov    eax,edi
c001e972:	66 ef                	out    dx,ax
c001e974:	45                   	inc    ebp
c001e975:	83 c4 10             	add    esp,0x10
c001e978:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001e97e:	75 d1                	jne    c001e951 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001e980:	83 ec 0c             	sub    esp,0xc
c001e983:	68 1c 51 02 c0       	push   0xc002511c
c001e988:	e8 9b e0 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001e98d:	eb 24                	jmp    c001e9b3 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001e98f:	51                   	push   ecx
c001e990:	51                   	push   ecx
c001e991:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e998:	50                   	push   eax
c001e999:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e99f:	e8 40 ed ff ff       	call   c001d6e4 <IDE::getBase(unsigned char)>
c001e9a4:	b9 00 01 00 00       	mov    ecx,0x100
c001e9a9:	89 c2                	mov    edx,eax
c001e9ab:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001e9af:	fc                   	cld    
c001e9b0:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001e9b3:	83 c4 10             	add    esp,0x10
c001e9b6:	4e                   	dec    esi
c001e9b7:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001e9bf:	e9 01 ff ff ff       	jmp    c001e8c5 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001e9c4:	31 ff                	xor    edi,edi
c001e9c6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e9cb:	74 2f                	je     c001e9fc <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e9cd:	83 ec 0c             	sub    esp,0xc
c001e9d0:	68 1f 51 02 c0       	push   0xc002511f
c001e9d5:	e8 4e e0 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001e9da:	58                   	pop    eax
c001e9db:	31 c0                	xor    eax,eax
c001e9dd:	5a                   	pop    edx
c001e9de:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001e9e3:	0f 94 c0             	sete   al
c001e9e6:	50                   	push   eax
c001e9e7:	53                   	push   ebx
c001e9e8:	e8 89 fb ff ff       	call   c001e576 <ATA::flush(bool)>
c001e9ed:	c7 04 24 22 51 02 c0 	mov    DWORD PTR [esp],0xc0025122
c001e9f4:	e8 2f e0 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001e9f9:	83 c4 10             	add    esp,0x10
c001e9fc:	83 c4 2c             	add    esp,0x2c
c001e9ff:	89 f8                	mov    eax,edi
c001ea01:	5b                   	pop    ebx
c001ea02:	5e                   	pop    esi
c001ea03:	5f                   	pop    edi
c001ea04:	5d                   	pop    ebp
c001ea05:	c3                   	ret    

c001ea06 <ATA::read(unsigned long long, int, void*)>:
c001ea06:	57                   	push   edi
c001ea07:	b8 04 00 00 00       	mov    eax,0x4
c001ea0c:	56                   	push   esi
c001ea0d:	53                   	push   ebx
c001ea0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ea12:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ea16:	8d 7a ff             	lea    edi,[edx-0x1]
c001ea19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ea1d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ea21:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ea27:	77 25                	ja     c001ea4e <ATA::read(unsigned long long, int, void*)+0x48>
c001ea29:	b8 06 00 00 00       	mov    eax,0x6
c001ea2e:	85 f6                	test   esi,esi
c001ea30:	74 1c                	je     c001ea4e <ATA::read(unsigned long long, int, void*)+0x48>
c001ea32:	50                   	push   eax
c001ea33:	50                   	push   eax
c001ea34:	6a 00                	push   0x0
c001ea36:	56                   	push   esi
c001ea37:	52                   	push   edx
c001ea38:	53                   	push   ebx
c001ea39:	51                   	push   ecx
c001ea3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ea3e:	e8 cd fb ff ff       	call   c001e610 <ATA::access(unsigned long long, int, void*, bool)>
c001ea43:	83 c4 20             	add    esp,0x20
c001ea46:	85 c0                	test   eax,eax
c001ea48:	0f 95 c0             	setne  al
c001ea4b:	0f b6 c0             	movzx  eax,al
c001ea4e:	5b                   	pop    ebx
c001ea4f:	5e                   	pop    esi
c001ea50:	5f                   	pop    edi
c001ea51:	c3                   	ret    

c001ea52 <ATA::write(unsigned long long, int, void*)>:
c001ea52:	55                   	push   ebp
c001ea53:	57                   	push   edi
c001ea54:	56                   	push   esi
c001ea55:	53                   	push   ebx
c001ea56:	83 ec 18             	sub    esp,0x18
c001ea59:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ea5d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ea61:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ea65:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001ea69:	68 25 51 02 c0       	push   0xc0025125
c001ea6e:	e8 b5 df fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001ea73:	8d 53 ff             	lea    edx,[ebx-0x1]
c001ea76:	83 c4 10             	add    esp,0x10
c001ea79:	b8 04 00 00 00       	mov    eax,0x4
c001ea7e:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001ea84:	77 25                	ja     c001eaab <ATA::write(unsigned long long, int, void*)+0x59>
c001ea86:	b8 06 00 00 00       	mov    eax,0x6
c001ea8b:	85 f6                	test   esi,esi
c001ea8d:	74 1c                	je     c001eaab <ATA::write(unsigned long long, int, void*)+0x59>
c001ea8f:	50                   	push   eax
c001ea90:	50                   	push   eax
c001ea91:	6a 01                	push   0x1
c001ea93:	56                   	push   esi
c001ea94:	53                   	push   ebx
c001ea95:	55                   	push   ebp
c001ea96:	57                   	push   edi
c001ea97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ea9b:	e8 70 fb ff ff       	call   c001e610 <ATA::access(unsigned long long, int, void*, bool)>
c001eaa0:	83 c4 20             	add    esp,0x20
c001eaa3:	85 c0                	test   eax,eax
c001eaa5:	0f 95 c0             	setne  al
c001eaa8:	0f b6 c0             	movzx  eax,al
c001eaab:	83 c4 0c             	add    esp,0xc
c001eaae:	5b                   	pop    ebx
c001eaaf:	5e                   	pop    esi
c001eab0:	5f                   	pop    edi
c001eab1:	5d                   	pop    ebp
c001eab2:	c3                   	ret    
c001eab3:	90                   	nop

c001eab4 <ATA::detectCHS()>:
c001eab4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eab8:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001eabe:	c1 e0 06             	shl    eax,0x6
c001eac1:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001eac7:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ead1:	c7 44 24 04 31 51 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025131
c001ead9:	e9 2b 58 ff ff       	jmp    c0014309 <Krnl::panic(char const*)>

c001eade <ATA::open(int, int, void*)>:
c001eade:	53                   	push   ebx
c001eadf:	83 ec 08             	sub    esp,0x8
c001eae2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eae6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eaea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eaee:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001eaf4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001eafa:	c1 e0 06             	shl    eax,0x6
c001eafd:	01 d0                	add    eax,edx
c001eaff:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001eb06:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001eb0c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001eb13:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001eb1d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001eb23:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001eb2a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001eb31:	75 0c                	jne    c001eb3f <ATA::open(int, int, void*)+0x61>
c001eb33:	83 ec 0c             	sub    esp,0xc
c001eb36:	53                   	push   ebx
c001eb37:	e8 78 ff ff ff       	call   c001eab4 <ATA::detectCHS()>
c001eb3c:	83 c4 10             	add    esp,0x10
c001eb3f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001eb45:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001eb4b:	c1 e0 06             	shl    eax,0x6
c001eb4e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001eb55:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001eb5f:	d1 e8                	shr    eax,1
c001eb61:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001eb67:	6a 04                	push   0x4
c001eb69:	6a 0c                	push   0xc
c001eb6b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb72:	50                   	push   eax
c001eb73:	52                   	push   edx
c001eb74:	e8 7d eb ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb79:	90                   	nop
c001eb7a:	90                   	nop
c001eb7b:	6a 00                	push   0x0
c001eb7d:	6a 0c                	push   0xc
c001eb7f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb86:	50                   	push   eax
c001eb87:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eb8d:	e8 64 eb ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb92:	83 c4 14             	add    esp,0x14
c001eb95:	53                   	push   ebx
c001eb96:	e8 7b f7 fe ff       	call   c000e316 <PhysicalDisk::startCache()>
c001eb9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eb9e:	e8 af 17 ff ff       	call   c0010352 <createPartitionsForDisk(PhysicalDisk*)>
c001eba3:	31 c0                	xor    eax,eax
c001eba5:	83 c4 18             	add    esp,0x18
c001eba8:	5b                   	pop    ebx
c001eba9:	c3                   	ret    

c001ebaa <ATAPI::write(unsigned long long, int, void*)>:
c001ebaa:	b8 03 00 00 00       	mov    eax,0x3
c001ebaf:	c3                   	ret    

c001ebb0 <ATAPI::close(int, int, void*)>:
c001ebb0:	83 ec 0c             	sub    esp,0xc
c001ebb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ebbd:	85 c0                	test   eax,eax
c001ebbf:	74 0c                	je     c001ebcd <ATAPI::close(int, int, void*)+0x1d>
c001ebc1:	83 ec 0c             	sub    esp,0xc
c001ebc4:	8b 10                	mov    edx,DWORD PTR [eax]
c001ebc6:	50                   	push   eax
c001ebc7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ebca:	83 c4 10             	add    esp,0x10
c001ebcd:	31 c0                	xor    eax,eax
c001ebcf:	83 c4 0c             	add    esp,0xc
c001ebd2:	c3                   	ret    
c001ebd3:	90                   	nop

c001ebd4 <ATAPI::ATAPI()>:
c001ebd4:	83 ec 0c             	sub    esp,0xc
c001ebd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebdb:	83 ec 04             	sub    esp,0x4
c001ebde:	68 00 08 00 00       	push   0x800
c001ebe3:	68 69 52 02 c0       	push   0xc0025269
c001ebe8:	50                   	push   eax
c001ebe9:	e8 c0 f6 fe ff       	call   c000e2ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ebee:	83 c4 10             	add    esp,0x10
c001ebf1:	ba 84 51 02 c0       	mov    edx,0xc0025184
c001ebf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebfa:	89 10                	mov    DWORD PTR [eax],edx
c001ebfc:	90                   	nop
c001ebfd:	83 c4 0c             	add    esp,0xc
c001ec00:	c3                   	ret    
c001ec01:	90                   	nop

c001ec02 <ATAPI::readyForCommand()>:
c001ec02:	56                   	push   esi
c001ec03:	53                   	push   ebx
c001ec04:	31 db                	xor    ebx,ebx
c001ec06:	50                   	push   eax
c001ec07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ec0b:	50                   	push   eax
c001ec0c:	6a 0c                	push   0xc
c001ec0e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ec15:	50                   	push   eax
c001ec16:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ec1c:	e8 95 eb ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001ec21:	83 c4 10             	add    esp,0x10
c001ec24:	a8 88                	test   al,0x88
c001ec26:	74 23                	je     c001ec4b <ATAPI::readyForCommand()+0x49>
c001ec28:	43                   	inc    ebx
c001ec29:	83 fb 63             	cmp    ebx,0x63
c001ec2c:	7e dd                	jle    c001ec0b <ATAPI::readyForCommand()+0x9>
c001ec2e:	51                   	push   ecx
c001ec2f:	51                   	push   ecx
c001ec30:	6a 00                	push   0x0
c001ec32:	68 40 42 0f 00       	push   0xf4240
c001ec37:	e8 c8 95 ff ff       	call   c0018204 <nanoSleep(unsigned long long)>
c001ec3c:	83 c4 10             	add    esp,0x10
c001ec3f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ec45:	75 c4                	jne    c001ec0b <ATAPI::readyForCommand()+0x9>
c001ec47:	31 c0                	xor    eax,eax
c001ec49:	eb 02                	jmp    c001ec4d <ATAPI::readyForCommand()+0x4b>
c001ec4b:	b0 01                	mov    al,0x1
c001ec4d:	5a                   	pop    edx
c001ec4e:	5b                   	pop    ebx
c001ec4f:	5e                   	pop    esi
c001ec50:	c3                   	ret    
c001ec51:	90                   	nop

c001ec52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ec52:	55                   	push   ebp
c001ec53:	57                   	push   edi
c001ec54:	56                   	push   esi
c001ec55:	53                   	push   ebx
c001ec56:	83 ec 20             	sub    esp,0x20
c001ec59:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ec5d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ec61:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ec65:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec69:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ec6d:	6a 01                	push   0x1
c001ec6f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec76:	50                   	push   eax
c001ec77:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec7d:	e8 80 ec ff ff       	call   c001d902 <IDE::enableIRQs(unsigned char, bool)>
c001ec82:	5e                   	pop    esi
c001ec83:	58                   	pop    eax
c001ec84:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec8b:	50                   	push   eax
c001ec8c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec92:	e8 39 ea ff ff       	call   c001d6d0 <IDE::prepareInterrupt(unsigned char)>
c001ec97:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ec9a:	e8 63 ff ff ff       	call   c001ec02 <ATAPI::readyForCommand()>
c001ec9f:	83 c4 10             	add    esp,0x10
c001eca2:	84 c0                	test   al,al
c001eca4:	75 0a                	jne    c001ecb0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001eca6:	bb 01 00 00 00       	mov    ebx,0x1
c001ecab:	e9 57 02 00 00       	jmp    c001ef07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ecb0:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ecb6:	c1 e0 04             	shl    eax,0x4
c001ecb9:	0f b6 c0             	movzx  eax,al
c001ecbc:	50                   	push   eax
c001ecbd:	6a 06                	push   0x6
c001ecbf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecc6:	50                   	push   eax
c001ecc7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eccd:	e8 24 ea ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecd2:	6a 00                	push   0x0
c001ecd4:	6a 01                	push   0x1
c001ecd6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecdd:	50                   	push   eax
c001ecde:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ece4:	e8 0d ea ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ece9:	83 c4 20             	add    esp,0x20
c001ecec:	0f b6 c3             	movzx  eax,bl
c001ecef:	0f b6 df             	movzx  ebx,bh
c001ecf2:	50                   	push   eax
c001ecf3:	6a 04                	push   0x4
c001ecf5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecfc:	50                   	push   eax
c001ecfd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed03:	e8 ee e9 ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed08:	53                   	push   ebx
c001ed09:	6a 05                	push   0x5
c001ed0b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed12:	50                   	push   eax
c001ed13:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed19:	e8 d8 e9 ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed1e:	83 c4 20             	add    esp,0x20
c001ed21:	68 a0 00 00 00       	push   0xa0
c001ed26:	6a 07                	push   0x7
c001ed28:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed2f:	50                   	push   eax
c001ed30:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed36:	e8 bb e9 ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed3b:	83 c4 0c             	add    esp,0xc
c001ed3e:	6a 01                	push   0x1
c001ed40:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed47:	50                   	push   eax
c001ed48:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed4e:	e8 45 f4 ff ff       	call   c001e198 <IDE::polling(unsigned char, unsigned int)>
c001ed53:	83 c4 10             	add    esp,0x10
c001ed56:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ed5c:	84 c0                	test   al,al
c001ed5e:	74 23                	je     c001ed83 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ed60:	0f b6 d8             	movzx  ebx,al
c001ed63:	0f b6 d2             	movzx  edx,dl
c001ed66:	53                   	push   ebx
c001ed67:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ed6e:	50                   	push   eax
c001ed6f:	52                   	push   edx
c001ed70:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed76:	e8 6d f3 ff ff       	call   c001e0e8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ed7b:	83 c4 10             	add    esp,0x10
c001ed7e:	e9 84 01 00 00       	jmp    c001ef07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ed83:	0f b6 d2             	movzx  edx,dl
c001ed86:	53                   	push   ebx
c001ed87:	53                   	push   ebx
c001ed88:	52                   	push   edx
c001ed89:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed8f:	e8 50 e9 ff ff       	call   c001d6e4 <IDE::getBase(unsigned char)>
c001ed94:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ed98:	b9 06 00 00 00       	mov    ecx,0x6
c001ed9d:	89 c2                	mov    edx,eax
c001ed9f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001eda2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001eda6:	83 c4 10             	add    esp,0x10
c001eda9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001edaf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001edb6:	85 db                	test   ebx,ebx
c001edb8:	0f 84 ec 00 00 00    	je     c001eeaa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001edbe:	51                   	push   ecx
c001edbf:	51                   	push   ecx
c001edc0:	52                   	push   edx
c001edc1:	50                   	push   eax
c001edc2:	e8 9d ea ff ff       	call   c001d864 <IDE::waitInterrupt(unsigned char)>
c001edc7:	83 c4 10             	add    esp,0x10
c001edca:	84 c0                	test   al,al
c001edcc:	0f 84 d4 fe ff ff    	je     c001eca6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001edd2:	56                   	push   esi
c001edd3:	56                   	push   esi
c001edd4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eddb:	50                   	push   eax
c001eddc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ede2:	e8 e9 e8 ff ff       	call   c001d6d0 <IDE::prepareInterrupt(unsigned char)>
c001ede7:	83 c4 0c             	add    esp,0xc
c001edea:	6a 04                	push   0x4
c001edec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001edf3:	50                   	push   eax
c001edf4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edfa:	e8 b7 e9 ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001edff:	83 c4 0c             	add    esp,0xc
c001ee02:	89 c6                	mov    esi,eax
c001ee04:	6a 05                	push   0x5
c001ee06:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee0d:	50                   	push   eax
c001ee0e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee14:	e8 9d e9 ff ff       	call   c001d7b6 <IDE::read(unsigned char, unsigned char)>
c001ee19:	89 f1                	mov    ecx,esi
c001ee1b:	0f b6 c0             	movzx  eax,al
c001ee1e:	0f b6 f1             	movzx  esi,cl
c001ee21:	c1 e0 08             	shl    eax,0x8
c001ee24:	09 c6                	or     esi,eax
c001ee26:	d1 fe                	sar    esi,1
c001ee28:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ee2c:	83 c4 10             	add    esp,0x10
c001ee2f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ee34:	74 41                	je     c001ee77 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ee36:	31 c9                	xor    ecx,ecx
c001ee38:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ee3e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ee45:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ee49:	75 0a                	jne    c001ee55 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ee4b:	01 c9                	add    ecx,ecx
c001ee4d:	01 cd                	add    ebp,ecx
c001ee4f:	4b                   	dec    ebx
c001ee50:	e9 54 ff ff ff       	jmp    c001eda9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ee55:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ee5a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ee5e:	51                   	push   ecx
c001ee5f:	51                   	push   ecx
c001ee60:	52                   	push   edx
c001ee61:	50                   	push   eax
c001ee62:	e8 7d e8 ff ff       	call   c001d6e4 <IDE::getBase(unsigned char)>
c001ee67:	89 c2                	mov    edx,eax
c001ee69:	89 f0                	mov    eax,esi
c001ee6b:	66 ef                	out    dx,ax
c001ee6d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ee71:	83 c4 10             	add    esp,0x10
c001ee74:	41                   	inc    ecx
c001ee75:	eb c1                	jmp    c001ee38 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ee77:	31 f6                	xor    esi,esi
c001ee79:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ee7f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ee86:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001ee8a:	75 06                	jne    c001ee92 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001ee8c:	01 f6                	add    esi,esi
c001ee8e:	01 f5                	add    ebp,esi
c001ee90:	eb bd                	jmp    c001ee4f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001ee92:	51                   	push   ecx
c001ee93:	51                   	push   ecx
c001ee94:	52                   	push   edx
c001ee95:	50                   	push   eax
c001ee96:	e8 49 e8 ff ff       	call   c001d6e4 <IDE::getBase(unsigned char)>
c001ee9b:	89 c2                	mov    edx,eax
c001ee9d:	66 ed                	in     ax,dx
c001ee9f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001eea4:	83 c4 10             	add    esp,0x10
c001eea7:	46                   	inc    esi
c001eea8:	eb cf                	jmp    c001ee79 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001eeaa:	51                   	push   ecx
c001eeab:	51                   	push   ecx
c001eeac:	52                   	push   edx
c001eead:	50                   	push   eax
c001eeae:	e8 b1 e9 ff ff       	call   c001d864 <IDE::waitInterrupt(unsigned char)>
c001eeb3:	83 c4 10             	add    esp,0x10
c001eeb6:	84 c0                	test   al,al
c001eeb8:	0f 84 e8 fd ff ff    	je     c001eca6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001eebe:	bb a0 86 01 00       	mov    ebx,0x186a0
c001eec3:	52                   	push   edx
c001eec4:	52                   	push   edx
c001eec5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eecc:	50                   	push   eax
c001eecd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eed3:	e8 f8 e7 ff ff       	call   c001d6d0 <IDE::prepareInterrupt(unsigned char)>
c001eed8:	83 c4 10             	add    esp,0x10
c001eedb:	50                   	push   eax
c001eedc:	50                   	push   eax
c001eedd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eee4:	50                   	push   eax
c001eee5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eeeb:	e8 f4 e7 ff ff       	call   c001d6e4 <IDE::getBase(unsigned char)>
c001eef0:	8d 50 07             	lea    edx,[eax+0x7]
c001eef3:	ec                   	in     al,dx
c001eef4:	83 c4 10             	add    esp,0x10
c001eef7:	a8 88                	test   al,0x88
c001eef9:	74 0a                	je     c001ef05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001eefb:	4b                   	dec    ebx
c001eefc:	75 dd                	jne    c001eedb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001eefe:	bb 02 00 00 00       	mov    ebx,0x2
c001ef03:	eb 02                	jmp    c001ef07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ef05:	31 db                	xor    ebx,ebx
c001ef07:	83 c4 1c             	add    esp,0x1c
c001ef0a:	89 d8                	mov    eax,ebx
c001ef0c:	5b                   	pop    ebx
c001ef0d:	5e                   	pop    esi
c001ef0e:	5f                   	pop    edi
c001ef0f:	5d                   	pop    ebp
c001ef10:	c3                   	ret    
c001ef11:	90                   	nop

c001ef12 <ATAPI::diskRemoved()>:
c001ef12:	83 ec 18             	sub    esp,0x18
c001ef15:	68 75 52 02 c0       	push   0xc0025275
c001ef1a:	e8 09 db fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001ef1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef23:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001ef2a:	83 c4 1c             	add    esp,0x1c
c001ef2d:	c3                   	ret    

c001ef2e <ATAPI::eject()>:
c001ef2e:	57                   	push   edi
c001ef2f:	b9 03 00 00 00       	mov    ecx,0x3
c001ef34:	53                   	push   ebx
c001ef35:	83 ec 14             	sub    esp,0x14
c001ef38:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ef3c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ef40:	fc                   	cld    
c001ef41:	31 c0                	xor    eax,eax
c001ef43:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ef45:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ef4a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ef4f:	50                   	push   eax
c001ef50:	50                   	push   eax
c001ef51:	6a 00                	push   0x0
c001ef53:	6a 00                	push   0x0
c001ef55:	6a 00                	push   0x0
c001ef57:	6a 02                	push   0x2
c001ef59:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ef5d:	50                   	push   eax
c001ef5e:	53                   	push   ebx
c001ef5f:	e8 ee fc ff ff       	call   c001ec52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ef64:	83 c4 14             	add    esp,0x14
c001ef67:	53                   	push   ebx
c001ef68:	e8 a5 ff ff ff       	call   c001ef12 <ATAPI::diskRemoved()>
c001ef6d:	83 c4 24             	add    esp,0x24
c001ef70:	31 c0                	xor    eax,eax
c001ef72:	5b                   	pop    ebx
c001ef73:	5f                   	pop    edi
c001ef74:	c3                   	ret    
c001ef75:	90                   	nop

c001ef76 <ATAPI::diskInserted()>:
c001ef76:	53                   	push   ebx
c001ef77:	83 ec 14             	sub    esp,0x14
c001ef7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ef7e:	68 8c 52 02 c0       	push   0xc002528c
c001ef83:	e8 a0 da fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001ef88:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001ef8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ef92:	e8 7f f3 fe ff       	call   c000e316 <PhysicalDisk::startCache()>
c001ef97:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001ef9b:	83 c4 18             	add    esp,0x18
c001ef9e:	5b                   	pop    ebx
c001ef9f:	e9 ae 13 ff ff       	jmp    c0010352 <createPartitionsForDisk(PhysicalDisk*)>

c001efa4 <ATAPI::detectMedia()>:
c001efa4:	56                   	push   esi
c001efa5:	53                   	push   ebx
c001efa6:	83 ec 28             	sub    esp,0x28
c001efa9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001efad:	6a 0c                	push   0xc
c001efaf:	6a 00                	push   0x0
c001efb1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001efb5:	56                   	push   esi
c001efb6:	e8 c9 16 fe ff       	call   c0000684 <memset>
c001efbb:	58                   	pop    eax
c001efbc:	5a                   	pop    edx
c001efbd:	6a 00                	push   0x0
c001efbf:	6a 00                	push   0x0
c001efc1:	6a 00                	push   0x0
c001efc3:	6a 00                	push   0x0
c001efc5:	56                   	push   esi
c001efc6:	53                   	push   ebx
c001efc7:	e8 86 fc ff ff       	call   c001ec52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001efcc:	83 c4 1c             	add    esp,0x1c
c001efcf:	6a 0c                	push   0xc
c001efd1:	6a 00                	push   0x0
c001efd3:	56                   	push   esi
c001efd4:	e8 ab 16 fe ff       	call   c0000684 <memset>
c001efd9:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001efde:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001efe3:	59                   	pop    ecx
c001efe4:	58                   	pop    eax
c001efe5:	6a 01                	push   0x1
c001efe7:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001efeb:	50                   	push   eax
c001efec:	6a 00                	push   0x0
c001efee:	6a 12                	push   0x12
c001eff0:	56                   	push   esi
c001eff1:	53                   	push   ebx
c001eff2:	e8 5b fc ff ff       	call   c001ec52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001eff7:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001effb:	83 c4 20             	add    esp,0x20
c001effe:	83 e0 7f             	and    eax,0x7f
c001f001:	3c 70                	cmp    al,0x70
c001f003:	74 15                	je     c001f01a <ATAPI::detectMedia()+0x76>
c001f005:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f00c:	75 0c                	jne    c001f01a <ATAPI::detectMedia()+0x76>
c001f00e:	83 ec 0c             	sub    esp,0xc
c001f011:	53                   	push   ebx
c001f012:	e8 5f ff ff ff       	call   c001ef76 <ATAPI::diskInserted()>
c001f017:	83 c4 10             	add    esp,0x10
c001f01a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f01e:	83 e0 0f             	and    eax,0xf
c001f021:	3c 02                	cmp    al,0x2
c001f023:	75 1b                	jne    c001f040 <ATAPI::detectMedia()+0x9c>
c001f025:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f02a:	75 2d                	jne    c001f059 <ATAPI::detectMedia()+0xb5>
c001f02c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f033:	74 24                	je     c001f059 <ATAPI::detectMedia()+0xb5>
c001f035:	83 ec 0c             	sub    esp,0xc
c001f038:	53                   	push   ebx
c001f039:	e8 d4 fe ff ff       	call   c001ef12 <ATAPI::diskRemoved()>
c001f03e:	eb 16                	jmp    c001f056 <ATAPI::detectMedia()+0xb2>
c001f040:	84 c0                	test   al,al
c001f042:	75 15                	jne    c001f059 <ATAPI::detectMedia()+0xb5>
c001f044:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f04b:	75 0c                	jne    c001f059 <ATAPI::detectMedia()+0xb5>
c001f04d:	83 ec 0c             	sub    esp,0xc
c001f050:	53                   	push   ebx
c001f051:	e8 20 ff ff ff       	call   c001ef76 <ATAPI::diskInserted()>
c001f056:	83 c4 10             	add    esp,0x10
c001f059:	83 c4 24             	add    esp,0x24
c001f05c:	5b                   	pop    ebx
c001f05d:	5e                   	pop    esi
c001f05e:	c3                   	ret    
c001f05f:	90                   	nop

c001f060 <ATAPI::open(int, int, void*)>:
c001f060:	53                   	push   ebx
c001f061:	83 ec 08             	sub    esp,0x8
c001f064:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f068:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f06c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f070:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f076:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f07c:	c1 e0 06             	shl    eax,0x6
c001f07f:	01 d0                	add    eax,edx
c001f081:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001f088:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001f08e:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001f095:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f09f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f0a5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f0ac:	6a 04                	push   0x4
c001f0ae:	6a 0c                	push   0xc
c001f0b0:	51                   	push   ecx
c001f0b1:	52                   	push   edx
c001f0b2:	e8 3f e6 ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0b7:	90                   	nop
c001f0b8:	90                   	nop
c001f0b9:	6a 00                	push   0x0
c001f0bb:	6a 0c                	push   0xc
c001f0bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f0c4:	50                   	push   eax
c001f0c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f0cb:	e8 26 e6 ff ff       	call   c001d6f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0d0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f0d7:	83 c4 14             	add    esp,0x14
c001f0da:	53                   	push   ebx
c001f0db:	e8 c4 fe ff ff       	call   c001efa4 <ATAPI::detectMedia()>
c001f0e0:	31 c0                	xor    eax,eax
c001f0e2:	83 c4 18             	add    esp,0x18
c001f0e5:	5b                   	pop    ebx
c001f0e6:	c3                   	ret    
c001f0e7:	90                   	nop

c001f0e8 <ATAPI::read(unsigned long long, int, void*)>:
c001f0e8:	55                   	push   ebp
c001f0e9:	57                   	push   edi
c001f0ea:	56                   	push   esi
c001f0eb:	53                   	push   ebx
c001f0ec:	83 ec 1c             	sub    esp,0x1c
c001f0ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f0f3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f0f7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f0fb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f102:	74 41                	je     c001f145 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001f104:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f108:	b9 03 00 00 00       	mov    ecx,0x3
c001f10d:	fc                   	cld    
c001f10e:	31 c0                	xor    eax,eax
c001f110:	86 fb                	xchg   bl,bh
c001f112:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f114:	c1 c3 10             	rol    ebx,0x10
c001f117:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f11c:	89 e8                	mov    eax,ebp
c001f11e:	86 fb                	xchg   bl,bh
c001f120:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f124:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001f128:	50                   	push   eax
c001f129:	50                   	push   eax
c001f12a:	55                   	push   ebp
c001f12b:	c1 e5 0b             	shl    ebp,0xb
c001f12e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f132:	6a 00                	push   0x0
c001f134:	55                   	push   ebp
c001f135:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f139:	50                   	push   eax
c001f13a:	56                   	push   esi
c001f13b:	e8 12 fb ff ff       	call   c001ec52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f140:	83 c4 20             	add    esp,0x20
c001f143:	eb 1a                	jmp    c001f15f <ATAPI::read(unsigned long long, int, void*)+0x77>
c001f145:	83 ec 0c             	sub    esp,0xc
c001f148:	56                   	push   esi
c001f149:	e8 56 fe ff ff       	call   c001efa4 <ATAPI::detectMedia()>
c001f14e:	83 c4 10             	add    esp,0x10
c001f151:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f158:	75 aa                	jne    c001f104 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f15a:	b8 02 00 00 00       	mov    eax,0x2
c001f15f:	83 c4 1c             	add    esp,0x1c
c001f162:	5b                   	pop    ebx
c001f163:	5e                   	pop    esi
c001f164:	5f                   	pop    edi
c001f165:	5d                   	pop    ebp
c001f166:	c3                   	ret    
c001f167:	90                   	nop

c001f168 <SATA::close(int, int, void*)>:
c001f168:	83 ec 0c             	sub    esp,0xc
c001f16b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f16f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f175:	85 c0                	test   eax,eax
c001f177:	74 0c                	je     c001f185 <SATA::close(int, int, void*)+0x1d>
c001f179:	83 ec 0c             	sub    esp,0xc
c001f17c:	8b 10                	mov    edx,DWORD PTR [eax]
c001f17e:	50                   	push   eax
c001f17f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f182:	83 c4 10             	add    esp,0x10
c001f185:	31 c0                	xor    eax,eax
c001f187:	83 c4 0c             	add    esp,0xc
c001f18a:	c3                   	ret    
c001f18b:	90                   	nop

c001f18c <SATA::powerSaving(PowerSavingLevel)>:
c001f18c:	c3                   	ret    
c001f18d:	90                   	nop

c001f18e <SATA::open(int, int, void*)>:
c001f18e:	56                   	push   esi
c001f18f:	53                   	push   ebx
c001f190:	50                   	push   eax
c001f191:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f199:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f1a3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f1a9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f1b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f1b7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f1c1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f1c7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f1ce:	e8 ec ab fe ff       	call   c0009dbf <Phys::allocatePage()>
c001f1d3:	89 c6                	mov    esi,eax
c001f1d5:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f1db:	81 c6 00 10 00 00    	add    esi,0x1000
c001f1e1:	e8 d9 ab fe ff       	call   c0009dbf <Phys::allocatePage()>
c001f1e6:	39 c6                	cmp    esi,eax
c001f1e8:	74 10                	je     c001f1fa <SATA::open(int, int, void*)+0x6c>
c001f1ea:	83 ec 0c             	sub    esp,0xc
c001f1ed:	68 b4 51 02 c0       	push   0xc00251b4
c001f1f2:	e8 12 51 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001f1f7:	83 c4 10             	add    esp,0x10
c001f1fa:	83 ec 0c             	sub    esp,0xc
c001f1fd:	6a 02                	push   0x2
c001f1ff:	e8 49 c4 fe ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c001f204:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f20a:	6a 03                	push   0x3
c001f20c:	50                   	push   eax
c001f20d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f213:	ff 35 90 65 02 c0    	push   DWORD PTR ds:0xc0026590
c001f219:	e8 d6 ca fe ff       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f21e:	83 c4 14             	add    esp,0x14
c001f221:	53                   	push   ebx
c001f222:	e8 ef f0 fe ff       	call   c000e316 <PhysicalDisk::startCache()>
c001f227:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f22a:	e8 23 11 ff ff       	call   c0010352 <createPartitionsForDisk(PhysicalDisk*)>
c001f22f:	83 c4 14             	add    esp,0x14
c001f232:	31 c0                	xor    eax,eax
c001f234:	5b                   	pop    ebx
c001f235:	5e                   	pop    esi
c001f236:	c3                   	ret    
c001f237:	90                   	nop

c001f238 <SATA::SATA()>:
c001f238:	83 ec 0c             	sub    esp,0xc
c001f23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f23f:	83 ec 04             	sub    esp,0x4
c001f242:	68 00 02 00 00       	push   0x200
c001f247:	68 c8 51 02 c0       	push   0xc00251c8
c001f24c:	50                   	push   eax
c001f24d:	e8 5c f0 fe ff       	call   c000e2ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f252:	83 c4 10             	add    esp,0x10
c001f255:	ba 38 52 02 c0       	mov    edx,0xc0025238
c001f25a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f25e:	89 10                	mov    DWORD PTR [eax],edx
c001f260:	90                   	nop
c001f261:	83 c4 0c             	add    esp,0xc
c001f264:	c3                   	ret    
c001f265:	90                   	nop

c001f266 <SATA::access(unsigned long long, int, void*, bool)>:
c001f266:	55                   	push   ebp
c001f267:	57                   	push   edi
c001f268:	56                   	push   esi
c001f269:	53                   	push   ebx
c001f26a:	83 ec 2c             	sub    esp,0x2c
c001f26d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f271:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f275:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f279:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f27d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f281:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f286:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f28a:	7e 10                	jle    c001f29c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001f28c:	83 ec 0c             	sub    esp,0xc
c001f28f:	68 d8 51 02 c0       	push   0xc00251d8
c001f294:	e8 70 50 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001f299:	83 c4 10             	add    esp,0x10
c001f29c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f2a2:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f2a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f2ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f2b2:	89 d0                	mov    eax,edx
c001f2b4:	c1 e0 07             	shl    eax,0x7
c001f2b7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f2bb:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f2c5:	51                   	push   ecx
c001f2c6:	8d 42 02             	lea    eax,[edx+0x2]
c001f2c9:	51                   	push   ecx
c001f2ca:	c1 e0 07             	shl    eax,0x7
c001f2cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f2d1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f2d5:	50                   	push   eax
c001f2d6:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001f2dc:	e8 97 ef ff ff       	call   c001e278 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f2e1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f2e5:	83 c4 10             	add    esp,0x10
c001f2e8:	b8 01 00 00 00       	mov    eax,0x1
c001f2ed:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f2f2:	0f 84 cb 01 00 00    	je     c001f4c3 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f2f8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f2fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f300:	c1 e0 09             	shl    eax,0x9
c001f303:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f308:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f30c:	74 0e                	je     c001f31c <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c001f30e:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001f314:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f318:	89 c1                	mov    ecx,eax
c001f31a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f31c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f320:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f326:	8d 42 02             	lea    eax,[edx+0x2]
c001f329:	c1 e0 07             	shl    eax,0x7
c001f32c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f330:	8b 00                	mov    eax,DWORD PTR [eax]
c001f332:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f338:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f33e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f342:	c1 e1 05             	shl    ecx,0x5
c001f345:	01 c8                	add    eax,ecx
c001f347:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001f34b:	83 e1 01             	and    ecx,0x1
c001f34e:	89 ce                	mov    esi,ecx
c001f350:	8a 08                	mov    cl,BYTE PTR [eax]
c001f352:	c1 e6 06             	shl    esi,0x6
c001f355:	83 e1 bf             	and    ecx,0xffffffbf
c001f358:	09 f1                	or     ecx,esi
c001f35a:	88 08                	mov    BYTE PTR [eax],cl
c001f35c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f35e:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001f364:	81 c9 05 00 01 00    	or     ecx,0x10005
c001f36a:	89 08                	mov    DWORD PTR [eax],ecx
c001f36c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f372:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001f378:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001f37e:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001f381:	50                   	push   eax
c001f382:	68 90 00 00 00       	push   0x90
c001f387:	6a 00                	push   0x0
c001f389:	56                   	push   esi
c001f38a:	e8 f5 12 fe ff       	call   c0000684 <memset>
c001f38f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f395:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001f399:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001f39f:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001f3a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f3a7:	83 c4 10             	add    esp,0x10
c001f3aa:	48                   	dec    eax
c001f3ab:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f3b0:	89 c1                	mov    ecx,eax
c001f3b2:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001f3b8:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f3bd:	09 c8                	or     eax,ecx
c001f3bf:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001f3c5:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f3c8:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001f3cf:	66 25 00 7f          	and    ax,0x7f00
c001f3d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f3d7:	66 0d 27 80          	or     ax,0x8027
c001f3db:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001f3e0:	66 89 06             	mov    WORD PTR [esi],ax
c001f3e3:	19 c0                	sbb    eax,eax
c001f3e5:	83 e0 f0             	and    eax,0xfffffff0
c001f3e8:	83 c0 35             	add    eax,0x35
c001f3eb:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001f3ee:	89 e8                	mov    eax,ebp
c001f3f0:	c1 e8 10             	shr    eax,0x10
c001f3f3:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001f3f6:	89 e8                	mov    eax,ebp
c001f3f8:	c1 e8 18             	shr    eax,0x18
c001f3fb:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001f3fe:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f402:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001f405:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f409:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001f40c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f410:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001f414:	89 d6                	mov    esi,edx
c001f416:	31 c0                	xor    eax,eax
c001f418:	c1 e6 07             	shl    esi,0x7
c001f41b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001f41f:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001f425:	80 e1 88             	and    cl,0x88
c001f428:	74 0a                	je     c001f434 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c001f42a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f42f:	74 0a                	je     c001f43b <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c001f431:	40                   	inc    eax
c001f432:	eb eb                	jmp    c001f41f <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c001f434:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f439:	75 0a                	jne    c001f445 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001f43b:	83 ec 0c             	sub    esp,0xc
c001f43e:	68 11 52 02 c0       	push   0xc0025211
c001f443:	eb 56                	jmp    c001f49b <SATA::access(unsigned long long, int, void*, bool)+0x235>
c001f445:	b8 01 00 00 00       	mov    eax,0x1
c001f44a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f44e:	c1 e2 07             	shl    edx,0x7
c001f451:	d3 e0                	shl    eax,cl
c001f453:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001f457:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001f45d:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001f463:	85 c8                	test   eax,ecx
c001f465:	74 20                	je     c001f487 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c001f467:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001f46d:	0f ba e1 1e          	bt     ecx,0x1e
c001f471:	73 ea                	jae    c001f45d <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c001f473:	83 ec 0c             	sub    esp,0xc
c001f476:	68 1f 52 02 c0       	push   0xc002521f
c001f47b:	e8 89 4e ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001f480:	83 c4 10             	add    esp,0x10
c001f483:	31 c0                	xor    eax,eax
c001f485:	eb 3c                	jmp    c001f4c3 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f487:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001f48d:	0f ba e0 1e          	bt     eax,0x1e
c001f491:	73 17                	jae    c001f4aa <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001f493:	83 ec 0c             	sub    esp,0xc
c001f496:	68 1f 52 02 c0       	push   0xc002521f
c001f49b:	e8 69 4e ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001f4a0:	83 c4 10             	add    esp,0x10
c001f4a3:	b8 01 00 00 00       	mov    eax,0x1
c001f4a8:	eb 19                	jmp    c001f4c3 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f4aa:	31 c0                	xor    eax,eax
c001f4ac:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f4b1:	75 10                	jne    c001f4c3 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f4b3:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001f4b9:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001f4bd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f4c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f4c3:	83 c4 2c             	add    esp,0x2c
c001f4c6:	5b                   	pop    ebx
c001f4c7:	5e                   	pop    esi
c001f4c8:	5f                   	pop    edi
c001f4c9:	5d                   	pop    ebp
c001f4ca:	c3                   	ret    
c001f4cb:	90                   	nop

c001f4cc <SATA::read(unsigned long long, int, void*)>:
c001f4cc:	57                   	push   edi
c001f4cd:	b8 04 00 00 00       	mov    eax,0x4
c001f4d2:	56                   	push   esi
c001f4d3:	53                   	push   ebx
c001f4d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f4d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f4dc:	8d 7a ff             	lea    edi,[edx-0x1]
c001f4df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f4e3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f4e7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f4ed:	77 25                	ja     c001f514 <SATA::read(unsigned long long, int, void*)+0x48>
c001f4ef:	b8 06 00 00 00       	mov    eax,0x6
c001f4f4:	85 f6                	test   esi,esi
c001f4f6:	74 1c                	je     c001f514 <SATA::read(unsigned long long, int, void*)+0x48>
c001f4f8:	50                   	push   eax
c001f4f9:	50                   	push   eax
c001f4fa:	6a 00                	push   0x0
c001f4fc:	56                   	push   esi
c001f4fd:	52                   	push   edx
c001f4fe:	53                   	push   ebx
c001f4ff:	51                   	push   ecx
c001f500:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f504:	e8 5d fd ff ff       	call   c001f266 <SATA::access(unsigned long long, int, void*, bool)>
c001f509:	83 c4 20             	add    esp,0x20
c001f50c:	85 c0                	test   eax,eax
c001f50e:	0f 95 c0             	setne  al
c001f511:	0f b6 c0             	movzx  eax,al
c001f514:	5b                   	pop    ebx
c001f515:	5e                   	pop    esi
c001f516:	5f                   	pop    edi
c001f517:	c3                   	ret    

c001f518 <SATA::write(unsigned long long, int, void*)>:
c001f518:	55                   	push   ebp
c001f519:	b8 04 00 00 00       	mov    eax,0x4
c001f51e:	57                   	push   edi
c001f51f:	56                   	push   esi
c001f520:	53                   	push   ebx
c001f521:	83 ec 0c             	sub    esp,0xc
c001f524:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f528:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f52c:	8d 73 ff             	lea    esi,[ebx-0x1]
c001f52f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001f533:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f537:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001f53d:	77 3d                	ja     c001f57c <SATA::write(unsigned long long, int, void*)+0x64>
c001f53f:	b8 06 00 00 00       	mov    eax,0x6
c001f544:	85 ed                	test   ebp,ebp
c001f546:	74 34                	je     c001f57c <SATA::write(unsigned long long, int, void*)+0x64>
c001f548:	c1 e3 09             	shl    ebx,0x9
c001f54b:	01 eb                	add    ebx,ebp
c001f54d:	89 d6                	mov    esi,edx
c001f54f:	89 cf                	mov    edi,ecx
c001f551:	83 c6 01             	add    esi,0x1
c001f554:	83 d7 00             	adc    edi,0x0
c001f557:	50                   	push   eax
c001f558:	50                   	push   eax
c001f559:	6a 01                	push   0x1
c001f55b:	55                   	push   ebp
c001f55c:	81 c5 00 02 00 00    	add    ebp,0x200
c001f562:	6a 01                	push   0x1
c001f564:	51                   	push   ecx
c001f565:	52                   	push   edx
c001f566:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f56a:	e8 f7 fc ff ff       	call   c001f266 <SATA::access(unsigned long long, int, void*, bool)>
c001f56f:	83 c4 20             	add    esp,0x20
c001f572:	89 f2                	mov    edx,esi
c001f574:	89 f9                	mov    ecx,edi
c001f576:	39 dd                	cmp    ebp,ebx
c001f578:	75 d3                	jne    c001f54d <SATA::write(unsigned long long, int, void*)+0x35>
c001f57a:	31 c0                	xor    eax,eax
c001f57c:	83 c4 0c             	add    esp,0xc
c001f57f:	5b                   	pop    ebx
c001f580:	5e                   	pop    esi
c001f581:	5f                   	pop    edi
c001f582:	5d                   	pop    ebp
c001f583:	c3                   	ret    

c001f584 <SATAPI::write(unsigned long long, int, void*)>:
c001f584:	b8 03 00 00 00       	mov    eax,0x3
c001f589:	c3                   	ret    

c001f58a <SATAPI::close(int, int, void*)>:
c001f58a:	83 ec 0c             	sub    esp,0xc
c001f58d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f591:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f597:	85 c0                	test   eax,eax
c001f599:	74 0c                	je     c001f5a7 <SATAPI::close(int, int, void*)+0x1d>
c001f59b:	83 ec 0c             	sub    esp,0xc
c001f59e:	8b 10                	mov    edx,DWORD PTR [eax]
c001f5a0:	50                   	push   eax
c001f5a1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f5a4:	83 c4 10             	add    esp,0x10
c001f5a7:	31 c0                	xor    eax,eax
c001f5a9:	83 c4 0c             	add    esp,0xc
c001f5ac:	c3                   	ret    
c001f5ad:	90                   	nop

c001f5ae <SATAPI::SATAPI()>:
c001f5ae:	83 ec 0c             	sub    esp,0xc
c001f5b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b5:	83 ec 04             	sub    esp,0x4
c001f5b8:	68 00 08 00 00       	push   0x800
c001f5bd:	68 68 52 02 c0       	push   0xc0025268
c001f5c2:	50                   	push   eax
c001f5c3:	e8 e6 ec fe ff       	call   c000e2ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f5c8:	83 c4 10             	add    esp,0x10
c001f5cb:	ba 14 53 02 c0       	mov    edx,0xc0025314
c001f5d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d4:	89 10                	mov    DWORD PTR [eax],edx
c001f5d6:	90                   	nop
c001f5d7:	83 c4 0c             	add    esp,0xc
c001f5da:	c3                   	ret    
c001f5db:	90                   	nop

c001f5dc <SATAPI::diskRemoved()>:
c001f5dc:	83 ec 18             	sub    esp,0x18
c001f5df:	68 74 52 02 c0       	push   0xc0025274
c001f5e4:	e8 3f d4 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001f5e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f5ed:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c001f5f4:	83 c4 1c             	add    esp,0x1c
c001f5f7:	c3                   	ret    

c001f5f8 <SATAPI::diskInserted()>:
c001f5f8:	53                   	push   ebx
c001f5f9:	83 ec 14             	sub    esp,0x14
c001f5fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f600:	68 8b 52 02 c0       	push   0xc002528b
c001f605:	e8 1e d4 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001f60a:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c001f611:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f614:	e8 fd ec fe ff       	call   c000e316 <PhysicalDisk::startCache()>
c001f619:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001f61d:	83 c4 18             	add    esp,0x18
c001f620:	5b                   	pop    ebx
c001f621:	e9 2c 0d ff ff       	jmp    c0010352 <createPartitionsForDisk(PhysicalDisk*)>

c001f626 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f626:	55                   	push   ebp
c001f627:	57                   	push   edi
c001f628:	56                   	push   esi
c001f629:	53                   	push   ebx
c001f62a:	83 ec 34             	sub    esp,0x34
c001f62d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f631:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f635:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001f639:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f63d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f641:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f647:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f64d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f651:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f657:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f65b:	c1 e0 07             	shl    eax,0x7
c001f65e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f662:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f666:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f670:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f674:	8d 58 02             	lea    ebx,[eax+0x2]
c001f677:	c1 e3 07             	shl    ebx,0x7
c001f67a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001f67e:	53                   	push   ebx
c001f67f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f685:	e8 ee eb ff ff       	call   c001e278 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f68a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f68e:	83 c4 10             	add    esp,0x10
c001f691:	b8 01 00 00 00       	mov    eax,0x1
c001f696:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f69b:	0f 84 85 01 00 00    	je     c001f826 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f6a1:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f6a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f6a9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f6af:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f6b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6b9:	c1 e1 05             	shl    ecx,0x5
c001f6bc:	01 c8                	add    eax,ecx
c001f6be:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f6c0:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f6c6:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f6cc:	89 08                	mov    DWORD PTR [eax],ecx
c001f6ce:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f6d4:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f6da:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f6e0:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f6e3:	8d 7b 40             	lea    edi,[ebx+0x40]
c001f6e6:	50                   	push   eax
c001f6e7:	68 90 00 00 00       	push   0x90
c001f6ec:	6a 00                	push   0x0
c001f6ee:	53                   	push   ebx
c001f6ef:	e8 90 0f fe ff       	call   c0000684 <memset>
c001f6f4:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001f6f8:	b9 0c 00 00 00       	mov    ecx,0xc
c001f6fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f6ff:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c001f705:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001f709:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001f70f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001f713:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f717:	48                   	dec    eax
c001f718:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f71d:	89 c1                	mov    ecx,eax
c001f71f:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001f725:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f72a:	09 c8                	or     eax,ecx
c001f72c:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001f732:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001f735:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001f73c:	66 25 00 7f          	and    ax,0x7f00
c001f740:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001f744:	66 0d 27 80          	or     ax,0x8027
c001f748:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001f74c:	66 89 03             	mov    WORD PTR [ebx],ax
c001f74f:	89 d0                	mov    eax,edx
c001f751:	c1 ea 18             	shr    edx,0x18
c001f754:	c1 e8 10             	shr    eax,0x10
c001f757:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001f75a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001f75d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001f761:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001f764:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f768:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001f76b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f76f:	83 c4 10             	add    esp,0x10
c001f772:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001f776:	31 c0                	xor    eax,eax
c001f778:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f77c:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c001f782:	80 e2 88             	and    dl,0x88
c001f785:	74 0a                	je     c001f791 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001f787:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f78c:	74 0a                	je     c001f798 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c001f78e:	40                   	inc    eax
c001f78f:	eb eb                	jmp    c001f77c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c001f791:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f796:	75 0f                	jne    c001f7a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c001f798:	83 ec 0c             	sub    esp,0xc
c001f79b:	68 11 52 02 c0       	push   0xc0025211
c001f7a0:	e8 64 4b ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001f7a5:	eb 3f                	jmp    c001f7e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001f7a7:	ba 01 00 00 00       	mov    edx,0x1
c001f7ac:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f7b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7b4:	d3 e2                	shl    edx,cl
c001f7b6:	c1 e0 07             	shl    eax,0x7
c001f7b9:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c001f7bf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f7c3:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c001f7c9:	85 ca                	test   edx,ecx
c001f7cb:	74 23                	je     c001f7f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001f7cd:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c001f7d3:	0f ba e1 1e          	bt     ecx,0x1e
c001f7d7:	73 ea                	jae    c001f7c3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c001f7d9:	83 ec 0c             	sub    esp,0xc
c001f7dc:	68 a3 52 02 c0       	push   0xc00252a3
c001f7e1:	e8 42 d2 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c001f7e6:	83 c4 10             	add    esp,0x10
c001f7e9:	b8 01 00 00 00       	mov    eax,0x1
c001f7ee:	eb 36                	jmp    c001f826 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f7f0:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001f7f6:	0f ba e0 1e          	bt     eax,0x1e
c001f7fa:	73 0a                	jae    c001f806 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c001f7fc:	83 ec 0c             	sub    esp,0xc
c001f7ff:	68 b6 52 02 c0       	push   0xc00252b6
c001f804:	eb db                	jmp    c001f7e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c001f806:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f80b:	74 17                	je     c001f824 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f80d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f812:	74 10                	je     c001f824 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f814:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c001f81a:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f81e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001f822:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f824:	31 c0                	xor    eax,eax
c001f826:	83 c4 2c             	add    esp,0x2c
c001f829:	5b                   	pop    ebx
c001f82a:	5e                   	pop    esi
c001f82b:	5f                   	pop    edi
c001f82c:	5d                   	pop    ebp
c001f82d:	c3                   	ret    

c001f82e <SATAPI::eject()>:
c001f82e:	57                   	push   edi
c001f82f:	b9 03 00 00 00       	mov    ecx,0x3
c001f834:	53                   	push   ebx
c001f835:	83 ec 14             	sub    esp,0x14
c001f838:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f83c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f840:	fc                   	cld    
c001f841:	31 c0                	xor    eax,eax
c001f843:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f845:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f84a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f84f:	50                   	push   eax
c001f850:	6a 00                	push   0x0
c001f852:	6a 00                	push   0x0
c001f854:	6a 00                	push   0x0
c001f856:	6a 00                	push   0x0
c001f858:	6a 02                	push   0x2
c001f85a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f85e:	50                   	push   eax
c001f85f:	53                   	push   ebx
c001f860:	e8 c1 fd ff ff       	call   c001f626 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f865:	83 c4 14             	add    esp,0x14
c001f868:	53                   	push   ebx
c001f869:	e8 6e fd ff ff       	call   c001f5dc <SATAPI::diskRemoved()>
c001f86e:	83 c4 24             	add    esp,0x24
c001f871:	31 c0                	xor    eax,eax
c001f873:	5b                   	pop    ebx
c001f874:	5f                   	pop    edi
c001f875:	c3                   	ret    

c001f876 <SATAPI::detectMedia()>:
c001f876:	56                   	push   esi
c001f877:	53                   	push   ebx
c001f878:	83 ec 28             	sub    esp,0x28
c001f87b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f87f:	6a 0c                	push   0xc
c001f881:	6a 00                	push   0x0
c001f883:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f887:	56                   	push   esi
c001f888:	e8 f7 0d fe ff       	call   c0000684 <memset>
c001f88d:	83 c4 0c             	add    esp,0xc
c001f890:	6a 00                	push   0x0
c001f892:	6a 00                	push   0x0
c001f894:	6a 00                	push   0x0
c001f896:	6a 00                	push   0x0
c001f898:	6a 00                	push   0x0
c001f89a:	56                   	push   esi
c001f89b:	53                   	push   ebx
c001f89c:	e8 85 fd ff ff       	call   c001f626 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f8a1:	83 c4 1c             	add    esp,0x1c
c001f8a4:	6a 0c                	push   0xc
c001f8a6:	6a 00                	push   0x0
c001f8a8:	56                   	push   esi
c001f8a9:	e8 d6 0d fe ff       	call   c0000684 <memset>
c001f8ae:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f8b3:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f8b8:	83 c4 0c             	add    esp,0xc
c001f8bb:	6a 01                	push   0x1
c001f8bd:	8d 44 24 16          	lea    eax,[esp+0x16]
c001f8c1:	50                   	push   eax
c001f8c2:	6a 00                	push   0x0
c001f8c4:	6a 00                	push   0x0
c001f8c6:	6a 12                	push   0x12
c001f8c8:	56                   	push   esi
c001f8c9:	53                   	push   ebx
c001f8ca:	e8 57 fd ff ff       	call   c001f626 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f8cf:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f8d3:	83 c4 20             	add    esp,0x20
c001f8d6:	83 e0 7f             	and    eax,0x7f
c001f8d9:	3c 70                	cmp    al,0x70
c001f8db:	74 15                	je     c001f8f2 <SATAPI::detectMedia()+0x7c>
c001f8dd:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f8e4:	75 0c                	jne    c001f8f2 <SATAPI::detectMedia()+0x7c>
c001f8e6:	83 ec 0c             	sub    esp,0xc
c001f8e9:	53                   	push   ebx
c001f8ea:	e8 09 fd ff ff       	call   c001f5f8 <SATAPI::diskInserted()>
c001f8ef:	83 c4 10             	add    esp,0x10
c001f8f2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f8f6:	83 e0 0f             	and    eax,0xf
c001f8f9:	3c 02                	cmp    al,0x2
c001f8fb:	75 1b                	jne    c001f918 <SATAPI::detectMedia()+0xa2>
c001f8fd:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f902:	75 2d                	jne    c001f931 <SATAPI::detectMedia()+0xbb>
c001f904:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f90b:	74 24                	je     c001f931 <SATAPI::detectMedia()+0xbb>
c001f90d:	83 ec 0c             	sub    esp,0xc
c001f910:	53                   	push   ebx
c001f911:	e8 c6 fc ff ff       	call   c001f5dc <SATAPI::diskRemoved()>
c001f916:	eb 16                	jmp    c001f92e <SATAPI::detectMedia()+0xb8>
c001f918:	84 c0                	test   al,al
c001f91a:	75 15                	jne    c001f931 <SATAPI::detectMedia()+0xbb>
c001f91c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f923:	75 0c                	jne    c001f931 <SATAPI::detectMedia()+0xbb>
c001f925:	83 ec 0c             	sub    esp,0xc
c001f928:	53                   	push   ebx
c001f929:	e8 ca fc ff ff       	call   c001f5f8 <SATAPI::diskInserted()>
c001f92e:	83 c4 10             	add    esp,0x10
c001f931:	83 c4 24             	add    esp,0x24
c001f934:	5b                   	pop    ebx
c001f935:	5e                   	pop    esi
c001f936:	c3                   	ret    
c001f937:	90                   	nop

c001f938 <SATAPI::open(int, int, void*)>:
c001f938:	56                   	push   esi
c001f939:	53                   	push   ebx
c001f93a:	50                   	push   eax
c001f93b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f93f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f943:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f94d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f953:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f95d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f961:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f96b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f971:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f978:	e8 42 a4 fe ff       	call   c0009dbf <Phys::allocatePage()>
c001f97d:	89 c6                	mov    esi,eax
c001f97f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f985:	81 c6 00 10 00 00    	add    esi,0x1000
c001f98b:	e8 2f a4 fe ff       	call   c0009dbf <Phys::allocatePage()>
c001f990:	39 c6                	cmp    esi,eax
c001f992:	74 10                	je     c001f9a4 <SATAPI::open(int, int, void*)+0x6c>
c001f994:	83 ec 0c             	sub    esp,0xc
c001f997:	68 cb 52 02 c0       	push   0xc00252cb
c001f99c:	e8 68 49 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001f9a1:	83 c4 10             	add    esp,0x10
c001f9a4:	83 ec 0c             	sub    esp,0xc
c001f9a7:	6a 02                	push   0x2
c001f9a9:	e8 9f bc fe ff       	call   c000b64d <Virt::allocateKernelVirtualPages(int)>
c001f9ae:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f9b4:	6a 03                	push   0x3
c001f9b6:	50                   	push   eax
c001f9b7:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c001f9bd:	ff 35 90 65 02 c0    	push   DWORD PTR ds:0xc0026590
c001f9c3:	e8 2c c3 fe ff       	call   c000bcf4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f9c8:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001f9cf:	83 c4 14             	add    esp,0x14
c001f9d2:	53                   	push   ebx
c001f9d3:	e8 9e fe ff ff       	call   c001f876 <SATAPI::detectMedia()>
c001f9d8:	83 c4 14             	add    esp,0x14
c001f9db:	31 c0                	xor    eax,eax
c001f9dd:	5b                   	pop    ebx
c001f9de:	5e                   	pop    esi
c001f9df:	c3                   	ret    

c001f9e0 <SATAPI::read(unsigned long long, int, void*)>:
c001f9e0:	55                   	push   ebp
c001f9e1:	57                   	push   edi
c001f9e2:	56                   	push   esi
c001f9e3:	53                   	push   ebx
c001f9e4:	83 ec 1c             	sub    esp,0x1c
c001f9e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f9eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f9ef:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f9f3:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001f9fa:	74 19                	je     c001fa15 <SATAPI::read(unsigned long long, int, void*)+0x35>
c001f9fc:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c001fa01:	7e 2e                	jle    c001fa31 <SATAPI::read(unsigned long long, int, void*)+0x51>
c001fa03:	83 ec 0c             	sub    esp,0xc
c001fa06:	68 e1 52 02 c0       	push   0xc00252e1
c001fa0b:	e8 f9 48 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c001fa10:	83 c4 10             	add    esp,0x10
c001fa13:	eb 1c                	jmp    c001fa31 <SATAPI::read(unsigned long long, int, void*)+0x51>
c001fa15:	83 ec 0c             	sub    esp,0xc
c001fa18:	55                   	push   ebp
c001fa19:	e8 58 fe ff ff       	call   c001f876 <SATAPI::detectMedia()>
c001fa1e:	83 c4 10             	add    esp,0x10
c001fa21:	b8 02 00 00 00       	mov    eax,0x2
c001fa26:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001fa2d:	75 cd                	jne    c001f9fc <SATAPI::read(unsigned long long, int, void*)+0x1c>
c001fa2f:	eb 49                	jmp    c001fa7a <SATAPI::read(unsigned long long, int, void*)+0x9a>
c001fa31:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fa35:	b9 03 00 00 00       	mov    ecx,0x3
c001fa3a:	fc                   	cld    
c001fa3b:	31 c0                	xor    eax,eax
c001fa3d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fa3f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001fa44:	89 d8                	mov    eax,ebx
c001fa46:	86 e0                	xchg   al,ah
c001fa48:	c1 c0 10             	rol    eax,0x10
c001fa4b:	86 e0                	xchg   al,ah
c001fa4d:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c001fa51:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001fa55:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001fa59:	50                   	push   eax
c001fa5a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fa5e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fa62:	56                   	push   esi
c001fa63:	53                   	push   ebx
c001fa64:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fa68:	c1 e0 0b             	shl    eax,0xb
c001fa6b:	50                   	push   eax
c001fa6c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fa70:	50                   	push   eax
c001fa71:	55                   	push   ebp
c001fa72:	e8 af fb ff ff       	call   c001f626 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fa77:	83 c4 20             	add    esp,0x20
c001fa7a:	83 c4 1c             	add    esp,0x1c
c001fa7d:	5b                   	pop    ebx
c001fa7e:	5e                   	pop    esi
c001fa7f:	5f                   	pop    edi
c001fa80:	5d                   	pop    ebp
c001fa81:	c3                   	ret    
c001fa82:	66 90                	xchg   ax,ax

c001fa84 <AVX::open(int, int, void*)>:
c001fa84:	83 ec 0c             	sub    esp,0xc
c001fa87:	e8 6c 11 00 00       	call   c0020bf8 <avxInit>
c001fa8c:	b8 00 00 00 00       	mov    eax,0x0
c001fa91:	83 c4 0c             	add    esp,0xc
c001fa94:	c3                   	ret    
c001fa95:	90                   	nop
c001fa96:	66 90                	xchg   ax,ax

c001fa98 <AVX::close(int, int, void*)>:
c001fa98:	83 ec 0c             	sub    esp,0xc
c001fa9b:	e8 59 11 00 00       	call   c0020bf9 <avxClose>
c001faa0:	b8 00 00 00 00       	mov    eax,0x0
c001faa5:	83 c4 0c             	add    esp,0xc
c001faa8:	c3                   	ret    
c001faa9:	90                   	nop
c001faaa:	66 90                	xchg   ax,ax

c001faac <AVX::available()>:
c001faac:	83 ec 0c             	sub    esp,0xc
c001faaf:	e8 3c 11 00 00       	call   c0020bf0 <avxDetect>
c001fab4:	85 c0                	test   eax,eax
c001fab6:	0f 95 c0             	setne  al
c001fab9:	83 c4 0c             	add    esp,0xc
c001fabc:	c3                   	ret    
c001fabd:	90                   	nop
c001fabe:	66 90                	xchg   ax,ax

c001fac0 <AVX::save(void*)>:
c001fac0:	83 ec 0c             	sub    esp,0xc
c001fac3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fac7:	83 ec 0c             	sub    esp,0xc
c001faca:	50                   	push   eax
c001facb:	e8 26 11 00 00       	call   c0020bf6 <avxSave>
c001fad0:	83 c4 10             	add    esp,0x10
c001fad3:	90                   	nop
c001fad4:	83 c4 0c             	add    esp,0xc
c001fad7:	c3                   	ret    

c001fad8 <AVX::load(void*)>:
c001fad8:	83 ec 0c             	sub    esp,0xc
c001fadb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fadf:	83 ec 0c             	sub    esp,0xc
c001fae2:	50                   	push   eax
c001fae3:	e8 0f 11 00 00       	call   c0020bf7 <avxLoad>
c001fae8:	83 c4 10             	add    esp,0x10
c001faeb:	90                   	nop
c001faec:	83 c4 0c             	add    esp,0xc
c001faef:	c3                   	ret    

c001faf0 <AVX::AVX()>:
c001faf0:	83 ec 0c             	sub    esp,0xc
c001faf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf7:	83 ec 08             	sub    esp,0x8
c001fafa:	68 44 53 02 c0       	push   0xc0025344
c001faff:	50                   	push   eax
c001fb00:	e8 87 e8 fe ff       	call   c000e38c <FPU::FPU(char const*)>
c001fb05:	83 c4 10             	add    esp,0x10
c001fb08:	ba 54 53 02 c0       	mov    edx,0xc0025354
c001fb0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb11:	89 10                	mov    DWORD PTR [eax],edx
c001fb13:	90                   	nop
c001fb14:	83 c4 0c             	add    esp,0xc
c001fb17:	c3                   	ret    

c001fb18 <MMX::available()>:
c001fb18:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c001fb1d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fb23:	83 e0 20             	and    eax,0x20
c001fb26:	84 c0                	test   al,al
c001fb28:	0f 95 c0             	setne  al
c001fb2b:	c3                   	ret    

c001fb2c <MMX::open(int, int, void*)>:
c001fb2c:	83 ec 0c             	sub    esp,0xc
c001fb2f:	e8 4e 11 00 00       	call   c0020c82 <x87Init>
c001fb34:	b8 00 00 00 00       	mov    eax,0x0
c001fb39:	83 c4 0c             	add    esp,0xc
c001fb3c:	c3                   	ret    
c001fb3d:	90                   	nop
c001fb3e:	66 90                	xchg   ax,ax

c001fb40 <MMX::close(int, int, void*)>:
c001fb40:	83 ec 0c             	sub    esp,0xc
c001fb43:	e8 54 11 00 00       	call   c0020c9c <x87Close>
c001fb48:	b8 00 00 00 00       	mov    eax,0x0
c001fb4d:	83 c4 0c             	add    esp,0xc
c001fb50:	c3                   	ret    
c001fb51:	90                   	nop
c001fb52:	66 90                	xchg   ax,ax

c001fb54 <MMX::save(void*)>:
c001fb54:	83 ec 0c             	sub    esp,0xc
c001fb57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb5b:	83 ec 0c             	sub    esp,0xc
c001fb5e:	50                   	push   eax
c001fb5f:	e8 0d 11 00 00       	call   c0020c71 <x87Save>
c001fb64:	83 c4 10             	add    esp,0x10
c001fb67:	90                   	nop
c001fb68:	83 c4 0c             	add    esp,0xc
c001fb6b:	c3                   	ret    

c001fb6c <MMX::load(void*)>:
c001fb6c:	83 ec 0c             	sub    esp,0xc
c001fb6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb73:	83 ec 0c             	sub    esp,0xc
c001fb76:	50                   	push   eax
c001fb77:	e8 fe 10 00 00       	call   c0020c7a <x87Load>
c001fb7c:	83 c4 10             	add    esp,0x10
c001fb7f:	90                   	nop
c001fb80:	83 c4 0c             	add    esp,0xc
c001fb83:	c3                   	ret    

c001fb84 <MMX::MMX()>:
c001fb84:	83 ec 0c             	sub    esp,0xc
c001fb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8b:	83 ec 08             	sub    esp,0x8
c001fb8e:	68 84 53 02 c0       	push   0xc0025384
c001fb93:	50                   	push   eax
c001fb94:	e8 f3 e7 fe ff       	call   c000e38c <FPU::FPU(char const*)>
c001fb99:	83 c4 10             	add    esp,0x10
c001fb9c:	ba 94 53 02 c0       	mov    edx,0xc0025394
c001fba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba5:	89 10                	mov    DWORD PTR [eax],edx
c001fba7:	90                   	nop
c001fba8:	83 c4 0c             	add    esp,0xc
c001fbab:	c3                   	ret    

c001fbac <SSE::open(int, int, void*)>:
c001fbac:	83 ec 0c             	sub    esp,0xc
c001fbaf:	e8 80 10 00 00       	call   c0020c34 <sseInit>
c001fbb4:	b8 00 00 00 00       	mov    eax,0x0
c001fbb9:	83 c4 0c             	add    esp,0xc
c001fbbc:	c3                   	ret    
c001fbbd:	90                   	nop
c001fbbe:	66 90                	xchg   ax,ax

c001fbc0 <SSE::close(int, int, void*)>:
c001fbc0:	83 ec 0c             	sub    esp,0xc
c001fbc3:	e8 7c 10 00 00       	call   c0020c44 <sseClose>
c001fbc8:	b8 00 00 00 00       	mov    eax,0x0
c001fbcd:	83 c4 0c             	add    esp,0xc
c001fbd0:	c3                   	ret    
c001fbd1:	90                   	nop
c001fbd2:	66 90                	xchg   ax,ax

c001fbd4 <SSE::available()>:
c001fbd4:	83 ec 1c             	sub    esp,0x1c
c001fbd7:	e8 34 10 00 00       	call   c0020c10 <absolutelyNoChanceInHell>
c001fbdc:	85 c0                	test   eax,eax
c001fbde:	0f 95 c0             	setne  al
c001fbe1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fbe5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001fbe9:	83 c4 1c             	add    esp,0x1c
c001fbec:	c3                   	ret    
c001fbed:	90                   	nop
c001fbee:	66 90                	xchg   ax,ax

c001fbf0 <SSE::save(void*)>:
c001fbf0:	83 ec 0c             	sub    esp,0xc
c001fbf3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fbf7:	83 ec 0c             	sub    esp,0xc
c001fbfa:	50                   	push   eax
c001fbfb:	e8 28 10 00 00       	call   c0020c28 <sseSave>
c001fc00:	83 c4 10             	add    esp,0x10
c001fc03:	90                   	nop
c001fc04:	83 c4 0c             	add    esp,0xc
c001fc07:	c3                   	ret    

c001fc08 <SSE::load(void*)>:
c001fc08:	83 ec 0c             	sub    esp,0xc
c001fc0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc0f:	83 ec 0c             	sub    esp,0xc
c001fc12:	50                   	push   eax
c001fc13:	e8 16 10 00 00       	call   c0020c2e <sseLoad>
c001fc18:	83 c4 10             	add    esp,0x10
c001fc1b:	90                   	nop
c001fc1c:	83 c4 0c             	add    esp,0xc
c001fc1f:	c3                   	ret    

c001fc20 <SSE::SSE()>:
c001fc20:	83 ec 0c             	sub    esp,0xc
c001fc23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc27:	83 ec 08             	sub    esp,0x8
c001fc2a:	68 c4 53 02 c0       	push   0xc00253c4
c001fc2f:	50                   	push   eax
c001fc30:	e8 57 e7 fe ff       	call   c000e38c <FPU::FPU(char const*)>
c001fc35:	83 c4 10             	add    esp,0x10
c001fc38:	ba d4 53 02 c0       	mov    edx,0xc00253d4
c001fc3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc41:	89 10                	mov    DWORD PTR [eax],edx
c001fc43:	90                   	nop
c001fc44:	83 c4 0c             	add    esp,0xc
c001fc47:	c3                   	ret    

c001fc48 <x87::open(int, int, void*)>:
c001fc48:	83 ec 0c             	sub    esp,0xc
c001fc4b:	e8 32 10 00 00       	call   c0020c82 <x87Init>
c001fc50:	b8 00 00 00 00       	mov    eax,0x0
c001fc55:	83 c4 0c             	add    esp,0xc
c001fc58:	c3                   	ret    
c001fc59:	90                   	nop
c001fc5a:	66 90                	xchg   ax,ax

c001fc5c <x87::close(int, int, void*)>:
c001fc5c:	83 ec 0c             	sub    esp,0xc
c001fc5f:	e8 38 10 00 00       	call   c0020c9c <x87Close>
c001fc64:	b8 00 00 00 00       	mov    eax,0x0
c001fc69:	83 c4 0c             	add    esp,0xc
c001fc6c:	c3                   	ret    
c001fc6d:	90                   	nop
c001fc6e:	66 90                	xchg   ax,ax

c001fc70 <x87::available()>:
c001fc70:	83 ec 0c             	sub    esp,0xc
c001fc73:	e8 de 0f 00 00       	call   c0020c56 <x87Detect>
c001fc78:	85 c0                	test   eax,eax
c001fc7a:	0f 95 c0             	setne  al
c001fc7d:	83 c4 0c             	add    esp,0xc
c001fc80:	c3                   	ret    
c001fc81:	90                   	nop
c001fc82:	66 90                	xchg   ax,ax

c001fc84 <x87::save(void*)>:
c001fc84:	83 ec 0c             	sub    esp,0xc
c001fc87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc8b:	83 ec 0c             	sub    esp,0xc
c001fc8e:	50                   	push   eax
c001fc8f:	e8 dd 0f 00 00       	call   c0020c71 <x87Save>
c001fc94:	83 c4 10             	add    esp,0x10
c001fc97:	90                   	nop
c001fc98:	83 c4 0c             	add    esp,0xc
c001fc9b:	c3                   	ret    

c001fc9c <x87::load(void*)>:
c001fc9c:	83 ec 0c             	sub    esp,0xc
c001fc9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fca3:	83 ec 0c             	sub    esp,0xc
c001fca6:	50                   	push   eax
c001fca7:	e8 ce 0f 00 00       	call   c0020c7a <x87Load>
c001fcac:	83 c4 10             	add    esp,0x10
c001fcaf:	90                   	nop
c001fcb0:	83 c4 0c             	add    esp,0xc
c001fcb3:	c3                   	ret    

c001fcb4 <x87::x87()>:
c001fcb4:	83 ec 0c             	sub    esp,0xc
c001fcb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcbb:	83 ec 08             	sub    esp,0x8
c001fcbe:	68 04 54 02 c0       	push   0xc0025404
c001fcc3:	50                   	push   eax
c001fcc4:	e8 c3 e6 fe ff       	call   c000e38c <FPU::FPU(char const*)>
c001fcc9:	83 c4 10             	add    esp,0x10
c001fccc:	ba 14 54 02 c0       	mov    edx,0xc0025414
c001fcd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd5:	89 10                	mov    DWORD PTR [eax],edx
c001fcd7:	90                   	nop
c001fcd8:	83 c4 0c             	add    esp,0xc
c001fcdb:	c3                   	ret    

c001fcdc <APIC::disable()>:
c001fcdc:	90                   	nop
c001fcdd:	c3                   	ret    

c001fcde <APIC::close(int, int, void*)>:
c001fcde:	55                   	push   ebp
c001fcdf:	89 e5                	mov    ebp,esp
c001fce1:	83 ec 08             	sub    esp,0x8
c001fce4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fce7:	8b 00                	mov    eax,DWORD PTR [eax]
c001fce9:	83 c0 3c             	add    eax,0x3c
c001fcec:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcee:	83 ec 0c             	sub    esp,0xc
c001fcf1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fcf4:	ff d0                	call   eax
c001fcf6:	83 c4 10             	add    esp,0x10
c001fcf9:	b8 00 00 00 00       	mov    eax,0x0
c001fcfe:	c9                   	leave  
c001fcff:	c3                   	ret    

c001fd00 <IOAPIC::close(int, int, void*)>:
c001fd00:	b8 00 00 00 00       	mov    eax,0x0
c001fd05:	c3                   	ret    

c001fd06 <APIC::io_wait()>:
c001fd06:	eb 00                	jmp    c001fd08 <APIC::io_wait()+0x2>
c001fd08:	eb 00                	jmp    c001fd0a <APIC::io_wait()+0x4>
c001fd0a:	90                   	nop
c001fd0b:	c3                   	ret    

c001fd0c <APIC::getBase()>:
c001fd0c:	55                   	push   ebp
c001fd0d:	89 e5                	mov    ebp,esp
c001fd0f:	83 ec 18             	sub    esp,0x18
c001fd12:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c001fd17:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fd1d:	83 e0 08             	and    eax,0x8
c001fd20:	84 c0                	test   al,al
c001fd22:	75 07                	jne    c001fd2b <APIC::getBase()+0x1f>
c001fd24:	b8 00 00 00 00       	mov    eax,0x0
c001fd29:	eb 21                	jmp    c001fd4c <APIC::getBase()+0x40>
c001fd2b:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c001fd30:	83 ec 08             	sub    esp,0x8
c001fd33:	6a 1b                	push   0x1b
c001fd35:	50                   	push   eax
c001fd36:	e8 e9 91 fe ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c001fd3b:	83 c4 10             	add    esp,0x10
c001fd3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001fd41:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001fd44:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fd47:	25 00 f0 ff ff       	and    eax,0xfffff000
c001fd4c:	c9                   	leave  
c001fd4d:	c3                   	ret    

c001fd4e <APIC::eoi(unsigned char)>:
c001fd4e:	55                   	push   ebp
c001fd4f:	89 e5                	mov    ebp,esp
c001fd51:	83 ec 28             	sub    esp,0x28
c001fd54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fd57:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001fd5a:	83 ec 0c             	sub    esp,0xc
c001fd5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd60:	e8 a7 ff ff ff       	call   c001fd0c <APIC::getBase()>
c001fd65:	83 c4 10             	add    esp,0x10
c001fd68:	05 b0 00 00 00       	add    eax,0xb0
c001fd6d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001fd70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001fd73:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fd79:	90                   	nop
c001fd7a:	c9                   	leave  
c001fd7b:	c3                   	ret    

c001fd7c <APIC::open(int, int, void*)>:
c001fd7c:	55                   	push   ebp
c001fd7d:	89 e5                	mov    ebp,esp
c001fd7f:	57                   	push   edi
c001fd80:	56                   	push   esi
c001fd81:	53                   	push   ebx
c001fd82:	83 ec 2c             	sub    esp,0x2c
c001fd85:	83 ec 0c             	sub    esp,0xc
c001fd88:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd8b:	e8 7c ff ff ff       	call   c001fd0c <APIC::getBase()>
c001fd90:	83 c4 10             	add    esp,0x10
c001fd93:	89 c2                	mov    edx,eax
c001fd95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd98:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fd9e:	0f b6 f8             	movzx  edi,al
c001fda1:	89 d0                	mov    eax,edx
c001fda3:	ba 00 00 00 00       	mov    edx,0x0
c001fda8:	89 c1                	mov    ecx,eax
c001fdaa:	80 e5 ff             	and    ch,0xff
c001fdad:	89 cb                	mov    ebx,ecx
c001fdaf:	0f b6 f2             	movzx  esi,dl
c001fdb2:	89 d8                	mov    eax,ebx
c001fdb4:	89 f2                	mov    edx,esi
c001fdb6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fdb9:	8d 5f 08             	lea    ebx,[edi+0x8]
c001fdbc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001fdc0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001fdc4:	83 e0 00             	and    eax,0x0
c001fdc7:	09 d0                	or     eax,edx
c001fdc9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001fdcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fdd0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fdd6:	8d 50 01             	lea    edx,[eax+0x1]
c001fdd9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fddc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001fde2:	0f b6 d0             	movzx  edx,al
c001fde5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fde8:	83 c2 08             	add    edx,0x8
c001fdeb:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001fdef:	0f b6 c9             	movzx  ecx,cl
c001fdf2:	81 c9 00 00 01 00    	or     ecx,0x10000
c001fdf8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001fdfc:	83 ec 0c             	sub    esp,0xc
c001fdff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fe02:	e8 05 ff ff ff       	call   c001fd0c <APIC::getBase()>
c001fe07:	83 c4 10             	add    esp,0x10
c001fe0a:	05 f0 00 00 00       	add    eax,0xf0
c001fe0f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001fe12:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fe15:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe17:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001fe1a:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c001fe21:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c001fe28:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fe2b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001fe2e:	89 10                	mov    DWORD PTR [eax],edx
c001fe30:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c001fe37:	a1 d0 6c 02 c0       	mov    eax,ds:0xc0026cd0
c001fe3c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c001fe3f:	7d 7c                	jge    c001febd <APIC::open(int, int, void*)+0x141>
c001fe41:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe44:	8b 04 85 e0 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9320]
c001fe4b:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c001fe4e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe51:	8b 04 85 e0 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9320]
c001fe58:	c1 e8 08             	shr    eax,0x8
c001fe5b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c001fe5f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe62:	8b 04 85 e0 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9320]
c001fe69:	c1 e8 18             	shr    eax,0x18
c001fe6c:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c001fe6f:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c001fe73:	75 40                	jne    c001feb5 <APIC::open(int, int, void*)+0x139>
c001fe75:	83 ec 0c             	sub    esp,0xc
c001fe78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fe7b:	e8 8c fe ff ff       	call   c001fd0c <APIC::getBase()>
c001fe80:	83 c4 10             	add    esp,0x10
c001fe83:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c001fe87:	75 07                	jne    c001fe90 <APIC::open(int, int, void*)+0x114>
c001fe89:	ba 60 03 00 00       	mov    edx,0x360
c001fe8e:	eb 05                	jmp    c001fe95 <APIC::open(int, int, void*)+0x119>
c001fe90:	ba 50 03 00 00       	mov    edx,0x350
c001fe95:	01 d0                	add    eax,edx
c001fe97:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001fe9a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fe9d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe9f:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c001fea2:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c001fea9:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c001fead:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001feb0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001feb3:	89 10                	mov    DWORD PTR [eax],edx
c001feb5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c001feb8:	e9 7a ff ff ff       	jmp    c001fe37 <APIC::open(int, int, void*)+0xbb>
c001febd:	b8 00 00 00 00       	mov    eax,0x0
c001fec2:	8d 65 f4             	lea    esp,[ebp-0xc]
c001fec5:	5b                   	pop    ebx
c001fec6:	5e                   	pop    esi
c001fec7:	5f                   	pop    edi
c001fec8:	5d                   	pop    ebp
c001fec9:	c3                   	ret    

c001feca <IOAPIC::IOAPIC()>:
c001feca:	83 ec 0c             	sub    esp,0xc
c001fecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed1:	83 ec 08             	sub    esp,0x8
c001fed4:	68 44 54 02 c0       	push   0xc0025444
c001fed9:	50                   	push   eax
c001feda:	e8 9b e1 fe ff       	call   c000e07a <Device::Device(char const*)>
c001fedf:	83 c4 10             	add    esp,0x10
c001fee2:	ba 6c 55 02 c0       	mov    edx,0xc002556c
c001fee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feeb:	89 10                	mov    DWORD PTR [eax],edx
c001feed:	90                   	nop
c001feee:	83 c4 0c             	add    esp,0xc
c001fef1:	c3                   	ret    

c001fef2 <APIC::APIC()>:
c001fef2:	53                   	push   ebx
c001fef3:	83 ec 18             	sub    esp,0x18
c001fef6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fefa:	83 ec 08             	sub    esp,0x8
c001fefd:	68 4c 54 02 c0       	push   0xc002544c
c001ff02:	50                   	push   eax
c001ff03:	e8 ea e8 fe ff       	call   c000e7f2 <InterruptController::InterruptController(char const*)>
c001ff08:	83 c4 10             	add    esp,0x10
c001ff0b:	ba 24 55 02 c0       	mov    edx,0xc0025524
c001ff10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff14:	89 10                	mov    DWORD PTR [eax],edx
c001ff16:	a0 a0 83 02 c0       	mov    al,ds:0xc00283a0
c001ff1b:	83 f0 01             	xor    eax,0x1
c001ff1e:	84 c0                	test   al,al
c001ff20:	0f 84 a1 00 00 00    	je     c001ffc7 <APIC::APIC()+0xd5>
c001ff26:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ff2b:	a0 80 6d 02 c0       	mov    al,ds:0xc0026d80
c001ff30:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001ff34:	0f 83 86 00 00 00    	jae    c001ffc0 <APIC::APIC()+0xce>
c001ff3a:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001ff42:	83 ec 0c             	sub    esp,0xc
c001ff45:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ff49:	e8 75 9a fe ff       	call   c00099c3 <malloc>
c001ff4e:	83 c4 10             	add    esp,0x10
c001ff51:	89 c3                	mov    ebx,eax
c001ff53:	83 ec 0c             	sub    esp,0xc
c001ff56:	53                   	push   ebx
c001ff57:	e8 6e ff ff ff       	call   c001feca <IOAPIC::IOAPIC()>
c001ff5c:	83 c4 10             	add    esp,0x10
c001ff5f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ff63:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ff68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff6c:	89 14 85 80 83 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7c80],edx
c001ff73:	a1 60 83 02 c0       	mov    eax,ds:0xc0028360
c001ff78:	40                   	inc    eax
c001ff79:	a3 60 83 02 c0       	mov    ds:0xc0028360,eax
c001ff7e:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c001ff83:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ff89:	83 ec 08             	sub    esp,0x8
c001ff8c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ff90:	50                   	push   eax
c001ff91:	e8 e0 de fe ff       	call   c000de76 <Device::addChild(Device*)>
c001ff96:	83 c4 10             	add    esp,0x10
c001ff99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff9d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff9f:	83 c0 08             	add    eax,0x8
c001ffa2:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffa4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ffa9:	6a 00                	push   0x0
c001ffab:	6a 00                	push   0x0
c001ffad:	52                   	push   edx
c001ffae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ffb2:	ff d0                	call   eax
c001ffb4:	83 c4 10             	add    esp,0x10
c001ffb7:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001ffbb:	e9 6b ff ff ff       	jmp    c001ff2b <APIC::APIC()+0x39>
c001ffc0:	c6 05 a0 83 02 c0 01 	mov    BYTE PTR ds:0xc00283a0,0x1
c001ffc7:	90                   	nop
c001ffc8:	83 c4 18             	add    esp,0x18
c001ffcb:	5b                   	pop    ebx
c001ffcc:	c3                   	ret    
c001ffcd:	90                   	nop

c001ffce <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ffce:	55                   	push   ebp
c001ffcf:	89 e5                	mov    ebp,esp
c001ffd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffd4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ffda:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ffdd:	72 1d                	jb     c001fffc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ffdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffe2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ffe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffeb:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001fff1:	01 d0                	add    eax,edx
c001fff3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001fff6:	73 04                	jae    c001fffc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001fff8:	b0 01                	mov    al,0x1
c001fffa:	eb 02                	jmp    c001fffe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001fffc:	b0 00                	mov    al,0x0
c001fffe:	5d                   	pop    ebp
c001ffff:	c3                   	ret    

c0020000 <IOAPIC::read(int)>:
c0020000:	55                   	push   ebp
c0020001:	89 e5                	mov    ebp,esp
c0020003:	83 ec 10             	sub    esp,0x10
c0020006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020009:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002000f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020012:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020015:	0f b6 d0             	movzx  edx,al
c0020018:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002001b:	89 10                	mov    DWORD PTR [eax],edx
c002001d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020020:	83 c0 10             	add    eax,0x10
c0020023:	8b 00                	mov    eax,DWORD PTR [eax]
c0020025:	c9                   	leave  
c0020026:	c3                   	ret    
c0020027:	90                   	nop

c0020028 <IOAPIC::open(int, int, void*)>:
c0020028:	55                   	push   ebp
c0020029:	89 e5                	mov    ebp,esp
c002002b:	57                   	push   edi
c002002c:	56                   	push   esi
c002002d:	53                   	push   ebx
c002002e:	83 ec 0c             	sub    esp,0xc
c0020031:	83 ec 0c             	sub    esp,0xc
c0020034:	68 77 54 02 c0       	push   0xc0025477
c0020039:	e8 ea c9 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c002003e:	83 c4 10             	add    esp,0x10
c0020041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020044:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020047:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002004d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020050:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020056:	8b 14 85 c0 6d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9240]
c002005d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020060:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020069:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002006f:	8b 14 85 40 6e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd91c0]
c0020076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020079:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002007f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020082:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0020088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002008b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020091:	0f b6 f8             	movzx  edi,al
c0020094:	89 d0                	mov    eax,edx
c0020096:	ba 00 00 00 00       	mov    edx,0x0
c002009b:	89 c1                	mov    ecx,eax
c002009d:	80 e5 ff             	and    ch,0xff
c00200a0:	89 cb                	mov    ebx,ecx
c00200a2:	0f b6 f2             	movzx  esi,dl
c00200a5:	89 d8                	mov    eax,ebx
c00200a7:	89 f2                	mov    edx,esi
c00200a9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00200ac:	8d 5f 08             	lea    ebx,[edi+0x8]
c00200af:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00200b3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00200b7:	83 e0 00             	and    eax,0x0
c00200ba:	09 d0                	or     eax,edx
c00200bc:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00200c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200c3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00200c9:	8d 50 01             	lea    edx,[eax+0x1]
c00200cc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00200cf:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00200d5:	0f b6 d0             	movzx  edx,al
c00200d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200db:	83 c2 08             	add    edx,0x8
c00200de:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00200e2:	0f b6 c9             	movzx  ecx,cl
c00200e5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00200eb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00200ef:	83 ec 08             	sub    esp,0x8
c00200f2:	6a 01                	push   0x1
c00200f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00200f7:	e8 04 ff ff ff       	call   c0020000 <IOAPIC::read(int)>
c00200fc:	83 c4 10             	add    esp,0x10
c00200ff:	c1 f8 10             	sar    eax,0x10
c0020102:	0f b6 c0             	movzx  eax,al
c0020105:	8d 50 01             	lea    edx,[eax+0x1]
c0020108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002010b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020111:	b8 00 00 00 00       	mov    eax,0x0
c0020116:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020119:	5b                   	pop    ebx
c002011a:	5e                   	pop    esi
c002011b:	5f                   	pop    edi
c002011c:	5d                   	pop    ebp
c002011d:	c3                   	ret    

c002011e <IOAPIC::write(int, int)>:
c002011e:	55                   	push   ebp
c002011f:	89 e5                	mov    ebp,esp
c0020121:	83 ec 10             	sub    esp,0x10
c0020124:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020127:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002012d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020130:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020133:	0f b6 d0             	movzx  edx,al
c0020136:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020139:	89 10                	mov    DWORD PTR [eax],edx
c002013b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002013e:	8d 50 10             	lea    edx,[eax+0x10]
c0020141:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020144:	89 02                	mov    DWORD PTR [edx],eax
c0020146:	90                   	nop
c0020147:	c9                   	leave  
c0020148:	c3                   	ret    
c0020149:	90                   	nop

c002014a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002014a:	55                   	push   ebp
c002014b:	89 e5                	mov    ebp,esp
c002014d:	53                   	push   ebx
c002014e:	83 ec 2c             	sub    esp,0x2c
c0020151:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020154:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0020157:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002015a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002015d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020160:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020163:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020166:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020169:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002016c:	88 d8                	mov    al,bl
c002016e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020171:	88 c8                	mov    al,cl
c0020173:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020176:	88 d0                	mov    al,dl
c0020178:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002017b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002017f:	83 c0 08             	add    eax,0x8
c0020182:	01 c0                	add    eax,eax
c0020184:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020187:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002018b:	83 c0 08             	add    eax,0x8
c002018e:	01 c0                	add    eax,eax
c0020190:	40                   	inc    eax
c0020191:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020194:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020197:	50                   	push   eax
c0020198:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002019b:	e8 60 fe ff ff       	call   c0020000 <IOAPIC::read(int)>
c00201a0:	83 c4 08             	add    esp,0x8
c00201a3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00201a6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00201ad:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00201b0:	c1 e0 18             	shl    eax,0x18
c00201b3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00201b6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00201b9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00201bc:	52                   	push   edx
c00201bd:	50                   	push   eax
c00201be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00201c1:	e8 58 ff ff ff       	call   c002011e <IOAPIC::write(int, int)>
c00201c6:	83 c4 0c             	add    esp,0xc
c00201c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00201cc:	50                   	push   eax
c00201cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00201d0:	e8 2b fe ff ff       	call   c0020000 <IOAPIC::read(int)>
c00201d5:	83 c4 08             	add    esp,0x8
c00201d8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00201db:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00201e2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00201e9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00201f0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00201f4:	74 09                	je     c00201ff <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00201f6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00201fd:	eb 07                	jmp    c0020206 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00201ff:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0020206:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002020a:	74 09                	je     c0020215 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002020c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0020213:	eb 07                	jmp    c002021c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0020215:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002021c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0020223:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0020227:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002022a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002022d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020230:	52                   	push   edx
c0020231:	50                   	push   eax
c0020232:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020235:	e8 e4 fe ff ff       	call   c002011e <IOAPIC::write(int, int)>
c002023a:	83 c4 0c             	add    esp,0xc
c002023d:	90                   	nop
c002023e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020241:	c9                   	leave  
c0020242:	c3                   	ret    
c0020243:	90                   	nop

c0020244 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0020244:	55                   	push   ebp
c0020245:	89 e5                	mov    ebp,esp
c0020247:	57                   	push   edi
c0020248:	56                   	push   esi
c0020249:	53                   	push   ebx
c002024a:	83 ec 2c             	sub    esp,0x2c
c002024d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020250:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020253:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0020257:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002025b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002025f:	74 5a                	je     c00202bb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0020261:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0020265:	7f 44                	jg     c00202ab <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0020267:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002026a:	05 20 5b 02 c0       	add    eax,0xc0025b20
c002026f:	8a 00                	mov    al,BYTE PTR [eax]
c0020271:	0f b6 c0             	movzx  eax,al
c0020274:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0020277:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002027a:	66 8b 84 00 60 6d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd92a0]
c0020282:	0f b7 c0             	movzx  eax,ax
c0020285:	83 e0 02             	and    eax,0x2
c0020288:	85 c0                	test   eax,eax
c002028a:	74 04                	je     c0020290 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c002028c:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0020290:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020293:	66 8b 84 00 60 6d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd92a0]
c002029b:	0f b7 c0             	movzx  eax,ax
c002029e:	83 e0 08             	and    eax,0x8
c00202a1:	85 c0                	test   eax,eax
c00202a3:	74 16                	je     c00202bb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00202a5:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00202a9:	eb 10                	jmp    c00202bb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00202ab:	83 ec 0c             	sub    esp,0xc
c00202ae:	68 88 54 02 c0       	push   0xc0025488
c00202b3:	e8 51 40 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c00202b8:	83 c4 10             	add    esp,0x10
c00202bb:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00202bf:	a1 60 83 02 c0       	mov    eax,ds:0xc0028360
c00202c4:	83 ec 08             	sub    esp,0x8
c00202c7:	50                   	push   eax
c00202c8:	68 c0 54 02 c0       	push   0xc00254c0
c00202cd:	e8 56 c7 fe ff       	call   c000ca28 <Dbg::kprintf(char const*, ...)>
c00202d2:	83 c4 10             	add    esp,0x10
c00202d5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00202dc:	a1 60 83 02 c0       	mov    eax,ds:0xc0028360
c00202e1:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00202e4:	7d 67                	jge    c002034d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00202e6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00202e9:	8b 04 85 80 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c80]
c00202f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00202f3:	83 ec 08             	sub    esp,0x8
c00202f6:	52                   	push   edx
c00202f7:	50                   	push   eax
c00202f8:	e8 d1 fc ff ff       	call   c001ffce <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00202fd:	83 c4 10             	add    esp,0x10
c0020300:	84 c0                	test   al,al
c0020302:	74 44                	je     c0020348 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0020304:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0020307:	8b 1c 85 80 83 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7c80]
c002030e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0020312:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0020315:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0020319:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002031c:	83 c0 20             	add    eax,0x20
c002031f:	0f b6 f0             	movzx  esi,al
c0020322:	b8 00 00 00 00       	mov    eax,0x0
c0020327:	99                   	cdq    
c0020328:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002032b:	0f b6 c9             	movzx  ecx,cl
c002032e:	83 ec 04             	sub    esp,0x4
c0020331:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020334:	57                   	push   edi
c0020335:	56                   	push   esi
c0020336:	52                   	push   edx
c0020337:	50                   	push   eax
c0020338:	51                   	push   ecx
c0020339:	53                   	push   ebx
c002033a:	e8 0b fe ff ff       	call   c002014a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002033f:	83 c4 20             	add    esp,0x20
c0020342:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0020346:	eb 05                	jmp    c002034d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0020348:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002034b:	eb 8f                	jmp    c00202dc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c002034d:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0020350:	83 f0 01             	xor    eax,0x1
c0020353:	84 c0                	test   al,al
c0020355:	74 10                	je     c0020367 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0020357:	83 ec 0c             	sub    esp,0xc
c002035a:	68 d7 54 02 c0       	push   0xc00254d7
c002035f:	e8 a5 3f ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0020364:	83 c4 10             	add    esp,0x10
c0020367:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002036b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0020372:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0020376:	7f 65                	jg     c00203dd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0020378:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002037b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002037e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0020385:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020388:	01 ca                	add    edx,ecx
c002038a:	83 c2 54             	add    edx,0x54
c002038d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0020391:	85 c0                	test   eax,eax
c0020393:	75 43                	jne    c00203d8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0020395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020398:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002039b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00203a2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00203a5:	01 ca                	add    edx,ecx
c00203a7:	8d 4a 54             	lea    ecx,[edx+0x54]
c00203aa:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00203ad:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00203b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00203b4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00203b7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00203be:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00203c1:	01 ca                	add    edx,ecx
c00203c3:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00203c9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00203cc:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00203d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00203d3:	83 e8 20             	sub    eax,0x20
c00203d6:	eb 1a                	jmp    c00203f2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00203d8:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00203db:	eb 95                	jmp    c0020372 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00203dd:	83 ec 0c             	sub    esp,0xc
c00203e0:	68 e4 54 02 c0       	push   0xc00254e4
c00203e5:	e8 1f 3f ff ff       	call   c0014309 <Krnl::panic(char const*)>
c00203ea:	83 c4 10             	add    esp,0x10
c00203ed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00203f2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00203f5:	5b                   	pop    ebx
c00203f6:	5e                   	pop    esi
c00203f7:	5f                   	pop    edi
c00203f8:	5d                   	pop    ebp
c00203f9:	c3                   	ret    

c00203fa <PIC::disable()>:
c00203fa:	55                   	push   ebp
c00203fb:	89 e5                	mov    ebp,esp
c00203fd:	83 ec 10             	sub    esp,0x10
c0020400:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0020406:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002040a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002040d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0020411:	ee                   	out    dx,al
c0020412:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0020418:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002041c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002041f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0020423:	ee                   	out    dx,al
c0020424:	90                   	nop
c0020425:	c9                   	leave  
c0020426:	c3                   	ret    
c0020427:	90                   	nop

c0020428 <PIC::close(int, int, void*)>:
c0020428:	55                   	push   ebp
c0020429:	89 e5                	mov    ebp,esp
c002042b:	83 ec 08             	sub    esp,0x8
c002042e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020431:	8b 00                	mov    eax,DWORD PTR [eax]
c0020433:	83 c0 3c             	add    eax,0x3c
c0020436:	8b 00                	mov    eax,DWORD PTR [eax]
c0020438:	83 ec 0c             	sub    esp,0xc
c002043b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002043e:	ff d0                	call   eax
c0020440:	83 c4 10             	add    esp,0x10
c0020443:	b8 00 00 00 00       	mov    eax,0x0
c0020448:	c9                   	leave  
c0020449:	c3                   	ret    

c002044a <PIC::PIC()>:
c002044a:	83 ec 0c             	sub    esp,0xc
c002044d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020451:	83 ec 08             	sub    esp,0x8
c0020454:	68 90 55 02 c0       	push   0xc0025590
c0020459:	50                   	push   eax
c002045a:	e8 93 e3 fe ff       	call   c000e7f2 <InterruptController::InterruptController(char const*)>
c002045f:	83 c4 10             	add    esp,0x10
c0020462:	ba bc 55 02 c0       	mov    edx,0xc00255bc
c0020467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002046b:	89 10                	mov    DWORD PTR [eax],edx
c002046d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020471:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020477:	0f b6 d0             	movzx  edx,al
c002047a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002047e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0020485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020489:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002048f:	0f b6 d0             	movzx  edx,al
c0020492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020496:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002049b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002049f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204a5:	8d 50 01             	lea    edx,[eax+0x1]
c00204a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00204ac:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00204b2:	0f b6 d0             	movzx  edx,al
c00204b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00204bd:	83 e1 3f             	and    ecx,0x3f
c00204c0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00204c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204c8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204ce:	0f b6 d0             	movzx  edx,al
c00204d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204d5:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00204dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204e0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204e6:	0f b6 d0             	movzx  edx,al
c00204e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ed:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00204f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204f6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204fc:	8d 50 01             	lea    edx,[eax+0x1]
c00204ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020503:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020509:	0f b6 d0             	movzx  edx,al
c002050c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020510:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020514:	83 e1 3f             	and    ecx,0x3f
c0020517:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002051b:	90                   	nop
c002051c:	83 c4 0c             	add    esp,0xc
c002051f:	c3                   	ret    

c0020520 <PIC::ioWait()>:
c0020520:	eb 00                	jmp    c0020522 <PIC::ioWait()+0x2>
c0020522:	eb 00                	jmp    c0020524 <PIC::ioWait()+0x4>
c0020524:	90                   	nop
c0020525:	c3                   	ret    

c0020526 <PIC::getIRQReg(int)>:
c0020526:	55                   	push   ebp
c0020527:	89 e5                	mov    ebp,esp
c0020529:	83 ec 10             	sub    esp,0x10
c002052c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002052f:	0f b6 c0             	movzx  eax,al
c0020532:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0020538:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002053b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002053e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0020542:	ee                   	out    dx,al
c0020543:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020546:	0f b6 c0             	movzx  eax,al
c0020549:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002054f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0020552:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0020555:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0020559:	ee                   	out    dx,al
c002055a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0020560:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0020564:	89 c2                	mov    edx,eax
c0020566:	ec                   	in     al,dx
c0020567:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002056a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002056d:	0f b6 c0             	movzx  eax,al
c0020570:	c1 e0 08             	shl    eax,0x8
c0020573:	89 c1                	mov    ecx,eax
c0020575:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002057b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002057f:	89 c2                	mov    edx,eax
c0020581:	ec                   	in     al,dx
c0020582:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0020585:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0020588:	0f b6 c0             	movzx  eax,al
c002058b:	09 c8                	or     eax,ecx
c002058d:	c9                   	leave  
c002058e:	c3                   	ret    
c002058f:	90                   	nop

c0020590 <PIC::eoi(unsigned char)>:
c0020590:	55                   	push   ebp
c0020591:	89 e5                	mov    ebp,esp
c0020593:	83 ec 14             	sub    esp,0x14
c0020596:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020599:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c002059c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00205a0:	75 1e                	jne    c00205c0 <PIC::eoi(unsigned char)+0x30>
c00205a2:	6a 0b                	push   0xb
c00205a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00205a7:	e8 7a ff ff ff       	call   c0020526 <PIC::getIRQReg(int)>
c00205ac:	83 c4 08             	add    esp,0x8
c00205af:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00205b3:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00205b7:	25 80 00 00 00       	and    eax,0x80
c00205bc:	85 c0                	test   eax,eax
c00205be:	74 5f                	je     c002061f <PIC::eoi(unsigned char)+0x8f>
c00205c0:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00205c4:	75 2d                	jne    c00205f3 <PIC::eoi(unsigned char)+0x63>
c00205c6:	6a 0b                	push   0xb
c00205c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00205cb:	e8 56 ff ff ff       	call   c0020526 <PIC::getIRQReg(int)>
c00205d0:	83 c4 08             	add    esp,0x8
c00205d3:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00205d7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00205da:	66 85 c0             	test   ax,ax
c00205dd:	78 14                	js     c00205f3 <PIC::eoi(unsigned char)+0x63>
c00205df:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00205e5:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00205e9:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00205ec:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00205f0:	ee                   	out    dx,al
c00205f1:	eb 2d                	jmp    c0020620 <PIC::eoi(unsigned char)+0x90>
c00205f3:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00205f7:	76 12                	jbe    c002060b <PIC::eoi(unsigned char)+0x7b>
c00205f9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00205ff:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0020603:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0020606:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002060a:	ee                   	out    dx,al
c002060b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0020611:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0020615:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0020618:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002061c:	ee                   	out    dx,al
c002061d:	eb 01                	jmp    c0020620 <PIC::eoi(unsigned char)+0x90>
c002061f:	90                   	nop
c0020620:	c9                   	leave  
c0020621:	c3                   	ret    

c0020622 <PIC::remap()>:
c0020622:	55                   	push   ebp
c0020623:	89 e5                	mov    ebp,esp
c0020625:	83 ec 48             	sub    esp,0x48
c0020628:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002062f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0020636:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002063c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002063f:	89 c2                	mov    edx,eax
c0020641:	ec                   	in     al,dx
c0020642:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0020645:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0020648:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002064b:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0020651:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0020654:	89 c2                	mov    edx,eax
c0020656:	ec                   	in     al,dx
c0020657:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002065a:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002065d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0020660:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0020666:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002066a:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002066d:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0020670:	ee                   	out    dx,al
c0020671:	83 ec 0c             	sub    esp,0xc
c0020674:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020677:	e8 a4 fe ff ff       	call   c0020520 <PIC::ioWait()>
c002067c:	83 c4 10             	add    esp,0x10
c002067f:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0020685:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0020689:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c002068c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002068f:	ee                   	out    dx,al
c0020690:	83 ec 0c             	sub    esp,0xc
c0020693:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020696:	e8 85 fe ff ff       	call   c0020520 <PIC::ioWait()>
c002069b:	83 c4 10             	add    esp,0x10
c002069e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00206a1:	0f b6 c0             	movzx  eax,al
c00206a4:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00206aa:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00206ad:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00206b0:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00206b3:	ee                   	out    dx,al
c00206b4:	83 ec 0c             	sub    esp,0xc
c00206b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206ba:	e8 61 fe ff ff       	call   c0020520 <PIC::ioWait()>
c00206bf:	83 c4 10             	add    esp,0x10
c00206c2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00206c5:	0f b6 c0             	movzx  eax,al
c00206c8:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00206ce:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00206d1:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00206d4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00206d7:	ee                   	out    dx,al
c00206d8:	83 ec 0c             	sub    esp,0xc
c00206db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206de:	e8 3d fe ff ff       	call   c0020520 <PIC::ioWait()>
c00206e3:	83 c4 10             	add    esp,0x10
c00206e6:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00206ec:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00206f0:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00206f3:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00206f6:	ee                   	out    dx,al
c00206f7:	83 ec 0c             	sub    esp,0xc
c00206fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206fd:	e8 1e fe ff ff       	call   c0020520 <PIC::ioWait()>
c0020702:	83 c4 10             	add    esp,0x10
c0020705:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002070b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002070f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0020712:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020715:	ee                   	out    dx,al
c0020716:	83 ec 0c             	sub    esp,0xc
c0020719:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002071c:	e8 ff fd ff ff       	call   c0020520 <PIC::ioWait()>
c0020721:	83 c4 10             	add    esp,0x10
c0020724:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002072a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002072e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0020731:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0020734:	ee                   	out    dx,al
c0020735:	83 ec 0c             	sub    esp,0xc
c0020738:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002073b:	e8 e0 fd ff ff       	call   c0020520 <PIC::ioWait()>
c0020740:	83 c4 10             	add    esp,0x10
c0020743:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0020749:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002074d:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0020750:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0020753:	ee                   	out    dx,al
c0020754:	83 ec 0c             	sub    esp,0xc
c0020757:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002075a:	e8 c1 fd ff ff       	call   c0020520 <PIC::ioWait()>
c002075f:	83 c4 10             	add    esp,0x10
c0020762:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0020766:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002076c:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002076f:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0020772:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020775:	ee                   	out    dx,al
c0020776:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002077a:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0020780:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0020783:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0020786:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020789:	ee                   	out    dx,al
c002078a:	90                   	nop
c002078b:	c9                   	leave  
c002078c:	c3                   	ret    
c002078d:	90                   	nop

c002078e <PIC::open(int, int, void*)>:
c002078e:	55                   	push   ebp
c002078f:	89 e5                	mov    ebp,esp
c0020791:	83 ec 18             	sub    esp,0x18
c0020794:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002079a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002079e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00207a1:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00207a5:	ee                   	out    dx,al
c00207a6:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00207ac:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00207b0:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00207b3:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00207b7:	ee                   	out    dx,al
c00207b8:	83 ec 0c             	sub    esp,0xc
c00207bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00207be:	e8 5f fe ff ff       	call   c0020622 <PIC::remap()>
c00207c3:	83 c4 10             	add    esp,0x10
c00207c6:	b8 00 00 00 00       	mov    eax,0x0
c00207cb:	c9                   	leave  
c00207cc:	c3                   	ret    
c00207cd:	66 90                	xchg   ax,ax
c00207cf:	90                   	nop

c00207d0 <APICTimer::close(int, int, void*)>:
c00207d0:	b8 00 00 00 00       	mov    eax,0x0
c00207d5:	c3                   	ret    
c00207d6:	66 90                	xchg   ax,ax

c00207d8 <apicTimerHandler(regs*, void*)>:
c00207d8:	83 ec 0c             	sub    esp,0xc
c00207db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207df:	8b 00                	mov    eax,DWORD PTR [eax]
c00207e1:	99                   	cdq    
c00207e2:	52                   	push   edx
c00207e3:	50                   	push   eax
c00207e4:	6a 00                	push   0x0
c00207e6:	68 00 ca 9a 3b       	push   0x3b9aca00
c00207eb:	e8 a4 07 00 00       	call   c0020f94 <__udivdi3>
c00207f0:	83 c4 10             	add    esp,0x10
c00207f3:	83 ec 08             	sub    esp,0x8
c00207f6:	52                   	push   edx
c00207f7:	50                   	push   eax
c00207f8:	e8 00 ff fe ff       	call   c00106fd <timerHandler(unsigned long long)>
c00207fd:	83 c4 10             	add    esp,0x10
c0020800:	90                   	nop
c0020801:	83 c4 0c             	add    esp,0xc
c0020804:	c3                   	ret    
c0020805:	90                   	nop
c0020806:	66 90                	xchg   ax,ax

c0020808 <APICTimer::write(int)>:
c0020808:	53                   	push   ebx
c0020809:	83 ec 28             	sub    esp,0x28
c002080c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020810:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0020814:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002081a:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c002081f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020825:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002082b:	83 ec 0c             	sub    esp,0xc
c002082e:	50                   	push   eax
c002082f:	e8 d8 f4 ff ff       	call   c001fd0c <APIC::getBase()>
c0020834:	83 c4 10             	add    esp,0x10
c0020837:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002083b:	a1 90 6a 02 c0       	mov    eax,ds:0xc0026a90
c0020840:	8b 15 94 6a 02 c0    	mov    edx,DWORD PTR ds:0xc0026a94
c0020846:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002084a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002084e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020852:	05 e0 03 00 00       	add    eax,0x3e0
c0020857:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002085d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020861:	05 80 03 00 00       	add    eax,0x380
c0020866:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002086c:	fb                   	sti    
c002086d:	8d 76 00             	lea    esi,[esi+0x0]
c0020870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020874:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020878:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002087d:	83 d2 00             	adc    edx,0x0
c0020880:	89 c1                	mov    ecx,eax
c0020882:	89 d3                	mov    ebx,edx
c0020884:	a1 90 6a 02 c0       	mov    eax,ds:0xc0026a90
c0020889:	8b 15 94 6a 02 c0    	mov    edx,DWORD PTR ds:0xc0026a94
c002088f:	39 c8                	cmp    eax,ecx
c0020891:	89 d0                	mov    eax,edx
c0020893:	19 d8                	sbb    eax,ebx
c0020895:	73 05                	jae    c002089c <APICTimer::write(int)+0x94>
c0020897:	eb d7                	jmp    c0020870 <APICTimer::write(int)+0x68>
c0020899:	8d 76 00             	lea    esi,[esi+0x0]
c002089c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208a0:	05 20 03 00 00       	add    eax,0x320
c00208a5:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00208ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208af:	05 90 03 00 00       	add    eax,0x390
c00208b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00208b6:	f7 d0                	not    eax
c00208b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208bc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00208c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208c4:	ba 00 00 00 00       	mov    edx,0x0
c00208c9:	f7 f3                	div    ebx
c00208cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00208cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00208d3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00208d9:	0d 00 00 02 00       	or     eax,0x20000
c00208de:	89 c2                	mov    edx,eax
c00208e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208e4:	05 20 03 00 00       	add    eax,0x320
c00208e9:	89 10                	mov    DWORD PTR [eax],edx
c00208eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208ef:	05 e0 03 00 00       	add    eax,0x3e0
c00208f4:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00208fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208fe:	05 80 03 00 00       	add    eax,0x380
c0020903:	89 c2                	mov    edx,eax
c0020905:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020909:	89 02                	mov    DWORD PTR [edx],eax
c002090b:	90                   	nop
c002090c:	83 c4 28             	add    esp,0x28
c002090f:	5b                   	pop    ebx
c0020910:	c3                   	ret    
c0020911:	90                   	nop
c0020912:	66 90                	xchg   ax,ax

c0020914 <APICTimer::open(int, int, void*)>:
c0020914:	57                   	push   edi
c0020915:	56                   	push   esi
c0020916:	53                   	push   ebx
c0020917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002091b:	8b 00                	mov    eax,DWORD PTR [eax]
c002091d:	83 c0 24             	add    eax,0x24
c0020920:	8b 00                	mov    eax,DWORD PTR [eax]
c0020922:	83 ec 08             	sub    esp,0x8
c0020925:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020929:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002092d:	ff d0                	call   eax
c002092f:	83 c4 10             	add    esp,0x10
c0020932:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0020937:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002093d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0020943:	83 ec 0c             	sub    esp,0xc
c0020946:	50                   	push   eax
c0020947:	e8 c0 f3 ff ff       	call   c001fd0c <APIC::getBase()>
c002094c:	83 c4 10             	add    esp,0x10
c002094f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0020955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020959:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002095f:	0f b6 f8             	movzx  edi,al
c0020962:	89 d0                	mov    eax,edx
c0020964:	ba 00 00 00 00       	mov    edx,0x0
c0020969:	89 c1                	mov    ecx,eax
c002096b:	80 e5 ff             	and    ch,0xff
c002096e:	89 cb                	mov    ebx,ecx
c0020970:	0f b6 f2             	movzx  esi,dl
c0020973:	89 d8                	mov    eax,ebx
c0020975:	89 f2                	mov    edx,esi
c0020977:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002097b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002097e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020982:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020986:	83 e0 00             	and    eax,0x0
c0020989:	09 d0                	or     eax,edx
c002098b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002098f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020993:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020999:	8d 50 01             	lea    edx,[eax+0x1]
c002099c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00209a0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00209a6:	0f b6 d0             	movzx  edx,al
c00209a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209ad:	83 c2 08             	add    edx,0x8
c00209b0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00209b4:	0f b6 c9             	movzx  ecx,cl
c00209b7:	81 c9 00 00 01 00    	or     ecx,0x10000
c00209bd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00209c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00209c9:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00209cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00209d7:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00209dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00209e1:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00209e7:	83 ec 0c             	sub    esp,0xc
c00209ea:	51                   	push   ecx
c00209eb:	6a 01                	push   0x1
c00209ed:	68 d8 07 02 c0       	push   0xc00207d8
c00209f2:	52                   	push   edx
c00209f3:	50                   	push   eax
c00209f4:	e8 f5 d3 fe ff       	call   c000ddee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00209f9:	83 c4 20             	add    esp,0x20
c00209fc:	89 c2                	mov    edx,eax
c00209fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a02:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020a08:	b8 00 00 00 00       	mov    eax,0x0
c0020a0d:	5b                   	pop    ebx
c0020a0e:	5e                   	pop    esi
c0020a0f:	5f                   	pop    edi
c0020a10:	c3                   	ret    
c0020a11:	90                   	nop
c0020a12:	66 90                	xchg   ax,ax

c0020a14 <APICTimer::APICTimer()>:
c0020a14:	83 ec 0c             	sub    esp,0xc
c0020a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a1b:	83 ec 08             	sub    esp,0x8
c0020a1e:	68 fc 55 02 c0       	push   0xc00255fc
c0020a23:	50                   	push   eax
c0020a24:	e8 43 fc fe ff       	call   c001066c <Timer::Timer(char const*)>
c0020a29:	83 c4 10             	add    esp,0x10
c0020a2c:	ba 10 56 02 c0       	mov    edx,0xc0025610
c0020a31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a35:	89 10                	mov    DWORD PTR [eax],edx
c0020a37:	90                   	nop
c0020a38:	83 c4 0c             	add    esp,0xc
c0020a3b:	c3                   	ret    

c0020a3c <PIT::write(int)>:
c0020a3c:	83 ec 10             	sub    esp,0x10
c0020a3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020a47:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020a4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020a51:	a3 a4 83 02 c0       	mov    ds:0xc00283a4,eax
c0020a56:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0020a5b:	99                   	cdq    
c0020a5c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020a60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a64:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020a6b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020a70:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020a74:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020a79:	ee                   	out    dx,al
c0020a7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a7e:	0f b6 c0             	movzx  eax,al
c0020a81:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020a88:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020a8c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020a90:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020a95:	ee                   	out    dx,al
c0020a96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a9a:	c1 f8 08             	sar    eax,0x8
c0020a9d:	0f b6 c0             	movzx  eax,al
c0020aa0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020aa7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020aab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020aaf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020ab4:	ee                   	out    dx,al
c0020ab5:	90                   	nop
c0020ab6:	83 c4 10             	add    esp,0x10
c0020ab9:	c3                   	ret    
c0020aba:	66 90                	xchg   ax,ax

c0020abc <pitHandler(regs*, void*)>:
c0020abc:	83 ec 0c             	sub    esp,0xc
c0020abf:	a1 a4 83 02 c0       	mov    eax,ds:0xc00283a4
c0020ac4:	99                   	cdq    
c0020ac5:	52                   	push   edx
c0020ac6:	50                   	push   eax
c0020ac7:	6a 00                	push   0x0
c0020ac9:	68 00 ca 9a 3b       	push   0x3b9aca00
c0020ace:	e8 c1 04 00 00       	call   c0020f94 <__udivdi3>
c0020ad3:	83 c4 10             	add    esp,0x10
c0020ad6:	83 ec 08             	sub    esp,0x8
c0020ad9:	52                   	push   edx
c0020ada:	50                   	push   eax
c0020adb:	e8 1d fc fe ff       	call   c00106fd <timerHandler(unsigned long long)>
c0020ae0:	83 c4 10             	add    esp,0x10
c0020ae3:	90                   	nop
c0020ae4:	83 c4 0c             	add    esp,0xc
c0020ae7:	c3                   	ret    

c0020ae8 <PIT::open(int, int, void*)>:
c0020ae8:	83 ec 0c             	sub    esp,0xc
c0020aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aef:	8b 00                	mov    eax,DWORD PTR [eax]
c0020af1:	83 c0 24             	add    eax,0x24
c0020af4:	8b 00                	mov    eax,DWORD PTR [eax]
c0020af6:	83 ec 08             	sub    esp,0x8
c0020af9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020afd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b01:	ff d0                	call   eax
c0020b03:	83 c4 10             	add    esp,0x10
c0020b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b0a:	83 ec 0c             	sub    esp,0xc
c0020b0d:	6a 00                	push   0x0
c0020b0f:	6a 01                	push   0x1
c0020b11:	68 bc 0a 02 c0       	push   0xc0020abc
c0020b16:	6a 00                	push   0x0
c0020b18:	50                   	push   eax
c0020b19:	e8 d0 d2 fe ff       	call   c000ddee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020b1e:	83 c4 20             	add    esp,0x20
c0020b21:	89 c2                	mov    edx,eax
c0020b23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b27:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020b2d:	b8 00 00 00 00       	mov    eax,0x0
c0020b32:	83 c4 0c             	add    esp,0xc
c0020b35:	c3                   	ret    
c0020b36:	66 90                	xchg   ax,ax

c0020b38 <PIT::close(int, int, void*)>:
c0020b38:	83 ec 0c             	sub    esp,0xc
c0020b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b3f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b4d:	6a 01                	push   0x1
c0020b4f:	68 bc 0a 02 c0       	push   0xc0020abc
c0020b54:	6a 00                	push   0x0
c0020b56:	50                   	push   eax
c0020b57:	e8 dc d2 fe ff       	call   c000de38 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020b5c:	83 c4 10             	add    esp,0x10
c0020b5f:	b8 00 00 00 00       	mov    eax,0x0
c0020b64:	83 c4 0c             	add    esp,0xc
c0020b67:	c3                   	ret    

c0020b68 <PIT::PIT()>:
c0020b68:	83 ec 0c             	sub    esp,0xc
c0020b6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b6f:	83 ec 08             	sub    esp,0x8
c0020b72:	68 38 56 02 c0       	push   0xc0025638
c0020b77:	50                   	push   eax
c0020b78:	e8 ef fa fe ff       	call   c001066c <Timer::Timer(char const*)>
c0020b7d:	83 c4 10             	add    esp,0x10
c0020b80:	ba 60 56 02 c0       	mov    edx,0xc0025660
c0020b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b89:	89 10                	mov    DWORD PTR [eax],edx
c0020b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b8f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020b95:	0f b6 d0             	movzx  edx,al
c0020b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b9c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020ba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ba7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020bad:	0f b6 d0             	movzx  edx,al
c0020bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bb4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020bb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bbd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020bc3:	8d 50 01             	lea    edx,[eax+0x1]
c0020bc6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020bca:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020bd0:	0f b6 d0             	movzx  edx,al
c0020bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bd7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020bdb:	83 e1 3f             	and    ecx,0x3f
c0020bde:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020be2:	90                   	nop
c0020be3:	83 c4 0c             	add    esp,0xc
c0020be6:	c3                   	ret    
c0020be7:	66 90                	xchg   ax,ax
c0020be9:	66 90                	xchg   ax,ax
c0020beb:	66 90                	xchg   ax,ax
c0020bed:	66 90                	xchg   ax,ax
c0020bef:	90                   	nop

c0020bf0 <avxDetect>:
c0020bf0:	b8 00 00 00 00       	mov    eax,0x0
c0020bf5:	c3                   	ret    

c0020bf6 <avxSave>:
c0020bf6:	c3                   	ret    

c0020bf7 <avxLoad>:
c0020bf7:	c3                   	ret    

c0020bf8 <avxInit>:
c0020bf8:	c3                   	ret    

c0020bf9 <avxClose>:
c0020bf9:	c3                   	ret    

c0020bfa <wouldSheSayYes>:
c0020bfa:	c3                   	ret    
c0020bfb:	49                   	dec    ecx
c0020bfc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0020c00:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0020c04:	75 20                	jne    c0020c26 <sseDetect.noSSE+0x1>
c0020c06:	4e                   	dec    esi
c0020c07:	79 61                	jns    c0020c6a <x87Detect+0x14>
c0020c09:	68 2e 2e 2e 00       	push   0x2e2e2e
c0020c0e:	66 90                	xchg   ax,ax

c0020c10 <absolutelyNoChanceInHell>:
c0020c10:	b8 01 00 00 00       	mov    eax,0x1
c0020c15:	0f a2                	cpuid  
c0020c17:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0020c1d:	74 06                	je     c0020c25 <sseDetect.noSSE>
c0020c1f:	b8 01 00 00 00       	mov    eax,0x1
c0020c24:	c3                   	ret    

c0020c25 <sseDetect.noSSE>:
c0020c25:	31 c0                	xor    eax,eax
c0020c27:	c3                   	ret    

c0020c28 <sseSave>:
c0020c28:	0f ae 44 24 04       	fxsave [esp+0x4]
c0020c2d:	c3                   	ret    

c0020c2e <sseLoad>:
c0020c2e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0020c33:	c3                   	ret    

c0020c34 <sseInit>:
c0020c34:	e8 49 00 00 00       	call   c0020c82 <x87Init>
c0020c39:	0f 20 e0             	mov    eax,cr4
c0020c3c:	66 0d 00 06          	or     ax,0x600
c0020c40:	0f 22 e0             	mov    cr4,eax
c0020c43:	c3                   	ret    

c0020c44 <sseClose>:
c0020c44:	c3                   	ret    
c0020c45:	66 90                	xchg   ax,ax
c0020c47:	66 90                	xchg   ax,ax
c0020c49:	66 90                	xchg   ax,ax
c0020c4b:	66 90                	xchg   ax,ax
c0020c4d:	66 90                	xchg   ax,ax
c0020c4f:	90                   	nop

c0020c50 <value_37F>:
c0020c50:	7f 03                	jg     c0020c55 <value_37A+0x1>

c0020c52 <value_37E>:
c0020c52:	7e 03                	jle    c0020c57 <x87Detect+0x1>

c0020c54 <value_37A>:
c0020c54:	7a 03                	jp     c0020c59 <x87Detect+0x3>

c0020c56 <x87Detect>:
c0020c56:	b8 01 00 00 00       	mov    eax,0x1
c0020c5b:	0f a2                	cpuid  
c0020c5d:	f7 c2 01 00 00 00    	test   edx,0x1
c0020c63:	74 06                	je     c0020c6b <x87Detect.nox87>
c0020c65:	b8 01 00 00 00       	mov    eax,0x1
c0020c6a:	c3                   	ret    

c0020c6b <x87Detect.nox87>:
c0020c6b:	b8 00 00 00 00       	mov    eax,0x0
c0020c70:	c3                   	ret    

c0020c71 <x87Save>:
c0020c71:	55                   	push   ebp
c0020c72:	89 e5                	mov    ebp,esp
c0020c74:	9b dd 75 08          	fsave  [ebp+0x8]
c0020c78:	c9                   	leave  
c0020c79:	c3                   	ret    

c0020c7a <x87Load>:
c0020c7a:	55                   	push   ebp
c0020c7b:	89 e5                	mov    ebp,esp
c0020c7d:	dd 65 08             	frstor [ebp+0x8]
c0020c80:	c9                   	leave  
c0020c81:	c3                   	ret    

c0020c82 <x87Init>:
c0020c82:	9b db e3             	finit  
c0020c85:	0f 20 c0             	mov    eax,cr0
c0020c88:	66 25 fb ff          	and    ax,0xfffb
c0020c8c:	66 0d 22 00          	or     ax,0x22
c0020c90:	0f 22 c0             	mov    cr0,eax
c0020c93:	0f 06                	clts   
c0020c95:	d9 2d 54 0c 02 c0    	fldcw  WORD PTR ds:0xc0020c54
c0020c9b:	c3                   	ret    

c0020c9c <x87Close>:
c0020c9c:	c3                   	ret    
c0020c9d:	66 90                	xchg   ax,ax
c0020c9f:	90                   	nop

c0020ca0 <__do_global_ctors_aux>:
c0020ca0:	a1 3c 1e 02 c0       	mov    eax,ds:0xc0021e3c
c0020ca5:	83 f8 ff             	cmp    eax,0xffffffff
c0020ca8:	74 1a                	je     c0020cc4 <__do_global_ctors_aux+0x24>
c0020caa:	55                   	push   ebp
c0020cab:	89 e5                	mov    ebp,esp
c0020cad:	53                   	push   ebx
c0020cae:	52                   	push   edx
c0020caf:	bb 3c 1e 02 c0       	mov    ebx,0xc0021e3c
c0020cb4:	ff d0                	call   eax
c0020cb6:	83 eb 04             	sub    ebx,0x4
c0020cb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020cbb:	83 f8 ff             	cmp    eax,0xffffffff
c0020cbe:	75 f4                	jne    c0020cb4 <__do_global_ctors_aux+0x14>
c0020cc0:	58                   	pop    eax
c0020cc1:	5b                   	pop    ebx
c0020cc2:	5d                   	pop    ebp
c0020cc3:	c3                   	ret    
c0020cc4:	c3                   	ret    
c0020cc5:	66 90                	xchg   ax,ax
c0020cc7:	90                   	nop

c0020cc8 <__divdi3>:
c0020cc8:	55                   	push   ebp
c0020cc9:	57                   	push   edi
c0020cca:	56                   	push   esi
c0020ccb:	53                   	push   ebx
c0020ccc:	83 ec 1c             	sub    esp,0x1c
c0020ccf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0020cd3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020cd7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020cda:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020cde:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ce2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020ce6:	85 db                	test   ebx,ebx
c0020ce8:	0f 88 8e 00 00 00    	js     c0020d7c <__divdi3+0xb4>
c0020cee:	89 dd                	mov    ebp,ebx
c0020cf0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020cf8:	89 d3                	mov    ebx,edx
c0020cfa:	85 d2                	test   edx,edx
c0020cfc:	79 0d                	jns    c0020d0b <__divdi3+0x43>
c0020cfe:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0020d02:	f7 d8                	neg    eax
c0020d04:	83 d2 00             	adc    edx,0x0
c0020d07:	f7 da                	neg    edx
c0020d09:	89 d3                	mov    ebx,edx
c0020d0b:	89 c7                	mov    edi,eax
c0020d0d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020d10:	85 db                	test   ebx,ebx
c0020d12:	75 48                	jne    c0020d5c <__divdi3+0x94>
c0020d14:	39 ef                	cmp    edi,ebp
c0020d16:	76 24                	jbe    c0020d3c <__divdi3+0x74>
c0020d18:	89 ea                	mov    edx,ebp
c0020d1a:	f7 f7                	div    edi
c0020d1c:	89 c1                	mov    ecx,eax
c0020d1e:	31 f6                	xor    esi,esi
c0020d20:	89 c8                	mov    eax,ecx
c0020d22:	89 f2                	mov    edx,esi
c0020d24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020d28:	85 c9                	test   ecx,ecx
c0020d2a:	74 07                	je     c0020d33 <__divdi3+0x6b>
c0020d2c:	f7 d8                	neg    eax
c0020d2e:	83 d2 00             	adc    edx,0x0
c0020d31:	f7 da                	neg    edx
c0020d33:	83 c4 1c             	add    esp,0x1c
c0020d36:	5b                   	pop    ebx
c0020d37:	5e                   	pop    esi
c0020d38:	5f                   	pop    edi
c0020d39:	5d                   	pop    ebp
c0020d3a:	c3                   	ret    
c0020d3b:	90                   	nop
c0020d3c:	85 ff                	test   edi,edi
c0020d3e:	75 0b                	jne    c0020d4b <__divdi3+0x83>
c0020d40:	b8 01 00 00 00       	mov    eax,0x1
c0020d45:	31 d2                	xor    edx,edx
c0020d47:	f7 f3                	div    ebx
c0020d49:	89 c7                	mov    edi,eax
c0020d4b:	31 d2                	xor    edx,edx
c0020d4d:	89 e8                	mov    eax,ebp
c0020d4f:	f7 f7                	div    edi
c0020d51:	89 c6                	mov    esi,eax
c0020d53:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020d56:	f7 f7                	div    edi
c0020d58:	89 c1                	mov    ecx,eax
c0020d5a:	eb c4                	jmp    c0020d20 <__divdi3+0x58>
c0020d5c:	39 eb                	cmp    ebx,ebp
c0020d5e:	77 3c                	ja     c0020d9c <__divdi3+0xd4>
c0020d60:	0f bd f3             	bsr    esi,ebx
c0020d63:	83 f6 1f             	xor    esi,0x1f
c0020d66:	75 40                	jne    c0020da8 <__divdi3+0xe0>
c0020d68:	39 eb                	cmp    ebx,ebp
c0020d6a:	72 09                	jb     c0020d75 <__divdi3+0xad>
c0020d6c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020d6f:	0f 87 97 00 00 00    	ja     c0020e0c <__divdi3+0x144>
c0020d75:	b9 01 00 00 00       	mov    ecx,0x1
c0020d7a:	eb a4                	jmp    c0020d20 <__divdi3+0x58>
c0020d7c:	f7 d9                	neg    ecx
c0020d7e:	83 d3 00             	adc    ebx,0x0
c0020d81:	f7 db                	neg    ebx
c0020d83:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020d86:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020d8a:	89 dd                	mov    ebp,ebx
c0020d8c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0020d94:	e9 5f ff ff ff       	jmp    c0020cf8 <__divdi3+0x30>
c0020d99:	8d 76 00             	lea    esi,[esi+0x0]
c0020d9c:	31 f6                	xor    esi,esi
c0020d9e:	31 c9                	xor    ecx,ecx
c0020da0:	e9 7b ff ff ff       	jmp    c0020d20 <__divdi3+0x58>
c0020da5:	8d 76 00             	lea    esi,[esi+0x0]
c0020da8:	b8 20 00 00 00       	mov    eax,0x20
c0020dad:	29 f0                	sub    eax,esi
c0020daf:	89 f1                	mov    ecx,esi
c0020db1:	d3 e3                	shl    ebx,cl
c0020db3:	89 fa                	mov    edx,edi
c0020db5:	88 c1                	mov    cl,al
c0020db7:	d3 ea                	shr    edx,cl
c0020db9:	09 da                	or     edx,ebx
c0020dbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020dbf:	89 f1                	mov    ecx,esi
c0020dc1:	d3 e7                	shl    edi,cl
c0020dc3:	89 eb                	mov    ebx,ebp
c0020dc5:	88 c1                	mov    cl,al
c0020dc7:	d3 eb                	shr    ebx,cl
c0020dc9:	89 f1                	mov    ecx,esi
c0020dcb:	d3 e5                	shl    ebp,cl
c0020dcd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0020dd0:	88 c1                	mov    cl,al
c0020dd2:	d3 ea                	shr    edx,cl
c0020dd4:	09 d5                	or     ebp,edx
c0020dd6:	89 e8                	mov    eax,ebp
c0020dd8:	89 da                	mov    edx,ebx
c0020dda:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0020dde:	89 d3                	mov    ebx,edx
c0020de0:	89 c5                	mov    ebp,eax
c0020de2:	f7 e7                	mul    edi
c0020de4:	39 d3                	cmp    ebx,edx
c0020de6:	72 18                	jb     c0020e00 <__divdi3+0x138>
c0020de8:	74 0a                	je     c0020df4 <__divdi3+0x12c>
c0020dea:	89 e9                	mov    ecx,ebp
c0020dec:	31 f6                	xor    esi,esi
c0020dee:	e9 2d ff ff ff       	jmp    c0020d20 <__divdi3+0x58>
c0020df3:	90                   	nop
c0020df4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0020df7:	89 f1                	mov    ecx,esi
c0020df9:	d3 e7                	shl    edi,cl
c0020dfb:	39 c7                	cmp    edi,eax
c0020dfd:	73 eb                	jae    c0020dea <__divdi3+0x122>
c0020dff:	90                   	nop
c0020e00:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0020e03:	31 f6                	xor    esi,esi
c0020e05:	e9 16 ff ff ff       	jmp    c0020d20 <__divdi3+0x58>
c0020e0a:	66 90                	xchg   ax,ax
c0020e0c:	31 c9                	xor    ecx,ecx
c0020e0e:	e9 0d ff ff ff       	jmp    c0020d20 <__divdi3+0x58>
c0020e13:	90                   	nop

c0020e14 <__moddi3>:
c0020e14:	55                   	push   ebp
c0020e15:	57                   	push   edi
c0020e16:	56                   	push   esi
c0020e17:	53                   	push   ebx
c0020e18:	83 ec 2c             	sub    esp,0x2c
c0020e1b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020e1f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020e23:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020e27:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0020e2b:	85 db                	test   ebx,ebx
c0020e2d:	0f 88 85 00 00 00    	js     c0020eb8 <__moddi3+0xa4>
c0020e33:	89 de                	mov    esi,ebx
c0020e35:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020e3d:	89 d7                	mov    edi,edx
c0020e3f:	85 d2                	test   edx,edx
c0020e41:	79 09                	jns    c0020e4c <__moddi3+0x38>
c0020e43:	f7 d8                	neg    eax
c0020e45:	83 d2 00             	adc    edx,0x0
c0020e48:	f7 da                	neg    edx
c0020e4a:	89 d7                	mov    edi,edx
c0020e4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e50:	89 cd                	mov    ebp,ecx
c0020e52:	85 ff                	test   edi,edi
c0020e54:	75 52                	jne    c0020ea8 <__moddi3+0x94>
c0020e56:	89 c3                	mov    ebx,eax
c0020e58:	39 f0                	cmp    eax,esi
c0020e5a:	76 24                	jbe    c0020e80 <__moddi3+0x6c>
c0020e5c:	89 c8                	mov    eax,ecx
c0020e5e:	89 f2                	mov    edx,esi
c0020e60:	f7 f3                	div    ebx
c0020e62:	89 d6                	mov    esi,edx
c0020e64:	89 f0                	mov    eax,esi
c0020e66:	31 d2                	xor    edx,edx
c0020e68:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020e6c:	85 c9                	test   ecx,ecx
c0020e6e:	74 07                	je     c0020e77 <__moddi3+0x63>
c0020e70:	f7 d8                	neg    eax
c0020e72:	83 d2 00             	adc    edx,0x0
c0020e75:	f7 da                	neg    edx
c0020e77:	83 c4 2c             	add    esp,0x2c
c0020e7a:	5b                   	pop    ebx
c0020e7b:	5e                   	pop    esi
c0020e7c:	5f                   	pop    edi
c0020e7d:	5d                   	pop    ebp
c0020e7e:	c3                   	ret    
c0020e7f:	90                   	nop
c0020e80:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020e84:	85 db                	test   ebx,ebx
c0020e86:	75 0d                	jne    c0020e95 <__moddi3+0x81>
c0020e88:	b8 01 00 00 00       	mov    eax,0x1
c0020e8d:	31 d2                	xor    edx,edx
c0020e8f:	f7 f7                	div    edi
c0020e91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e95:	89 f0                	mov    eax,esi
c0020e97:	31 d2                	xor    edx,edx
c0020e99:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020e9d:	f7 f7                	div    edi
c0020e9f:	89 e8                	mov    eax,ebp
c0020ea1:	f7 f7                	div    edi
c0020ea3:	89 d6                	mov    esi,edx
c0020ea5:	eb bd                	jmp    c0020e64 <__moddi3+0x50>
c0020ea7:	90                   	nop
c0020ea8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020eac:	39 f7                	cmp    edi,esi
c0020eae:	76 20                	jbe    c0020ed0 <__moddi3+0xbc>
c0020eb0:	89 c8                	mov    eax,ecx
c0020eb2:	89 f2                	mov    edx,esi
c0020eb4:	eb b2                	jmp    c0020e68 <__moddi3+0x54>
c0020eb6:	66 90                	xchg   ax,ax
c0020eb8:	f7 d9                	neg    ecx
c0020eba:	83 d3 00             	adc    ebx,0x0
c0020ebd:	f7 db                	neg    ebx
c0020ebf:	89 de                	mov    esi,ebx
c0020ec1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020ec9:	e9 6f ff ff ff       	jmp    c0020e3d <__moddi3+0x29>
c0020ece:	66 90                	xchg   ax,ax
c0020ed0:	0f bd c7             	bsr    eax,edi
c0020ed3:	83 f0 1f             	xor    eax,0x1f
c0020ed6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020eda:	75 24                	jne    c0020f00 <__moddi3+0xec>
c0020edc:	39 f7                	cmp    edi,esi
c0020ede:	72 06                	jb     c0020ee6 <__moddi3+0xd2>
c0020ee0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020ee4:	77 0c                	ja     c0020ef2 <__moddi3+0xde>
c0020ee6:	89 e9                	mov    ecx,ebp
c0020ee8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0020eec:	19 fe                	sbb    esi,edi
c0020eee:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020ef2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ef6:	89 f2                	mov    edx,esi
c0020ef8:	e9 6b ff ff ff       	jmp    c0020e68 <__moddi3+0x54>
c0020efd:	8d 76 00             	lea    esi,[esi+0x0]
c0020f00:	b8 20 00 00 00       	mov    eax,0x20
c0020f05:	89 c2                	mov    edx,eax
c0020f07:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020f0b:	29 da                	sub    edx,ebx
c0020f0d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020f11:	88 d9                	mov    cl,bl
c0020f13:	d3 e7                	shl    edi,cl
c0020f15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f19:	88 d1                	mov    cl,dl
c0020f1b:	d3 e8                	shr    eax,cl
c0020f1d:	09 c7                	or     edi,eax
c0020f1f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020f23:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020f27:	89 d8                	mov    eax,ebx
c0020f29:	88 d9                	mov    cl,bl
c0020f2b:	d3 e7                	shl    edi,cl
c0020f2d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020f31:	89 f3                	mov    ebx,esi
c0020f33:	88 d1                	mov    cl,dl
c0020f35:	d3 eb                	shr    ebx,cl
c0020f37:	89 c7                	mov    edi,eax
c0020f39:	88 c1                	mov    cl,al
c0020f3b:	d3 e6                	shl    esi,cl
c0020f3d:	89 e8                	mov    eax,ebp
c0020f3f:	88 d1                	mov    cl,dl
c0020f41:	d3 e8                	shr    eax,cl
c0020f43:	09 f0                	or     eax,esi
c0020f45:	89 f9                	mov    ecx,edi
c0020f47:	d3 e5                	shl    ebp,cl
c0020f49:	89 da                	mov    edx,ebx
c0020f4b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0020f4f:	89 d3                	mov    ebx,edx
c0020f51:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020f55:	89 c6                	mov    esi,eax
c0020f57:	89 d1                	mov    ecx,edx
c0020f59:	39 d3                	cmp    ebx,edx
c0020f5b:	72 27                	jb     c0020f84 <__moddi3+0x170>
c0020f5d:	74 21                	je     c0020f80 <__moddi3+0x16c>
c0020f5f:	29 f5                	sub    ebp,esi
c0020f61:	19 cb                	sbb    ebx,ecx
c0020f63:	89 de                	mov    esi,ebx
c0020f65:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020f69:	d3 e6                	shl    esi,cl
c0020f6b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020f6f:	89 f9                	mov    ecx,edi
c0020f71:	d3 ed                	shr    ebp,cl
c0020f73:	09 ee                	or     esi,ebp
c0020f75:	89 f0                	mov    eax,esi
c0020f77:	d3 eb                	shr    ebx,cl
c0020f79:	89 da                	mov    edx,ebx
c0020f7b:	e9 e8 fe ff ff       	jmp    c0020e68 <__moddi3+0x54>
c0020f80:	39 c5                	cmp    ebp,eax
c0020f82:	73 db                	jae    c0020f5f <__moddi3+0x14b>
c0020f84:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020f88:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0020f8c:	89 d1                	mov    ecx,edx
c0020f8e:	89 c6                	mov    esi,eax
c0020f90:	eb cd                	jmp    c0020f5f <__moddi3+0x14b>
c0020f92:	66 90                	xchg   ax,ax

c0020f94 <__udivdi3>:
c0020f94:	55                   	push   ebp
c0020f95:	57                   	push   edi
c0020f96:	56                   	push   esi
c0020f97:	53                   	push   ebx
c0020f98:	83 ec 1c             	sub    esp,0x1c
c0020f9b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020f9f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020fa3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020fa7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020fab:	85 d2                	test   edx,edx
c0020fad:	75 41                	jne    c0020ff0 <__udivdi3+0x5c>
c0020faf:	39 f7                	cmp    edi,esi
c0020fb1:	76 15                	jbe    c0020fc8 <__udivdi3+0x34>
c0020fb3:	89 e8                	mov    eax,ebp
c0020fb5:	89 f2                	mov    edx,esi
c0020fb7:	f7 f7                	div    edi
c0020fb9:	31 db                	xor    ebx,ebx
c0020fbb:	89 da                	mov    edx,ebx
c0020fbd:	83 c4 1c             	add    esp,0x1c
c0020fc0:	5b                   	pop    ebx
c0020fc1:	5e                   	pop    esi
c0020fc2:	5f                   	pop    edi
c0020fc3:	5d                   	pop    ebp
c0020fc4:	c3                   	ret    
c0020fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0020fc8:	89 f9                	mov    ecx,edi
c0020fca:	85 ff                	test   edi,edi
c0020fcc:	75 0b                	jne    c0020fd9 <__udivdi3+0x45>
c0020fce:	b8 01 00 00 00       	mov    eax,0x1
c0020fd3:	31 d2                	xor    edx,edx
c0020fd5:	f7 f7                	div    edi
c0020fd7:	89 c1                	mov    ecx,eax
c0020fd9:	31 d2                	xor    edx,edx
c0020fdb:	89 f0                	mov    eax,esi
c0020fdd:	f7 f1                	div    ecx
c0020fdf:	89 c3                	mov    ebx,eax
c0020fe1:	89 e8                	mov    eax,ebp
c0020fe3:	f7 f1                	div    ecx
c0020fe5:	89 da                	mov    edx,ebx
c0020fe7:	83 c4 1c             	add    esp,0x1c
c0020fea:	5b                   	pop    ebx
c0020feb:	5e                   	pop    esi
c0020fec:	5f                   	pop    edi
c0020fed:	5d                   	pop    ebp
c0020fee:	c3                   	ret    
c0020fef:	90                   	nop
c0020ff0:	39 f2                	cmp    edx,esi
c0020ff2:	77 1c                	ja     c0021010 <__udivdi3+0x7c>
c0020ff4:	0f bd da             	bsr    ebx,edx
c0020ff7:	83 f3 1f             	xor    ebx,0x1f
c0020ffa:	75 24                	jne    c0021020 <__udivdi3+0x8c>
c0020ffc:	39 f2                	cmp    edx,esi
c0020ffe:	72 08                	jb     c0021008 <__udivdi3+0x74>
c0021000:	39 ef                	cmp    edi,ebp
c0021002:	0f 87 84 00 00 00    	ja     c002108c <__udivdi3+0xf8>
c0021008:	b8 01 00 00 00       	mov    eax,0x1
c002100d:	eb ac                	jmp    c0020fbb <__udivdi3+0x27>
c002100f:	90                   	nop
c0021010:	31 db                	xor    ebx,ebx
c0021012:	31 c0                	xor    eax,eax
c0021014:	89 da                	mov    edx,ebx
c0021016:	83 c4 1c             	add    esp,0x1c
c0021019:	5b                   	pop    ebx
c002101a:	5e                   	pop    esi
c002101b:	5f                   	pop    edi
c002101c:	5d                   	pop    ebp
c002101d:	c3                   	ret    
c002101e:	66 90                	xchg   ax,ax
c0021020:	b8 20 00 00 00       	mov    eax,0x20
c0021025:	29 d8                	sub    eax,ebx
c0021027:	88 d9                	mov    cl,bl
c0021029:	d3 e2                	shl    edx,cl
c002102b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002102f:	89 fa                	mov    edx,edi
c0021031:	88 c1                	mov    cl,al
c0021033:	d3 ea                	shr    edx,cl
c0021035:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021039:	09 d1                	or     ecx,edx
c002103b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002103f:	88 d9                	mov    cl,bl
c0021041:	d3 e7                	shl    edi,cl
c0021043:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021047:	89 f7                	mov    edi,esi
c0021049:	88 c1                	mov    cl,al
c002104b:	d3 ef                	shr    edi,cl
c002104d:	88 d9                	mov    cl,bl
c002104f:	d3 e6                	shl    esi,cl
c0021051:	89 ea                	mov    edx,ebp
c0021053:	88 c1                	mov    cl,al
c0021055:	d3 ea                	shr    edx,cl
c0021057:	09 d6                	or     esi,edx
c0021059:	89 f0                	mov    eax,esi
c002105b:	89 fa                	mov    edx,edi
c002105d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021061:	89 d7                	mov    edi,edx
c0021063:	89 c6                	mov    esi,eax
c0021065:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021069:	39 d7                	cmp    edi,edx
c002106b:	72 13                	jb     c0021080 <__udivdi3+0xec>
c002106d:	74 09                	je     c0021078 <__udivdi3+0xe4>
c002106f:	89 f0                	mov    eax,esi
c0021071:	31 db                	xor    ebx,ebx
c0021073:	e9 43 ff ff ff       	jmp    c0020fbb <__udivdi3+0x27>
c0021078:	88 d9                	mov    cl,bl
c002107a:	d3 e5                	shl    ebp,cl
c002107c:	39 c5                	cmp    ebp,eax
c002107e:	73 ef                	jae    c002106f <__udivdi3+0xdb>
c0021080:	8d 46 ff             	lea    eax,[esi-0x1]
c0021083:	31 db                	xor    ebx,ebx
c0021085:	e9 31 ff ff ff       	jmp    c0020fbb <__udivdi3+0x27>
c002108a:	66 90                	xchg   ax,ax
c002108c:	31 c0                	xor    eax,eax
c002108e:	e9 28 ff ff ff       	jmp    c0020fbb <__udivdi3+0x27>
c0021093:	90                   	nop

c0021094 <__umoddi3>:
c0021094:	55                   	push   ebp
c0021095:	57                   	push   edi
c0021096:	56                   	push   esi
c0021097:	53                   	push   ebx
c0021098:	83 ec 1c             	sub    esp,0x1c
c002109b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002109f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00210a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00210a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00210ab:	89 da                	mov    edx,ebx
c00210ad:	85 c0                	test   eax,eax
c00210af:	75 37                	jne    c00210e8 <__umoddi3+0x54>
c00210b1:	39 df                	cmp    edi,ebx
c00210b3:	76 13                	jbe    c00210c8 <__umoddi3+0x34>
c00210b5:	89 f0                	mov    eax,esi
c00210b7:	f7 f7                	div    edi
c00210b9:	89 d0                	mov    eax,edx
c00210bb:	31 d2                	xor    edx,edx
c00210bd:	83 c4 1c             	add    esp,0x1c
c00210c0:	5b                   	pop    ebx
c00210c1:	5e                   	pop    esi
c00210c2:	5f                   	pop    edi
c00210c3:	5d                   	pop    ebp
c00210c4:	c3                   	ret    
c00210c5:	8d 76 00             	lea    esi,[esi+0x0]
c00210c8:	89 fd                	mov    ebp,edi
c00210ca:	85 ff                	test   edi,edi
c00210cc:	75 0b                	jne    c00210d9 <__umoddi3+0x45>
c00210ce:	b8 01 00 00 00       	mov    eax,0x1
c00210d3:	31 d2                	xor    edx,edx
c00210d5:	f7 f7                	div    edi
c00210d7:	89 c5                	mov    ebp,eax
c00210d9:	89 d8                	mov    eax,ebx
c00210db:	31 d2                	xor    edx,edx
c00210dd:	f7 f5                	div    ebp
c00210df:	89 f0                	mov    eax,esi
c00210e1:	f7 f5                	div    ebp
c00210e3:	89 d0                	mov    eax,edx
c00210e5:	eb d4                	jmp    c00210bb <__umoddi3+0x27>
c00210e7:	90                   	nop
c00210e8:	89 f1                	mov    ecx,esi
c00210ea:	39 d8                	cmp    eax,ebx
c00210ec:	76 0a                	jbe    c00210f8 <__umoddi3+0x64>
c00210ee:	89 f0                	mov    eax,esi
c00210f0:	83 c4 1c             	add    esp,0x1c
c00210f3:	5b                   	pop    ebx
c00210f4:	5e                   	pop    esi
c00210f5:	5f                   	pop    edi
c00210f6:	5d                   	pop    ebp
c00210f7:	c3                   	ret    
c00210f8:	0f bd e8             	bsr    ebp,eax
c00210fb:	83 f5 1f             	xor    ebp,0x1f
c00210fe:	75 1c                	jne    c002111c <__umoddi3+0x88>
c0021100:	39 d8                	cmp    eax,ebx
c0021102:	72 04                	jb     c0021108 <__umoddi3+0x74>
c0021104:	39 f7                	cmp    edi,esi
c0021106:	77 08                	ja     c0021110 <__umoddi3+0x7c>
c0021108:	89 da                	mov    edx,ebx
c002110a:	29 fe                	sub    esi,edi
c002110c:	19 c2                	sbb    edx,eax
c002110e:	89 f1                	mov    ecx,esi
c0021110:	89 c8                	mov    eax,ecx
c0021112:	83 c4 1c             	add    esp,0x1c
c0021115:	5b                   	pop    ebx
c0021116:	5e                   	pop    esi
c0021117:	5f                   	pop    edi
c0021118:	5d                   	pop    ebp
c0021119:	c3                   	ret    
c002111a:	66 90                	xchg   ax,ax
c002111c:	ba 20 00 00 00       	mov    edx,0x20
c0021121:	29 ea                	sub    edx,ebp
c0021123:	89 e9                	mov    ecx,ebp
c0021125:	d3 e0                	shl    eax,cl
c0021127:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002112b:	89 f8                	mov    eax,edi
c002112d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021131:	88 d1                	mov    cl,dl
c0021133:	d3 e8                	shr    eax,cl
c0021135:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021139:	09 c1                	or     ecx,eax
c002113b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002113f:	89 e9                	mov    ecx,ebp
c0021141:	d3 e7                	shl    edi,cl
c0021143:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021147:	89 d8                	mov    eax,ebx
c0021149:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002114d:	88 d1                	mov    cl,dl
c002114f:	d3 e8                	shr    eax,cl
c0021151:	89 c7                	mov    edi,eax
c0021153:	89 e9                	mov    ecx,ebp
c0021155:	d3 e3                	shl    ebx,cl
c0021157:	89 f0                	mov    eax,esi
c0021159:	88 d1                	mov    cl,dl
c002115b:	d3 e8                	shr    eax,cl
c002115d:	09 d8                	or     eax,ebx
c002115f:	89 e9                	mov    ecx,ebp
c0021161:	d3 e6                	shl    esi,cl
c0021163:	89 f3                	mov    ebx,esi
c0021165:	89 fa                	mov    edx,edi
c0021167:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002116b:	89 d1                	mov    ecx,edx
c002116d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021171:	89 c6                	mov    esi,eax
c0021173:	89 d7                	mov    edi,edx
c0021175:	39 d1                	cmp    ecx,edx
c0021177:	72 27                	jb     c00211a0 <__umoddi3+0x10c>
c0021179:	74 21                	je     c002119c <__umoddi3+0x108>
c002117b:	89 ca                	mov    edx,ecx
c002117d:	29 f3                	sub    ebx,esi
c002117f:	19 fa                	sbb    edx,edi
c0021181:	89 d0                	mov    eax,edx
c0021183:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021187:	d3 e0                	shl    eax,cl
c0021189:	89 e9                	mov    ecx,ebp
c002118b:	d3 eb                	shr    ebx,cl
c002118d:	09 d8                	or     eax,ebx
c002118f:	d3 ea                	shr    edx,cl
c0021191:	83 c4 1c             	add    esp,0x1c
c0021194:	5b                   	pop    ebx
c0021195:	5e                   	pop    esi
c0021196:	5f                   	pop    edi
c0021197:	5d                   	pop    ebp
c0021198:	c3                   	ret    
c0021199:	8d 76 00             	lea    esi,[esi+0x0]
c002119c:	39 c3                	cmp    ebx,eax
c002119e:	73 db                	jae    c002117b <__umoddi3+0xe7>
c00211a0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00211a4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00211a8:	89 d7                	mov    edi,edx
c00211aa:	89 c6                	mov    esi,eax
c00211ac:	eb cd                	jmp    c002117b <__umoddi3+0xe7>

Disassembly of section .init:

c00211ae <_init>:
c00211ae:	55                   	push   ebp
c00211af:	89 e5                	mov    ebp,esp
c00211b1:	e8 62 ef fd ff       	call   c0000118 <frame_dummy>
c00211b6:	e8 e5 fa ff ff       	call   c0020ca0 <__do_global_ctors_aux>
c00211bb:	5d                   	pop    ebp
c00211bc:	c3                   	ret    

Disassembly of section .fini:

c00211bd <_fini>:
c00211bd:	55                   	push   ebp
c00211be:	89 e5                	mov    ebp,esp
c00211c0:	e8 e3 ee fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00211c5:	5d                   	pop    ebp
c00211c6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00211c8 <Computer::~Computer()>:
c00211c8:	83 ec 0c             	sub    esp,0xc
c00211cb:	ba f4 27 02 c0       	mov    edx,0xc00227f4
c00211d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211d4:	89 10                	mov    DWORD PTR [eax],edx
c00211d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211da:	83 ec 0c             	sub    esp,0xc
c00211dd:	50                   	push   eax
c00211de:	e8 61 cb fe ff       	call   c000dd44 <Device::~Device()>
c00211e3:	83 c4 10             	add    esp,0x10
c00211e6:	90                   	nop
c00211e7:	83 c4 0c             	add    esp,0xc
c00211ea:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00211ec <Computer::~Computer()>:
c00211ec:	83 ec 0c             	sub    esp,0xc
c00211ef:	83 ec 0c             	sub    esp,0xc
c00211f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211f6:	e8 cd ff ff ff       	call   c00211c8 <Computer::~Computer()>
c00211fb:	83 c4 10             	add    esp,0x10
c00211fe:	83 ec 08             	sub    esp,0x8
c0021201:	68 ec 01 00 00       	push   0x1ec
c0021206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002120a:	e8 38 b7 fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c002120f:	83 c4 10             	add    esp,0x10
c0021212:	83 c4 0c             	add    esp,0xc
c0021215:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021216 <idleCommon()>:
c0021216:	83 ec 0c             	sub    esp,0xc
c0021219:	fa                   	cli    
c002121a:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0021220:	e8 d7 6c ff ff       	call   c0017efc <schedule()>
c0021225:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c002122a:	48                   	dec    eax
c002122b:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0021230:	75 01                	jne    c0021233 <idleCommon()+0x1d>
c0021232:	fb                   	sti    
c0021233:	83 c4 0c             	add    esp,0xc
c0021236:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0021238 <LinkedList<UnixFile>::~LinkedList()>:
c0021238:	90                   	nop
c0021239:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002123a <LinkedList<UnixFile>::LinkedList()>:
c002123a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002123e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021248:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002124f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021253:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002125a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002125e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021268:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002126f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021273:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002127a:	90                   	nop
c002127b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002127c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002127c:	83 ec 0c             	sub    esp,0xc
c002127f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021284:	75 10                	jne    c0021296 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021286:	83 ec 0c             	sub    esp,0xc
c0021289:	68 cc 2a 02 c0       	push   0xc0022acc
c002128e:	e8 76 30 ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0021293:	83 c4 10             	add    esp,0x10
c0021296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002129a:	8b 00                	mov    eax,DWORD PTR [eax]
c002129c:	85 c0                	test   eax,eax
c002129e:	74 34                	je     c00212d4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00212a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212a7:	85 c0                	test   eax,eax
c00212a9:	74 29                	je     c00212d4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00212ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00212b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00212c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212cb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00212d2:	eb 65                	jmp    c0021339 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00212d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00212da:	85 c0                	test   eax,eax
c00212dc:	75 4b                	jne    c0021329 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00212de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212e5:	85 c0                	test   eax,eax
c00212e7:	75 40                	jne    c0021329 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00212e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212f1:	89 10                	mov    DWORD PTR [eax],edx
c00212f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00212fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021302:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021305:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002130c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021310:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021313:	85 c0                	test   eax,eax
c0021315:	74 22                	je     c0021339 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021317:	83 ec 0c             	sub    esp,0xc
c002131a:	68 ee 2a 02 c0       	push   0xc0022aee
c002131f:	e8 e5 2f ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0021324:	83 c4 10             	add    esp,0x10
c0021327:	eb 10                	jmp    c0021339 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021329:	83 ec 0c             	sub    esp,0xc
c002132c:	68 f8 2a 02 c0       	push   0xc0022af8
c0021331:	e8 d3 2f ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0021336:	83 c4 10             	add    esp,0x10
c0021339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002133d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021340:	8d 50 01             	lea    edx,[eax+0x1]
c0021343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021347:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002134a:	90                   	nop
c002134b:	83 c4 0c             	add    esp,0xc
c002134e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0021350 <LinkedList<UnixFile>::getFirstElement()>:
c0021350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021354:	8b 00                	mov    eax,DWORD PTR [eax]
c0021356:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0021358 <LinkedList<UnixFile>::removeFirst()>:
c0021358:	83 ec 0c             	sub    esp,0xc
c002135b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002135f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021361:	85 c0                	test   eax,eax
c0021363:	75 12                	jne    c0021377 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021365:	83 ec 0c             	sub    esp,0xc
c0021368:	68 04 2b 02 c0       	push   0xc0022b04
c002136d:	e8 97 2f ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0021372:	83 c4 10             	add    esp,0x10
c0021375:	eb 7e                	jmp    c00213f5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002137b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002137e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021381:	85 c0                	test   eax,eax
c0021383:	74 10                	je     c0021395 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0021385:	83 ec 0c             	sub    esp,0xc
c0021388:	68 4f 2b 02 c0       	push   0xc0022b4f
c002138d:	e8 77 2f ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0021392:	83 c4 10             	add    esp,0x10
c0021395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021399:	8b 00                	mov    eax,DWORD PTR [eax]
c002139b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002139e:	85 c0                	test   eax,eax
c00213a0:	75 33                	jne    c00213d5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00213a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00213ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00213b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213be:	83 f8 01             	cmp    eax,0x1
c00213c1:	74 21                	je     c00213e4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00213c3:	83 ec 0c             	sub    esp,0xc
c00213c6:	68 28 2b 02 c0       	push   0xc0022b28
c00213cb:	e8 39 2f ff ff       	call   c0014309 <Krnl::panic(char const*)>
c00213d0:	83 c4 10             	add    esp,0x10
c00213d3:	eb 0f                	jmp    c00213e4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00213d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00213db:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00213de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213e2:	89 10                	mov    DWORD PTR [eax],edx
c00213e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213eb:	8d 50 ff             	lea    edx,[eax-0x1]
c00213ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00213f5:	83 c4 0c             	add    esp,0xc
c00213f8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00213fa <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00213fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021401:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021402 <DriverlessDevice::~DriverlessDevice()>:
c0021402:	ba dc 33 02 c0       	mov    edx,0xc00233dc
c0021407:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002140b:	89 10                	mov    DWORD PTR [eax],edx
c002140d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021411:	50                   	push   eax
c0021412:	e8 2d c9 fe ff       	call   c000dd44 <Device::~Device()>
c0021417:	83 c4 04             	add    esp,0x4
c002141a:	90                   	nop
c002141b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002141c <DriverlessDevice::~DriverlessDevice()>:
c002141c:	83 ec 0c             	sub    esp,0xc
c002141f:	83 ec 0c             	sub    esp,0xc
c0021422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021426:	e8 d7 ff ff ff       	call   c0021402 <DriverlessDevice::~DriverlessDevice()>
c002142b:	83 c4 10             	add    esp,0x10
c002142e:	83 ec 08             	sub    esp,0x8
c0021431:	68 58 01 00 00       	push   0x158
c0021436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002143a:	e8 08 b5 fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c002143f:	83 c4 10             	add    esp,0x10
c0021442:	83 c4 0c             	add    esp,0xc
c0021445:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021446 <LinkedList<Device>::addElement(Device*)>:
c0021446:	83 ec 0c             	sub    esp,0xc
c0021449:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002144e:	75 10                	jne    c0021460 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021450:	83 ec 0c             	sub    esp,0xc
c0021453:	68 cc 2a 02 c0       	push   0xc0022acc
c0021458:	e8 ac 2e ff ff       	call   c0014309 <Krnl::panic(char const*)>
c002145d:	83 c4 10             	add    esp,0x10
c0021460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021464:	8b 00                	mov    eax,DWORD PTR [eax]
c0021466:	85 c0                	test   eax,eax
c0021468:	74 3a                	je     c00214a4 <LinkedList<Device>::addElement(Device*)+0x5e>
c002146a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002146e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021471:	85 c0                	test   eax,eax
c0021473:	74 2f                	je     c00214a4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021479:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002147c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021480:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002148a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002148e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021495:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021498:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00214a2:	eb 68                	jmp    c002150c <LinkedList<Device>::addElement(Device*)+0xc6>
c00214a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00214aa:	85 c0                	test   eax,eax
c00214ac:	75 4e                	jne    c00214fc <LinkedList<Device>::addElement(Device*)+0xb6>
c00214ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214b5:	85 c0                	test   eax,eax
c00214b7:	75 43                	jne    c00214fc <LinkedList<Device>::addElement(Device*)+0xb6>
c00214b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00214c1:	89 10                	mov    DWORD PTR [eax],edx
c00214c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00214cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00214ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214d5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00214df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00214e6:	85 c0                	test   eax,eax
c00214e8:	74 22                	je     c002150c <LinkedList<Device>::addElement(Device*)+0xc6>
c00214ea:	83 ec 0c             	sub    esp,0xc
c00214ed:	68 ee 2a 02 c0       	push   0xc0022aee
c00214f2:	e8 12 2e ff ff       	call   c0014309 <Krnl::panic(char const*)>
c00214f7:	83 c4 10             	add    esp,0x10
c00214fa:	eb 10                	jmp    c002150c <LinkedList<Device>::addElement(Device*)+0xc6>
c00214fc:	83 ec 0c             	sub    esp,0xc
c00214ff:	68 f8 2a 02 c0       	push   0xc0022af8
c0021504:	e8 00 2e ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0021509:	83 c4 10             	add    esp,0x10
c002150c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021510:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021513:	8d 50 01             	lea    edx,[eax+0x1]
c0021516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002151a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002151d:	90                   	nop
c002151e:	83 c4 0c             	add    esp,0xc
c0021521:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021522 <LinkedList<Device>::LinkedList()>:
c0021522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021526:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002152c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021530:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021537:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002153b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021546:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002154c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021550:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021557:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002155b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021562:	90                   	nop
c0021563:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021564 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021568:	8b 00                	mov    eax,DWORD PTR [eax]
c002156a:	85 c0                	test   eax,eax
c002156c:	75 0e                	jne    c002157c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002156e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021572:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021575:	85 c0                	test   eax,eax
c0021577:	75 03                	jne    c002157c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021579:	b0 01                	mov    al,0x1
c002157b:	c3                   	ret    
c002157c:	b0 00                	mov    al,0x0
c002157e:	90                   	nop
c002157f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021580:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021584:	8b 00                	mov    eax,DWORD PTR [eax]
c0021586:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021588 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021588:	83 ec 0c             	sub    esp,0xc
c002158b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002158f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021591:	85 c0                	test   eax,eax
c0021593:	75 17                	jne    c00215ac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021595:	83 ec 0c             	sub    esp,0xc
c0021598:	68 04 2b 02 c0       	push   0xc0022b04
c002159d:	e8 67 2d ff ff       	call   c0014309 <Krnl::panic(char const*)>
c00215a2:	83 c4 10             	add    esp,0x10
c00215a5:	e9 92 00 00 00       	jmp    c002163c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c00215aa:	66 90                	xchg   ax,ax
c00215ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215b3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00215b6:	85 c0                	test   eax,eax
c00215b8:	0f 95 c0             	setne  al
c00215bb:	84 c0                	test   al,al
c00215bd:	74 11                	je     c00215d0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c00215bf:	83 ec 0c             	sub    esp,0xc
c00215c2:	68 4f 2b 02 c0       	push   0xc0022b4f
c00215c7:	e8 3d 2d ff ff       	call   c0014309 <Krnl::panic(char const*)>
c00215cc:	83 c4 10             	add    esp,0x10
c00215cf:	90                   	nop
c00215d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00215d6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00215d9:	85 c0                	test   eax,eax
c00215db:	0f 94 c0             	sete   al
c00215de:	84 c0                	test   al,al
c00215e0:	74 36                	je     c0021618 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c00215e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00215ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00215f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00215fe:	83 f8 01             	cmp    eax,0x1
c0021601:	74 25                	je     c0021628 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021603:	83 ec 0c             	sub    esp,0xc
c0021606:	68 28 2b 02 c0       	push   0xc0022b28
c002160b:	e8 f9 2c ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0021610:	83 c4 10             	add    esp,0x10
c0021613:	eb 13                	jmp    c0021628 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021615:	8d 76 00             	lea    esi,[esi+0x0]
c0021618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002161c:	8b 00                	mov    eax,DWORD PTR [eax]
c002161e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021625:	89 10                	mov    DWORD PTR [eax],edx
c0021627:	90                   	nop
c0021628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002162c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002162f:	8d 50 ff             	lea    edx,[eax-0x1]
c0021632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021636:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021639:	8d 76 00             	lea    esi,[esi+0x0]
c002163c:	83 c4 0c             	add    esp,0xc
c002163f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021640:	83 ec 0c             	sub    esp,0xc
c0021643:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021648:	75 12                	jne    c002165c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002164a:	83 ec 0c             	sub    esp,0xc
c002164d:	68 cc 2a 02 c0       	push   0xc0022acc
c0021652:	e8 b2 2c ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0021657:	83 c4 10             	add    esp,0x10
c002165a:	66 90                	xchg   ax,ax
c002165c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021660:	8b 00                	mov    eax,DWORD PTR [eax]
c0021662:	85 c0                	test   eax,eax
c0021664:	74 36                	je     c002169c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002166a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002166d:	85 c0                	test   eax,eax
c002166f:	74 2b                	je     c002169c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021675:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021678:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002167c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002167f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021683:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021687:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002168a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002168e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021691:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021698:	eb 6a                	jmp    c0021704 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002169a:	66 90                	xchg   ax,ax
c002169c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00216a2:	85 c0                	test   eax,eax
c00216a4:	75 4e                	jne    c00216f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00216a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216ad:	85 c0                	test   eax,eax
c00216af:	75 43                	jne    c00216f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00216b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216b9:	89 10                	mov    DWORD PTR [eax],edx
c00216bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216c3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00216c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216cd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00216d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00216db:	85 c0                	test   eax,eax
c00216dd:	74 25                	je     c0021704 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00216df:	83 ec 0c             	sub    esp,0xc
c00216e2:	68 ee 2a 02 c0       	push   0xc0022aee
c00216e7:	e8 1d 2c ff ff       	call   c0014309 <Krnl::panic(char const*)>
c00216ec:	83 c4 10             	add    esp,0x10
c00216ef:	eb 13                	jmp    c0021704 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00216f1:	8d 76 00             	lea    esi,[esi+0x0]
c00216f4:	83 ec 0c             	sub    esp,0xc
c00216f7:	68 f8 2a 02 c0       	push   0xc0022af8
c00216fc:	e8 08 2c ff ff       	call   c0014309 <Krnl::panic(char const*)>
c0021701:	83 c4 10             	add    esp,0x10
c0021704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021708:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002170b:	8d 50 01             	lea    edx,[eax+0x1]
c002170e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021712:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021715:	90                   	nop
c0021716:	83 c4 0c             	add    esp,0xc
c0021719:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002171c <ACPI::~ACPI()>:
c002171c:	83 ec 0c             	sub    esp,0xc
c002171f:	ba ac 3e 02 c0       	mov    edx,0xc0023eac
c0021724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021728:	89 10                	mov    DWORD PTR [eax],edx
c002172a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002172e:	83 ec 0c             	sub    esp,0xc
c0021731:	50                   	push   eax
c0021732:	e8 0d c6 fe ff       	call   c000dd44 <Device::~Device()>
c0021737:	83 c4 10             	add    esp,0x10
c002173a:	90                   	nop
c002173b:	83 c4 0c             	add    esp,0xc
c002173e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021740 <ACPI::~ACPI()>:
c0021740:	83 ec 0c             	sub    esp,0xc
c0021743:	83 ec 0c             	sub    esp,0xc
c0021746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002174a:	e8 cd ff ff ff       	call   c002171c <ACPI::~ACPI()>
c002174f:	83 c4 10             	add    esp,0x10
c0021752:	83 ec 08             	sub    esp,0x8
c0021755:	68 64 12 00 00       	push   0x1264
c002175a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002175e:	e8 e4 b1 fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021763:	83 c4 10             	add    esp,0x10
c0021766:	83 c4 0c             	add    esp,0xc
c0021769:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002176c <LinkedList<Device>::~LinkedList()>:
c002176c:	90                   	nop
c002176d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021770 <LinkedList<Device>::isEmpty()>:
c0021770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021774:	8b 00                	mov    eax,DWORD PTR [eax]
c0021776:	85 c0                	test   eax,eax
c0021778:	75 0e                	jne    c0021788 <LinkedList<Device>::isEmpty()+0x18>
c002177a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002177e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021781:	85 c0                	test   eax,eax
c0021783:	75 03                	jne    c0021788 <LinkedList<Device>::isEmpty()+0x18>
c0021785:	b0 01                	mov    al,0x1
c0021787:	c3                   	ret    
c0021788:	b0 00                	mov    al,0x0
c002178a:	90                   	nop
c002178b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002178c <LinkedList<Device>::getFirstElement()>:
c002178c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021790:	8b 00                	mov    eax,DWORD PTR [eax]
c0021792:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021794 <LinkedList<Device>::removeFirst()>:
c0021794:	83 ec 0c             	sub    esp,0xc
c0021797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002179b:	8b 00                	mov    eax,DWORD PTR [eax]
c002179d:	85 c0                	test   eax,eax
c002179f:	75 17                	jne    c00217b8 <LinkedList<Device>::removeFirst()+0x24>
c00217a1:	83 ec 0c             	sub    esp,0xc
c00217a4:	68 04 2b 02 c0       	push   0xc0022b04
c00217a9:	e8 5b 2b ff ff       	call   c0014309 <Krnl::panic(char const*)>
c00217ae:	83 c4 10             	add    esp,0x10
c00217b1:	e9 92 00 00 00       	jmp    c0021848 <LinkedList<Device>::removeFirst()+0xb4>
c00217b6:	66 90                	xchg   ax,ax
c00217b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217bf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00217c5:	85 c0                	test   eax,eax
c00217c7:	74 13                	je     c00217dc <LinkedList<Device>::removeFirst()+0x48>
c00217c9:	83 ec 0c             	sub    esp,0xc
c00217cc:	68 4f 2b 02 c0       	push   0xc0022b4f
c00217d1:	e8 33 2b ff ff       	call   c0014309 <Krnl::panic(char const*)>
c00217d6:	83 c4 10             	add    esp,0x10
c00217d9:	8d 76 00             	lea    esi,[esi+0x0]
c00217dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00217e2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00217e8:	85 c0                	test   eax,eax
c00217ea:	75 34                	jne    c0021820 <LinkedList<Device>::removeFirst()+0x8c>
c00217ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00217f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021805:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021808:	83 f8 01             	cmp    eax,0x1
c002180b:	74 27                	je     c0021834 <LinkedList<Device>::removeFirst()+0xa0>
c002180d:	83 ec 0c             	sub    esp,0xc
c0021810:	68 28 2b 02 c0       	push   0xc0022b28
c0021815:	e8 ef 2a ff ff       	call   c0014309 <Krnl::panic(char const*)>
c002181a:	83 c4 10             	add    esp,0x10
c002181d:	eb 15                	jmp    c0021834 <LinkedList<Device>::removeFirst()+0xa0>
c002181f:	90                   	nop
c0021820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021824:	8b 00                	mov    eax,DWORD PTR [eax]
c0021826:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002182c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021830:	89 10                	mov    DWORD PTR [eax],edx
c0021832:	66 90                	xchg   ax,ax
c0021834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021838:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002183b:	8d 50 ff             	lea    edx,[eax-0x1]
c002183e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021842:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021845:	8d 76 00             	lea    esi,[esi+0x0]
c0021848:	83 c4 0c             	add    esp,0xc
c002184b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002184c <CPU::~CPU()>:
c002184c:	83 ec 0c             	sub    esp,0xc
c002184f:	ba 48 42 02 c0       	mov    edx,0xc0024248
c0021854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021858:	89 10                	mov    DWORD PTR [eax],edx
c002185a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002185e:	83 ec 0c             	sub    esp,0xc
c0021861:	50                   	push   eax
c0021862:	e8 dd c4 fe ff       	call   c000dd44 <Device::~Device()>
c0021867:	83 c4 10             	add    esp,0x10
c002186a:	90                   	nop
c002186b:	83 c4 0c             	add    esp,0xc
c002186e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0021870 <CPU::~CPU()>:
c0021870:	83 ec 0c             	sub    esp,0xc
c0021873:	83 ec 0c             	sub    esp,0xc
c0021876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002187a:	e8 cd ff ff ff       	call   c002184c <CPU::~CPU()>
c002187f:	83 c4 10             	add    esp,0x10
c0021882:	83 ec 08             	sub    esp,0x8
c0021885:	68 98 11 00 00       	push   0x1198
c002188a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002188e:	e8 b4 b0 fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021893:	83 c4 10             	add    esp,0x10
c0021896:	83 c4 0c             	add    esp,0xc
c0021899:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002189c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002189c:	90                   	nop
c002189d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00218a0 <ThreadControlBlock::ThreadControlBlock()>:
c00218a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218a4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00218ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218af:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00218b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218ba:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00218c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218c5:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00218cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218d0:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00218d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218db:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00218df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218e3:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00218e7:	90                   	nop
c00218e8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00218ec <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00218ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021901:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021905:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002190c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021910:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002191a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021921:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021925:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002192c:	90                   	nop
c002192d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021930 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021930:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021934:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021937:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0021938 <Vm::_FPUState::_FPUState()>:
c0021938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002193c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0021943:	90                   	nop
c0021944:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0021946 <PCI::~PCI()>:
c0021946:	83 ec 0c             	sub    esp,0xc
c0021949:	ba a8 4f 02 c0       	mov    edx,0xc0024fa8
c002194e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021952:	89 10                	mov    DWORD PTR [eax],edx
c0021954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021958:	83 ec 0c             	sub    esp,0xc
c002195b:	50                   	push   eax
c002195c:	e8 ab bd fe ff       	call   c000d70c <Bus::~Bus()>
c0021961:	83 c4 10             	add    esp,0x10
c0021964:	90                   	nop
c0021965:	83 c4 0c             	add    esp,0xc
c0021968:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002196a <PCI::~PCI()>:
c002196a:	83 ec 0c             	sub    esp,0xc
c002196d:	83 ec 0c             	sub    esp,0xc
c0021970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021974:	e8 cd ff ff ff       	call   c0021946 <PCI::~PCI()>
c0021979:	83 c4 10             	add    esp,0x10
c002197c:	83 ec 08             	sub    esp,0x8
c002197f:	68 5c 01 00 00       	push   0x15c
c0021984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021988:	e8 ba af fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c002198d:	83 c4 10             	add    esp,0x10
c0021990:	83 c4 0c             	add    esp,0xc
c0021993:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0021994 <IDE::~IDE()>:
c0021994:	83 ec 0c             	sub    esp,0xc
c0021997:	ba 5c 50 02 c0       	mov    edx,0xc002505c
c002199c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219a0:	89 10                	mov    DWORD PTR [eax],edx
c00219a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219a6:	83 ec 0c             	sub    esp,0xc
c00219a9:	50                   	push   eax
c00219aa:	e8 ad c8 fe ff       	call   c000e25c <HardDiskController::~HardDiskController()>
c00219af:	83 c4 10             	add    esp,0x10
c00219b2:	90                   	nop
c00219b3:	83 c4 0c             	add    esp,0xc
c00219b6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00219b8 <IDE::~IDE()>:
c00219b8:	83 ec 0c             	sub    esp,0xc
c00219bb:	83 ec 0c             	sub    esp,0xc
c00219be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219c2:	e8 cd ff ff ff       	call   c0021994 <IDE::~IDE()>
c00219c7:	83 c4 10             	add    esp,0x10
c00219ca:	83 ec 08             	sub    esp,0x8
c00219cd:	68 70 02 00 00       	push   0x270
c00219d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219d6:	e8 6c af fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c00219db:	83 c4 10             	add    esp,0x10
c00219de:	83 c4 0c             	add    esp,0xc
c00219e1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00219e2 <SATABus::~SATABus()>:
c00219e2:	83 ec 0c             	sub    esp,0xc
c00219e5:	ba d4 50 02 c0       	mov    edx,0xc00250d4
c00219ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ee:	89 10                	mov    DWORD PTR [eax],edx
c00219f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219f4:	83 ec 0c             	sub    esp,0xc
c00219f7:	50                   	push   eax
c00219f8:	e8 5f c8 fe ff       	call   c000e25c <HardDiskController::~HardDiskController()>
c00219fd:	83 c4 10             	add    esp,0x10
c0021a00:	90                   	nop
c0021a01:	83 c4 0c             	add    esp,0xc
c0021a04:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0021a06 <SATABus::~SATABus()>:
c0021a06:	83 ec 0c             	sub    esp,0xc
c0021a09:	83 ec 0c             	sub    esp,0xc
c0021a0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a10:	e8 cd ff ff ff       	call   c00219e2 <SATABus::~SATABus()>
c0021a15:	83 c4 10             	add    esp,0x10
c0021a18:	83 ec 08             	sub    esp,0x8
c0021a1b:	68 64 01 00 00       	push   0x164
c0021a20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a24:	e8 1e af fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021a29:	83 c4 10             	add    esp,0x10
c0021a2c:	83 c4 0c             	add    esp,0xc
c0021a2f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0021a30 <ATA::~ATA()>:
c0021a30:	83 ec 0c             	sub    esp,0xc
c0021a33:	ba 4c 51 02 c0       	mov    edx,0xc002514c
c0021a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a3c:	89 10                	mov    DWORD PTR [eax],edx
c0021a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a42:	83 ec 0c             	sub    esp,0xc
c0021a45:	50                   	push   eax
c0021a46:	e8 f3 c8 fe ff       	call   c000e33e <PhysicalDisk::~PhysicalDisk()>
c0021a4b:	83 c4 10             	add    esp,0x10
c0021a4e:	90                   	nop
c0021a4f:	83 c4 0c             	add    esp,0xc
c0021a52:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0021a54 <ATA::~ATA()>:
c0021a54:	83 ec 0c             	sub    esp,0xc
c0021a57:	83 ec 0c             	sub    esp,0xc
c0021a5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a5e:	e8 cd ff ff ff       	call   c0021a30 <ATA::~ATA()>
c0021a63:	83 c4 10             	add    esp,0x10
c0021a66:	83 ec 08             	sub    esp,0x8
c0021a69:	68 7c 01 00 00       	push   0x17c
c0021a6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a72:	e8 d0 ae fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021a77:	83 c4 10             	add    esp,0x10
c0021a7a:	83 c4 0c             	add    esp,0xc
c0021a7d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0021a7e <ATAPI::~ATAPI()>:
c0021a7e:	83 ec 0c             	sub    esp,0xc
c0021a81:	ba 84 51 02 c0       	mov    edx,0xc0025184
c0021a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a8a:	89 10                	mov    DWORD PTR [eax],edx
c0021a8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a90:	83 ec 0c             	sub    esp,0xc
c0021a93:	50                   	push   eax
c0021a94:	e8 a5 c8 fe ff       	call   c000e33e <PhysicalDisk::~PhysicalDisk()>
c0021a99:	83 c4 10             	add    esp,0x10
c0021a9c:	90                   	nop
c0021a9d:	83 c4 0c             	add    esp,0xc
c0021aa0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0021aa2 <ATAPI::~ATAPI()>:
c0021aa2:	83 ec 0c             	sub    esp,0xc
c0021aa5:	83 ec 0c             	sub    esp,0xc
c0021aa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021aac:	e8 cd ff ff ff       	call   c0021a7e <ATAPI::~ATAPI()>
c0021ab1:	83 c4 10             	add    esp,0x10
c0021ab4:	83 ec 08             	sub    esp,0x8
c0021ab7:	68 80 01 00 00       	push   0x180
c0021abc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ac0:	e8 82 ae fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021ac5:	83 c4 10             	add    esp,0x10
c0021ac8:	83 c4 0c             	add    esp,0xc
c0021acb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0021acc <SATA::~SATA()>:
c0021acc:	83 ec 0c             	sub    esp,0xc
c0021acf:	ba 38 52 02 c0       	mov    edx,0xc0025238
c0021ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ad8:	89 10                	mov    DWORD PTR [eax],edx
c0021ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ade:	83 ec 0c             	sub    esp,0xc
c0021ae1:	50                   	push   eax
c0021ae2:	e8 57 c8 fe ff       	call   c000e33e <PhysicalDisk::~PhysicalDisk()>
c0021ae7:	83 c4 10             	add    esp,0x10
c0021aea:	90                   	nop
c0021aeb:	83 c4 0c             	add    esp,0xc
c0021aee:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021af0 <SATA::~SATA()>:
c0021af0:	83 ec 0c             	sub    esp,0xc
c0021af3:	83 ec 0c             	sub    esp,0xc
c0021af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021afa:	e8 cd ff ff ff       	call   c0021acc <SATA::~SATA()>
c0021aff:	83 c4 10             	add    esp,0x10
c0021b02:	83 ec 08             	sub    esp,0x8
c0021b05:	68 7c 01 00 00       	push   0x17c
c0021b0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b0e:	e8 34 ae fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021b13:	83 c4 10             	add    esp,0x10
c0021b16:	83 c4 0c             	add    esp,0xc
c0021b19:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021b1a <SATAPI::~SATAPI()>:
c0021b1a:	83 ec 0c             	sub    esp,0xc
c0021b1d:	ba 14 53 02 c0       	mov    edx,0xc0025314
c0021b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b26:	89 10                	mov    DWORD PTR [eax],edx
c0021b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b2c:	83 ec 0c             	sub    esp,0xc
c0021b2f:	50                   	push   eax
c0021b30:	e8 09 c8 fe ff       	call   c000e33e <PhysicalDisk::~PhysicalDisk()>
c0021b35:	83 c4 10             	add    esp,0x10
c0021b38:	90                   	nop
c0021b39:	83 c4 0c             	add    esp,0xc
c0021b3c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021b3e <SATAPI::~SATAPI()>:
c0021b3e:	83 ec 0c             	sub    esp,0xc
c0021b41:	83 ec 0c             	sub    esp,0xc
c0021b44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b48:	e8 cd ff ff ff       	call   c0021b1a <SATAPI::~SATAPI()>
c0021b4d:	83 c4 10             	add    esp,0x10
c0021b50:	83 ec 08             	sub    esp,0x8
c0021b53:	68 80 01 00 00       	push   0x180
c0021b58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b5c:	e8 e6 ad fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021b61:	83 c4 10             	add    esp,0x10
c0021b64:	83 c4 0c             	add    esp,0xc
c0021b67:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0021b68 <AVX::~AVX()>:
c0021b68:	83 ec 0c             	sub    esp,0xc
c0021b6b:	ba 54 53 02 c0       	mov    edx,0xc0025354
c0021b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b74:	89 10                	mov    DWORD PTR [eax],edx
c0021b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b7a:	83 ec 0c             	sub    esp,0xc
c0021b7d:	50                   	push   eax
c0021b7e:	e8 41 c8 fe ff       	call   c000e3c4 <FPU::~FPU()>
c0021b83:	83 c4 10             	add    esp,0x10
c0021b86:	90                   	nop
c0021b87:	83 c4 0c             	add    esp,0xc
c0021b8a:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0021b8c <AVX::~AVX()>:
c0021b8c:	83 ec 0c             	sub    esp,0xc
c0021b8f:	83 ec 0c             	sub    esp,0xc
c0021b92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b96:	e8 cd ff ff ff       	call   c0021b68 <AVX::~AVX()>
c0021b9b:	83 c4 10             	add    esp,0x10
c0021b9e:	83 ec 08             	sub    esp,0x8
c0021ba1:	68 58 01 00 00       	push   0x158
c0021ba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021baa:	e8 98 ad fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021baf:	83 c4 10             	add    esp,0x10
c0021bb2:	83 c4 0c             	add    esp,0xc
c0021bb5:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0021bb8 <MMX::~MMX()>:
c0021bb8:	83 ec 0c             	sub    esp,0xc
c0021bbb:	ba 94 53 02 c0       	mov    edx,0xc0025394
c0021bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bc4:	89 10                	mov    DWORD PTR [eax],edx
c0021bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bca:	83 ec 0c             	sub    esp,0xc
c0021bcd:	50                   	push   eax
c0021bce:	e8 f1 c7 fe ff       	call   c000e3c4 <FPU::~FPU()>
c0021bd3:	83 c4 10             	add    esp,0x10
c0021bd6:	90                   	nop
c0021bd7:	83 c4 0c             	add    esp,0xc
c0021bda:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0021bdc <MMX::~MMX()>:
c0021bdc:	83 ec 0c             	sub    esp,0xc
c0021bdf:	83 ec 0c             	sub    esp,0xc
c0021be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021be6:	e8 cd ff ff ff       	call   c0021bb8 <MMX::~MMX()>
c0021beb:	83 c4 10             	add    esp,0x10
c0021bee:	83 ec 08             	sub    esp,0x8
c0021bf1:	68 58 01 00 00       	push   0x158
c0021bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bfa:	e8 48 ad fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021bff:	83 c4 10             	add    esp,0x10
c0021c02:	83 c4 0c             	add    esp,0xc
c0021c05:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0021c08 <SSE::~SSE()>:
c0021c08:	83 ec 0c             	sub    esp,0xc
c0021c0b:	ba d4 53 02 c0       	mov    edx,0xc00253d4
c0021c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c14:	89 10                	mov    DWORD PTR [eax],edx
c0021c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c1a:	83 ec 0c             	sub    esp,0xc
c0021c1d:	50                   	push   eax
c0021c1e:	e8 a1 c7 fe ff       	call   c000e3c4 <FPU::~FPU()>
c0021c23:	83 c4 10             	add    esp,0x10
c0021c26:	90                   	nop
c0021c27:	83 c4 0c             	add    esp,0xc
c0021c2a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0021c2c <SSE::~SSE()>:
c0021c2c:	83 ec 0c             	sub    esp,0xc
c0021c2f:	83 ec 0c             	sub    esp,0xc
c0021c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c36:	e8 cd ff ff ff       	call   c0021c08 <SSE::~SSE()>
c0021c3b:	83 c4 10             	add    esp,0x10
c0021c3e:	83 ec 08             	sub    esp,0x8
c0021c41:	68 58 01 00 00       	push   0x158
c0021c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c4a:	e8 f8 ac fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021c4f:	83 c4 10             	add    esp,0x10
c0021c52:	83 c4 0c             	add    esp,0xc
c0021c55:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0021c58 <x87::~x87()>:
c0021c58:	83 ec 0c             	sub    esp,0xc
c0021c5b:	ba 14 54 02 c0       	mov    edx,0xc0025414
c0021c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c64:	89 10                	mov    DWORD PTR [eax],edx
c0021c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c6a:	83 ec 0c             	sub    esp,0xc
c0021c6d:	50                   	push   eax
c0021c6e:	e8 51 c7 fe ff       	call   c000e3c4 <FPU::~FPU()>
c0021c73:	83 c4 10             	add    esp,0x10
c0021c76:	90                   	nop
c0021c77:	83 c4 0c             	add    esp,0xc
c0021c7a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0021c7c <x87::~x87()>:
c0021c7c:	83 ec 0c             	sub    esp,0xc
c0021c7f:	83 ec 0c             	sub    esp,0xc
c0021c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c86:	e8 cd ff ff ff       	call   c0021c58 <x87::~x87()>
c0021c8b:	83 c4 10             	add    esp,0x10
c0021c8e:	83 ec 08             	sub    esp,0x8
c0021c91:	68 58 01 00 00       	push   0x158
c0021c96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c9a:	e8 a8 ac fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021c9f:	83 c4 10             	add    esp,0x10
c0021ca2:	83 c4 0c             	add    esp,0xc
c0021ca5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0021ca6 <IOAPIC::~IOAPIC()>:
c0021ca6:	83 ec 0c             	sub    esp,0xc
c0021ca9:	ba 6c 55 02 c0       	mov    edx,0xc002556c
c0021cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb2:	89 10                	mov    DWORD PTR [eax],edx
c0021cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb8:	83 ec 0c             	sub    esp,0xc
c0021cbb:	50                   	push   eax
c0021cbc:	e8 83 c0 fe ff       	call   c000dd44 <Device::~Device()>
c0021cc1:	83 c4 10             	add    esp,0x10
c0021cc4:	90                   	nop
c0021cc5:	83 c4 0c             	add    esp,0xc
c0021cc8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0021cca <IOAPIC::~IOAPIC()>:
c0021cca:	83 ec 0c             	sub    esp,0xc
c0021ccd:	83 ec 0c             	sub    esp,0xc
c0021cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cd4:	e8 cd ff ff ff       	call   c0021ca6 <IOAPIC::~IOAPIC()>
c0021cd9:	83 c4 10             	add    esp,0x10
c0021cdc:	83 ec 08             	sub    esp,0x8
c0021cdf:	68 68 01 00 00       	push   0x168
c0021ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ce8:	e8 5a ac fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021ced:	83 c4 10             	add    esp,0x10
c0021cf0:	83 c4 0c             	add    esp,0xc
c0021cf3:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0021cf4 <APIC::~APIC()>:
c0021cf4:	83 ec 0c             	sub    esp,0xc
c0021cf7:	ba 24 55 02 c0       	mov    edx,0xc0025524
c0021cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d00:	89 10                	mov    DWORD PTR [eax],edx
c0021d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d06:	83 ec 0c             	sub    esp,0xc
c0021d09:	50                   	push   eax
c0021d0a:	e8 89 cb fe ff       	call   c000e898 <InterruptController::~InterruptController()>
c0021d0f:	83 c4 10             	add    esp,0x10
c0021d12:	90                   	nop
c0021d13:	83 c4 0c             	add    esp,0xc
c0021d16:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0021d18 <APIC::~APIC()>:
c0021d18:	83 ec 0c             	sub    esp,0xc
c0021d1b:	83 ec 0c             	sub    esp,0xc
c0021d1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d22:	e8 cd ff ff ff       	call   c0021cf4 <APIC::~APIC()>
c0021d27:	83 c4 10             	add    esp,0x10
c0021d2a:	83 ec 08             	sub    esp,0x8
c0021d2d:	68 58 21 00 00       	push   0x2158
c0021d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d36:	e8 0c ac fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021d3b:	83 c4 10             	add    esp,0x10
c0021d3e:	83 c4 0c             	add    esp,0xc
c0021d41:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0021d42 <PIC::~PIC()>:
c0021d42:	83 ec 0c             	sub    esp,0xc
c0021d45:	ba bc 55 02 c0       	mov    edx,0xc00255bc
c0021d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d4e:	89 10                	mov    DWORD PTR [eax],edx
c0021d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d54:	83 ec 0c             	sub    esp,0xc
c0021d57:	50                   	push   eax
c0021d58:	e8 3b cb fe ff       	call   c000e898 <InterruptController::~InterruptController()>
c0021d5d:	83 c4 10             	add    esp,0x10
c0021d60:	90                   	nop
c0021d61:	83 c4 0c             	add    esp,0xc
c0021d64:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0021d66 <PIC::~PIC()>:
c0021d66:	83 ec 0c             	sub    esp,0xc
c0021d69:	83 ec 0c             	sub    esp,0xc
c0021d6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d70:	e8 cd ff ff ff       	call   c0021d42 <PIC::~PIC()>
c0021d75:	83 c4 10             	add    esp,0x10
c0021d78:	83 ec 08             	sub    esp,0x8
c0021d7b:	68 58 21 00 00       	push   0x2158
c0021d80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d84:	e8 be ab fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021d89:	83 c4 10             	add    esp,0x10
c0021d8c:	83 c4 0c             	add    esp,0xc
c0021d8f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0021d90 <APICTimer::~APICTimer()>:
c0021d90:	83 ec 0c             	sub    esp,0xc
c0021d93:	ba 10 56 02 c0       	mov    edx,0xc0025610
c0021d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d9c:	89 10                	mov    DWORD PTR [eax],edx
c0021d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021da2:	83 ec 0c             	sub    esp,0xc
c0021da5:	50                   	push   eax
c0021da6:	e8 f9 e8 fe ff       	call   c00106a4 <Timer::~Timer()>
c0021dab:	83 c4 10             	add    esp,0x10
c0021dae:	90                   	nop
c0021daf:	83 c4 0c             	add    esp,0xc
c0021db2:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0021db4 <APICTimer::~APICTimer()>:
c0021db4:	83 ec 0c             	sub    esp,0xc
c0021db7:	83 ec 0c             	sub    esp,0xc
c0021dba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dbe:	e8 cd ff ff ff       	call   c0021d90 <APICTimer::~APICTimer()>
c0021dc3:	83 c4 10             	add    esp,0x10
c0021dc6:	83 ec 08             	sub    esp,0x8
c0021dc9:	68 60 01 00 00       	push   0x160
c0021dce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dd2:	e8 70 ab fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021dd7:	83 c4 10             	add    esp,0x10
c0021dda:	83 c4 0c             	add    esp,0xc
c0021ddd:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0021de0 <PIT::~PIT()>:
c0021de0:	83 ec 0c             	sub    esp,0xc
c0021de3:	ba 60 56 02 c0       	mov    edx,0xc0025660
c0021de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dec:	89 10                	mov    DWORD PTR [eax],edx
c0021dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021df2:	83 ec 0c             	sub    esp,0xc
c0021df5:	50                   	push   eax
c0021df6:	e8 a9 e8 fe ff       	call   c00106a4 <Timer::~Timer()>
c0021dfb:	83 c4 10             	add    esp,0x10
c0021dfe:	90                   	nop
c0021dff:	83 c4 0c             	add    esp,0xc
c0021e02:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021e04 <PIT::~PIT()>:
c0021e04:	83 ec 0c             	sub    esp,0xc
c0021e07:	83 ec 0c             	sub    esp,0xc
c0021e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e0e:	e8 cd ff ff ff       	call   c0021de0 <PIT::~PIT()>
c0021e13:	83 c4 10             	add    esp,0x10
c0021e16:	83 ec 08             	sub    esp,0x8
c0021e19:	68 5c 01 00 00       	push   0x15c
c0021e1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e22:	e8 20 ab fe ff       	call   c000c947 <operator delete(void*, unsigned long)>
c0021e27:	83 c4 10             	add    esp,0x10
c0021e2a:	83 c4 0c             	add    esp,0xc
c0021e2d:	c3                   	ret    
