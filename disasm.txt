
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 db fb 00 00       	call   c000fbfb <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 84 02 00       	call   c0028518 <_init>
c0000025:	c3                   	ret    
c0000026:	bb c2 90 02 c0       	mov    ebx,0xc00290c2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb d0 90 02 c0    	cmp    ebx,0xc00290d0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 d7 02 c0       	mov    eax,0xc002d7d8
c0000049:	3d d8 d7 02 c0       	cmp    eax,0xc002d7d8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 d7 02 c0       	push   0xc002d7d8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 d7 02 c0       	mov    eax,0xc002d7d8
c0000075:	2d d8 d7 02 c0       	sub    eax,0xc002d7d8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 d7 02 c0       	push   0xc002d7d8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 08 de 02 c0 00 	cmp    BYTE PTR ds:0xc002de08,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb d8 90 02 c0       	mov    ebx,0xc00290d8
c00000bb:	81 eb d4 90 02 c0    	sub    ebx,0xc00290d4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be d4 90 02 c0       	mov    esi,0xc00290d4
c00000ca:	a1 0c de 02 c0       	mov    eax,ds:0xc002de0c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 0c de 02 c0       	mov    ds:0xc002de0c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 0c de 02 c0       	mov    eax,ds:0xc002de0c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 d7 02 c0       	push   0xc002d7d8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 08 de 02 c0 01 	mov    BYTE PTR ds:0xc002de08,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 10 de 02 c0       	push   0xc002de10
c000012c:	68 d8 d7 02 c0       	push   0xc002d7d8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 97 d4 01 00       	call   c001d832 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 c7 27 01 00       	call   c0012b7a <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 75 d4 01 00       	call   c001d832 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 c8 d8 01 00       	call   c001dca4 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 75 de 01 00       	call   c001e25a <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 50 e2 02 c0 	lgdtd  ds:0xc002e250
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 a4 44 01 00       	call   c0014a7d <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 28 de 02 c0       	mov    ds:0xc002de28,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 28 de 02 c0    	mov    DWORD PTR ds:0xc002de28,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 28 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de28
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 e0 90 02 c0 02 	test   BYTE PTR [edx-0x3ffd6f20],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 e0 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f20],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 e0 90 02 c0 08 	test   BYTE PTR [edx-0x3ffd6f20],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 e0 90 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6f20],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 e0 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f20],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 40 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de40
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 40 de 02 c0    	mov    DWORD PTR ds:0xc002de40,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 44 de 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd21bc]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 44 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd21bc],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 40 de 02 c0    	mov    DWORD PTR ds:0xc002de40,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 6c de 02 c0    	cmp    DWORD PTR ds:0xc002de6c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 7c de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de7c
c0000e60:	c7 42 0c 74 de 02 c0 	mov    DWORD PTR [edx+0xc],0xc002de74
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 7c de 02 c0    	mov    DWORD PTR ds:0xc002de7c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 6c de 02 c0    	mov    DWORD PTR ds:0xc002de6c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 40 de 02 c0 02 	test   BYTE PTR ds:0xc002de40,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 40 de 02 c0       	mov    eax,0xc002de40
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 40 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de40
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 40 de 02 c0       	mov    eax,0xc002de40
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 44 de 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd21bc]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 44 de 02 c0 	mov    DWORD PTR [edx*4-0x3ffd21bc],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 74 de 02 c0 	lea    edx,[eax*8-0x3ffd218c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 40 de 02 c0       	mov    eax,0xc002de40
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 80 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de80
c00011e2:	81 fb 74 de 02 c0    	cmp    ebx,0xc002de74
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 74 de 02 c0       	cmp    eax,0xc002de74
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 70 de 02 c0    	cmp    DWORD PTR ds:0xc002de70,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 7c de 02 c0       	mov    ds:0xc002de7c,eax
c000121e:	a3 80 de 02 c0       	mov    ds:0xc002de80,eax
c0001223:	a3 70 de 02 c0       	mov    ds:0xc002de70,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 74 de 02 c0 	mov    DWORD PTR [eax+0x8],0xc002de74
c0001231:	c7 40 0c 74 de 02 c0 	mov    DWORD PTR [eax+0xc],0xc002de74
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 80 de 02 c0       	mov    ds:0xc002de80,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 74 de 02 c0 	mov    DWORD PTR [eax+0x8],0xc002de74
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 38 de 02 c0 	lea    ebp,[edx*4-0x3ffd21c8]
c0001282:	8b 14 95 40 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd21c0]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 40 de 02 c0 	lea    ecx,[edx*4-0x3ffd21c0]
c000129d:	8b 14 95 40 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd21c0]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 74 e1 02 c0 	or     DWORD PTR [edi*4-0x3ffd1e8c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 74 de 02 c0 	lea    eax,[eax*8-0x3ffd218c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 7c de 02 c0    	mov    DWORD PTR ds:0xc002de7c,ecx
c0001357:	89 0d 80 de 02 c0    	mov    DWORD PTR ds:0xc002de80,ecx
c000135d:	c7 41 08 74 de 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002de74
c0001364:	c7 41 0c 74 de 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002de74
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 6c de 02 c0 	lea    edx,[ecx*8-0x3ffd2194]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 74 e1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1e8c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 74 e1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1e8c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 6c de 02 c0 	lea    edx,[eax*4-0x3ffd2194]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 74 e1 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1e8c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 7c de 02 c0    	mov    DWORD PTR ds:0xc002de7c,edi
c000142a:	89 3d 80 de 02 c0    	mov    DWORD PTR ds:0xc002de80,edi
c0001430:	c7 47 08 74 de 02 c0 	mov    DWORD PTR [edi+0x8],0xc002de74
c0001437:	c7 47 0c 74 de 02 c0 	mov    DWORD PTR [edi+0xc],0xc002de74
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 70 de 02 c0    	mov    DWORD PTR ds:0xc002de70,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 6c de 02 c0       	mov    eax,ds:0xc002de6c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 6c de 02 c0    	mov    DWORD PTR ds:0xc002de6c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 40 de 02 c0       	mov    edx,0xc002de40
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 40 de 02 c0 00 	cmp    DWORD PTR ds:0xc002de40,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 40 de 02 c0       	mov    eax,0xc002de40
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 94 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e194
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 94 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e194,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 94 e1 02 c0    	mov    DWORD PTR ds:0xc002e194,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 6c de 02 c0    	cmp    DWORD PTR ds:0xc002de6c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 6c de 02 c0    	mov    DWORD PTR ds:0xc002de6c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 40 de 02 c0 00 	cmp    DWORD PTR ds:0xc002de40,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 40 de 02 c0       	mov    eax,0xc002de40
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 9c e1 02 c0    	push   DWORD PTR ds:0xc002e19c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 40 de 02 c0 00 	cmp    DWORD PTR ds:0xc002de40,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 40 de 02 c0       	mov    eax,0xc002de40
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 9c e1 02 c0       	mov    eax,ds:0xc002e19c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 40 de 02 c0       	mov    eax,0xc002de40
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 6c de 02 c0 00 	cmp    DWORD PTR ds:0xc002de6c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 40 de 02 c0       	mov    eax,0xc002de40
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 6c de 02 c0       	mov    eax,ds:0xc002de6c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 44 de 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd21bc]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 74 de 02 c0       	mov    eax,0xc002de74
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 6c e1 02 c0       	cmp    eax,0xc002e16c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 a8 e1 02 c0       	mov    eax,ds:0xc002e1a8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 90 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e190
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 a4 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e1a4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 b4 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e1b4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 40 de 02 c0       	mov    eax,0xc002de40
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 e4 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6e1c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 40 de 02 c0       	mov    eax,ds:0xc002de40
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 40 de 02 c0       	mov    ds:0xc002de40,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 84 e1 02 c0    	mov    DWORD PTR ds:0xc002e184,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 88 e1 02 c0    	mov    DWORD PTR ds:0xc002e188,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 8c e1 02 c0    	mov    DWORD PTR ds:0xc002e18c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 94 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e194,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 20 19 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce6e0]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 54 f0 01 00       	jmp    c0020c80 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 20 19 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce6e0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 85 f0 01 00       	jmp    c0020cc7 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 20 19 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce6e0]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 ad f0 01 00       	jmp    c0020d0e <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 38 49 02 00       	call   c002687c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 00 93 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6d00]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 00 93 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6d00]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 00 92 02 c0       	mov    edx,0xc0029200
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 20 93 02 c0       	mov    edx,0xc0029320
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 64 c6 02 c0       	mov    edx,0xc002c664
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 2c 93 02 c0       	mov    edx,0xc002932c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 10 93 02 c0       	mov    edx,0xc0029310
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 e0 e1 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1e20]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 c0 e1 02 c0    	mov    ax,ds:0xc002e1c0
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 c0 e1 02 c0    	mov    ds:0xc002e1c0,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 35 37 02 00       	call   c002687c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 32 93 02 c0       	mov    eax,0xc0029332
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 80 92 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6d80]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 3b 93 02 c0       	mov    eax,0xc002933b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 00 93 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6d00]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 00 21 02 00       	call   c002687c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 10 93 02 c0       	mov    edx,0xc0029310
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 00 92 02 c0       	mov    edx,0xc0029200
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 10 92 02 c0       	mov    edx,0xc0029210
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 e0 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e20]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 e0 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1e20],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 c7 0a 02 00       	call   c002687c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 ad 0a 02 00       	call   c002687c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 57 92 02 c0       	mov    eax,0xc0029257
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 50 92 02 c0       	mov    eax,0xc0029250
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 e0 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e20]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 40 92 02 c0       	mov    esi,0xc0029240
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 f0 f1 01 00       	call   c002687c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 20 93 02 c0       	mov    edx,0xc0029320
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 20 92 02 c0       	mov    edx,0xc0029220
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 30 92 02 c0       	mov    edx,0xc0029230
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 42 93 02 c0       	mov    edx,0xc0029342
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 4e 93 02 c0       	mov    edx,0xc002934e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 62 93 02 c0       	mov    edx,0xc0029362
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 a0 73 00 00       	call   c000f843 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 9a 73 00 00       	call   c000f853 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 80 96 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029680
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 80 96 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029680
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 80 94 02 c0       	mov    eax,0xc0029480
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 c0 93 02 c0       	mov    eax,0xc00293c0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 80 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c80]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 df 70 00 00       	call   c000f853 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c9 70 00 00       	call   c000f853 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 44 fb 01 00       	call   c002834f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 07 fb 01 00       	call   c0028331 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 db fa 01 00       	call   c002834f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 8e f1 01 00       	call   c0027a54 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 08 fc 01 00       	call   c00284e0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 55 fa 01 00       	call   c002834f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 97 f9 01 00       	call   c002834f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 64 f9 01 00       	call   c0028331 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 51 f8 01 00       	call   c002834f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 19 f8 01 00       	call   c0028331 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a8 6c 00 00       	call   c000f873 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 43 6c 00 00       	call   c000f853 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 80 97 02 c0       	mov    eax,0xc0029780
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 25 f6 01 00       	call   c002834f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 ea f5 01 00       	call   c0028331 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 e0 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6420]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 fa f2 01 00       	call   c00280e3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 78 ec 01 00       	call   c0027a80 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 34 f5 01 00       	call   c0028353 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 22 f6 01 00       	call   c0028477 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 0c ec 01 00       	call   c0027a80 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 b7 f4 01 00       	call   c002834d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 98 f4 01 00       	call   c0028351 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 26 f6 01 00       	call   c0028500 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 d8 f1 01 00       	call   c00280e3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 56 eb 01 00       	call   c0027a80 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 12 f4 01 00       	call   c0028353 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 00 f5 01 00       	call   c0028477 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 ea ea 01 00       	call   c0027a80 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 95 f3 01 00       	call   c002834d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 75 f3 01 00       	call   c0028351 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 02 f5 01 00       	call   c0028500 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 b0 f2 01 00       	call   c002834f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 6e f2 01 00       	call   c0028331 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 56 f2 01 00       	call   c002834f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 c8 ef 01 00       	call   c00280e3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 ca e2 01 00       	call   c0027403 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 2d e9 01 00       	call   c0027a80 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 7f ef 01 00       	call   c00280e3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 85 e2 01 00       	call   c0027403 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 54 ef 01 00       	call   c00280e3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 a4 f1 01 00       	call   c002834d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 81 e8 01 00       	call   c0027a54 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 fb f2 01 00       	call   c00284e0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 2a f1 01 00       	call   c0028331 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 25 e8 01 00       	call   c0027a54 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 a3 ee 01 00       	call   c00280e3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 26 e8 01 00       	call   c0027a80 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 78 ee 01 00       	call   c00280e3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 df ea 01 00       	call   c0027d64 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 5e e1 01 00       	call   c0027403 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 be da 01 00       	call   c0026d98 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 95 f1 01 00       	call   c0028477 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 7e e7 01 00       	call   c0027a80 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 65 f1 01 00       	call   c0028477 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 d7 e0 01 00       	call   c0027403 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 10 f0 01 00       	call   c0028353 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 f8 e9 01 00       	call   c0027d64 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 7e e0 01 00       	call   c0027403 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 64 f1 01 00       	call   c0028500 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 3e ed 01 00       	call   c00280e3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 95 e6 01 00       	call   c0027a54 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 74 ef 01 00       	call   c002834f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 0d e0 01 00       	call   c0027403 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 39 e6 01 00       	call   c0027a54 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 d3 f0 01 00       	call   c0028500 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 8c ec 01 00       	call   c00280e3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 09 e6 01 00       	call   c0027a80 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 5c ec 01 00       	call   c00280e3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 62 df 01 00       	call   c0027403 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 32 ec 01 00       	call   c00280e3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 84 ee 01 00       	call   c002834f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 5b e5 01 00       	call   c0027a54 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 d5 ef 01 00       	call   c00284e0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 04 ee 01 00       	call   c0028331 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 fe e4 01 00       	call   c0027a54 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 7c eb 01 00       	call   c00280e3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 ff e4 01 00       	call   c0027a80 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 51 eb 01 00       	call   c00280e3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 b8 e7 01 00       	call   c0027d64 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 37 de 01 00       	call   c0027403 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 87 d7 01 00       	call   c0026d98 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 5e ee 01 00       	call   c0028477 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 47 e4 01 00       	call   c0027a80 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 2e ee 01 00       	call   c0028477 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 a0 dd 01 00       	call   c0027403 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 d9 ec 01 00       	call   c0028353 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 c0 e6 01 00       	call   c0027d64 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 3f dd 01 00       	call   c0027403 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 25 ee 01 00       	call   c0028500 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 ff e9 01 00       	call   c00280e3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 56 e3 01 00       	call   c0027a54 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 35 ec 01 00       	call   c002834f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 ce dc 01 00       	call   c0027403 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 fa e2 01 00       	call   c0027a54 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 6f e9 01 00       	call   c00280e3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 75 dc 01 00       	call   c0027403 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 40 9c 02 c0       	mov    eax,0xc0029c40
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 54 9c 02 c0       	mov    eax,0xc0029c54
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 dc 5f 00 00       	call   c000f853 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 de 5f 00 00       	call   c000f873 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 ea e7 01 00       	call   c00280e3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 68 e1 01 00       	call   c0027a80 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 fa d3 01 00       	call   c0026d98 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 d1 ea 01 00       	call   c0028477 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 ba e0 01 00       	call   c0027a80 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 9d ea 01 00       	call   c0028477 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 0f da 01 00       	call   c0027403 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 6f ea 01 00       	call   c0028477 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 5e e0 01 00       	call   c0027a80 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 c7 d9 01 00       	call   c0027403 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 e8 d2 01 00       	call   c0026d98 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 bf e9 01 00       	call   c0028477 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 a8 df 01 00       	call   c0027a80 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 8b e9 01 00       	call   c0028477 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 fd d8 01 00       	call   c0027403 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 5d e9 01 00       	call   c0028477 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 4c df 01 00       	call   c0027a80 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 b5 d8 01 00       	call   c0027403 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 93 d8 01 00       	call   c0027403 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 6f d1 01 00       	call   c0026d98 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 46 e8 01 00       	call   c0028477 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 2f de 01 00       	call   c0027a80 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 12 e8 01 00       	call   c0028477 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 84 d7 01 00       	call   c0027403 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 e4 e7 01 00       	call   c0028477 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 cd dd 01 00       	call   c0027a80 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 36 d7 01 00       	call   c0027403 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 96 e7 01 00       	call   c0028477 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 7f dd 01 00       	call   c0027a80 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 e8 d6 01 00       	call   c0027403 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 fd cf 01 00       	call   c0026d98 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 d4 e6 01 00       	call   c0028477 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 bd dc 01 00       	call   c0027a80 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 a4 e6 01 00       	call   c0028477 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 16 d6 01 00       	call   c0027403 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 76 e6 01 00       	call   c0028477 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 5f dc 01 00       	call   c0027a80 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 c8 d5 01 00       	call   c0027403 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 28 e6 01 00       	call   c0028477 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 11 dc 01 00       	call   c0027a80 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 7a d5 01 00       	call   c0027403 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 4e d5 01 00       	call   c0027403 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 ab db 01 00       	call   c0027a80 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 67 e4 01 00       	call   c0028353 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 f6 d4 01 00       	call   c0027403 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 53 db 01 00       	call   c0027a80 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 0f e4 01 00       	call   c0028353 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 89 cd 01 00       	call   c0026d98 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 60 e4 01 00       	call   c0028477 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 49 da 01 00       	call   c0027a80 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 2c e4 01 00       	call   c0028477 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 9e d3 01 00       	call   c0027403 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 fe e3 01 00       	call   c0028477 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 e7 d9 01 00       	call   c0027a80 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 50 d3 01 00       	call   c0027403 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 b0 e3 01 00       	call   c0028477 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 99 d9 01 00       	call   c0027a80 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 02 d3 01 00       	call   c0027403 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 62 e3 01 00       	call   c0028477 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 4b d9 01 00       	call   c0027a80 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 b4 d2 01 00       	call   c0027403 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 14 e3 01 00       	call   c0028477 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 fd d8 01 00       	call   c0027a80 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 66 d2 01 00       	call   c0027403 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 68 cb 01 00       	call   c0026d98 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 3f e2 01 00       	call   c0028477 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 28 d8 01 00       	call   c0027a80 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 0f e2 01 00       	call   c0028477 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 81 d1 01 00       	call   c0027403 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 e1 e1 01 00       	call   c0028477 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 ca d7 01 00       	call   c0027a80 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 33 d1 01 00       	call   c0027403 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 93 e1 01 00       	call   c0028477 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 7c d7 01 00       	call   c0027a80 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 e5 d0 01 00       	call   c0027403 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 45 e1 01 00       	call   c0028477 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 2e d7 01 00       	call   c0027a80 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 97 d0 01 00       	call   c0027403 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 f7 e0 01 00       	call   c0028477 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 e0 d6 01 00       	call   c0027a80 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 49 d0 01 00       	call   c0027403 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 1d d0 01 00       	call   c0027403 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 7a d6 01 00       	call   c0027a80 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 36 df 01 00       	call   c0028353 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 c5 cf 01 00       	call   c0027403 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 22 d6 01 00       	call   c0027a80 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 de de 01 00       	call   c0028353 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 6c cf 01 00       	call   c0027403 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 c9 d5 01 00       	call   c0027a80 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 85 de 01 00       	call   c0028353 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 13 cf 01 00       	call   c0027403 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 70 d5 01 00       	call   c0027a80 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 2c de 01 00       	call   c0028353 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 8a c7 01 00       	call   c0026d98 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 61 de 01 00       	call   c0028477 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 4a d4 01 00       	call   c0027a80 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 2d de 01 00       	call   c0028477 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 9f cd 01 00       	call   c0027403 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 ff dd 01 00       	call   c0028477 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 e8 d3 01 00       	call   c0027a80 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 51 cd 01 00       	call   c0027403 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 b1 dd 01 00       	call   c0028477 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 9a d3 01 00       	call   c0027a80 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 03 cd 01 00       	call   c0027403 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 63 dd 01 00       	call   c0028477 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 4c d3 01 00       	call   c0027a80 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 b5 cc 01 00       	call   c0027403 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 15 dd 01 00       	call   c0028477 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 fe d2 01 00       	call   c0027a80 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 67 cc 01 00       	call   c0027403 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 c7 dc 01 00       	call   c0028477 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 b0 d2 01 00       	call   c0027a80 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 16 cc 01 00       	call   c0027403 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 76 dc 01 00       	call   c0028477 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 5f d2 01 00       	call   c0027a80 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 c8 cb 01 00       	call   c0027403 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 c2 c4 01 00       	call   c0026d98 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 99 db 01 00       	call   c0028477 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 82 d1 01 00       	call   c0027a80 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 62 db 01 00       	call   c0028477 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 d4 ca 01 00       	call   c0027403 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 34 db 01 00       	call   c0028477 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 1d d1 01 00       	call   c0027a80 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 86 ca 01 00       	call   c0027403 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 e6 da 01 00       	call   c0028477 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 cf d0 01 00       	call   c0027a80 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 38 ca 01 00       	call   c0027403 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 98 da 01 00       	call   c0028477 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 81 d0 01 00       	call   c0027a80 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 ea c9 01 00       	call   c0027403 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 4a da 01 00       	call   c0028477 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 33 d0 01 00       	call   c0027a80 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 9c c9 01 00       	call   c0027403 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 fc d9 01 00       	call   c0028477 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 e5 cf 01 00       	call   c0027a80 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 4b c9 01 00       	call   c0027403 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 ab d9 01 00       	call   c0028477 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 94 cf 01 00       	call   c0027a80 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 03 c9 01 00       	call   c0027403 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 dc c8 01 00       	call   c0027403 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 3a cf 01 00       	call   c0027a80 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 f6 d7 01 00       	call   c0028353 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 85 c8 01 00       	call   c0027403 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 e3 ce 01 00       	call   c0027a80 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 9f d7 01 00       	call   c0028353 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 2d c8 01 00       	call   c0027403 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 8b ce 01 00       	call   c0027a80 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 47 d7 01 00       	call   c0028353 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 d5 c7 01 00       	call   c0027403 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 33 ce 01 00       	call   c0027a80 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 ef d6 01 00       	call   c0028353 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 7d c7 01 00       	call   c0027403 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 db cd 01 00       	call   c0027a80 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 97 d6 01 00       	call   c0028353 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 2b c7 01 00       	call   c0027403 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 89 cd 01 00       	call   c0027a80 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 45 d6 01 00       	call   c0028353 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 59 bf 01 00       	call   c0026d98 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 30 d6 01 00       	call   c0028477 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 19 cc 01 00       	call   c0027a80 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 00 d6 01 00       	call   c0028477 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 72 c5 01 00       	call   c0027403 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 84 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd637c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 a6 d5 01 00       	call   c0028477 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 8f cb 01 00       	call   c0027a80 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 fa c4 01 00       	call   c0027403 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 47 d5 01 00       	call   c0028477 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 30 cb 01 00       	call   c0027a80 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 9b c4 01 00       	call   c0027403 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 e8 d4 01 00       	call   c0028477 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 d1 ca 01 00       	call   c0027a80 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 3c c4 01 00       	call   c0027403 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 89 d4 01 00       	call   c0028477 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 72 ca 01 00       	call   c0027a80 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 dd c3 01 00       	call   c0027403 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 2a d4 01 00       	call   c0028477 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 13 ca 01 00       	call   c0027a80 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 7e c3 01 00       	call   c0027403 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 cb d3 01 00       	call   c0028477 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 b4 c9 01 00       	call   c0027a80 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 1f c3 01 00       	call   c0027403 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 6c d3 01 00       	call   c0028477 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 55 c9 01 00       	call   c0027a80 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 c0 c2 01 00       	call   c0027403 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 0d d3 01 00       	call   c0028477 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 f6 c8 01 00       	call   c0027a80 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 61 c2 01 00       	call   c0027403 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 6b bb 01 00       	call   c0026d98 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 42 d2 01 00       	call   c0028477 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 2b c8 01 00       	call   c0027a80 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 12 d2 01 00       	call   c0028477 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 84 c1 01 00       	call   c0027403 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 a0 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6360]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 b7 d1 01 00       	call   c0028477 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 a0 c7 01 00       	call   c0027a80 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 0b c1 01 00       	call   c0027403 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 57 d1 01 00       	call   c0028477 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 40 c7 01 00       	call   c0027a80 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 ab c0 01 00       	call   c0027403 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 f7 d0 01 00       	call   c0028477 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 e0 c6 01 00       	call   c0027a80 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 4b c0 01 00       	call   c0027403 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 97 d0 01 00       	call   c0028477 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 80 c6 01 00       	call   c0027a80 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 eb bf 01 00       	call   c0027403 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 37 d0 01 00       	call   c0028477 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 20 c6 01 00       	call   c0027a80 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 8b bf 01 00       	call   c0027403 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 d7 cf 01 00       	call   c0028477 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 c0 c5 01 00       	call   c0027a80 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 2b bf 01 00       	call   c0027403 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 77 cf 01 00       	call   c0028477 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 60 c5 01 00       	call   c0027a80 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 cb be 01 00       	call   c0027403 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 17 cf 01 00       	call   c0028477 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 00 c5 01 00       	call   c0027a80 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 6b be 01 00       	call   c0027403 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 bc 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6344]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 10 be 01 00       	call   c0027403 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 6d c4 01 00       	call   c0027a80 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 29 cd 01 00       	call   c0028353 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 b3 bd 01 00       	call   c0027403 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 10 c4 01 00       	call   c0027a80 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 cc cc 01 00       	call   c0028353 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 56 bd 01 00       	call   c0027403 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 b3 c3 01 00       	call   c0027a80 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 6f cc 01 00       	call   c0028353 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 f9 bc 01 00       	call   c0027403 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 56 c3 01 00       	call   c0027a80 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 12 cc 01 00       	call   c0028353 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 9c bc 01 00       	call   c0027403 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 f9 c2 01 00       	call   c0027a80 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 b5 cb 01 00       	call   c0028353 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 3f bc 01 00       	call   c0027403 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 9c c2 01 00       	call   c0027a80 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 58 cb 01 00       	call   c0028353 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 e2 bb 01 00       	call   c0027403 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 3f c2 01 00       	call   c0027a80 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 fb ca 01 00       	call   c0028353 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 85 bb 01 00       	call   c0027403 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 e2 c1 01 00       	call   c0027a80 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 9e ca 01 00       	call   c0028353 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 9a c1 01 00       	call   c0027a80 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 0a cc 01 00       	jmp    c0028500 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 7c c8 01 00       	call   c002834f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 3a c8 01 00       	call   c0028331 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 d1 c5 01 00       	call   c00280e3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 d2 b8 01 00       	call   c0027403 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 a1 c5 01 00       	call   c00280e3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 08 c2 01 00       	call   c0027d64 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 a7 c7 01 00       	call   c0028331 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 aa c7 01 00       	call   c002834f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 7d c7 01 00       	call   c002834f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 76 c1 01 00       	call   c0027d64 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 f8 c8 01 00       	call   c0028500 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 d3 c8 01 00       	call   c0028500 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 ad c4 01 00       	call   c00280e3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 04 be 01 00       	call   c0027a54 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 e3 c6 01 00       	call   c002834f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 7c b7 01 00       	call   c0027403 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 a0 bd 01 00       	call   c0027a54 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 3a c8 01 00       	call   c0028500 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 7a c0 01 00       	call   c0027d64 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 f7 b6 01 00       	call   c0027403 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 23 c3 01 00       	call   c00280e3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 23 b6 01 00       	call   c0027403 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 03 b6 01 00       	call   c0027403 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 d3 c2 01 00       	call   c00280e3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 23 c5 01 00       	call   c002834d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 02 bc 01 00       	call   c0027a54 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 7c c6 01 00       	call   c00284e0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 ab c4 01 00       	call   c0028331 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 a9 bb 01 00       	call   c0027a54 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 27 c2 01 00       	call   c00280e3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 aa bb 01 00       	call   c0027a80 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 fc c1 01 00       	call   c00280e3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 63 be 01 00       	call   c0027d64 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 e2 b4 01 00       	call   c0027403 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 ac c1 01 00       	call   c00280e3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 f8 c3 01 00       	call   c002834f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 ed ba 01 00       	call   c0027a80 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 bf ba 01 00       	call   c0027a80 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 f8 c0 01 00       	call   c00280e3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 5c bd 01 00       	call   c0027d64 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 24 bd 01 00       	call   c0027d64 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 a3 b3 01 00       	call   c0027403 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 88 c4 01 00       	call   c0028500 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 62 c0 01 00       	call   c00280e3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 b9 b9 01 00       	call   c0027a54 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 98 c2 01 00       	call   c002834f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 30 b3 01 00       	call   c0027403 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 54 b9 01 00       	call   c0027a54 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 ee c3 01 00       	call   c0028500 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 b7 c1 01 00       	call   c002834f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 75 c1 01 00       	call   c0028331 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 0c bf 01 00       	call   c00280e3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 0d b2 01 00       	call   c0027403 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 dc be 01 00       	call   c00280e3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 43 bb 01 00       	call   c0027d64 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 e2 c0 01 00       	call   c0028331 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 e5 c0 01 00       	call   c002834f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 b8 c0 01 00       	call   c002834f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 b1 ba 01 00       	call   c0027d64 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 33 c2 01 00       	call   c0028500 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 0e c2 01 00       	call   c0028500 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 e8 bd 01 00       	call   c00280e3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 3f b7 01 00       	call   c0027a54 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 1e c0 01 00       	call   c002834f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 b7 b0 01 00       	call   c0027403 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 db b6 01 00       	call   c0027a54 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 75 c1 01 00       	call   c0028500 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 b5 b9 01 00       	call   c0027d64 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 32 b0 01 00       	call   c0027403 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 5d bc 01 00       	call   c00280e3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 5d af 01 00       	call   c0027403 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 3d af 01 00       	call   c0027403 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 0d bc 01 00       	call   c00280e3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 5d be 01 00       	call   c002834d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 3b b5 01 00       	call   c0027a54 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 b5 bf 01 00       	call   c00284e0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 e4 bd 01 00       	call   c0028331 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 e1 b4 01 00       	call   c0027a54 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 5f bb 01 00       	call   c00280e3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 e2 b4 01 00       	call   c0027a80 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 34 bb 01 00       	call   c00280e3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 9b b7 01 00       	call   c0027d64 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 1a ae 01 00       	call   c0027403 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 e4 ba 01 00       	call   c00280e3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 30 bd 01 00       	call   c002834f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 25 b4 01 00       	call   c0027a80 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 f7 b3 01 00       	call   c0027a80 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 2e ba 01 00       	call   c00280e3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 92 b6 01 00       	call   c0027d64 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 5f b6 01 00       	call   c0027d64 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 de ac 01 00       	call   c0027403 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 c3 bd 01 00       	call   c0028500 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 9d b9 01 00       	call   c00280e3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 f4 b2 01 00       	call   c0027a54 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 d3 bb 01 00       	call   c002834f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 6b ac 01 00       	call   c0027403 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 8f b2 01 00       	call   c0027a54 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 29 bd 01 00       	call   c0028500 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 f2 ba 01 00       	call   c002834f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 b0 ba 01 00       	call   c0028331 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 47 b8 01 00       	call   c00280e3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 48 ab 01 00       	call   c0027403 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 17 b8 01 00       	call   c00280e3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 7e b4 01 00       	call   c0027d64 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 1d ba 01 00       	call   c0028331 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 20 ba 01 00       	call   c002834f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 f3 b9 01 00       	call   c002834f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 ec b3 01 00       	call   c0027d64 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 6e bb 01 00       	call   c0028500 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 49 bb 01 00       	call   c0028500 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 23 b7 01 00       	call   c00280e3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 7a b0 01 00       	call   c0027a54 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 59 b9 01 00       	call   c002834f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 f2 a9 01 00       	call   c0027403 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 16 b0 01 00       	call   c0027a54 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 b0 ba 01 00       	call   c0028500 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 f0 b2 01 00       	call   c0027d64 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 6d a9 01 00       	call   c0027403 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 98 b5 01 00       	call   c00280e3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 98 a8 01 00       	call   c0027403 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 78 a8 01 00       	call   c0027403 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 48 b5 01 00       	call   c00280e3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 98 b7 01 00       	call   c002834d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 76 ae 01 00       	call   c0027a54 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 f0 b8 01 00       	call   c00284e0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 1f b7 01 00       	call   c0028331 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 1c ae 01 00       	call   c0027a54 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 9a b4 01 00       	call   c00280e3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 1d ae 01 00       	call   c0027a80 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 6f b4 01 00       	call   c00280e3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 d6 b0 01 00       	call   c0027d64 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 55 a7 01 00       	call   c0027403 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 1f b4 01 00       	call   c00280e3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 6b b6 01 00       	call   c002834f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 60 ad 01 00       	call   c0027a80 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 32 ad 01 00       	call   c0027a80 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 69 b3 01 00       	call   c00280e3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 cd af 01 00       	call   c0027d64 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 9a af 01 00       	call   c0027d64 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 19 a6 01 00       	call   c0027403 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 fe b6 01 00       	call   c0028500 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 d8 b2 01 00       	call   c00280e3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 2f ac 01 00       	call   c0027a54 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 0e b5 01 00       	call   c002834f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 a6 a5 01 00       	call   c0027403 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 ca ab 01 00       	call   c0027a54 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 64 b6 01 00       	call   c0028500 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 2d b4 01 00       	call   c002834f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 eb b3 01 00       	call   c0028331 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 82 b1 01 00       	call   c00280e3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 83 a4 01 00       	call   c0027403 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 52 b1 01 00       	call   c00280e3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 b9 ad 01 00       	call   c0027d64 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 58 b3 01 00       	call   c0028331 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 5b b3 01 00       	call   c002834f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 2e b3 01 00       	call   c002834f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 27 ad 01 00       	call   c0027d64 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 a9 b4 01 00       	call   c0028500 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 84 b4 01 00       	call   c0028500 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 5e b0 01 00       	call   c00280e3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 b5 a9 01 00       	call   c0027a54 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 94 b2 01 00       	call   c002834f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 2d a3 01 00       	call   c0027403 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 51 a9 01 00       	call   c0027a54 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 eb b3 01 00       	call   c0028500 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 2b ac 01 00       	call   c0027d64 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 a8 a2 01 00       	call   c0027403 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 d3 ae 01 00       	call   c00280e3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 d3 a1 01 00       	call   c0027403 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 b3 a1 01 00       	call   c0027403 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 83 ae 01 00       	call   c00280e3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 d3 b0 01 00       	call   c002834d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 b1 a7 01 00       	call   c0027a54 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 2b b2 01 00       	call   c00284e0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 5a b0 01 00       	call   c0028331 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 57 a7 01 00       	call   c0027a54 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 d5 ad 01 00       	call   c00280e3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 58 a7 01 00       	call   c0027a80 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 aa ad 01 00       	call   c00280e3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 11 aa 01 00       	call   c0027d64 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 90 a0 01 00       	call   c0027403 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 5a ad 01 00       	call   c00280e3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 a6 af 01 00       	call   c002834f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 9b a6 01 00       	call   c0027a80 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 6d a6 01 00       	call   c0027a80 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 a4 ac 01 00       	call   c00280e3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 08 a9 01 00       	call   c0027d64 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 d5 a8 01 00       	call   c0027d64 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 54 9f 01 00       	call   c0027403 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 39 b0 01 00       	call   c0028500 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 13 ac 01 00       	call   c00280e3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 6a a5 01 00       	call   c0027a54 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 49 ae 01 00       	call   c002834f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 e1 9e 01 00       	call   c0027403 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 05 a5 01 00       	call   c0027a54 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 9f af 01 00       	call   c0028500 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 65 ad 01 00       	call   c002834f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 23 ad 01 00       	call   c0028331 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 ba aa 01 00       	call   c00280e3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 bb 9d 01 00       	call   c0027403 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 8a aa 01 00       	call   c00280e3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 f1 a6 01 00       	call   c0027d64 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 90 ac 01 00       	call   c0028331 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 93 ac 01 00       	call   c002834f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 66 ac 01 00       	call   c002834f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 5f a6 01 00       	call   c0027d64 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 e1 ad 01 00       	call   c0028500 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 b8 ad 01 00       	call   c0028500 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 92 a9 01 00       	call   c00280e3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 e9 a2 01 00       	call   c0027a54 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 c8 ab 01 00       	call   c002834f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 61 9c 01 00       	call   c0027403 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 89 a2 01 00       	call   c0027a54 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 23 ad 01 00       	call   c0028500 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 64 a5 01 00       	call   c0027d64 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 e1 9b 01 00       	call   c0027403 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 0d a8 01 00       	call   c00280e3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 0d 9b 01 00       	call   c0027403 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 ed 9a 01 00       	call   c0027403 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 bd a7 01 00       	call   c00280e3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 f1 a9 01 00       	call   c0028331 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 e8 a0 01 00       	call   c0027a54 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 62 ab 01 00       	call   c00284e0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 91 a9 01 00       	call   c0028331 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 8b a0 01 00       	call   c0027a54 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 09 a7 01 00       	call   c00280e3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 8c a0 01 00       	call   c0027a80 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 de a6 01 00       	call   c00280e3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 45 a3 01 00       	call   c0027d64 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 c4 99 01 00       	call   c0027403 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 8e a6 01 00       	call   c00280e3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 da a8 01 00       	call   c002834f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 cf 9f 01 00       	call   c0027a80 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 a1 9f 01 00       	call   c0027a80 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 e5 a5 01 00       	call   c00280e3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 4c a2 01 00       	call   c0027d64 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 35 9f 01 00       	call   c0027a80 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 f1 a7 01 00       	call   c0028353 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 e4 a1 01 00       	call   c0027d64 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 63 98 01 00       	call   c0027403 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 48 a9 01 00       	call   c0028500 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 22 a5 01 00       	call   c00280e3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 79 9e 01 00       	call   c0027a54 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 58 a7 01 00       	call   c002834f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 f0 97 01 00       	call   c0027403 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 18 9e 01 00       	call   c0027a54 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 b2 a8 01 00       	call   c0028500 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 e4 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd631c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 d8 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6328]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 a2 1b 00 00       	call   c000f853 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 6d a5 01 00       	call   c002834f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 2b a5 01 00       	call   c0028331 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 17 a5 01 00       	call   c002834f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 89 a2 01 00       	call   c00280e3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 07 9c 01 00       	call   c0027a80 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 59 a2 01 00       	call   c00280e3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 5f 95 01 00       	call   c0027403 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 2e a2 01 00       	call   c00280e3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 7e a4 01 00       	call   c002834d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 5f 9b 01 00       	call   c0027a54 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 d9 a5 01 00       	call   c00284e0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 08 a4 01 00       	call   c0028331 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 07 9b 01 00       	call   c0027a54 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 85 a1 01 00       	call   c00280e3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 08 9b 01 00       	call   c0027a80 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 5a a1 01 00       	call   c00280e3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 c1 9d 01 00       	call   c0027d64 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 40 94 01 00       	call   c0027403 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 68 9d 01 00       	call   c0027d64 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 ee 93 01 00       	call   c0027403 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 d4 a4 01 00       	call   c0028500 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 ae a0 01 00       	call   c00280e3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 05 9a 01 00       	call   c0027a54 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 e4 a2 01 00       	call   c002834f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 7d 93 01 00       	call   c0027403 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 a9 99 01 00       	call   c0027a54 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 43 a4 01 00       	call   c0028500 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 f8 9f 01 00       	call   c00280e3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 75 99 01 00       	call   c0027a80 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 c6 9f 01 00       	call   c00280e3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 cc 92 01 00       	call   c0027403 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 9c 9f 01 00       	call   c00280e3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 f0 a1 01 00       	call   c0028351 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 c9 98 01 00       	call   c0027a54 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 43 a3 01 00       	call   c00284e0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 72 a1 01 00       	call   c0028331 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 70 98 01 00       	call   c0027a54 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 ee 9e 01 00       	call   c00280e3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 71 98 01 00       	call   c0027a80 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 c3 9e 01 00       	call   c00280e3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 2a 9b 01 00       	call   c0027d64 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 a9 91 01 00       	call   c0027403 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 c5 9a 01 00       	call   c0027d64 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 44 91 01 00       	call   c0027403 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 2a a2 01 00       	call   c0028500 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 04 9e 01 00       	call   c00280e3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 5b 97 01 00       	call   c0027a54 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 3a a0 01 00       	call   c002834f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 d3 90 01 00       	call   c0027403 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 ff 96 01 00       	call   c0027a54 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 70 9d 01 00       	call   c00280e3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 76 90 01 00       	call   c0027403 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 fe 9d 02 c0       	mov    eax,0xc0029dfe
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 0f 9e 02 c0       	mov    eax,0xc0029e0f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e4 13 00 00       	call   c000f853 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e6 13 00 00       	call   c000f873 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 55 13 00 00       	call   c000f843 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 46 9e 02 c0       	push   0xc0029e46
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 48 e2 02 c0       	mov    eax,0xc002e248
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 4f 9e 02 c0       	push   0xc0029e4f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 7c 68 02 c0       	mov    eax,0xc002687c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 59 9e 02 c0       	push   0xc0029e59
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 b0 65 02 c0       	mov    eax,0xc00265b0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 62 9e 02 c0       	push   0xc0029e62
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 6c 9e 02 c0       	push   0xc0029e6c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 fc 66 02 c0       	mov    eax,0xc00266fc
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 75 9e 02 c0       	push   0xc0029e75
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 4c e2 02 c0       	mov    eax,0xc002e24c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 82 9e 02 c0       	push   0xc0029e82
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 4d e2 02 c0       	mov    eax,0xc002e24d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 15 5d 00 00       	call   c0014338 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 1b 00 00       	push   0x1b3f
c000e654:	e8 ea 11 00 00       	call   c000f843 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 b4 17 03 c0    	push   DWORD PTR ds:0xc00317b4
c000e668:	68 8f 9e 02 c0       	push   0xc0029e8f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 2d f4 00 00       	call   c001daa2 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 18 f7 00 00       	call   c001dda2 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 01 e6 01 c0       	push   0xc001e601
c000e693:	ff 35 b4 17 03 c0    	push   DWORD PTR ds:0xc00317b4
c000e699:	e8 04 f7 00 00       	call   c001dda2 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 68 17 03 c0       	mov    ds:0xc0031768,eax
c000e6a6:	c6 05 4d e2 02 c0 01 	mov    BYTE PTR ds:0xc002e24d,0x1
c000e6ad:	e8 cf 02 01 00       	call   c001e981 <Vm::initialise8086()>
c000e6b2:	e8 69 4a 00 00       	call   c0013120 <Fs::initVFS()>
c000e6b7:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 43 dd 00 00       	call   c001c416 <Sys::loadSyscalls()>
c000e6d3:	e8 66 bc 00 00       	call   c001a33e <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 9c 9e 02 c0       	push   0xc0029e9c
c000e6e2:	68 a5 9e 02 c0       	push   0xc0029ea5
c000e6e7:	e8 78 c9 00 00       	call   c001b064 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 14 55 00 00       	call   c0013c08 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 07 5c 00 00       	call   c001430c <Device::loadDriversForAll()>
c000e705:	e8 7a b7 00 00       	call   c0019e84 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 ad 9e 02 c0       	push   0xc0029ead
c000e719:	e8 8c ee 00 00       	call   c001d5aa <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 d2 f0 00 00       	call   c001d7f9 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 d2 f9 00 00       	call   c001e106 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 c9 9e 02 c0       	push   0xc0029ec9
c000e749:	50                   	push   eax
c000e74a:	e8 63 5c 00 00       	call   c00143b2 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 68 a0 02 c0       	mov    edx,0xc002a068
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 61 e2 02 c0 04 	test   BYTE PTR ds:0xc002e261,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 63 7c 01 00       	call   c0026546 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 78 a2 00 00       	call   c0018b96 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 51 a2 00 00       	call   c0018b96 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 2f a2 00 00       	call   c0018b96 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 0d a2 00 00       	call   c0018b96 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 60 e2 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e260,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 1b a1 00 00       	call   c0018b12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 f6 a0 00 00       	call   c0018b12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 cd 7a 01 00       	call   c0026500 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 8a 7a 01 00       	call   c00264e0 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 12 a1 00 00       	call   c0018b96 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 d9 9e 02 c0       	push   0xc0029ed9
c000eaaf:	e8 e8 42 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 ec 9e 02 c0       	push   0xc0029eec
c000ead2:	e8 c5 42 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 fd 9e 02 c0       	push   0xc0029efd
c000eaf5:	e8 a2 42 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 0e 9f 02 c0       	push   0xc0029f0e
c000eb18:	e8 7f 42 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 1f 9f 02 c0       	push   0xc0029f1f
c000eb3b:	e8 5c 42 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 30 9f 02 c0       	push   0xc0029f30
c000eb5e:	e8 39 42 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 41 9f 02 c0       	push   0xc0029f41
c000eb81:	e8 16 42 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 52 9f 02 c0       	push   0xc0029f52
c000eba4:	e8 f3 41 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 63 9f 02 c0       	push   0xc0029f63
c000ebc7:	e8 d0 41 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 74 9f 02 c0       	push   0xc0029f74
c000ebea:	e8 ad 41 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 85 9f 02 c0       	push   0xc0029f85
c000ec0d:	e8 8a 41 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 96 9f 02 c0       	push   0xc0029f96
c000ec30:	e8 67 41 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 a7 9f 02 c0       	push   0xc0029fa7
c000ec53:	e8 44 41 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 b8 9f 02 c0       	push   0xc0029fb8
c000ec76:	e8 21 41 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 c9 9f 02 c0       	push   0xc0029fc9
c000ec99:	e8 fe 40 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 da 9f 02 c0       	push   0xc0029fda
c000ecbc:	e8 db 40 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 eb 9f 02 c0       	push   0xc0029feb
c000ecdf:	e8 b8 40 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 fc 9f 02 c0       	push   0xc0029ffc
c000ed02:	e8 95 40 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 0d a0 02 c0       	push   0xc002a00d
c000ed21:	e8 76 40 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 30 b9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b930
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 65 40 00 00       	jmp    c0012d9c <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 1e a0 02 c0       	push   0xc002a01e
c000ee0a:	e8 68 b6 00 00       	call   c001a477 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 24 a0 02 c0       	push   0xc002a024
c000ee42:	e8 30 b6 00 00       	call   c001a477 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 60 e2 02 c0 04 	test   BYTE PTR ds:0xc002e260,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 84 d1 02 c0 	sete   BYTE PTR ds:0xc002d184
c000eea6:	e8 98 09 00 00       	call   c000f843 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 ad 91 00 00       	call   c0018062 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 fe 52 00 00       	call   c00141c2 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 59 09 00 00       	call   c000f843 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 5a 9d 00 00       	call   c0018c4e <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 bf 52 00 00       	call   c00141c2 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 29 58 00 00       	call   c0014748 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 8f 52 00 00       	call   c00141c2 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 4d ef 00 00       	call   c001dea2 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 2a a0 02 c0       	push   0xc002a02a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 f9 3d 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 3b a0 02 c0       	push   0xc002a03b
c000efc0:	e8 b2 b4 00 00       	call   c001a477 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 48 a0 02 c0       	push   0xc002a048
c000efd5:	e8 9d b4 00 00       	call   c001a477 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 52 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a052
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 86 b4 00 00       	jmp    c001a477 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 8c a0 02 c0       	push   0xc002a08c
c000f086:	e8 11 3d 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 52 e2 02 c0       	mov    ds:0xc002e252,eax
c000f0c7:	66 89 15 50 e2 02 c0 	mov    WORD PTR ds:0xc002e250,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 95 ea 00 00       	call   c001dc73 <unlockScheduler()>
c000f1de:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 48 e2 02 c0    	push   DWORD PTR ds:0xc002e248
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 54 93 01 00       	call   c0028580 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 4b 93 01 00       	call   c0028580 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 58 e2 02 c0 ff 07 	mov    WORD PTR ds:0xc002e258,0x7ff
c000f323:	a3 5a e2 02 c0       	mov    ds:0xc002e25a,eax
c000f328:	0f 01 1d 58 e2 02 c0 	lidtd  ds:0xc002e258
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 d1 27 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 e8 2c 00 00       	call   c0012308 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 15 02 00 00       	call   c000f843 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 32 1e 00 00       	call   c0011470 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 63 1e 00 00       	call   c00114b0 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 78 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d178
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 78 d1 02 c0       	mov    eax,ds:0xc002d178
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 a8 a0 02 c0       	push   0xc002a0a8
c000f6f4:	e8 a3 36 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 78 d1 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d178,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 c7 26 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 78 d1 02 c0    	mov    ebp,DWORD PTR ds:0xc002d178
c000f727:	e8 b4 07 00 00       	call   c000fee0 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 cf 2a 00 00       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 78 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d178
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 d8 a0 02 c0       	push   0xc002a0d8
c000f7ad:	e8 c5 ac 00 00       	call   c001a477 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 dd a0 02 c0       	push   0xc002a0dd
c000f7c3:	e8 af ac 00 00       	call   c001a477 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 98 e4 00 00       	call   c001dc71 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 89 e4 00 00       	call   c001dc73 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 eb 25 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	68 01 08 00 00       	push   0x801
c000f803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f807:	50                   	push   eax
c000f808:	e8 fb 2a 00 00       	call   c0012308 <VAS::allocatePages(int, int)>
c000f80d:	83 c4 1c             	add    esp,0x1c
c000f810:	c3                   	ret    

c000f811 <liballoc_free(void*, int)>:
c000f811:	83 ec 0c             	sub    esp,0xc
c000f814:	e8 cd 25 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f819:	83 ec 08             	sub    esp,0x8
c000f81c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f820:	50                   	push   eax
c000f821:	e8 9e 27 00 00       	call   c0011fc4 <VAS::freeAllocatedPages(unsigned long)>
c000f826:	b8 00 00 00 00       	mov    eax,0x0
c000f82b:	83 c4 1c             	add    esp,0x1c
c000f82e:	c3                   	ret    

c000f82f <realloc>:
c000f82f:	83 ec 14             	sub    esp,0x14
c000f832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83a:	e8 15 1e ff ff       	call   c0001654 <dlrealloc>
c000f83f:	83 c4 1c             	add    esp,0x1c
c000f842:	c3                   	ret    

c000f843 <malloc>:
c000f843:	83 ec 18             	sub    esp,0x18
c000f846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f84a:	e8 c8 18 ff ff       	call   c0001117 <dlmalloc>
c000f84f:	83 c4 1c             	add    esp,0x1c
c000f852:	c3                   	ret    

c000f853 <free>:
c000f853:	83 ec 18             	sub    esp,0x18
c000f856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f85a:	e8 5d 15 ff ff       	call   c0000dbc <dlfree>
c000f85f:	83 c4 1c             	add    esp,0x1c
c000f862:	c3                   	ret    

c000f863 <rfree>:
c000f863:	83 ec 18             	sub    esp,0x18
c000f866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f86a:	e8 4d 15 ff ff       	call   c0000dbc <dlfree>
c000f86f:	83 c4 1c             	add    esp,0x1c
c000f872:	c3                   	ret    

c000f873 <calloc>:
c000f873:	56                   	push   esi
c000f874:	53                   	push   ebx
c000f875:	83 ec 10             	sub    esp,0x10
c000f878:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f87c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f881:	53                   	push   ebx
c000f882:	e8 bc ff ff ff       	call   c000f843 <malloc>
c000f887:	89 c6                	mov    esi,eax
c000f889:	83 c4 0c             	add    esp,0xc
c000f88c:	53                   	push   ebx
c000f88d:	6a 00                	push   0x0
c000f88f:	50                   	push   eax
c000f890:	e8 e3 0e ff ff       	call   c0000778 <memset>
c000f895:	89 f0                	mov    eax,esi
c000f897:	83 c4 14             	add    esp,0x14
c000f89a:	5b                   	pop    ebx
c000f89b:	5e                   	pop    esi
c000f89c:	c3                   	ret    

c000f89d <hwTextMode_loadInData(VgaText*)>:
c000f89d:	55                   	push   ebp
c000f89e:	a1 80 d1 02 c0       	mov    eax,ds:0xc002d180
c000f8a3:	57                   	push   edi
c000f8a4:	56                   	push   esi
c000f8a5:	53                   	push   ebx
c000f8a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8aa:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b0:	85 d2                	test   edx,edx
c000f8b2:	7e 2f                	jle    c000f8e3 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b4:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8ba:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8bd:	31 f6                	xor    esi,esi
c000f8bf:	29 fd                	sub    ebp,edi
c000f8c1:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c4:	31 c0                	xor    eax,eax
c000f8c6:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8ca:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8ce:	40                   	inc    eax
c000f8cf:	83 f8 50             	cmp    eax,0x50
c000f8d2:	75 f2                	jne    c000f8c6 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d4:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8da:	46                   	inc    esi
c000f8db:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e1:	7f de                	jg     c000f8c1 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	5f                   	pop    edi
c000f8e6:	5d                   	pop    ebp
c000f8e7:	c3                   	ret    

c000f8e8 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e8:	55                   	push   ebp
c000f8e9:	80 3d e0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2e0,0x0
c000f8f0:	57                   	push   edi
c000f8f1:	56                   	push   esi
c000f8f2:	53                   	push   ebx
c000f8f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f7:	75 50                	jne    c000f949 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f9:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8ff:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f905:	8b 15 80 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d180
c000f90b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90f:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f915:	eb 0e                	jmp    c000f925 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f917:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91d:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f923:	89 da                	mov    edx,ebx
c000f925:	83 e5 0f             	and    ebp,0xf
c000f928:	c1 e0 04             	shl    eax,0x4
c000f92b:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92e:	0f b6 c0             	movzx  eax,al
c000f931:	41                   	inc    ecx
c000f932:	09 e8                	or     eax,ebp
c000f934:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f938:	c1 e0 08             	shl    eax,0x8
c000f93b:	09 e8                	or     eax,ebp
c000f93d:	39 fb                	cmp    ebx,edi
c000f93f:	66 89 02             	mov    WORD PTR [edx],ax
c000f942:	75 d3                	jne    c000f917 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f944:	5b                   	pop    ebx
c000f945:	5e                   	pop    esi
c000f946:	5f                   	pop    edi
c000f947:	5d                   	pop    ebp
c000f948:	c3                   	ret    
c000f949:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f953:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95d:	31 c0                	xor    eax,eax
c000f95f:	bd 02 00 00 00       	mov    ebp,0x2
c000f964:	eb 9f                	jmp    c000f905 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f966 <hwTextMode_showCursor(VgaText*, bool)>:
c000f966:	56                   	push   esi
c000f967:	80 3d e0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2e0,0x0
c000f96e:	53                   	push   ebx
c000f96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f973:	75 39                	jne    c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f975:	84 c0                	test   al,al
c000f977:	74 38                	je     c000f9b1 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f979:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97e:	b0 0a                	mov    al,0xa
c000f980:	89 da                	mov    edx,ebx
c000f982:	ee                   	out    dx,al
c000f983:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f988:	89 ca                	mov    edx,ecx
c000f98a:	ec                   	in     al,dx
c000f98b:	b2 0f                	mov    dl,0xf
c000f98d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f991:	83 e0 c0             	and    eax,0xffffffc0
c000f994:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f99a:	09 d0                	or     eax,edx
c000f99c:	89 ca                	mov    edx,ecx
c000f99e:	ee                   	out    dx,al
c000f99f:	b0 0b                	mov    al,0xb
c000f9a1:	89 da                	mov    edx,ebx
c000f9a3:	ee                   	out    dx,al
c000f9a4:	89 ca                	mov    edx,ecx
c000f9a6:	ec                   	in     al,dx
c000f9a7:	83 e0 e0             	and    eax,0xffffffe0
c000f9aa:	83 c8 0f             	or     eax,0xf
c000f9ad:	ee                   	out    dx,al
c000f9ae:	5b                   	pop    ebx
c000f9af:	5e                   	pop    esi
c000f9b0:	c3                   	ret    
c000f9b1:	b0 0a                	mov    al,0xa
c000f9b3:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b8:	ee                   	out    dx,al
c000f9b9:	b0 20                	mov    al,0x20
c000f9bb:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c0:	ee                   	out    dx,al
c000f9c1:	5b                   	pop    ebx
c000f9c2:	5e                   	pop    esi
c000f9c3:	c3                   	ret    

c000f9c4 <hwTextMode_update(VgaText*)>:
c000f9c4:	c3                   	ret    

c000f9c5 <hwTextMode_updateCursor(VgaText*)>:
c000f9c5:	56                   	push   esi
c000f9c6:	80 3d e0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2e0,0x0
c000f9cd:	53                   	push   ebx
c000f9ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9d2:	75 3f                	jne    c000fa13 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d4:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d9:	b9 19 00 00 00       	mov    ecx,0x19
c000f9de:	89 f2                	mov    edx,esi
c000f9e0:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e6:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9ec:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ef:	c1 e1 04             	shl    ecx,0x4
c000f9f2:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f8:	b0 0f                	mov    al,0xf
c000f9fa:	ee                   	out    dx,al
c000f9fb:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa00:	88 c8                	mov    al,cl
c000fa02:	89 da                	mov    edx,ebx
c000fa04:	ee                   	out    dx,al
c000fa05:	b0 0e                	mov    al,0xe
c000fa07:	89 f2                	mov    edx,esi
c000fa09:	ee                   	out    dx,al
c000fa0a:	89 c8                	mov    eax,ecx
c000fa0c:	89 da                	mov    edx,ebx
c000fa0e:	66 c1 e8 08          	shr    ax,0x8
c000fa12:	ee                   	out    dx,al
c000fa13:	5b                   	pop    ebx
c000fa14:	5e                   	pop    esi
c000fa15:	c3                   	ret    

c000fa16 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa1a:	80 3d e0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2e0,0x0
c000fa21:	75 38                	jne    c000fa5b <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa23:	ba da 03 00 00       	mov    edx,0x3da
c000fa28:	84 c0                	test   al,al
c000fa2a:	75 18                	jne    c000fa44 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa2c:	ec                   	in     al,dx
c000fa2d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa32:	b0 30                	mov    al,0x30
c000fa34:	89 ca                	mov    edx,ecx
c000fa36:	ee                   	out    dx,al
c000fa37:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa3c:	ec                   	in     al,dx
c000fa3d:	83 c8 08             	or     eax,0x8
c000fa40:	89 ca                	mov    edx,ecx
c000fa42:	ee                   	out    dx,al
c000fa43:	c3                   	ret    
c000fa44:	ec                   	in     al,dx
c000fa45:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa4a:	b0 30                	mov    al,0x30
c000fa4c:	89 ca                	mov    edx,ecx
c000fa4e:	ee                   	out    dx,al
c000fa4f:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa54:	ec                   	in     al,dx
c000fa55:	83 e0 f7             	and    eax,0xfffffff7
c000fa58:	89 ca                	mov    edx,ecx
c000fa5a:	ee                   	out    dx,al
c000fa5b:	c3                   	ret    

c000fa5c <hwTextMode_scrollScreen(VgaText*)>:
c000fa5c:	55                   	push   ebp
c000fa5d:	57                   	push   edi
c000fa5e:	56                   	push   esi
c000fa5f:	53                   	push   ebx
c000fa60:	83 ec 1c             	sub    esp,0x1c
c000fa63:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa67:	80 3d e0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2e0,0x0
c000fa6e:	74 14                	je     c000fa84 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa70:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa7a:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa84:	a1 80 d1 02 c0       	mov    eax,ds:0xc002d180
c000fa89:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8e:	05 a0 00 00 00       	add    eax,0xa0
c000fa93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa9b:	31 c0                	xor    eax,eax
c000fa9d:	eb 0b                	jmp    c000faaa <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9f:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa5:	74 57                	je     c000fafe <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa7:	43                   	inc    ebx
c000faa8:	89 f0                	mov    eax,esi
c000faaa:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab0:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab6:	88 13                	mov    BYTE PTR [ebx],dl
c000fab8:	8d 70 01             	lea    esi,[eax+0x1]
c000fabb:	83 fd 18             	cmp    ebp,0x18
c000fabe:	75 df                	jne    c000fa9f <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac0:	a8 01                	test   al,0x1
c000fac2:	75 13                	jne    c000fad7 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac4:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000facd:	75 d8                	jne    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facf:	83 c4 1c             	add    esp,0x1c
c000fad2:	5b                   	pop    ebx
c000fad3:	5e                   	pop    esi
c000fad4:	5f                   	pop    edi
c000fad5:	5d                   	pop    ebp
c000fad6:	c3                   	ret    
c000fad7:	83 ec 08             	sub    esp,0x8
c000fada:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae1:	50                   	push   eax
c000fae2:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae6:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faed:	50                   	push   eax
c000faee:	e8 4f 0c 00 00       	call   c0010742 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf3:	83 c4 10             	add    esp,0x10
c000faf6:	88 07                	mov    BYTE PTR [edi],al
c000faf8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fafc:	eb c9                	jmp    c000fac7 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafe:	45                   	inc    ebp
c000faff:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb07:	eb 8e                	jmp    c000fa97 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb09 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb09:	57                   	push   edi
c000fb0a:	80 3d e0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2e0,0x0
c000fb11:	56                   	push   esi
c000fb12:	53                   	push   ebx
c000fb13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb17:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb1b:	75 65                	jne    c000fb82 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1d:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb22:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb27:	83 ec 08             	sub    esp,0x8
c000fb2a:	52                   	push   edx
c000fb2b:	50                   	push   eax
c000fb2c:	e8 11 0c 00 00       	call   c0010742 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb31:	5a                   	pop    edx
c000fb32:	0f b6 c0             	movzx  eax,al
c000fb35:	59                   	pop    ecx
c000fb36:	50                   	push   eax
c000fb37:	0f be c3             	movsx  eax,bl
c000fb3a:	50                   	push   eax
c000fb3b:	e8 a8 0c 00 00       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	8b 35 80 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d180
c000fb49:	80 3d e0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2e0,0x0
c000fb50:	74 07                	je     c000fb59 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb52:	66 0f be c3          	movsx  ax,bl
c000fb56:	80 cc 02             	or     ah,0x2
c000fb59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5d:	ba 19 00 00 00       	mov    edx,0x19
c000fb62:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb68:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb6b:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6e:	c1 e1 04             	shl    ecx,0x4
c000fb71:	c1 e2 04             	shl    edx,0x4
c000fb74:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb78:	01 ca                	add    edx,ecx
c000fb7a:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7e:	5b                   	pop    ebx
c000fb7f:	5e                   	pop    esi
c000fb80:	5f                   	pop    edi
c000fb81:	c3                   	ret    
c000fb82:	b8 02 00 00 00       	mov    eax,0x2
c000fb87:	31 d2                	xor    edx,edx
c000fb89:	eb 9c                	jmp    c000fb27 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb8b <setupTextMode()>:
c000fb8b:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb90:	83 e0 30             	and    eax,0x30
c000fb93:	66 83 f8 30          	cmp    ax,0x30
c000fb97:	75 11                	jne    c000fbaa <setupTextMode()+0x1f>
c000fb99:	81 2d 80 d1 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d180,0x8000
c000fba3:	c6 05 e0 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e2e0,0x1
c000fbaa:	c7 05 18 e3 02 c0 16 fa 00 c0 	mov    DWORD PTR ds:0xc002e318,0xc000fa16
c000fbb4:	c7 05 04 e3 02 c0 9d f8 00 c0 	mov    DWORD PTR ds:0xc002e304,0xc000f89d
c000fbbe:	c7 05 00 e3 02 c0 e8 f8 00 c0 	mov    DWORD PTR ds:0xc002e300,0xc000f8e8
c000fbc8:	c7 05 0c e3 02 c0 5c fa 00 c0 	mov    DWORD PTR ds:0xc002e30c,0xc000fa5c
c000fbd2:	c7 05 14 e3 02 c0 66 f9 00 c0 	mov    DWORD PTR ds:0xc002e314,0xc000f966
c000fbdc:	c7 05 08 e3 02 c0 c4 f9 00 c0 	mov    DWORD PTR ds:0xc002e308,0xc000f9c4
c000fbe6:	c7 05 10 e3 02 c0 c5 f9 00 c0 	mov    DWORD PTR ds:0xc002e310,0xc000f9c5
c000fbf0:	c7 05 1c e3 02 c0 09 fb 00 c0 	mov    DWORD PTR ds:0xc002e31c,0xc000fb09
c000fbfa:	c3                   	ret    

c000fbfb <kernel_main>:
c000fbfb:	57                   	push   edi
c000fbfc:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc01:	56                   	push   esi
c000fc02:	31 f6                	xor    esi,esi
c000fc04:	53                   	push   ebx
c000fc05:	83 ec 20             	sub    esp,0x20
c000fc08:	e8 8f 09 00 00       	call   c001059c <installVgaTextImplementation()>
c000fc0d:	e8 79 ff ff ff       	call   c000fb8b <setupTextMode()>
c000fc12:	89 f0                	mov    eax,esi
c000fc14:	89 fa                	mov    edx,edi
c000fc16:	ee                   	out    dx,al
c000fc17:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc1c:	b0 80                	mov    al,0x80
c000fc1e:	89 da                	mov    edx,ebx
c000fc20:	ee                   	out    dx,al
c000fc21:	b1 03                	mov    cl,0x3
c000fc23:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc28:	88 c8                	mov    al,cl
c000fc2a:	ee                   	out    dx,al
c000fc2b:	89 f0                	mov    eax,esi
c000fc2d:	89 fa                	mov    edx,edi
c000fc2f:	ee                   	out    dx,al
c000fc30:	88 c8                	mov    al,cl
c000fc32:	89 da                	mov    edx,ebx
c000fc34:	ee                   	out    dx,al
c000fc35:	b0 c7                	mov    al,0xc7
c000fc37:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc3c:	ee                   	out    dx,al
c000fc3d:	b0 0b                	mov    al,0xb
c000fc3f:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc44:	ee                   	out    dx,al
c000fc45:	83 ec 0c             	sub    esp,0xc
c000fc48:	68 e4 a0 02 c0       	push   0xc002a0e4
c000fc4d:	e8 4a 31 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000fc52:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc57:	05 ff 0f 00 00       	add    eax,0xfff
c000fc5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc61:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc64:	e8 ee 03 00 00       	call   c0010057 <Phys::physicalMemorySetup(unsigned int)>
c000fc69:	e8 90 20 00 00       	call   c0011cfe <Virt::virtualMemorySetup()>
c000fc6e:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7d:	75 0e                	jne    c000fc8d <kernel_main+0x92>
c000fc7f:	89 d8                	mov    eax,ebx
c000fc81:	25 48 03 00 00       	and    eax,0x348
c000fc86:	3d 00 03 00 00       	cmp    eax,0x300
c000fc8b:	74 10                	je     c000fc9d <kernel_main+0xa2>
c000fc8d:	83 ec 0c             	sub    esp,0xc
c000fc90:	68 31 b9 02 c0       	push   0xc002b931
c000fc95:	e8 dd a7 00 00       	call   c001a477 <Krnl::panic(char const*)>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	83 ec 0c             	sub    esp,0xc
c000fca0:	89 1d 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,ebx
c000fca6:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcaa:	53                   	push   ebx
c000fcab:	e8 3c 21 00 00       	call   c0011dec <VAS::VAS()>
c000fcb0:	89 1d cc e3 02 c0    	mov    DWORD PTR ds:0xc002e3cc,ebx
c000fcb6:	e8 65 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcbb:	c7 04 24 fb a0 02 c0 	mov    DWORD PTR [esp],0xc002a0fb
c000fcc2:	e8 d5 30 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000fcc7:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcce:	e8 70 fb ff ff       	call   c000f843 <malloc>
c000fcd3:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd6:	89 c6                	mov    esi,eax
c000fcd8:	e8 5d ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdd:	58                   	pop    eax
c000fcde:	89 35 48 e2 02 c0    	mov    DWORD PTR ds:0xc002e248,esi
c000fce4:	5a                   	pop    edx
c000fce5:	56                   	push   esi
c000fce6:	68 18 a1 02 c0       	push   0xc002a118
c000fceb:	e8 ac 30 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000fcf0:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c000fcf5:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf7:	6a 00                	push   0x0
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	50                   	push   eax
c000fcfe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd01:	83 c4 14             	add    esp,0x14
c000fd04:	53                   	push   ebx
c000fd05:	e8 92 23 00 00       	call   c001209c <VAS::~VAS()>
c000fd0a:	c7 04 24 2b a1 02 c0 	mov    DWORD PTR [esp],0xc002a12b
c000fd11:	e8 61 a7 00 00       	call   c001a477 <Krnl::panic(char const*)>
c000fd16:	83 c4 30             	add    esp,0x30
c000fd19:	5b                   	pop    ebx
c000fd1a:	5e                   	pop    esi
c000fd1b:	5f                   	pop    edi
c000fd1c:	c3                   	ret    

c000fd1d <Phys::allocateDMA(unsigned long)>:
c000fd1d:	55                   	push   ebp
c000fd1e:	31 d2                	xor    edx,edx
c000fd20:	57                   	push   edi
c000fd21:	31 ed                	xor    ebp,ebp
c000fd23:	56                   	push   esi
c000fd24:	31 c9                	xor    ecx,ecx
c000fd26:	53                   	push   ebx
c000fd27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd31:	31 c0                	xor    eax,eax
c000fd33:	c1 ee 0c             	shr    esi,0xc
c000fd36:	eb 17                	jmp    c000fd4f <Phys::allocateDMA(unsigned long)+0x32>
c000fd38:	85 c9                	test   ecx,ecx
c000fd3a:	75 04                	jne    c000fd40 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3c:	89 d5                	mov    ebp,edx
c000fd3e:	89 d0                	mov    eax,edx
c000fd40:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd43:	39 de                	cmp    esi,ebx
c000fd45:	74 20                	je     c000fd67 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd47:	42                   	inc    edx
c000fd48:	89 d9                	mov    ecx,ebx
c000fd4a:	83 fa 2f             	cmp    edx,0x2f
c000fd4d:	7f 11                	jg     c000fd60 <Phys::allocateDMA(unsigned long)+0x43>
c000fd4f:	80 ba a0 e2 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1d60],0x0
c000fd56:	74 e0                	je     c000fd38 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd58:	31 c9                	xor    ecx,ecx
c000fd5a:	42                   	inc    edx
c000fd5b:	83 fa 2f             	cmp    edx,0x2f
c000fd5e:	7e ef                	jle    c000fd4f <Phys::allocateDMA(unsigned long)+0x32>
c000fd60:	5b                   	pop    ebx
c000fd61:	31 c0                	xor    eax,eax
c000fd63:	5e                   	pop    esi
c000fd64:	5f                   	pop    edi
c000fd65:	5d                   	pop    ebp
c000fd66:	c3                   	ret    
c000fd67:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6a:	89 d7                	mov    edi,edx
c000fd6c:	4f                   	dec    edi
c000fd6d:	79 03                	jns    c000fd72 <Phys::allocateDMA(unsigned long)+0x55>
c000fd6f:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd72:	c1 ff 04             	sar    edi,0x4
c000fd75:	89 c2                	mov    edx,eax
c000fd77:	c1 fa 04             	sar    edx,0x4
c000fd7a:	39 fa                	cmp    edx,edi
c000fd7c:	75 2f                	jne    c000fdad <Phys::allocateDMA(unsigned long)+0x90>
c000fd7e:	85 db                	test   ebx,ebx
c000fd80:	74 1a                	je     c000fd9c <Phys::allocateDMA(unsigned long)+0x7f>
c000fd82:	be a0 e2 02 c0       	mov    esi,0xc002e2a0
c000fd87:	8d 90 a0 e2 02 c0    	lea    edx,[eax-0x3ffd1d60]
c000fd8d:	f7 d6                	not    esi
c000fd8f:	29 c6                	sub    esi,eax
c000fd91:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd94:	42                   	inc    edx
c000fd95:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd98:	39 d9                	cmp    ecx,ebx
c000fd9a:	7f f5                	jg     c000fd91 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9c:	85 ff                	test   edi,edi
c000fd9e:	74 13                	je     c000fdb3 <Phys::allocateDMA(unsigned long)+0x96>
c000fda0:	5b                   	pop    ebx
c000fda1:	05 50 20 0c 00       	add    eax,0xc2050
c000fda6:	5e                   	pop    esi
c000fda7:	c1 e0 0c             	shl    eax,0xc
c000fdaa:	5f                   	pop    edi
c000fdab:	5d                   	pop    ebp
c000fdac:	c3                   	ret    
c000fdad:	89 ea                	mov    edx,ebp
c000fdaf:	31 c9                	xor    ecx,ecx
c000fdb1:	eb a7                	jmp    c000fd5a <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb3:	5b                   	pop    ebx
c000fdb4:	c1 e0 0c             	shl    eax,0xc
c000fdb7:	5e                   	pop    esi
c000fdb8:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbd:	5f                   	pop    edi
c000fdbe:	5d                   	pop    ebp
c000fdbf:	c3                   	ret    

c000fdc0 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdc8:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdce:	c1 e9 0c             	shr    ecx,0xc
c000fdd1:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd6:	76 25                	jbe    c000fdfd <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdd8:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddd:	c1 e8 0c             	shr    eax,0xc
c000fde0:	8d 50 10             	lea    edx,[eax+0x10]
c000fde3:	85 c9                	test   ecx,ecx
c000fde5:	74 15                	je     c000fdfc <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde7:	8d 82 a0 e2 02 c0    	lea    eax,[edx-0x3ffd1d60]
c000fded:	8d 94 11 a0 e2 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1d60]
c000fdf4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf7:	40                   	inc    eax
c000fdf8:	39 d0                	cmp    eax,edx
c000fdfa:	75 f8                	jne    c000fdf4 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfc:	c3                   	ret    
c000fdfd:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe03:	c1 ea 0c             	shr    edx,0xc
c000fe06:	eb db                	jmp    c000fde3 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe08 <Phys::setPageState(unsigned long, bool)>:
c000fe08:	56                   	push   esi
c000fe09:	ba 01 00 00 00       	mov    edx,0x1
c000fe0e:	53                   	push   ebx
c000fe0f:	8b 35 7c d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d17c
c000fe15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1d:	89 c8                	mov    eax,ecx
c000fe1f:	83 e1 07             	and    ecx,0x7
c000fe22:	c1 e8 03             	shr    eax,0x3
c000fe25:	d3 e3                	shl    ebx,cl
c000fe27:	01 c6                	add    esi,eax
c000fe29:	d3 e2                	shl    edx,cl
c000fe2b:	f7 d2                	not    edx
c000fe2d:	20 16                	and    BYTE PTR [esi],dl
c000fe2f:	03 05 7c d1 02 c0    	add    eax,DWORD PTR ds:0xc002d17c
c000fe35:	08 18                	or     BYTE PTR [eax],bl
c000fe37:	5b                   	pop    ebx
c000fe38:	5e                   	pop    esi
c000fe39:	c3                   	ret    

c000fe3a <Phys::getPageState(unsigned long)>:
c000fe3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe3e:	8b 15 7c d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d17c
c000fe44:	89 c8                	mov    eax,ecx
c000fe46:	83 e1 07             	and    ecx,0x7
c000fe49:	c1 e8 03             	shr    eax,0x3
c000fe4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe50:	d3 f8                	sar    eax,cl
c000fe52:	83 e0 01             	and    eax,0x1
c000fe55:	c3                   	ret    

c000fe56 <Phys::freePage(unsigned long)>:
c000fe56:	53                   	push   ebx
c000fe57:	83 ec 08             	sub    esp,0x8
c000fe5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe5e:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe64:	76 57                	jbe    c000febd <Phys::freePage(unsigned long)+0x67>
c000fe66:	c1 eb 0c             	shr    ebx,0xc
c000fe69:	53                   	push   ebx
c000fe6a:	e8 cb ff ff ff       	call   c000fe3a <Phys::getPageState(unsigned long)>
c000fe6f:	5a                   	pop    edx
c000fe70:	84 c0                	test   al,al
c000fe72:	74 5b                	je     c000fecf <Phys::freePage(unsigned long)+0x79>
c000fe74:	a1 90 e2 02 c0       	mov    eax,ds:0xc002e290
c000fe79:	48                   	dec    eax
c000fe7a:	a3 90 e2 02 c0       	mov    ds:0xc002e290,eax
c000fe7f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe82:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe85:	c1 e0 02             	shl    eax,0x2
c000fe88:	99                   	cdq    
c000fe89:	f7 3d 94 e2 02 c0    	idiv   DWORD PTR ds:0xc002e294
c000fe8f:	39 05 8c e2 02 c0    	cmp    DWORD PTR ds:0xc002e28c,eax
c000fe95:	75 13                	jne    c000feaa <Phys::freePage(unsigned long)+0x54>
c000fe97:	83 ec 08             	sub    esp,0x8
c000fe9a:	6a 00                	push   0x0
c000fe9c:	53                   	push   ebx
c000fe9d:	e8 66 ff ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c000fea2:	83 c4 10             	add    esp,0x10
c000fea5:	83 c4 08             	add    esp,0x8
c000fea8:	5b                   	pop    ebx
c000fea9:	c3                   	ret    
c000feaa:	83 ec 0c             	sub    esp,0xc
c000fead:	a3 8c e2 02 c0       	mov    ds:0xc002e28c,eax
c000feb2:	50                   	push   eax
c000feb3:	e8 78 0a 00 00       	call   c0010930 <VgaText::updateRAMUsageDisplay(int)>
c000feb8:	83 c4 10             	add    esp,0x10
c000febb:	eb da                	jmp    c000fe97 <Phys::freePage(unsigned long)+0x41>
c000febd:	68 00 10 00 00       	push   0x1000
c000fec2:	53                   	push   ebx
c000fec3:	e8 f8 fe ff ff       	call   c000fdc0 <Phys::freeDMA(unsigned long, unsigned long)>
c000fec8:	59                   	pop    ecx
c000fec9:	5b                   	pop    ebx
c000feca:	83 c4 08             	add    esp,0x8
c000fecd:	5b                   	pop    ebx
c000fece:	c3                   	ret    
c000fecf:	c7 44 24 10 46 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a146
c000fed7:	83 c4 08             	add    esp,0x8
c000feda:	5b                   	pop    ebx
c000fedb:	e9 97 a5 00 00       	jmp    c001a477 <Krnl::panic(char const*)>

c000fee0 <Phys::allocatePage()>:
c000fee0:	56                   	push   esi
c000fee1:	53                   	push   ebx
c000fee2:	51                   	push   ecx
c000fee3:	8b 35 84 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e284
c000fee9:	89 f3                	mov    ebx,esi
c000feeb:	eb 0a                	jmp    c000fef7 <Phys::allocatePage()+0x17>
c000feed:	89 1d 84 e2 02 c0    	mov    DWORD PTR ds:0xc002e284,ebx
c000fef3:	39 de                	cmp    esi,ebx
c000fef5:	74 24                	je     c000ff1b <Phys::allocatePage()+0x3b>
c000fef7:	53                   	push   ebx
c000fef8:	e8 3d ff ff ff       	call   c000fe3a <Phys::getPageState(unsigned long)>
c000fefd:	5a                   	pop    edx
c000fefe:	84 c0                	test   al,al
c000ff00:	74 77                	je     c000ff79 <Phys::allocatePage()+0x99>
c000ff02:	43                   	inc    ebx
c000ff03:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff09:	75 e2                	jne    c000feed <Phys::allocatePage()+0xd>
c000ff0b:	31 db                	xor    ebx,ebx
c000ff0d:	c7 05 84 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e284,0x0
c000ff17:	39 de                	cmp    esi,ebx
c000ff19:	75 dc                	jne    c000fef7 <Phys::allocatePage()+0x17>
c000ff1b:	83 ec 0c             	sub    esp,0xc
c000ff1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff23:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff26:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c000ff2c:	e8 67 2b 00 00       	call   c0012a98 <VAS::scanForEviction()>
c000ff31:	83 c4 10             	add    esp,0x10
c000ff34:	85 c0                	test   eax,eax
c000ff36:	75 76                	jne    c000ffae <Phys::allocatePage()+0xce>
c000ff38:	83 ec 0c             	sub    esp,0xc
c000ff3b:	68 5c a1 02 c0       	push   0xc002a15c
c000ff40:	e8 57 2e 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c000ff45:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff4c:	e8 cc fd ff ff       	call   c000fd1d <Phys::allocateDMA(unsigned long)>
c000ff51:	83 c4 10             	add    esp,0x10
c000ff54:	85 c0                	test   eax,eax
c000ff56:	75 56                	jne    c000ffae <Phys::allocatePage()+0xce>
c000ff58:	83 ec 0c             	sub    esp,0xc
c000ff5b:	68 6d a1 02 c0       	push   0xc002a16d
c000ff60:	e8 12 a5 00 00       	call   c001a477 <Krnl::panic(char const*)>
c000ff65:	83 c4 10             	add    esp,0x10
c000ff68:	8b 1d 84 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e284
c000ff6e:	53                   	push   ebx
c000ff6f:	e8 c6 fe ff ff       	call   c000fe3a <Phys::getPageState(unsigned long)>
c000ff74:	5a                   	pop    edx
c000ff75:	84 c0                	test   al,al
c000ff77:	75 89                	jne    c000ff02 <Phys::allocatePage()+0x22>
c000ff79:	6a 01                	push   0x1
c000ff7b:	53                   	push   ebx
c000ff7c:	e8 87 fe ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c000ff81:	a1 90 e2 02 c0       	mov    eax,ds:0xc002e290
c000ff86:	59                   	pop    ecx
c000ff87:	40                   	inc    eax
c000ff88:	5b                   	pop    ebx
c000ff89:	a3 90 e2 02 c0       	mov    ds:0xc002e290,eax
c000ff8e:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff91:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff94:	c1 e0 02             	shl    eax,0x2
c000ff97:	99                   	cdq    
c000ff98:	f7 3d 94 e2 02 c0    	idiv   DWORD PTR ds:0xc002e294
c000ff9e:	39 05 8c e2 02 c0    	cmp    DWORD PTR ds:0xc002e28c,eax
c000ffa4:	75 0c                	jne    c000ffb2 <Phys::allocatePage()+0xd2>
c000ffa6:	a1 84 e2 02 c0       	mov    eax,ds:0xc002e284
c000ffab:	c1 e0 0c             	shl    eax,0xc
c000ffae:	5a                   	pop    edx
c000ffaf:	5b                   	pop    ebx
c000ffb0:	5e                   	pop    esi
c000ffb1:	c3                   	ret    
c000ffb2:	83 ec 0c             	sub    esp,0xc
c000ffb5:	a3 8c e2 02 c0       	mov    ds:0xc002e28c,eax
c000ffba:	50                   	push   eax
c000ffbb:	e8 70 09 00 00       	call   c0010930 <VgaText::updateRAMUsageDisplay(int)>
c000ffc0:	83 c4 10             	add    esp,0x10
c000ffc3:	eb e1                	jmp    c000ffa6 <Phys::allocatePage()+0xc6>

c000ffc5 <Phys::allocateContiguousPages(int)>:
c000ffc5:	57                   	push   edi
c000ffc6:	56                   	push   esi
c000ffc7:	53                   	push   ebx
c000ffc8:	31 db                	xor    ebx,ebx
c000ffca:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffce:	e8 9e dc 00 00       	call   c001dc71 <lockScheduler()>
c000ffd3:	85 db                	test   ebx,ebx
c000ffd5:	75 11                	jne    c000ffe8 <Phys::allocateContiguousPages(int)+0x23>
c000ffd7:	e8 04 ff ff ff       	call   c000fee0 <Phys::allocatePage()>
c000ffdc:	83 ff 01             	cmp    edi,0x1
c000ffdf:	89 c6                	mov    esi,eax
c000ffe1:	74 21                	je     c0010004 <Phys::allocateContiguousPages(int)+0x3f>
c000ffe3:	bb 01 00 00 00       	mov    ebx,0x1
c000ffe8:	e8 f3 fe ff ff       	call   c000fee0 <Phys::allocatePage()>
c000ffed:	89 da                	mov    edx,ebx
c000ffef:	c1 e2 0c             	shl    edx,0xc
c000fff2:	01 f2                	add    edx,esi
c000fff4:	39 c2                	cmp    edx,eax
c000fff6:	74 17                	je     c001000f <Phys::allocateContiguousPages(int)+0x4a>
c000fff8:	bb 01 00 00 00       	mov    ebx,0x1
c000fffd:	89 c6                	mov    esi,eax
c000ffff:	83 ff 01             	cmp    edi,0x1
c0010002:	75 e4                	jne    c000ffe8 <Phys::allocateContiguousPages(int)+0x23>
c0010004:	e8 6a dc 00 00       	call   c001dc73 <unlockScheduler()>
c0010009:	89 f0                	mov    eax,esi
c001000b:	5b                   	pop    ebx
c001000c:	5e                   	pop    esi
c001000d:	5f                   	pop    edi
c001000e:	c3                   	ret    
c001000f:	43                   	inc    ebx
c0010010:	39 fb                	cmp    ebx,edi
c0010012:	75 bf                	jne    c000ffd3 <Phys::allocateContiguousPages(int)+0xe>
c0010014:	e8 5a dc 00 00       	call   c001dc73 <unlockScheduler()>
c0010019:	89 f0                	mov    eax,esi
c001001b:	5b                   	pop    ebx
c001001c:	5e                   	pop    esi
c001001d:	5f                   	pop    edi
c001001e:	c3                   	ret    

c001001f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001001f:	56                   	push   esi
c0010020:	53                   	push   ebx
c0010021:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010025:	39 1d 88 e2 02 c0    	cmp    DWORD PTR ds:0xc002e288,ebx
c001002b:	73 06                	jae    c0010033 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001002d:	89 1d 88 e2 02 c0    	mov    DWORD PTR ds:0xc002e288,ebx
c0010033:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010037:	c1 eb 0c             	shr    ebx,0xc
c001003a:	c1 e8 0c             	shr    eax,0xc
c001003d:	39 d8                	cmp    eax,ebx
c001003f:	73 13                	jae    c0010054 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010041:	6a 00                	push   0x0
c0010043:	8d 70 01             	lea    esi,[eax+0x1]
c0010046:	50                   	push   eax
c0010047:	e8 bc fd ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c001004c:	5a                   	pop    edx
c001004d:	89 f0                	mov    eax,esi
c001004f:	59                   	pop    ecx
c0010050:	39 f3                	cmp    ebx,esi
c0010052:	75 ed                	jne    c0010041 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010054:	5b                   	pop    ebx
c0010055:	5e                   	pop    esi
c0010056:	c3                   	ret    

c0010057 <Phys::physicalMemorySetup(unsigned int)>:
c0010057:	55                   	push   ebp
c0010058:	57                   	push   edi
c0010059:	56                   	push   esi
c001005a:	53                   	push   ebx
c001005b:	31 db                	xor    ebx,ebx
c001005d:	83 ec 40             	sub    esp,0x40
c0010060:	6a 30                	push   0x30
c0010062:	6a 00                	push   0x0
c0010064:	68 a0 e2 02 c0       	push   0xc002e2a0
c0010069:	e8 0a 07 ff ff       	call   c0000778 <memset>
c001006e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010072:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010077:	05 00 10 00 00       	add    eax,0x1000
c001007c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010080:	83 c4 10             	add    esp,0x10
c0010083:	83 ec 08             	sub    esp,0x8
c0010086:	6a 01                	push   0x1
c0010088:	53                   	push   ebx
c0010089:	43                   	inc    ebx
c001008a:	e8 79 fd ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c001008f:	83 c4 10             	add    esp,0x10
c0010092:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010098:	75 e9                	jne    c0010083 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c001009a:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100a1:	66 85 c0             	test   ax,ax
c00100a4:	0f 84 8e 01 00 00    	je     c0010238 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100ae:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100ba:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100c3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100cb:	eb 15                	jmp    c00100e2 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100cd:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100d1:	83 c3 18             	add    ebx,0x18
c00100d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100dc:	0f 84 66 01 00 00    	je     c0010248 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100e2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100e5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100e8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100f3:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100f5:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100f8:	01 f0                	add    eax,esi
c00100fa:	55                   	push   ebp
c00100fb:	11 fa                	adc    edx,edi
c00100fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010101:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010105:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010109:	56                   	push   esi
c001010a:	68 a8 a1 02 c0       	push   0xc002a1a8
c001010f:	e8 88 2c 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0010114:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010118:	83 c4 10             	add    esp,0x10
c001011b:	09 f8                	or     eax,edi
c001011d:	0f 85 25 01 00 00    	jne    c0010248 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010123:	4d                   	dec    ebp
c0010124:	75 a7                	jne    c00100cd <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010126:	ba 00 00 08 00       	mov    edx,0x80000
c001012b:	89 c1                	mov    ecx,eax
c001012d:	39 f2                	cmp    edx,esi
c001012f:	19 f9                	sbb    ecx,edi
c0010131:	0f 82 a7 00 00 00    	jb     c00101de <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010137:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001013b:	89 c1                	mov    ecx,eax
c001013d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010141:	0f 83 97 00 00 00    	jae    c00101de <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010147:	ba 00 00 0a 00       	mov    edx,0xa0000
c001014c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010150:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010154:	39 fa                	cmp    edx,edi
c0010156:	19 e8                	sbb    eax,ebp
c0010158:	0f 82 14 01 00 00    	jb     c0010272 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001015e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010162:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010166:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001016c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010171:	83 d5 ff             	adc    ebp,0xffffffff
c0010174:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010178:	31 c0                	xor    eax,eax
c001017a:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001017e:	39 fa                	cmp    edx,edi
c0010180:	89 c1                	mov    ecx,eax
c0010182:	19 e9                	sbb    ecx,ebp
c0010184:	0f 83 43 ff ff ff    	jae    c00100cd <Phys::physicalMemorySetup(unsigned int)+0x76>
c001018a:	be 00 00 08 00       	mov    esi,0x80000
c001018f:	50                   	push   eax
c0010190:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010194:	57                   	push   edi
c0010195:	56                   	push   esi
c0010196:	68 cc a1 02 c0       	push   0xc002a1cc
c001019b:	e8 fc 2b 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00101a0:	5a                   	pop    edx
c00101a1:	59                   	pop    ecx
c00101a2:	57                   	push   edi
c00101a3:	56                   	push   esi
c00101a4:	e8 76 fe ff ff       	call   c001001f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101a9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101b1:	83 c4 0c             	add    esp,0xc
c00101b4:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101b8:	03 05 94 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e294
c00101be:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101c5:	a3 94 e2 02 c0       	mov    ds:0xc002e294,eax
c00101ca:	52                   	push   edx
c00101cb:	50                   	push   eax
c00101cc:	68 89 a1 02 c0       	push   0xc002a189
c00101d1:	e8 c6 2b 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00101d6:	83 c4 10             	add    esp,0x10
c00101d9:	e9 ef fe ff ff       	jmp    c00100cd <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101de:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101ea:	39 ea                	cmp    edx,ebp
c00101ec:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101f0:	0f 82 d7 fe ff ff    	jb     c00100cd <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101f6:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101fb:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101ff:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010203:	0f 83 c4 fe ff ff    	jae    c00100cd <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010209:	39 ee                	cmp    esi,ebp
c001020b:	89 f8                	mov    eax,edi
c001020d:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010211:	0f 83 78 ff ff ff    	jae    c001018f <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010217:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001021b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001021f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010223:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010227:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001022b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001022f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010233:	e9 57 ff ff ff       	jmp    c001018f <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010238:	83 ec 0c             	sub    esp,0xc
c001023b:	68 7b a1 02 c0       	push   0xc002a17b
c0010240:	e8 32 a2 00 00       	call   c001a477 <Krnl::panic(char const*)>
c0010245:	83 c4 10             	add    esp,0x10
c0010248:	bb 40 01 00 00       	mov    ebx,0x140
c001024d:	83 ec 08             	sub    esp,0x8
c0010250:	6a 00                	push   0x0
c0010252:	53                   	push   ebx
c0010253:	43                   	inc    ebx
c0010254:	e8 af fb ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c0010259:	ff 05 94 e2 02 c0    	inc    DWORD PTR ds:0xc002e294
c001025f:	83 c4 10             	add    esp,0x10
c0010262:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010268:	75 e3                	jne    c001024d <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001026a:	83 c4 3c             	add    esp,0x3c
c001026d:	5b                   	pop    ebx
c001026e:	5e                   	pop    esi
c001026f:	5f                   	pop    edi
c0010270:	5d                   	pop    ebp
c0010271:	c3                   	ret    
c0010272:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001027a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010282:	e9 d7 fe ff ff       	jmp    c001015e <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010287:	90                   	nop

c0010288 <Pipe::isAtty()>:
c0010288:	31 c0                	xor    eax,eax
c001028a:	c3                   	ret    
c001028b:	90                   	nop

c001028c <Pipe::~Pipe()>:
c001028c:	83 ec 0c             	sub    esp,0xc
c001028f:	ba 38 a2 02 c0       	mov    edx,0xc002a238
c0010294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010298:	89 10                	mov    DWORD PTR [eax],edx
c001029a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001029e:	83 ec 0c             	sub    esp,0xc
c00102a1:	50                   	push   eax
c00102a2:	e8 37 16 00 00       	call   c00118de <UnixFile::~UnixFile()>
c00102a7:	83 c4 10             	add    esp,0x10
c00102aa:	90                   	nop
c00102ab:	83 c4 0c             	add    esp,0xc
c00102ae:	c3                   	ret    
c00102af:	90                   	nop

c00102b0 <Pipe::~Pipe()>:
c00102b0:	83 ec 0c             	sub    esp,0xc
c00102b3:	83 ec 0c             	sub    esp,0xc
c00102b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ba:	e8 cd ff ff ff       	call   c001028c <Pipe::~Pipe()>
c00102bf:	83 c4 10             	add    esp,0x10
c00102c2:	83 ec 08             	sub    esp,0x8
c00102c5:	6a 20                	push   0x20
c00102c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102cb:	e8 ec 29 00 00       	call   c0012cbc <operator delete(void*, unsigned long)>
c00102d0:	83 c4 10             	add    esp,0x10
c00102d3:	83 c4 0c             	add    esp,0xc
c00102d6:	c3                   	ret    
c00102d7:	90                   	nop

c00102d8 <Pipe::read(unsigned long long, void*, int*)>:
c00102d8:	55                   	push   ebp
c00102d9:	57                   	push   edi
c00102da:	56                   	push   esi
c00102db:	53                   	push   ebx
c00102dc:	83 ec 1c             	sub    esp,0x1c
c00102df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102e3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102e7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102eb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102ee:	89 c8                	mov    eax,ecx
c00102f0:	99                   	cdq    
c00102f1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102f5:	74 19                	je     c0010310 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102f7:	39 f9                	cmp    ecx,edi
c00102f9:	89 d1                	mov    ecx,edx
c00102fb:	19 f1                	sbb    ecx,esi
c00102fd:	73 11                	jae    c0010310 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102ff:	e8 6d d9 00 00       	call   c001dc71 <lockScheduler()>
c0010304:	e8 a3 dc 00 00       	call   c001dfac <schedule()>
c0010309:	e8 65 d9 00 00       	call   c001dc73 <unlockScheduler()>
c001030e:	eb db                	jmp    c00102eb <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010310:	39 f8                	cmp    eax,edi
c0010312:	89 d1                	mov    ecx,edx
c0010314:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010318:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001031c:	19 f1                	sbb    ecx,esi
c001031e:	73 08                	jae    c0010328 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010320:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010328:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001032b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001032e:	29 c6                	sub    esi,eax
c0010330:	89 f1                	mov    ecx,esi
c0010332:	c1 f9 1f             	sar    ecx,0x1f
c0010335:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010339:	89 ca                	mov    edx,ecx
c001033b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001033f:	19 d1                	sbb    ecx,edx
c0010341:	73 04                	jae    c0010347 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010343:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010347:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001034b:	89 fd                	mov    ebp,edi
c001034d:	29 f5                	sub    ebp,esi
c001034f:	85 f6                	test   esi,esi
c0010351:	74 12                	je     c0010365 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010353:	52                   	push   edx
c0010354:	56                   	push   esi
c0010355:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010358:	50                   	push   eax
c0010359:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001035d:	e8 e2 03 ff ff       	call   c0000744 <memcpy>
c0010362:	83 c4 10             	add    esp,0x10
c0010365:	85 ed                	test   ebp,ebp
c0010367:	74 12                	je     c001037b <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010369:	50                   	push   eax
c001036a:	55                   	push   ebp
c001036b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001036e:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010372:	56                   	push   esi
c0010373:	e8 cc 03 ff ff       	call   c0000744 <memcpy>
c0010378:	83 c4 10             	add    esp,0x10
c001037b:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c001037e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010381:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010384:	99                   	cdq    
c0010385:	89 f7                	mov    edi,esi
c0010387:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001038b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001038f:	c1 ff 1f             	sar    edi,0x1f
c0010392:	57                   	push   edi
c0010393:	56                   	push   esi
c0010394:	52                   	push   edx
c0010395:	50                   	push   eax
c0010396:	e8 e1 65 01 00       	call   c002697c <__umoddi3>
c001039b:	83 c4 10             	add    esp,0x10
c001039e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103a1:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103a6:	75 10                	jne    c00103b8 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103a8:	83 ec 0c             	sub    esp,0xc
c00103ab:	68 f5 a1 02 c0       	push   0xc002a1f5
c00103b0:	e8 c2 a0 00 00       	call   c001a477 <Krnl::panic(char const*)>
c00103b5:	83 c4 10             	add    esp,0x10
c00103b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103c0:	89 10                	mov    DWORD PTR [eax],edx
c00103c2:	83 c4 1c             	add    esp,0x1c
c00103c5:	31 c0                	xor    eax,eax
c00103c7:	5b                   	pop    ebx
c00103c8:	5e                   	pop    esi
c00103c9:	5f                   	pop    edi
c00103ca:	5d                   	pop    ebp
c00103cb:	c3                   	ret    

c00103cc <Pipe::write(unsigned long long, void*, int*)>:
c00103cc:	55                   	push   ebp
c00103cd:	57                   	push   edi
c00103ce:	56                   	push   esi
c00103cf:	53                   	push   ebx
c00103d0:	83 ec 1c             	sub    esp,0x1c
c00103d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103d7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103db:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103df:	89 04 24             	mov    DWORD PTR [esp],eax
c00103e2:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103e5:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103ec:	89 de                	mov    esi,ebx
c00103ee:	89 df                	mov    edi,ebx
c00103f0:	c1 ff 1f             	sar    edi,0x1f
c00103f3:	01 c6                	add    esi,eax
c00103f5:	89 c8                	mov    eax,ecx
c00103f7:	11 d7                	adc    edi,edx
c00103f9:	99                   	cdq    
c00103fa:	39 f1                	cmp    ecx,esi
c00103fc:	89 d0                	mov    eax,edx
c00103fe:	19 f8                	sbb    eax,edi
c0010400:	b8 01 00 00 00       	mov    eax,0x1
c0010405:	0f 82 80 00 00 00    	jb     c001048b <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001040b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001040e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010411:	01 d8                	add    eax,ebx
c0010413:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010417:	99                   	cdq    
c0010418:	f7 f9                	idiv   ecx
c001041a:	29 d1                	sub    ecx,edx
c001041c:	89 d7                	mov    edi,edx
c001041e:	89 c8                	mov    eax,ecx
c0010420:	99                   	cdq    
c0010421:	39 ce                	cmp    esi,ecx
c0010423:	19 d3                	sbb    ebx,edx
c0010425:	bb 00 00 00 00       	mov    ebx,0x0
c001042a:	72 04                	jb     c0010430 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001042c:	89 f3                	mov    ebx,esi
c001042e:	29 cb                	sub    ebx,ecx
c0010430:	89 f1                	mov    ecx,esi
c0010432:	29 d9                	sub    ecx,ebx
c0010434:	74 1a                	je     c0010450 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010436:	52                   	push   edx
c0010437:	51                   	push   ecx
c0010438:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001043c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010440:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010443:	57                   	push   edi
c0010444:	e8 fb 02 ff ff       	call   c0000744 <memcpy>
c0010449:	83 c4 10             	add    esp,0x10
c001044c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010450:	85 db                	test   ebx,ebx
c0010452:	74 12                	je     c0010466 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010454:	50                   	push   eax
c0010455:	53                   	push   ebx
c0010456:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001045a:	51                   	push   ecx
c001045b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001045e:	e8 e1 02 ff ff       	call   c0000744 <memcpy>
c0010463:	83 c4 10             	add    esp,0x10
c0010466:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010469:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001046e:	75 10                	jne    c0010480 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010470:	83 ec 0c             	sub    esp,0xc
c0010473:	68 11 a2 02 c0       	push   0xc002a211
c0010478:	e8 fa 9f 00 00       	call   c001a477 <Krnl::panic(char const*)>
c001047d:	83 c4 10             	add    esp,0x10
c0010480:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010484:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010487:	89 38                	mov    DWORD PTR [eax],edi
c0010489:	31 c0                	xor    eax,eax
c001048b:	83 c4 1c             	add    esp,0x1c
c001048e:	5b                   	pop    ebx
c001048f:	5e                   	pop    esi
c0010490:	5f                   	pop    edi
c0010491:	5d                   	pop    ebp
c0010492:	c3                   	ret    
c0010493:	90                   	nop

c0010494 <Pipe::Pipe(int)>:
c0010494:	83 ec 0c             	sub    esp,0xc
c0010497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001049b:	83 ec 08             	sub    esp,0x8
c001049e:	6a 00                	push   0x0
c00104a0:	50                   	push   eax
c00104a1:	e8 56 12 00 00       	call   c00116fc <UnixFile::UnixFile(int)>
c00104a6:	83 c4 10             	add    esp,0x10
c00104a9:	ba 38 a2 02 c0       	mov    edx,0xc002a238
c00104ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b2:	89 10                	mov    DWORD PTR [eax],edx
c00104b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104bc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ce:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104d9:	83 ec 0c             	sub    esp,0xc
c00104dc:	50                   	push   eax
c00104dd:	e8 61 f3 ff ff       	call   c000f843 <malloc>
c00104e2:	83 c4 10             	add    esp,0x10
c00104e5:	89 c2                	mov    edx,eax
c00104e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104eb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104f6:	90                   	nop
c00104f7:	83 c4 0c             	add    esp,0xc
c00104fa:	c3                   	ret    
c00104fb:	90                   	nop

c00104fc <VgaText::isAtty()>:
c00104fc:	b0 01                	mov    al,0x1
c00104fe:	c3                   	ret    
c00104ff:	90                   	nop

c0010500 <VgaText::~VgaText()>:
c0010500:	83 ec 0c             	sub    esp,0xc
c0010503:	ba f4 a2 02 c0       	mov    edx,0xc002a2f4
c0010508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050c:	89 10                	mov    DWORD PTR [eax],edx
c001050e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010512:	83 ec 0c             	sub    esp,0xc
c0010515:	50                   	push   eax
c0010516:	e8 c3 13 00 00       	call   c00118de <UnixFile::~UnixFile()>
c001051b:	83 c4 10             	add    esp,0x10
c001051e:	90                   	nop
c001051f:	83 c4 0c             	add    esp,0xc
c0010522:	c3                   	ret    
c0010523:	90                   	nop

c0010524 <VgaText::~VgaText()>:
c0010524:	83 ec 0c             	sub    esp,0xc
c0010527:	83 ec 0c             	sub    esp,0xc
c001052a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001052e:	e8 cd ff ff ff       	call   c0010500 <VgaText::~VgaText()>
c0010533:	83 c4 10             	add    esp,0x10
c0010536:	83 ec 08             	sub    esp,0x8
c0010539:	68 60 12 00 00       	push   0x1260
c001053e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010542:	e8 75 27 00 00       	call   c0012cbc <operator delete(void*, unsigned long)>
c0010547:	83 c4 10             	add    esp,0x10
c001054a:	83 c4 0c             	add    esp,0xc
c001054d:	c3                   	ret    

c001054e <VgaText::read(unsigned long long, void*, int*)>:
c001054e:	83 ec 10             	sub    esp,0x10
c0010551:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010555:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010559:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001055d:	e8 12 5c 00 00       	call   c0016174 <readKeyboard(VgaText*, char*, unsigned long)>
c0010562:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010566:	89 02                	mov    DWORD PTR [edx],eax
c0010568:	31 c0                	xor    eax,eax
c001056a:	83 c4 1c             	add    esp,0x1c
c001056d:	c3                   	ret    

c001056e <setTerminalScrollLock(bool)>:
c001056e:	c3                   	ret    

c001056f <addToTerminalCycle(VgaText*)>:
c001056f:	8b 15 20 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e320
c0010575:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010579:	85 d2                	test   edx,edx
c001057b:	75 0c                	jne    c0010589 <addToTerminalCycle(VgaText*)+0x1a>
c001057d:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010583:	a3 20 e3 02 c0       	mov    ds:0xc002e320,eax
c0010588:	c3                   	ret    
c0010589:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001058f:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010595:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001059b:	c3                   	ret    

c001059c <installVgaTextImplementation()>:
c001059c:	83 ec 10             	sub    esp,0x10
c001059f:	6a 20                	push   0x20
c00105a1:	6a 00                	push   0x0
c00105a3:	68 00 e3 02 c0       	push   0xc002e300
c00105a8:	e8 cb 01 ff ff       	call   c0000778 <memset>
c00105ad:	83 c4 1c             	add    esp,0x1c
c00105b0:	c3                   	ret    

c00105b1 <scrollTerminalScrollLock(int)>:
c00105b1:	c3                   	ret    

c00105b2 <VgaText::load()>:
c00105b2:	53                   	push   ebx
c00105b3:	31 c0                	xor    eax,eax
c00105b5:	83 ec 58             	sub    esp,0x58
c00105b8:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105bc:	89 e2                	mov    edx,esp
c00105be:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105c2:	40                   	inc    eax
c00105c3:	83 f8 50             	cmp    eax,0x50
c00105c6:	75 f6                	jne    c00105be <VgaText::load()+0xc>
c00105c8:	31 c0                	xor    eax,eax
c00105ca:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105d1:	84 c9                	test   cl,cl
c00105d3:	74 06                	je     c00105db <VgaText::load()+0x29>
c00105d5:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105d8:	40                   	inc    eax
c00105d9:	eb ef                	jmp    c00105ca <VgaText::load()+0x18>
c00105db:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105e1:	85 c0                	test   eax,eax
c00105e3:	74 09                	je     c00105ee <VgaText::load()+0x3c>
c00105e5:	51                   	push   ecx
c00105e6:	51                   	push   ecx
c00105e7:	52                   	push   edx
c00105e8:	53                   	push   ebx
c00105e9:	ff d0                	call   eax
c00105eb:	83 c4 10             	add    esp,0x10
c00105ee:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00105f4:	85 c0                	test   eax,eax
c00105f6:	74 09                	je     c0010601 <VgaText::load()+0x4f>
c00105f8:	83 ec 0c             	sub    esp,0xc
c00105fb:	53                   	push   ebx
c00105fc:	ff d0                	call   eax
c00105fe:	83 c4 10             	add    esp,0x10
c0010601:	83 c4 58             	add    esp,0x58
c0010604:	5b                   	pop    ebx
c0010605:	c3                   	ret    

c0010606 <VgaText::updateCursor()>:
c0010606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001060a:	39 05 24 e3 02 c0    	cmp    DWORD PTR ds:0xc002e324,eax
c0010610:	75 0c                	jne    c001061e <VgaText::updateCursor()+0x18>
c0010612:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010618:	85 c0                	test   eax,eax
c001061a:	74 02                	je     c001061e <VgaText::updateCursor()+0x18>
c001061c:	ff e0                	jmp    eax
c001061e:	c3                   	ret    
c001061f:	90                   	nop

c0010620 <VgaText::showCursor(bool)>:
c0010620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010624:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010628:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001062e:	c3                   	ret    
c001062f:	90                   	nop

c0010630 <VgaText::disableBlink(bool)>:
c0010630:	56                   	push   esi
c0010631:	53                   	push   ebx
c0010632:	51                   	push   ecx
c0010633:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010637:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001063b:	39 1d 24 e3 02 c0    	cmp    DWORD PTR ds:0xc002e324,ebx
c0010641:	75 18                	jne    c001065b <VgaText::disableBlink(bool)+0x2b>
c0010643:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010649:	85 c0                	test   eax,eax
c001064b:	74 0e                	je     c001065b <VgaText::disableBlink(bool)+0x2b>
c001064d:	89 f1                	mov    ecx,esi
c001064f:	52                   	push   edx
c0010650:	52                   	push   edx
c0010651:	0f b6 d1             	movzx  edx,cl
c0010654:	52                   	push   edx
c0010655:	53                   	push   ebx
c0010656:	ff d0                	call   eax
c0010658:	83 c4 10             	add    esp,0x10
c001065b:	89 f0                	mov    eax,esi
c001065d:	83 f0 01             	xor    eax,0x1
c0010660:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010666:	58                   	pop    eax
c0010667:	5b                   	pop    ebx
c0010668:	5e                   	pop    esi
c0010669:	c3                   	ret    

c001066a <VgaText::doANSI_SGR(int)>:
c001066a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001066e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010672:	85 d2                	test   edx,edx
c0010674:	75 14                	jne    c001068a <VgaText::doANSI_SGR(int)+0x20>
c0010676:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c001067c:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010682:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010688:	eb 65                	jmp    c00106ef <VgaText::doANSI_SGR(int)+0x85>
c001068a:	83 fa 07             	cmp    edx,0x7
c001068d:	75 14                	jne    c00106a3 <VgaText::doANSI_SGR(int)+0x39>
c001068f:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010695:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001069b:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106a1:	eb 4c                	jmp    c00106ef <VgaText::doANSI_SGR(int)+0x85>
c00106a3:	83 fa 1b             	cmp    edx,0x1b
c00106a6:	74 ce                	je     c0010676 <VgaText::doANSI_SGR(int)+0xc>
c00106a8:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106ab:	83 f9 07             	cmp    ecx,0x7
c00106ae:	77 09                	ja     c00106b9 <VgaText::doANSI_SGR(int)+0x4f>
c00106b0:	8b 14 8d a0 d1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2e60]
c00106b7:	eb 20                	jmp    c00106d9 <VgaText::doANSI_SGR(int)+0x6f>
c00106b9:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106bc:	83 f9 07             	cmp    ecx,0x7
c00106bf:	77 09                	ja     c00106ca <VgaText::doANSI_SGR(int)+0x60>
c00106c1:	8b 14 8d a0 d1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2e60]
c00106c8:	eb 25                	jmp    c00106ef <VgaText::doANSI_SGR(int)+0x85>
c00106ca:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106cd:	83 f9 07             	cmp    ecx,0x7
c00106d0:	77 0e                	ja     c00106e0 <VgaText::doANSI_SGR(int)+0x76>
c00106d2:	8b 14 95 58 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2fa8]
c00106d9:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106df:	c3                   	ret    
c00106e0:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106e3:	83 f9 07             	cmp    ecx,0x7
c00106e6:	77 0d                	ja     c00106f5 <VgaText::doANSI_SGR(int)+0x8b>
c00106e8:	8b 14 95 30 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2fd0]
c00106ef:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106f5:	c3                   	ret    

c00106f6 <VgaText::setDefaultBgColour(VgaColour)>:
c00106f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106fe:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010704:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001070a:	c3                   	ret    
c001070b:	90                   	nop

c001070c <VgaText::setDefaultFgColour(VgaColour)>:
c001070c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010710:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010714:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001071a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010720:	c3                   	ret    
c0010721:	90                   	nop

c0010722 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010722:	53                   	push   ebx
c0010723:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010727:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001072b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001072f:	51                   	push   ecx
c0010730:	e8 c1 ff ff ff       	call   c00106f6 <VgaText::setDefaultBgColour(VgaColour)>
c0010735:	58                   	pop    eax
c0010736:	5a                   	pop    edx
c0010737:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001073b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001073f:	5b                   	pop    ebx
c0010740:	eb ca                	jmp    c001070c <VgaText::setDefaultFgColour(VgaColour)>

c0010742 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010742:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010746:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001074b:	83 e0 0f             	and    eax,0xf
c001074e:	c1 e2 04             	shl    edx,0x4
c0010751:	09 d0                	or     eax,edx
c0010753:	c3                   	ret    

c0010754 <VgaText::scrollScreen()>:
c0010754:	57                   	push   edi
c0010755:	56                   	push   esi
c0010756:	be 01 00 00 00       	mov    esi,0x1
c001075b:	53                   	push   ebx
c001075c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010760:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010766:	31 ff                	xor    edi,edi
c0010768:	01 d9                	add    ecx,ebx
c001076a:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c001076d:	83 fe 17             	cmp    esi,0x17
c0010770:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010776:	75 28                	jne    c00107a0 <VgaText::scrollScreen()+0x4c>
c0010778:	f7 c7 01 00 00 00    	test   edi,0x1
c001077e:	74 1c                	je     c001079c <VgaText::scrollScreen()+0x48>
c0010780:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010787:	50                   	push   eax
c0010788:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001078f:	50                   	push   eax
c0010790:	e8 ad ff ff ff       	call   c0010742 <VgaText::combineColours(unsigned char, unsigned char)>
c0010795:	5a                   	pop    edx
c0010796:	5a                   	pop    edx
c0010797:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001079a:	eb 04                	jmp    c00107a0 <VgaText::scrollScreen()+0x4c>
c001079c:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107a0:	47                   	inc    edi
c00107a1:	41                   	inc    ecx
c00107a2:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107a8:	75 c0                	jne    c001076a <VgaText::scrollScreen()+0x16>
c00107aa:	46                   	inc    esi
c00107ab:	83 fe 18             	cmp    esi,0x18
c00107ae:	75 b0                	jne    c0010760 <VgaText::scrollScreen()+0xc>
c00107b0:	39 1d 24 e3 02 c0    	cmp    DWORD PTR ds:0xc002e324,ebx
c00107b6:	75 24                	jne    c00107dc <VgaText::scrollScreen()+0x88>
c00107b8:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107bf:	74 08                	je     c00107c9 <VgaText::scrollScreen()+0x75>
c00107c1:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107c7:	eb 13                	jmp    c00107dc <VgaText::scrollScreen()+0x88>
c00107c9:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107cf:	85 c0                	test   eax,eax
c00107d1:	74 09                	je     c00107dc <VgaText::scrollScreen()+0x88>
c00107d3:	83 ec 0c             	sub    esp,0xc
c00107d6:	53                   	push   ebx
c00107d7:	ff d0                	call   eax
c00107d9:	83 c4 10             	add    esp,0x10
c00107dc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107e0:	5b                   	pop    ebx
c00107e1:	5e                   	pop    esi
c00107e2:	5f                   	pop    edi
c00107e3:	e9 1e fe ff ff       	jmp    c0010606 <VgaText::updateCursor()>

c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00107e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107ed:	c1 e0 08             	shl    eax,0x8
c00107f0:	89 c2                	mov    edx,eax
c00107f2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107f7:	09 d0                	or     eax,edx
c00107f9:	c3                   	ret    

c00107fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107fa:	53                   	push   ebx
c00107fb:	83 ec 08             	sub    esp,0x8
c00107fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010802:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010807:	50                   	push   eax
c0010808:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001080d:	50                   	push   eax
c001080e:	e8 2f ff ff ff       	call   c0010742 <VgaText::combineColours(unsigned char, unsigned char)>
c0010813:	5a                   	pop    edx
c0010814:	0f b6 c0             	movzx  eax,al
c0010817:	5b                   	pop    ebx
c0010818:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001081d:	50                   	push   eax
c001081e:	53                   	push   ebx
c001081f:	e8 c4 ff ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010824:	5a                   	pop    edx
c0010825:	5a                   	pop    edx
c0010826:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001082c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010830:	0f b7 d2             	movzx  edx,dx
c0010833:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010838:	39 0d 24 e3 02 c0    	cmp    DWORD PTR ds:0xc002e324,ecx
c001083e:	75 14                	jne    c0010854 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010840:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010846:	85 c0                	test   eax,eax
c0010848:	74 0a                	je     c0010854 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001084a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001084e:	83 c4 08             	add    esp,0x8
c0010851:	5b                   	pop    ebx
c0010852:	ff e0                	jmp    eax
c0010854:	83 c4 08             	add    esp,0x8
c0010857:	5b                   	pop    ebx
c0010858:	c3                   	ret    
c0010859:	90                   	nop

c001085a <VgaText::getCursorX()>:
c001085a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001085e:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010864:	c3                   	ret    
c0010865:	90                   	nop

c0010866 <VgaText::getCursorY()>:
c0010866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001086a:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010870:	c3                   	ret    
c0010871:	90                   	nop

c0010872 <VgaText::setCursor(int, int)>:
c0010872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010876:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001087a:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010880:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010884:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001088a:	e9 77 fd ff ff       	jmp    c0010606 <VgaText::updateCursor()>
c001088f:	90                   	nop

c0010890 <VgaText::setCursorX(int)>:
c0010890:	83 ec 10             	sub    esp,0x10
c0010893:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010897:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001089d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a1:	50                   	push   eax
c00108a2:	e8 cb ff ff ff       	call   c0010872 <VgaText::setCursor(int, int)>
c00108a7:	83 c4 1c             	add    esp,0x1c
c00108aa:	c3                   	ret    
c00108ab:	90                   	nop

c00108ac <VgaText::setCursorY(int)>:
c00108ac:	83 ec 10             	sub    esp,0x10
c00108af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108b7:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108bd:	50                   	push   eax
c00108be:	e8 af ff ff ff       	call   c0010872 <VgaText::setCursor(int, int)>
c00108c3:	83 c4 1c             	add    esp,0x1c
c00108c6:	c3                   	ret    
c00108c7:	90                   	nop

c00108c8 <VgaText::incrementCursor(bool)>:
c00108c8:	56                   	push   esi
c00108c9:	53                   	push   ebx
c00108ca:	51                   	push   ecx
c00108cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108cf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108d3:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108d9:	40                   	inc    eax
c00108da:	83 f8 50             	cmp    eax,0x50
c00108dd:	74 08                	je     c00108e7 <VgaText::incrementCursor(bool)+0x1f>
c00108df:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108e5:	eb 33                	jmp    c001091a <VgaText::incrementCursor(bool)+0x52>
c00108e7:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108ed:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00108f7:	8d 50 01             	lea    edx,[eax+0x1]
c00108fa:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010900:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010906:	75 12                	jne    c001091a <VgaText::incrementCursor(bool)+0x52>
c0010908:	83 ec 0c             	sub    esp,0xc
c001090b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010911:	53                   	push   ebx
c0010912:	e8 3d fe ff ff       	call   c0010754 <VgaText::scrollScreen()>
c0010917:	83 c4 10             	add    esp,0x10
c001091a:	89 f0                	mov    eax,esi
c001091c:	84 c0                	test   al,al
c001091e:	74 0c                	je     c001092c <VgaText::incrementCursor(bool)+0x64>
c0010920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010924:	5a                   	pop    edx
c0010925:	5b                   	pop    ebx
c0010926:	5e                   	pop    esi
c0010927:	e9 da fc ff ff       	jmp    c0010606 <VgaText::updateCursor()>
c001092c:	58                   	pop    eax
c001092d:	5b                   	pop    ebx
c001092e:	5e                   	pop    esi
c001092f:	c3                   	ret    

c0010930 <VgaText::updateRAMUsageDisplay(int)>:
c0010930:	56                   	push   esi
c0010931:	8b 35 80 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d180
c0010937:	53                   	push   ebx
c0010938:	bb 0a 00 00 00       	mov    ebx,0xa
c001093d:	6a 0f                	push   0xf
c001093f:	6a 00                	push   0x0
c0010941:	e8 fc fd ff ff       	call   c0010742 <VgaText::combineColours(unsigned char, unsigned char)>
c0010946:	5a                   	pop    edx
c0010947:	59                   	pop    ecx
c0010948:	0f b6 c8             	movzx  ecx,al
c001094b:	51                   	push   ecx
c001094c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010950:	99                   	cdq    
c0010951:	f7 fb                	idiv   ebx
c0010953:	89 d3                	mov    ebx,edx
c0010955:	83 c0 30             	add    eax,0x30
c0010958:	83 c3 30             	add    ebx,0x30
c001095b:	0f be c0             	movsx  eax,al
c001095e:	0f b6 db             	movzx  ebx,bl
c0010961:	50                   	push   eax
c0010962:	e8 81 fe ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010967:	5a                   	pop    edx
c0010968:	5a                   	pop    edx
c0010969:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010970:	51                   	push   ecx
c0010971:	53                   	push   ebx
c0010972:	e8 71 fe ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010977:	5b                   	pop    ebx
c0010978:	5a                   	pop    edx
c0010979:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010980:	51                   	push   ecx
c0010981:	6a 25                	push   0x25
c0010983:	e8 60 fe ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010988:	59                   	pop    ecx
c0010989:	5b                   	pop    ebx
c001098a:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010991:	5b                   	pop    ebx
c0010992:	5e                   	pop    esi
c0010993:	c3                   	ret    

c0010994 <VgaText::updateDiskUsage()>:
c0010994:	55                   	push   ebp
c0010995:	bd 10 27 00 00       	mov    ebp,0x2710
c001099a:	57                   	push   edi
c001099b:	8b 3d 80 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d180
c00109a1:	56                   	push   esi
c00109a2:	53                   	push   ebx
c00109a3:	6a 0f                	push   0xf
c00109a5:	6a 00                	push   0x0
c00109a7:	e8 96 fd ff ff       	call   c0010742 <VgaText::combineColours(unsigned char, unsigned char)>
c00109ac:	5a                   	pop    edx
c00109ad:	0f b6 d8             	movzx  ebx,al
c00109b0:	59                   	pop    ecx
c00109b1:	8b 35 a8 25 03 c0    	mov    esi,DWORD PTR ds:0xc00325a8
c00109b7:	53                   	push   ebx
c00109b8:	b9 0a 00 00 00       	mov    ecx,0xa
c00109bd:	89 f0                	mov    eax,esi
c00109bf:	99                   	cdq    
c00109c0:	f7 fd                	idiv   ebp
c00109c2:	99                   	cdq    
c00109c3:	f7 f9                	idiv   ecx
c00109c5:	8d 42 30             	lea    eax,[edx+0x30]
c00109c8:	0f b6 c0             	movzx  eax,al
c00109cb:	50                   	push   eax
c00109cc:	e8 17 fe ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c00109d1:	5d                   	pop    ebp
c00109d2:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109d7:	5a                   	pop    edx
c00109d8:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109dc:	53                   	push   ebx
c00109dd:	89 f0                	mov    eax,esi
c00109df:	99                   	cdq    
c00109e0:	f7 fd                	idiv   ebp
c00109e2:	99                   	cdq    
c00109e3:	f7 f9                	idiv   ecx
c00109e5:	8d 42 30             	lea    eax,[edx+0x30]
c00109e8:	0f b6 c0             	movzx  eax,al
c00109eb:	50                   	push   eax
c00109ec:	e8 f7 fd ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c00109f1:	5d                   	pop    ebp
c00109f2:	bd 64 00 00 00       	mov    ebp,0x64
c00109f7:	5a                   	pop    edx
c00109f8:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109ff:	53                   	push   ebx
c0010a00:	89 f0                	mov    eax,esi
c0010a02:	99                   	cdq    
c0010a03:	f7 fd                	idiv   ebp
c0010a05:	99                   	cdq    
c0010a06:	f7 f9                	idiv   ecx
c0010a08:	8d 42 30             	lea    eax,[edx+0x30]
c0010a0b:	0f b6 c0             	movzx  eax,al
c0010a0e:	50                   	push   eax
c0010a0f:	e8 d4 fd ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a14:	5d                   	pop    ebp
c0010a15:	5a                   	pop    edx
c0010a16:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a1d:	53                   	push   ebx
c0010a1e:	89 f0                	mov    eax,esi
c0010a20:	99                   	cdq    
c0010a21:	f7 f9                	idiv   ecx
c0010a23:	89 d6                	mov    esi,edx
c0010a25:	99                   	cdq    
c0010a26:	f7 f9                	idiv   ecx
c0010a28:	8d 42 30             	lea    eax,[edx+0x30]
c0010a2b:	0f b6 c0             	movzx  eax,al
c0010a2e:	50                   	push   eax
c0010a2f:	e8 b4 fd ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a34:	5d                   	pop    ebp
c0010a35:	5a                   	pop    edx
c0010a36:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a3d:	53                   	push   ebx
c0010a3e:	8d 46 30             	lea    eax,[esi+0x30]
c0010a41:	0f b6 f0             	movzx  esi,al
c0010a44:	56                   	push   esi
c0010a45:	e8 9e fd ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a4a:	5e                   	pop    esi
c0010a4b:	8b 35 a4 25 03 c0    	mov    esi,DWORD PTR ds:0xc00325a4
c0010a51:	5d                   	pop    ebp
c0010a52:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a59:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a5e:	53                   	push   ebx
c0010a5f:	89 f0                	mov    eax,esi
c0010a61:	99                   	cdq    
c0010a62:	f7 fd                	idiv   ebp
c0010a64:	99                   	cdq    
c0010a65:	f7 f9                	idiv   ecx
c0010a67:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6a:	0f b6 c0             	movzx  eax,al
c0010a6d:	50                   	push   eax
c0010a6e:	e8 75 fd ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a73:	5a                   	pop    edx
c0010a74:	5d                   	pop    ebp
c0010a75:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a7c:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a81:	53                   	push   ebx
c0010a82:	89 f0                	mov    eax,esi
c0010a84:	99                   	cdq    
c0010a85:	f7 fd                	idiv   ebp
c0010a87:	99                   	cdq    
c0010a88:	f7 f9                	idiv   ecx
c0010a8a:	8d 42 30             	lea    eax,[edx+0x30]
c0010a8d:	0f b6 c0             	movzx  eax,al
c0010a90:	50                   	push   eax
c0010a91:	e8 52 fd ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a96:	5a                   	pop    edx
c0010a97:	5d                   	pop    ebp
c0010a98:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a9f:	bd 64 00 00 00       	mov    ebp,0x64
c0010aa4:	53                   	push   ebx
c0010aa5:	89 f0                	mov    eax,esi
c0010aa7:	99                   	cdq    
c0010aa8:	f7 fd                	idiv   ebp
c0010aaa:	99                   	cdq    
c0010aab:	f7 f9                	idiv   ecx
c0010aad:	83 c2 30             	add    edx,0x30
c0010ab0:	0f b6 d2             	movzx  edx,dl
c0010ab3:	52                   	push   edx
c0010ab4:	e8 2f fd ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab9:	5a                   	pop    edx
c0010aba:	5d                   	pop    ebp
c0010abb:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010ac2:	53                   	push   ebx
c0010ac3:	89 f0                	mov    eax,esi
c0010ac5:	99                   	cdq    
c0010ac6:	f7 f9                	idiv   ecx
c0010ac8:	89 d6                	mov    esi,edx
c0010aca:	99                   	cdq    
c0010acb:	f7 f9                	idiv   ecx
c0010acd:	8d 42 30             	lea    eax,[edx+0x30]
c0010ad0:	0f b6 c0             	movzx  eax,al
c0010ad3:	50                   	push   eax
c0010ad4:	e8 0f fd ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad9:	5a                   	pop    edx
c0010ada:	59                   	pop    ecx
c0010adb:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ae2:	53                   	push   ebx
c0010ae3:	8d 46 30             	lea    eax,[esi+0x30]
c0010ae6:	0f b6 f0             	movzx  esi,al
c0010ae9:	56                   	push   esi
c0010aea:	e8 f9 fc ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aef:	5b                   	pop    ebx
c0010af0:	5e                   	pop    esi
c0010af1:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010af8:	5b                   	pop    ebx
c0010af9:	5e                   	pop    esi
c0010afa:	5f                   	pop    edi
c0010afb:	5d                   	pop    ebp
c0010afc:	c3                   	ret    
c0010afd:	90                   	nop

c0010afe <VgaText::updateTitle()>:
c0010afe:	53                   	push   ebx
c0010aff:	31 c0                	xor    eax,eax
c0010b01:	83 ec 58             	sub    esp,0x58
c0010b04:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b08:	89 e1                	mov    ecx,esp
c0010b0a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b0e:	40                   	inc    eax
c0010b0f:	83 f8 50             	cmp    eax,0x50
c0010b12:	75 f6                	jne    c0010b0a <VgaText::updateTitle()+0xc>
c0010b14:	31 c0                	xor    eax,eax
c0010b16:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b1d:	84 db                	test   bl,bl
c0010b1f:	74 06                	je     c0010b27 <VgaText::updateTitle()+0x29>
c0010b21:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b24:	40                   	inc    eax
c0010b25:	eb ef                	jmp    c0010b16 <VgaText::updateTitle()+0x18>
c0010b27:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b2d:	85 c0                	test   eax,eax
c0010b2f:	74 09                	je     c0010b3a <VgaText::updateTitle()+0x3c>
c0010b31:	53                   	push   ebx
c0010b32:	53                   	push   ebx
c0010b33:	51                   	push   ecx
c0010b34:	52                   	push   edx
c0010b35:	ff d0                	call   eax
c0010b37:	83 c4 10             	add    esp,0x10
c0010b3a:	e8 55 fe ff ff       	call   c0010994 <VgaText::updateDiskUsage()>
c0010b3f:	83 c4 58             	add    esp,0x58
c0010b42:	5b                   	pop    ebx
c0010b43:	c3                   	ret    

c0010b44 <VgaText::setTitleTextColour(VgaColour)>:
c0010b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b4c:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b52:	eb aa                	jmp    c0010afe <VgaText::updateTitle()>

c0010b54 <VgaText::setTitleColour(VgaColour)>:
c0010b54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b5c:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b62:	eb 9a                	jmp    c0010afe <VgaText::updateTitle()>

c0010b64 <VgaText::setTitle(char*)>:
c0010b64:	53                   	push   ebx
c0010b65:	83 ec 10             	sub    esp,0x10
c0010b68:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b70:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b76:	50                   	push   eax
c0010b77:	e8 b8 fc fe ff       	call   c0000834 <strcpy>
c0010b7c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b80:	83 c4 18             	add    esp,0x18
c0010b83:	5b                   	pop    ebx
c0010b84:	e9 75 ff ff ff       	jmp    c0010afe <VgaText::updateTitle()>
c0010b89:	90                   	nop

c0010b8a <VgaText::decrementCursor(bool)>:
c0010b8a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b8e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b92:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010b98:	85 c0                	test   eax,eax
c0010b9a:	74 07                	je     c0010ba3 <VgaText::decrementCursor(bool)+0x19>
c0010b9c:	48                   	dec    eax
c0010b9d:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010ba3:	84 c9                	test   cl,cl
c0010ba5:	74 09                	je     c0010bb0 <VgaText::decrementCursor(bool)+0x26>
c0010ba7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010bab:	e9 56 fa ff ff       	jmp    c0010606 <VgaText::updateCursor()>
c0010bb0:	c3                   	ret    
c0010bb1:	90                   	nop

c0010bb2 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bb2:	53                   	push   ebx
c0010bb3:	83 ec 08             	sub    esp,0x8
c0010bb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bbe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bc2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bc6:	3c 07                	cmp    al,0x7
c0010bc8:	75 2a                	jne    c0010bf4 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bca:	a1 d4 e3 02 c0       	mov    eax,ds:0xc002e3d4
c0010bcf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bd7:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010bdf:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010be7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010beb:	83 c4 08             	add    esp,0x8
c0010bee:	5b                   	pop    ebx
c0010bef:	e9 a6 2f 00 00       	jmp    c0013b9a <Buzzer::beep(int, int, bool)>
c0010bf4:	3c 0d                	cmp    al,0xd
c0010bf6:	75 0c                	jne    c0010c04 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010bf8:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c02:	eb 3b                	jmp    c0010c3f <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c04:	3c 0a                	cmp    al,0xa
c0010c06:	75 40                	jne    c0010c48 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c08:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c0e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c18:	8d 50 01             	lea    edx,[eax+0x1]
c0010c1b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c21:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c27:	75 12                	jne    c0010c3b <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c29:	83 ec 0c             	sub    esp,0xc
c0010c2c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c32:	53                   	push   ebx
c0010c33:	e8 1c fb ff ff       	call   c0010754 <VgaText::scrollScreen()>
c0010c38:	83 c4 10             	add    esp,0x10
c0010c3b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c3f:	83 c4 08             	add    esp,0x8
c0010c42:	5b                   	pop    ebx
c0010c43:	e9 be f9 ff ff       	jmp    c0010606 <VgaText::updateCursor()>
c0010c48:	3c 08                	cmp    al,0x8
c0010c4a:	75 31                	jne    c0010c7d <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c4c:	50                   	push   eax
c0010c4d:	50                   	push   eax
c0010c4e:	6a 01                	push   0x1
c0010c50:	53                   	push   ebx
c0010c51:	e8 34 ff ff ff       	call   c0010b8a <VgaText::decrementCursor(bool)>
c0010c56:	5a                   	pop    edx
c0010c57:	59                   	pop    ecx
c0010c58:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c5e:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c64:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c6a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c70:	6a 20                	push   0x20
c0010c72:	53                   	push   ebx
c0010c73:	e8 82 fb ff ff       	call   c00107fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c78:	83 c4 28             	add    esp,0x28
c0010c7b:	5b                   	pop    ebx
c0010c7c:	c3                   	ret    
c0010c7d:	83 ec 08             	sub    esp,0x8
c0010c80:	0f be c0             	movsx  eax,al
c0010c83:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c89:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c8f:	51                   	push   ecx
c0010c90:	52                   	push   edx
c0010c91:	50                   	push   eax
c0010c92:	53                   	push   ebx
c0010c93:	e8 62 fb ff ff       	call   c00107fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c98:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c9c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010ca4:	83 c4 28             	add    esp,0x28
c0010ca7:	5b                   	pop    ebx
c0010ca8:	e9 1b fc ff ff       	jmp    c00108c8 <VgaText::incrementCursor(bool)>
c0010cad:	90                   	nop

c0010cae <VgaText::isShowingCursor()>:
c0010cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cb2:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cb8:	c3                   	ret    
c0010cb9:	90                   	nop

c0010cba <VgaText::isBlinkDisabled()>:
c0010cba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cbe:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010cc4:	83 f0 01             	xor    eax,0x1
c0010cc7:	c3                   	ret    

c0010cc8 <VgaText::setCursorHeight(int)>:
c0010cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ccc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cd0:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010cd6:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010cdd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ce1:	e9 3a f9 ff ff       	jmp    c0010620 <VgaText::showCursor(bool)>

c0010ce6 <VgaText::getCursorHeight()>:
c0010ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cea:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cf0:	c3                   	ret    

c0010cf1 <setActiveTerminal(VgaText*)>:
c0010cf1:	53                   	push   ebx
c0010cf2:	83 ec 08             	sub    esp,0x8
c0010cf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cf9:	85 db                	test   ebx,ebx
c0010cfb:	75 11                	jne    c0010d0e <setActiveTerminal(VgaText*)+0x1d>
c0010cfd:	c7 44 24 10 4c a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a24c
c0010d05:	83 c4 08             	add    esp,0x8
c0010d08:	5b                   	pop    ebx
c0010d09:	e9 69 97 00 00       	jmp    c001a477 <Krnl::panic(char const*)>
c0010d0e:	50                   	push   eax
c0010d0f:	50                   	push   eax
c0010d10:	53                   	push   ebx
c0010d11:	68 5a a2 02 c0       	push   0xc002a25a
c0010d16:	e8 81 20 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0010d1b:	a1 24 e3 02 c0       	mov    eax,ds:0xc002e324
c0010d20:	83 c4 10             	add    esp,0x10
c0010d23:	85 c0                	test   eax,eax
c0010d25:	74 0c                	je     c0010d33 <setActiveTerminal(VgaText*)+0x42>
c0010d27:	83 ec 0c             	sub    esp,0xc
c0010d2a:	50                   	push   eax
c0010d2b:	e8 d6 f8 ff ff       	call   c0010606 <VgaText::updateCursor()>
c0010d30:	83 c4 10             	add    esp,0x10
c0010d33:	89 1d 24 e3 02 c0    	mov    DWORD PTR ds:0xc002e324,ebx
c0010d39:	51                   	push   ecx
c0010d3a:	51                   	push   ecx
c0010d3b:	53                   	push   ebx
c0010d3c:	68 72 a2 02 c0       	push   0xc002a272
c0010d41:	e8 56 20 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0010d46:	83 c4 0c             	add    esp,0xc
c0010d49:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d4f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d55:	53                   	push   ebx
c0010d56:	e8 17 fb ff ff       	call   c0010872 <VgaText::setCursor(int, int)>
c0010d5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d5e:	e8 57 ff ff ff       	call   c0010cba <VgaText::isBlinkDisabled()>
c0010d63:	5a                   	pop    edx
c0010d64:	0f b6 c0             	movzx  eax,al
c0010d67:	59                   	pop    ecx
c0010d68:	50                   	push   eax
c0010d69:	53                   	push   ebx
c0010d6a:	e8 c1 f8 ff ff       	call   c0010630 <VgaText::disableBlink(bool)>
c0010d6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d72:	e8 6f ff ff ff       	call   c0010ce6 <VgaText::getCursorHeight()>
c0010d77:	5a                   	pop    edx
c0010d78:	59                   	pop    ecx
c0010d79:	50                   	push   eax
c0010d7a:	53                   	push   ebx
c0010d7b:	e8 48 ff ff ff       	call   c0010cc8 <VgaText::setCursorHeight(int)>
c0010d80:	83 c4 10             	add    esp,0x10
c0010d83:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d8a:	75 0a                	jne    c0010d96 <setActiveTerminal(VgaText*)+0xa5>
c0010d8c:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010d96:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d9a:	83 c4 08             	add    esp,0x8
c0010d9d:	5b                   	pop    ebx
c0010d9e:	e9 0f f8 ff ff       	jmp    c00105b2 <VgaText::load()>

c0010da3 <doTerminalCycle()>:
c0010da3:	83 ec 18             	sub    esp,0x18
c0010da6:	a1 20 e3 02 c0       	mov    eax,ds:0xc002e320
c0010dab:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010db1:	50                   	push   eax
c0010db2:	a3 20 e3 02 c0       	mov    ds:0xc002e320,eax
c0010db7:	e8 35 ff ff ff       	call   c0010cf1 <setActiveTerminal(VgaText*)>
c0010dbc:	83 c4 1c             	add    esp,0x1c
c0010dbf:	c3                   	ret    

c0010dc0 <VgaText::doUpdate()>:
c0010dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dc4:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010dca:	85 c0                	test   eax,eax
c0010dcc:	74 02                	je     c0010dd0 <VgaText::doUpdate()+0x10>
c0010dce:	ff e0                	jmp    eax
c0010dd0:	c3                   	ret    
c0010dd1:	90                   	nop

c0010dd2 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dd2:	55                   	push   ebp
c0010dd3:	57                   	push   edi
c0010dd4:	56                   	push   esi
c0010dd5:	53                   	push   ebx
c0010dd6:	83 ec 1c             	sub    esp,0x1c
c0010dd9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010ddd:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010de2:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010de9:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010dec:	50                   	push   eax
c0010ded:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010df2:	50                   	push   eax
c0010df3:	e8 4a f9 ff ff       	call   c0010742 <VgaText::combineColours(unsigned char, unsigned char)>
c0010df8:	59                   	pop    ecx
c0010df9:	0f b6 c0             	movzx  eax,al
c0010dfc:	5b                   	pop    ebx
c0010dfd:	31 c9                	xor    ecx,ecx
c0010dff:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e07:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e0b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e15:	0f b7 db             	movzx  ebx,bx
c0010e18:	01 db                	add    ebx,ebx
c0010e1a:	01 fb                	add    ebx,edi
c0010e1c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e1f:	84 c0                	test   al,al
c0010e21:	0f 84 38 01 00 00    	je     c0010f5f <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e27:	3c 0d                	cmp    al,0xd
c0010e29:	75 0f                	jne    c0010e3a <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e2b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e35:	e9 1f 01 00 00       	jmp    c0010f59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e3a:	3c 0a                	cmp    al,0xa
c0010e3c:	75 5b                	jne    c0010e99 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e3e:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e44:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e4e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e51:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e57:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e5d:	75 12                	jne    c0010e71 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e5f:	83 ec 0c             	sub    esp,0xc
c0010e62:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e68:	55                   	push   ebp
c0010e69:	e8 e6 f8 ff ff       	call   c0010754 <VgaText::scrollScreen()>
c0010e6e:	83 c4 10             	add    esp,0x10
c0010e71:	83 ec 0c             	sub    esp,0xc
c0010e74:	55                   	push   ebp
c0010e75:	e8 8c f7 ff ff       	call   c0010606 <VgaText::updateCursor()>
c0010e7a:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e82:	83 c4 10             	add    esp,0x10
c0010e85:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e8b:	31 c9                	xor    ecx,ecx
c0010e8d:	0f b7 db             	movzx  ebx,bx
c0010e90:	01 db                	add    ebx,ebx
c0010e92:	01 fb                	add    ebx,edi
c0010e94:	e9 c0 00 00 00       	jmp    c0010f59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e99:	3c 08                	cmp    al,0x8
c0010e9b:	75 4e                	jne    c0010eeb <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010e9d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ea1:	53                   	push   ebx
c0010ea2:	53                   	push   ebx
c0010ea3:	6a 01                	push   0x1
c0010ea5:	55                   	push   ebp
c0010ea6:	e8 df fc ff ff       	call   c0010b8a <VgaText::decrementCursor(bool)>
c0010eab:	58                   	pop    eax
c0010eac:	5a                   	pop    edx
c0010ead:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eb3:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010eb9:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ebf:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010ec5:	6a 20                	push   0x20
c0010ec7:	55                   	push   ebp
c0010ec8:	e8 2d f9 ff ff       	call   c00107fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ecd:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ed5:	83 c4 20             	add    esp,0x20
c0010ed8:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ede:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ee2:	0f b7 db             	movzx  ebx,bx
c0010ee5:	01 db                	add    ebx,ebx
c0010ee7:	01 fb                	add    ebx,edi
c0010ee9:	eb 6e                	jmp    c0010f59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010eeb:	51                   	push   ecx
c0010eec:	51                   	push   ecx
c0010eed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ef1:	50                   	push   eax
c0010ef2:	e8 f1 f8 ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ef7:	83 c4 10             	add    esp,0x10
c0010efa:	66 89 03             	mov    WORD PTR [ebx],ax
c0010efd:	39 2d 24 e3 02 c0    	cmp    DWORD PTR ds:0xc002e324,ebp
c0010f03:	75 2a                	jne    c0010f2f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f05:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f0b:	85 c0                	test   eax,eax
c0010f0d:	74 20                	je     c0010f2f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f0f:	52                   	push   edx
c0010f10:	52                   	push   edx
c0010f11:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f17:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f1d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f25:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f28:	51                   	push   ecx
c0010f29:	55                   	push   ebp
c0010f2a:	ff d0                	call   eax
c0010f2c:	83 c4 20             	add    esp,0x20
c0010f2f:	83 c3 02             	add    ebx,0x2
c0010f32:	50                   	push   eax
c0010f33:	50                   	push   eax
c0010f34:	6a 00                	push   0x0
c0010f36:	55                   	push   ebp
c0010f37:	e8 8c f9 ff ff       	call   c00108c8 <VgaText::incrementCursor(bool)>
c0010f3c:	83 c4 10             	add    esp,0x10
c0010f3f:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f46:	75 0f                	jne    c0010f57 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f48:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f50:	0f b7 db             	movzx  ebx,bx
c0010f53:	01 db                	add    ebx,ebx
c0010f55:	01 fb                	add    ebx,edi
c0010f57:	b1 01                	mov    cl,0x1
c0010f59:	46                   	inc    esi
c0010f5a:	e9 bd fe ff ff       	jmp    c0010e1c <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f5f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f63:	83 ec 0c             	sub    esp,0xc
c0010f66:	55                   	push   ebp
c0010f67:	e8 9a f6 ff ff       	call   c0010606 <VgaText::updateCursor()>
c0010f6c:	83 c4 10             	add    esp,0x10
c0010f6f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f73:	84 c9                	test   cl,cl
c0010f75:	74 0c                	je     c0010f83 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f77:	83 ec 0c             	sub    esp,0xc
c0010f7a:	55                   	push   ebp
c0010f7b:	e8 40 fe ff ff       	call   c0010dc0 <VgaText::doUpdate()>
c0010f80:	83 c4 10             	add    esp,0x10
c0010f83:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f8a:	83 c4 1c             	add    esp,0x1c
c0010f8d:	5b                   	pop    ebx
c0010f8e:	5e                   	pop    esi
c0010f8f:	5f                   	pop    edi
c0010f90:	5d                   	pop    ebp
c0010f91:	c3                   	ret    

c0010f92 <VgaText::clearScreen()>:
c0010f92:	57                   	push   edi
c0010f93:	56                   	push   esi
c0010f94:	31 f6                	xor    esi,esi
c0010f96:	53                   	push   ebx
c0010f97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f9b:	52                   	push   edx
c0010f9c:	6a 00                	push   0x0
c0010f9e:	6a 00                	push   0x0
c0010fa0:	53                   	push   ebx
c0010fa1:	e8 cc f8 ff ff       	call   c0010872 <VgaText::setCursor(int, int)>
c0010fa6:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fad:	83 c4 10             	add    esp,0x10
c0010fb0:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010fb6:	7e 26                	jle    c0010fde <VgaText::clearScreen()+0x4c>
c0010fb8:	31 ff                	xor    edi,edi
c0010fba:	50                   	push   eax
c0010fbb:	50                   	push   eax
c0010fbc:	56                   	push   esi
c0010fbd:	57                   	push   edi
c0010fbe:	47                   	inc    edi
c0010fbf:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fc5:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fcb:	6a 20                	push   0x20
c0010fcd:	53                   	push   ebx
c0010fce:	e8 27 f8 ff ff       	call   c00107fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fd3:	83 c4 20             	add    esp,0x20
c0010fd6:	83 ff 50             	cmp    edi,0x50
c0010fd9:	75 df                	jne    c0010fba <VgaText::clearScreen()+0x28>
c0010fdb:	46                   	inc    esi
c0010fdc:	eb d2                	jmp    c0010fb0 <VgaText::clearScreen()+0x1e>
c0010fde:	83 ec 0c             	sub    esp,0xc
c0010fe1:	53                   	push   ebx
c0010fe2:	e8 d9 fd ff ff       	call   c0010dc0 <VgaText::doUpdate()>
c0010fe7:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010fee:	83 c4 10             	add    esp,0x10
c0010ff1:	5b                   	pop    ebx
c0010ff2:	5e                   	pop    esi
c0010ff3:	5f                   	pop    edi
c0010ff4:	c3                   	ret    
c0010ff5:	90                   	nop

c0010ff6 <VgaText::putchar(char)>:
c0010ff6:	56                   	push   esi
c0010ff7:	53                   	push   ebx
c0010ff8:	83 ec 14             	sub    esp,0x14
c0010ffb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010fff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011003:	3c 5b                	cmp    al,0x5b
c0011005:	75 21                	jne    c0011028 <VgaText::putchar(char)+0x32>
c0011007:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001100e:	74 28                	je     c0011038 <VgaText::putchar(char)+0x42>
c0011010:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011019:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011023:	e9 e2 00 00 00       	jmp    c001110a <VgaText::putchar(char)+0x114>
c0011028:	3c 1b                	cmp    al,0x1b
c001102a:	75 0c                	jne    c0011038 <VgaText::putchar(char)+0x42>
c001102c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011033:	e9 d2 00 00 00       	jmp    c001110a <VgaText::putchar(char)+0x114>
c0011038:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001103e:	84 c9                	test   cl,cl
c0011040:	0f 84 ab 00 00 00    	je     c00110f1 <VgaText::putchar(char)+0xfb>
c0011046:	8d 50 c0             	lea    edx,[eax-0x40]
c0011049:	80 fa 3e             	cmp    dl,0x3e
c001104c:	0f 87 82 00 00 00    	ja     c00110d4 <VgaText::putchar(char)+0xde>
c0011052:	3c 6d                	cmp    al,0x6d
c0011054:	75 4d                	jne    c00110a3 <VgaText::putchar(char)+0xad>
c0011056:	31 f6                	xor    esi,esi
c0011058:	31 d2                	xor    edx,edx
c001105a:	31 c0                	xor    eax,eax
c001105c:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0011062:	7e 30                	jle    c0011094 <VgaText::putchar(char)+0x9e>
c0011064:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c001106c:	80 fa 3b             	cmp    dl,0x3b
c001106f:	75 17                	jne    c0011088 <VgaText::putchar(char)+0x92>
c0011071:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011075:	50                   	push   eax
c0011076:	53                   	push   ebx
c0011077:	e8 ee f5 ff ff       	call   c001066a <VgaText::doANSI_SGR(int)>
c001107c:	59                   	pop    ecx
c001107d:	31 d2                	xor    edx,edx
c001107f:	58                   	pop    eax
c0011080:	31 c0                	xor    eax,eax
c0011082:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011086:	eb 09                	jmp    c0011091 <VgaText::putchar(char)+0x9b>
c0011088:	6b c0 0a             	imul   eax,eax,0xa
c001108b:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001108f:	88 ca                	mov    dl,cl
c0011091:	46                   	inc    esi
c0011092:	eb c8                	jmp    c001105c <VgaText::putchar(char)+0x66>
c0011094:	84 d2                	test   dl,dl
c0011096:	74 31                	je     c00110c9 <VgaText::putchar(char)+0xd3>
c0011098:	50                   	push   eax
c0011099:	53                   	push   ebx
c001109a:	e8 cb f5 ff ff       	call   c001066a <VgaText::doANSI_SGR(int)>
c001109f:	58                   	pop    eax
c00110a0:	5a                   	pop    edx
c00110a1:	eb 26                	jmp    c00110c9 <VgaText::putchar(char)+0xd3>
c00110a3:	3c 4a                	cmp    al,0x4a
c00110a5:	75 22                	jne    c00110c9 <VgaText::putchar(char)+0xd3>
c00110a7:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110ae:	75 19                	jne    c00110c9 <VgaText::putchar(char)+0xd3>
c00110b0:	83 ec 0c             	sub    esp,0xc
c00110b3:	53                   	push   ebx
c00110b4:	e8 d9 fe ff ff       	call   c0010f92 <VgaText::clearScreen()>
c00110b9:	83 c4 0c             	add    esp,0xc
c00110bc:	6a 00                	push   0x0
c00110be:	6a 00                	push   0x0
c00110c0:	53                   	push   ebx
c00110c1:	e8 ac f7 ff ff       	call   c0010872 <VgaText::setCursor(int, int)>
c00110c6:	83 c4 10             	add    esp,0x10
c00110c9:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110d2:	eb 36                	jmp    c001110a <VgaText::putchar(char)+0x114>
c00110d4:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110da:	83 fa 0e             	cmp    edx,0xe
c00110dd:	7f 2b                	jg     c001110a <VgaText::putchar(char)+0x114>
c00110df:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110e2:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110e8:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110ef:	eb 19                	jmp    c001110a <VgaText::putchar(char)+0x114>
c00110f1:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110f7:	0f be c0             	movsx  eax,al
c00110fa:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011100:	50                   	push   eax
c0011101:	53                   	push   ebx
c0011102:	e8 ab fa ff ff       	call   c0010bb2 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011107:	83 c4 10             	add    esp,0x10
c001110a:	83 c4 14             	add    esp,0x14
c001110d:	5b                   	pop    ebx
c001110e:	5e                   	pop    esi
c001110f:	c3                   	ret    

c0011110 <VgaText::puts(char const*)>:
c0011110:	53                   	push   ebx
c0011111:	83 ec 08             	sub    esp,0x8
c0011114:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011118:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001111b:	84 c0                	test   al,al
c001111d:	74 12                	je     c0011131 <VgaText::puts(char const*)+0x21>
c001111f:	43                   	inc    ebx
c0011120:	51                   	push   ecx
c0011121:	51                   	push   ecx
c0011122:	50                   	push   eax
c0011123:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011127:	e8 ca fe ff ff       	call   c0010ff6 <VgaText::putchar(char)>
c001112c:	83 c4 10             	add    esp,0x10
c001112f:	eb e7                	jmp    c0011118 <VgaText::puts(char const*)+0x8>
c0011131:	83 c4 08             	add    esp,0x8
c0011134:	5b                   	pop    ebx
c0011135:	c3                   	ret    

c0011136 <VgaText::putx(unsigned int)>:
c0011136:	57                   	push   edi
c0011137:	b9 11 00 00 00       	mov    ecx,0x11
c001113c:	56                   	push   esi
c001113d:	be 8e a2 02 c0       	mov    esi,0xc002a28e
c0011142:	53                   	push   ebx
c0011143:	83 ec 20             	sub    esp,0x20
c0011146:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001114a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001114e:	fc                   	cld    
c001114f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011151:	be 08 00 00 00       	mov    esi,0x8
c0011156:	50                   	push   eax
c0011157:	50                   	push   eax
c0011158:	89 d8                	mov    eax,ebx
c001115a:	c1 e3 04             	shl    ebx,0x4
c001115d:	c1 e8 1c             	shr    eax,0x1c
c0011160:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011165:	50                   	push   eax
c0011166:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001116a:	e8 87 fe ff ff       	call   c0010ff6 <VgaText::putchar(char)>
c001116f:	83 c4 10             	add    esp,0x10
c0011172:	4e                   	dec    esi
c0011173:	75 e1                	jne    c0011156 <VgaText::putx(unsigned int)+0x20>
c0011175:	83 c4 20             	add    esp,0x20
c0011178:	5b                   	pop    ebx
c0011179:	5e                   	pop    esi
c001117a:	5f                   	pop    edi
c001117b:	c3                   	ret    

c001117c <VgaText::VgaText(char const*)>:
c001117c:	57                   	push   edi
c001117d:	56                   	push   esi
c001117e:	53                   	push   ebx
c001117f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011183:	83 ec 08             	sub    esp,0x8
c0011186:	6a 00                	push   0x0
c0011188:	50                   	push   eax
c0011189:	e8 6e 05 00 00       	call   c00116fc <UnixFile::UnixFile(int)>
c001118e:	83 c4 10             	add    esp,0x10
c0011191:	ba f4 a2 02 c0       	mov    edx,0xc002a2f4
c0011196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119a:	89 10                	mov    DWORD PTR [eax],edx
c001119c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a0:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ae:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111bc:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c7:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d2:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e0:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ee:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00111f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f9:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011204:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001120a:	bb 00 e3 02 c0       	mov    ebx,0xc002e300
c001120f:	b8 08 00 00 00       	mov    eax,0x8
c0011214:	fc                   	cld    
c0011215:	89 d7                	mov    edi,edx
c0011217:	89 de                	mov    esi,ebx
c0011219:	89 c1                	mov    ecx,eax
c001121b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001121d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011221:	05 1e 10 00 00       	add    eax,0x101e
c0011226:	83 ec 08             	sub    esp,0x8
c0011229:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001122d:	50                   	push   eax
c001122e:	e8 01 f6 fe ff       	call   c0000834 <strcpy>
c0011233:	83 c4 10             	add    esp,0x10
c0011236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123a:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011248:	83 c0 0c             	add    eax,0xc
c001124b:	83 ec 04             	sub    esp,0x4
c001124e:	68 00 0f 00 00       	push   0xf00
c0011253:	6a 00                	push   0x0
c0011255:	50                   	push   eax
c0011256:	e8 1d f5 fe ff       	call   c0000778 <memset>
c001125b:	83 c4 10             	add    esp,0x10
c001125e:	83 ec 04             	sub    esp,0x4
c0011261:	6a 00                	push   0x0
c0011263:	6a 07                	push   0x7
c0011265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011269:	e8 b4 f4 ff ff       	call   c0010722 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001126e:	83 c4 10             	add    esp,0x10
c0011271:	83 ec 08             	sub    esp,0x8
c0011274:	6a 02                	push   0x2
c0011276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001127a:	e8 49 fa ff ff       	call   c0010cc8 <VgaText::setCursorHeight(int)>
c001127f:	83 c4 10             	add    esp,0x10
c0011282:	83 ec 04             	sub    esp,0x4
c0011285:	6a 00                	push   0x0
c0011287:	6a 00                	push   0x0
c0011289:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001128d:	e8 e0 f5 ff ff       	call   c0010872 <VgaText::setCursor(int, int)>
c0011292:	83 c4 10             	add    esp,0x10
c0011295:	83 ec 08             	sub    esp,0x8
c0011298:	6a 01                	push   0x1
c001129a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001129e:	e8 7d f3 ff ff       	call   c0010620 <VgaText::showCursor(bool)>
c00112a3:	83 c4 10             	add    esp,0x10
c00112a6:	83 ec 08             	sub    esp,0x8
c00112a9:	6a 01                	push   0x1
c00112ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112af:	e8 7c f3 ff ff       	call   c0010630 <VgaText::disableBlink(bool)>
c00112b4:	83 c4 10             	add    esp,0x10
c00112b7:	83 ec 0c             	sub    esp,0xc
c00112ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112be:	e8 cf fc ff ff       	call   c0010f92 <VgaText::clearScreen()>
c00112c3:	83 c4 10             	add    esp,0x10
c00112c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ca:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d5:	05 9e 10 00 00       	add    eax,0x109e
c00112da:	83 ec 04             	sub    esp,0x4
c00112dd:	68 96 00 00 00       	push   0x96
c00112e2:	6a 00                	push   0x0
c00112e4:	50                   	push   eax
c00112e5:	e8 8e f4 fe ff       	call   c0000778 <memset>
c00112ea:	83 c4 10             	add    esp,0x10
c00112ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112f1:	05 34 11 00 00       	add    eax,0x1134
c00112f6:	83 ec 04             	sub    esp,0x4
c00112f9:	68 2c 01 00 00       	push   0x12c
c00112fe:	6a 00                	push   0x0
c0011300:	50                   	push   eax
c0011301:	e8 72 f4 fe ff       	call   c0000778 <memset>
c0011306:	83 c4 10             	add    esp,0x10
c0011309:	90                   	nop
c001130a:	5b                   	pop    ebx
c001130b:	5e                   	pop    esi
c001130c:	5f                   	pop    edi
c001130d:	c3                   	ret    

c001130e <VgaText::receiveKey(unsigned char)>:
c001130e:	55                   	push   ebp
c001130f:	57                   	push   edi
c0011310:	56                   	push   esi
c0011311:	53                   	push   ebx
c0011312:	83 ec 1c             	sub    esp,0x1c
c0011315:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011319:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001131d:	84 db                	test   bl,bl
c001131f:	0f 84 c9 00 00 00    	je     c00113ee <VgaText::receiveKey(unsigned char)+0xe0>
c0011325:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001132b:	80 fb 08             	cmp    bl,0x8
c001132e:	75 2c                	jne    c001135c <VgaText::receiveKey(unsigned char)+0x4e>
c0011330:	83 ec 0c             	sub    esp,0xc
c0011333:	57                   	push   edi
c0011334:	e8 5b f4 fe ff       	call   c0000794 <strlen>
c0011339:	83 c4 10             	add    esp,0x10
c001133c:	85 c0                	test   eax,eax
c001133e:	74 41                	je     c0011381 <VgaText::receiveKey(unsigned char)+0x73>
c0011340:	50                   	push   eax
c0011341:	50                   	push   eax
c0011342:	6a 08                	push   0x8
c0011344:	56                   	push   esi
c0011345:	e8 ac fc ff ff       	call   c0010ff6 <VgaText::putchar(char)>
c001134a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001134d:	e8 42 f4 fe ff       	call   c0000794 <strlen>
c0011352:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001135a:	eb 22                	jmp    c001137e <VgaText::receiveKey(unsigned char)+0x70>
c001135c:	0f be c3             	movsx  eax,bl
c001135f:	52                   	push   edx
c0011360:	52                   	push   edx
c0011361:	50                   	push   eax
c0011362:	56                   	push   esi
c0011363:	e8 8e fc ff ff       	call   c0010ff6 <VgaText::putchar(char)>
c0011368:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001136c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011371:	59                   	pop    ecx
c0011372:	5d                   	pop    ebp
c0011373:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011377:	50                   	push   eax
c0011378:	57                   	push   edi
c0011379:	e8 f6 f5 fe ff       	call   c0000974 <strcat>
c001137e:	83 c4 10             	add    esp,0x10
c0011381:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011388:	75 05                	jne    c001138f <VgaText::receiveKey(unsigned char)+0x81>
c001138a:	80 fb 0a             	cmp    bl,0xa
c001138d:	75 53                	jne    c00113e2 <VgaText::receiveKey(unsigned char)+0xd4>
c001138f:	83 ec 0c             	sub    esp,0xc
c0011392:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0011398:	53                   	push   ebx
c0011399:	e8 f6 f3 fe ff       	call   c0000794 <strlen>
c001139e:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113a1:	89 c5                	mov    ebp,eax
c00113a3:	e8 ec f3 fe ff       	call   c0000794 <strlen>
c00113a8:	83 c4 10             	add    esp,0x10
c00113ab:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113af:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113b4:	76 10                	jbe    c00113c6 <VgaText::receiveKey(unsigned char)+0xb8>
c00113b6:	83 ec 0c             	sub    esp,0xc
c00113b9:	68 9f a2 02 c0       	push   0xc002a29f
c00113be:	e8 b4 90 00 00       	call   c001a477 <Krnl::panic(char const*)>
c00113c3:	83 c4 10             	add    esp,0x10
c00113c6:	50                   	push   eax
c00113c7:	50                   	push   eax
c00113c8:	57                   	push   edi
c00113c9:	53                   	push   ebx
c00113ca:	e8 a5 f5 fe ff       	call   c0000974 <strcat>
c00113cf:	83 c4 0c             	add    esp,0xc
c00113d2:	68 96 00 00 00       	push   0x96
c00113d7:	6a 00                	push   0x0
c00113d9:	57                   	push   edi
c00113da:	e8 99 f3 fe ff       	call   c0000778 <memset>
c00113df:	83 c4 10             	add    esp,0x10
c00113e2:	83 ec 0c             	sub    esp,0xc
c00113e5:	56                   	push   esi
c00113e6:	e8 d5 f9 ff ff       	call   c0010dc0 <VgaText::doUpdate()>
c00113eb:	83 c4 10             	add    esp,0x10
c00113ee:	83 c4 1c             	add    esp,0x1c
c00113f1:	5b                   	pop    ebx
c00113f2:	5e                   	pop    esi
c00113f3:	5f                   	pop    edi
c00113f4:	5d                   	pop    ebp
c00113f5:	c3                   	ret    

c00113f6 <VgaText::write(unsigned long long, void*, int*)>:
c00113f6:	55                   	push   ebp
c00113f7:	57                   	push   edi
c00113f8:	56                   	push   esi
c00113f9:	53                   	push   ebx
c00113fa:	83 ec 0c             	sub    esp,0xc
c00113fd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011401:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011405:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011409:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011410:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011413:	39 eb                	cmp    ebx,ebp
c0011415:	74 13                	je     c001142a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011417:	43                   	inc    ebx
c0011418:	50                   	push   eax
c0011419:	50                   	push   eax
c001141a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001141e:	50                   	push   eax
c001141f:	56                   	push   esi
c0011420:	e8 d1 fb ff ff       	call   c0010ff6 <VgaText::putchar(char)>
c0011425:	83 c4 10             	add    esp,0x10
c0011428:	eb e9                	jmp    c0011413 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001142a:	83 ec 0c             	sub    esp,0xc
c001142d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011434:	56                   	push   esi
c0011435:	e8 86 f9 ff ff       	call   c0010dc0 <VgaText::doUpdate()>
c001143a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001143e:	89 38                	mov    DWORD PTR [eax],edi
c0011440:	83 c4 1c             	add    esp,0x1c
c0011443:	31 c0                	xor    eax,eax
c0011445:	5b                   	pop    ebx
c0011446:	5e                   	pop    esi
c0011447:	5f                   	pop    edi
c0011448:	5d                   	pop    ebp
c0011449:	c3                   	ret    

c001144a <newTerminal(char*)>:
c001144a:	83 ec 28             	sub    esp,0x28
c001144d:	68 60 12 00 00       	push   0x1260
c0011452:	e8 ec e3 ff ff       	call   c000f843 <malloc>
c0011457:	5a                   	pop    edx
c0011458:	59                   	pop    ecx
c0011459:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001145d:	50                   	push   eax
c001145e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011462:	e8 15 fd ff ff       	call   c001117c <VgaText::VgaText(char const*)>
c0011467:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001146b:	83 c4 2c             	add    esp,0x2c
c001146e:	c3                   	ret    
c001146f:	90                   	nop

c0011470 <TSS::TSS()>:
c0011470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011474:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001147b:	90                   	nop
c001147c:	c3                   	ret    
c001147d:	90                   	nop

c001147e <TSS::setESP(unsigned long)>:
c001147e:	55                   	push   ebp
c001147f:	89 e5                	mov    ebp,esp
c0011481:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011484:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011487:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001148a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001148d:	90                   	nop
c001148e:	5d                   	pop    ebp
c001148f:	c3                   	ret    

c0011490 <TSS::flush()>:
c0011490:	55                   	push   ebp
c0011491:	89 e5                	mov    ebp,esp
c0011493:	83 ec 10             	sub    esp,0x10
c0011496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011499:	8b 00                	mov    eax,DWORD PTR [eax]
c001149b:	83 c8 03             	or     eax,0x3
c001149e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114a2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114a6:	66 89 d0             	mov    ax,dx
c00114a9:	0f 00 d8             	ltr    ax
c00114ac:	90                   	nop
c00114ad:	c9                   	leave  
c00114ae:	c3                   	ret    
c00114af:	90                   	nop

c00114b0 <TSS::setup(unsigned long, unsigned long)>:
c00114b0:	55                   	push   ebp
c00114b1:	89 e5                	mov    ebp,esp
c00114b3:	83 ec 18             	sub    esp,0x18
c00114b6:	83 ec 0c             	sub    esp,0xc
c00114b9:	6a 68                	push   0x68
c00114bb:	e8 83 e3 ff ff       	call   c000f843 <malloc>
c00114c0:	83 c4 10             	add    esp,0x10
c00114c3:	89 c2                	mov    edx,eax
c00114c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d1:	83 ec 04             	sub    esp,0x4
c00114d4:	6a 68                	push   0x68
c00114d6:	6a 00                	push   0x0
c00114d8:	50                   	push   eax
c00114d9:	e8 9a f2 fe ff       	call   c0000778 <memset>
c00114de:	83 c4 10             	add    esp,0x10
c00114e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00114f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011502:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011508:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001150b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011514:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011517:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001151d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011520:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011523:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011538:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011547:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001154d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011553:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011556:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011562:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011575:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011578:	0f 20 da             	mov    edx,cr3
c001157b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001157e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011581:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011587:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158a:	83 ec 08             	sub    esp,0x8
c001158d:	50                   	push   eax
c001158e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011591:	50                   	push   eax
c0011592:	e8 87 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c0011597:	83 c4 10             	add    esp,0x10
c001159a:	83 ec 08             	sub    esp,0x8
c001159d:	6a 68                	push   0x68
c001159f:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115a2:	50                   	push   eax
c00115a3:	e8 92 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115a8:	83 c4 10             	add    esp,0x10
c00115ab:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115af:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115b2:	83 e0 0f             	and    eax,0xf
c00115b5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115b8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115bb:	83 c8 40             	or     eax,0x40
c00115be:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115c1:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00115c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115cc:	05 78 01 00 00       	add    eax,0x178
c00115d1:	83 ec 04             	sub    esp,0x4
c00115d4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115d7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115da:	50                   	push   eax
c00115db:	e8 8e da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c00115e0:	83 c4 10             	add    esp,0x10
c00115e3:	89 c2                	mov    edx,eax
c00115e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e8:	89 10                	mov    DWORD PTR [eax],edx
c00115ea:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00115ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115f5:	05 78 01 00 00       	add    eax,0x178
c00115fa:	83 ec 0c             	sub    esp,0xc
c00115fd:	50                   	push   eax
c00115fe:	e8 af da ff ff       	call   c000f0b2 <GDT::flush()>
c0011603:	83 c4 10             	add    esp,0x10
c0011606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011609:	8b 00                	mov    eax,DWORD PTR [eax]
c001160b:	83 ec 08             	sub    esp,0x8
c001160e:	50                   	push   eax
c001160f:	68 08 a3 02 c0       	push   0xc002a308
c0011614:	e8 83 17 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0011619:	83 c4 10             	add    esp,0x10
c001161c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001161f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011621:	c9                   	leave  
c0011622:	c3                   	ret    
c0011623:	90                   	nop

c0011624 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011628:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001162c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001162f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011634:	75 08                	jne    c001163e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011636:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001163c:	eb 38                	jmp    c0011676 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001163e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011643:	75 17                	jne    c001165c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011645:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001164a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001164d:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c0011653:	8b 10                	mov    edx,DWORD PTR [eax]
c0011655:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011659:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001165c:	89 c1                	mov    ecx,eax
c001165e:	83 e1 fd             	and    ecx,0xfffffffd
c0011661:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011667:	74 cd                	je     c0011636 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011669:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001166e:	83 e0 ef             	and    eax,0xffffffef
c0011671:	83 f8 08             	cmp    eax,0x8
c0011674:	76 c0                	jbe    c0011636 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011676:	31 c0                	xor    eax,eax
c0011678:	c3                   	ret    
c0011679:	90                   	nop

c001167a <ReservedFilename::isAtty()>:
c001167a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001167e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011681:	31 c0                	xor    eax,eax
c0011683:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011689:	74 09                	je     c0011694 <ReservedFilename::isAtty()+0x1a>
c001168b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011691:	0f 94 c0             	sete   al
c0011694:	c3                   	ret    
c0011695:	90                   	nop

c0011696 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001169a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001169e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116a5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116aa:	75 08                	jne    c00116b4 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116ac:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116b2:	eb 3d                	jmp    c00116f1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116b4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116b9:	75 17                	jne    c00116d2 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116c3:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c00116c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00116cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116cf:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116d2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116d7:	75 04                	jne    c00116dd <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116d9:	89 0a                	mov    DWORD PTR [edx],ecx
c00116db:	eb 14                	jmp    c00116f1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116dd:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116e2:	74 c8                	je     c00116ac <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116e4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116e9:	83 e0 ef             	and    eax,0xffffffef
c00116ec:	83 f8 08             	cmp    eax,0x8
c00116ef:	76 bb                	jbe    c00116ac <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116f1:	31 c0                	xor    eax,eax
c00116f3:	c3                   	ret    

c00116f4 <UnixFile::getFileDescriptor()>:
c00116f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116fb:	c3                   	ret    

c00116fc <UnixFile::UnixFile(int)>:
c00116fc:	53                   	push   ebx
c00116fd:	83 ec 28             	sub    esp,0x28
c0011700:	ba f4 a3 02 c0       	mov    edx,0xc002a3f4
c0011705:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011709:	89 10                	mov    DWORD PTR [eax],edx
c001170b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011713:	0f 8f 8c 01 00 00    	jg     c00118a5 <UnixFile::UnixFile(int)+0x1a9>
c0011719:	a1 e0 d1 02 c0       	mov    eax,ds:0xc002d1e0
c001171e:	8d 50 01             	lea    edx,[eax+0x1]
c0011721:	89 15 e0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1e0,edx
c0011727:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001172b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001172e:	83 ec 08             	sub    esp,0x8
c0011731:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011735:	68 b8 e3 02 c0       	push   0xc002e3b8
c001173a:	e8 b1 6e 01 00       	call   c00285f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001173f:	83 c4 10             	add    esp,0x10
c0011742:	a0 b4 e3 02 c0       	mov    al,ds:0xc002e3b4
c0011747:	83 f0 01             	xor    eax,0x1
c001174a:	84 c0                	test   al,al
c001174c:	0f 84 54 01 00 00    	je     c00118a6 <UnixFile::UnixFile(int)+0x1aa>
c0011752:	c6 05 b4 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e3b4,0x1
c0011759:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011761:	83 ec 0c             	sub    esp,0xc
c0011764:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011768:	e8 d6 e0 ff ff       	call   c000f843 <malloc>
c001176d:	83 c4 10             	add    esp,0x10
c0011770:	89 c3                	mov    ebx,eax
c0011772:	83 ec 08             	sub    esp,0x8
c0011775:	68 03 ff ff 0f       	push   0xfffff03
c001177a:	53                   	push   ebx
c001177b:	e8 2c 01 00 00       	call   c00118ac <ReservedFilename::ReservedFilename(int)>
c0011780:	83 c4 10             	add    esp,0x10
c0011783:	89 1d ac e3 02 c0    	mov    DWORD PTR ds:0xc002e3ac,ebx
c0011789:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011791:	83 ec 0c             	sub    esp,0xc
c0011794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011798:	e8 a6 e0 ff ff       	call   c000f843 <malloc>
c001179d:	83 c4 10             	add    esp,0x10
c00117a0:	89 c3                	mov    ebx,eax
c00117a2:	83 ec 08             	sub    esp,0x8
c00117a5:	68 01 ff ff 0f       	push   0xfffff01
c00117aa:	53                   	push   ebx
c00117ab:	e8 fc 00 00 00       	call   c00118ac <ReservedFilename::ReservedFilename(int)>
c00117b0:	83 c4 10             	add    esp,0x10
c00117b3:	89 1d b0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3b0,ebx
c00117b9:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117c1:	83 ec 0c             	sub    esp,0xc
c00117c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117c8:	e8 76 e0 ff ff       	call   c000f843 <malloc>
c00117cd:	83 c4 10             	add    esp,0x10
c00117d0:	89 c3                	mov    ebx,eax
c00117d2:	83 ec 08             	sub    esp,0x8
c00117d5:	68 00 ff ff 0f       	push   0xfffff00
c00117da:	53                   	push   ebx
c00117db:	e8 cc 00 00 00       	call   c00118ac <ReservedFilename::ReservedFilename(int)>
c00117e0:	83 c4 10             	add    esp,0x10
c00117e3:	89 1d a4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a4,ebx
c00117e9:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117f1:	83 ec 0c             	sub    esp,0xc
c00117f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00117f8:	e8 46 e0 ff ff       	call   c000f843 <malloc>
c00117fd:	83 c4 10             	add    esp,0x10
c0011800:	89 c3                	mov    ebx,eax
c0011802:	83 ec 08             	sub    esp,0x8
c0011805:	68 02 ff ff 0f       	push   0xfffff02
c001180a:	53                   	push   ebx
c001180b:	e8 9c 00 00 00       	call   c00118ac <ReservedFilename::ReservedFilename(int)>
c0011810:	83 c4 10             	add    esp,0x10
c0011813:	89 1d a8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a8,ebx
c0011819:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011821:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011826:	7f 7e                	jg     c00118a6 <UnixFile::UnixFile(int)+0x1aa>
c0011828:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011830:	83 ec 0c             	sub    esp,0xc
c0011833:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011837:	e8 07 e0 ff ff       	call   c000f843 <malloc>
c001183c:	83 c4 10             	add    esp,0x10
c001183f:	89 c3                	mov    ebx,eax
c0011841:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011845:	05 10 ff ff 0f       	add    eax,0xfffff10
c001184a:	83 ec 08             	sub    esp,0x8
c001184d:	50                   	push   eax
c001184e:	53                   	push   ebx
c001184f:	e8 58 00 00 00       	call   c00118ac <ReservedFilename::ReservedFilename(int)>
c0011854:	83 c4 10             	add    esp,0x10
c0011857:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001185b:	89 1c 85 80 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1c80],ebx
c0011862:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001186a:	83 ec 0c             	sub    esp,0xc
c001186d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011871:	e8 cd df ff ff       	call   c000f843 <malloc>
c0011876:	83 c4 10             	add    esp,0x10
c0011879:	89 c3                	mov    ebx,eax
c001187b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001187f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011884:	83 ec 08             	sub    esp,0x8
c0011887:	50                   	push   eax
c0011888:	53                   	push   ebx
c0011889:	e8 1e 00 00 00       	call   c00118ac <ReservedFilename::ReservedFilename(int)>
c001188e:	83 c4 10             	add    esp,0x10
c0011891:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011895:	89 1c 85 40 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1cc0],ebx
c001189c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118a0:	e9 7c ff ff ff       	jmp    c0011821 <UnixFile::UnixFile(int)+0x125>
c00118a5:	90                   	nop
c00118a6:	83 c4 28             	add    esp,0x28
c00118a9:	5b                   	pop    ebx
c00118aa:	c3                   	ret    
c00118ab:	90                   	nop

c00118ac <ReservedFilename::ReservedFilename(int)>:
c00118ac:	83 ec 0c             	sub    esp,0xc
c00118af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b3:	83 ec 08             	sub    esp,0x8
c00118b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ba:	50                   	push   eax
c00118bb:	e8 3c fe ff ff       	call   c00116fc <UnixFile::UnixFile(int)>
c00118c0:	83 c4 10             	add    esp,0x10
c00118c3:	ba 10 a4 02 c0       	mov    edx,0xc002a410
c00118c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118cc:	89 10                	mov    DWORD PTR [eax],edx
c00118ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118d6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118d9:	90                   	nop
c00118da:	83 c4 0c             	add    esp,0xc
c00118dd:	c3                   	ret    

c00118de <UnixFile::~UnixFile()>:
c00118de:	83 ec 1c             	sub    esp,0x1c
c00118e1:	ba f4 a3 02 c0       	mov    edx,0xc002a3f4
c00118e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118ea:	89 10                	mov    DWORD PTR [eax],edx
c00118ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118f3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00118f8:	7f 73                	jg     c001196d <UnixFile::~UnixFile()+0x8f>
c00118fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011902:	83 ec 0c             	sub    esp,0xc
c0011905:	68 b8 e3 02 c0       	push   0xc002e3b8
c001190a:	e8 b5 6d 01 00       	call   c00286c4 <LinkedList<UnixFile>::getFirstElement()>
c001190f:	83 c4 10             	add    esp,0x10
c0011912:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011916:	83 ec 0c             	sub    esp,0xc
c0011919:	68 b8 e3 02 c0       	push   0xc002e3b8
c001191e:	e8 a9 6d 01 00       	call   c00286cc <LinkedList<UnixFile>::removeFirst()>
c0011923:	83 c4 10             	add    esp,0x10
c0011926:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001192a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001192e:	74 40                	je     c0011970 <UnixFile::~UnixFile()+0x92>
c0011930:	83 ec 08             	sub    esp,0x8
c0011933:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011937:	68 b8 e3 02 c0       	push   0xc002e3b8
c001193c:	e8 af 6c 01 00       	call   c00285f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011941:	83 c4 10             	add    esp,0x10
c0011944:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011948:	8d 50 01             	lea    edx,[eax+0x1]
c001194b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001194f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011954:	0f 94 c0             	sete   al
c0011957:	84 c0                	test   al,al
c0011959:	74 a7                	je     c0011902 <UnixFile::~UnixFile()+0x24>
c001195b:	83 ec 0c             	sub    esp,0xc
c001195e:	68 cc a3 02 c0       	push   0xc002a3cc
c0011963:	e8 0f 8b 00 00       	call   c001a477 <Krnl::panic(char const*)>
c0011968:	83 c4 10             	add    esp,0x10
c001196b:	eb 95                	jmp    c0011902 <UnixFile::~UnixFile()+0x24>
c001196d:	90                   	nop
c001196e:	eb 01                	jmp    c0011971 <UnixFile::~UnixFile()+0x93>
c0011970:	90                   	nop
c0011971:	90                   	nop
c0011972:	83 c4 1c             	add    esp,0x1c
c0011975:	c3                   	ret    

c0011976 <UnixFile::~UnixFile()>:
c0011976:	83 ec 0c             	sub    esp,0xc
c0011979:	83 ec 0c             	sub    esp,0xc
c001197c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011980:	e8 59 ff ff ff       	call   c00118de <UnixFile::~UnixFile()>
c0011985:	83 c4 10             	add    esp,0x10
c0011988:	83 ec 08             	sub    esp,0x8
c001198b:	6a 0c                	push   0xc
c001198d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011991:	e8 26 13 00 00       	call   c0012cbc <operator delete(void*, unsigned long)>
c0011996:	83 c4 10             	add    esp,0x10
c0011999:	83 c4 0c             	add    esp,0xc
c001199c:	c3                   	ret    
c001199d:	90                   	nop

c001199e <ReservedFilename::~ReservedFilename()>:
c001199e:	83 ec 0c             	sub    esp,0xc
c00119a1:	ba 10 a4 02 c0       	mov    edx,0xc002a410
c00119a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119aa:	89 10                	mov    DWORD PTR [eax],edx
c00119ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119b0:	83 ec 0c             	sub    esp,0xc
c00119b3:	50                   	push   eax
c00119b4:	e8 25 ff ff ff       	call   c00118de <UnixFile::~UnixFile()>
c00119b9:	83 c4 10             	add    esp,0x10
c00119bc:	90                   	nop
c00119bd:	83 c4 0c             	add    esp,0xc
c00119c0:	c3                   	ret    
c00119c1:	90                   	nop

c00119c2 <ReservedFilename::~ReservedFilename()>:
c00119c2:	83 ec 0c             	sub    esp,0xc
c00119c5:	83 ec 0c             	sub    esp,0xc
c00119c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119cc:	e8 cd ff ff ff       	call   c001199e <ReservedFilename::~ReservedFilename()>
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	83 ec 08             	sub    esp,0x8
c00119d7:	6a 0c                	push   0xc
c00119d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119dd:	e8 da 12 00 00       	call   c0012cbc <operator delete(void*, unsigned long)>
c00119e2:	83 c4 10             	add    esp,0x10
c00119e5:	83 c4 0c             	add    esp,0xc
c00119e8:	c3                   	ret    

c00119e9 <getFromFileDescriptor(int)>:
c00119e9:	53                   	push   ebx
c00119ea:	83 ec 08             	sub    esp,0x8
c00119ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119f1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00119f7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00119fd:	7f 2c                	jg     c0011a2b <getFromFileDescriptor(int)+0x42>
c00119ff:	83 ec 0c             	sub    esp,0xc
c0011a02:	68 b8 e3 02 c0       	push   0xc002e3b8
c0011a07:	e8 b8 6c 01 00       	call   c00286c4 <LinkedList<UnixFile>::getFirstElement()>
c0011a0c:	83 c4 10             	add    esp,0x10
c0011a0f:	85 c0                	test   eax,eax
c0011a11:	75 04                	jne    c0011a17 <getFromFileDescriptor(int)+0x2e>
c0011a13:	31 c0                	xor    eax,eax
c0011a15:	eb 6e                	jmp    c0011a85 <getFromFileDescriptor(int)+0x9c>
c0011a17:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a1a:	74 69                	je     c0011a85 <getFromFileDescriptor(int)+0x9c>
c0011a1c:	52                   	push   edx
c0011a1d:	52                   	push   edx
c0011a1e:	50                   	push   eax
c0011a1f:	68 b8 e3 02 c0       	push   0xc002e3b8
c0011a24:	e8 45 6d 01 00       	call   c002876e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a29:	eb e1                	jmp    c0011a0c <getFromFileDescriptor(int)+0x23>
c0011a2b:	a1 ac e3 02 c0       	mov    eax,ds:0xc002e3ac
c0011a30:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a36:	74 4d                	je     c0011a85 <getFromFileDescriptor(int)+0x9c>
c0011a38:	a1 b0 e3 02 c0       	mov    eax,ds:0xc002e3b0
c0011a3d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a43:	74 40                	je     c0011a85 <getFromFileDescriptor(int)+0x9c>
c0011a45:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0011a4a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a50:	74 33                	je     c0011a85 <getFromFileDescriptor(int)+0x9c>
c0011a52:	a1 a4 e3 02 c0       	mov    eax,ds:0xc002e3a4
c0011a57:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a5d:	74 26                	je     c0011a85 <getFromFileDescriptor(int)+0x9c>
c0011a5f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a65:	83 f8 08             	cmp    eax,0x8
c0011a68:	77 09                	ja     c0011a73 <getFromFileDescriptor(int)+0x8a>
c0011a6a:	8b 04 85 80 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c80]
c0011a71:	eb 12                	jmp    c0011a85 <getFromFileDescriptor(int)+0x9c>
c0011a73:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a79:	83 fb 08             	cmp    ebx,0x8
c0011a7c:	77 95                	ja     c0011a13 <getFromFileDescriptor(int)+0x2a>
c0011a7e:	8b 04 9d 40 e3 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1cc0]
c0011a85:	83 c4 08             	add    esp,0x8
c0011a88:	5b                   	pop    ebx
c0011a89:	c3                   	ret    

c0011a8a <__static_initialization_and_destruction_0(int, int)>:
c0011a8a:	83 ec 0c             	sub    esp,0xc
c0011a8d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a92:	75 34                	jne    c0011ac8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a94:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a9c:	75 2a                	jne    c0011ac8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a9e:	83 ec 0c             	sub    esp,0xc
c0011aa1:	68 b8 e3 02 c0       	push   0xc002e3b8
c0011aa6:	e8 ed 6a 01 00       	call   c0028598 <LinkedList<UnixFile>::LinkedList()>
c0011aab:	83 c4 10             	add    esp,0x10
c0011aae:	83 ec 04             	sub    esp,0x4
c0011ab1:	68 74 d1 02 c0       	push   0xc002d174
c0011ab6:	68 b8 e3 02 c0       	push   0xc002e3b8
c0011abb:	68 96 85 02 c0       	push   0xc0028596
c0011ac0:	e8 71 11 00 00       	call   c0012c36 <__cxa_atexit>
c0011ac5:	83 c4 10             	add    esp,0x10
c0011ac8:	90                   	nop
c0011ac9:	83 c4 0c             	add    esp,0xc
c0011acc:	c3                   	ret    

c0011acd <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011acd:	83 ec 0c             	sub    esp,0xc
c0011ad0:	83 ec 08             	sub    esp,0x8
c0011ad3:	68 ff ff 00 00       	push   0xffff
c0011ad8:	6a 01                	push   0x1
c0011ada:	e8 ab ff ff ff       	call   c0011a8a <__static_initialization_and_destruction_0(int, int)>
c0011adf:	83 c4 10             	add    esp,0x10
c0011ae2:	83 c4 0c             	add    esp,0xc
c0011ae5:	c3                   	ret    

c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011ae6:	53                   	push   ebx
c0011ae7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011aeb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011aef:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011af5:	89 c8                	mov    eax,ecx
c0011af7:	d1 e8                	shr    eax,1
c0011af9:	03 05 e8 d1 02 c0    	add    eax,DWORD PTR ds:0xc002d1e8
c0011aff:	83 e1 01             	and    ecx,0x1
c0011b02:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b04:	75 09                	jne    c0011b0f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b06:	83 e2 f0             	and    edx,0xfffffff0
c0011b09:	09 da                	or     edx,ebx
c0011b0b:	88 10                	mov    BYTE PTR [eax],dl
c0011b0d:	5b                   	pop    ebx
c0011b0e:	c3                   	ret    
c0011b0f:	c1 e3 04             	shl    ebx,0x4
c0011b12:	83 e2 0f             	and    edx,0xf
c0011b15:	09 da                	or     edx,ebx
c0011b17:	88 10                	mov    BYTE PTR [eax],dl
c0011b19:	5b                   	pop    ebx
c0011b1a:	c3                   	ret    

c0011b1b <Virt::getPageState(unsigned long)>:
c0011b1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b1f:	8b 0d e8 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1e8
c0011b25:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b2b:	89 d0                	mov    eax,edx
c0011b2d:	d1 e8                	shr    eax,1
c0011b2f:	83 e2 01             	and    edx,0x1
c0011b32:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b35:	75 04                	jne    c0011b3b <Virt::getPageState(unsigned long)+0x20>
c0011b37:	83 e0 0f             	and    eax,0xf
c0011b3a:	c3                   	ret    
c0011b3b:	c0 e8 04             	shr    al,0x4
c0011b3e:	c3                   	ret    

c0011b3f <Virt::allocateKernelVirtualPages(int)>:
c0011b3f:	55                   	push   ebp
c0011b40:	31 ed                	xor    ebp,ebp
c0011b42:	57                   	push   edi
c0011b43:	56                   	push   esi
c0011b44:	53                   	push   ebx
c0011b45:	31 db                	xor    ebx,ebx
c0011b47:	83 ec 1c             	sub    esp,0x1c
c0011b4a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b4e:	8b 3d e4 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d1e4
c0011b54:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b59:	57                   	push   edi
c0011b5a:	e8 bc ff ff ff       	call   c0011b1b <Virt::getPageState(unsigned long)>
c0011b5f:	5a                   	pop    edx
c0011b60:	84 c0                	test   al,al
c0011b62:	75 3a                	jne    c0011b9e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b64:	85 db                	test   ebx,ebx
c0011b66:	75 02                	jne    c0011b6a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b68:	89 fd                	mov    ebp,edi
c0011b6a:	43                   	inc    ebx
c0011b6b:	39 f3                	cmp    ebx,esi
c0011b6d:	74 5a                	je     c0011bc9 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b6f:	47                   	inc    edi
c0011b70:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b76:	76 31                	jbe    c0011ba9 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b78:	c7 05 e4 d1 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d1e4,0xc8000
c0011b82:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b87:	75 28                	jne    c0011bb1 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b89:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b8e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b93:	57                   	push   edi
c0011b94:	e8 82 ff ff ff       	call   c0011b1b <Virt::getPageState(unsigned long)>
c0011b99:	5a                   	pop    edx
c0011b9a:	84 c0                	test   al,al
c0011b9c:	74 c6                	je     c0011b64 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011b9e:	31 db                	xor    ebx,ebx
c0011ba0:	47                   	inc    edi
c0011ba1:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011ba7:	77 cf                	ja     c0011b78 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011ba9:	89 3d e4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1e4,edi
c0011baf:	eb a8                	jmp    c0011b59 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bb1:	83 ec 0c             	sub    esp,0xc
c0011bb4:	68 24 a4 02 c0       	push   0xc002a424
c0011bb9:	e8 b9 88 00 00       	call   c001a477 <Krnl::panic(char const*)>
c0011bbe:	8b 3d e4 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d1e4
c0011bc4:	83 c4 10             	add    esp,0x10
c0011bc7:	eb 90                	jmp    c0011b59 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bc9:	89 2d e4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1e4,ebp
c0011bcf:	4b                   	dec    ebx
c0011bd0:	74 5f                	je     c0011c31 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bd2:	85 f6                	test   esi,esi
c0011bd4:	74 3d                	je     c0011c13 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bd6:	89 e8                	mov    eax,ebp
c0011bd8:	31 db                	xor    ebx,ebx
c0011bda:	8d 7e ff             	lea    edi,[esi-0x1]
c0011bdd:	eb 14                	jmp    c0011bf3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011bdf:	6a 01                	push   0x1
c0011be1:	43                   	inc    ebx
c0011be2:	50                   	push   eax
c0011be3:	e8 fe fe ff ff       	call   c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011be8:	58                   	pop    eax
c0011be9:	39 f3                	cmp    ebx,esi
c0011beb:	5a                   	pop    edx
c0011bec:	74 25                	je     c0011c13 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bee:	a1 e4 d1 02 c0       	mov    eax,ds:0xc002d1e4
c0011bf3:	8d 50 01             	lea    edx,[eax+0x1]
c0011bf6:	85 db                	test   ebx,ebx
c0011bf8:	89 15 e4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1e4,edx
c0011bfe:	74 20                	je     c0011c20 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c00:	39 df                	cmp    edi,ebx
c0011c02:	75 db                	jne    c0011bdf <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c04:	6a 03                	push   0x3
c0011c06:	43                   	inc    ebx
c0011c07:	50                   	push   eax
c0011c08:	e8 d9 fe ff ff       	call   c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c0d:	59                   	pop    ecx
c0011c0e:	39 f3                	cmp    ebx,esi
c0011c10:	58                   	pop    eax
c0011c11:	75 db                	jne    c0011bee <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c13:	83 c4 1c             	add    esp,0x1c
c0011c16:	89 e8                	mov    eax,ebp
c0011c18:	5b                   	pop    ebx
c0011c19:	c1 e0 0c             	shl    eax,0xc
c0011c1c:	5e                   	pop    esi
c0011c1d:	5f                   	pop    edi
c0011c1e:	5d                   	pop    ebp
c0011c1f:	c3                   	ret    
c0011c20:	6a 02                	push   0x2
c0011c22:	bb 01 00 00 00       	mov    ebx,0x1
c0011c27:	50                   	push   eax
c0011c28:	e8 b9 fe ff ff       	call   c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c2d:	58                   	pop    eax
c0011c2e:	5a                   	pop    edx
c0011c2f:	eb bd                	jmp    c0011bee <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c31:	6a 04                	push   0x4
c0011c33:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c36:	55                   	push   ebp
c0011c37:	a3 e4 d1 02 c0       	mov    ds:0xc002d1e4,eax
c0011c3c:	e8 a5 fe ff ff       	call   c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c41:	59                   	pop    ecx
c0011c42:	89 e8                	mov    eax,ebp
c0011c44:	5b                   	pop    ebx
c0011c45:	c1 e0 0c             	shl    eax,0xc
c0011c48:	83 c4 1c             	add    esp,0x1c
c0011c4b:	5b                   	pop    ebx
c0011c4c:	5e                   	pop    esi
c0011c4d:	5f                   	pop    edi
c0011c4e:	5d                   	pop    ebp
c0011c4f:	c3                   	ret    

c0011c50 <Virt::freeSwapfilePage(unsigned long)>:
c0011c50:	53                   	push   ebx
c0011c51:	8b 15 c8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3c8
c0011c57:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c5b:	b8 01 00 00 00       	mov    eax,0x1
c0011c60:	89 cb                	mov    ebx,ecx
c0011c62:	d3 e0                	shl    eax,cl
c0011c64:	c1 eb 05             	shr    ebx,0x5
c0011c67:	f7 d0                	not    eax
c0011c69:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011c6c:	5b                   	pop    ebx
c0011c6d:	c3                   	ret    

c0011c6e <Virt::swapIDToSector(unsigned long)>:
c0011c6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c72:	0f af 05 ec d1 02 c0 	imul   eax,DWORD PTR ds:0xc002d1ec
c0011c79:	03 05 f4 d1 02 c0    	add    eax,DWORD PTR ds:0xc002d1f4
c0011c7f:	c3                   	ret    

c0011c80 <Virt::allocateSwapfilePage()>:
c0011c80:	55                   	push   ebp
c0011c81:	31 d2                	xor    edx,edx
c0011c83:	57                   	push   edi
c0011c84:	56                   	push   esi
c0011c85:	53                   	push   ebx
c0011c86:	83 ec 0c             	sub    esp,0xc
c0011c89:	8b 0d ec d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1ec
c0011c8f:	a1 f0 d1 02 c0       	mov    eax,ds:0xc002d1f0
c0011c94:	f7 f1                	div    ecx
c0011c96:	39 0d f0 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1f0,ecx
c0011c9c:	72 2d                	jb     c0011ccb <Virt::allocateSwapfilePage()+0x4b>
c0011c9e:	8b 35 c8 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3c8
c0011ca4:	8b 16                	mov    edx,DWORD PTR [esi]
c0011ca6:	f6 c2 01             	test   dl,0x1
c0011ca9:	74 3c                	je     c0011ce7 <Virt::allocateSwapfilePage()+0x67>
c0011cab:	31 c9                	xor    ecx,ecx
c0011cad:	bf 01 00 00 00       	mov    edi,0x1
c0011cb2:	eb 12                	jmp    c0011cc6 <Virt::allocateSwapfilePage()+0x46>
c0011cb4:	89 fd                	mov    ebp,edi
c0011cb6:	89 ca                	mov    edx,ecx
c0011cb8:	d3 e5                	shl    ebp,cl
c0011cba:	c1 ea 05             	shr    edx,0x5
c0011cbd:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011cc0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cc2:	85 ea                	test   edx,ebp
c0011cc4:	74 2a                	je     c0011cf0 <Virt::allocateSwapfilePage()+0x70>
c0011cc6:	41                   	inc    ecx
c0011cc7:	39 c8                	cmp    eax,ecx
c0011cc9:	77 e9                	ja     c0011cb4 <Virt::allocateSwapfilePage()+0x34>
c0011ccb:	83 ec 0c             	sub    esp,0xc
c0011cce:	68 ab a5 02 c0       	push   0xc002a5ab
c0011cd3:	e8 9f 87 00 00       	call   c001a477 <Krnl::panic(char const*)>
c0011cd8:	83 c4 10             	add    esp,0x10
c0011cdb:	31 c9                	xor    ecx,ecx
c0011cdd:	83 c4 0c             	add    esp,0xc
c0011ce0:	89 c8                	mov    eax,ecx
c0011ce2:	5b                   	pop    ebx
c0011ce3:	5e                   	pop    esi
c0011ce4:	5f                   	pop    edi
c0011ce5:	5d                   	pop    ebp
c0011ce6:	c3                   	ret    
c0011ce7:	89 f3                	mov    ebx,esi
c0011ce9:	bd 01 00 00 00       	mov    ebp,0x1
c0011cee:	31 c9                	xor    ecx,ecx
c0011cf0:	09 ea                	or     edx,ebp
c0011cf2:	89 c8                	mov    eax,ecx
c0011cf4:	89 13                	mov    DWORD PTR [ebx],edx
c0011cf6:	83 c4 0c             	add    esp,0xc
c0011cf9:	5b                   	pop    ebx
c0011cfa:	5e                   	pop    esi
c0011cfb:	5f                   	pop    edi
c0011cfc:	5d                   	pop    ebp
c0011cfd:	c3                   	ret    

c0011cfe <Virt::virtualMemorySetup()>:
c0011cfe:	53                   	push   ebx
c0011cff:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d04:	83 ec 08             	sub    esp,0x8
c0011d07:	6a 0f                	push   0xf
c0011d09:	53                   	push   ebx
c0011d0a:	43                   	inc    ebx
c0011d0b:	e8 d6 fd ff ff       	call   c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d10:	59                   	pop    ecx
c0011d11:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d17:	58                   	pop    eax
c0011d18:	75 ed                	jne    c0011d07 <Virt::virtualMemorySetup()+0x9>
c0011d1a:	83 ec 08             	sub    esp,0x8
c0011d1d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d22:	68 00 00 00 c8       	push   0xc8000000
c0011d27:	68 c2 a5 02 c0       	push   0xc002a5c2
c0011d2c:	e8 6b 10 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0011d31:	58                   	pop    eax
c0011d32:	5a                   	pop    edx
c0011d33:	68 00 f0 ff ef       	push   0xeffff000
c0011d38:	68 d6 a5 02 c0       	push   0xc002a5d6
c0011d3d:	e8 5a 10 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0011d42:	83 c4 10             	add    esp,0x10
c0011d45:	83 ec 08             	sub    esp,0x8
c0011d48:	6a 00                	push   0x0
c0011d4a:	53                   	push   ebx
c0011d4b:	43                   	inc    ebx
c0011d4c:	e8 95 fd ff ff       	call   c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d51:	83 c4 10             	add    esp,0x10
c0011d54:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d5a:	75 e9                	jne    c0011d45 <Virt::virtualMemorySetup()+0x47>
c0011d5c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011d61:	83 ec 08             	sub    esp,0x8
c0011d64:	6a 0f                	push   0xf
c0011d66:	53                   	push   ebx
c0011d67:	43                   	inc    ebx
c0011d68:	e8 79 fd ff ff       	call   c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d6d:	83 c4 10             	add    esp,0x10
c0011d70:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011d76:	75 e9                	jne    c0011d61 <Virt::virtualMemorySetup()+0x63>
c0011d78:	83 c4 08             	add    esp,0x8
c0011d7b:	5b                   	pop    ebx
c0011d7c:	c3                   	ret    

c0011d7d <Virt::swappingSetup()>:
c0011d7d:	83 ec 18             	sub    esp,0x18
c0011d80:	68 ea a5 02 c0       	push   0xc002a5ea
c0011d85:	e8 12 10 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0011d8a:	58                   	pop    eax
c0011d8b:	a1 f0 d1 02 c0       	mov    eax,ds:0xc002d1f0
c0011d90:	5a                   	pop    edx
c0011d91:	31 d2                	xor    edx,edx
c0011d93:	f7 35 ec d1 02 c0    	div    DWORD PTR ds:0xc002d1ec
c0011d99:	c1 e8 05             	shr    eax,0x5
c0011d9c:	50                   	push   eax
c0011d9d:	68 00 a6 02 c0       	push   0xc002a600
c0011da2:	e8 f5 0f 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0011da7:	a1 f0 d1 02 c0       	mov    eax,ds:0xc002d1f0
c0011dac:	31 d2                	xor    edx,edx
c0011dae:	f7 35 ec d1 02 c0    	div    DWORD PTR ds:0xc002d1ec
c0011db4:	c1 e8 05             	shr    eax,0x5
c0011db7:	89 04 24             	mov    DWORD PTR [esp],eax
c0011dba:	e8 84 da ff ff       	call   c000f843 <malloc>
c0011dbf:	83 c4 0c             	add    esp,0xc
c0011dc2:	89 c1                	mov    ecx,eax
c0011dc4:	a3 c8 e3 02 c0       	mov    ds:0xc002e3c8,eax
c0011dc9:	31 d2                	xor    edx,edx
c0011dcb:	a1 f0 d1 02 c0       	mov    eax,ds:0xc002d1f0
c0011dd0:	f7 35 ec d1 02 c0    	div    DWORD PTR ds:0xc002d1ec
c0011dd6:	c1 e8 05             	shr    eax,0x5
c0011dd9:	50                   	push   eax
c0011dda:	6a 00                	push   0x0
c0011ddc:	51                   	push   ecx
c0011ddd:	e8 96 e9 fe ff       	call   c0000778 <memset>
c0011de2:	83 c4 1c             	add    esp,0x1c
c0011de5:	c3                   	ret    

c0011de6 <Virt::getAKernelVAS()>:
c0011de6:	a1 cc e3 02 c0       	mov    eax,ds:0xc002e3cc
c0011deb:	c3                   	ret    

c0011dec <VAS::VAS()>:
c0011dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011df0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011df7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dfb:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e06:	a3 cc e3 02 c0       	mov    ds:0xc002e3cc,eax
c0011e0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e0f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e17:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e1e:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011e25:	90                   	nop
c0011e26:	c3                   	ret    
c0011e27:	90                   	nop

c0011e28 <VAS::VAS(VAS*)>:
c0011e28:	83 ec 0c             	sub    esp,0xc
c0011e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e2f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e3a:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011e41:	83 ec 0c             	sub    esp,0xc
c0011e44:	68 44 a4 02 c0       	push   0xc002a444
c0011e49:	e8 29 86 00 00       	call   c001a477 <Krnl::panic(char const*)>
c0011e4e:	83 c4 10             	add    esp,0x10
c0011e51:	90                   	nop
c0011e52:	83 c4 0c             	add    esp,0xc
c0011e55:	c3                   	ret    

c0011e56 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e5a:	89 c2                	mov    edx,eax
c0011e5c:	c1 e8 0a             	shr    eax,0xa
c0011e5f:	c1 ea 16             	shr    edx,0x16
c0011e62:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e67:	19 c9                	sbb    ecx,ecx
c0011e69:	c1 e2 0c             	shl    edx,0xc
c0011e6c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011e72:	25 fc 0f 00 00       	and    eax,0xffc
c0011e77:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011e7e:	01 d0                	add    eax,edx
c0011e80:	c3                   	ret    
c0011e81:	90                   	nop

c0011e82 <VAS::getPageTableEntry(unsigned long)>:
c0011e82:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e86:	89 ca                	mov    edx,ecx
c0011e88:	c1 e9 0a             	shr    ecx,0xa
c0011e8b:	c1 ea 16             	shr    edx,0x16
c0011e8e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011e94:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011e9a:	c1 e0 0c             	shl    eax,0xc
c0011e9d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ea0:	c3                   	ret    

c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ea1:	57                   	push   edi
c0011ea2:	56                   	push   esi
c0011ea3:	be 01 00 00 00       	mov    esi,0x1
c0011ea8:	53                   	push   ebx
c0011ea9:	83 ec 10             	sub    esp,0x10
c0011eac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011eb0:	c1 eb 0c             	shr    ebx,0xc
c0011eb3:	eb 3f                	jmp    c0011ef4 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011eb5:	e8 2c ff ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0011eba:	83 ec 08             	sub    esp,0x8
c0011ebd:	57                   	push   edi
c0011ebe:	50                   	push   eax
c0011ebf:	e8 be ff ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c0011ec4:	83 c4 10             	add    esp,0x10
c0011ec7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ec9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ecd:	f6 c4 04             	test   ah,0x4
c0011ed0:	75 5f                	jne    c0011f31 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011ed2:	80 fa 04             	cmp    dl,0x4
c0011ed5:	74 78                	je     c0011f4f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011ed7:	80 fa 02             	cmp    dl,0x2
c0011eda:	0f 84 88 00 00 00    	je     c0011f68 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ee0:	80 fa 03             	cmp    dl,0x3
c0011ee3:	0f 84 ad 00 00 00    	je     c0011f96 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011ee9:	fe ca                	dec    dl
c0011eeb:	0f 84 92 00 00 00    	je     c0011f83 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ef1:	43                   	inc    ebx
c0011ef2:	31 f6                	xor    esi,esi
c0011ef4:	53                   	push   ebx
c0011ef5:	e8 21 fc ff ff       	call   c0011b1b <Virt::getPageState(unsigned long)>
c0011efa:	5f                   	pop    edi
c0011efb:	89 df                	mov    edi,ebx
c0011efd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f01:	c1 e7 0c             	shl    edi,0xc
c0011f04:	84 c0                	test   al,al
c0011f06:	75 ad                	jne    c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f08:	83 ec 0c             	sub    esp,0xc
c0011f0b:	68 1b a6 02 c0       	push   0xc002a61b
c0011f10:	e8 62 85 00 00       	call   c001a477 <Krnl::panic(char const*)>
c0011f15:	e8 cc fe ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0011f1a:	5a                   	pop    edx
c0011f1b:	59                   	pop    ecx
c0011f1c:	57                   	push   edi
c0011f1d:	50                   	push   eax
c0011f1e:	e8 5f ff ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c0011f23:	83 c4 10             	add    esp,0x10
c0011f26:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f28:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f2c:	f6 c4 04             	test   ah,0x4
c0011f2f:	74 c0                	je     c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f31:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f35:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f3a:	83 ec 0c             	sub    esp,0xc
c0011f3d:	50                   	push   eax
c0011f3e:	e8 13 df ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c0011f43:	83 c4 10             	add    esp,0x10
c0011f46:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f4a:	80 fa 04             	cmp    dl,0x4
c0011f4d:	75 88                	jne    c0011ed7 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f4f:	89 f0                	mov    eax,esi
c0011f51:	84 c0                	test   al,al
c0011f53:	75 47                	jne    c0011f9c <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f55:	c7 44 24 20 68 a4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a468
c0011f5d:	83 c4 10             	add    esp,0x10
c0011f60:	5b                   	pop    ebx
c0011f61:	5e                   	pop    esi
c0011f62:	5f                   	pop    edi
c0011f63:	e9 0f 85 00 00       	jmp    c001a477 <Krnl::panic(char const*)>
c0011f68:	89 f0                	mov    eax,esi
c0011f6a:	84 c0                	test   al,al
c0011f6c:	75 15                	jne    c0011f83 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f6e:	83 ec 0c             	sub    esp,0xc
c0011f71:	68 37 a6 02 c0       	push   0xc002a637
c0011f76:	e8 fc 84 00 00       	call   c001a477 <Krnl::panic(char const*)>
c0011f7b:	83 c4 10             	add    esp,0x10
c0011f7e:	e9 6e ff ff ff       	jmp    c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f83:	83 ec 08             	sub    esp,0x8
c0011f86:	6a 00                	push   0x0
c0011f88:	53                   	push   ebx
c0011f89:	e8 58 fb ff ff       	call   c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f8e:	83 c4 10             	add    esp,0x10
c0011f91:	e9 5b ff ff ff       	jmp    c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f96:	89 f0                	mov    eax,esi
c0011f98:	84 c0                	test   al,al
c0011f9a:	75 15                	jne    c0011fb1 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011f9c:	83 ec 08             	sub    esp,0x8
c0011f9f:	6a 00                	push   0x0
c0011fa1:	53                   	push   ebx
c0011fa2:	e8 3f fb ff ff       	call   c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fa7:	83 c4 10             	add    esp,0x10
c0011faa:	83 c4 10             	add    esp,0x10
c0011fad:	5b                   	pop    ebx
c0011fae:	5e                   	pop    esi
c0011faf:	5f                   	pop    edi
c0011fb0:	c3                   	ret    
c0011fb1:	c7 44 24 20 53 a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a653
c0011fb9:	83 c4 10             	add    esp,0x10
c0011fbc:	5b                   	pop    ebx
c0011fbd:	5e                   	pop    esi
c0011fbe:	5f                   	pop    edi
c0011fbf:	e9 b3 84 00 00       	jmp    c001a477 <Krnl::panic(char const*)>

c0011fc4 <VAS::freeAllocatedPages(unsigned long)>:
c0011fc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fcc:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011fd0:	74 09                	je     c0011fdb <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011fd2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011fd6:	e9 c6 fe ff ff       	jmp    c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fdb:	c7 44 24 04 8c a4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a48c
c0011fe3:	e9 b4 0d 00 00       	jmp    c0012d9c <Dbg::kprintf(char const*, ...)>

c0011fe8 <VAS::virtualToPhysical(unsigned long)>:
c0011fe8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fec:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011ff0:	e8 8d fe ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c0011ff5:	5a                   	pop    edx
c0011ff6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ff8:	59                   	pop    ecx
c0011ff9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ffe:	c3                   	ret    
c0011fff:	90                   	nop

c0012000 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012000:	55                   	push   ebp
c0012001:	57                   	push   edi
c0012002:	56                   	push   esi
c0012003:	53                   	push   ebx
c0012004:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012008:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001200c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012010:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012014:	85 db                	test   ebx,ebx
c0012016:	7e 22                	jle    c001203a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012018:	c1 e3 0c             	shl    ebx,0xc
c001201b:	01 f3                	add    ebx,esi
c001201d:	56                   	push   esi
c001201e:	81 c6 00 10 00 00    	add    esi,0x1000
c0012024:	55                   	push   ebp
c0012025:	e8 58 fe ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c001202a:	5a                   	pop    edx
c001202b:	59                   	pop    ecx
c001202c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001202e:	21 f9                	and    ecx,edi
c0012030:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012034:	39 f3                	cmp    ebx,esi
c0012036:	89 08                	mov    DWORD PTR [eax],ecx
c0012038:	75 e3                	jne    c001201d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001203a:	5b                   	pop    ebx
c001203b:	5e                   	pop    esi
c001203c:	5f                   	pop    edi
c001203d:	5d                   	pop    ebp
c001203e:	c3                   	ret    
c001203f:	90                   	nop

c0012040 <VAS::setToWriteCombining(unsigned long, int)>:
c0012040:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0012045:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001204b:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012052:	75 01                	jne    c0012055 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012054:	c3                   	ret    
c0012055:	68 80 00 00 00       	push   0x80
c001205a:	6a ff                	push   0xffffffff
c001205c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012068:	e8 93 ff ff ff       	call   c0012000 <VAS::reflagRange(unsigned long, int, int, int)>
c001206d:	83 c4 14             	add    esp,0x14
c0012070:	c3                   	ret    
c0012071:	90                   	nop

c0012072 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012072:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001207b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001207e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012082:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0012085:	19 c0                	sbb    eax,eax
c0012087:	83 ca 03             	or     edx,0x3
c001208a:	83 e0 fc             	and    eax,0xfffffffc
c001208d:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012094:	0f 20 d8             	mov    eax,cr3
c0012097:	0f 22 d8             	mov    cr3,eax
c001209a:	c3                   	ret    
c001209b:	90                   	nop

c001209c <VAS::~VAS()>:
c001209c:	83 ec 2c             	sub    esp,0x2c
c001209f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00120a7:	e8 c5 bb 00 00       	call   c001dc71 <lockScheduler()>
c00120ac:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00120b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00120b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00120b6:	8b 80 32 19 00 00    	mov    eax,DWORD PTR [eax+0x1932]
c00120bc:	83 ec 04             	sub    esp,0x4
c00120bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00120c3:	6a 01                	push   0x1
c00120c5:	50                   	push   eax
c00120c6:	e8 a7 ff ff ff       	call   c0012072 <VAS::mapOtherVASIn(bool, VAS*)>
c00120cb:	83 c4 10             	add    esp,0x10
c00120ce:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120d6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00120de:	0f 8f d7 00 00 00    	jg     c00121bb <VAS::~VAS()+0x11f>
c00120e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00120eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120ef:	c1 e2 02             	shl    edx,0x2
c00120f2:	01 d0                	add    eax,edx
c00120f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00120f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120fe:	83 e0 01             	and    eax,0x1
c0012101:	0f 84 ab 00 00 00    	je     c00121b2 <VAS::~VAS()+0x116>
c0012107:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001210f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012117:	7f 75                	jg     c001218e <VAS::~VAS()+0xf2>
c0012119:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001211d:	c1 e0 0a             	shl    eax,0xa
c0012120:	89 c2                	mov    edx,eax
c0012122:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012126:	01 d0                	add    eax,edx
c0012128:	c1 e0 0c             	shl    eax,0xc
c001212b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001212f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012134:	8b 00                	mov    eax,DWORD PTR [eax]
c0012136:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012139:	8b 80 32 19 00 00    	mov    eax,DWORD PTR [eax+0x1932]
c001213f:	83 ec 04             	sub    esp,0x4
c0012142:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012146:	6a 01                	push   0x1
c0012148:	50                   	push   eax
c0012149:	e8 08 fd ff ff       	call   c0011e56 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001214e:	83 c4 10             	add    esp,0x10
c0012151:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012155:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012159:	8b 00                	mov    eax,DWORD PTR [eax]
c001215b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001215f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012163:	25 01 04 00 00       	and    eax,0x401
c0012168:	3d 01 04 00 00       	cmp    eax,0x401
c001216d:	75 19                	jne    c0012188 <VAS::~VAS()+0xec>
c001216f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012173:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012178:	83 ec 0c             	sub    esp,0xc
c001217b:	50                   	push   eax
c001217c:	e8 d5 dc ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c0012181:	83 c4 10             	add    esp,0x10
c0012184:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012188:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001218c:	eb 81                	jmp    c001210f <VAS::~VAS()+0x73>
c001218e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012192:	25 00 04 00 00       	and    eax,0x400
c0012197:	74 19                	je     c00121b2 <VAS::~VAS()+0x116>
c0012199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001219d:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121a2:	83 ec 0c             	sub    esp,0xc
c00121a5:	50                   	push   eax
c00121a6:	e8 ab dc ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c00121ab:	83 c4 10             	add    esp,0x10
c00121ae:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121b2:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00121b6:	e9 1b ff ff ff       	jmp    c00120d6 <VAS::~VAS()+0x3a>
c00121bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121c2:	83 ec 0c             	sub    esp,0xc
c00121c5:	50                   	push   eax
c00121c6:	e8 d6 fc ff ff       	call   c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c00121cb:	83 c4 10             	add    esp,0x10
c00121ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121d5:	83 ec 0c             	sub    esp,0xc
c00121d8:	50                   	push   eax
c00121d9:	e8 78 dc ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c00121de:	83 c4 10             	add    esp,0x10
c00121e1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121e9:	c1 e0 02             	shl    eax,0x2
c00121ec:	83 ec 08             	sub    esp,0x8
c00121ef:	50                   	push   eax
c00121f0:	68 b0 a4 02 c0       	push   0xc002a4b0
c00121f5:	e8 a2 0b 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00121fa:	83 c4 10             	add    esp,0x10
c00121fd:	e8 71 ba 00 00       	call   c001dc73 <unlockScheduler()>
c0012202:	90                   	nop
c0012203:	83 c4 2c             	add    esp,0x2c
c0012206:	c3                   	ret    
c0012207:	90                   	nop

c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012208:	55                   	push   ebp
c0012209:	57                   	push   edi
c001220a:	56                   	push   esi
c001220b:	53                   	push   ebx
c001220c:	83 ec 1c             	sub    esp,0x1c
c001220f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012213:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012217:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001221d:	77 08                	ja     c0012227 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001221f:	0f 20 d8             	mov    eax,cr3
c0012222:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012225:	75 47                	jne    c001226e <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012227:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001222b:	09 d8                	or     eax,ebx
c001222d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012232:	75 57                	jne    c001228b <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012234:	89 de                	mov    esi,ebx
c0012236:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012239:	c1 ee 16             	shr    esi,0x16
c001223c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012243:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012247:	74 54                	je     c001229d <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001224d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012253:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012257:	c1 e6 0c             	shl    esi,0xc
c001225a:	c1 eb 0a             	shr    ebx,0xa
c001225d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012263:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012266:	83 c4 1c             	add    esp,0x1c
c0012269:	5b                   	pop    ebx
c001226a:	5e                   	pop    esi
c001226b:	5f                   	pop    edi
c001226c:	5d                   	pop    ebp
c001226d:	c3                   	ret    
c001226e:	83 ec 0c             	sub    esp,0xc
c0012271:	68 d0 a4 02 c0       	push   0xc002a4d0
c0012276:	e8 21 0b 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001227b:	83 c4 10             	add    esp,0x10
c001227e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012282:	09 d8                	or     eax,ebx
c0012284:	a9 ff 0f 00 00       	test   eax,0xfff
c0012289:	74 a9                	je     c0012234 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001228b:	83 ec 0c             	sub    esp,0xc
c001228e:	68 38 a5 02 c0       	push   0xc002a538
c0012293:	e8 df 81 00 00       	call   c001a477 <Krnl::panic(char const*)>
c0012298:	83 c4 10             	add    esp,0x10
c001229b:	eb 97                	jmp    c0012234 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001229d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00122a1:	e8 3a dc ff ff       	call   c000fee0 <Phys::allocatePage()>
c00122a6:	89 c5                	mov    ebp,eax
c00122a8:	e8 39 fb ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c00122ad:	83 ec 0c             	sub    esp,0xc
c00122b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122b4:	6a 01                	push   0x1
c00122b6:	e8 84 f8 ff ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c00122bb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122c2:	6a 01                	push   0x1
c00122c4:	50                   	push   eax
c00122c5:	55                   	push   ebp
c00122c6:	81 cd 07 04 00 00    	or     ebp,0x407
c00122cc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122d0:	51                   	push   ecx
c00122d1:	e8 26 02 00 00       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122d6:	83 c4 1c             	add    esp,0x1c
c00122d9:	68 00 10 00 00       	push   0x1000
c00122de:	6a 00                	push   0x0
c00122e0:	50                   	push   eax
c00122e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122e5:	e8 8e e4 fe ff       	call   c0000778 <memset>
c00122ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122f1:	e8 ab fb ff ff       	call   c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c00122f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122fa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122fd:	83 c4 10             	add    esp,0x10
c0012300:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012303:	e9 41 ff ff ff       	jmp    c0012249 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012308 <VAS::allocatePages(int, int)>:
c0012308:	55                   	push   ebp
c0012309:	57                   	push   edi
c001230a:	56                   	push   esi
c001230b:	53                   	push   ebx
c001230c:	83 ec 1c             	sub    esp,0x1c
c001230f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012313:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0012318:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001231e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012324:	83 e0 01             	and    eax,0x1
c0012327:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001232b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001232f:	0f 85 cc 00 00 00    	jne    c0012401 <VAS::allocatePages(int, int)+0xf9>
c0012335:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012338:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001233c:	85 c0                	test   eax,eax
c001233e:	0f 84 a1 00 00 00    	je     c00123e5 <VAS::allocatePages(int, int)+0xdd>
c0012344:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012348:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001234c:	c1 e6 0c             	shl    esi,0xc
c001234f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012353:	85 c0                	test   eax,eax
c0012355:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012358:	7e 33                	jle    c001238d <VAS::allocatePages(int, int)+0x85>
c001235a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001235e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012362:	81 cd 00 04 00 00    	or     ebp,0x400
c0012368:	e8 73 db ff ff       	call   c000fee0 <Phys::allocatePage()>
c001236d:	55                   	push   ebp
c001236e:	53                   	push   ebx
c001236f:	50                   	push   eax
c0012370:	57                   	push   edi
c0012371:	e8 92 fe ff ff       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012376:	83 c4 10             	add    esp,0x10
c0012379:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001237e:	74 03                	je     c0012383 <VAS::allocatePages(int, int)+0x7b>
c0012380:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012383:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012389:	39 de                	cmp    esi,ebx
c001238b:	75 db                	jne    c0012368 <VAS::allocatePages(int, int)+0x60>
c001238d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012392:	75 12                	jne    c00123a6 <VAS::allocatePages(int, int)+0x9e>
c0012394:	0f 20 d8             	mov    eax,cr3
c0012397:	0f 22 d8             	mov    cr3,eax
c001239a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001239e:	83 c4 1c             	add    esp,0x1c
c00123a1:	5b                   	pop    ebx
c00123a2:	5e                   	pop    esi
c00123a3:	5f                   	pop    edi
c00123a4:	5d                   	pop    ebp
c00123a5:	c3                   	ret    
c00123a6:	c1 ee 0a             	shr    esi,0xa
c00123a9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123ad:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00123b3:	c1 eb 0a             	shr    ebx,0xa
c00123b6:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00123bc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123c2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00123c8:	39 c3                	cmp    ebx,eax
c00123ca:	77 ce                	ja     c001239a <VAS::allocatePages(int, int)+0x92>
c00123cc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123cf:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123d5:	39 d8                	cmp    eax,ebx
c00123d7:	73 f3                	jae    c00123cc <VAS::allocatePages(int, int)+0xc4>
c00123d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123dd:	83 c4 1c             	add    esp,0x1c
c00123e0:	5b                   	pop    ebx
c00123e1:	5e                   	pop    esi
c00123e2:	5f                   	pop    edi
c00123e3:	5d                   	pop    ebp
c00123e4:	c3                   	ret    
c00123e5:	83 ec 0c             	sub    esp,0xc
c00123e8:	68 5c a5 02 c0       	push   0xc002a55c
c00123ed:	e8 85 80 00 00       	call   c001a477 <Krnl::panic(char const*)>
c00123f2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123f9:	83 c4 10             	add    esp,0x10
c00123fc:	e9 43 ff ff ff       	jmp    c0012344 <VAS::allocatePages(int, int)+0x3c>
c0012401:	83 ec 0c             	sub    esp,0xc
c0012404:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012408:	e8 32 f7 ff ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c001240d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012411:	83 c4 10             	add    esp,0x10
c0012414:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012419:	0f 87 9b 00 00 00    	ja     c00124ba <VAS::allocatePages(int, int)+0x1b2>
c001241f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012423:	85 d2                	test   edx,edx
c0012425:	7e 3c                	jle    c0012463 <VAS::allocatePages(int, int)+0x15b>
c0012427:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001242b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001242f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012433:	c1 e5 0c             	shl    ebp,0xc
c0012436:	81 ce 00 04 00 00    	or     esi,0x400
c001243c:	01 dd                	add    ebp,ebx
c001243e:	e8 9d da ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012443:	56                   	push   esi
c0012444:	53                   	push   ebx
c0012445:	50                   	push   eax
c0012446:	57                   	push   edi
c0012447:	e8 bc fd ff ff       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c001244c:	83 c4 10             	add    esp,0x10
c001244f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012454:	74 03                	je     c0012459 <VAS::allocatePages(int, int)+0x151>
c0012456:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012459:	81 c3 00 10 00 00    	add    ebx,0x1000
c001245f:	39 dd                	cmp    ebp,ebx
c0012461:	75 db                	jne    c001243e <VAS::allocatePages(int, int)+0x136>
c0012463:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012468:	0f 84 26 ff ff ff    	je     c0012394 <VAS::allocatePages(int, int)+0x8c>
c001246e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012472:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012476:	89 d3                	mov    ebx,edx
c0012478:	c1 e0 0c             	shl    eax,0xc
c001247b:	c1 eb 0a             	shr    ebx,0xa
c001247e:	01 d0                	add    eax,edx
c0012480:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012486:	c1 e8 0a             	shr    eax,0xa
c0012489:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001248f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012494:	2d 00 00 40 00       	sub    eax,0x400000
c0012499:	39 c3                	cmp    ebx,eax
c001249b:	0f 87 f9 fe ff ff    	ja     c001239a <VAS::allocatePages(int, int)+0x92>
c00124a1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124a4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124aa:	39 d8                	cmp    eax,ebx
c00124ac:	73 f3                	jae    c00124a1 <VAS::allocatePages(int, int)+0x199>
c00124ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124b2:	83 c4 1c             	add    esp,0x1c
c00124b5:	5b                   	pop    ebx
c00124b6:	5e                   	pop    esi
c00124b7:	5f                   	pop    edi
c00124b8:	5d                   	pop    ebp
c00124b9:	c3                   	ret    
c00124ba:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00124bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124c5:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00124cc:	0f 84 4d ff ff ff    	je     c001241f <VAS::allocatePages(int, int)+0x117>
c00124d2:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00124da:	e9 40 ff ff ff       	jmp    c001241f <VAS::allocatePages(int, int)+0x117>
c00124df:	90                   	nop

c00124e0 <VAS::setCPUSpecific(unsigned long)>:
c00124e0:	83 ec 0c             	sub    esp,0xc
c00124e3:	6a 05                	push   0x5
c00124e5:	68 00 00 40 c2       	push   0xc2400000
c00124ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124f2:	e8 11 fd ff ff       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124f7:	83 c4 1c             	add    esp,0x1c
c00124fa:	c3                   	ret    
c00124fb:	90                   	nop

c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00124fc:	55                   	push   ebp
c00124fd:	57                   	push   edi
c00124fe:	56                   	push   esi
c00124ff:	53                   	push   ebx
c0012500:	83 ec 1c             	sub    esp,0x1c
c0012503:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0012508:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001250c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012512:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012516:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001251c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012520:	83 e0 01             	and    eax,0x1
c0012523:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012527:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001252b:	85 c0                	test   eax,eax
c001252d:	7e 39                	jle    c0012568 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001252f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012533:	89 f3                	mov    ebx,esi
c0012535:	c1 e0 0c             	shl    eax,0xc
c0012538:	01 f0                	add    eax,esi
c001253a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001253e:	55                   	push   ebp
c001253f:	53                   	push   ebx
c0012540:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012544:	29 f0                	sub    eax,esi
c0012546:	01 d8                	add    eax,ebx
c0012548:	50                   	push   eax
c0012549:	57                   	push   edi
c001254a:	e8 b9 fc ff ff       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c001254f:	83 c4 10             	add    esp,0x10
c0012552:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012557:	74 03                	je     c001255c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012559:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001255c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012562:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012566:	75 d6                	jne    c001253e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012568:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001256d:	75 10                	jne    c001257f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c001256f:	0f 20 d8             	mov    eax,cr3
c0012572:	0f 22 d8             	mov    cr3,eax
c0012575:	83 c4 1c             	add    esp,0x1c
c0012578:	89 f0                	mov    eax,esi
c001257a:	5b                   	pop    ebx
c001257b:	5e                   	pop    esi
c001257c:	5f                   	pop    edi
c001257d:	5d                   	pop    ebp
c001257e:	c3                   	ret    
c001257f:	89 f3                	mov    ebx,esi
c0012581:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012585:	c1 eb 0a             	shr    ebx,0xa
c0012588:	c1 e0 0c             	shl    eax,0xc
c001258b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012591:	01 f0                	add    eax,esi
c0012593:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012599:	c1 e8 0a             	shr    eax,0xa
c001259c:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125a1:	2d 00 00 40 00       	sub    eax,0x400000
c00125a6:	39 c3                	cmp    ebx,eax
c00125a8:	77 cb                	ja     c0012575 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00125aa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125ad:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125b3:	39 d8                	cmp    eax,ebx
c00125b5:	73 f3                	jae    c00125aa <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00125b7:	83 c4 1c             	add    esp,0x1c
c00125ba:	89 f0                	mov    eax,esi
c00125bc:	5b                   	pop    ebx
c00125bd:	5e                   	pop    esi
c00125be:	5f                   	pop    edi
c00125bf:	5d                   	pop    ebp
c00125c0:	c3                   	ret    
c00125c1:	90                   	nop

c00125c2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00125c2:	55                   	push   ebp
c00125c3:	57                   	push   edi
c00125c4:	56                   	push   esi
c00125c5:	53                   	push   ebx
c00125c6:	83 ec 1c             	sub    esp,0x1c
c00125c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125cd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125d1:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00125d5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00125d9:	a9 ff 0f 00 00       	test   eax,0xfff
c00125de:	75 4a                	jne    c001262a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00125e0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00125e4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00125e7:	c1 eb 16             	shr    ebx,0x16
c00125ea:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00125f1:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00125f5:	74 4d                	je     c0012644 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00125f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125fb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00125ff:	c1 e8 0a             	shr    eax,0xa
c0012602:	80 fa 01             	cmp    dl,0x1
c0012605:	19 d2                	sbb    edx,edx
c0012607:	c1 e3 0c             	shl    ebx,0xc
c001260a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001260e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012614:	25 fc 0f 00 00       	and    eax,0xffc
c0012619:	01 d8                	add    eax,ebx
c001261b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012622:	83 c4 1c             	add    esp,0x1c
c0012625:	5b                   	pop    ebx
c0012626:	5e                   	pop    esi
c0012627:	5f                   	pop    edi
c0012628:	5d                   	pop    ebp
c0012629:	c3                   	ret    
c001262a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001262e:	83 ec 0c             	sub    esp,0xc
c0012631:	68 88 a5 02 c0       	push   0xc002a588
c0012636:	e8 3c 7e 00 00       	call   c001a477 <Krnl::panic(char const*)>
c001263b:	83 c4 10             	add    esp,0x10
c001263e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012642:	eb 9c                	jmp    c00125e0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012644:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012648:	e8 93 d8 ff ff       	call   c000fee0 <Phys::allocatePage()>
c001264d:	89 c5                	mov    ebp,eax
c001264f:	e8 92 f7 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0012654:	83 ec 0c             	sub    esp,0xc
c0012657:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001265b:	6a 01                	push   0x1
c001265d:	e8 dd f4 ff ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c0012662:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012669:	6a 01                	push   0x1
c001266b:	50                   	push   eax
c001266c:	55                   	push   ebp
c001266d:	81 cd 07 04 00 00    	or     ebp,0x407
c0012673:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012677:	51                   	push   ecx
c0012678:	e8 7f fe ff ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001267d:	83 c4 1c             	add    esp,0x1c
c0012680:	68 00 10 00 00       	push   0x1000
c0012685:	6a 00                	push   0x0
c0012687:	50                   	push   eax
c0012688:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001268c:	e8 e7 e0 fe ff       	call   c0000778 <memset>
c0012691:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012695:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012698:	e8 04 f8 ff ff       	call   c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c001269d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00126a0:	83 c4 10             	add    esp,0x10
c00126a3:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00126a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126aa:	e9 48 ff ff ff       	jmp    c00125f7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00126af:	90                   	nop

c00126b0 <VAS::VAS(bool)>:
c00126b0:	53                   	push   ebx
c00126b1:	83 ec 28             	sub    esp,0x28
c00126b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00126bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126cb:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00126d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126d6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00126da:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00126dd:	e8 fe d7 ff ff       	call   c000fee0 <Phys::allocatePage()>
c00126e2:	89 c2                	mov    edx,eax
c00126e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126e8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00126eb:	e8 f6 f6 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c00126f0:	89 c3                	mov    ebx,eax
c00126f2:	83 ec 0c             	sub    esp,0xc
c00126f5:	6a 01                	push   0x1
c00126f7:	e8 43 f4 ff ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c00126fc:	83 c4 10             	add    esp,0x10
c00126ff:	89 c2                	mov    edx,eax
c0012701:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012705:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012708:	83 ec 0c             	sub    esp,0xc
c001270b:	6a 03                	push   0x3
c001270d:	6a 01                	push   0x1
c001270f:	52                   	push   edx
c0012710:	50                   	push   eax
c0012711:	53                   	push   ebx
c0012712:	e8 e5 fd ff ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012717:	83 c4 20             	add    esp,0x20
c001271a:	89 c2                	mov    edx,eax
c001271c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012720:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012723:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001272b:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012733:	7f 1c                	jg     c0012751 <VAS::VAS(bool)+0xa1>
c0012735:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012739:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001273c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012740:	c1 e2 02             	shl    edx,0x2
c0012743:	01 d0                	add    eax,edx
c0012745:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001274b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001274f:	eb da                	jmp    c001272b <VAS::VAS(bool)+0x7b>
c0012751:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012759:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012761:	7f 7a                	jg     c00127dd <VAS::VAS(bool)+0x12d>
c0012763:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012767:	2d 00 02 00 00       	sub    eax,0x200
c001276c:	c1 e0 0c             	shl    eax,0xc
c001276f:	83 c8 03             	or     eax,0x3
c0012772:	89 c2                	mov    edx,eax
c0012774:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0012779:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001277f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012785:	83 e0 10             	and    eax,0x10
c0012788:	84 c0                	test   al,al
c001278a:	74 07                	je     c0012793 <VAS::VAS(bool)+0xe3>
c001278c:	b8 00 01 00 00       	mov    eax,0x100
c0012791:	eb 05                	jmp    c0012798 <VAS::VAS(bool)+0xe8>
c0012793:	b8 00 00 00 00       	mov    eax,0x0
c0012798:	09 d0                	or     eax,edx
c001279a:	89 c1                	mov    ecx,eax
c001279c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127a7:	c1 e2 02             	shl    edx,0x2
c00127aa:	01 d0                	add    eax,edx
c00127ac:	89 ca                	mov    edx,ecx
c00127ae:	89 10                	mov    DWORD PTR [eax],edx
c00127b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127b4:	2d 40 03 00 00       	sub    eax,0x340
c00127b9:	83 f8 7f             	cmp    eax,0x7f
c00127bc:	77 16                	ja     c00127d4 <VAS::VAS(bool)+0x124>
c00127be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127c9:	c1 e2 02             	shl    edx,0x2
c00127cc:	01 d0                	add    eax,edx
c00127ce:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127d4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00127d8:	e9 7c ff ff ff       	jmp    c0012759 <VAS::VAS(bool)+0xa9>
c00127dd:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00127e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127e8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127ee:	83 e0 10             	and    eax,0x10
c00127f1:	84 c0                	test   al,al
c00127f3:	74 07                	je     c00127fc <VAS::VAS(bool)+0x14c>
c00127f5:	b8 03 41 00 00       	mov    eax,0x4103
c00127fa:	eb 05                	jmp    c0012801 <VAS::VAS(bool)+0x151>
c00127fc:	b8 03 40 00 00       	mov    eax,0x4003
c0012801:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012805:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012808:	81 c2 20 0c 00 00    	add    edx,0xc20
c001280e:	89 02                	mov    DWORD PTR [edx],eax
c0012810:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0012815:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001281b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012821:	83 ec 08             	sub    esp,0x8
c0012824:	50                   	push   eax
c0012825:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012829:	e8 b2 fc ff ff       	call   c00124e0 <VAS::setCPUSpecific(unsigned long)>
c001282e:	83 c4 10             	add    esp,0x10
c0012831:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012835:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012838:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001283d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012843:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012849:	83 e0 10             	and    eax,0x10
c001284c:	84 c0                	test   al,al
c001284e:	74 07                	je     c0012857 <VAS::VAS(bool)+0x1a7>
c0012850:	b8 00 01 00 00       	mov    eax,0x100
c0012855:	eb 05                	jmp    c001285c <VAS::VAS(bool)+0x1ac>
c0012857:	b8 00 00 00 00       	mov    eax,0x0
c001285c:	09 c2                	or     edx,eax
c001285e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012862:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012865:	05 fc 0f 00 00       	add    eax,0xffc
c001286a:	83 ca 03             	or     edx,0x3
c001286d:	89 10                	mov    DWORD PTR [eax],edx
c001286f:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0012874:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001287a:	83 ec 0c             	sub    esp,0xc
c001287d:	50                   	push   eax
c001287e:	e8 2b 1c 00 00       	call   c00144ae <Device::getName()>
c0012883:	83 c4 10             	add    esp,0x10
c0012886:	83 ec 08             	sub    esp,0x8
c0012889:	68 6d a6 02 c0       	push   0xc002a66d
c001288e:	50                   	push   eax
c001288f:	e8 2c e0 fe ff       	call   c00008c0 <strcmp>
c0012894:	83 c4 10             	add    esp,0x10
c0012897:	85 c0                	test   eax,eax
c0012899:	0f 94 c0             	sete   al
c001289c:	84 c0                	test   al,al
c001289e:	74 70                	je     c0012910 <VAS::VAS(bool)+0x260>
c00128a0:	e8 af b3 00 00       	call   c001dc54 <disableIRQs()>
c00128a5:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00128aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128b0:	05 7c 09 00 00       	add    eax,0x97c
c00128b5:	83 ec 0c             	sub    esp,0xc
c00128b8:	50                   	push   eax
c00128b9:	e8 fe c9 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128be:	83 c4 10             	add    esp,0x10
c00128c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128c6:	89 c3                	mov    ebx,eax
c00128c8:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00128cd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128d3:	05 7c 09 00 00       	add    eax,0x97c
c00128d8:	83 ec 0c             	sub    esp,0xc
c00128db:	50                   	push   eax
c00128dc:	e8 db c9 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128e1:	83 c4 10             	add    esp,0x10
c00128e4:	83 ec 08             	sub    esp,0x8
c00128e7:	50                   	push   eax
c00128e8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128ec:	e8 91 f5 ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c00128f1:	83 c4 10             	add    esp,0x10
c00128f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00128f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128fb:	6a 11                	push   0x11
c00128fd:	53                   	push   ebx
c00128fe:	50                   	push   eax
c00128ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012903:	e8 00 f9 ff ff       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012908:	83 c4 10             	add    esp,0x10
c001290b:	e8 52 b3 00 00       	call   c001dc62 <enableIRQs()>
c0012910:	90                   	nop
c0012911:	83 c4 28             	add    esp,0x28
c0012914:	5b                   	pop    ebx
c0012915:	c3                   	ret    

c0012916 <VAS::evict(unsigned long)>:
c0012916:	55                   	push   ebp
c0012917:	57                   	push   edi
c0012918:	56                   	push   esi
c0012919:	53                   	push   ebx
c001291a:	83 ec 14             	sub    esp,0x14
c001291d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0012921:	55                   	push   ebp
c0012922:	68 7b a6 02 c0       	push   0xc002a67b
c0012927:	e8 70 04 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001292c:	e8 4f f3 ff ff       	call   c0011c80 <Virt::allocateSwapfilePage()>
c0012931:	83 c4 10             	add    esp,0x10
c0012934:	89 c7                	mov    edi,eax
c0012936:	a1 ec d1 02 c0       	mov    eax,ds:0xc002d1ec
c001293b:	85 c0                	test   eax,eax
c001293d:	7e 3d                	jle    c001297c <VAS::evict(unsigned long)+0x66>
c001293f:	89 ee                	mov    esi,ebp
c0012941:	31 db                	xor    ebx,ebx
c0012943:	83 ec 0c             	sub    esp,0xc
c0012946:	57                   	push   edi
c0012947:	e8 22 f3 ff ff       	call   c0011c6e <Virt::swapIDToSector(unsigned long)>
c001294c:	89 34 24             	mov    DWORD PTR [esp],esi
c001294f:	01 d8                	add    eax,ebx
c0012951:	6a 01                	push   0x1
c0012953:	31 d2                	xor    edx,edx
c0012955:	43                   	inc    ebx
c0012956:	52                   	push   edx
c0012957:	81 c6 00 02 00 00    	add    esi,0x200
c001295d:	50                   	push   eax
c001295e:	0f be 05 f8 d1 02 c0 	movsx  eax,BYTE PTR ds:0xc002d1f8
c0012965:	ff 34 85 5c e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd18a4]
c001296c:	e8 dd 3c 00 00       	call   c001664e <LogicalDisk::write(unsigned long long, int, void*)>
c0012971:	83 c4 20             	add    esp,0x20
c0012974:	39 1d ec d1 02 c0    	cmp    DWORD PTR ds:0xc002d1ec,ebx
c001297a:	7f c7                	jg     c0012943 <VAS::evict(unsigned long)+0x2d>
c001297c:	83 ec 08             	sub    esp,0x8
c001297f:	c1 e7 0b             	shl    edi,0xb
c0012982:	55                   	push   ebp
c0012983:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012987:	e8 f6 f4 ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c001298c:	8b 10                	mov    edx,DWORD PTR [eax]
c001298e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012994:	09 d7                	or     edi,edx
c0012996:	89 38                	mov    DWORD PTR [eax],edi
c0012998:	ff 05 c4 e3 02 c0    	inc    DWORD PTR ds:0xc002e3c4
c001299e:	0f 20 d8             	mov    eax,cr3
c00129a1:	0f 22 d8             	mov    cr3,eax
c00129a4:	83 c4 1c             	add    esp,0x1c
c00129a7:	5b                   	pop    ebx
c00129a8:	5e                   	pop    esi
c00129a9:	5f                   	pop    edi
c00129aa:	5d                   	pop    ebp
c00129ab:	c3                   	ret    

c00129ac <VAS::tryLoadBackOffDisk(unsigned long)>:
c00129ac:	57                   	push   edi
c00129ad:	56                   	push   esi
c00129ae:	53                   	push   ebx
c00129af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129b3:	83 ec 08             	sub    esp,0x8
c00129b6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00129bc:	53                   	push   ebx
c00129bd:	68 8a a6 02 c0       	push   0xc002a68a
c00129c2:	e8 d5 03 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00129c7:	83 c4 10             	add    esp,0x10
c00129ca:	85 db                	test   ebx,ebx
c00129cc:	74 20                	je     c00129ee <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c00129ce:	83 ec 08             	sub    esp,0x8
c00129d1:	53                   	push   ebx
c00129d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129d6:	e8 a7 f4 ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c00129db:	83 c4 10             	add    esp,0x10
c00129de:	89 c6                	mov    esi,eax
c00129e0:	85 c0                	test   eax,eax
c00129e2:	74 0a                	je     c00129ee <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c00129e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00129e6:	f7 c7 01 00 00 00    	test   edi,0x1
c00129ec:	74 06                	je     c00129f4 <VAS::tryLoadBackOffDisk(unsigned long)+0x48>
c00129ee:	31 c0                	xor    eax,eax
c00129f0:	5b                   	pop    ebx
c00129f1:	5e                   	pop    esi
c00129f2:	5f                   	pop    edi
c00129f3:	c3                   	ret    
c00129f4:	e8 e7 d4 ff ff       	call   c000fee0 <Phys::allocatePage()>
c00129f9:	c1 ef 0b             	shr    edi,0xb
c00129fc:	8b 16                	mov    edx,DWORD PTR [esi]
c00129fe:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012a04:	09 c2                	or     edx,eax
c0012a06:	81 ca 01 08 00 00    	or     edx,0x801
c0012a0c:	89 16                	mov    DWORD PTR [esi],edx
c0012a0e:	0f 20 d8             	mov    eax,cr3
c0012a11:	0f 22 d8             	mov    cr3,eax
c0012a14:	a1 ec d1 02 c0       	mov    eax,ds:0xc002d1ec
c0012a19:	85 c0                	test   eax,eax
c0012a1b:	7e 3b                	jle    c0012a58 <VAS::tryLoadBackOffDisk(unsigned long)+0xac>
c0012a1d:	31 f6                	xor    esi,esi
c0012a1f:	83 ec 0c             	sub    esp,0xc
c0012a22:	57                   	push   edi
c0012a23:	e8 46 f2 ff ff       	call   c0011c6e <Virt::swapIDToSector(unsigned long)>
c0012a28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a2b:	01 f0                	add    eax,esi
c0012a2d:	6a 01                	push   0x1
c0012a2f:	31 d2                	xor    edx,edx
c0012a31:	46                   	inc    esi
c0012a32:	52                   	push   edx
c0012a33:	81 c3 00 02 00 00    	add    ebx,0x200
c0012a39:	50                   	push   eax
c0012a3a:	0f be 05 f8 d1 02 c0 	movsx  eax,BYTE PTR ds:0xc002d1f8
c0012a41:	ff 34 85 5c e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd18a4]
c0012a48:	e8 95 3b 00 00       	call   c00165e2 <LogicalDisk::read(unsigned long long, int, void*)>
c0012a4d:	83 c4 20             	add    esp,0x20
c0012a50:	39 35 ec d1 02 c0    	cmp    DWORD PTR ds:0xc002d1ec,esi
c0012a56:	7f c7                	jg     c0012a1f <VAS::tryLoadBackOffDisk(unsigned long)+0x73>
c0012a58:	83 ec 0c             	sub    esp,0xc
c0012a5b:	ff 0d c4 e3 02 c0    	dec    DWORD PTR ds:0xc002e3c4
c0012a61:	57                   	push   edi
c0012a62:	e8 e9 f1 ff ff       	call   c0011c50 <Virt::freeSwapfilePage(unsigned long)>
c0012a67:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a6b:	83 c4 10             	add    esp,0x10
c0012a6e:	25 ff 0f 00 00       	and    eax,0xfff
c0012a73:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012a78:	77 07                	ja     c0012a81 <VAS::tryLoadBackOffDisk(unsigned long)+0xd5>
c0012a7a:	b0 01                	mov    al,0x1
c0012a7c:	e9 6f ff ff ff       	jmp    c00129f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c0012a81:	83 ec 0c             	sub    esp,0xc
c0012a84:	68 98 a6 02 c0       	push   0xc002a698
c0012a89:	e8 0e 03 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0012a8e:	83 c4 10             	add    esp,0x10
c0012a91:	b0 01                	mov    al,0x1
c0012a93:	e9 58 ff ff ff       	jmp    c00129f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c0012a98 <VAS::scanForEviction()>:
c0012a98:	55                   	push   ebp
c0012a99:	57                   	push   edi
c0012a9a:	31 ff                	xor    edi,edi
c0012a9c:	56                   	push   esi
c0012a9d:	31 f6                	xor    esi,esi
c0012a9f:	53                   	push   ebx
c0012aa0:	83 ec 1c             	sub    esp,0x1c
c0012aa3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012aa7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0012aaa:	89 d8                	mov    eax,ebx
c0012aac:	39 c3                	cmp    ebx,eax
c0012aae:	74 72                	je     c0012b22 <VAS::scanForEviction()+0x8a>
c0012ab0:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012ab5:	75 0e                	jne    c0012ac5 <VAS::scanForEviction()+0x2d>
c0012ab7:	89 c1                	mov    ecx,eax
c0012ab9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012abc:	c1 e9 16             	shr    ecx,0x16
c0012abf:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012ac3:	74 51                	je     c0012b16 <VAS::scanForEviction()+0x7e>
c0012ac5:	50                   	push   eax
c0012ac6:	55                   	push   ebp
c0012ac7:	e8 b6 f3 ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c0012acc:	5a                   	pop    edx
c0012acd:	8b 10                	mov    edx,DWORD PTR [eax]
c0012acf:	59                   	pop    ecx
c0012ad0:	89 d1                	mov    ecx,edx
c0012ad2:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0012ad8:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0012ade:	74 54                	je     c0012b34 <VAS::scanForEviction()+0x9c>
c0012ae0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0012ae3:	05 00 10 00 00       	add    eax,0x1000
c0012ae8:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0012aed:	76 3d                	jbe    c0012b2c <VAS::scanForEviction()+0x94>
c0012aef:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
c0012af6:	85 db                	test   ebx,ebx
c0012af8:	74 79                	je     c0012b73 <VAS::scanForEviction()+0xdb>
c0012afa:	31 c0                	xor    eax,eax
c0012afc:	be 01 00 00 00       	mov    esi,0x1
c0012b01:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012b06:	75 bd                	jne    c0012ac5 <VAS::scanForEviction()+0x2d>
c0012b08:	89 c1                	mov    ecx,eax
c0012b0a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012b0d:	c1 e9 16             	shr    ecx,0x16
c0012b10:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012b14:	75 af                	jne    c0012ac5 <VAS::scanForEviction()+0x2d>
c0012b16:	05 00 00 40 00       	add    eax,0x400000
c0012b1b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012b1e:	39 c3                	cmp    ebx,eax
c0012b20:	75 8e                	jne    c0012ab0 <VAS::scanForEviction()+0x18>
c0012b22:	89 f1                	mov    ecx,esi
c0012b24:	84 c9                	test   cl,cl
c0012b26:	74 88                	je     c0012ab0 <VAS::scanForEviction()+0x18>
c0012b28:	89 f7                	mov    edi,esi
c0012b2a:	eb 84                	jmp    c0012ab0 <VAS::scanForEviction()+0x18>
c0012b2c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012b2f:	e9 78 ff ff ff       	jmp    c0012aac <VAS::scanForEviction()+0x14>
c0012b34:	f6 c2 01             	test   dl,0x1
c0012b37:	74 a7                	je     c0012ae0 <VAS::scanForEviction()+0x48>
c0012b39:	f6 c2 40             	test   dl,0x40
c0012b3c:	74 0b                	je     c0012b49 <VAS::scanForEviction()+0xb1>
c0012b3e:	83 e2 bf             	and    edx,0xffffffbf
c0012b41:	89 10                	mov    DWORD PTR [eax],edx
c0012b43:	89 f8                	mov    eax,edi
c0012b45:	84 c0                	test   al,al
c0012b47:	74 97                	je     c0012ae0 <VAS::scanForEviction()+0x48>
c0012b49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b4d:	83 ec 08             	sub    esp,0x8
c0012b50:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0012b53:	55                   	push   ebp
c0012b54:	e8 bd fd ff ff       	call   c0012916 <VAS::evict(unsigned long)>
c0012b59:	81 45 10 00 10 00 00 	add    DWORD PTR [ebp+0x10],0x1000
c0012b60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b64:	83 c4 2c             	add    esp,0x2c
c0012b67:	89 d0                	mov    eax,edx
c0012b69:	5b                   	pop    ebx
c0012b6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b6f:	5e                   	pop    esi
c0012b70:	5f                   	pop    edi
c0012b71:	5d                   	pop    ebp
c0012b72:	c3                   	ret    
c0012b73:	bf 01 00 00 00       	mov    edi,0x1
c0012b78:	eb 80                	jmp    c0012afa <VAS::scanForEviction()+0x62>

c0012b7a <mapVASFirstTime>:
c0012b7a:	55                   	push   ebp
c0012b7b:	57                   	push   edi
c0012b7c:	56                   	push   esi
c0012b7d:	53                   	push   ebx
c0012b7e:	83 ec 0c             	sub    esp,0xc
c0012b81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b86:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012b89:	4a                   	dec    edx
c0012b8a:	0f 84 8e 00 00 00    	je     c0012c1e <mapVASFirstTime+0xa4>
c0012b90:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012b93:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012b96:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012b9b:	c1 e5 15             	shl    ebp,0x15
c0012b9e:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012ba3:	8b ba 32 19 00 00    	mov    edi,DWORD PTR [edx+0x1932]
c0012ba9:	29 eb                	sub    ebx,ebp
c0012bab:	29 ee                	sub    esi,ebp
c0012bad:	e8 2e d3 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012bb2:	83 ec 0c             	sub    esp,0xc
c0012bb5:	68 03 04 00 00       	push   0x403
c0012bba:	6a 01                	push   0x1
c0012bbc:	53                   	push   ebx
c0012bbd:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012bc3:	50                   	push   eax
c0012bc4:	57                   	push   edi
c0012bc5:	e8 32 f9 ff ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012bca:	83 c4 20             	add    esp,0x20
c0012bcd:	39 f3                	cmp    ebx,esi
c0012bcf:	75 dc                	jne    c0012bad <mapVASFirstTime+0x33>
c0012bd1:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012bd6:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012bdb:	29 ee                	sub    esi,ebp
c0012bdd:	29 e8                	sub    eax,ebp
c0012bdf:	89 c5                	mov    ebp,eax
c0012be1:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012be5:	19 db                	sbb    ebx,ebx
c0012be7:	e8 f4 d2 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012bec:	83 e3 04             	and    ebx,0x4
c0012bef:	83 ec 0c             	sub    esp,0xc
c0012bf2:	81 c3 03 04 00 00    	add    ebx,0x403
c0012bf8:	53                   	push   ebx
c0012bf9:	6a 01                	push   0x1
c0012bfb:	56                   	push   esi
c0012bfc:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012c02:	50                   	push   eax
c0012c03:	57                   	push   edi
c0012c04:	e8 f3 f8 ff ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c09:	83 c4 20             	add    esp,0x20
c0012c0c:	39 f5                	cmp    ebp,esi
c0012c0e:	75 d1                	jne    c0012be1 <mapVASFirstTime+0x67>
c0012c10:	0f 20 d8             	mov    eax,cr3
c0012c13:	0f 22 d8             	mov    cr3,eax
c0012c16:	83 c4 0c             	add    esp,0xc
c0012c19:	5b                   	pop    ebx
c0012c1a:	5e                   	pop    esi
c0012c1b:	5f                   	pop    edi
c0012c1c:	5d                   	pop    ebp
c0012c1d:	c3                   	ret    
c0012c1e:	83 ec 0c             	sub    esp,0xc
c0012c21:	68 ac a6 02 c0       	push   0xc002a6ac
c0012c26:	e8 71 01 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0012c2b:	83 c4 10             	add    esp,0x10
c0012c2e:	83 c4 0c             	add    esp,0xc
c0012c31:	5b                   	pop    ebx
c0012c32:	5e                   	pop    esi
c0012c33:	5f                   	pop    edi
c0012c34:	5d                   	pop    ebp
c0012c35:	c3                   	ret    

c0012c36 <__cxa_atexit>:
c0012c36:	31 c0                	xor    eax,eax
c0012c38:	c3                   	ret    

c0012c39 <__cxa_finalize>:
c0012c39:	c3                   	ret    

c0012c3a <__stack_chk_fail>:
c0012c3a:	55                   	push   ebp
c0012c3b:	89 e5                	mov    ebp,esp
c0012c3d:	83 ec 14             	sub    esp,0x14
c0012c40:	68 c5 a6 02 c0       	push   0xc002a6c5
c0012c45:	e8 52 01 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0012c4a:	58                   	pop    eax
c0012c4b:	5a                   	pop    edx
c0012c4c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012c4f:	68 15 a7 02 c0       	push   0xc002a715
c0012c54:	e8 43 01 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0012c59:	59                   	pop    ecx
c0012c5a:	58                   	pop    eax
c0012c5b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c5e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c61:	68 15 a7 02 c0       	push   0xc002a715
c0012c66:	e8 31 01 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0012c6b:	5a                   	pop    edx
c0012c6c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c6f:	59                   	pop    ecx
c0012c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c72:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c75:	68 15 a7 02 c0       	push   0xc002a715
c0012c7a:	e8 1d 01 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0012c7f:	5a                   	pop    edx
c0012c80:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c83:	59                   	pop    ecx
c0012c84:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c86:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c88:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c8b:	68 15 a7 02 c0       	push   0xc002a715
c0012c90:	e8 07 01 00 00       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0012c95:	c7 04 24 1d a7 02 c0 	mov    DWORD PTR [esp],0xc002a71d
c0012c9c:	e8 d6 77 00 00       	call   c001a477 <Krnl::panic(char const*)>
c0012ca1:	83 c4 10             	add    esp,0x10
c0012ca4:	c9                   	leave  
c0012ca5:	c3                   	ret    

c0012ca6 <__cxa_pure_virtual>:
c0012ca6:	83 ec 18             	sub    esp,0x18
c0012ca9:	68 35 a7 02 c0       	push   0xc002a735
c0012cae:	e8 c4 77 00 00       	call   c001a477 <Krnl::panic(char const*)>
c0012cb3:	83 c4 1c             	add    esp,0x1c
c0012cb6:	c3                   	ret    

c0012cb7 <operator new[](unsigned long)>:
c0012cb7:	e9 87 cb ff ff       	jmp    c000f843 <malloc>

c0012cbc <operator delete(void*, unsigned long)>:
c0012cbc:	e9 a2 cb ff ff       	jmp    c000f863 <rfree>

c0012cc1 <operator delete[](void*)>:
c0012cc1:	e9 9d cb ff ff       	jmp    c000f863 <rfree>

c0012cc6 <operator delete[](void*, unsigned long)>:
c0012cc6:	e9 98 cb ff ff       	jmp    c000f863 <rfree>

c0012ccb <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012ccb:	57                   	push   edi
c0012ccc:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012cd1:	56                   	push   esi
c0012cd2:	be 48 a7 02 c0       	mov    esi,0xc002a748
c0012cd7:	53                   	push   ebx
c0012cd8:	83 ec 40             	sub    esp,0x40
c0012cdb:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012cdf:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012ce3:	fc                   	cld    
c0012ce4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ce6:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012cea:	83 f9 3e             	cmp    ecx,0x3e
c0012ced:	7e 05                	jle    c0012cf4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012cef:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012cf4:	89 df                	mov    edi,ebx
c0012cf6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012cfa:	eb 02                	jmp    c0012cfe <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012cfc:	89 c7                	mov    edi,eax
c0012cfe:	31 d2                	xor    edx,edx
c0012d00:	46                   	inc    esi
c0012d01:	89 f8                	mov    eax,edi
c0012d03:	f7 f1                	div    ecx
c0012d05:	39 cf                	cmp    edi,ecx
c0012d07:	73 f3                	jae    c0012cfc <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012d09:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d0c:	eb 02                	jmp    c0012d10 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012d0e:	89 c3                	mov    ebx,eax
c0012d10:	31 d2                	xor    edx,edx
c0012d12:	4e                   	dec    esi
c0012d13:	89 d8                	mov    eax,ebx
c0012d15:	f7 f1                	div    ecx
c0012d17:	39 cb                	cmp    ebx,ecx
c0012d19:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012d1d:	88 16                	mov    BYTE PTR [esi],dl
c0012d1f:	73 ed                	jae    c0012d0e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012d21:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012d25:	83 c4 40             	add    esp,0x40
c0012d28:	5b                   	pop    ebx
c0012d29:	5e                   	pop    esi
c0012d2a:	5f                   	pop    edi
c0012d2b:	c3                   	ret    

c0012d2c <Dbg::logc(char)>:
c0012d2c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d30:	ba fd 03 00 00       	mov    edx,0x3fd
c0012d35:	ec                   	in     al,dx
c0012d36:	a8 20                	test   al,0x20
c0012d38:	74 fb                	je     c0012d35 <Dbg::logc(char)+0x9>
c0012d3a:	ba f8 03 00 00       	mov    edx,0x3f8
c0012d3f:	88 c8                	mov    al,cl
c0012d41:	ee                   	out    dx,al
c0012d42:	c3                   	ret    

c0012d43 <Dbg::logs(char*)>:
c0012d43:	53                   	push   ebx
c0012d44:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d48:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d4b:	84 c0                	test   al,al
c0012d4d:	74 0f                	je     c0012d5e <Dbg::logs(char*)+0x1b>
c0012d4f:	50                   	push   eax
c0012d50:	43                   	inc    ebx
c0012d51:	e8 d6 ff ff ff       	call   c0012d2c <Dbg::logc(char)>
c0012d56:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d59:	5a                   	pop    edx
c0012d5a:	84 c0                	test   al,al
c0012d5c:	75 f1                	jne    c0012d4f <Dbg::logs(char*)+0xc>
c0012d5e:	5b                   	pop    ebx
c0012d5f:	c3                   	ret    

c0012d60 <Dbg::logWriteInt(unsigned int)>:
c0012d60:	83 ec 10             	sub    esp,0x10
c0012d63:	6a 0a                	push   0xa
c0012d65:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012d69:	50                   	push   eax
c0012d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d6e:	e8 58 ff ff ff       	call   c0012ccb <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012d73:	50                   	push   eax
c0012d74:	e8 ca ff ff ff       	call   c0012d43 <Dbg::logs(char*)>
c0012d79:	83 c4 20             	add    esp,0x20
c0012d7c:	c3                   	ret    

c0012d7d <Dbg::logWriteIntBase(unsigned int, int)>:
c0012d7d:	83 ec 10             	sub    esp,0x10
c0012d80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d84:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012d88:	50                   	push   eax
c0012d89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d8d:	e8 39 ff ff ff       	call   c0012ccb <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012d92:	50                   	push   eax
c0012d93:	e8 ab ff ff ff       	call   c0012d43 <Dbg::logs(char*)>
c0012d98:	83 c4 20             	add    esp,0x20
c0012d9b:	c3                   	ret    

c0012d9c <Dbg::kprintf(char const*, ...)>:
c0012d9c:	55                   	push   ebp
c0012d9d:	57                   	push   edi
c0012d9e:	56                   	push   esi
c0012d9f:	53                   	push   ebx
c0012da0:	83 ec 0c             	sub    esp,0xc
c0012da3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012da7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012dab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012daf:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012db2:	84 c0                	test   al,al
c0012db4:	74 4a                	je     c0012e00 <Dbg::kprintf(char const*, ...)+0x64>
c0012db6:	31 db                	xor    ebx,ebx
c0012db8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012dbb:	3c 25                	cmp    al,0x25
c0012dbd:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012dc0:	0f 85 e4 00 00 00    	jne    c0012eaa <Dbg::kprintf(char const*, ...)+0x10e>
c0012dc6:	83 c3 02             	add    ebx,0x2
c0012dc9:	8a 07                	mov    al,BYTE PTR [edi]
c0012dcb:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012dce:	83 e8 25             	sub    eax,0x25
c0012dd1:	3c 53                	cmp    al,0x53
c0012dd3:	0f 87 ba 00 00 00    	ja     c0012e93 <Dbg::kprintf(char const*, ...)+0xf7>
c0012dd9:	0f b6 c0             	movzx  eax,al
c0012ddc:	ff 24 85 88 a7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5878]
c0012de3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012de7:	89 c8                	mov    eax,ecx
c0012de9:	83 c1 04             	add    ecx,0x4
c0012dec:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012df0:	ff 30                	push   DWORD PTR [eax]
c0012df2:	e8 4c ff ff ff       	call   c0012d43 <Dbg::logs(char*)>
c0012df7:	58                   	pop    eax
c0012df8:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012dfc:	84 c0                	test   al,al
c0012dfe:	75 b8                	jne    c0012db8 <Dbg::kprintf(char const*, ...)+0x1c>
c0012e00:	83 c4 0c             	add    esp,0xc
c0012e03:	5b                   	pop    ebx
c0012e04:	5e                   	pop    esi
c0012e05:	5f                   	pop    edi
c0012e06:	5d                   	pop    ebp
c0012e07:	c3                   	ret    
c0012e08:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e0c:	89 d0                	mov    eax,edx
c0012e0e:	83 c2 04             	add    edx,0x4
c0012e11:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e15:	ff 30                	push   DWORD PTR [eax]
c0012e17:	e8 44 ff ff ff       	call   c0012d60 <Dbg::logWriteInt(unsigned int)>
c0012e1c:	58                   	pop    eax
c0012e1d:	eb d9                	jmp    c0012df8 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e1f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e23:	89 d0                	mov    eax,edx
c0012e25:	83 c2 04             	add    edx,0x4
c0012e28:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012e2b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e2f:	50                   	push   eax
c0012e30:	e8 f7 fe ff ff       	call   c0012d2c <Dbg::logc(char)>
c0012e35:	58                   	pop    eax
c0012e36:	eb c0                	jmp    c0012df8 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e38:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e3c:	89 c8                	mov    eax,ecx
c0012e3e:	83 c1 04             	add    ecx,0x4
c0012e41:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e45:	ff 30                	push   DWORD PTR [eax]
c0012e47:	e8 14 ff ff ff       	call   c0012d60 <Dbg::logWriteInt(unsigned int)>
c0012e4c:	5f                   	pop    edi
c0012e4d:	eb a9                	jmp    c0012df8 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e4f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e53:	89 c8                	mov    eax,ecx
c0012e55:	83 c1 04             	add    ecx,0x4
c0012e58:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e5c:	6a 10                	push   0x10
c0012e5e:	ff 30                	push   DWORD PTR [eax]
c0012e60:	e8 18 ff ff ff       	call   c0012d7d <Dbg::logWriteIntBase(unsigned int, int)>
c0012e65:	59                   	pop    ecx
c0012e66:	5f                   	pop    edi
c0012e67:	eb 8f                	jmp    c0012df8 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e6d:	89 d0                	mov    eax,edx
c0012e6f:	83 c2 08             	add    edx,0x8
c0012e72:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e76:	6a 10                	push   0x10
c0012e78:	ff 30                	push   DWORD PTR [eax]
c0012e7a:	e8 fe fe ff ff       	call   c0012d7d <Dbg::logWriteIntBase(unsigned int, int)>
c0012e7f:	58                   	pop    eax
c0012e80:	5a                   	pop    edx
c0012e81:	e9 72 ff ff ff       	jmp    c0012df8 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e86:	6a 25                	push   0x25
c0012e88:	e8 9f fe ff ff       	call   c0012d2c <Dbg::logc(char)>
c0012e8d:	58                   	pop    eax
c0012e8e:	e9 65 ff ff ff       	jmp    c0012df8 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e93:	6a 25                	push   0x25
c0012e95:	e8 92 fe ff ff       	call   c0012d2c <Dbg::logc(char)>
c0012e9a:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012e9d:	50                   	push   eax
c0012e9e:	e8 89 fe ff ff       	call   c0012d2c <Dbg::logc(char)>
c0012ea3:	5a                   	pop    edx
c0012ea4:	59                   	pop    ecx
c0012ea5:	e9 4e ff ff ff       	jmp    c0012df8 <Dbg::kprintf(char const*, ...)+0x5c>
c0012eaa:	50                   	push   eax
c0012eab:	89 eb                	mov    ebx,ebp
c0012ead:	e8 7a fe ff ff       	call   c0012d2c <Dbg::logc(char)>
c0012eb2:	89 fd                	mov    ebp,edi
c0012eb4:	58                   	pop    eax
c0012eb5:	e9 3e ff ff ff       	jmp    c0012df8 <Dbg::kprintf(char const*, ...)+0x5c>

c0012eba <File::read(unsigned long long, void*, int*)>:
c0012eba:	53                   	push   ebx
c0012ebb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ebf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ec3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012eca:	3c 19                	cmp    al,0x19
c0012ecc:	77 35                	ja     c0012f03 <File::read(unsigned long long, void*, int*)+0x49>
c0012ece:	8b 04 85 60 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17a0]
c0012ed5:	85 c0                	test   eax,eax
c0012ed7:	74 2a                	je     c0012f03 <File::read(unsigned long long, void*, int*)+0x49>
c0012ed9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012edf:	85 c0                	test   eax,eax
c0012ee1:	74 20                	je     c0012f03 <File::read(unsigned long long, void*, int*)+0x49>
c0012ee3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ee7:	74 21                	je     c0012f0a <File::read(unsigned long long, void*, int*)+0x50>
c0012ee9:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012eeb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012eef:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012ef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ef9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012efd:	5b                   	pop    ebx
c0012efe:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012f01:	ff e0                	jmp    eax
c0012f03:	b8 0b 00 00 00       	mov    eax,0xb
c0012f08:	eb 05                	jmp    c0012f0f <File::read(unsigned long long, void*, int*)+0x55>
c0012f0a:	b8 05 00 00 00       	mov    eax,0x5
c0012f0f:	5b                   	pop    ebx
c0012f10:	c3                   	ret    
c0012f11:	90                   	nop

c0012f12 <File::write(unsigned long long, void*, int*)>:
c0012f12:	53                   	push   ebx
c0012f13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f17:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f1b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f22:	3c 19                	cmp    al,0x19
c0012f24:	77 35                	ja     c0012f5b <File::write(unsigned long long, void*, int*)+0x49>
c0012f26:	8b 04 85 60 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17a0]
c0012f2d:	85 c0                	test   eax,eax
c0012f2f:	74 2a                	je     c0012f5b <File::write(unsigned long long, void*, int*)+0x49>
c0012f31:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f37:	85 c0                	test   eax,eax
c0012f39:	74 20                	je     c0012f5b <File::write(unsigned long long, void*, int*)+0x49>
c0012f3b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f3f:	74 21                	je     c0012f62 <File::write(unsigned long long, void*, int*)+0x50>
c0012f41:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f43:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f47:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f55:	5b                   	pop    ebx
c0012f56:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012f59:	ff e0                	jmp    eax
c0012f5b:	b8 0b 00 00 00       	mov    eax,0xb
c0012f60:	eb 05                	jmp    c0012f67 <File::write(unsigned long long, void*, int*)+0x55>
c0012f62:	b8 05 00 00 00       	mov    eax,0x5
c0012f67:	5b                   	pop    ebx
c0012f68:	c3                   	ret    
c0012f69:	90                   	nop

c0012f6a <Directory::read(unsigned long long, void*, int*)>:
c0012f6a:	53                   	push   ebx
c0012f6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f7a:	3c 19                	cmp    al,0x19
c0012f7c:	77 35                	ja     c0012fb3 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012f7e:	8b 04 85 60 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17a0]
c0012f85:	85 c0                	test   eax,eax
c0012f87:	74 2a                	je     c0012fb3 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012f89:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f8f:	85 c0                	test   eax,eax
c0012f91:	74 20                	je     c0012fb3 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012f93:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f97:	74 21                	je     c0012fba <Directory::read(unsigned long long, void*, int*)+0x50>
c0012f99:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f9f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fa5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fa9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fad:	5b                   	pop    ebx
c0012fae:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012fb1:	ff e0                	jmp    eax
c0012fb3:	b8 0b 00 00 00       	mov    eax,0xb
c0012fb8:	eb 05                	jmp    c0012fbf <Directory::read(unsigned long long, void*, int*)+0x55>
c0012fba:	b8 05 00 00 00       	mov    eax,0x5
c0012fbf:	5b                   	pop    ebx
c0012fc0:	c3                   	ret    
c0012fc1:	90                   	nop

c0012fc2 <Directory::write(unsigned long long, void*, int*)>:
c0012fc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012fc6:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012fcd:	b8 0b 00 00 00       	mov    eax,0xb
c0012fd2:	80 fa 19             	cmp    dl,0x19
c0012fd5:	77 18                	ja     c0012fef <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012fd7:	8b 14 95 60 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17a0]
c0012fde:	85 d2                	test   edx,edx
c0012fe0:	74 0d                	je     c0012fef <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012fe2:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012fe9:	19 c0                	sbb    eax,eax
c0012feb:	83 e0 0a             	and    eax,0xa
c0012fee:	40                   	inc    eax
c0012fef:	c3                   	ret    

c0012ff0 <File::isAtty()>:
c0012ff0:	31 c0                	xor    eax,eax
c0012ff2:	c3                   	ret    
c0012ff3:	90                   	nop

c0012ff4 <Directory::isAtty()>:
c0012ff4:	31 c0                	xor    eax,eax
c0012ff6:	c3                   	ret    
c0012ff7:	90                   	nop

c0012ff8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012ff8:	b8 0a 00 00 00       	mov    eax,0xa
c0012ffd:	c3                   	ret    

c0012ffe <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012ffe:	b8 0a 00 00 00       	mov    eax,0xa
c0013003:	c3                   	ret    

c0013004 <File::~File()>:
c0013004:	83 ec 0c             	sub    esp,0xc
c0013007:	ba 44 a9 02 c0       	mov    edx,0xc002a944
c001300c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013010:	89 10                	mov    DWORD PTR [eax],edx
c0013012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013016:	83 ec 0c             	sub    esp,0xc
c0013019:	50                   	push   eax
c001301a:	e8 bf e8 ff ff       	call   c00118de <UnixFile::~UnixFile()>
c001301f:	83 c4 10             	add    esp,0x10
c0013022:	90                   	nop
c0013023:	83 c4 0c             	add    esp,0xc
c0013026:	c3                   	ret    
c0013027:	90                   	nop

c0013028 <File::~File()>:
c0013028:	83 ec 0c             	sub    esp,0xc
c001302b:	83 ec 0c             	sub    esp,0xc
c001302e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013032:	e8 cd ff ff ff       	call   c0013004 <File::~File()>
c0013037:	83 c4 10             	add    esp,0x10
c001303a:	83 ec 08             	sub    esp,0x8
c001303d:	68 14 01 00 00       	push   0x114
c0013042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013046:	e8 71 fc ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c001304b:	83 c4 10             	add    esp,0x10
c001304e:	83 c4 0c             	add    esp,0xc
c0013051:	c3                   	ret    

c0013052 <Directory::~Directory()>:
c0013052:	83 ec 0c             	sub    esp,0xc
c0013055:	ba 60 a9 02 c0       	mov    edx,0xc002a960
c001305a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001305e:	89 10                	mov    DWORD PTR [eax],edx
c0013060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013064:	83 ec 0c             	sub    esp,0xc
c0013067:	50                   	push   eax
c0013068:	e8 71 e8 ff ff       	call   c00118de <UnixFile::~UnixFile()>
c001306d:	83 c4 10             	add    esp,0x10
c0013070:	90                   	nop
c0013071:	83 c4 0c             	add    esp,0xc
c0013074:	c3                   	ret    
c0013075:	90                   	nop

c0013076 <Directory::~Directory()>:
c0013076:	83 ec 0c             	sub    esp,0xc
c0013079:	83 ec 0c             	sub    esp,0xc
c001307c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013080:	e8 cd ff ff ff       	call   c0013052 <Directory::~Directory()>
c0013085:	83 c4 10             	add    esp,0x10
c0013088:	83 ec 08             	sub    esp,0x8
c001308b:	68 14 01 00 00       	push   0x114
c0013090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013094:	e8 23 fc ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0013099:	83 c4 10             	add    esp,0x10
c001309c:	83 c4 0c             	add    esp,0xc
c001309f:	c3                   	ret    

c00130a0 <Filesystem::Filesystem()>:
c00130a0:	ba e0 a8 02 c0       	mov    edx,0xc002a8e0
c00130a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130a9:	89 10                	mov    DWORD PTR [eax],edx
c00130ab:	8b 15 d0 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3d0
c00130b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00130b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130bc:	a3 d0 e3 02 c0       	mov    ds:0xc002e3d0,eax
c00130c1:	90                   	nop
c00130c2:	c3                   	ret    
c00130c3:	90                   	nop

c00130c4 <Filesystem::~Filesystem()>:
c00130c4:	ba e0 a8 02 c0       	mov    edx,0xc002a8e0
c00130c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130cd:	89 10                	mov    DWORD PTR [eax],edx
c00130cf:	90                   	nop
c00130d0:	c3                   	ret    
c00130d1:	90                   	nop

c00130d2 <Filesystem::~Filesystem()>:
c00130d2:	83 ec 0c             	sub    esp,0xc
c00130d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00130d9:	e8 e6 ff ff ff       	call   c00130c4 <Filesystem::~Filesystem()>
c00130de:	83 c4 04             	add    esp,0x4
c00130e1:	83 ec 08             	sub    esp,0x8
c00130e4:	6a 08                	push   0x8
c00130e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130ea:	e8 cd fb ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c00130ef:	83 c4 10             	add    esp,0x10
c00130f2:	83 c4 0c             	add    esp,0xc
c00130f5:	c3                   	ret    

c00130f6 <Fs::getcwd(Process*, char*, int)>:
c00130f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130fa:	31 c0                	xor    eax,eax
c00130fc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00130ff:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013103:	7d 15                	jge    c001311a <Fs::getcwd(Process*, char*, int)+0x24>
c0013105:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013109:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013110:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013113:	84 c9                	test   cl,cl
c0013115:	74 06                	je     c001311d <Fs::getcwd(Process*, char*, int)+0x27>
c0013117:	40                   	inc    eax
c0013118:	eb e2                	jmp    c00130fc <Fs::getcwd(Process*, char*, int)+0x6>
c001311a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001311d:	31 c0                	xor    eax,eax
c001311f:	c3                   	ret    

c0013120 <Fs::initVFS()>:
c0013120:	83 ec 18             	sub    esp,0x18
c0013123:	6a 08                	push   0x8
c0013125:	e8 19 c7 ff ff       	call   c000f843 <malloc>
c001312a:	89 04 24             	mov    DWORD PTR [esp],eax
c001312d:	e8 e0 dc 00 00       	call   c0020e12 <FAT::FAT()>
c0013132:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013139:	e8 05 c7 ff ff       	call   c000f843 <malloc>
c001313e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013141:	e8 24 ef 00 00       	call   c002206a <ISO9660::ISO9660()>
c0013146:	83 c4 1c             	add    esp,0x1c
c0013149:	c3                   	ret    

c001314a <Fs::standardiseFiles(char*, char const*, char const*)>:
c001314a:	55                   	push   ebp
c001314b:	57                   	push   edi
c001314c:	56                   	push   esi
c001314d:	53                   	push   ebx
c001314e:	81 ec 10 04 00 00    	sub    esp,0x410
c0013154:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001315b:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013162:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013169:	68 00 04 00 00       	push   0x400
c001316e:	6a 00                	push   0x0
c0013170:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013174:	56                   	push   esi
c0013175:	e8 fe d5 fe ff       	call   c0000778 <memset>
c001317a:	83 c4 10             	add    esp,0x10
c001317d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013181:	75 0b                	jne    c001318e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013183:	50                   	push   eax
c0013184:	50                   	push   eax
c0013185:	57                   	push   edi
c0013186:	56                   	push   esi
c0013187:	e8 a8 d6 fe ff       	call   c0000834 <strcpy>
c001318c:	eb 41                	jmp    c00131cf <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001318e:	8a 07                	mov    al,BYTE PTR [edi]
c0013190:	3c 5c                	cmp    al,0x5c
c0013192:	74 04                	je     c0013198 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013194:	3c 2f                	cmp    al,0x2f
c0013196:	75 18                	jne    c00131b0 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013198:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001319b:	3c 60                	cmp    al,0x60
c001319d:	7e 03                	jle    c00131a2 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001319f:	83 e8 20             	sub    eax,0x20
c00131a2:	88 04 24             	mov    BYTE PTR [esp],al
c00131a5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00131ac:	50                   	push   eax
c00131ad:	50                   	push   eax
c00131ae:	eb 18                	jmp    c00131c8 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00131b0:	50                   	push   eax
c00131b1:	50                   	push   eax
c00131b2:	55                   	push   ebp
c00131b3:	56                   	push   esi
c00131b4:	e8 7b d6 fe ff       	call   c0000834 <strcpy>
c00131b9:	5a                   	pop    edx
c00131ba:	59                   	pop    ecx
c00131bb:	68 38 c0 02 c0       	push   0xc002c038
c00131c0:	56                   	push   esi
c00131c1:	e8 ae d7 fe ff       	call   c0000974 <strcat>
c00131c6:	5d                   	pop    ebp
c00131c7:	58                   	pop    eax
c00131c8:	57                   	push   edi
c00131c9:	56                   	push   esi
c00131ca:	e8 a5 d7 fe ff       	call   c0000974 <strcat>
c00131cf:	83 c4 10             	add    esp,0x10
c00131d2:	8a 04 24             	mov    al,BYTE PTR [esp]
c00131d5:	3c 60                	cmp    al,0x60
c00131d7:	7e 03                	jle    c00131dc <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00131d9:	83 e8 20             	sub    eax,0x20
c00131dc:	88 04 24             	mov    BYTE PTR [esp],al
c00131df:	88 03                	mov    BYTE PTR [ebx],al
c00131e1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00131e8:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00131ee:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00131f2:	bf 03 00 00 00       	mov    edi,0x3
c00131f7:	b8 03 00 00 00       	mov    eax,0x3
c00131fc:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00131ff:	84 d2                	test   dl,dl
c0013201:	0f 84 91 00 00 00    	je     c0013298 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013207:	8d 4f 01             	lea    ecx,[edi+0x1]
c001320a:	80 fa 5c             	cmp    dl,0x5c
c001320d:	74 05                	je     c0013214 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001320f:	80 fa 2f             	cmp    dl,0x2f
c0013212:	75 12                	jne    c0013226 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013214:	89 c5                	mov    ebp,eax
c0013216:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001321b:	74 09                	je     c0013226 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001321d:	40                   	inc    eax
c001321e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013222:	89 cf                	mov    edi,ecx
c0013224:	eb d6                	jmp    c00131fc <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013226:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001322b:	75 5b                	jne    c0013288 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001322d:	80 fa 2e             	cmp    dl,0x2e
c0013230:	75 56                	jne    c0013288 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013232:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013236:	74 19                	je     c0013251 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013238:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001323d:	74 53                	je     c0013292 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001323f:	89 f9                	mov    ecx,edi
c0013241:	41                   	inc    ecx
c0013242:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013245:	80 fa 2f             	cmp    dl,0x2f
c0013248:	74 f7                	je     c0013241 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001324a:	80 fa 5c             	cmp    dl,0x5c
c001324d:	74 f2                	je     c0013241 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001324f:	eb d1                	jmp    c0013222 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013251:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013256:	74 3a                	je     c0013292 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013258:	83 f8 03             	cmp    eax,0x3
c001325b:	74 c5                	je     c0013222 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001325d:	41                   	inc    ecx
c001325e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013261:	80 fa 2f             	cmp    dl,0x2f
c0013264:	74 f7                	je     c001325d <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013266:	80 fa 5c             	cmp    dl,0x5c
c0013269:	74 f2                	je     c001325d <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001326b:	48                   	dec    eax
c001326c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013270:	75 06                	jne    c0013278 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013272:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013276:	eb f3                	jmp    c001326b <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013278:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001327c:	74 07                	je     c0013285 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001327e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013282:	48                   	dec    eax
c0013283:	eb f3                	jmp    c0013278 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013285:	40                   	inc    eax
c0013286:	eb 9a                	jmp    c0013222 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013288:	80 fa 2f             	cmp    dl,0x2f
c001328b:	74 95                	je     c0013222 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001328d:	80 fa 5c             	cmp    dl,0x5c
c0013290:	74 90                	je     c0013222 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013292:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013295:	40                   	inc    eax
c0013296:	eb 8a                	jmp    c0013222 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013298:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001329c:	83 ec 0c             	sub    esp,0xc
c001329f:	53                   	push   ebx
c00132a0:	e8 ef d4 fe ff       	call   c0000794 <strlen>
c00132a5:	83 c4 10             	add    esp,0x10
c00132a8:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00132ad:	75 26                	jne    c00132d5 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00132af:	83 ec 0c             	sub    esp,0xc
c00132b2:	53                   	push   ebx
c00132b3:	e8 dc d4 fe ff       	call   c0000794 <strlen>
c00132b8:	83 c4 10             	add    esp,0x10
c00132bb:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00132c0:	74 26                	je     c00132e8 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00132c2:	83 ec 0c             	sub    esp,0xc
c00132c5:	53                   	push   ebx
c00132c6:	e8 c9 d4 fe ff       	call   c0000794 <strlen>
c00132cb:	83 c4 10             	add    esp,0x10
c00132ce:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00132d3:	eb c7                	jmp    c001329c <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00132d5:	83 ec 0c             	sub    esp,0xc
c00132d8:	53                   	push   ebx
c00132d9:	e8 b6 d4 fe ff       	call   c0000794 <strlen>
c00132de:	83 c4 10             	add    esp,0x10
c00132e1:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00132e6:	74 c7                	je     c00132af <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00132e8:	81 c4 0c 04 00 00    	add    esp,0x40c
c00132ee:	5b                   	pop    ebx
c00132ef:	5e                   	pop    esi
c00132f0:	5f                   	pop    edi
c00132f1:	5d                   	pop    ebp
c00132f2:	c3                   	ret    
c00132f3:	90                   	nop

c00132f4 <File::File(char const*, Process*)>:
c00132f4:	83 ec 0c             	sub    esp,0xc
c00132f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132fb:	83 ec 08             	sub    esp,0x8
c00132fe:	6a 00                	push   0x0
c0013300:	50                   	push   eax
c0013301:	e8 f6 e3 ff ff       	call   c00116fc <UnixFile::UnixFile(int)>
c0013306:	83 c4 10             	add    esp,0x10
c0013309:	ba 44 a9 02 c0       	mov    edx,0xc002a944
c001330e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013312:	89 10                	mov    DWORD PTR [eax],edx
c0013314:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013318:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001331e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013322:	83 c0 0d             	add    eax,0xd
c0013325:	83 ec 04             	sub    esp,0x4
c0013328:	52                   	push   edx
c0013329:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001332d:	50                   	push   eax
c001332e:	e8 17 fe ff ff       	call   c001314a <Fs::standardiseFiles(char*, char const*, char const*)>
c0013333:	83 c4 10             	add    esp,0x10
c0013336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001333d:	8d 50 bf             	lea    edx,[eax-0x41]
c0013340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013344:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001334a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001334e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013352:	90                   	nop
c0013353:	83 c4 0c             	add    esp,0xc
c0013356:	c3                   	ret    
c0013357:	90                   	nop

c0013358 <File::open(FileOpenMode)>:
c0013358:	53                   	push   ebx
c0013359:	b8 0b 00 00 00       	mov    eax,0xb
c001335e:	83 ec 08             	sub    esp,0x8
c0013361:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013365:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001336c:	80 fa 19             	cmp    dl,0x19
c001336f:	77 40                	ja     c00133b1 <File::open(FileOpenMode)+0x59>
c0013371:	8b 14 95 60 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17a0]
c0013378:	85 d2                	test   edx,edx
c001337a:	74 35                	je     c00133b1 <File::open(FileOpenMode)+0x59>
c001337c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013382:	85 d2                	test   edx,edx
c0013384:	74 2b                	je     c00133b1 <File::open(FileOpenMode)+0x59>
c0013386:	b8 06 00 00 00       	mov    eax,0x6
c001338b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001338f:	75 20                	jne    c00133b1 <File::open(FileOpenMode)+0x59>
c0013391:	8b 02                	mov    eax,DWORD PTR [edx]
c0013393:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013399:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001339d:	51                   	push   ecx
c001339e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00133a1:	51                   	push   ecx
c00133a2:	52                   	push   edx
c00133a3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00133a6:	83 c4 10             	add    esp,0x10
c00133a9:	85 c0                	test   eax,eax
c00133ab:	75 04                	jne    c00133b1 <File::open(FileOpenMode)+0x59>
c00133ad:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133b1:	83 c4 08             	add    esp,0x8
c00133b4:	5b                   	pop    ebx
c00133b5:	c3                   	ret    

c00133b6 <File::close()>:
c00133b6:	53                   	push   ebx
c00133b7:	b8 0b 00 00 00       	mov    eax,0xb
c00133bc:	83 ec 08             	sub    esp,0x8
c00133bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133c3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133ca:	80 fa 19             	cmp    dl,0x19
c00133cd:	77 41                	ja     c0013410 <File::close()+0x5a>
c00133cf:	8b 1c 95 60 e8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd17a0]
c00133d6:	85 db                	test   ebx,ebx
c00133d8:	74 36                	je     c0013410 <File::close()+0x5a>
c00133da:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133e1:	74 2d                	je     c0013410 <File::close()+0x5a>
c00133e3:	b8 05 00 00 00       	mov    eax,0x5
c00133e8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133ec:	74 22                	je     c0013410 <File::close()+0x5a>
c00133ee:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133f2:	8b 04 95 60 e8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd17a0]
c00133f9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00133ff:	53                   	push   ebx
c0013400:	53                   	push   ebx
c0013401:	8b 10                	mov    edx,DWORD PTR [eax]
c0013403:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013409:	50                   	push   eax
c001340a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001340d:	83 c4 10             	add    esp,0x10
c0013410:	83 c4 08             	add    esp,0x8
c0013413:	5b                   	pop    ebx
c0013414:	c3                   	ret    
c0013415:	90                   	nop

c0013416 <File::seek(unsigned long long)>:
c0013416:	56                   	push   esi
c0013417:	53                   	push   ebx
c0013418:	b8 0b 00 00 00       	mov    eax,0xb
c001341d:	51                   	push   ecx
c001341e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013422:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013426:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001342d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013431:	80 fa 19             	cmp    dl,0x19
c0013434:	77 31                	ja     c0013467 <File::seek(unsigned long long)+0x51>
c0013436:	8b 14 95 60 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17a0]
c001343d:	85 d2                	test   edx,edx
c001343f:	74 26                	je     c0013467 <File::seek(unsigned long long)+0x51>
c0013441:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013447:	85 d2                	test   edx,edx
c0013449:	74 1c                	je     c0013467 <File::seek(unsigned long long)+0x51>
c001344b:	b8 05 00 00 00       	mov    eax,0x5
c0013450:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013454:	74 11                	je     c0013467 <File::seek(unsigned long long)+0x51>
c0013456:	8b 02                	mov    eax,DWORD PTR [edx]
c0013458:	53                   	push   ebx
c0013459:	51                   	push   ecx
c001345a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013460:	52                   	push   edx
c0013461:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013464:	83 c4 10             	add    esp,0x10
c0013467:	5a                   	pop    edx
c0013468:	5b                   	pop    ebx
c0013469:	5e                   	pop    esi
c001346a:	c3                   	ret    
c001346b:	90                   	nop

c001346c <File::tell(unsigned long long*)>:
c001346c:	83 ec 0c             	sub    esp,0xc
c001346f:	b8 0b 00 00 00       	mov    eax,0xb
c0013474:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013478:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001347f:	80 fa 19             	cmp    dl,0x19
c0013482:	77 34                	ja     c00134b8 <File::tell(unsigned long long*)+0x4c>
c0013484:	8b 14 95 60 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17a0]
c001348b:	85 d2                	test   edx,edx
c001348d:	74 29                	je     c00134b8 <File::tell(unsigned long long*)+0x4c>
c001348f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013495:	85 d2                	test   edx,edx
c0013497:	74 1f                	je     c00134b8 <File::tell(unsigned long long*)+0x4c>
c0013499:	b8 05 00 00 00       	mov    eax,0x5
c001349e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134a2:	74 14                	je     c00134b8 <File::tell(unsigned long long*)+0x4c>
c00134a4:	50                   	push   eax
c00134a5:	8b 02                	mov    eax,DWORD PTR [edx]
c00134a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134ab:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134b1:	52                   	push   edx
c00134b2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00134b5:	83 c4 10             	add    esp,0x10
c00134b8:	83 c4 0c             	add    esp,0xc
c00134bb:	c3                   	ret    

c00134bc <File::rewind()>:
c00134bc:	83 ec 10             	sub    esp,0x10
c00134bf:	6a 00                	push   0x0
c00134c1:	6a 00                	push   0x0
c00134c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134c7:	e8 4a ff ff ff       	call   c0013416 <File::seek(unsigned long long)>
c00134cc:	83 c4 1c             	add    esp,0x1c
c00134cf:	c3                   	ret    

c00134d0 <File::unlink()>:
c00134d0:	83 ec 0c             	sub    esp,0xc
c00134d3:	b8 0b 00 00 00       	mov    eax,0xb
c00134d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134dc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134e3:	80 f9 19             	cmp    cl,0x19
c00134e6:	77 2f                	ja     c0013517 <File::unlink()+0x47>
c00134e8:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c00134ef:	85 c9                	test   ecx,ecx
c00134f1:	74 24                	je     c0013517 <File::unlink()+0x47>
c00134f3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134f9:	85 c9                	test   ecx,ecx
c00134fb:	74 1a                	je     c0013517 <File::unlink()+0x47>
c00134fd:	b8 06 00 00 00       	mov    eax,0x6
c0013502:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013506:	75 0f                	jne    c0013517 <File::unlink()+0x47>
c0013508:	83 c2 0d             	add    edx,0xd
c001350b:	50                   	push   eax
c001350c:	50                   	push   eax
c001350d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001350f:	52                   	push   edx
c0013510:	51                   	push   ecx
c0013511:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013514:	83 c4 10             	add    esp,0x10
c0013517:	83 c4 0c             	add    esp,0xc
c001351a:	c3                   	ret    
c001351b:	90                   	nop

c001351c <File::rename(char const*)>:
c001351c:	83 ec 0c             	sub    esp,0xc
c001351f:	b8 0b 00 00 00       	mov    eax,0xb
c0013524:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013528:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001352f:	80 f9 19             	cmp    cl,0x19
c0013532:	77 32                	ja     c0013566 <File::rename(char const*)+0x4a>
c0013534:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c001353b:	85 c9                	test   ecx,ecx
c001353d:	74 27                	je     c0013566 <File::rename(char const*)+0x4a>
c001353f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013545:	85 c9                	test   ecx,ecx
c0013547:	74 1d                	je     c0013566 <File::rename(char const*)+0x4a>
c0013549:	b8 06 00 00 00       	mov    eax,0x6
c001354e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013552:	75 12                	jne    c0013566 <File::rename(char const*)+0x4a>
c0013554:	83 c2 0d             	add    edx,0xd
c0013557:	50                   	push   eax
c0013558:	8b 01                	mov    eax,DWORD PTR [ecx]
c001355a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001355e:	52                   	push   edx
c001355f:	51                   	push   ecx
c0013560:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013563:	83 c4 10             	add    esp,0x10
c0013566:	83 c4 0c             	add    esp,0xc
c0013569:	c3                   	ret    

c001356a <File::chfatattr(unsigned char, unsigned char)>:
c001356a:	57                   	push   edi
c001356b:	b8 0b 00 00 00       	mov    eax,0xb
c0013570:	56                   	push   esi
c0013571:	53                   	push   ebx
c0013572:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013576:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001357a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013581:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013585:	80 f9 19             	cmp    cl,0x19
c0013588:	77 37                	ja     c00135c1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001358a:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c0013591:	85 c9                	test   ecx,ecx
c0013593:	74 2c                	je     c00135c1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013595:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001359b:	85 c9                	test   ecx,ecx
c001359d:	74 22                	je     c00135c1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001359f:	b8 06 00 00 00       	mov    eax,0x6
c00135a4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135a8:	75 17                	jne    c00135c1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135aa:	8b 39                	mov    edi,DWORD PTR [ecx]
c00135ac:	89 f0                	mov    eax,esi
c00135ae:	83 c2 0d             	add    edx,0xd
c00135b1:	0f b6 f0             	movzx  esi,al
c00135b4:	0f b6 db             	movzx  ebx,bl
c00135b7:	56                   	push   esi
c00135b8:	53                   	push   ebx
c00135b9:	52                   	push   edx
c00135ba:	51                   	push   ecx
c00135bb:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00135be:	83 c4 10             	add    esp,0x10
c00135c1:	5b                   	pop    ebx
c00135c2:	5e                   	pop    esi
c00135c3:	5f                   	pop    edi
c00135c4:	c3                   	ret    
c00135c5:	90                   	nop

c00135c6 <File::exists()>:
c00135c6:	83 ec 0c             	sub    esp,0xc
c00135c9:	31 c0                	xor    eax,eax
c00135cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135cf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135d6:	80 f9 19             	cmp    cl,0x19
c00135d9:	77 24                	ja     c00135ff <File::exists()+0x39>
c00135db:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c00135e2:	85 c9                	test   ecx,ecx
c00135e4:	74 19                	je     c00135ff <File::exists()+0x39>
c00135e6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135ec:	85 c9                	test   ecx,ecx
c00135ee:	74 0f                	je     c00135ff <File::exists()+0x39>
c00135f0:	83 c2 0d             	add    edx,0xd
c00135f3:	50                   	push   eax
c00135f4:	50                   	push   eax
c00135f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135f7:	52                   	push   edx
c00135f8:	51                   	push   ecx
c00135f9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00135fc:	83 c4 10             	add    esp,0x10
c00135ff:	83 c4 0c             	add    esp,0xc
c0013602:	c3                   	ret    
c0013603:	90                   	nop

c0013604 <File::stat(unsigned long long*, bool*)>:
c0013604:	56                   	push   esi
c0013605:	53                   	push   ebx
c0013606:	50                   	push   eax
c0013607:	b8 0b 00 00 00       	mov    eax,0xb
c001360c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013610:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013614:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001361b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001361f:	80 f9 19             	cmp    cl,0x19
c0013622:	77 3d                	ja     c0013661 <File::stat(unsigned long long*, bool*)+0x5d>
c0013624:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c001362b:	85 c9                	test   ecx,ecx
c001362d:	74 32                	je     c0013661 <File::stat(unsigned long long*, bool*)+0x5d>
c001362f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013635:	85 c9                	test   ecx,ecx
c0013637:	74 28                	je     c0013661 <File::stat(unsigned long long*, bool*)+0x5d>
c0013639:	8b 01                	mov    eax,DWORD PTR [ecx]
c001363b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001363f:	74 13                	je     c0013654 <File::stat(unsigned long long*, bool*)+0x50>
c0013641:	83 ec 04             	sub    esp,0x4
c0013644:	56                   	push   esi
c0013645:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001364b:	51                   	push   ecx
c001364c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001364f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013652:	eb 0a                	jmp    c001365e <File::stat(unsigned long long*, bool*)+0x5a>
c0013654:	53                   	push   ebx
c0013655:	83 c2 0d             	add    edx,0xd
c0013658:	56                   	push   esi
c0013659:	52                   	push   edx
c001365a:	51                   	push   ecx
c001365b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001365e:	83 c4 10             	add    esp,0x10
c0013661:	5a                   	pop    edx
c0013662:	5b                   	pop    ebx
c0013663:	5e                   	pop    esi
c0013664:	c3                   	ret    

c0013665 <Fs::setcwd(Process*, char*)>:
c0013665:	55                   	push   ebp
c0013666:	57                   	push   edi
c0013667:	56                   	push   esi
c0013668:	53                   	push   ebx
c0013669:	81 ec 20 02 00 00    	sub    esp,0x220
c001366f:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013676:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001367c:	57                   	push   edi
c001367d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013684:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013688:	56                   	push   esi
c0013689:	e8 bc fa ff ff       	call   c001314a <Fs::standardiseFiles(char*, char const*, char const*)>
c001368e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013691:	e8 fe d0 fe ff       	call   c0000794 <strlen>
c0013696:	83 c4 10             	add    esp,0x10
c0013699:	83 f8 02             	cmp    eax,0x2
c001369c:	77 17                	ja     c00136b5 <Fs::setcwd(Process*, char*)+0x50>
c001369e:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00136a3:	83 e8 41             	sub    eax,0x41
c00136a6:	83 f8 19             	cmp    eax,0x19
c00136a9:	76 24                	jbe    c00136cf <Fs::setcwd(Process*, char*)+0x6a>
c00136ab:	b8 03 00 00 00       	mov    eax,0x3
c00136b0:	e9 e0 00 00 00       	jmp    c0013795 <Fs::setcwd(Process*, char*)+0x130>
c00136b5:	83 ec 0c             	sub    esp,0xc
c00136b8:	56                   	push   esi
c00136b9:	e8 d6 d0 fe ff       	call   c0000794 <strlen>
c00136be:	83 c4 10             	add    esp,0x10
c00136c1:	83 f8 03             	cmp    eax,0x3
c00136c4:	75 34                	jne    c00136fa <Fs::setcwd(Process*, char*)+0x95>
c00136c6:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00136cb:	75 2d                	jne    c00136fa <Fs::setcwd(Process*, char*)+0x95>
c00136cd:	eb cf                	jmp    c001369e <Fs::setcwd(Process*, char*)+0x39>
c00136cf:	8b 14 85 60 e8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd17a0]
c00136d6:	b8 05 00 00 00       	mov    eax,0x5
c00136db:	85 d2                	test   edx,edx
c00136dd:	0f 84 b2 00 00 00    	je     c0013795 <Fs::setcwd(Process*, char*)+0x130>
c00136e3:	b8 06 00 00 00       	mov    eax,0x6
c00136e8:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00136ef:	0f 85 92 00 00 00    	jne    c0013787 <Fs::setcwd(Process*, char*)+0x122>
c00136f5:	e9 9b 00 00 00       	jmp    c0013795 <Fs::setcwd(Process*, char*)+0x130>
c00136fa:	83 ec 0c             	sub    esp,0xc
c00136fd:	68 14 01 00 00       	push   0x114
c0013702:	e8 3c c1 ff ff       	call   c000f843 <malloc>
c0013707:	83 c4 0c             	add    esp,0xc
c001370a:	89 c3                	mov    ebx,eax
c001370c:	55                   	push   ebp
c001370d:	56                   	push   esi
c001370e:	50                   	push   eax
c001370f:	e8 e0 fb ff ff       	call   c00132f4 <File::File(char const*, Process*)>
c0013714:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013719:	83 c4 0c             	add    esp,0xc
c001371c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013720:	50                   	push   eax
c0013721:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013725:	50                   	push   eax
c0013726:	53                   	push   ebx
c0013727:	e8 d8 fe ff ff       	call   c0013604 <File::stat(unsigned long long*, bool*)>
c001372c:	83 c4 10             	add    esp,0x10
c001372f:	83 f8 02             	cmp    eax,0x2
c0013732:	74 04                	je     c0013738 <Fs::setcwd(Process*, char*)+0xd3>
c0013734:	85 c0                	test   eax,eax
c0013736:	74 1c                	je     c0013754 <Fs::setcwd(Process*, char*)+0xef>
c0013738:	b8 01 00 00 00       	mov    eax,0x1
c001373d:	85 db                	test   ebx,ebx
c001373f:	74 54                	je     c0013795 <Fs::setcwd(Process*, char*)+0x130>
c0013741:	83 ec 0c             	sub    esp,0xc
c0013744:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013746:	53                   	push   ebx
c0013747:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001374a:	83 c4 10             	add    esp,0x10
c001374d:	b8 01 00 00 00       	mov    eax,0x1
c0013752:	eb 41                	jmp    c0013795 <Fs::setcwd(Process*, char*)+0x130>
c0013754:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013759:	75 1c                	jne    c0013777 <Fs::setcwd(Process*, char*)+0x112>
c001375b:	b8 02 00 00 00       	mov    eax,0x2
c0013760:	85 db                	test   ebx,ebx
c0013762:	74 31                	je     c0013795 <Fs::setcwd(Process*, char*)+0x130>
c0013764:	83 ec 0c             	sub    esp,0xc
c0013767:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013769:	53                   	push   ebx
c001376a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001376d:	83 c4 10             	add    esp,0x10
c0013770:	b8 02 00 00 00       	mov    eax,0x2
c0013775:	eb 1e                	jmp    c0013795 <Fs::setcwd(Process*, char*)+0x130>
c0013777:	85 db                	test   ebx,ebx
c0013779:	74 0c                	je     c0013787 <Fs::setcwd(Process*, char*)+0x122>
c001377b:	83 ec 0c             	sub    esp,0xc
c001377e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013780:	53                   	push   ebx
c0013781:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013784:	83 c4 10             	add    esp,0x10
c0013787:	50                   	push   eax
c0013788:	50                   	push   eax
c0013789:	56                   	push   esi
c001378a:	57                   	push   edi
c001378b:	e8 a4 d0 fe ff       	call   c0000834 <strcpy>
c0013790:	83 c4 10             	add    esp,0x10
c0013793:	31 c0                	xor    eax,eax
c0013795:	81 c4 1c 02 00 00    	add    esp,0x21c
c001379b:	5b                   	pop    ebx
c001379c:	5e                   	pop    esi
c001379d:	5f                   	pop    edi
c001379e:	5d                   	pop    ebp
c001379f:	c3                   	ret    

c00137a0 <Directory::Directory(char const*, Process*)>:
c00137a0:	83 ec 0c             	sub    esp,0xc
c00137a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137a7:	83 ec 08             	sub    esp,0x8
c00137aa:	6a 00                	push   0x0
c00137ac:	50                   	push   eax
c00137ad:	e8 4a df ff ff       	call   c00116fc <UnixFile::UnixFile(int)>
c00137b2:	83 c4 10             	add    esp,0x10
c00137b5:	ba 60 a9 02 c0       	mov    edx,0xc002a960
c00137ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137be:	89 10                	mov    DWORD PTR [eax],edx
c00137c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137c4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00137ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ce:	83 c0 0d             	add    eax,0xd
c00137d1:	83 ec 04             	sub    esp,0x4
c00137d4:	52                   	push   edx
c00137d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137d9:	50                   	push   eax
c00137da:	e8 6b f9 ff ff       	call   c001314a <Fs::standardiseFiles(char*, char const*, char const*)>
c00137df:	83 c4 10             	add    esp,0x10
c00137e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00137e9:	8d 50 bf             	lea    edx,[eax-0x41]
c00137ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00137f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137fa:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00137fe:	90                   	nop
c00137ff:	83 c4 0c             	add    esp,0xc
c0013802:	c3                   	ret    
c0013803:	90                   	nop

c0013804 <Directory::open()>:
c0013804:	53                   	push   ebx
c0013805:	b8 0b 00 00 00       	mov    eax,0xb
c001380a:	83 ec 08             	sub    esp,0x8
c001380d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013811:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013818:	80 fa 19             	cmp    dl,0x19
c001381b:	77 3d                	ja     c001385a <Directory::open()+0x56>
c001381d:	8b 14 95 60 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17a0]
c0013824:	85 d2                	test   edx,edx
c0013826:	74 32                	je     c001385a <Directory::open()+0x56>
c0013828:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001382e:	85 d2                	test   edx,edx
c0013830:	74 28                	je     c001385a <Directory::open()+0x56>
c0013832:	b8 06 00 00 00       	mov    eax,0x6
c0013837:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001383b:	75 1d                	jne    c001385a <Directory::open()+0x56>
c001383d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013843:	50                   	push   eax
c0013844:	8b 02                	mov    eax,DWORD PTR [edx]
c0013846:	51                   	push   ecx
c0013847:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001384a:	51                   	push   ecx
c001384b:	52                   	push   edx
c001384c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001384f:	83 c4 10             	add    esp,0x10
c0013852:	85 c0                	test   eax,eax
c0013854:	75 04                	jne    c001385a <Directory::open()+0x56>
c0013856:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001385a:	83 c4 08             	add    esp,0x8
c001385d:	5b                   	pop    ebx
c001385e:	c3                   	ret    
c001385f:	90                   	nop

c0013860 <Directory::close()>:
c0013860:	53                   	push   ebx
c0013861:	b8 0b 00 00 00       	mov    eax,0xb
c0013866:	83 ec 08             	sub    esp,0x8
c0013869:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001386d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013874:	80 fa 19             	cmp    dl,0x19
c0013877:	77 41                	ja     c00138ba <Directory::close()+0x5a>
c0013879:	8b 1c 95 60 e8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd17a0]
c0013880:	85 db                	test   ebx,ebx
c0013882:	74 36                	je     c00138ba <Directory::close()+0x5a>
c0013884:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001388b:	74 2d                	je     c00138ba <Directory::close()+0x5a>
c001388d:	b8 05 00 00 00       	mov    eax,0x5
c0013892:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013896:	74 22                	je     c00138ba <Directory::close()+0x5a>
c0013898:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001389c:	8b 04 95 60 e8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd17a0]
c00138a3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00138a9:	53                   	push   ebx
c00138aa:	53                   	push   ebx
c00138ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00138ad:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00138b3:	50                   	push   eax
c00138b4:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00138b7:	83 c4 10             	add    esp,0x10
c00138ba:	83 c4 08             	add    esp,0x8
c00138bd:	5b                   	pop    ebx
c00138be:	c3                   	ret    
c00138bf:	90                   	nop

c00138c0 <Directory::unlink()>:
c00138c0:	83 ec 0c             	sub    esp,0xc
c00138c3:	b8 0b 00 00 00       	mov    eax,0xb
c00138c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00138d3:	80 f9 19             	cmp    cl,0x19
c00138d6:	77 2f                	ja     c0013907 <Directory::unlink()+0x47>
c00138d8:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c00138df:	85 c9                	test   ecx,ecx
c00138e1:	74 24                	je     c0013907 <Directory::unlink()+0x47>
c00138e3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00138e9:	85 c9                	test   ecx,ecx
c00138eb:	74 1a                	je     c0013907 <Directory::unlink()+0x47>
c00138ed:	b8 06 00 00 00       	mov    eax,0x6
c00138f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00138f6:	75 0f                	jne    c0013907 <Directory::unlink()+0x47>
c00138f8:	83 c2 0d             	add    edx,0xd
c00138fb:	50                   	push   eax
c00138fc:	50                   	push   eax
c00138fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00138ff:	52                   	push   edx
c0013900:	51                   	push   ecx
c0013901:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013904:	83 c4 10             	add    esp,0x10
c0013907:	83 c4 0c             	add    esp,0xc
c001390a:	c3                   	ret    
c001390b:	90                   	nop

c001390c <Directory::rename(char const*)>:
c001390c:	83 ec 0c             	sub    esp,0xc
c001390f:	b8 0b 00 00 00       	mov    eax,0xb
c0013914:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013918:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001391f:	80 f9 19             	cmp    cl,0x19
c0013922:	77 32                	ja     c0013956 <Directory::rename(char const*)+0x4a>
c0013924:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c001392b:	85 c9                	test   ecx,ecx
c001392d:	74 27                	je     c0013956 <Directory::rename(char const*)+0x4a>
c001392f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013935:	85 c9                	test   ecx,ecx
c0013937:	74 1d                	je     c0013956 <Directory::rename(char const*)+0x4a>
c0013939:	b8 06 00 00 00       	mov    eax,0x6
c001393e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013942:	75 12                	jne    c0013956 <Directory::rename(char const*)+0x4a>
c0013944:	83 c2 0d             	add    edx,0xd
c0013947:	50                   	push   eax
c0013948:	8b 01                	mov    eax,DWORD PTR [ecx]
c001394a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001394e:	52                   	push   edx
c001394f:	51                   	push   ecx
c0013950:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013953:	83 c4 10             	add    esp,0x10
c0013956:	83 c4 0c             	add    esp,0xc
c0013959:	c3                   	ret    

c001395a <Directory::exists()>:
c001395a:	83 ec 0c             	sub    esp,0xc
c001395d:	31 c0                	xor    eax,eax
c001395f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013963:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001396a:	80 f9 19             	cmp    cl,0x19
c001396d:	77 24                	ja     c0013993 <Directory::exists()+0x39>
c001396f:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c0013976:	85 c9                	test   ecx,ecx
c0013978:	74 19                	je     c0013993 <Directory::exists()+0x39>
c001397a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013980:	85 c9                	test   ecx,ecx
c0013982:	74 0f                	je     c0013993 <Directory::exists()+0x39>
c0013984:	83 c2 0d             	add    edx,0xd
c0013987:	50                   	push   eax
c0013988:	50                   	push   eax
c0013989:	8b 01                	mov    eax,DWORD PTR [ecx]
c001398b:	52                   	push   edx
c001398c:	51                   	push   ecx
c001398d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013990:	83 c4 10             	add    esp,0x10
c0013993:	83 c4 0c             	add    esp,0xc
c0013996:	c3                   	ret    
c0013997:	90                   	nop

c0013998 <Directory::read(dirent*)>:
c0013998:	83 ec 1c             	sub    esp,0x1c
c001399b:	b8 0b 00 00 00       	mov    eax,0xb
c00139a0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00139a4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139ab:	80 fa 19             	cmp    dl,0x19
c00139ae:	77 30                	ja     c00139e0 <Directory::read(dirent*)+0x48>
c00139b0:	8b 14 95 60 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17a0]
c00139b7:	85 d2                	test   edx,edx
c00139b9:	74 25                	je     c00139e0 <Directory::read(dirent*)+0x48>
c00139bb:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00139c2:	74 1c                	je     c00139e0 <Directory::read(dirent*)+0x48>
c00139c4:	83 ec 0c             	sub    esp,0xc
c00139c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139c9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00139cd:	52                   	push   edx
c00139ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00139d2:	6a 00                	push   0x0
c00139d4:	68 10 01 00 00       	push   0x110
c00139d9:	51                   	push   ecx
c00139da:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00139dd:	83 c4 20             	add    esp,0x20
c00139e0:	83 c4 1c             	add    esp,0x1c
c00139e3:	c3                   	ret    

c00139e4 <Directory::create()>:
c00139e4:	83 ec 0c             	sub    esp,0xc
c00139e7:	b8 0b 00 00 00       	mov    eax,0xb
c00139ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139f0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139f7:	80 f9 19             	cmp    cl,0x19
c00139fa:	77 2f                	ja     c0013a2b <Directory::create()+0x47>
c00139fc:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c0013a03:	85 c9                	test   ecx,ecx
c0013a05:	74 24                	je     c0013a2b <Directory::create()+0x47>
c0013a07:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a0d:	85 c9                	test   ecx,ecx
c0013a0f:	74 1a                	je     c0013a2b <Directory::create()+0x47>
c0013a11:	b8 06 00 00 00       	mov    eax,0x6
c0013a16:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a1a:	75 0f                	jne    c0013a2b <Directory::create()+0x47>
c0013a1c:	83 c2 0d             	add    edx,0xd
c0013a1f:	50                   	push   eax
c0013a20:	50                   	push   eax
c0013a21:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a23:	52                   	push   edx
c0013a24:	51                   	push   ecx
c0013a25:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013a28:	83 c4 10             	add    esp,0x10
c0013a2b:	83 c4 0c             	add    esp,0xc
c0013a2e:	c3                   	ret    
c0013a2f:	90                   	nop

c0013a30 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013a30:	b8 0a 00 00 00       	mov    eax,0xa
c0013a35:	c3                   	ret    

c0013a36 <Bus::Bus(char const*)>:
c0013a36:	83 ec 0c             	sub    esp,0xc
c0013a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a3d:	83 ec 08             	sub    esp,0x8
c0013a40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a44:	50                   	push   eax
c0013a45:	e8 68 09 00 00       	call   c00143b2 <Device::Device(char const*)>
c0013a4a:	83 c4 10             	add    esp,0x10
c0013a4d:	ba 7c a9 02 c0       	mov    edx,0xc002a97c
c0013a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a56:	89 10                	mov    DWORD PTR [eax],edx
c0013a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a5c:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013a66:	90                   	nop
c0013a67:	83 c4 0c             	add    esp,0xc
c0013a6a:	c3                   	ret    
c0013a6b:	90                   	nop

c0013a6c <Bus::~Bus()>:
c0013a6c:	83 ec 0c             	sub    esp,0xc
c0013a6f:	ba 7c a9 02 c0       	mov    edx,0xc002a97c
c0013a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a78:	89 10                	mov    DWORD PTR [eax],edx
c0013a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a7e:	83 ec 0c             	sub    esp,0xc
c0013a81:	50                   	push   eax
c0013a82:	e8 0d 06 00 00       	call   c0014094 <Device::~Device()>
c0013a87:	83 c4 10             	add    esp,0x10
c0013a8a:	90                   	nop
c0013a8b:	83 c4 0c             	add    esp,0xc
c0013a8e:	c3                   	ret    
c0013a8f:	90                   	nop

c0013a90 <Bus::~Bus()>:
c0013a90:	83 ec 0c             	sub    esp,0xc
c0013a93:	83 ec 0c             	sub    esp,0xc
c0013a96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a9a:	e8 cd ff ff ff       	call   c0013a6c <Bus::~Bus()>
c0013a9f:	83 c4 10             	add    esp,0x10
c0013aa2:	83 ec 08             	sub    esp,0x8
c0013aa5:	68 58 01 00 00       	push   0x158
c0013aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013aae:	e8 09 f2 ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0013ab3:	83 c4 10             	add    esp,0x10
c0013ab6:	83 c4 0c             	add    esp,0xc
c0013ab9:	c3                   	ret    

c0013aba <Buzzer::Buzzer(char const*)>:
c0013aba:	83 ec 0c             	sub    esp,0xc
c0013abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ac1:	83 ec 08             	sub    esp,0x8
c0013ac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ac8:	50                   	push   eax
c0013ac9:	e8 e4 08 00 00       	call   c00143b2 <Device::Device(char const*)>
c0013ace:	83 c4 10             	add    esp,0x10
c0013ad1:	ba a8 a9 02 c0       	mov    edx,0xc002a9a8
c0013ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ada:	89 10                	mov    DWORD PTR [eax],edx
c0013adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ae0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aee:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013af8:	90                   	nop
c0013af9:	83 c4 0c             	add    esp,0xc
c0013afc:	c3                   	ret    
c0013afd:	90                   	nop

c0013afe <Buzzer::~Buzzer()>:
c0013afe:	83 ec 0c             	sub    esp,0xc
c0013b01:	ba a8 a9 02 c0       	mov    edx,0xc002a9a8
c0013b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b0a:	89 10                	mov    DWORD PTR [eax],edx
c0013b0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b10:	83 ec 0c             	sub    esp,0xc
c0013b13:	50                   	push   eax
c0013b14:	e8 7b 05 00 00       	call   c0014094 <Device::~Device()>
c0013b19:	83 c4 10             	add    esp,0x10
c0013b1c:	90                   	nop
c0013b1d:	83 c4 0c             	add    esp,0xc
c0013b20:	c3                   	ret    
c0013b21:	90                   	nop

c0013b22 <Buzzer::~Buzzer()>:
c0013b22:	83 ec 0c             	sub    esp,0xc
c0013b25:	83 ec 0c             	sub    esp,0xc
c0013b28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b2c:	e8 cd ff ff ff       	call   c0013afe <Buzzer::~Buzzer()>
c0013b31:	83 c4 10             	add    esp,0x10
c0013b34:	83 ec 08             	sub    esp,0x8
c0013b37:	68 5c 01 00 00       	push   0x15c
c0013b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b40:	e8 77 f1 ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0013b45:	83 c4 10             	add    esp,0x10
c0013b48:	83 c4 0c             	add    esp,0xc
c0013b4b:	c3                   	ret    

c0013b4c <Buzzer::stop()>:
c0013b4c:	83 ec 14             	sub    esp,0x14
c0013b4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b53:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b55:	6a 00                	push   0x0
c0013b57:	50                   	push   eax
c0013b58:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013b5b:	83 c4 1c             	add    esp,0x1c
c0013b5e:	c3                   	ret    

c0013b5f <beepThread(void*)>:
c0013b5f:	53                   	push   ebx
c0013b60:	83 ec 08             	sub    esp,0x8
c0013b63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b67:	e8 07 a1 00 00       	call   c001dc73 <unlockScheduler()>
c0013b6c:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013b71:	52                   	push   edx
c0013b72:	52                   	push   edx
c0013b73:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013b79:	52                   	push   edx
c0013b7a:	50                   	push   eax
c0013b7b:	e8 40 a6 00 00       	call   c001e1c0 <nanoSleep(unsigned long long)>
c0013b80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b83:	e8 c4 ff ff ff       	call   c0013b4c <Buzzer::stop()>
c0013b88:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013b90:	83 c4 18             	add    esp,0x18
c0013b93:	5b                   	pop    ebx
c0013b94:	e9 6d a5 00 00       	jmp    c001e106 <blockTask(TaskState)>
c0013b99:	90                   	nop

c0013b9a <Buzzer::beep(int, int, bool)>:
c0013b9a:	57                   	push   edi
c0013b9b:	56                   	push   esi
c0013b9c:	53                   	push   ebx
c0013b9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ba1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ba5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ba9:	52                   	push   edx
c0013baa:	52                   	push   edx
c0013bab:	8b 06                	mov    eax,DWORD PTR [esi]
c0013bad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bb1:	56                   	push   esi
c0013bb2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013bb5:	83 c4 10             	add    esp,0x10
c0013bb8:	89 f8                	mov    eax,edi
c0013bba:	84 c0                	test   al,al
c0013bbc:	74 1f                	je     c0013bdd <Buzzer::beep(int, int, bool)+0x43>
c0013bbe:	50                   	push   eax
c0013bbf:	50                   	push   eax
c0013bc0:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013bc6:	99                   	cdq    
c0013bc7:	52                   	push   edx
c0013bc8:	50                   	push   eax
c0013bc9:	e8 f2 a5 00 00       	call   c001e1c0 <nanoSleep(unsigned long long)>
c0013bce:	83 c4 10             	add    esp,0x10
c0013bd1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013bd5:	5b                   	pop    ebx
c0013bd6:	5e                   	pop    esi
c0013bd7:	5f                   	pop    edi
c0013bd8:	e9 6f ff ff ff       	jmp    c0013b4c <Buzzer::stop()>
c0013bdd:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013be3:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0013be8:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013bf0:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013bf4:	c7 44 24 14 5f 3b 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013b5f
c0013bfc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013c00:	5b                   	pop    ebx
c0013c01:	5e                   	pop    esi
c0013c02:	5f                   	pop    edi
c0013c03:	e9 9a a1 00 00       	jmp    c001dda2 <Process::createThread(void (*)(void*), void*, int)>

c0013c08 <User::loadClockSettings(int)>:
c0013c08:	53                   	push   ebx
c0013c09:	83 ec 14             	sub    esp,0x14
c0013c0c:	68 14 01 00 00       	push   0x114
c0013c11:	e8 2d bc ff ff       	call   c000f843 <malloc>
c0013c16:	83 c4 0c             	add    esp,0xc
c0013c19:	89 c3                	mov    ebx,eax
c0013c1b:	ff 35 b4 17 03 c0    	push   DWORD PTR ds:0xc00317b4
c0013c21:	68 d0 a9 02 c0       	push   0xc002a9d0
c0013c26:	50                   	push   eax
c0013c27:	e8 c8 f6 ff ff       	call   c00132f4 <File::File(char const*, Process*)>
c0013c2c:	58                   	pop    eax
c0013c2d:	5a                   	pop    edx
c0013c2e:	6a 01                	push   0x1
c0013c30:	53                   	push   ebx
c0013c31:	e8 22 f7 ff ff       	call   c0013358 <File::open(FileOpenMode)>
c0013c36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c39:	e8 78 f7 ff ff       	call   c00133b6 <File::close()>
c0013c3e:	83 c4 10             	add    esp,0x10
c0013c41:	85 db                	test   ebx,ebx
c0013c43:	74 0f                	je     c0013c54 <User::loadClockSettings(int)+0x4c>
c0013c45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c47:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013c4b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013c4e:	83 c4 08             	add    esp,0x8
c0013c51:	5b                   	pop    ebx
c0013c52:	ff e0                	jmp    eax
c0013c54:	83 c4 08             	add    esp,0x8
c0013c57:	5b                   	pop    ebx
c0013c58:	c3                   	ret    
c0013c59:	90                   	nop

c0013c5a <Clock::Clock(char const*)>:
c0013c5a:	83 ec 0c             	sub    esp,0xc
c0013c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c61:	83 ec 08             	sub    esp,0x8
c0013c64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c68:	50                   	push   eax
c0013c69:	e8 44 07 00 00       	call   c00143b2 <Device::Device(char const*)>
c0013c6e:	83 c4 10             	add    esp,0x10
c0013c71:	ba f8 a9 02 c0       	mov    edx,0xc002a9f8
c0013c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c7a:	89 10                	mov    DWORD PTR [eax],edx
c0013c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c80:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013c8a:	90                   	nop
c0013c8b:	83 c4 0c             	add    esp,0xc
c0013c8e:	c3                   	ret    
c0013c8f:	90                   	nop

c0013c90 <Clock::~Clock()>:
c0013c90:	83 ec 0c             	sub    esp,0xc
c0013c93:	ba f8 a9 02 c0       	mov    edx,0xc002a9f8
c0013c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c9c:	89 10                	mov    DWORD PTR [eax],edx
c0013c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca2:	83 ec 0c             	sub    esp,0xc
c0013ca5:	50                   	push   eax
c0013ca6:	e8 e9 03 00 00       	call   c0014094 <Device::~Device()>
c0013cab:	83 c4 10             	add    esp,0x10
c0013cae:	90                   	nop
c0013caf:	83 c4 0c             	add    esp,0xc
c0013cb2:	c3                   	ret    
c0013cb3:	90                   	nop

c0013cb4 <Clock::~Clock()>:
c0013cb4:	83 ec 0c             	sub    esp,0xc
c0013cb7:	83 ec 0c             	sub    esp,0xc
c0013cba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cbe:	e8 cd ff ff ff       	call   c0013c90 <Clock::~Clock()>
c0013cc3:	83 c4 10             	add    esp,0x10
c0013cc6:	83 ec 08             	sub    esp,0x8
c0013cc9:	68 58 01 00 00       	push   0x158
c0013cce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cd2:	e8 e5 ef ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0013cd7:	83 c4 10             	add    esp,0x10
c0013cda:	83 c4 0c             	add    esp,0xc
c0013cdd:	c3                   	ret    

c0013cde <Clock::timeInSecondsLocal()>:
c0013cde:	53                   	push   ebx
c0013cdf:	83 ec 14             	sub    esp,0x14
c0013ce2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ce6:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ce8:	50                   	push   eax
c0013ce9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013cec:	0f b6 0d d8 e3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e3d8
c0013cf3:	03 0d dc e3 02 c0    	add    ecx,DWORD PTR ds:0xc002e3dc
c0013cf9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013cff:	89 cb                	mov    ebx,ecx
c0013d01:	c1 fb 1f             	sar    ebx,0x1f
c0013d04:	01 c8                	add    eax,ecx
c0013d06:	11 da                	adc    edx,ebx
c0013d08:	83 c4 10             	add    esp,0x10
c0013d0b:	31 c9                	xor    ecx,ecx
c0013d0d:	80 3d d9 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3d9,0x0
c0013d14:	74 05                	je     c0013d1b <Clock::timeInSecondsLocal()+0x3d>
c0013d16:	b9 08 07 00 00       	mov    ecx,0x708
c0013d1b:	31 db                	xor    ebx,ebx
c0013d1d:	01 c8                	add    eax,ecx
c0013d1f:	11 da                	adc    edx,ebx
c0013d21:	83 c4 08             	add    esp,0x8
c0013d24:	5b                   	pop    ebx
c0013d25:	c3                   	ret    

c0013d26 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013d26:	57                   	push   edi
c0013d27:	56                   	push   esi
c0013d28:	53                   	push   ebx
c0013d29:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013d2d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d31:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d33:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d37:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013d3a:	0f b6 05 d8 e3 02 c0 	movzx  eax,BYTE PTR ds:0xc002e3d8
c0013d41:	03 05 dc e3 02 c0    	add    eax,DWORD PTR ds:0xc002e3dc
c0013d47:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013d4d:	99                   	cdq    
c0013d4e:	29 c6                	sub    esi,eax
c0013d50:	19 d7                	sbb    edi,edx
c0013d52:	89 f0                	mov    eax,esi
c0013d54:	89 fa                	mov    edx,edi
c0013d56:	31 f6                	xor    esi,esi
c0013d58:	80 3d d9 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3d9,0x0
c0013d5f:	74 05                	je     c0013d66 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013d61:	be 08 07 00 00       	mov    esi,0x708
c0013d66:	31 ff                	xor    edi,edi
c0013d68:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013d6c:	29 f0                	sub    eax,esi
c0013d6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d72:	19 fa                	sbb    edx,edi
c0013d74:	89 d8                	mov    eax,ebx
c0013d76:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013d7a:	5b                   	pop    ebx
c0013d7b:	5e                   	pop    esi
c0013d7c:	5f                   	pop    edi
c0013d7d:	ff e0                	jmp    eax

c0013d7f <datetimeToSeconds(datetime_t)>:
c0013d7f:	55                   	push   ebp
c0013d80:	57                   	push   edi
c0013d81:	56                   	push   esi
c0013d82:	53                   	push   ebx
c0013d83:	83 ec 14             	sub    esp,0x14
c0013d86:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013d8a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013d8e:	89 d3                	mov    ebx,edx
c0013d90:	0f b6 c6             	movzx  eax,dh
c0013d93:	c1 eb 10             	shr    ebx,0x10
c0013d96:	48                   	dec    eax
c0013d97:	66 81 eb 6c 07       	sub    bx,0x76c
c0013d9c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013da0:	0f b6 f5             	movzx  esi,ch
c0013da3:	89 cf                	mov    edi,ecx
c0013da5:	6b f6 3c             	imul   esi,esi,0x3c
c0013da8:	c1 ef 10             	shr    edi,0x10
c0013dab:	0f b6 c9             	movzx  ecx,cl
c0013dae:	89 f8                	mov    eax,edi
c0013db0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013db6:	0f b6 f8             	movzx  edi,al
c0013db9:	0f b6 d2             	movzx  edx,dl
c0013dbc:	01 fe                	add    esi,edi
c0013dbe:	01 f1                	add    ecx,esi
c0013dc0:	0f b7 f3             	movzx  esi,bx
c0013dc3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013dc7:	c1 f9 1f             	sar    ecx,0x1f
c0013dca:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013dcf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013dd3:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013dd8:	8b 0c 8d 40 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55c0]
c0013ddf:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013de3:	76 29                	jbe    c0013e0e <datetimeToSeconds(datetime_t)+0x8f>
c0013de5:	f6 c3 03             	test   bl,0x3
c0013de8:	75 24                	jne    c0013e0e <datetimeToSeconds(datetime_t)+0x8f>
c0013dea:	31 d2                	xor    edx,edx
c0013dec:	bf 64 00 00 00       	mov    edi,0x64
c0013df1:	89 d8                	mov    eax,ebx
c0013df3:	66 f7 f7             	div    di
c0013df6:	66 85 d2             	test   dx,dx
c0013df9:	75 12                	jne    c0013e0d <datetimeToSeconds(datetime_t)+0x8e>
c0013dfb:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013e01:	bf 90 01 00 00       	mov    edi,0x190
c0013e06:	99                   	cdq    
c0013e07:	f7 ff                	idiv   edi
c0013e09:	85 d2                	test   edx,edx
c0013e0b:	75 01                	jne    c0013e0e <datetimeToSeconds(datetime_t)+0x8f>
c0013e0d:	41                   	inc    ecx
c0013e0e:	66 83 fb 46          	cmp    bx,0x46
c0013e12:	76 45                	jbe    c0013e59 <datetimeToSeconds(datetime_t)+0xda>
c0013e14:	bb 46 00 00 00       	mov    ebx,0x46
c0013e19:	bf 64 00 00 00       	mov    edi,0x64
c0013e1e:	bd 90 01 00 00       	mov    ebp,0x190
c0013e23:	b8 6d 01 00 00       	mov    eax,0x16d
c0013e28:	f6 c3 03             	test   bl,0x3
c0013e2b:	75 23                	jne    c0013e50 <datetimeToSeconds(datetime_t)+0xd1>
c0013e2d:	89 d8                	mov    eax,ebx
c0013e2f:	99                   	cdq    
c0013e30:	f7 ff                	idiv   edi
c0013e32:	b8 6e 01 00 00       	mov    eax,0x16e
c0013e37:	85 d2                	test   edx,edx
c0013e39:	75 15                	jne    c0013e50 <datetimeToSeconds(datetime_t)+0xd1>
c0013e3b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013e41:	99                   	cdq    
c0013e42:	f7 fd                	idiv   ebp
c0013e44:	83 fa 01             	cmp    edx,0x1
c0013e47:	19 c0                	sbb    eax,eax
c0013e49:	f7 d0                	not    eax
c0013e4b:	05 6e 01 00 00       	add    eax,0x16e
c0013e50:	01 c1                	add    ecx,eax
c0013e52:	43                   	inc    ebx
c0013e53:	39 f3                	cmp    ebx,esi
c0013e55:	7c cc                	jl     c0013e23 <datetimeToSeconds(datetime_t)+0xa4>
c0013e57:	eb 35                	jmp    c0013e8e <datetimeToSeconds(datetime_t)+0x10f>
c0013e59:	74 33                	je     c0013e8e <datetimeToSeconds(datetime_t)+0x10f>
c0013e5b:	b8 45 00 00 00       	mov    eax,0x45
c0013e60:	89 c2                	mov    edx,eax
c0013e62:	83 e2 03             	and    edx,0x3
c0013e65:	39 f0                	cmp    eax,esi
c0013e67:	7e 0f                	jle    c0013e78 <datetimeToSeconds(datetime_t)+0xf9>
c0013e69:	83 fa 01             	cmp    edx,0x1
c0013e6c:	19 d2                	sbb    edx,edx
c0013e6e:	48                   	dec    eax
c0013e6f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013e76:	eb e8                	jmp    c0013e60 <datetimeToSeconds(datetime_t)+0xe1>
c0013e78:	b8 6d 01 00 00       	mov    eax,0x16d
c0013e7d:	85 d2                	test   edx,edx
c0013e7f:	75 0b                	jne    c0013e8c <datetimeToSeconds(datetime_t)+0x10d>
c0013e81:	66 83 fb 01          	cmp    bx,0x1
c0013e85:	19 c0                	sbb    eax,eax
c0013e87:	05 6e 01 00 00       	add    eax,0x16e
c0013e8c:	29 c1                	sub    ecx,eax
c0013e8e:	b8 80 51 01 00       	mov    eax,0x15180
c0013e93:	f7 e9                	imul   ecx
c0013e95:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013e99:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013e9d:	83 c4 14             	add    esp,0x14
c0013ea0:	5b                   	pop    ebx
c0013ea1:	5e                   	pop    esi
c0013ea2:	5f                   	pop    edi
c0013ea3:	5d                   	pop    ebp
c0013ea4:	c3                   	ret    
c0013ea5:	90                   	nop

c0013ea6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013ea6:	57                   	push   edi
c0013ea7:	56                   	push   esi
c0013ea8:	53                   	push   ebx
c0013ea9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ead:	8b 06                	mov    eax,DWORD PTR [esi]
c0013eaf:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013eb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013eb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013eba:	e8 c0 fe ff ff       	call   c0013d7f <datetimeToSeconds(datetime_t)>
c0013ebf:	59                   	pop    ecx
c0013ec0:	0f b6 0d d8 e3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e3d8
c0013ec7:	5b                   	pop    ebx
c0013ec8:	03 0d dc e3 02 c0    	add    ecx,DWORD PTR ds:0xc002e3dc
c0013ece:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ed4:	89 cb                	mov    ebx,ecx
c0013ed6:	c1 fb 1f             	sar    ebx,0x1f
c0013ed9:	29 c8                	sub    eax,ecx
c0013edb:	19 da                	sbb    edx,ebx
c0013edd:	31 c9                	xor    ecx,ecx
c0013edf:	80 3d d9 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3d9,0x0
c0013ee6:	74 05                	je     c0013eed <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013ee8:	b9 08 07 00 00       	mov    ecx,0x708
c0013eed:	31 db                	xor    ebx,ebx
c0013eef:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013ef3:	29 c8                	sub    eax,ecx
c0013ef5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ef9:	19 da                	sbb    edx,ebx
c0013efb:	89 f8                	mov    eax,edi
c0013efd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f01:	5b                   	pop    ebx
c0013f02:	5e                   	pop    esi
c0013f03:	5f                   	pop    edi
c0013f04:	ff e0                	jmp    eax

c0013f06 <secondsToDatetime(unsigned long long)>:
c0013f06:	55                   	push   ebp
c0013f07:	57                   	push   edi
c0013f08:	56                   	push   esi
c0013f09:	53                   	push   ebx
c0013f0a:	83 ec 1c             	sub    esp,0x1c
c0013f0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f11:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013f15:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013f19:	6a 00                	push   0x0
c0013f1b:	68 80 51 01 00       	push   0x15180
c0013f20:	55                   	push   ebp
c0013f21:	57                   	push   edi
c0013f22:	e8 55 29 01 00       	call   c002687c <__udivdi3>
c0013f27:	83 c4 10             	add    esp,0x10
c0013f2a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013f30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f34:	6a 00                	push   0x0
c0013f36:	68 80 51 01 00       	push   0x15180
c0013f3b:	55                   	push   ebp
c0013f3c:	57                   	push   edi
c0013f3d:	bf 10 0e 00 00       	mov    edi,0xe10
c0013f42:	e8 35 2a 01 00       	call   c002697c <__umoddi3>
c0013f47:	83 c4 10             	add    esp,0x10
c0013f4a:	99                   	cdq    
c0013f4b:	f7 ff                	idiv   edi
c0013f4d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013f52:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013f55:	89 d0                	mov    eax,edx
c0013f57:	99                   	cdq    
c0013f58:	f7 ff                	idiv   edi
c0013f5a:	85 db                	test   ebx,ebx
c0013f5c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013f5f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013f62:	79 11                	jns    c0013f75 <secondsToDatetime(unsigned long long)+0x6f>
c0013f64:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013f68:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013f6e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013f73:	eb 07                	jmp    c0013f7c <secondsToDatetime(unsigned long long)+0x76>
c0013f75:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013f7a:	89 d8                	mov    eax,ebx
c0013f7c:	bf b4 05 00 00       	mov    edi,0x5b4
c0013f81:	99                   	cdq    
c0013f82:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013f87:	f7 f9                	idiv   ecx
c0013f89:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013f8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f92:	31 d2                	xor    edx,edx
c0013f94:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013f9c:	01 c3                	add    ebx,eax
c0013f9e:	89 d8                	mov    eax,ebx
c0013fa0:	f7 f1                	div    ecx
c0013fa2:	31 d2                	xor    edx,edx
c0013fa4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013fa7:	89 d8                	mov    eax,ebx
c0013fa9:	f7 f7                	div    edi
c0013fab:	31 d2                	xor    edx,edx
c0013fad:	29 c1                	sub    ecx,eax
c0013faf:	89 d8                	mov    eax,ebx
c0013fb1:	f7 f5                	div    ebp
c0013fb3:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013fb8:	29 c1                	sub    ecx,eax
c0013fba:	31 d2                	xor    edx,edx
c0013fbc:	89 c8                	mov    eax,ecx
c0013fbe:	f7 f5                	div    ebp
c0013fc0:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013fc5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013fc9:	31 d2                	xor    edx,edx
c0013fcb:	89 c8                	mov    eax,ecx
c0013fcd:	f7 f5                	div    ebp
c0013fcf:	31 d2                	xor    edx,edx
c0013fd1:	01 c3                	add    ebx,eax
c0013fd3:	89 c8                	mov    eax,ecx
c0013fd5:	f7 f7                	div    edi
c0013fd7:	bf 99 00 00 00       	mov    edi,0x99
c0013fdc:	29 c3                	sub    ebx,eax
c0013fde:	31 d2                	xor    edx,edx
c0013fe0:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013fe8:	29 c3                	sub    ebx,eax
c0013fea:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013fed:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013ff0:	bb 05 00 00 00       	mov    ebx,0x5
c0013ff5:	83 c1 02             	add    ecx,0x2
c0013ff8:	89 c8                	mov    eax,ecx
c0013ffa:	f7 f7                	div    edi
c0013ffc:	31 d2                	xor    edx,edx
c0013ffe:	89 c7                	mov    edi,eax
c0014000:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014006:	83 c0 02             	add    eax,0x2
c0014009:	f7 f3                	div    ebx
c001400b:	89 eb                	mov    ebx,ebp
c001400d:	29 c3                	sub    ebx,eax
c001400f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014015:	88 1e                	mov    BYTE PTR [esi],bl
c0014017:	19 c0                	sbb    eax,eax
c0014019:	31 d2                	xor    edx,edx
c001401b:	83 e0 0c             	and    eax,0xc
c001401e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014022:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001402a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001402e:	83 f9 01             	cmp    ecx,0x1
c0014031:	0f 96 c2             	setbe  dl
c0014034:	41                   	inc    ecx
c0014035:	01 d0                	add    eax,edx
c0014037:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001403a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001403e:	83 c4 1c             	add    esp,0x1c
c0014041:	89 f0                	mov    eax,esi
c0014043:	5b                   	pop    ebx
c0014044:	5e                   	pop    esi
c0014045:	5f                   	pop    edi
c0014046:	5d                   	pop    ebp
c0014047:	c2 04 00             	ret    0x4

c001404a <Clock::timeInDatetimeLocal()>:
c001404a:	53                   	push   ebx
c001404b:	83 ec 14             	sub    esp,0x14
c001404e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014052:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014056:	e8 83 fc ff ff       	call   c0013cde <Clock::timeInSecondsLocal()>
c001405b:	83 c4 0c             	add    esp,0xc
c001405e:	52                   	push   edx
c001405f:	50                   	push   eax
c0014060:	53                   	push   ebx
c0014061:	e8 a0 fe ff ff       	call   c0013f06 <secondsToDatetime(unsigned long long)>
c0014066:	89 d8                	mov    eax,ebx
c0014068:	83 c4 14             	add    esp,0x14
c001406b:	5b                   	pop    ebx
c001406c:	c2 04 00             	ret    0x4
c001406f:	90                   	nop

c0014070 <Device::hibernate()>:
c0014070:	c3                   	ret    
c0014071:	90                   	nop

c0014072 <Device::wake()>:
c0014072:	c3                   	ret    
c0014073:	90                   	nop

c0014074 <Device::detect()>:
c0014074:	c3                   	ret    
c0014075:	90                   	nop

c0014076 <Device::disableLegacy()>:
c0014076:	c3                   	ret    
c0014077:	90                   	nop

c0014078 <Device::powerSaving(PowerSavingLevel)>:
c0014078:	c3                   	ret    
c0014079:	90                   	nop

c001407a <DriverlessDevice::close(int, int, void*)>:
c001407a:	31 c0                	xor    eax,eax
c001407c:	c3                   	ret    
c001407d:	90                   	nop

c001407e <DriverlessDevice::detect()>:
c001407e:	c3                   	ret    
c001407f:	90                   	nop

c0014080 <DriverlessDevice::open(int, int, void*)>:
c0014080:	83 ec 18             	sub    esp,0x18
c0014083:	68 70 aa 02 c0       	push   0xc002aa70
c0014088:	e8 ea 63 00 00       	call   c001a477 <Krnl::panic(char const*)>
c001408d:	83 c8 ff             	or     eax,0xffffffff
c0014090:	83 c4 1c             	add    esp,0x1c
c0014093:	c3                   	ret    

c0014094 <Device::~Device()>:
c0014094:	ba 98 aa 02 c0       	mov    edx,0xc002aa98
c0014099:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001409d:	89 10                	mov    DWORD PTR [eax],edx
c001409f:	90                   	nop
c00140a0:	c3                   	ret    
c00140a1:	90                   	nop

c00140a2 <Device::~Device()>:
c00140a2:	83 ec 0c             	sub    esp,0xc
c00140a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00140a9:	e8 e6 ff ff ff       	call   c0014094 <Device::~Device()>
c00140ae:	83 c4 04             	add    esp,0x4
c00140b1:	83 ec 08             	sub    esp,0x8
c00140b4:	68 58 01 00 00       	push   0x158
c00140b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140bd:	e8 fa eb ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c00140c2:	83 c4 10             	add    esp,0x10
c00140c5:	83 c4 0c             	add    esp,0xc
c00140c8:	c3                   	ret    
c00140c9:	90                   	nop

c00140ca <Device::findAndLoadDriver()>:
c00140ca:	c3                   	ret    
c00140cb:	90                   	nop

c00140cc <Device::preOpenPCI(PCIDeviceInfo)>:
c00140cc:	57                   	push   edi
c00140cd:	b9 09 00 00 00       	mov    ecx,0x9
c00140d2:	56                   	push   esi
c00140d3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00140d7:	8d 74 24 10          	lea    esi,[esp+0x10]
c00140db:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00140e5:	81 c7 18 01 00 00    	add    edi,0x118
c00140eb:	fc                   	cld    
c00140ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00140ee:	5e                   	pop    esi
c00140ef:	5f                   	pop    edi
c00140f0:	c3                   	ret    
c00140f1:	90                   	nop

c00140f2 <Device::preOpenACPI(void*, char*, char*)>:
c00140f2:	56                   	push   esi
c00140f3:	53                   	push   ebx
c00140f4:	83 ec 08             	sub    esp,0x8
c00140f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140fb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00140ff:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014109:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001410d:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014113:	6a 1e                	push   0x1e
c0014115:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001411b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001411f:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014125:	50                   	push   eax
c0014126:	e8 19 c6 fe ff       	call   c0000744 <memcpy>
c001412b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001412f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014133:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001413b:	83 c4 14             	add    esp,0x14
c001413e:	5b                   	pop    ebx
c001413f:	5e                   	pop    esi
c0014140:	e9 ff c5 fe ff       	jmp    c0000744 <memcpy>
c0014145:	90                   	nop

c0014146 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001414a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001414f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014156:	75 0b                	jne    c0014163 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014158:	8b 00                	mov    eax,DWORD PTR [eax]
c001415a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001415e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014161:	eb 1e                	jmp    c0014181 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014163:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0014168:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001416e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014174:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014176:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001417a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001417e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014181:	ff e0                	jmp    eax
c0014183:	90                   	nop

c0014184 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014188:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001418d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014194:	75 0b                	jne    c00141a1 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014196:	8b 00                	mov    eax,DWORD PTR [eax]
c0014198:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001419c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001419f:	eb 1e                	jmp    c00141bf <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00141a1:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00141a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00141ac:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00141b2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141b4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141bc:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00141bf:	ff e0                	jmp    eax
c00141c1:	90                   	nop

c00141c2 <Device::addChild(Device*)>:
c00141c2:	53                   	push   ebx
c00141c3:	83 ec 08             	sub    esp,0x8
c00141c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141ce:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00141d4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00141da:	8b 13                	mov    edx,DWORD PTR [ebx]
c00141dc:	85 d2                	test   edx,edx
c00141de:	74 04                	je     c00141e4 <Device::addChild(Device*)+0x22>
c00141e0:	89 d3                	mov    ebx,edx
c00141e2:	eb f6                	jmp    c00141da <Device::addChild(Device*)+0x18>
c00141e4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00141e7:	83 ec 0c             	sub    esp,0xc
c00141ea:	6a 08                	push   0x8
c00141ec:	e8 52 b6 ff ff       	call   c000f843 <malloc>
c00141f1:	89 03                	mov    DWORD PTR [ebx],eax
c00141f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00141f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014200:	83 c4 18             	add    esp,0x18
c0014203:	5b                   	pop    ebx
c0014204:	c3                   	ret    
c0014205:	90                   	nop

c0014206 <Device::removeAllChildren()>:
c0014206:	56                   	push   esi
c0014207:	53                   	push   ebx
c0014208:	52                   	push   edx
c0014209:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001420d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014213:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014216:	74 17                	je     c001422f <Device::removeAllChildren()+0x29>
c0014218:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001421b:	85 c0                	test   eax,eax
c001421d:	74 0c                	je     c001422b <Device::removeAllChildren()+0x25>
c001421f:	83 ec 0c             	sub    esp,0xc
c0014222:	8b 10                	mov    edx,DWORD PTR [eax]
c0014224:	50                   	push   eax
c0014225:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014228:	83 c4 10             	add    esp,0x10
c001422b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001422d:	eb e4                	jmp    c0014213 <Device::removeAllChildren()+0xd>
c001422f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014235:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001423b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014241:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014248:	58                   	pop    eax
c0014249:	5b                   	pop    ebx
c001424a:	5e                   	pop    esi
c001424b:	c3                   	ret    

c001424c <Device::hibernateAll()>:
c001424c:	53                   	push   ebx
c001424d:	83 ec 14             	sub    esp,0x14
c0014250:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014254:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014256:	53                   	push   ebx
c0014257:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001425a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014260:	83 c4 10             	add    esp,0x10
c0014263:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014266:	74 0f                	je     c0014277 <Device::hibernateAll()+0x2b>
c0014268:	83 ec 0c             	sub    esp,0xc
c001426b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001426e:	e8 d9 ff ff ff       	call   c001424c <Device::hibernateAll()>
c0014273:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014275:	eb e9                	jmp    c0014260 <Device::hibernateAll()+0x14>
c0014277:	83 c4 08             	add    esp,0x8
c001427a:	5b                   	pop    ebx
c001427b:	c3                   	ret    

c001427c <Device::wakeAll()>:
c001427c:	53                   	push   ebx
c001427d:	83 ec 14             	sub    esp,0x14
c0014280:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014284:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014286:	53                   	push   ebx
c0014287:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001428a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014290:	83 c4 10             	add    esp,0x10
c0014293:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014296:	74 0f                	je     c00142a7 <Device::wakeAll()+0x2b>
c0014298:	83 ec 0c             	sub    esp,0xc
c001429b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001429e:	e8 d9 ff ff ff       	call   c001427c <Device::wakeAll()>
c00142a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142a5:	eb e9                	jmp    c0014290 <Device::wakeAll()+0x14>
c00142a7:	83 c4 08             	add    esp,0x8
c00142aa:	5b                   	pop    ebx
c00142ab:	c3                   	ret    

c00142ac <Device::detectAll()>:
c00142ac:	53                   	push   ebx
c00142ad:	83 ec 14             	sub    esp,0x14
c00142b0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142b6:	53                   	push   ebx
c00142b7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00142ba:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142c0:	83 c4 10             	add    esp,0x10
c00142c3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142c6:	74 0f                	je     c00142d7 <Device::detectAll()+0x2b>
c00142c8:	83 ec 0c             	sub    esp,0xc
c00142cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142ce:	e8 d9 ff ff ff       	call   c00142ac <Device::detectAll()>
c00142d3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142d5:	eb e9                	jmp    c00142c0 <Device::detectAll()+0x14>
c00142d7:	83 c4 08             	add    esp,0x8
c00142da:	5b                   	pop    ebx
c00142db:	c3                   	ret    

c00142dc <Device::disableLegacyAll()>:
c00142dc:	53                   	push   ebx
c00142dd:	83 ec 14             	sub    esp,0x14
c00142e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142e6:	53                   	push   ebx
c00142e7:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00142ea:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142f0:	83 c4 10             	add    esp,0x10
c00142f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142f6:	74 0f                	je     c0014307 <Device::disableLegacyAll()+0x2b>
c00142f8:	83 ec 0c             	sub    esp,0xc
c00142fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142fe:	e8 d9 ff ff ff       	call   c00142dc <Device::disableLegacyAll()>
c0014303:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014305:	eb e9                	jmp    c00142f0 <Device::disableLegacyAll()+0x14>
c0014307:	83 c4 08             	add    esp,0x8
c001430a:	5b                   	pop    ebx
c001430b:	c3                   	ret    

c001430c <Device::loadDriversForAll()>:
c001430c:	53                   	push   ebx
c001430d:	83 ec 08             	sub    esp,0x8
c0014310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014314:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001431a:	8b 18                	mov    ebx,DWORD PTR [eax]
c001431c:	85 db                	test   ebx,ebx
c001431e:	74 12                	je     c0014332 <Device::loadDriversForAll()+0x26>
c0014320:	83 ec 0c             	sub    esp,0xc
c0014323:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014326:	e8 e1 ff ff ff       	call   c001430c <Device::loadDriversForAll()>
c001432b:	83 c4 10             	add    esp,0x10
c001432e:	89 d8                	mov    eax,ebx
c0014330:	eb e8                	jmp    c001431a <Device::loadDriversForAll()+0xe>
c0014332:	83 c4 08             	add    esp,0x8
c0014335:	5b                   	pop    ebx
c0014336:	c3                   	ret    
c0014337:	90                   	nop

c0014338 <Device::closeAll()>:
c0014338:	53                   	push   ebx
c0014339:	83 ec 08             	sub    esp,0x8
c001433c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014340:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014342:	6a 00                	push   0x0
c0014344:	6a 00                	push   0x0
c0014346:	6a 00                	push   0x0
c0014348:	53                   	push   ebx
c0014349:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001434c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014352:	83 c4 10             	add    esp,0x10
c0014355:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014358:	74 0f                	je     c0014369 <Device::closeAll()+0x31>
c001435a:	83 ec 0c             	sub    esp,0xc
c001435d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014360:	e8 d3 ff ff ff       	call   c0014338 <Device::closeAll()>
c0014365:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014367:	eb e9                	jmp    c0014352 <Device::closeAll()+0x1a>
c0014369:	83 c4 08             	add    esp,0x8
c001436c:	5b                   	pop    ebx
c001436d:	c3                   	ret    

c001436e <Device::powerSavingAll(PowerSavingLevel)>:
c001436e:	56                   	push   esi
c001436f:	53                   	push   ebx
c0014370:	83 ec 0c             	sub    esp,0xc
c0014373:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014377:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001437b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001437d:	56                   	push   esi
c001437e:	53                   	push   ebx
c001437f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014382:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014388:	83 c4 10             	add    esp,0x10
c001438b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001438e:	74 0f                	je     c001439f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014390:	52                   	push   edx
c0014391:	52                   	push   edx
c0014392:	56                   	push   esi
c0014393:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014396:	e8 d3 ff ff ff       	call   c001436e <Device::powerSavingAll(PowerSavingLevel)>
c001439b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001439d:	eb e9                	jmp    c0014388 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001439f:	58                   	pop    eax
c00143a0:	5b                   	pop    ebx
c00143a1:	5e                   	pop    esi
c00143a2:	c3                   	ret    
c00143a3:	90                   	nop

c00143a4 <Device::setName(char const*)>:
c00143a4:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00143ac:	e9 83 c4 fe ff       	jmp    c0000834 <strcpy>
c00143b1:	90                   	nop

c00143b2 <Device::Device(char const*)>:
c00143b2:	83 ec 1c             	sub    esp,0x1c
c00143b5:	ba 98 aa 02 c0       	mov    edx,0xc002aa98
c00143ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143be:	89 10                	mov    DWORD PTR [eax],edx
c00143c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143c4:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00143ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143d2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00143dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143e0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00143ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143ee:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00143f8:	83 ec 08             	sub    esp,0x8
c00143fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00143ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014403:	e8 9c ff ff ff       	call   c00143a4 <Device::setName(char const*)>
c0014408:	83 c4 10             	add    esp,0x10
c001440b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014413:	83 ec 0c             	sub    esp,0xc
c0014416:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001441a:	e8 24 b4 ff ff       	call   c000f843 <malloc>
c001441f:	83 c4 10             	add    esp,0x10
c0014422:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014428:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001442f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014433:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014439:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001443d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014443:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014449:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001444d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014453:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001445a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001445e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014469:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014470:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014474:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001447e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014482:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001448c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014490:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001449a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001449e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00144a8:	90                   	nop
c00144a9:	83 c4 1c             	add    esp,0x1c
c00144ac:	c3                   	ret    
c00144ad:	90                   	nop

c00144ae <Device::getName()>:
c00144ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144b2:	05 d0 00 00 00       	add    eax,0xd0
c00144b7:	c3                   	ret    

c00144b8 <DriverlessDevice::DriverlessDevice(char const*)>:
c00144b8:	83 ec 0c             	sub    esp,0xc
c00144bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144bf:	83 ec 08             	sub    esp,0x8
c00144c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144c6:	50                   	push   eax
c00144c7:	e8 e6 fe ff ff       	call   c00143b2 <Device::Device(char const*)>
c00144cc:	83 c4 10             	add    esp,0x10
c00144cf:	ba c4 aa 02 c0       	mov    edx,0xc002aac4
c00144d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144d8:	89 10                	mov    DWORD PTR [eax],edx
c00144da:	90                   	nop
c00144db:	83 c4 0c             	add    esp,0xc
c00144de:	c3                   	ret    
c00144df:	90                   	nop

c00144e0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00144e0:	57                   	push   edi
c00144e1:	56                   	push   esi
c00144e2:	53                   	push   ebx
c00144e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00144eb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00144ef:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00144f5:	75 0c                	jne    c0014503 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00144f7:	52                   	push   edx
c00144f8:	52                   	push   edx
c00144f9:	53                   	push   ebx
c00144fa:	56                   	push   esi
c00144fb:	e8 ba 42 01 00       	call   c00287ba <LinkedList<Device>::addElement(Device*)>
c0014500:	83 c4 10             	add    esp,0x10
c0014503:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014509:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001450c:	74 12                	je     c0014520 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001450e:	50                   	push   eax
c001450f:	57                   	push   edi
c0014510:	56                   	push   esi
c0014511:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014514:	e8 c7 ff ff ff       	call   c00144e0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014519:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001451b:	83 c4 10             	add    esp,0x10
c001451e:	eb e9                	jmp    c0014509 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014520:	5b                   	pop    ebx
c0014521:	5e                   	pop    esi
c0014522:	5f                   	pop    edi
c0014523:	c3                   	ret    

c0014524 <getDevicesOfType(DeviceType)>:
c0014524:	53                   	push   ebx
c0014525:	83 ec 14             	sub    esp,0x14
c0014528:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001452c:	53                   	push   ebx
c001452d:	e8 64 43 01 00       	call   c0028896 <LinkedList<Device>::LinkedList()>
c0014532:	83 c4 0c             	add    esp,0xc
c0014535:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014539:	53                   	push   ebx
c001453a:	ff 35 48 e2 02 c0    	push   DWORD PTR ds:0xc002e248
c0014540:	e8 9b ff ff ff       	call   c00144e0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014545:	89 d8                	mov    eax,ebx
c0014547:	83 c4 18             	add    esp,0x18
c001454a:	5b                   	pop    ebx
c001454b:	c2 04 00             	ret    0x4

c001454e <HardDiskController::HardDiskController(char const*)>:
c001454e:	83 ec 0c             	sub    esp,0xc
c0014551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014555:	83 ec 08             	sub    esp,0x8
c0014558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001455c:	50                   	push   eax
c001455d:	e8 50 fe ff ff       	call   c00143b2 <Device::Device(char const*)>
c0014562:	83 c4 10             	add    esp,0x10
c0014565:	ba f0 aa 02 c0       	mov    edx,0xc002aaf0
c001456a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001456e:	89 10                	mov    DWORD PTR [eax],edx
c0014570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014574:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001457e:	90                   	nop
c001457f:	83 c4 0c             	add    esp,0xc
c0014582:	c3                   	ret    
c0014583:	90                   	nop

c0014584 <HardDiskController::~HardDiskController()>:
c0014584:	83 ec 0c             	sub    esp,0xc
c0014587:	ba f0 aa 02 c0       	mov    edx,0xc002aaf0
c001458c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014590:	89 10                	mov    DWORD PTR [eax],edx
c0014592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014596:	83 ec 0c             	sub    esp,0xc
c0014599:	50                   	push   eax
c001459a:	e8 f5 fa ff ff       	call   c0014094 <Device::~Device()>
c001459f:	83 c4 10             	add    esp,0x10
c00145a2:	90                   	nop
c00145a3:	83 c4 0c             	add    esp,0xc
c00145a6:	c3                   	ret    
c00145a7:	90                   	nop

c00145a8 <HardDiskController::~HardDiskController()>:
c00145a8:	83 ec 0c             	sub    esp,0xc
c00145ab:	83 ec 0c             	sub    esp,0xc
c00145ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145b2:	e8 cd ff ff ff       	call   c0014584 <HardDiskController::~HardDiskController()>
c00145b7:	83 c4 10             	add    esp,0x10
c00145ba:	83 ec 08             	sub    esp,0x8
c00145bd:	68 58 01 00 00       	push   0x158
c00145c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145c6:	e8 f1 e6 ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c00145cb:	83 c4 10             	add    esp,0x10
c00145ce:	83 c4 0c             	add    esp,0xc
c00145d1:	c3                   	ret    

c00145d2 <PhysicalDisk::eject()>:
c00145d2:	83 ec 18             	sub    esp,0x18
c00145d5:	68 14 ab 02 c0       	push   0xc002ab14
c00145da:	e8 bd e7 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00145df:	83 c8 ff             	or     eax,0xffffffff
c00145e2:	83 c4 1c             	add    esp,0x1c
c00145e5:	c3                   	ret    

c00145e6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00145e6:	83 ec 0c             	sub    esp,0xc
c00145e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145ed:	83 ec 08             	sub    esp,0x8
c00145f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145f4:	50                   	push   eax
c00145f5:	e8 b8 fd ff ff       	call   c00143b2 <Device::Device(char const*)>
c00145fa:	83 c4 10             	add    esp,0x10
c00145fd:	ba 44 ab 02 c0       	mov    edx,0xc002ab44
c0014602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014606:	89 10                	mov    DWORD PTR [eax],edx
c0014608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001460c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014617:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001461e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014622:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001462c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014630:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014634:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001463a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014648:	90                   	nop
c0014649:	83 c4 0c             	add    esp,0xc
c001464c:	c3                   	ret    
c001464d:	90                   	nop

c001464e <PhysicalDisk::startCache()>:
c001464e:	56                   	push   esi
c001464f:	53                   	push   ebx
c0014650:	83 ec 10             	sub    esp,0x10
c0014653:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014657:	6a 44                	push   0x44
c0014659:	e8 e5 b1 ff ff       	call   c000f843 <malloc>
c001465e:	89 c6                	mov    esi,eax
c0014660:	58                   	pop    eax
c0014661:	5a                   	pop    edx
c0014662:	53                   	push   ebx
c0014663:	56                   	push   esi
c0014664:	e8 5f 27 00 00       	call   c0016dc8 <VCache::VCache(PhysicalDisk*)>
c0014669:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001466f:	83 c4 14             	add    esp,0x14
c0014672:	5b                   	pop    ebx
c0014673:	5e                   	pop    esi
c0014674:	c3                   	ret    
c0014675:	90                   	nop

c0014676 <PhysicalDisk::~PhysicalDisk()>:
c0014676:	83 ec 0c             	sub    esp,0xc
c0014679:	ba 44 ab 02 c0       	mov    edx,0xc002ab44
c001467e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014682:	89 10                	mov    DWORD PTR [eax],edx
c0014684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014688:	83 ec 0c             	sub    esp,0xc
c001468b:	50                   	push   eax
c001468c:	e8 03 fa ff ff       	call   c0014094 <Device::~Device()>
c0014691:	83 c4 10             	add    esp,0x10
c0014694:	90                   	nop
c0014695:	83 c4 0c             	add    esp,0xc
c0014698:	c3                   	ret    
c0014699:	90                   	nop

c001469a <PhysicalDisk::~PhysicalDisk()>:
c001469a:	83 ec 0c             	sub    esp,0xc
c001469d:	83 ec 0c             	sub    esp,0xc
c00146a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146a4:	e8 cd ff ff ff       	call   c0014676 <PhysicalDisk::~PhysicalDisk()>
c00146a9:	83 c4 10             	add    esp,0x10
c00146ac:	83 ec 08             	sub    esp,0x8
c00146af:	68 6c 01 00 00       	push   0x16c
c00146b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146b8:	e8 ff e5 ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c00146bd:	83 c4 10             	add    esp,0x10
c00146c0:	83 c4 0c             	add    esp,0xc
c00146c3:	c3                   	ret    

c00146c4 <FPU::FPU(char const*)>:
c00146c4:	83 ec 0c             	sub    esp,0xc
c00146c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146cb:	83 ec 08             	sub    esp,0x8
c00146ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146d2:	50                   	push   eax
c00146d3:	e8 da fc ff ff       	call   c00143b2 <Device::Device(char const*)>
c00146d8:	83 c4 10             	add    esp,0x10
c00146db:	ba 88 ab 02 c0       	mov    edx,0xc002ab88
c00146e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e4:	89 10                	mov    DWORD PTR [eax],edx
c00146e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ea:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00146f4:	90                   	nop
c00146f5:	83 c4 0c             	add    esp,0xc
c00146f8:	c3                   	ret    
c00146f9:	90                   	nop

c00146fa <FPU::~FPU()>:
c00146fa:	83 ec 0c             	sub    esp,0xc
c00146fd:	ba 88 ab 02 c0       	mov    edx,0xc002ab88
c0014702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014706:	89 10                	mov    DWORD PTR [eax],edx
c0014708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001470c:	83 ec 0c             	sub    esp,0xc
c001470f:	50                   	push   eax
c0014710:	e8 7f f9 ff ff       	call   c0014094 <Device::~Device()>
c0014715:	83 c4 10             	add    esp,0x10
c0014718:	90                   	nop
c0014719:	83 c4 0c             	add    esp,0xc
c001471c:	c3                   	ret    
c001471d:	90                   	nop

c001471e <FPU::~FPU()>:
c001471e:	83 ec 0c             	sub    esp,0xc
c0014721:	83 ec 0c             	sub    esp,0xc
c0014724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014728:	e8 cd ff ff ff       	call   c00146fa <FPU::~FPU()>
c001472d:	83 c4 10             	add    esp,0x10
c0014730:	83 ec 08             	sub    esp,0x8
c0014733:	68 58 01 00 00       	push   0x158
c0014738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001473c:	e8 7b e5 ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0014741:	83 c4 10             	add    esp,0x10
c0014744:	83 c4 0c             	add    esp,0xc
c0014747:	c3                   	ret    

c0014748 <setupFPU()>:
c0014748:	53                   	push   ebx
c0014749:	83 ec 08             	sub    esp,0x8
c001474c:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c0014752:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014759:	74 19                	je     c0014774 <setupFPU()+0x2c>
c001475b:	83 ec 0c             	sub    esp,0xc
c001475e:	68 58 01 00 00       	push   0x158
c0014763:	e8 db b0 ff ff       	call   c000f843 <malloc>
c0014768:	89 c3                	mov    ebx,eax
c001476a:	89 04 24             	mov    DWORD PTR [esp],eax
c001476d:	e8 92 0c 01 00       	call   c0025404 <AVX::AVX()>
c0014772:	eb 5b                	jmp    c00147cf <setupFPU()+0x87>
c0014774:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001477a:	84 c0                	test   al,al
c001477c:	79 19                	jns    c0014797 <setupFPU()+0x4f>
c001477e:	83 ec 0c             	sub    esp,0xc
c0014781:	68 58 01 00 00       	push   0x158
c0014786:	e8 b8 b0 ff ff       	call   c000f843 <malloc>
c001478b:	89 c3                	mov    ebx,eax
c001478d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014790:	e8 95 0d 01 00       	call   c002552a <SSE::SSE()>
c0014795:	eb 38                	jmp    c00147cf <setupFPU()+0x87>
c0014797:	a8 20                	test   al,0x20
c0014799:	74 19                	je     c00147b4 <setupFPU()+0x6c>
c001479b:	83 ec 0c             	sub    esp,0xc
c001479e:	68 58 01 00 00       	push   0x158
c00147a3:	e8 9b b0 ff ff       	call   c000f843 <malloc>
c00147a8:	89 c3                	mov    ebx,eax
c00147aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00147ad:	e8 e2 0c 01 00       	call   c0025494 <MMX::MMX()>
c00147b2:	eb 1b                	jmp    c00147cf <setupFPU()+0x87>
c00147b4:	a8 10                	test   al,0x10
c00147b6:	74 1c                	je     c00147d4 <setupFPU()+0x8c>
c00147b8:	83 ec 0c             	sub    esp,0xc
c00147bb:	68 58 01 00 00       	push   0x158
c00147c0:	e8 7e b0 ff ff       	call   c000f843 <malloc>
c00147c5:	89 c3                	mov    ebx,eax
c00147c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00147ca:	e8 e9 0d 01 00       	call   c00255b8 <x87::x87()>
c00147cf:	83 c4 10             	add    esp,0x10
c00147d2:	eb 24                	jmp    c00147f8 <setupFPU()+0xb0>
c00147d4:	83 e0 ef             	and    eax,0xffffffef
c00147d7:	83 ec 0c             	sub    esp,0xc
c00147da:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00147e0:	68 74 ab 02 c0       	push   0xc002ab74
c00147e5:	e8 b2 e5 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00147ea:	0f 20 c0             	mov    eax,cr0
c00147ed:	83 c8 04             	or     eax,0x4
c00147f0:	0f 22 c0             	mov    cr0,eax
c00147f3:	31 db                	xor    ebx,ebx
c00147f5:	83 c4 10             	add    esp,0x10
c00147f8:	89 d8                	mov    eax,ebx
c00147fa:	83 c4 08             	add    esp,0x8
c00147fd:	5b                   	pop    ebx
c00147fe:	c3                   	ret    
c00147ff:	90                   	nop

c0014800 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014800:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014804:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014808:	c1 e0 04             	shl    eax,0x4
c001480b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001480f:	8d 50 10             	lea    edx,[eax+0x10]
c0014812:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014818:	74 08                	je     c0014822 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001481a:	83 c0 04             	add    eax,0x4
c001481d:	39 d0                	cmp    eax,edx
c001481f:	75 f1                	jne    c0014812 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014821:	c3                   	ret    
c0014822:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001482c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014836:	eb e2                	jmp    c001481a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014838 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014838:	57                   	push   edi
c0014839:	31 c0                	xor    eax,eax
c001483b:	56                   	push   esi
c001483c:	53                   	push   ebx
c001483d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014841:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014845:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014849:	89 da                	mov    edx,ebx
c001484b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001484f:	c1 e2 04             	shl    edx,0x4
c0014852:	01 ca                	add    edx,ecx
c0014854:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001485c:	74 16                	je     c0014874 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001485e:	40                   	inc    eax
c001485f:	83 f8 04             	cmp    eax,0x4
c0014862:	75 f0                	jne    c0014854 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014864:	c7 44 24 10 b8 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002abb8
c001486c:	5b                   	pop    ebx
c001486d:	5e                   	pop    esi
c001486e:	5f                   	pop    edi
c001486f:	e9 03 5c 00 00       	jmp    c001a477 <Krnl::panic(char const*)>
c0014874:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014877:	8d 04 81             	lea    eax,[ecx+eax*4]
c001487a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014880:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014886:	5b                   	pop    ebx
c0014887:	5e                   	pop    esi
c0014888:	5f                   	pop    edi
c0014889:	c3                   	ret    

c001488a <doubleFault(regs*, void*)>:
c001488a:	55                   	push   ebp
c001488b:	89 e5                	mov    ebp,esp
c001488d:	83 ec 08             	sub    esp,0x8
c0014890:	83 ec 0c             	sub    esp,0xc
c0014893:	68 f3 ab 02 c0       	push   0xc002abf3
c0014898:	e8 da 5b 00 00       	call   c001a477 <Krnl::panic(char const*)>
c001489d:	83 c4 10             	add    esp,0x10
c00148a0:	90                   	nop
c00148a1:	c9                   	leave  
c00148a2:	c3                   	ret    
c00148a3:	90                   	nop

c00148a4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00148a4:	56                   	push   esi
c00148a5:	53                   	push   ebx
c00148a6:	50                   	push   eax
c00148a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00148ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148af:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00148b4:	75 35                	jne    c00148eb <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00148b6:	8d 43 20             	lea    eax,[ebx+0x20]
c00148b9:	31 d2                	xor    edx,edx
c00148bb:	89 c1                	mov    ecx,eax
c00148bd:	c1 e1 04             	shl    ecx,0x4
c00148c0:	01 f1                	add    ecx,esi
c00148c2:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00148ca:	74 3e                	je     c001490a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00148cc:	42                   	inc    edx
c00148cd:	83 fa 04             	cmp    edx,0x4
c00148d0:	75 f0                	jne    c00148c2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00148d2:	83 ec 0c             	sub    esp,0xc
c00148d5:	68 38 ac 02 c0       	push   0xc002ac38
c00148da:	e8 98 5b 00 00       	call   c001a477 <Krnl::panic(char const*)>
c00148df:	83 c4 10             	add    esp,0x10
c00148e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00148e7:	5a                   	pop    edx
c00148e8:	5b                   	pop    ebx
c00148e9:	5e                   	pop    esi
c00148ea:	c3                   	ret    
c00148eb:	83 ec 0c             	sub    esp,0xc
c00148ee:	56                   	push   esi
c00148ef:	e8 ba fb ff ff       	call   c00144ae <Device::getName()>
c00148f4:	83 c4 10             	add    esp,0x10
c00148f7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00148fa:	75 ba                	jne    c00148b6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00148fc:	83 fb 0f             	cmp    ebx,0xf
c00148ff:	7f 29                	jg     c001492a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014901:	0f b6 9b a0 d4 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2b60]
c0014908:	eb ac                	jmp    c00148b6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001490a:	8d 04 82             	lea    eax,[edx+eax*4]
c001490d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014911:	8d 04 86             	lea    eax,[esi+eax*4]
c0014914:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001491a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001491e:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014924:	89 d8                	mov    eax,ebx
c0014926:	5a                   	pop    edx
c0014927:	5b                   	pop    ebx
c0014928:	5e                   	pop    esi
c0014929:	c3                   	ret    
c001492a:	83 ec 0c             	sub    esp,0xc
c001492d:	68 00 ac 02 c0       	push   0xc002ac00
c0014932:	e8 40 5b 00 00       	call   c001a477 <Krnl::panic(char const*)>
c0014937:	83 c4 10             	add    esp,0x10
c001493a:	e9 77 ff ff ff       	jmp    c00148b6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001493f:	90                   	nop

c0014940 <InterruptController::clearAllHandlers(int, bool)>:
c0014940:	56                   	push   esi
c0014941:	53                   	push   ebx
c0014942:	52                   	push   edx
c0014943:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014947:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001494b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014950:	75 61                	jne    c00149b3 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014952:	8d 46 20             	lea    eax,[esi+0x20]
c0014955:	c1 e6 04             	shl    esi,0x4
c0014958:	c1 e0 04             	shl    eax,0x4
c001495b:	01 de                	add    esi,ebx
c001495d:	01 d8                	add    eax,ebx
c001495f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014969:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014973:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001497d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014987:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014991:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001499b:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00149a5:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00149af:	58                   	pop    eax
c00149b0:	5b                   	pop    ebx
c00149b1:	5e                   	pop    esi
c00149b2:	c3                   	ret    
c00149b3:	83 ec 0c             	sub    esp,0xc
c00149b6:	53                   	push   ebx
c00149b7:	e8 f2 fa ff ff       	call   c00144ae <Device::getName()>
c00149bc:	83 c4 10             	add    esp,0x10
c00149bf:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149c2:	75 8e                	jne    c0014952 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149c4:	83 fe 0f             	cmp    esi,0xf
c00149c7:	7f 09                	jg     c00149d2 <InterruptController::clearAllHandlers(int, bool)+0x92>
c00149c9:	0f b6 b6 a0 d4 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2b60]
c00149d0:	eb 80                	jmp    c0014952 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149d2:	83 ec 0c             	sub    esp,0xc
c00149d5:	68 74 ac 02 c0       	push   0xc002ac74
c00149da:	e8 98 5a 00 00       	call   c001a477 <Krnl::panic(char const*)>
c00149df:	83 c4 10             	add    esp,0x10
c00149e2:	e9 6b ff ff ff       	jmp    c0014952 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149e7:	90                   	nop

c00149e8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00149e8:	56                   	push   esi
c00149e9:	53                   	push   ebx
c00149ea:	52                   	push   edx
c00149eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00149f3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00149f8:	75 3a                	jne    c0014a34 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00149fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00149fe:	8d 50 20             	lea    edx,[eax+0x20]
c0014a01:	c1 e2 04             	shl    edx,0x4
c0014a04:	8d 04 16             	lea    eax,[esi+edx*1]
c0014a07:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014a0b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014a11:	74 0b                	je     c0014a1e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014a13:	83 c0 04             	add    eax,0x4
c0014a16:	39 d0                	cmp    eax,edx
c0014a18:	75 f1                	jne    c0014a0b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014a1a:	58                   	pop    eax
c0014a1b:	5b                   	pop    ebx
c0014a1c:	5e                   	pop    esi
c0014a1d:	c3                   	ret    
c0014a1e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a28:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a32:	eb df                	jmp    c0014a13 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014a34:	83 ec 0c             	sub    esp,0xc
c0014a37:	56                   	push   esi
c0014a38:	e8 71 fa ff ff       	call   c00144ae <Device::getName()>
c0014a3d:	83 c4 10             	add    esp,0x10
c0014a40:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a43:	75 b5                	jne    c00149fa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a45:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014a4a:	7f 11                	jg     c0014a5d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014a4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a50:	0f b6 80 a0 d4 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2b60]
c0014a57:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a5b:	eb 9d                	jmp    c00149fa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a5d:	83 ec 0c             	sub    esp,0xc
c0014a60:	68 74 ac 02 c0       	push   0xc002ac74
c0014a65:	e8 0d 5a 00 00       	call   c001a477 <Krnl::panic(char const*)>
c0014a6a:	83 c4 10             	add    esp,0x10
c0014a6d:	eb 8b                	jmp    c00149fa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014a6f <nmiHandler(regs*, void*)>:
c0014a6f:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0014a74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a78:	e9 0f a5 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014a7d <int_handler>:
c0014a7d:	55                   	push   ebp
c0014a7e:	57                   	push   edi
c0014a7f:	56                   	push   esi
c0014a80:	53                   	push   ebx
c0014a81:	83 ec 0c             	sub    esp,0xc
c0014a84:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014a88:	80 3d a4 0d 03 c0 00 	cmp    BYTE PTR ds:0xc0030da4,0x0
c0014a8f:	74 0b                	je     c0014a9c <int_handler+0x1f>
c0014a91:	fa                   	cli    
c0014a92:	f4                   	hlt    
c0014a93:	80 3d a4 0d 03 c0 00 	cmp    BYTE PTR ds:0xc0030da4,0x0
c0014a9a:	75 f5                	jne    c0014a91 <int_handler+0x14>
c0014a9c:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0014aa1:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014aa4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014aaa:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014ab0:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014ab3:	83 f8 17             	cmp    eax,0x17
c0014ab6:	77 13                	ja     c0014acb <int_handler+0x4e>
c0014ab8:	83 ec 08             	sub    esp,0x8
c0014abb:	8b 17                	mov    edx,DWORD PTR [edi]
c0014abd:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014ac0:	0f b6 c0             	movzx  eax,al
c0014ac3:	50                   	push   eax
c0014ac4:	57                   	push   edi
c0014ac5:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014ac8:	83 c4 10             	add    esp,0x10
c0014acb:	83 c3 15             	add    ebx,0x15
c0014ace:	c1 e3 04             	shl    ebx,0x4
c0014ad1:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014ad5:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014adc:	31 db                	xor    ebx,ebx
c0014ade:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014ae2:	85 c0                	test   eax,eax
c0014ae4:	74 13                	je     c0014af9 <int_handler+0x7c>
c0014ae6:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014ae9:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014aed:	74 1c                	je     c0014b0b <int_handler+0x8e>
c0014aef:	83 ec 08             	sub    esp,0x8
c0014af2:	52                   	push   edx
c0014af3:	56                   	push   esi
c0014af4:	ff d0                	call   eax
c0014af6:	83 c4 10             	add    esp,0x10
c0014af9:	43                   	inc    ebx
c0014afa:	83 fb 04             	cmp    ebx,0x4
c0014afd:	75 df                	jne    c0014ade <int_handler+0x61>
c0014aff:	83 c4 0c             	add    esp,0xc
c0014b02:	31 c0                	xor    eax,eax
c0014b04:	5b                   	pop    ebx
c0014b05:	31 d2                	xor    edx,edx
c0014b07:	5e                   	pop    esi
c0014b08:	5f                   	pop    edi
c0014b09:	5d                   	pop    ebp
c0014b0a:	c3                   	ret    
c0014b0b:	83 ec 08             	sub    esp,0x8
c0014b0e:	52                   	push   edx
c0014b0f:	56                   	push   esi
c0014b10:	ff d0                	call   eax
c0014b12:	83 c4 10             	add    esp,0x10
c0014b15:	83 c4 0c             	add    esp,0xc
c0014b18:	5b                   	pop    ebx
c0014b19:	5e                   	pop    esi
c0014b1a:	5f                   	pop    edi
c0014b1b:	5d                   	pop    ebp
c0014b1c:	c3                   	ret    
c0014b1d:	90                   	nop

c0014b1e <InterruptController::InterruptController(char const*)>:
c0014b1e:	83 ec 1c             	sub    esp,0x1c
c0014b21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b25:	83 ec 08             	sub    esp,0x8
c0014b28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b2c:	50                   	push   eax
c0014b2d:	e8 80 f8 ff ff       	call   c00143b2 <Device::Device(char const*)>
c0014b32:	83 c4 10             	add    esp,0x10
c0014b35:	ba 30 af 02 c0       	mov    edx,0xc002af30
c0014b3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b3e:	89 10                	mov    DWORD PTR [eax],edx
c0014b40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b44:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014b4e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014b56:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014b5e:	7f 5e                	jg     c0014bbe <InterruptController::InterruptController(char const*)+0xa0>
c0014b60:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014b68:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014b6d:	7f 49                	jg     c0014bb8 <InterruptController::InterruptController(char const*)+0x9a>
c0014b6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014b77:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014b7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014b82:	01 ca                	add    edx,ecx
c0014b84:	83 c2 54             	add    edx,0x54
c0014b87:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014b8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014b97:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014b9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014ba2:	01 ca                	add    edx,ecx
c0014ba4:	81 c2 54 04 00 00    	add    edx,0x454
c0014baa:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014bb2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014bb6:	eb b0                	jmp    c0014b68 <InterruptController::InterruptController(char const*)+0x4a>
c0014bb8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014bbc:	eb 98                	jmp    c0014b56 <InterruptController::InterruptController(char const*)+0x38>
c0014bbe:	90                   	nop
c0014bbf:	83 c4 1c             	add    esp,0x1c
c0014bc2:	c3                   	ret    
c0014bc3:	90                   	nop

c0014bc4 <InterruptController::~InterruptController()>:
c0014bc4:	83 ec 0c             	sub    esp,0xc
c0014bc7:	ba 30 af 02 c0       	mov    edx,0xc002af30
c0014bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bd0:	89 10                	mov    DWORD PTR [eax],edx
c0014bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bd6:	83 ec 0c             	sub    esp,0xc
c0014bd9:	50                   	push   eax
c0014bda:	e8 b5 f4 ff ff       	call   c0014094 <Device::~Device()>
c0014bdf:	83 c4 10             	add    esp,0x10
c0014be2:	90                   	nop
c0014be3:	83 c4 0c             	add    esp,0xc
c0014be6:	c3                   	ret    
c0014be7:	90                   	nop

c0014be8 <InterruptController::~InterruptController()>:
c0014be8:	83 ec 0c             	sub    esp,0xc
c0014beb:	83 ec 0c             	sub    esp,0xc
c0014bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bf2:	e8 cd ff ff ff       	call   c0014bc4 <InterruptController::~InterruptController()>
c0014bf7:	83 c4 10             	add    esp,0x10
c0014bfa:	83 ec 08             	sub    esp,0x8
c0014bfd:	68 58 21 00 00       	push   0x2158
c0014c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c06:	e8 b1 e0 ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0014c0b:	83 c4 10             	add    esp,0x10
c0014c0e:	83 c4 0c             	add    esp,0xc
c0014c11:	c3                   	ret    

c0014c12 <displayDebugInfo(regs*)>:
c0014c12:	55                   	push   ebp
c0014c13:	57                   	push   edi
c0014c14:	56                   	push   esi
c0014c15:	53                   	push   ebx
c0014c16:	83 ec 24             	sub    esp,0x24
c0014c19:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014c1d:	0f 20 c2             	mov    edx,cr0
c0014c20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014c24:	0f 20 d7             	mov    edi,cr2
c0014c27:	0f 20 de             	mov    esi,cr3
c0014c2a:	0f 20 e5             	mov    ebp,cr4
c0014c2d:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014c30:	68 ae ac 02 c0       	push   0xc002acae
c0014c35:	e8 62 e1 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0014c3a:	59                   	pop    ecx
c0014c3b:	58                   	pop    eax
c0014c3c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014c3f:	68 b9 ac 02 c0       	push   0xc002acb9
c0014c44:	e8 53 e1 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0014c49:	58                   	pop    eax
c0014c4a:	5a                   	pop    edx
c0014c4b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014c4e:	68 c4 ac 02 c0       	push   0xc002acc4
c0014c53:	e8 44 e1 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0014c58:	59                   	pop    ecx
c0014c59:	58                   	pop    eax
c0014c5a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014c5d:	68 cf ac 02 c0       	push   0xc002accf
c0014c62:	e8 35 e1 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0014c67:	58                   	pop    eax
c0014c68:	5a                   	pop    edx
c0014c69:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014c6c:	68 da ac 02 c0       	push   0xc002acda
c0014c71:	e8 26 e1 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0014c76:	59                   	pop    ecx
c0014c77:	58                   	pop    eax
c0014c78:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014c7b:	68 e5 ac 02 c0       	push   0xc002ace5
c0014c80:	e8 17 e1 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0014c85:	58                   	pop    eax
c0014c86:	5a                   	pop    edx
c0014c87:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014c8a:	68 f0 ac 02 c0       	push   0xc002acf0
c0014c8f:	e8 08 e1 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0014c94:	59                   	pop    ecx
c0014c95:	58                   	pop    eax
c0014c96:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014c99:	68 fb ac 02 c0       	push   0xc002acfb
c0014c9e:	e8 f9 e0 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0014ca3:	58                   	pop    eax
c0014ca4:	5a                   	pop    edx
c0014ca5:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ca8:	68 06 ad 02 c0       	push   0xc002ad06
c0014cad:	e8 ea e0 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0014cb2:	59                   	pop    ecx
c0014cb3:	58                   	pop    eax
c0014cb4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014cb7:	68 15 ad 02 c0       	push   0xc002ad15
c0014cbc:	e8 db e0 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0014cc1:	58                   	pop    eax
c0014cc2:	5a                   	pop    edx
c0014cc3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014cc6:	68 20 ad 02 c0       	push   0xc002ad20
c0014ccb:	e8 cc e0 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0014cd0:	59                   	pop    ecx
c0014cd1:	58                   	pop    eax
c0014cd2:	57                   	push   edi
c0014cd3:	68 2b ad 02 c0       	push   0xc002ad2b
c0014cd8:	e8 bf e0 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0014cdd:	58                   	pop    eax
c0014cde:	5a                   	pop    edx
c0014cdf:	56                   	push   esi
c0014ce0:	68 36 ad 02 c0       	push   0xc002ad36
c0014ce5:	e8 b2 e0 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0014cea:	59                   	pop    ecx
c0014ceb:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014cf0:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014cf6:	e8 f6 bf ff ff       	call   c0010cf1 <setActiveTerminal(VgaText*)>
c0014cfb:	58                   	pop    eax
c0014cfc:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014cff:	5a                   	pop    edx
c0014d00:	c1 e0 05             	shl    eax,0x5
c0014d03:	05 00 d2 02 c0       	add    eax,0xc002d200
c0014d08:	50                   	push   eax
c0014d09:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014d0e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d14:	e8 f7 c3 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014d19:	59                   	pop    ecx
c0014d1a:	58                   	pop    eax
c0014d1b:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014d20:	68 41 ad 02 c0       	push   0xc002ad41
c0014d25:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d2b:	e8 e0 c3 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014d30:	58                   	pop    eax
c0014d31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d36:	5a                   	pop    edx
c0014d37:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d3a:	83 c0 0c             	add    eax,0xc
c0014d3d:	50                   	push   eax
c0014d3e:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014d43:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d49:	e8 c2 c3 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014d4e:	59                   	pop    ecx
c0014d4f:	58                   	pop    eax
c0014d50:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014d55:	68 4a ad 02 c0       	push   0xc002ad4a
c0014d5a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d60:	e8 ab c3 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014d65:	58                   	pop    eax
c0014d66:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014d6b:	5a                   	pop    edx
c0014d6c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d6f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d75:	e8 bc c3 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014d7a:	59                   	pop    ecx
c0014d7b:	58                   	pop    eax
c0014d7c:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014d81:	68 52 ad 02 c0       	push   0xc002ad52
c0014d86:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d8c:	e8 7f c3 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014d91:	58                   	pop    eax
c0014d92:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014d97:	5a                   	pop    edx
c0014d98:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d9b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014da1:	e8 90 c3 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014da6:	59                   	pop    ecx
c0014da7:	58                   	pop    eax
c0014da8:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014dad:	68 5a ad 02 c0       	push   0xc002ad5a
c0014db2:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014db8:	e8 53 c3 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014dbd:	58                   	pop    eax
c0014dbe:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014dc3:	5a                   	pop    edx
c0014dc4:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014dc7:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014dcd:	e8 64 c3 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014dd2:	59                   	pop    ecx
c0014dd3:	58                   	pop    eax
c0014dd4:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014dd9:	68 62 ad 02 c0       	push   0xc002ad62
c0014dde:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014de4:	e8 27 c3 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014de9:	58                   	pop    eax
c0014dea:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014def:	5a                   	pop    edx
c0014df0:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014df3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014df9:	e8 38 c3 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014dfe:	59                   	pop    ecx
c0014dff:	58                   	pop    eax
c0014e00:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014e05:	68 6a ad 02 c0       	push   0xc002ad6a
c0014e0a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e10:	e8 fb c2 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014e15:	58                   	pop    eax
c0014e16:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014e1b:	5a                   	pop    edx
c0014e1c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e1f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e25:	e8 0c c3 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014e2a:	59                   	pop    ecx
c0014e2b:	58                   	pop    eax
c0014e2c:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014e31:	68 72 ad 02 c0       	push   0xc002ad72
c0014e36:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e3c:	e8 cf c2 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014e41:	58                   	pop    eax
c0014e42:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014e47:	5a                   	pop    edx
c0014e48:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014e4b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e51:	e8 e0 c2 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014e56:	59                   	pop    ecx
c0014e57:	58                   	pop    eax
c0014e58:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014e5d:	68 7a ad 02 c0       	push   0xc002ad7a
c0014e62:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e68:	e8 a3 c2 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014e6d:	58                   	pop    eax
c0014e6e:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014e73:	5a                   	pop    edx
c0014e74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014e78:	52                   	push   edx
c0014e79:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e7f:	e8 b2 c2 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014e84:	59                   	pop    ecx
c0014e85:	58                   	pop    eax
c0014e86:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014e8b:	68 83 ad 02 c0       	push   0xc002ad83
c0014e90:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e96:	e8 75 c2 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014e9b:	58                   	pop    eax
c0014e9c:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014ea1:	5a                   	pop    edx
c0014ea2:	57                   	push   edi
c0014ea3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ea9:	e8 88 c2 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014eae:	59                   	pop    ecx
c0014eaf:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014eb4:	5f                   	pop    edi
c0014eb5:	68 8b ad 02 c0       	push   0xc002ad8b
c0014eba:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ec0:	e8 4b c2 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014ec5:	58                   	pop    eax
c0014ec6:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014ecb:	5a                   	pop    edx
c0014ecc:	56                   	push   esi
c0014ecd:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ed3:	e8 5e c2 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014ed8:	59                   	pop    ecx
c0014ed9:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014ede:	5e                   	pop    esi
c0014edf:	68 93 ad 02 c0       	push   0xc002ad93
c0014ee4:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014eea:	e8 21 c2 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014eef:	5f                   	pop    edi
c0014ef0:	58                   	pop    eax
c0014ef1:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014ef6:	55                   	push   ebp
c0014ef7:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014efd:	e8 34 c2 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014f02:	58                   	pop    eax
c0014f03:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014f08:	5a                   	pop    edx
c0014f09:	68 9b ad 02 c0       	push   0xc002ad9b
c0014f0e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f14:	e8 f7 c1 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014f19:	0f 21 c0             	mov    eax,db0
c0014f1c:	59                   	pop    ecx
c0014f1d:	5e                   	pop    esi
c0014f1e:	50                   	push   eax
c0014f1f:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014f24:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f2a:	e8 07 c2 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014f2f:	5f                   	pop    edi
c0014f30:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014f35:	5d                   	pop    ebp
c0014f36:	68 a4 ad 02 c0       	push   0xc002ada4
c0014f3b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f41:	e8 ca c1 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014f46:	0f 21 c8             	mov    eax,db1
c0014f49:	5a                   	pop    edx
c0014f4a:	59                   	pop    ecx
c0014f4b:	50                   	push   eax
c0014f4c:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014f51:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f57:	e8 da c1 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014f5c:	5e                   	pop    esi
c0014f5d:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014f62:	5f                   	pop    edi
c0014f63:	68 ac ad 02 c0       	push   0xc002adac
c0014f68:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f6e:	e8 9d c1 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014f73:	0f 21 d0             	mov    eax,db2
c0014f76:	5d                   	pop    ebp
c0014f77:	5a                   	pop    edx
c0014f78:	50                   	push   eax
c0014f79:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014f7e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f84:	e8 ad c1 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014f89:	59                   	pop    ecx
c0014f8a:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014f8f:	5e                   	pop    esi
c0014f90:	68 b4 ad 02 c0       	push   0xc002adb4
c0014f95:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f9b:	e8 70 c1 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014fa0:	0f 21 d8             	mov    eax,db3
c0014fa3:	5f                   	pop    edi
c0014fa4:	5d                   	pop    ebp
c0014fa5:	50                   	push   eax
c0014fa6:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014fab:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fb1:	e8 80 c1 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014fb6:	58                   	pop    eax
c0014fb7:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014fbc:	5a                   	pop    edx
c0014fbd:	68 bc ad 02 c0       	push   0xc002adbc
c0014fc2:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fc8:	e8 43 c1 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014fcd:	0f 21 f0             	mov    eax,db6
c0014fd0:	59                   	pop    ecx
c0014fd1:	5e                   	pop    esi
c0014fd2:	50                   	push   eax
c0014fd3:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014fd8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fde:	e8 53 c1 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014fe3:	5f                   	pop    edi
c0014fe4:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014fe9:	5d                   	pop    ebp
c0014fea:	68 c4 ad 02 c0       	push   0xc002adc4
c0014fef:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ff5:	e8 16 c1 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014ffa:	0f 21 f8             	mov    eax,db7
c0014ffd:	5a                   	pop    edx
c0014ffe:	59                   	pop    ecx
c0014fff:	50                   	push   eax
c0015000:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0015005:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001500b:	e8 26 c1 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0015010:	5e                   	pop    esi
c0015011:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015014:	e8 40 85 00 00       	call   c001d559 <Thr::getDriverNameFromAddress(unsigned long)>
c0015019:	83 c4 10             	add    esp,0x10
c001501c:	85 c0                	test   eax,eax
c001501e:	74 7d                	je     c001509d <displayDebugInfo(regs*)+0x48b>
c0015020:	89 c6                	mov    esi,eax
c0015022:	50                   	push   eax
c0015023:	50                   	push   eax
c0015024:	56                   	push   esi
c0015025:	68 cc ad 02 c0       	push   0xc002adcc
c001502a:	e8 6d dd ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001502f:	5a                   	pop    edx
c0015030:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0015035:	59                   	pop    ecx
c0015036:	68 da ad 02 c0       	push   0xc002adda
c001503b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015041:	e8 ca c0 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0015046:	5f                   	pop    edi
c0015047:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001504c:	5d                   	pop    ebp
c001504d:	56                   	push   esi
c001504e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015054:	e8 b7 c0 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0015059:	58                   	pop    eax
c001505a:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001505f:	5a                   	pop    edx
c0015060:	68 e6 ad 02 c0       	push   0xc002ade6
c0015065:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001506b:	e8 a0 c0 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0015070:	59                   	pop    ecx
c0015071:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0015076:	8b b8 26 19 00 00    	mov    edi,DWORD PTR [eax+0x1926]
c001507c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001507f:	e8 0c 85 00 00       	call   c001d590 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015084:	5b                   	pop    ebx
c0015085:	5d                   	pop    ebp
c0015086:	50                   	push   eax
c0015087:	57                   	push   edi
c0015088:	e8 a9 c0 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c001508d:	58                   	pop    eax
c001508e:	5a                   	pop    edx
c001508f:	56                   	push   esi
c0015090:	68 f2 ad 02 c0       	push   0xc002adf2
c0015095:	e8 02 dd ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001509a:	83 c4 10             	add    esp,0x10
c001509d:	fa                   	cli    
c001509e:	f4                   	hlt    
c001509f:	eb fe                	jmp    c001509f <displayDebugInfo(regs*)+0x48d>

c00150a1 <x87EmulHandler(regs*, void*)>:
c00150a1:	53                   	push   ebx
c00150a2:	83 ec 14             	sub    esp,0x14
c00150a5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00150a9:	53                   	push   ebx
c00150aa:	e8 83 a8 00 00       	call   c001f932 <Vm::x87Handler(regs*)>
c00150af:	83 c4 10             	add    esp,0x10
c00150b2:	84 c0                	test   al,al
c00150b4:	74 05                	je     c00150bb <x87EmulHandler(regs*, void*)+0x1a>
c00150b6:	83 c4 08             	add    esp,0x8
c00150b9:	5b                   	pop    ebx
c00150ba:	c3                   	ret    
c00150bb:	83 ec 0c             	sub    esp,0xc
c00150be:	68 02 ae 02 c0       	push   0xc002ae02
c00150c3:	e8 d4 dc ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00150c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150cb:	e8 42 fb ff ff       	call   c0014c12 <displayDebugInfo(regs*)>

c00150d0 <gpFault(regs*, void*)>:
c00150d0:	53                   	push   ebx
c00150d1:	83 ec 14             	sub    esp,0x14
c00150d4:	c7 05 f8 e3 02 c0 81 ec 01 c0 	mov    DWORD PTR ds:0xc002e3f8,0xc001ec81
c00150de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00150e2:	53                   	push   ebx
c00150e3:	e8 99 9b 00 00       	call   c001ec81 <Vm::faultHandler(regs*)>
c00150e8:	83 c4 10             	add    esp,0x10
c00150eb:	84 c0                	test   al,al
c00150ed:	74 05                	je     c00150f4 <gpFault(regs*, void*)+0x24>
c00150ef:	83 c4 08             	add    esp,0x8
c00150f2:	5b                   	pop    ebx
c00150f3:	c3                   	ret    
c00150f4:	83 ec 0c             	sub    esp,0xc
c00150f7:	68 18 ae 02 c0       	push   0xc002ae18
c00150fc:	e8 9b dc ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0015101:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015104:	e8 09 fb ff ff       	call   c0014c12 <displayDebugInfo(regs*)>

c0015109 <pgFault(regs*, void*)>:
c0015109:	83 ec 14             	sub    esp,0x14
c001510c:	0f 20 d0             	mov    eax,cr2
c001510f:	50                   	push   eax
c0015110:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015115:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015118:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001511e:	e8 89 d8 ff ff       	call   c00129ac <VAS::tryLoadBackOffDisk(unsigned long)>
c0015123:	83 c4 10             	add    esp,0x10
c0015126:	84 c0                	test   al,al
c0015128:	74 04                	je     c001512e <pgFault(regs*, void*)+0x25>
c001512a:	83 c4 0c             	add    esp,0xc
c001512d:	c3                   	ret    
c001512e:	83 ec 0c             	sub    esp,0xc
c0015131:	68 33 ae 02 c0       	push   0xc002ae33
c0015136:	e8 61 dc ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001513b:	58                   	pop    eax
c001513c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015140:	e8 cd fa ff ff       	call   c0014c12 <displayDebugInfo(regs*)>

c0015145 <otherISRHandler(regs*, void*)>:
c0015145:	53                   	push   ebx
c0015146:	83 ec 0c             	sub    esp,0xc
c0015149:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001514d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015150:	50                   	push   eax
c0015151:	50                   	push   eax
c0015152:	68 45 ae 02 c0       	push   0xc002ae45
c0015157:	e8 40 dc ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001515c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001515f:	e8 ae fa ff ff       	call   c0014c12 <displayDebugInfo(regs*)>

c0015164 <opcodeFault(regs*, void*)>:
c0015164:	55                   	push   ebp
c0015165:	89 e5                	mov    ebp,esp
c0015167:	56                   	push   esi
c0015168:	53                   	push   ebx
c0015169:	83 ec 40             	sub    esp,0x40
c001516c:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0015171:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015177:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001517d:	84 c0                	test   al,al
c001517f:	74 24                	je     c00151a5 <opcodeFault(regs*, void*)+0x41>
c0015181:	83 ec 0c             	sub    esp,0xc
c0015184:	68 64 ae 02 c0       	push   0xc002ae64
c0015189:	e8 0e dc ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001518e:	83 c4 10             	add    esp,0x10
c0015191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015194:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015197:	8d 50 19             	lea    edx,[eax+0x19]
c001519a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001519d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151a0:	e9 be 05 00 00       	jmp    c0015763 <opcodeFault(regs*, void*)+0x5ff>
c00151a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151ab:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00151ae:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00151b2:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00151b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151bc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00151bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151c2:	8a 00                	mov    al,BYTE PTR [eax]
c00151c4:	3c f0                	cmp    al,0xf0
c00151c6:	75 17                	jne    c00151df <opcodeFault(regs*, void*)+0x7b>
c00151c8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00151cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151d1:	8d 50 01             	lea    edx,[eax+0x1]
c00151d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151da:	e9 da 00 00 00       	jmp    c00152b9 <opcodeFault(regs*, void*)+0x155>
c00151df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151e2:	8a 00                	mov    al,BYTE PTR [eax]
c00151e4:	3c f2                	cmp    al,0xf2
c00151e6:	74 09                	je     c00151f1 <opcodeFault(regs*, void*)+0x8d>
c00151e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151eb:	8a 00                	mov    al,BYTE PTR [eax]
c00151ed:	3c f3                	cmp    al,0xf3
c00151ef:	75 1b                	jne    c001520c <opcodeFault(regs*, void*)+0xa8>
c00151f1:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00151f5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00151f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151fe:	8d 50 01             	lea    edx,[eax+0x1]
c0015201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015204:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015207:	e9 ad 00 00 00       	jmp    c00152b9 <opcodeFault(regs*, void*)+0x155>
c001520c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001520f:	8a 00                	mov    al,BYTE PTR [eax]
c0015211:	3c 66                	cmp    al,0x66
c0015213:	75 1f                	jne    c0015234 <opcodeFault(regs*, void*)+0xd0>
c0015215:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015219:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001521d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015223:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015226:	8d 50 01             	lea    edx,[eax+0x1]
c0015229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001522c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001522f:	e9 85 00 00 00       	jmp    c00152b9 <opcodeFault(regs*, void*)+0x155>
c0015234:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015237:	8a 00                	mov    al,BYTE PTR [eax]
c0015239:	3c 67                	cmp    al,0x67
c001523b:	75 18                	jne    c0015255 <opcodeFault(regs*, void*)+0xf1>
c001523d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015241:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015247:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001524a:	8d 50 01             	lea    edx,[eax+0x1]
c001524d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015250:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015253:	eb 64                	jmp    c00152b9 <opcodeFault(regs*, void*)+0x155>
c0015255:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015258:	8a 00                	mov    al,BYTE PTR [eax]
c001525a:	3c 2e                	cmp    al,0x2e
c001525c:	74 09                	je     c0015267 <opcodeFault(regs*, void*)+0x103>
c001525e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015261:	8a 00                	mov    al,BYTE PTR [eax]
c0015263:	3c 3e                	cmp    al,0x3e
c0015265:	75 18                	jne    c001527f <opcodeFault(regs*, void*)+0x11b>
c0015267:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001526b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001526e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015271:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015274:	8d 50 01             	lea    edx,[eax+0x1]
c0015277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001527d:	eb 3a                	jmp    c00152b9 <opcodeFault(regs*, void*)+0x155>
c001527f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015282:	8a 00                	mov    al,BYTE PTR [eax]
c0015284:	3c 36                	cmp    al,0x36
c0015286:	74 1b                	je     c00152a3 <opcodeFault(regs*, void*)+0x13f>
c0015288:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001528b:	8a 00                	mov    al,BYTE PTR [eax]
c001528d:	3c 26                	cmp    al,0x26
c001528f:	74 12                	je     c00152a3 <opcodeFault(regs*, void*)+0x13f>
c0015291:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015294:	8a 00                	mov    al,BYTE PTR [eax]
c0015296:	3c 64                	cmp    al,0x64
c0015298:	74 09                	je     c00152a3 <opcodeFault(regs*, void*)+0x13f>
c001529a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001529d:	8a 00                	mov    al,BYTE PTR [eax]
c001529f:	3c 65                	cmp    al,0x65
c00152a1:	75 16                	jne    c00152b9 <opcodeFault(regs*, void*)+0x155>
c00152a3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152a7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152b0:	8d 50 01             	lea    edx,[eax+0x1]
c00152b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152bc:	8a 00                	mov    al,BYTE PTR [eax]
c00152be:	3c 0f                	cmp    al,0xf
c00152c0:	0f 85 ad 00 00 00    	jne    c0015373 <opcodeFault(regs*, void*)+0x20f>
c00152c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c9:	40                   	inc    eax
c00152ca:	8a 00                	mov    al,BYTE PTR [eax]
c00152cc:	3c c2                	cmp    al,0xc2
c00152ce:	74 0e                	je     c00152de <opcodeFault(regs*, void*)+0x17a>
c00152d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d3:	40                   	inc    eax
c00152d4:	8a 00                	mov    al,BYTE PTR [eax]
c00152d6:	3c c3                	cmp    al,0xc3
c00152d8:	0f 85 95 00 00 00    	jne    c0015373 <opcodeFault(regs*, void*)+0x20f>
c00152de:	83 ec 0c             	sub    esp,0xc
c00152e1:	68 87 ae 02 c0       	push   0xc002ae87
c00152e6:	e8 b1 da ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00152eb:	83 c4 10             	add    esp,0x10
c00152ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152f4:	8d 50 01             	lea    edx,[eax+0x1]
c00152f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152fa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152fd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015300:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015303:	8a 00                	mov    al,BYTE PTR [eax]
c0015305:	8d 50 fe             	lea    edx,[eax-0x2]
c0015308:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530b:	88 10                	mov    BYTE PTR [eax],dl
c001530d:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015310:	50                   	push   eax
c0015311:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015314:	50                   	push   eax
c0015315:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015318:	50                   	push   eax
c0015319:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001531c:	e8 1d 48 00 00       	call   c0019b3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015321:	83 c4 10             	add    esp,0x10
c0015324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015327:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001532a:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001532d:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015330:	01 d0                	add    eax,edx
c0015332:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015335:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015338:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001533b:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001533e:	48                   	dec    eax
c001533f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015345:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015348:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001534b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534e:	83 ec 04             	sub    esp,0x4
c0015351:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015354:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015357:	50                   	push   eax
c0015358:	e8 57 ae fe ff       	call   c00001b4 <voodooXADD>
c001535d:	83 c4 10             	add    esp,0x10
c0015360:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015363:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015366:	01 c2                	add    edx,eax
c0015368:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001536e:	e9 f0 03 00 00       	jmp    c0015763 <opcodeFault(regs*, void*)+0x5ff>
c0015373:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015376:	8a 00                	mov    al,BYTE PTR [eax]
c0015378:	3c 0f                	cmp    al,0xf
c001537a:	0f 85 8b 01 00 00    	jne    c001550b <opcodeFault(regs*, void*)+0x3a7>
c0015380:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015383:	40                   	inc    eax
c0015384:	8a 00                	mov    al,BYTE PTR [eax]
c0015386:	3c c7                	cmp    al,0xc7
c0015388:	0f 86 7d 01 00 00    	jbe    c001550b <opcodeFault(regs*, void*)+0x3a7>
c001538e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015391:	40                   	inc    eax
c0015392:	8a 00                	mov    al,BYTE PTR [eax]
c0015394:	3c cf                	cmp    al,0xcf
c0015396:	0f 87 6f 01 00 00    	ja     c001550b <opcodeFault(regs*, void*)+0x3a7>
c001539c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539f:	40                   	inc    eax
c00153a0:	8a 00                	mov    al,BYTE PTR [eax]
c00153a2:	83 c0 38             	add    eax,0x38
c00153a5:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00153a8:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00153ac:	75 0b                	jne    c00153b9 <opcodeFault(regs*, void*)+0x255>
c00153ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00153b4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153b7:	eb 75                	jmp    c001542e <opcodeFault(regs*, void*)+0x2ca>
c00153b9:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00153bd:	75 0b                	jne    c00153ca <opcodeFault(regs*, void*)+0x266>
c00153bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00153c5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153c8:	eb 64                	jmp    c001542e <opcodeFault(regs*, void*)+0x2ca>
c00153ca:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00153ce:	75 0b                	jne    c00153db <opcodeFault(regs*, void*)+0x277>
c00153d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00153d6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153d9:	eb 53                	jmp    c001542e <opcodeFault(regs*, void*)+0x2ca>
c00153db:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00153df:	75 0b                	jne    c00153ec <opcodeFault(regs*, void*)+0x288>
c00153e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00153e7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153ea:	eb 42                	jmp    c001542e <opcodeFault(regs*, void*)+0x2ca>
c00153ec:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00153f0:	75 0b                	jne    c00153fd <opcodeFault(regs*, void*)+0x299>
c00153f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f5:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00153f8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153fb:	eb 31                	jmp    c001542e <opcodeFault(regs*, void*)+0x2ca>
c00153fd:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015401:	75 0b                	jne    c001540e <opcodeFault(regs*, void*)+0x2aa>
c0015403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015406:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015409:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001540c:	eb 20                	jmp    c001542e <opcodeFault(regs*, void*)+0x2ca>
c001540e:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015412:	75 0b                	jne    c001541f <opcodeFault(regs*, void*)+0x2bb>
c0015414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015417:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001541a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001541d:	eb 0f                	jmp    c001542e <opcodeFault(regs*, void*)+0x2ca>
c001541f:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015423:	75 09                	jne    c001542e <opcodeFault(regs*, void*)+0x2ca>
c0015425:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015428:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001542b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001542e:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015432:	74 10                	je     c0015444 <opcodeFault(regs*, void*)+0x2e0>
c0015434:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001543b:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015442:	eb 2d                	jmp    c0015471 <opcodeFault(regs*, void*)+0x30d>
c0015444:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015447:	c1 e0 18             	shl    eax,0x18
c001544a:	89 c2                	mov    edx,eax
c001544c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001544f:	c1 e0 08             	shl    eax,0x8
c0015452:	25 00 00 ff 00       	and    eax,0xff0000
c0015457:	09 c2                	or     edx,eax
c0015459:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001545c:	c1 e8 08             	shr    eax,0x8
c001545f:	25 00 ff 00 00       	and    eax,0xff00
c0015464:	09 c2                	or     edx,eax
c0015466:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015469:	c1 e8 18             	shr    eax,0x18
c001546c:	09 d0                	or     eax,edx
c001546e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015471:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015475:	75 0b                	jne    c0015482 <opcodeFault(regs*, void*)+0x31e>
c0015477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001547d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015480:	eb 75                	jmp    c00154f7 <opcodeFault(regs*, void*)+0x393>
c0015482:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015486:	75 0b                	jne    c0015493 <opcodeFault(regs*, void*)+0x32f>
c0015488:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001548e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015491:	eb 64                	jmp    c00154f7 <opcodeFault(regs*, void*)+0x393>
c0015493:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015497:	75 0b                	jne    c00154a4 <opcodeFault(regs*, void*)+0x340>
c0015499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001549f:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00154a2:	eb 53                	jmp    c00154f7 <opcodeFault(regs*, void*)+0x393>
c00154a4:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00154a8:	75 0b                	jne    c00154b5 <opcodeFault(regs*, void*)+0x351>
c00154aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ad:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154b0:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00154b3:	eb 42                	jmp    c00154f7 <opcodeFault(regs*, void*)+0x393>
c00154b5:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00154b9:	75 0b                	jne    c00154c6 <opcodeFault(regs*, void*)+0x362>
c00154bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154be:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154c1:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00154c4:	eb 31                	jmp    c00154f7 <opcodeFault(regs*, void*)+0x393>
c00154c6:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00154ca:	75 0b                	jne    c00154d7 <opcodeFault(regs*, void*)+0x373>
c00154cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154d2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00154d5:	eb 20                	jmp    c00154f7 <opcodeFault(regs*, void*)+0x393>
c00154d7:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00154db:	75 0b                	jne    c00154e8 <opcodeFault(regs*, void*)+0x384>
c00154dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154e3:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00154e6:	eb 0f                	jmp    c00154f7 <opcodeFault(regs*, void*)+0x393>
c00154e8:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00154ec:	75 09                	jne    c00154f7 <opcodeFault(regs*, void*)+0x393>
c00154ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154f4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00154f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154fd:	8d 50 02             	lea    edx,[eax+0x2]
c0015500:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015503:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015506:	e9 58 02 00 00       	jmp    c0015763 <opcodeFault(regs*, void*)+0x5ff>
c001550b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550e:	8a 00                	mov    al,BYTE PTR [eax]
c0015510:	3c 0f                	cmp    al,0xf
c0015512:	0f 85 76 01 00 00    	jne    c001568e <opcodeFault(regs*, void*)+0x52a>
c0015518:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551b:	40                   	inc    eax
c001551c:	8a 00                	mov    al,BYTE PTR [eax]
c001551e:	3c c7                	cmp    al,0xc7
c0015520:	0f 85 68 01 00 00    	jne    c001568e <opcodeFault(regs*, void*)+0x52a>
c0015526:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001552f:	8d 50 01             	lea    edx,[eax+0x1]
c0015532:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015535:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015538:	8d 45 ba             	lea    eax,[ebp-0x46]
c001553b:	50                   	push   eax
c001553c:	8d 45 bb             	lea    eax,[ebp-0x45]
c001553f:	50                   	push   eax
c0015540:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015543:	50                   	push   eax
c0015544:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015547:	e8 f2 45 00 00       	call   c0019b3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001554c:	83 c4 10             	add    esp,0x10
c001554f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015552:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015555:	83 f0 01             	xor    eax,0x1
c0015558:	84 c0                	test   al,al
c001555a:	0f 84 2e 01 00 00    	je     c001568e <opcodeFault(regs*, void*)+0x52a>
c0015560:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015563:	3c 01                	cmp    al,0x1
c0015565:	0f 85 23 01 00 00    	jne    c001568e <opcodeFault(regs*, void*)+0x52a>
c001556b:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001556e:	83 f0 01             	xor    eax,0x1
c0015571:	84 c0                	test   al,al
c0015573:	0f 84 15 01 00 00    	je     c001568e <opcodeFault(regs*, void*)+0x52a>
c0015579:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001557f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015582:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015589:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001558c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001558f:	89 c2                	mov    edx,eax
c0015591:	b8 00 00 00 00       	mov    eax,0x0
c0015596:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015599:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001559c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00155a2:	ba 00 00 00 00       	mov    edx,0x0
c00155a7:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00155aa:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00155ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00155b3:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00155b6:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00155bd:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00155c0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00155c3:	89 c2                	mov    edx,eax
c00155c5:	b8 00 00 00 00       	mov    eax,0x0
c00155ca:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00155cd:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00155d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155d6:	ba 00 00 00 00       	mov    edx,0x0
c00155db:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00155de:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00155e1:	e8 8b 86 00 00       	call   c001dc71 <lockScheduler()>
c00155e6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00155e9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00155ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ee:	89 c1                	mov    ecx,eax
c00155f0:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00155f3:	89 cb                	mov    ebx,ecx
c00155f5:	89 d0                	mov    eax,edx
c00155f7:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00155fa:	89 c6                	mov    esi,eax
c00155fc:	89 f0                	mov    eax,esi
c00155fe:	09 d8                	or     eax,ebx
c0015600:	85 c0                	test   eax,eax
c0015602:	75 21                	jne    c0015625 <opcodeFault(regs*, void*)+0x4c1>
c0015604:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015607:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001560a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001560d:	89 01                	mov    DWORD PTR [ecx],eax
c001560f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015615:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015618:	83 c8 40             	or     eax,0x40
c001561b:	89 c2                	mov    edx,eax
c001561d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015620:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015623:	eb 3e                	jmp    c0015663 <opcodeFault(regs*, void*)+0x4ff>
c0015625:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015628:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001562b:	8b 00                	mov    eax,DWORD PTR [eax]
c001562d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015630:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015633:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015636:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015639:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001563c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001563f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015642:	89 d0                	mov    eax,edx
c0015644:	31 d2                	xor    edx,edx
c0015646:	89 c3                	mov    ebx,eax
c0015648:	89 d6                	mov    esi,edx
c001564a:	89 da                	mov    edx,ebx
c001564c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564f:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015655:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015658:	83 e0 bf             	and    eax,0xffffffbf
c001565b:	89 c2                	mov    edx,eax
c001565d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015660:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015663:	e8 0b 86 00 00       	call   c001dc73 <unlockScheduler()>
c0015668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001566e:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015671:	01 c2                	add    edx,eax
c0015673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015676:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015679:	83 ec 0c             	sub    esp,0xc
c001567c:	68 96 ae 02 c0       	push   0xc002ae96
c0015681:	e8 16 d7 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0015686:	83 c4 10             	add    esp,0x10
c0015689:	e9 d5 00 00 00       	jmp    c0015763 <opcodeFault(regs*, void*)+0x5ff>
c001568e:	83 ec 0c             	sub    esp,0xc
c0015691:	68 a9 ae 02 c0       	push   0xc002aea9
c0015696:	e8 01 d7 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001569b:	83 c4 10             	add    esp,0x10
c001569e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a1:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00156a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156aa:	c1 e0 04             	shl    eax,0x4
c00156ad:	01 d0                	add    eax,edx
c00156af:	83 c0 03             	add    eax,0x3
c00156b2:	8a 00                	mov    al,BYTE PTR [eax]
c00156b4:	0f b6 d8             	movzx  ebx,al
c00156b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ba:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00156bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156c3:	c1 e0 04             	shl    eax,0x4
c00156c6:	01 d0                	add    eax,edx
c00156c8:	83 c0 02             	add    eax,0x2
c00156cb:	8a 00                	mov    al,BYTE PTR [eax]
c00156cd:	0f b6 c8             	movzx  ecx,al
c00156d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00156d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156dc:	c1 e0 04             	shl    eax,0x4
c00156df:	01 d0                	add    eax,edx
c00156e1:	40                   	inc    eax
c00156e2:	8a 00                	mov    al,BYTE PTR [eax]
c00156e4:	0f b6 d0             	movzx  edx,al
c00156e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ea:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00156ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156f3:	c1 e0 04             	shl    eax,0x4
c00156f6:	01 f0                	add    eax,esi
c00156f8:	8a 00                	mov    al,BYTE PTR [eax]
c00156fa:	0f b6 c0             	movzx  eax,al
c00156fd:	83 ec 0c             	sub    esp,0xc
c0015700:	53                   	push   ebx
c0015701:	51                   	push   ecx
c0015702:	52                   	push   edx
c0015703:	50                   	push   eax
c0015704:	68 bc ae 02 c0       	push   0xc002aebc
c0015709:	e8 8e d6 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001570e:	83 c4 20             	add    esp,0x20
c0015711:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015714:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015717:	83 c0 03             	add    eax,0x3
c001571a:	8a 00                	mov    al,BYTE PTR [eax]
c001571c:	0f b6 d8             	movzx  ebx,al
c001571f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015722:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015725:	83 c0 02             	add    eax,0x2
c0015728:	8a 00                	mov    al,BYTE PTR [eax]
c001572a:	0f b6 c8             	movzx  ecx,al
c001572d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015730:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015733:	40                   	inc    eax
c0015734:	8a 00                	mov    al,BYTE PTR [eax]
c0015736:	0f b6 d0             	movzx  edx,al
c0015739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001573f:	8a 00                	mov    al,BYTE PTR [eax]
c0015741:	0f b6 c0             	movzx  eax,al
c0015744:	83 ec 0c             	sub    esp,0xc
c0015747:	53                   	push   ebx
c0015748:	51                   	push   ecx
c0015749:	52                   	push   edx
c001574a:	50                   	push   eax
c001574b:	68 e4 ae 02 c0       	push   0xc002aee4
c0015750:	e8 47 d6 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0015755:	83 c4 20             	add    esp,0x20
c0015758:	83 ec 0c             	sub    esp,0xc
c001575b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001575e:	e8 af f4 ff ff       	call   c0014c12 <displayDebugInfo(regs*)>
c0015763:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015766:	5b                   	pop    ebx
c0015767:	5e                   	pop    esi
c0015768:	5d                   	pop    ebp
c0015769:	c3                   	ret    

c001576a <displayProgramFault(char const*)>:
c001576a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001576f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015772:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c0015778:	85 c0                	test   eax,eax
c001577a:	74 15                	je     c0015791 <displayProgramFault(char const*)+0x27>
c001577c:	83 ec 0c             	sub    esp,0xc
c001577f:	6a 04                	push   0x4
c0015781:	6a 0f                	push   0xf
c0015783:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015787:	50                   	push   eax
c0015788:	e8 45 b6 ff ff       	call   c0010dd2 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001578d:	83 c4 1c             	add    esp,0x1c
c0015790:	c3                   	ret    
c0015791:	c3                   	ret    

c0015792 <setupInterruptController()>:
c0015792:	55                   	push   ebp
c0015793:	89 e5                	mov    ebp,esp
c0015795:	53                   	push   ebx
c0015796:	83 ec 24             	sub    esp,0x24
c0015799:	b8 00 00 00 00       	mov    eax,0x0
c001579e:	85 c0                	test   eax,eax
c00157a0:	0f 95 c0             	setne  al
c00157a3:	84 c0                	test   al,al
c00157a5:	74 5b                	je     c0015802 <setupInterruptController()+0x70>
c00157a7:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00157ae:	83 ec 0c             	sub    esp,0xc
c00157b1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00157b4:	e8 8a a0 ff ff       	call   c000f843 <malloc>
c00157b9:	83 c4 10             	add    esp,0x10
c00157bc:	89 c3                	mov    ebx,eax
c00157be:	83 ec 0c             	sub    esp,0xc
c00157c1:	53                   	push   ebx
c00157c2:	e8 2f 00 01 00       	call   c00257f6 <APIC::APIC()>
c00157c7:	83 c4 10             	add    esp,0x10
c00157ca:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00157cd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00157d0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00157d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d5:	83 c0 08             	add    eax,0x8
c00157d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00157da:	6a 00                	push   0x0
c00157dc:	6a 00                	push   0x0
c00157de:	6a 00                	push   0x0
c00157e0:	52                   	push   edx
c00157e1:	ff d0                	call   eax
c00157e3:	83 c4 10             	add    esp,0x10
c00157e6:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00157eb:	83 ec 08             	sub    esp,0x8
c00157ee:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00157f1:	50                   	push   eax
c00157f2:	e8 cb e9 ff ff       	call   c00141c2 <Device::addChild(Device*)>
c00157f7:	83 c4 10             	add    esp,0x10
c00157fa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00157fd:	e9 88 03 00 00       	jmp    c0015b8a <setupInterruptController()+0x3f8>
c0015802:	a0 e0 0b 03 c0       	mov    al,ds:0xc0030be0
c0015807:	0f b6 c0             	movzx  eax,al
c001580a:	83 ec 08             	sub    esp,0x8
c001580d:	50                   	push   eax
c001580e:	68 09 af 02 c0       	push   0xc002af09
c0015813:	e8 84 d5 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0015818:	83 c4 10             	add    esp,0x10
c001581b:	a0 e0 0b 03 c0       	mov    al,ds:0xc0030be0
c0015820:	84 c0                	test   al,al
c0015822:	75 14                	jne    c0015838 <setupInterruptController()+0xa6>
c0015824:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0015829:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001582f:	83 e2 fe             	and    edx,0xfffffffe
c0015832:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015838:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001583d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015843:	83 e0 01             	and    eax,0x1
c0015846:	84 c0                	test   al,al
c0015848:	0f 95 c0             	setne  al
c001584b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001584e:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015855:	83 ec 0c             	sub    esp,0xc
c0015858:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001585b:	e8 e3 9f ff ff       	call   c000f843 <malloc>
c0015860:	83 c4 10             	add    esp,0x10
c0015863:	89 c3                	mov    ebx,eax
c0015865:	83 ec 0c             	sub    esp,0xc
c0015868:	53                   	push   ebx
c0015869:	e8 e0 04 01 00       	call   c0025d4e <PIC::PIC()>
c001586e:	83 c4 10             	add    esp,0x10
c0015871:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015874:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015877:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001587a:	8b 00                	mov    eax,DWORD PTR [eax]
c001587c:	83 c0 08             	add    eax,0x8
c001587f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015881:	6a 00                	push   0x0
c0015883:	6a 00                	push   0x0
c0015885:	6a 00                	push   0x0
c0015887:	52                   	push   edx
c0015888:	ff d0                	call   eax
c001588a:	83 c4 10             	add    esp,0x10
c001588d:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015891:	74 73                	je     c0015906 <setupInterruptController()+0x174>
c0015893:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015896:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015899:	8b 00                	mov    eax,DWORD PTR [eax]
c001589b:	83 c0 0c             	add    eax,0xc
c001589e:	8b 00                	mov    eax,DWORD PTR [eax]
c00158a0:	6a 00                	push   0x0
c00158a2:	6a 00                	push   0x0
c00158a4:	6a 00                	push   0x0
c00158a6:	52                   	push   edx
c00158a7:	ff d0                	call   eax
c00158a9:	83 c4 10             	add    esp,0x10
c00158ac:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00158b0:	74 15                	je     c00158c7 <setupInterruptController()+0x135>
c00158b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00158b7:	83 c0 04             	add    eax,0x4
c00158ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00158bc:	83 ec 0c             	sub    esp,0xc
c00158bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158c2:	ff d0                	call   eax
c00158c4:	83 c4 10             	add    esp,0x10
c00158c7:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00158ce:	83 ec 0c             	sub    esp,0xc
c00158d1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00158d4:	e8 6a 9f ff ff       	call   c000f843 <malloc>
c00158d9:	83 c4 10             	add    esp,0x10
c00158dc:	89 c3                	mov    ebx,eax
c00158de:	83 ec 0c             	sub    esp,0xc
c00158e1:	53                   	push   ebx
c00158e2:	e8 0f ff 00 00       	call   c00257f6 <APIC::APIC()>
c00158e7:	83 c4 10             	add    esp,0x10
c00158ea:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00158ed:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00158f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00158f5:	83 c0 08             	add    eax,0x8
c00158f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00158fa:	6a 00                	push   0x0
c00158fc:	6a 00                	push   0x0
c00158fe:	6a 00                	push   0x0
c0015900:	52                   	push   edx
c0015901:	ff d0                	call   eax
c0015903:	83 c4 10             	add    esp,0x10
c0015906:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001590b:	83 ec 08             	sub    esp,0x8
c001590e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015911:	50                   	push   eax
c0015912:	e8 ab e8 ff ff       	call   c00141c2 <Device::addChild(Device*)>
c0015917:	83 c4 10             	add    esp,0x10
c001591a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001591d:	8b 00                	mov    eax,DWORD PTR [eax]
c001591f:	83 c0 24             	add    eax,0x24
c0015922:	8b 00                	mov    eax,DWORD PTR [eax]
c0015924:	6a 00                	push   0x0
c0015926:	68 45 51 01 c0       	push   0xc0015145
c001592b:	6a 00                	push   0x0
c001592d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015930:	ff d0                	call   eax
c0015932:	83 c4 10             	add    esp,0x10
c0015935:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015938:	8b 00                	mov    eax,DWORD PTR [eax]
c001593a:	83 c0 24             	add    eax,0x24
c001593d:	8b 00                	mov    eax,DWORD PTR [eax]
c001593f:	6a 00                	push   0x0
c0015941:	68 45 51 01 c0       	push   0xc0015145
c0015946:	6a 01                	push   0x1
c0015948:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001594b:	ff d0                	call   eax
c001594d:	83 c4 10             	add    esp,0x10
c0015950:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015953:	8b 00                	mov    eax,DWORD PTR [eax]
c0015955:	83 c0 24             	add    eax,0x24
c0015958:	8b 00                	mov    eax,DWORD PTR [eax]
c001595a:	6a 00                	push   0x0
c001595c:	68 6f 4a 01 c0       	push   0xc0014a6f
c0015961:	6a 02                	push   0x2
c0015963:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015966:	ff d0                	call   eax
c0015968:	83 c4 10             	add    esp,0x10
c001596b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001596e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015970:	83 c0 24             	add    eax,0x24
c0015973:	8b 00                	mov    eax,DWORD PTR [eax]
c0015975:	6a 00                	push   0x0
c0015977:	68 45 51 01 c0       	push   0xc0015145
c001597c:	6a 03                	push   0x3
c001597e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015981:	ff d0                	call   eax
c0015983:	83 c4 10             	add    esp,0x10
c0015986:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015989:	8b 00                	mov    eax,DWORD PTR [eax]
c001598b:	83 c0 24             	add    eax,0x24
c001598e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015990:	6a 00                	push   0x0
c0015992:	68 45 51 01 c0       	push   0xc0015145
c0015997:	6a 04                	push   0x4
c0015999:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001599c:	ff d0                	call   eax
c001599e:	83 c4 10             	add    esp,0x10
c00159a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a6:	83 c0 24             	add    eax,0x24
c00159a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ab:	6a 00                	push   0x0
c00159ad:	68 45 51 01 c0       	push   0xc0015145
c00159b2:	6a 05                	push   0x5
c00159b4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159b7:	ff d0                	call   eax
c00159b9:	83 c4 10             	add    esp,0x10
c00159bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c1:	83 c0 24             	add    eax,0x24
c00159c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c6:	6a 00                	push   0x0
c00159c8:	68 64 51 01 c0       	push   0xc0015164
c00159cd:	6a 06                	push   0x6
c00159cf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159d2:	ff d0                	call   eax
c00159d4:	83 c4 10             	add    esp,0x10
c00159d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159da:	8b 00                	mov    eax,DWORD PTR [eax]
c00159dc:	83 c0 24             	add    eax,0x24
c00159df:	8b 00                	mov    eax,DWORD PTR [eax]
c00159e1:	6a 00                	push   0x0
c00159e3:	68 a1 50 01 c0       	push   0xc00150a1
c00159e8:	6a 07                	push   0x7
c00159ea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159ed:	ff d0                	call   eax
c00159ef:	83 c4 10             	add    esp,0x10
c00159f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f7:	83 c0 24             	add    eax,0x24
c00159fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fc:	6a 00                	push   0x0
c00159fe:	68 8a 48 01 c0       	push   0xc001488a
c0015a03:	6a 08                	push   0x8
c0015a05:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a08:	ff d0                	call   eax
c0015a0a:	83 c4 10             	add    esp,0x10
c0015a0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a10:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a12:	83 c0 24             	add    eax,0x24
c0015a15:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a17:	6a 00                	push   0x0
c0015a19:	68 45 51 01 c0       	push   0xc0015145
c0015a1e:	6a 09                	push   0x9
c0015a20:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a23:	ff d0                	call   eax
c0015a25:	83 c4 10             	add    esp,0x10
c0015a28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2d:	83 c0 24             	add    eax,0x24
c0015a30:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a32:	6a 00                	push   0x0
c0015a34:	68 45 51 01 c0       	push   0xc0015145
c0015a39:	6a 0a                	push   0xa
c0015a3b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a3e:	ff d0                	call   eax
c0015a40:	83 c4 10             	add    esp,0x10
c0015a43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a46:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a48:	83 c0 24             	add    eax,0x24
c0015a4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4d:	6a 00                	push   0x0
c0015a4f:	68 45 51 01 c0       	push   0xc0015145
c0015a54:	6a 0b                	push   0xb
c0015a56:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a59:	ff d0                	call   eax
c0015a5b:	83 c4 10             	add    esp,0x10
c0015a5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a61:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a63:	83 c0 24             	add    eax,0x24
c0015a66:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a68:	6a 00                	push   0x0
c0015a6a:	68 45 51 01 c0       	push   0xc0015145
c0015a6f:	6a 0c                	push   0xc
c0015a71:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a74:	ff d0                	call   eax
c0015a76:	83 c4 10             	add    esp,0x10
c0015a79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7e:	83 c0 24             	add    eax,0x24
c0015a81:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a83:	6a 00                	push   0x0
c0015a85:	68 d0 50 01 c0       	push   0xc00150d0
c0015a8a:	6a 0d                	push   0xd
c0015a8c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a8f:	ff d0                	call   eax
c0015a91:	83 c4 10             	add    esp,0x10
c0015a94:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a99:	83 c0 24             	add    eax,0x24
c0015a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9e:	6a 00                	push   0x0
c0015aa0:	68 09 51 01 c0       	push   0xc0015109
c0015aa5:	6a 0e                	push   0xe
c0015aa7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aaa:	ff d0                	call   eax
c0015aac:	83 c4 10             	add    esp,0x10
c0015aaf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab4:	83 c0 24             	add    eax,0x24
c0015ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab9:	6a 00                	push   0x0
c0015abb:	68 45 51 01 c0       	push   0xc0015145
c0015ac0:	6a 0f                	push   0xf
c0015ac2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac5:	ff d0                	call   eax
c0015ac7:	83 c4 10             	add    esp,0x10
c0015aca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015acd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acf:	83 c0 24             	add    eax,0x24
c0015ad2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad4:	6a 00                	push   0x0
c0015ad6:	68 45 51 01 c0       	push   0xc0015145
c0015adb:	6a 10                	push   0x10
c0015add:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae0:	ff d0                	call   eax
c0015ae2:	83 c4 10             	add    esp,0x10
c0015ae5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aea:	83 c0 24             	add    eax,0x24
c0015aed:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aef:	6a 00                	push   0x0
c0015af1:	68 45 51 01 c0       	push   0xc0015145
c0015af6:	6a 11                	push   0x11
c0015af8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015afb:	ff d0                	call   eax
c0015afd:	83 c4 10             	add    esp,0x10
c0015b00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b03:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b05:	83 c0 24             	add    eax,0x24
c0015b08:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0a:	6a 00                	push   0x0
c0015b0c:	68 45 51 01 c0       	push   0xc0015145
c0015b11:	6a 12                	push   0x12
c0015b13:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b16:	ff d0                	call   eax
c0015b18:	83 c4 10             	add    esp,0x10
c0015b1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b20:	83 c0 24             	add    eax,0x24
c0015b23:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b25:	6a 00                	push   0x0
c0015b27:	68 45 51 01 c0       	push   0xc0015145
c0015b2c:	6a 13                	push   0x13
c0015b2e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b31:	ff d0                	call   eax
c0015b33:	83 c4 10             	add    esp,0x10
c0015b36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b39:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3b:	83 c0 24             	add    eax,0x24
c0015b3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b40:	6a 00                	push   0x0
c0015b42:	68 45 51 01 c0       	push   0xc0015145
c0015b47:	6a 14                	push   0x14
c0015b49:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b4c:	ff d0                	call   eax
c0015b4e:	83 c4 10             	add    esp,0x10
c0015b51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b54:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b56:	83 c0 24             	add    eax,0x24
c0015b59:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5b:	6a 00                	push   0x0
c0015b5d:	68 45 51 01 c0       	push   0xc0015145
c0015b62:	6a 1e                	push   0x1e
c0015b64:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b67:	ff d0                	call   eax
c0015b69:	83 c4 10             	add    esp,0x10
c0015b6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b71:	83 c0 24             	add    eax,0x24
c0015b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b76:	6a 00                	push   0x0
c0015b78:	68 01 c6 01 c0       	push   0xc001c601
c0015b7d:	6a 60                	push   0x60
c0015b7f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b82:	ff d0                	call   eax
c0015b84:	83 c4 10             	add    esp,0x10
c0015b87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b8a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015b8d:	c9                   	leave  
c0015b8e:	c3                   	ret    
c0015b8f:	90                   	nop

c0015b90 <InterruptController::convertLegacyIRQNumber(int)>:
c0015b90:	55                   	push   ebp
c0015b91:	89 e5                	mov    ebp,esp
c0015b93:	83 ec 08             	sub    esp,0x8
c0015b96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b99:	83 ec 0c             	sub    esp,0xc
c0015b9c:	50                   	push   eax
c0015b9d:	e8 0c e9 ff ff       	call   c00144ae <Device::getName()>
c0015ba2:	83 c4 10             	add    esp,0x10
c0015ba5:	8a 00                	mov    al,BYTE PTR [eax]
c0015ba7:	3c 41                	cmp    al,0x41
c0015ba9:	0f 94 c0             	sete   al
c0015bac:	84 c0                	test   al,al
c0015bae:	74 28                	je     c0015bd8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015bb0:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015bb4:	7f 12                	jg     c0015bc8 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015bb6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015bb9:	05 a0 d4 02 c0       	add    eax,0xc002d4a0
c0015bbe:	8a 00                	mov    al,BYTE PTR [eax]
c0015bc0:	0f b6 c0             	movzx  eax,al
c0015bc3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015bc6:	eb 10                	jmp    c0015bd8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015bc8:	83 ec 0c             	sub    esp,0xc
c0015bcb:	68 00 ac 02 c0       	push   0xc002ac00
c0015bd0:	e8 a2 48 00 00       	call   c001a477 <Krnl::panic(char const*)>
c0015bd5:	83 c4 10             	add    esp,0x10
c0015bd8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015bdb:	c9                   	leave  
c0015bdc:	c3                   	ret    
c0015bdd:	90                   	nop

c0015bde <startGUI(void*)>:
c0015bde:	55                   	push   ebp
c0015bdf:	89 e5                	mov    ebp,esp
c0015be1:	53                   	push   ebx
c0015be2:	83 ec 04             	sub    esp,0x4
c0015be5:	e8 89 80 00 00       	call   c001dc73 <unlockScheduler()>
c0015bea:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c0015bf0:	83 ec 08             	sub    esp,0x8
c0015bf3:	6a 01                	push   0x1
c0015bf5:	68 70 af 02 c0       	push   0xc002af70
c0015bfa:	e8 ab 79 00 00       	call   c001d5aa <Thr::loadDLL(char const*, bool)>
c0015bff:	83 c4 10             	add    esp,0x10
c0015c02:	83 ec 08             	sub    esp,0x8
c0015c05:	53                   	push   ebx
c0015c06:	50                   	push   eax
c0015c07:	e8 ed 7b 00 00       	call   c001d7f9 <Thr::executeDLL(unsigned long, void*)>
c0015c0c:	83 c4 10             	add    esp,0x10
c0015c0f:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c0015c15:	83 ec 08             	sub    esp,0x8
c0015c18:	6a 01                	push   0x1
c0015c1a:	68 8a af 02 c0       	push   0xc002af8a
c0015c1f:	e8 86 79 00 00       	call   c001d5aa <Thr::loadDLL(char const*, bool)>
c0015c24:	83 c4 10             	add    esp,0x10
c0015c27:	83 ec 08             	sub    esp,0x8
c0015c2a:	53                   	push   ebx
c0015c2b:	50                   	push   eax
c0015c2c:	e8 c8 7b 00 00       	call   c001d7f9 <Thr::executeDLL(unsigned long, void*)>
c0015c31:	83 c4 10             	add    esp,0x10
c0015c34:	90                   	nop
c0015c35:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c38:	c9                   	leave  
c0015c39:	c3                   	ret    

c0015c3a <startGUIVESA(void*)>:
c0015c3a:	55                   	push   ebp
c0015c3b:	89 e5                	mov    ebp,esp
c0015c3d:	53                   	push   ebx
c0015c3e:	83 ec 04             	sub    esp,0x4
c0015c41:	e8 2d 80 00 00       	call   c001dc73 <unlockScheduler()>
c0015c46:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c0015c4c:	83 ec 08             	sub    esp,0x8
c0015c4f:	6a 01                	push   0x1
c0015c51:	68 a4 af 02 c0       	push   0xc002afa4
c0015c56:	e8 4f 79 00 00       	call   c001d5aa <Thr::loadDLL(char const*, bool)>
c0015c5b:	83 c4 10             	add    esp,0x10
c0015c5e:	83 ec 08             	sub    esp,0x8
c0015c61:	53                   	push   ebx
c0015c62:	50                   	push   eax
c0015c63:	e8 91 7b 00 00       	call   c001d7f9 <Thr::executeDLL(unsigned long, void*)>
c0015c68:	83 c4 10             	add    esp,0x10
c0015c6b:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c0015c71:	83 ec 08             	sub    esp,0x8
c0015c74:	6a 01                	push   0x1
c0015c76:	68 8a af 02 c0       	push   0xc002af8a
c0015c7b:	e8 2a 79 00 00       	call   c001d5aa <Thr::loadDLL(char const*, bool)>
c0015c80:	83 c4 10             	add    esp,0x10
c0015c83:	83 ec 08             	sub    esp,0x8
c0015c86:	53                   	push   ebx
c0015c87:	50                   	push   eax
c0015c88:	e8 6c 7b 00 00       	call   c001d7f9 <Thr::executeDLL(unsigned long, void*)>
c0015c8d:	83 c4 10             	add    esp,0x10
c0015c90:	90                   	nop
c0015c91:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c94:	c9                   	leave  
c0015c95:	c3                   	ret    

c0015c96 <sendKeyToTerminal(unsigned char)>:
c0015c96:	55                   	push   ebp
c0015c97:	89 e5                	mov    ebp,esp
c0015c99:	83 ec 28             	sub    esp,0x28
c0015c9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c9f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015ca2:	a1 24 e3 02 c0       	mov    eax,ds:0xc002e324
c0015ca7:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015cab:	83 ec 08             	sub    esp,0x8
c0015cae:	52                   	push   edx
c0015caf:	50                   	push   eax
c0015cb0:	e8 59 b6 ff ff       	call   c001130e <VgaText::receiveKey(unsigned char)>
c0015cb5:	83 c4 10             	add    esp,0x10
c0015cb8:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015cbc:	75 41                	jne    c0015cff <sendKeyToTerminal(unsigned char)+0x69>
c0015cbe:	e8 d5 7f 00 00       	call   c001dc98 <lockStuff()>
c0015cc3:	a1 00 e4 02 c0       	mov    eax,ds:0xc002e400
c0015cc8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ccb:	c7 05 00 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e400,0x0
c0015cd5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015cd9:	74 1f                	je     c0015cfa <sendKeyToTerminal(unsigned char)+0x64>
c0015cdb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cde:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015ce1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015ce4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ce7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015cea:	83 ec 0c             	sub    esp,0xc
c0015ced:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015cf0:	e8 93 85 00 00       	call   c001e288 <unblockTask(ThreadControlBlock*)>
c0015cf5:	83 c4 10             	add    esp,0x10
c0015cf8:	eb db                	jmp    c0015cd5 <sendKeyToTerminal(unsigned char)+0x3f>
c0015cfa:	e8 32 83 00 00       	call   c001e031 <unlockStuff()>
c0015cff:	90                   	nop
c0015d00:	c9                   	leave  
c0015d01:	c3                   	ret    

c0015d02 <sendKeyboardToken(KeyboardToken)>:
c0015d02:	55                   	push   ebp
c0015d03:	89 e5                	mov    ebp,esp
c0015d05:	83 ec 18             	sub    esp,0x18
c0015d08:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015d0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d0e:	0f b7 c0             	movzx  eax,ax
c0015d11:	83 f2 01             	xor    edx,0x1
c0015d14:	88 90 20 e4 02 c0    	mov    BYTE PTR [eax-0x3ffd1be0],dl
c0015d1a:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0015d1f:	85 c0                	test   eax,eax
c0015d21:	74 24                	je     c0015d47 <sendKeyboardToken(KeyboardToken)+0x45>
c0015d23:	8b 0d 08 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e408
c0015d29:	83 ec 04             	sub    esp,0x4
c0015d2c:	68 20 e4 02 c0       	push   0xc002e420
c0015d31:	83 ec 08             	sub    esp,0x8
c0015d34:	89 e2                	mov    edx,esp
c0015d36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d39:	89 02                	mov    DWORD PTR [edx],eax
c0015d3b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d3e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015d42:	ff d1                	call   ecx
c0015d44:	83 c4 10             	add    esp,0x10
c0015d47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d4a:	66 3d 03 02          	cmp    ax,0x203
c0015d4e:	75 07                	jne    c0015d57 <sendKeyboardToken(KeyboardToken)+0x55>
c0015d50:	a0 20 e5 02 c0       	mov    al,ds:0xc002e520
c0015d55:	84 c0                	test   al,al
c0015d57:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015d5b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015d5e:	a0 28 e8 02 c0       	mov    al,ds:0xc002e828
c0015d63:	38 c2                	cmp    dl,al
c0015d65:	74 1c                	je     c0015d83 <sendKeyboardToken(KeyboardToken)+0x81>
c0015d67:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015d6a:	a2 28 e8 02 c0       	mov    ds:0xc002e828,al
c0015d6f:	a0 28 e8 02 c0       	mov    al,ds:0xc002e828
c0015d74:	0f b6 c0             	movzx  eax,al
c0015d77:	83 ec 0c             	sub    esp,0xc
c0015d7a:	50                   	push   eax
c0015d7b:	e8 ee a7 ff ff       	call   c001056e <setTerminalScrollLock(bool)>
c0015d80:	83 c4 10             	add    esp,0x10
c0015d83:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015d86:	84 c0                	test   al,al
c0015d88:	0f 84 ae 00 00 00    	je     c0015e3c <sendKeyboardToken(KeyboardToken)+0x13a>
c0015d8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d91:	66 3d 10 03          	cmp    ax,0x310
c0015d95:	75 06                	jne    c0015d9d <sendKeyboardToken(KeyboardToken)+0x9b>
c0015d97:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015d9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015da0:	66 3d 11 03          	cmp    ax,0x311
c0015da4:	75 06                	jne    c0015dac <sendKeyboardToken(KeyboardToken)+0xaa>
c0015da6:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015dac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015daf:	66 3d 12 03          	cmp    ax,0x312
c0015db3:	75 06                	jne    c0015dbb <sendKeyboardToken(KeyboardToken)+0xb9>
c0015db5:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015dbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dbe:	66 3d 13 03          	cmp    ax,0x313
c0015dc2:	75 06                	jne    c0015dca <sendKeyboardToken(KeyboardToken)+0xc8>
c0015dc4:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015dca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dcd:	66 3d 14 03          	cmp    ax,0x314
c0015dd1:	75 06                	jne    c0015dd9 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015dd3:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015dd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ddc:	66 3d 15 03          	cmp    ax,0x315
c0015de0:	75 06                	jne    c0015de8 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015de2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015de8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015deb:	66 3d 16 03          	cmp    ax,0x316
c0015def:	75 06                	jne    c0015df7 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015df1:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015df7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dfa:	66 3d 17 03          	cmp    ax,0x317
c0015dfe:	75 06                	jne    c0015e06 <sendKeyboardToken(KeyboardToken)+0x104>
c0015e00:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015e06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e09:	66 3d 18 03          	cmp    ax,0x318
c0015e0d:	75 06                	jne    c0015e15 <sendKeyboardToken(KeyboardToken)+0x113>
c0015e0f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015e15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e18:	66 3d 19 03          	cmp    ax,0x319
c0015e1c:	75 06                	jne    c0015e24 <sendKeyboardToken(KeyboardToken)+0x122>
c0015e1e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015e24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e27:	66 3d 1a 03          	cmp    ax,0x31a
c0015e2b:	0f 85 c9 00 00 00    	jne    c0015efa <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015e31:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015e37:	e9 be 00 00 00       	jmp    c0015efa <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e3f:	66 3d 10 03          	cmp    ax,0x310
c0015e43:	75 0a                	jne    c0015e4f <sendKeyboardToken(KeyboardToken)+0x14d>
c0015e45:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015e4b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e52:	66 3d 11 03          	cmp    ax,0x311
c0015e56:	75 0a                	jne    c0015e62 <sendKeyboardToken(KeyboardToken)+0x160>
c0015e58:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015e5e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e65:	66 3d 12 03          	cmp    ax,0x312
c0015e69:	75 0a                	jne    c0015e75 <sendKeyboardToken(KeyboardToken)+0x173>
c0015e6b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015e71:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e78:	66 3d 13 03          	cmp    ax,0x313
c0015e7c:	75 0a                	jne    c0015e88 <sendKeyboardToken(KeyboardToken)+0x186>
c0015e7e:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015e84:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e8b:	66 3d 14 03          	cmp    ax,0x314
c0015e8f:	75 0a                	jne    c0015e9b <sendKeyboardToken(KeyboardToken)+0x199>
c0015e91:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015e97:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e9e:	66 3d 15 03          	cmp    ax,0x315
c0015ea2:	75 0a                	jne    c0015eae <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015ea4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015eaa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015eae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb1:	66 3d 16 03          	cmp    ax,0x316
c0015eb5:	75 0a                	jne    c0015ec1 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015eb7:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015ebd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ec1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec4:	66 3d 17 03          	cmp    ax,0x317
c0015ec8:	75 0a                	jne    c0015ed4 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015eca:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015ed0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ed4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed7:	66 3d 18 03          	cmp    ax,0x318
c0015edb:	75 0a                	jne    c0015ee7 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015edd:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015ee3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ee7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eea:	66 3d 19 03          	cmp    ax,0x319
c0015eee:	75 0a                	jne    c0015efa <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ef0:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015ef6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015efd:	66 3d 00 02          	cmp    ax,0x200
c0015f01:	75 2c                	jne    c0015f2f <sendKeyboardToken(KeyboardToken)+0x22d>
c0015f03:	a0 20 e8 02 c0       	mov    al,ds:0xc002e820
c0015f08:	83 f0 01             	xor    eax,0x1
c0015f0b:	84 c0                	test   al,al
c0015f0d:	74 20                	je     c0015f2f <sendKeyboardToken(KeyboardToken)+0x22d>
c0015f0f:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0015f14:	6a 01                	push   0x1
c0015f16:	6a 00                	push   0x0
c0015f18:	68 de 5b 01 c0       	push   0xc0015bde
c0015f1d:	50                   	push   eax
c0015f1e:	e8 7f 7e 00 00       	call   c001dda2 <Process::createThread(void (*)(void*), void*, int)>
c0015f23:	83 c4 10             	add    esp,0x10
c0015f26:	c6 05 20 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e820,0x1
c0015f2d:	eb 33                	jmp    c0015f62 <sendKeyboardToken(KeyboardToken)+0x260>
c0015f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f32:	66 3d 01 02          	cmp    ax,0x201
c0015f36:	75 2a                	jne    c0015f62 <sendKeyboardToken(KeyboardToken)+0x260>
c0015f38:	a0 20 e8 02 c0       	mov    al,ds:0xc002e820
c0015f3d:	83 f0 01             	xor    eax,0x1
c0015f40:	84 c0                	test   al,al
c0015f42:	74 1e                	je     c0015f62 <sendKeyboardToken(KeyboardToken)+0x260>
c0015f44:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0015f49:	6a 01                	push   0x1
c0015f4b:	6a 00                	push   0x0
c0015f4d:	68 3a 5c 01 c0       	push   0xc0015c3a
c0015f52:	50                   	push   eax
c0015f53:	e8 4a 7e 00 00       	call   c001dda2 <Process::createThread(void (*)(void*), void*, int)>
c0015f58:	83 c4 10             	add    esp,0x10
c0015f5b:	c6 05 20 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e820,0x1
c0015f62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f65:	66 3d 1d 03          	cmp    ax,0x31d
c0015f69:	75 06                	jne    c0015f71 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015f6b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015f71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f74:	66 3d 1c 03          	cmp    ax,0x31c
c0015f78:	75 06                	jne    c0015f80 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015f7a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015f80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f83:	66 3d 1b 03          	cmp    ax,0x31b
c0015f87:	75 06                	jne    c0015f8f <sendKeyboardToken(KeyboardToken)+0x28d>
c0015f89:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f92:	66 3d 1e 03          	cmp    ax,0x31e
c0015f96:	75 06                	jne    c0015f9e <sendKeyboardToken(KeyboardToken)+0x29c>
c0015f98:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015f9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa1:	66 3d 1f 03          	cmp    ax,0x31f
c0015fa5:	75 06                	jne    c0015fad <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015fa7:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb0:	66 3d 1a 03          	cmp    ax,0x31a
c0015fb4:	75 06                	jne    c0015fbc <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015fb6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015fbc:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015fc0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015fc3:	83 f0 01             	xor    eax,0x1
c0015fc6:	84 c0                	test   al,al
c0015fc8:	74 77                	je     c0016041 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015fca:	a0 21 e5 02 c0       	mov    al,ds:0xc002e521
c0015fcf:	84 c0                	test   al,al
c0015fd1:	74 41                	je     c0016014 <sendKeyboardToken(KeyboardToken)+0x312>
c0015fd3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015fd7:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015fdb:	74 2b                	je     c0016008 <sendKeyboardToken(KeyboardToken)+0x306>
c0015fdd:	8b 15 24 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e824
c0015fe3:	89 d0                	mov    eax,edx
c0015fe5:	c1 e0 02             	shl    eax,0x2
c0015fe8:	01 d0                	add    eax,edx
c0015fea:	01 c0                	add    eax,eax
c0015fec:	a3 24 e8 02 c0       	mov    ds:0xc002e824,eax
c0015ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff4:	0f b7 c0             	movzx  eax,ax
c0015ff7:	8d 50 d0             	lea    edx,[eax-0x30]
c0015ffa:	a1 24 e8 02 c0       	mov    eax,ds:0xc002e824
c0015fff:	01 d0                	add    eax,edx
c0016001:	a3 24 e8 02 c0       	mov    ds:0xc002e824,eax
c0016006:	eb 6d                	jmp    c0016075 <sendKeyboardToken(KeyboardToken)+0x373>
c0016008:	c7 05 24 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e824,0x0
c0016012:	eb 61                	jmp    c0016075 <sendKeyboardToken(KeyboardToken)+0x373>
c0016014:	a1 24 e8 02 c0       	mov    eax,ds:0xc002e824
c0016019:	85 c0                	test   eax,eax
c001601b:	74 18                	je     c0016035 <sendKeyboardToken(KeyboardToken)+0x333>
c001601d:	a1 24 e8 02 c0       	mov    eax,ds:0xc002e824
c0016022:	0f b6 c0             	movzx  eax,al
c0016025:	83 ec 0c             	sub    esp,0xc
c0016028:	50                   	push   eax
c0016029:	e8 68 fc ff ff       	call   c0015c96 <sendKeyToTerminal(unsigned char)>
c001602e:	83 c4 10             	add    esp,0x10
c0016031:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016035:	c7 05 24 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e824,0x0
c001603f:	eb 34                	jmp    c0016075 <sendKeyboardToken(KeyboardToken)+0x373>
c0016041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016044:	66 3d 01 01          	cmp    ax,0x101
c0016048:	75 2b                	jne    c0016075 <sendKeyboardToken(KeyboardToken)+0x373>
c001604a:	a1 24 e8 02 c0       	mov    eax,ds:0xc002e824
c001604f:	85 c0                	test   eax,eax
c0016051:	74 18                	je     c001606b <sendKeyboardToken(KeyboardToken)+0x369>
c0016053:	a1 24 e8 02 c0       	mov    eax,ds:0xc002e824
c0016058:	0f b6 c0             	movzx  eax,al
c001605b:	83 ec 0c             	sub    esp,0xc
c001605e:	50                   	push   eax
c001605f:	e8 32 fc ff ff       	call   c0015c96 <sendKeyToTerminal(unsigned char)>
c0016064:	83 c4 10             	add    esp,0x10
c0016067:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001606b:	c7 05 24 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e824,0x0
c0016075:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016078:	83 f0 01             	xor    eax,0x1
c001607b:	84 c0                	test   al,al
c001607d:	74 4c                	je     c00160cb <sendKeyboardToken(KeyboardToken)+0x3c9>
c001607f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016082:	83 f0 01             	xor    eax,0x1
c0016085:	84 c0                	test   al,al
c0016087:	74 42                	je     c00160cb <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016089:	a0 20 e5 02 c0       	mov    al,ds:0xc002e520
c001608e:	83 f0 01             	xor    eax,0x1
c0016091:	84 c0                	test   al,al
c0016093:	74 36                	je     c00160cb <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016098:	66 83 f8 1f          	cmp    ax,0x1f
c001609c:	76 09                	jbe    c00160a7 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001609e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a1:	66 83 f8 7e          	cmp    ax,0x7e
c00160a5:	76 12                	jbe    c00160b9 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00160a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160aa:	66 83 f8 0a          	cmp    ax,0xa
c00160ae:	74 09                	je     c00160b9 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00160b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b3:	66 83 f8 08          	cmp    ax,0x8
c00160b7:	75 12                	jne    c00160cb <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160bc:	0f b6 c0             	movzx  eax,al
c00160bf:	83 ec 0c             	sub    esp,0xc
c00160c2:	50                   	push   eax
c00160c3:	e8 ce fb ff ff       	call   c0015c96 <sendKeyToTerminal(unsigned char)>
c00160c8:	83 c4 10             	add    esp,0x10
c00160cb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00160ce:	83 f0 01             	xor    eax,0x1
c00160d1:	84 c0                	test   al,al
c00160d3:	74 4f                	je     c0016124 <sendKeyboardToken(KeyboardToken)+0x422>
c00160d5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00160d8:	83 f0 01             	xor    eax,0x1
c00160db:	84 c0                	test   al,al
c00160dd:	74 45                	je     c0016124 <sendKeyboardToken(KeyboardToken)+0x422>
c00160df:	a0 20 e5 02 c0       	mov    al,ds:0xc002e520
c00160e4:	84 c0                	test   al,al
c00160e6:	74 3c                	je     c0016124 <sendKeyboardToken(KeyboardToken)+0x422>
c00160e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160eb:	66 83 f8 3f          	cmp    ax,0x3f
c00160ef:	76 33                	jbe    c0016124 <sendKeyboardToken(KeyboardToken)+0x422>
c00160f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f4:	66 83 f8 7f          	cmp    ax,0x7f
c00160f8:	77 2a                	ja     c0016124 <sendKeyboardToken(KeyboardToken)+0x422>
c00160fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160fd:	88 c2                	mov    dl,al
c00160ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016102:	66 83 f8 5f          	cmp    ax,0x5f
c0016106:	76 04                	jbe    c001610c <sendKeyboardToken(KeyboardToken)+0x40a>
c0016108:	b0 20                	mov    al,0x20
c001610a:	eb 02                	jmp    c001610e <sendKeyboardToken(KeyboardToken)+0x40c>
c001610c:	b0 00                	mov    al,0x0
c001610e:	29 c2                	sub    edx,eax
c0016110:	88 d0                	mov    al,dl
c0016112:	83 e8 40             	sub    eax,0x40
c0016115:	0f b6 c0             	movzx  eax,al
c0016118:	83 ec 0c             	sub    esp,0xc
c001611b:	50                   	push   eax
c001611c:	e8 75 fb ff ff       	call   c0015c96 <sendKeyToTerminal(unsigned char)>
c0016121:	83 c4 10             	add    esp,0x10
c0016124:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016127:	66 3d 00 03          	cmp    ax,0x300
c001612b:	75 0f                	jne    c001613c <sendKeyboardToken(KeyboardToken)+0x43a>
c001612d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016130:	83 f0 01             	xor    eax,0x1
c0016133:	84 c0                	test   al,al
c0016135:	74 05                	je     c001613c <sendKeyboardToken(KeyboardToken)+0x43a>
c0016137:	e8 67 ac ff ff       	call   c0010da3 <doTerminalCycle()>
c001613c:	90                   	nop
c001613d:	c9                   	leave  
c001613e:	c3                   	ret    

c001613f <clearInternalKeybuffer(VgaText*)>:
c001613f:	55                   	push   ebp
c0016140:	89 e5                	mov    ebp,esp
c0016142:	83 ec 08             	sub    esp,0x8
c0016145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016148:	05 34 11 00 00       	add    eax,0x1134
c001614d:	83 ec 0c             	sub    esp,0xc
c0016150:	50                   	push   eax
c0016151:	e8 3e a6 fe ff       	call   c0000794 <strlen>
c0016156:	83 c4 10             	add    esp,0x10
c0016159:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001615c:	81 c2 34 11 00 00    	add    edx,0x1134
c0016162:	83 ec 04             	sub    esp,0x4
c0016165:	50                   	push   eax
c0016166:	6a 00                	push   0x0
c0016168:	52                   	push   edx
c0016169:	e8 0a a6 fe ff       	call   c0000778 <memset>
c001616e:	83 c4 10             	add    esp,0x10
c0016171:	90                   	nop
c0016172:	c9                   	leave  
c0016173:	c3                   	ret    

c0016174 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016174:	55                   	push   ebp
c0016175:	89 e5                	mov    ebp,esp
c0016177:	83 ec 18             	sub    esp,0x18
c001617a:	fb                   	sti    
c001617b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016182:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016186:	0f 84 8a 00 00 00    	je     c0016216 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c001618c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001618f:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016195:	84 c0                	test   al,al
c0016197:	75 11                	jne    c00161aa <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0016199:	e8 d3 7a 00 00       	call   c001dc71 <lockScheduler()>
c001619e:	e8 09 7e 00 00       	call   c001dfac <schedule()>
c00161a3:	e8 cb 7a 00 00       	call   c001dc73 <unlockScheduler()>
c00161a8:	eb e2                	jmp    c001618c <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00161aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00161ad:	8d 50 01             	lea    edx,[eax+0x1]
c00161b0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00161b3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161b6:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00161bc:	88 10                	mov    BYTE PTR [eax],dl
c00161be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c1:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00161c7:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00161ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161cd:	05 34 11 00 00       	add    eax,0x1134
c00161d2:	83 ec 0c             	sub    esp,0xc
c00161d5:	50                   	push   eax
c00161d6:	e8 b9 a5 fe ff       	call   c0000794 <strlen>
c00161db:	83 c4 10             	add    esp,0x10
c00161de:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161e1:	81 c2 34 11 00 00    	add    edx,0x1134
c00161e7:	8d 4a 01             	lea    ecx,[edx+0x1]
c00161ea:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161ed:	81 c2 34 11 00 00    	add    edx,0x1134
c00161f3:	83 ec 04             	sub    esp,0x4
c00161f6:	50                   	push   eax
c00161f7:	51                   	push   ecx
c00161f8:	52                   	push   edx
c00161f9:	e8 7e a4 fe ff       	call   c000067c <memmove>
c00161fe:	83 c4 10             	add    esp,0x10
c0016201:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016204:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016207:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001620b:	0f 85 71 ff ff ff    	jne    c0016182 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016211:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016214:	eb 03                	jmp    c0016219 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016216:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016219:	c9                   	leave  
c001621a:	c3                   	ret    
c001621b:	90                   	nop

c001621c <Keyboard::Keyboard(char const*)>:
c001621c:	83 ec 0c             	sub    esp,0xc
c001621f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016223:	83 ec 08             	sub    esp,0x8
c0016226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001622a:	50                   	push   eax
c001622b:	e8 82 e1 ff ff       	call   c00143b2 <Device::Device(char const*)>
c0016230:	83 c4 10             	add    esp,0x10
c0016233:	ba c8 af 02 c0       	mov    edx,0xc002afc8
c0016238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001623c:	89 10                	mov    DWORD PTR [eax],edx
c001623e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016242:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001624c:	c6 05 04 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e404,0x1
c0016253:	90                   	nop
c0016254:	83 c4 0c             	add    esp,0xc
c0016257:	c3                   	ret    

c0016258 <Keyboard::~Keyboard()>:
c0016258:	83 ec 0c             	sub    esp,0xc
c001625b:	ba c8 af 02 c0       	mov    edx,0xc002afc8
c0016260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016264:	89 10                	mov    DWORD PTR [eax],edx
c0016266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001626a:	83 ec 0c             	sub    esp,0xc
c001626d:	50                   	push   eax
c001626e:	e8 21 de ff ff       	call   c0014094 <Device::~Device()>
c0016273:	83 c4 10             	add    esp,0x10
c0016276:	90                   	nop
c0016277:	83 c4 0c             	add    esp,0xc
c001627a:	c3                   	ret    
c001627b:	90                   	nop

c001627c <Keyboard::~Keyboard()>:
c001627c:	83 ec 0c             	sub    esp,0xc
c001627f:	83 ec 0c             	sub    esp,0xc
c0016282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016286:	e8 cd ff ff ff       	call   c0016258 <Keyboard::~Keyboard()>
c001628b:	83 c4 10             	add    esp,0x10
c001628e:	83 ec 08             	sub    esp,0x8
c0016291:	68 5c 01 00 00       	push   0x15c
c0016296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001629a:	e8 1d ca ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c001629f:	83 c4 10             	add    esp,0x10
c00162a2:	83 c4 0c             	add    esp,0xc
c00162a5:	c3                   	ret    

c00162a6 <LogicalDisk::close(int, int, void*)>:
c00162a6:	83 c8 ff             	or     eax,0xffffffff
c00162a9:	c3                   	ret    

c00162aa <LogicalDisk::~LogicalDisk()>:
c00162aa:	83 ec 0c             	sub    esp,0xc
c00162ad:	ba 78 b0 02 c0       	mov    edx,0xc002b078
c00162b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162b6:	89 10                	mov    DWORD PTR [eax],edx
c00162b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162bc:	83 ec 0c             	sub    esp,0xc
c00162bf:	50                   	push   eax
c00162c0:	e8 cf dd ff ff       	call   c0014094 <Device::~Device()>
c00162c5:	83 c4 10             	add    esp,0x10
c00162c8:	90                   	nop
c00162c9:	83 c4 0c             	add    esp,0xc
c00162cc:	c3                   	ret    
c00162cd:	90                   	nop

c00162ce <LogicalDisk::~LogicalDisk()>:
c00162ce:	83 ec 0c             	sub    esp,0xc
c00162d1:	83 ec 0c             	sub    esp,0xc
c00162d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162d8:	e8 cd ff ff ff       	call   c00162aa <LogicalDisk::~LogicalDisk()>
c00162dd:	83 c4 10             	add    esp,0x10
c00162e0:	83 ec 08             	sub    esp,0x8
c00162e3:	68 74 01 00 00       	push   0x174
c00162e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162ec:	e8 cb c9 ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c00162f1:	83 c4 10             	add    esp,0x10
c00162f4:	83 c4 0c             	add    esp,0xc
c00162f7:	c3                   	ret    

c00162f8 <LogicalDisk::open(int, int, void*)>:
c00162f8:	83 ec 18             	sub    esp,0x18
c00162fb:	68 f4 af 02 c0       	push   0xc002aff4
c0016300:	e8 72 41 00 00       	call   c001a477 <Krnl::panic(char const*)>
c0016305:	83 c8 ff             	or     eax,0xffffffff
c0016308:	83 c4 1c             	add    esp,0x1c
c001630b:	c3                   	ret    

c001630c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001630c:	53                   	push   ebx
c001630d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016311:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016315:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016319:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001631f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016325:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001632b:	77 10                	ja     c001633d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001632d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016333:	89 d3                	mov    ebx,edx
c0016335:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001633b:	72 05                	jb     c0016342 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001633d:	83 c8 ff             	or     eax,0xffffffff
c0016340:	89 c2                	mov    edx,eax
c0016342:	5b                   	pop    ebx
c0016343:	c3                   	ret    

c0016344 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016344:	56                   	push   esi
c0016345:	83 c8 ff             	or     eax,0xffffffff
c0016348:	53                   	push   ebx
c0016349:	89 c2                	mov    edx,eax
c001634b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001634f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016353:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016357:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001635d:	77 27                	ja     c0016386 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001635f:	89 d8                	mov    eax,ebx
c0016361:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016367:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001636d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016372:	89 c2                	mov    edx,eax
c0016374:	73 10                	jae    c0016386 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016376:	89 c8                	mov    eax,ecx
c0016378:	89 da                	mov    edx,ebx
c001637a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016380:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016386:	5b                   	pop    ebx
c0016387:	5e                   	pop    esi
c0016388:	c3                   	ret    
c0016389:	90                   	nop

c001638a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001638a:	83 ec 1c             	sub    esp,0x1c
c001638d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016391:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016395:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016399:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001639d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00163a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00163a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00163a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00163ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163b0:	83 ec 08             	sub    esp,0x8
c00163b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00163b7:	50                   	push   eax
c00163b8:	e8 f5 df ff ff       	call   c00143b2 <Device::Device(char const*)>
c00163bd:	83 c4 10             	add    esp,0x10
c00163c0:	ba 78 b0 02 c0       	mov    edx,0xc002b078
c00163c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163c9:	89 10                	mov    DWORD PTR [eax],edx
c00163cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163cf:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00163d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163da:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00163e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163e5:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00163ef:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00163f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163fb:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016401:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016407:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001640b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001640e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016412:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016418:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001641e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016422:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016426:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001642c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016430:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001643a:	90                   	nop
c001643b:	83 c4 1c             	add    esp,0x1c
c001643e:	c3                   	ret    
c001643f:	90                   	nop

c0016440 <LogicalDisk::assignDriveLetter()>:
c0016440:	55                   	push   ebp
c0016441:	57                   	push   edi
c0016442:	56                   	push   esi
c0016443:	53                   	push   ebx
c0016444:	83 ec 14             	sub    esp,0x14
c0016447:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001644b:	8b 3d 40 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e840
c0016451:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016457:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001645b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016461:	8b 3d 44 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e844
c0016467:	3c 01                	cmp    al,0x1
c0016469:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001646d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016471:	19 c0                	sbb    eax,eax
c0016473:	83 e0 02             	and    eax,0x2
c0016476:	83 c0 41             	add    eax,0x41
c0016479:	0f be e8             	movsx  ebp,al
c001647c:	3c 43                	cmp    al,0x43
c001647e:	75 10                	jne    c0016490 <LogicalDisk::assignDriveLetter()+0x50>
c0016480:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016487:	75 5d                	jne    c00164e6 <LogicalDisk::assignDriveLetter()+0xa6>
c0016489:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001648e:	75 56                	jne    c00164e6 <LogicalDisk::assignDriveLetter()+0xa6>
c0016490:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016493:	ba 01 00 00 00       	mov    edx,0x1
c0016498:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001649c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00164a0:	d3 e2                	shl    edx,cl
c00164a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164a6:	89 d7                	mov    edi,edx
c00164a8:	89 d6                	mov    esi,edx
c00164aa:	c1 ff 1f             	sar    edi,0x1f
c00164ad:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00164b1:	21 f9                	and    ecx,edi
c00164b3:	09 d1                	or     ecx,edx
c00164b5:	75 2f                	jne    c00164e6 <LogicalDisk::assignDriveLetter()+0xa6>
c00164b7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00164bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00164bf:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00164c5:	09 f2                	or     edx,esi
c00164c7:	89 15 40 e8 02 c0    	mov    DWORD PTR ds:0xc002e840,edx
c00164cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164d1:	09 fa                	or     edx,edi
c00164d3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00164d7:	89 15 44 e8 02 c0    	mov    DWORD PTR ds:0xc002e844,edx
c00164dd:	89 1c bd 60 e8 02 c0 	mov    DWORD PTR [edi*4-0x3ffd17a0],ebx
c00164e4:	eb 08                	jmp    c00164ee <LogicalDisk::assignDriveLetter()+0xae>
c00164e6:	45                   	inc    ebp
c00164e7:	40                   	inc    eax
c00164e8:	3c 5b                	cmp    al,0x5b
c00164ea:	75 90                	jne    c001647c <LogicalDisk::assignDriveLetter()+0x3c>
c00164ec:	31 c0                	xor    eax,eax
c00164ee:	83 c4 14             	add    esp,0x14
c00164f1:	5b                   	pop    ebx
c00164f2:	5e                   	pop    esi
c00164f3:	5f                   	pop    edi
c00164f4:	5d                   	pop    ebp
c00164f5:	c3                   	ret    

c00164f6 <LogicalDisk::mount()>:
c00164f6:	56                   	push   esi
c00164f7:	53                   	push   ebx
c00164f8:	51                   	push   ecx
c00164f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164fd:	8b 1d d0 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3d0
c0016503:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001650d:	85 db                	test   ebx,ebx
c001650f:	74 50                	je     c0016561 <LogicalDisk::mount()+0x6b>
c0016511:	e8 46 77 00 00       	call   c001dc5c <getIRQNestingLevel()>
c0016516:	52                   	push   edx
c0016517:	52                   	push   edx
c0016518:	50                   	push   eax
c0016519:	68 18 b0 02 c0       	push   0xc002b018
c001651e:	e8 79 c8 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0016523:	83 c4 0c             	add    esp,0xc
c0016526:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001652d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001652f:	83 e8 41             	sub    eax,0x41
c0016532:	50                   	push   eax
c0016533:	56                   	push   esi
c0016534:	53                   	push   ebx
c0016535:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016538:	83 c4 10             	add    esp,0x10
c001653b:	84 c0                	test   al,al
c001653d:	74 08                	je     c0016547 <LogicalDisk::mount()+0x51>
c001653f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016545:	eb 1c                	jmp    c0016563 <LogicalDisk::mount()+0x6d>
c0016547:	e8 10 77 00 00       	call   c001dc5c <getIRQNestingLevel()>
c001654c:	51                   	push   ecx
c001654d:	51                   	push   ecx
c001654e:	50                   	push   eax
c001654f:	68 33 b0 02 c0       	push   0xc002b033
c0016554:	e8 43 c8 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0016559:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001655c:	83 c4 10             	add    esp,0x10
c001655f:	eb ac                	jmp    c001650d <LogicalDisk::mount()+0x17>
c0016561:	31 c0                	xor    eax,eax
c0016563:	5a                   	pop    edx
c0016564:	5b                   	pop    ebx
c0016565:	5e                   	pop    esi
c0016566:	c3                   	ret    
c0016567:	90                   	nop

c0016568 <LogicalDisk::unmount()>:
c0016568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001656c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016576:	c3                   	ret    
c0016577:	90                   	nop

c0016578 <LogicalDisk::eject()>:
c0016578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001657c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016582:	8b 10                	mov    edx,DWORD PTR [eax]
c0016584:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016588:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001658b:	90                   	nop

c001658c <LogicalDisk::unassignDriveLetter()>:
c001658c:	57                   	push   edi
c001658d:	56                   	push   esi
c001658e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016592:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016599:	84 c9                	test   cl,cl
c001659b:	75 0f                	jne    c00165ac <LogicalDisk::unassignDriveLetter()+0x20>
c001659d:	c7 44 24 0c 4e b0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b04e
c00165a5:	5e                   	pop    esi
c00165a6:	5f                   	pop    edi
c00165a7:	e9 cb 3e 00 00       	jmp    c001a477 <Krnl::panic(char const*)>
c00165ac:	83 e9 41             	sub    ecx,0x41
c00165af:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00165b6:	b8 01 00 00 00       	mov    eax,0x1
c00165bb:	c7 04 8d 60 e8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd17a0],0x0
c00165c6:	d3 e0                	shl    eax,cl
c00165c8:	89 c7                	mov    edi,eax
c00165ca:	f7 d0                	not    eax
c00165cc:	c1 ff 1f             	sar    edi,0x1f
c00165cf:	21 05 40 e8 02 c0    	and    DWORD PTR ds:0xc002e840,eax
c00165d5:	89 fe                	mov    esi,edi
c00165d7:	f7 d6                	not    esi
c00165d9:	21 35 44 e8 02 c0    	and    DWORD PTR ds:0xc002e844,esi
c00165df:	5e                   	pop    esi
c00165e0:	5f                   	pop    edi
c00165e1:	c3                   	ret    

c00165e2 <LogicalDisk::read(unsigned long long, int, void*)>:
c00165e2:	57                   	push   edi
c00165e3:	56                   	push   esi
c00165e4:	53                   	push   ebx
c00165e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00165e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165ed:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00165f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165f5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00165fb:	77 41                	ja     c001663e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00165fd:	99                   	cdq    
c00165fe:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016604:	01 c8                	add    eax,ecx
c0016606:	11 da                	adc    edx,ebx
c0016608:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001660e:	19 d7                	sbb    edi,edx
c0016610:	72 33                	jb     c0016645 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016612:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016618:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001661e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016622:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016626:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001662c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016632:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016636:	5b                   	pop    ebx
c0016637:	5e                   	pop    esi
c0016638:	5f                   	pop    edi
c0016639:	e9 b0 0a 00 00       	jmp    c00170ee <VCache::read(unsigned long long, int, void*)>
c001663e:	b8 05 00 00 00       	mov    eax,0x5
c0016643:	eb 05                	jmp    c001664a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016645:	b8 07 00 00 00       	mov    eax,0x7
c001664a:	5b                   	pop    ebx
c001664b:	5e                   	pop    esi
c001664c:	5f                   	pop    edi
c001664d:	c3                   	ret    

c001664e <LogicalDisk::write(unsigned long long, int, void*)>:
c001664e:	57                   	push   edi
c001664f:	56                   	push   esi
c0016650:	53                   	push   ebx
c0016651:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016655:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016659:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001665d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016661:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016667:	77 41                	ja     c00166aa <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016669:	99                   	cdq    
c001666a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016670:	01 c8                	add    eax,ecx
c0016672:	11 da                	adc    edx,ebx
c0016674:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001667a:	19 d7                	sbb    edi,edx
c001667c:	72 33                	jb     c00166b1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001667e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016684:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001668a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001668e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016692:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016698:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001669e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00166a2:	5b                   	pop    ebx
c00166a3:	5e                   	pop    esi
c00166a4:	5f                   	pop    edi
c00166a5:	e9 4e 09 00 00       	jmp    c0016ff8 <VCache::write(unsigned long long, int, void*)>
c00166aa:	b8 05 00 00 00       	mov    eax,0x5
c00166af:	eb 05                	jmp    c00166b6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00166b1:	b8 07 00 00 00       	mov    eax,0x7
c00166b6:	5b                   	pop    ebx
c00166b7:	5e                   	pop    esi
c00166b8:	5f                   	pop    edi
c00166b9:	c3                   	ret    

c00166ba <Mouse::Mouse(char const*)>:
c00166ba:	83 ec 0c             	sub    esp,0xc
c00166bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166c1:	83 ec 08             	sub    esp,0x8
c00166c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166c8:	50                   	push   eax
c00166c9:	e8 e4 dc ff ff       	call   c00143b2 <Device::Device(char const*)>
c00166ce:	83 c4 10             	add    esp,0x10
c00166d1:	ba a4 b0 02 c0       	mov    edx,0xc002b0a4
c00166d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166da:	89 10                	mov    DWORD PTR [eax],edx
c00166dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166e0:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00166ea:	90                   	nop
c00166eb:	83 c4 0c             	add    esp,0xc
c00166ee:	c3                   	ret    
c00166ef:	90                   	nop

c00166f0 <Mouse::~Mouse()>:
c00166f0:	83 ec 0c             	sub    esp,0xc
c00166f3:	ba a4 b0 02 c0       	mov    edx,0xc002b0a4
c00166f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166fc:	89 10                	mov    DWORD PTR [eax],edx
c00166fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016702:	83 ec 0c             	sub    esp,0xc
c0016705:	50                   	push   eax
c0016706:	e8 89 d9 ff ff       	call   c0014094 <Device::~Device()>
c001670b:	83 c4 10             	add    esp,0x10
c001670e:	90                   	nop
c001670f:	83 c4 0c             	add    esp,0xc
c0016712:	c3                   	ret    
c0016713:	90                   	nop

c0016714 <Mouse::~Mouse()>:
c0016714:	83 ec 0c             	sub    esp,0xc
c0016717:	83 ec 0c             	sub    esp,0xc
c001671a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001671e:	e8 cd ff ff ff       	call   c00166f0 <Mouse::~Mouse()>
c0016723:	83 c4 10             	add    esp,0x10
c0016726:	83 ec 08             	sub    esp,0x8
c0016729:	68 58 01 00 00       	push   0x158
c001672e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016732:	e8 85 c5 ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0016737:	83 c4 10             	add    esp,0x10
c001673a:	83 c4 0c             	add    esp,0xc
c001673d:	c3                   	ret    

c001673e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001673e:	55                   	push   ebp
c001673f:	57                   	push   edi
c0016740:	56                   	push   esi
c0016741:	53                   	push   ebx
c0016742:	81 ec 28 01 00 00    	sub    esp,0x128
c0016748:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001674f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016756:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001675d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016764:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016768:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001676c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016773:	e8 36 dd ff ff       	call   c00144ae <Device::getName()>
c0016778:	5a                   	pop    edx
c0016779:	59                   	pop    ecx
c001677a:	50                   	push   eax
c001677b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001677f:	55                   	push   ebp
c0016780:	e8 af a0 fe ff       	call   c0000834 <strcpy>
c0016785:	5b                   	pop    ebx
c0016786:	58                   	pop    eax
c0016787:	68 c8 b0 02 c0       	push   0xc002b0c8
c001678c:	55                   	push   ebp
c001678d:	e8 e2 a1 fe ff       	call   c0000974 <strcat>
c0016792:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016799:	e8 a5 90 ff ff       	call   c000f843 <malloc>
c001679e:	83 c4 0c             	add    esp,0xc
c00167a1:	89 c3                	mov    ebx,eax
c00167a3:	57                   	push   edi
c00167a4:	56                   	push   esi
c00167a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167ad:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00167b4:	55                   	push   ebp
c00167b5:	50                   	push   eax
c00167b6:	e8 cf fb ff ff       	call   c001638a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00167bb:	83 c4 14             	add    esp,0x14
c00167be:	53                   	push   ebx
c00167bf:	e8 7c fc ff ff       	call   c0016440 <LogicalDisk::assignDriveLetter()>
c00167c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00167c7:	89 c6                	mov    esi,eax
c00167c9:	e8 28 fd ff ff       	call   c00164f6 <LogicalDisk::mount()>
c00167ce:	58                   	pop    eax
c00167cf:	5a                   	pop    edx
c00167d0:	53                   	push   ebx
c00167d1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00167d8:	e8 e5 d9 ff ff       	call   c00141c2 <Device::addChild(Device*)>
c00167dd:	59                   	pop    ecx
c00167de:	89 f0                	mov    eax,esi
c00167e0:	5b                   	pop    ebx
c00167e1:	0f be f0             	movsx  esi,al
c00167e4:	56                   	push   esi
c00167e5:	68 d3 b0 02 c0       	push   0xc002b0d3
c00167ea:	e8 ad c5 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00167ef:	81 c4 2c 01 00 00    	add    esp,0x12c
c00167f5:	5b                   	pop    ebx
c00167f6:	5e                   	pop    esi
c00167f7:	5f                   	pop    edi
c00167f8:	5d                   	pop    ebp
c00167f9:	c3                   	ret    

c00167fa <createPartitionsForDisk(PhysicalDisk*)>:
c00167fa:	55                   	push   ebp
c00167fb:	57                   	push   edi
c00167fc:	56                   	push   esi
c00167fd:	53                   	push   ebx
c00167fe:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016804:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001680b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016811:	3d 00 02 00 00       	cmp    eax,0x200
c0016816:	74 27                	je     c001683f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016818:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001681e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016824:	83 ec 10             	sub    esp,0x10
c0016827:	0f a4 f7 0a          	shld   edi,esi,0xa
c001682b:	99                   	cdq    
c001682c:	c1 e6 0a             	shl    esi,0xa
c001682f:	52                   	push   edx
c0016830:	89 fd                	mov    ebp,edi
c0016832:	50                   	push   eax
c0016833:	55                   	push   ebp
c0016834:	56                   	push   esi
c0016835:	e8 42 00 01 00       	call   c002687c <__udivdi3>
c001683a:	e9 b1 00 00 00       	jmp    c00168f0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001683f:	83 ec 0c             	sub    esp,0xc
c0016842:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016844:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016848:	56                   	push   esi
c0016849:	6a 01                	push   0x1
c001684b:	6a 00                	push   0x0
c001684d:	6a 00                	push   0x0
c001684f:	53                   	push   ebx
c0016850:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016853:	83 c4 20             	add    esp,0x20
c0016856:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001685e:	75 0a                	jne    c001686a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016860:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016868:	74 2c                	je     c0016896 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001686a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016870:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016876:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001687c:	83 ec 10             	sub    esp,0x10
c001687f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016883:	89 f7                	mov    edi,esi
c0016885:	c1 e0 0a             	shl    eax,0xa
c0016888:	c1 ff 1f             	sar    edi,0x1f
c001688b:	57                   	push   edi
c001688c:	56                   	push   esi
c001688d:	52                   	push   edx
c001688e:	50                   	push   eax
c001688f:	e8 e8 ff 00 00       	call   c002687c <__udivdi3>
c0016894:	eb 5a                	jmp    c00168f0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016896:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001689d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00168a4:	83 e1 7f             	and    ecx,0x7f
c00168a7:	83 e0 7f             	and    eax,0x7f
c00168aa:	01 c1                	add    ecx,eax
c00168ac:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00168b3:	83 e0 7f             	and    eax,0x7f
c00168b6:	01 c1                	add    ecx,eax
c00168b8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00168bf:	83 e0 7f             	and    eax,0x7f
c00168c2:	00 c1                	add    cl,al
c00168c4:	74 41                	je     c0016907 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00168c6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00168cc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00168d2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00168d8:	83 ec 10             	sub    esp,0x10
c00168db:	0f a4 c2 0a          	shld   edx,eax,0xa
c00168df:	89 f7                	mov    edi,esi
c00168e1:	c1 e0 0a             	shl    eax,0xa
c00168e4:	c1 ff 1f             	sar    edi,0x1f
c00168e7:	57                   	push   edi
c00168e8:	56                   	push   esi
c00168e9:	52                   	push   edx
c00168ea:	50                   	push   eax
c00168eb:	e8 8c ff 00 00       	call   c002687c <__udivdi3>
c00168f0:	83 c4 14             	add    esp,0x14
c00168f3:	52                   	push   edx
c00168f4:	50                   	push   eax
c00168f5:	6a 00                	push   0x0
c00168f7:	6a 00                	push   0x0
c00168f9:	53                   	push   ebx
c00168fa:	e8 3f fe ff ff       	call   c001673e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00168ff:	83 c4 20             	add    esp,0x20
c0016902:	e9 79 01 00 00       	jmp    c0016a80 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016907:	89 f0                	mov    eax,esi
c0016909:	31 f6                	xor    esi,esi
c001690b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016912:	75 02                	jne    c0016916 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016914:	89 f1                	mov    ecx,esi
c0016916:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001691d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016924:	c1 e2 08             	shl    edx,0x8
c0016927:	c1 e7 10             	shl    edi,0x10
c001692a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016932:	09 fa                	or     edx,edi
c0016934:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001693c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016943:	83 c0 10             	add    eax,0x10
c0016946:	09 fa                	or     edx,edi
c0016948:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001694f:	c1 e7 18             	shl    edi,0x18
c0016952:	09 fa                	or     edx,edi
c0016954:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001695b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001695f:	c1 e7 10             	shl    edi,0x10
c0016962:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016969:	c1 e2 08             	shl    edx,0x8
c001696c:	09 fa                	or     edx,edi
c001696e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016975:	09 fa                	or     edx,edi
c0016977:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001697e:	c1 e7 18             	shl    edi,0x18
c0016981:	09 fa                	or     edx,edi
c0016983:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016987:	46                   	inc    esi
c0016988:	83 fe 04             	cmp    esi,0x4
c001698b:	0f 85 7a ff ff ff    	jne    c001690b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016995:	83 f0 01             	xor    eax,0x1
c0016998:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001699c:	75 57                	jne    c00169f5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001699e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169a2:	83 f0 01             	xor    eax,0x1
c00169a5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00169a9:	75 4a                	jne    c00169f5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00169ab:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00169af:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00169b7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00169bf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169c5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169cb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169d1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169d5:	89 f7                	mov    edi,esi
c00169d7:	c1 e0 0a             	shl    eax,0xa
c00169da:	c1 ff 1f             	sar    edi,0x1f
c00169dd:	57                   	push   edi
c00169de:	56                   	push   esi
c00169df:	52                   	push   edx
c00169e0:	50                   	push   eax
c00169e1:	e8 96 fe 00 00       	call   c002687c <__udivdi3>
c00169e6:	83 c4 10             	add    esp,0x10
c00169e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00169ed:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00169f1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00169f5:	84 c9                	test   cl,cl
c00169f7:	74 53                	je     c0016a4c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00169f9:	0f b6 c9             	movzx  ecx,cl
c00169fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016a04:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a08:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016a0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016a14:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016a18:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016a1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016a24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016a2c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016a30:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016a34:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016a38:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016a3c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016a40:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016a44:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016a48:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016a4c:	31 ed                	xor    ebp,ebp
c0016a4e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016a52:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016a56:	89 f8                	mov    eax,edi
c0016a58:	09 f0                	or     eax,esi
c0016a5a:	74 1e                	je     c0016a7a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016a5c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016a60:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016a64:	89 d1                	mov    ecx,edx
c0016a66:	09 c1                	or     ecx,eax
c0016a68:	74 10                	je     c0016a7a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016a6a:	83 ec 0c             	sub    esp,0xc
c0016a6d:	57                   	push   edi
c0016a6e:	56                   	push   esi
c0016a6f:	52                   	push   edx
c0016a70:	50                   	push   eax
c0016a71:	53                   	push   ebx
c0016a72:	e8 c7 fc ff ff       	call   c001673e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a77:	83 c4 20             	add    esp,0x20
c0016a7a:	45                   	inc    ebp
c0016a7b:	83 fd 04             	cmp    ebp,0x4
c0016a7e:	75 ce                	jne    c0016a4e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016a80:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016a86:	5b                   	pop    ebx
c0016a87:	5e                   	pop    esi
c0016a88:	5f                   	pop    edi
c0016a89:	5d                   	pop    ebp
c0016a8a:	c3                   	ret    
c0016a8b:	90                   	nop

c0016a8c <Serial::Serial(char const*)>:
c0016a8c:	83 ec 0c             	sub    esp,0xc
c0016a8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a93:	83 ec 08             	sub    esp,0x8
c0016a96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a9a:	50                   	push   eax
c0016a9b:	e8 12 d9 ff ff       	call   c00143b2 <Device::Device(char const*)>
c0016aa0:	83 c4 10             	add    esp,0x10
c0016aa3:	ba 00 b1 02 c0       	mov    edx,0xc002b100
c0016aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016aac:	89 10                	mov    DWORD PTR [eax],edx
c0016aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ab2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016abc:	90                   	nop
c0016abd:	83 c4 0c             	add    esp,0xc
c0016ac0:	c3                   	ret    
c0016ac1:	90                   	nop

c0016ac2 <Serial::~Serial()>:
c0016ac2:	83 ec 0c             	sub    esp,0xc
c0016ac5:	ba 00 b1 02 c0       	mov    edx,0xc002b100
c0016aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ace:	89 10                	mov    DWORD PTR [eax],edx
c0016ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ad4:	83 ec 0c             	sub    esp,0xc
c0016ad7:	50                   	push   eax
c0016ad8:	e8 b7 d5 ff ff       	call   c0014094 <Device::~Device()>
c0016add:	83 c4 10             	add    esp,0x10
c0016ae0:	90                   	nop
c0016ae1:	83 c4 0c             	add    esp,0xc
c0016ae4:	c3                   	ret    
c0016ae5:	90                   	nop

c0016ae6 <Serial::~Serial()>:
c0016ae6:	83 ec 0c             	sub    esp,0xc
c0016ae9:	83 ec 0c             	sub    esp,0xc
c0016aec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016af0:	e8 cd ff ff ff       	call   c0016ac2 <Serial::~Serial()>
c0016af5:	83 c4 10             	add    esp,0x10
c0016af8:	83 ec 08             	sub    esp,0x8
c0016afb:	68 58 01 00 00       	push   0x158
c0016b00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b04:	e8 b3 c1 ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0016b09:	83 c4 10             	add    esp,0x10
c0016b0c:	83 c4 0c             	add    esp,0xc
c0016b0f:	c3                   	ret    

c0016b10 <Timer::Timer(char const*)>:
c0016b10:	83 ec 0c             	sub    esp,0xc
c0016b13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b17:	83 ec 08             	sub    esp,0x8
c0016b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b1e:	50                   	push   eax
c0016b1f:	e8 8e d8 ff ff       	call   c00143b2 <Device::Device(char const*)>
c0016b24:	83 c4 10             	add    esp,0x10
c0016b27:	ba 44 b1 02 c0       	mov    edx,0xc002b144
c0016b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b30:	89 10                	mov    DWORD PTR [eax],edx
c0016b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b36:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016b40:	90                   	nop
c0016b41:	83 c4 0c             	add    esp,0xc
c0016b44:	c3                   	ret    
c0016b45:	90                   	nop

c0016b46 <Timer::~Timer()>:
c0016b46:	83 ec 0c             	sub    esp,0xc
c0016b49:	ba 44 b1 02 c0       	mov    edx,0xc002b144
c0016b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b52:	89 10                	mov    DWORD PTR [eax],edx
c0016b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b58:	83 ec 0c             	sub    esp,0xc
c0016b5b:	50                   	push   eax
c0016b5c:	e8 33 d5 ff ff       	call   c0014094 <Device::~Device()>
c0016b61:	83 c4 10             	add    esp,0x10
c0016b64:	90                   	nop
c0016b65:	83 c4 0c             	add    esp,0xc
c0016b68:	c3                   	ret    
c0016b69:	90                   	nop

c0016b6a <Timer::~Timer()>:
c0016b6a:	83 ec 0c             	sub    esp,0xc
c0016b6d:	83 ec 0c             	sub    esp,0xc
c0016b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b74:	e8 cd ff ff ff       	call   c0016b46 <Timer::~Timer()>
c0016b79:	83 c4 10             	add    esp,0x10
c0016b7c:	83 ec 08             	sub    esp,0x8
c0016b7f:	68 5c 01 00 00       	push   0x15c
c0016b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b88:	e8 2f c1 ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0016b8d:	83 c4 10             	add    esp,0x10
c0016b90:	83 c4 0c             	add    esp,0xc
c0016b93:	c3                   	ret    

c0016b94 <Timer::read()>:
c0016b94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b98:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016b9e:	c3                   	ret    

c0016b9f <timerHandler(unsigned long long)>:
c0016b9f:	55                   	push   ebp
c0016ba0:	57                   	push   edi
c0016ba1:	56                   	push   esi
c0016ba2:	53                   	push   ebx
c0016ba3:	83 ec 0c             	sub    esp,0xc
c0016ba6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016baa:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016bae:	01 35 d0 e8 02 c0    	add    DWORD PTR ds:0xc002e8d0,esi
c0016bb4:	11 3d d4 e8 02 c0    	adc    DWORD PTR ds:0xc002e8d4,edi
c0016bba:	80 3d 4d e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e24d,0x0
c0016bc1:	0f 84 07 01 00 00    	je     c0016cce <timerHandler(unsigned long long)+0x12f>
c0016bc7:	e8 cc 70 00 00       	call   c001dc98 <lockStuff()>
c0016bcc:	83 ec 0c             	sub    esp,0xc
c0016bcf:	68 9c 17 03 c0       	push   0xc003179c
c0016bd4:	e8 15 1d 01 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016bd9:	c7 04 24 9c 17 03 c0 	mov    DWORD PTR [esp],0xc003179c
c0016be0:	89 c3                	mov    ebx,eax
c0016be2:	e8 0f 1d 01 00       	call   c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016be7:	83 c4 10             	add    esp,0x10
c0016bea:	84 c0                	test   al,al
c0016bec:	74 60                	je     c0016c4e <timerHandler(unsigned long long)+0xaf>
c0016bee:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016bf4:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016bf7:	85 c0                	test   eax,eax
c0016bf9:	0f 85 91 00 00 00    	jne    c0016c90 <timerHandler(unsigned long long)+0xf1>
c0016bff:	e9 be 00 00 00       	jmp    c0016cc2 <timerHandler(unsigned long long)+0x123>
c0016c04:	83 ec 0c             	sub    esp,0xc
c0016c07:	55                   	push   ebp
c0016c08:	e8 7b 76 00 00       	call   c001e288 <unblockTask(ThreadControlBlock*)>
c0016c0d:	83 c4 10             	add    esp,0x10
c0016c10:	39 eb                	cmp    ebx,ebp
c0016c12:	75 12                	jne    c0016c26 <timerHandler(unsigned long long)+0x87>
c0016c14:	83 ec 0c             	sub    esp,0xc
c0016c17:	68 9c 17 03 c0       	push   0xc003179c
c0016c1c:	e8 cd 1c 01 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c21:	89 c3                	mov    ebx,eax
c0016c23:	83 c4 10             	add    esp,0x10
c0016c26:	83 ec 0c             	sub    esp,0xc
c0016c29:	68 9c 17 03 c0       	push   0xc003179c
c0016c2e:	e8 c3 1c 01 00       	call   c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016c33:	83 c4 10             	add    esp,0x10
c0016c36:	84 c0                	test   al,al
c0016c38:	75 b4                	jne    c0016bee <timerHandler(unsigned long long)+0x4f>
c0016c3a:	83 ec 0c             	sub    esp,0xc
c0016c3d:	68 9c 17 03 c0       	push   0xc003179c
c0016c42:	e8 a7 1c 01 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c47:	83 c4 10             	add    esp,0x10
c0016c4a:	39 d8                	cmp    eax,ebx
c0016c4c:	74 a0                	je     c0016bee <timerHandler(unsigned long long)+0x4f>
c0016c4e:	83 ec 0c             	sub    esp,0xc
c0016c51:	68 9c 17 03 c0       	push   0xc003179c
c0016c56:	e8 93 1c 01 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c5b:	c7 04 24 9c 17 03 c0 	mov    DWORD PTR [esp],0xc003179c
c0016c62:	89 c5                	mov    ebp,eax
c0016c64:	e8 a9 1c 01 00       	call   c0028912 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016c69:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016c6c:	83 c4 10             	add    esp,0x10
c0016c6f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016c72:	39 15 d0 e8 02 c0    	cmp    DWORD PTR ds:0xc002e8d0,edx
c0016c78:	a1 d4 e8 02 c0       	mov    eax,ds:0xc002e8d4
c0016c7d:	19 c8                	sbb    eax,ecx
c0016c7f:	73 83                	jae    c0016c04 <timerHandler(unsigned long long)+0x65>
c0016c81:	50                   	push   eax
c0016c82:	50                   	push   eax
c0016c83:	55                   	push   ebp
c0016c84:	68 9c 17 03 c0       	push   0xc003179c
c0016c89:	e8 32 1d 01 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016c8e:	eb 93                	jmp    c0016c23 <timerHandler(unsigned long long)+0x84>
c0016c90:	80 3d 4c e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e24c,0x0
c0016c97:	74 29                	je     c0016cc2 <timerHandler(unsigned long long)+0x123>
c0016c99:	39 c6                	cmp    esi,eax
c0016c9b:	bb 00 00 00 00       	mov    ebx,0x0
c0016ca0:	19 df                	sbb    edi,ebx
c0016ca2:	72 19                	jb     c0016cbd <timerHandler(unsigned long long)+0x11e>
c0016ca4:	e8 c8 6f 00 00       	call   c001dc71 <lockScheduler()>
c0016ca9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cae:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016cb1:	e8 f6 72 00 00       	call   c001dfac <schedule()>
c0016cb6:	e8 b8 6f 00 00       	call   c001dc73 <unlockScheduler()>
c0016cbb:	eb 05                	jmp    c0016cc2 <timerHandler(unsigned long long)+0x123>
c0016cbd:	29 f0                	sub    eax,esi
c0016cbf:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016cc2:	83 c4 0c             	add    esp,0xc
c0016cc5:	5b                   	pop    ebx
c0016cc6:	5e                   	pop    esi
c0016cc7:	5f                   	pop    edi
c0016cc8:	5d                   	pop    ebp
c0016cc9:	e9 63 73 00 00       	jmp    c001e031 <unlockStuff()>
c0016cce:	83 c4 0c             	add    esp,0xc
c0016cd1:	5b                   	pop    ebx
c0016cd2:	5e                   	pop    esi
c0016cd3:	5f                   	pop    edi
c0016cd4:	5d                   	pop    ebp
c0016cd5:	c3                   	ret    

c0016cd6 <setupTimer(int)>:
c0016cd6:	57                   	push   edi
c0016cd7:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0016cdc:	56                   	push   esi
c0016cdd:	53                   	push   ebx
c0016cde:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ce2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ce8:	83 ec 0c             	sub    esp,0xc
c0016ceb:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016cf1:	e8 b8 d7 ff ff       	call   c00144ae <Device::getName()>
c0016cf6:	83 c4 10             	add    esp,0x10
c0016cf9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016cfc:	0f 85 8d 00 00 00    	jne    c0016d8f <setupTimer(int)+0xb9>
c0016d02:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0016d07:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016d0e:	74 7f                	je     c0016d8f <setupTimer(int)+0xb9>
c0016d10:	83 ec 0c             	sub    esp,0xc
c0016d13:	68 5c 01 00 00       	push   0x15c
c0016d18:	e8 26 8b ff ff       	call   c000f843 <malloc>
c0016d1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d20:	89 c3                	mov    ebx,eax
c0016d22:	e8 31 f7 00 00       	call   c0026458 <PIT::PIT()>
c0016d27:	59                   	pop    ecx
c0016d28:	5f                   	pop    edi
c0016d29:	53                   	push   ebx
c0016d2a:	ff 35 48 e2 02 c0    	push   DWORD PTR ds:0xc002e248
c0016d30:	e8 8d d4 ff ff       	call   c00141c2 <Device::addChild(Device*)>
c0016d35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d37:	6a 00                	push   0x0
c0016d39:	6a 00                	push   0x0
c0016d3b:	56                   	push   esi
c0016d3c:	53                   	push   ebx
c0016d3d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016d40:	83 c4 14             	add    esp,0x14
c0016d43:	68 60 01 00 00       	push   0x160
c0016d48:	e8 f6 8a ff ff       	call   c000f843 <malloc>
c0016d4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d50:	89 c7                	mov    edi,eax
c0016d52:	e8 b1 f5 00 00       	call   c0026308 <APICTimer::APICTimer()>
c0016d57:	6a 00                	push   0x0
c0016d59:	6a 00                	push   0x0
c0016d5b:	56                   	push   esi
c0016d5c:	57                   	push   edi
c0016d5d:	e8 a8 f4 00 00       	call   c002620a <APICTimer::open(int, int, void*)>
c0016d62:	83 c4 20             	add    esp,0x20
c0016d65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d67:	6a 00                	push   0x0
c0016d69:	6a 00                	push   0x0
c0016d6b:	6a 00                	push   0x0
c0016d6d:	53                   	push   ebx
c0016d6e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d71:	58                   	pop    eax
c0016d72:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0016d77:	5a                   	pop    edx
c0016d78:	57                   	push   edi
c0016d79:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d7f:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016d85:	e8 38 d4 ff ff       	call   c00141c2 <Device::addChild(Device*)>
c0016d8a:	83 c4 10             	add    esp,0x10
c0016d8d:	eb 33                	jmp    c0016dc2 <setupTimer(int)+0xec>
c0016d8f:	83 ec 0c             	sub    esp,0xc
c0016d92:	68 5c 01 00 00       	push   0x15c
c0016d97:	e8 a7 8a ff ff       	call   c000f843 <malloc>
c0016d9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d9f:	89 c3                	mov    ebx,eax
c0016da1:	e8 b2 f6 00 00       	call   c0026458 <PIT::PIT()>
c0016da6:	58                   	pop    eax
c0016da7:	5a                   	pop    edx
c0016da8:	53                   	push   ebx
c0016da9:	ff 35 48 e2 02 c0    	push   DWORD PTR ds:0xc002e248
c0016daf:	e8 0e d4 ff ff       	call   c00141c2 <Device::addChild(Device*)>
c0016db4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016db6:	6a 00                	push   0x0
c0016db8:	6a 00                	push   0x0
c0016dba:	56                   	push   esi
c0016dbb:	53                   	push   ebx
c0016dbc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016dbf:	83 c4 20             	add    esp,0x20
c0016dc2:	89 d8                	mov    eax,ebx
c0016dc4:	5b                   	pop    ebx
c0016dc5:	5e                   	pop    esi
c0016dc6:	5f                   	pop    edi
c0016dc7:	c3                   	ret    

c0016dc8 <VCache::VCache(PhysicalDisk*)>:
c0016dc8:	53                   	push   ebx
c0016dc9:	83 ec 18             	sub    esp,0x18
c0016dcc:	ba 74 b1 02 c0       	mov    edx,0xc002b174
c0016dd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dd5:	89 10                	mov    DWORD PTR [eax],edx
c0016dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ddb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016de6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016ded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016df1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016df8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016dff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e03:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016e0a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016e11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e15:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016e1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e20:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016e24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e28:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016e2f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016e36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e3a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016e3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e42:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016e46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e4a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016e4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e52:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016e59:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016e61:	83 ec 0c             	sub    esp,0xc
c0016e64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e68:	e8 d6 89 ff ff       	call   c000f843 <malloc>
c0016e6d:	83 c4 10             	add    esp,0x10
c0016e70:	89 c3                	mov    ebx,eax
c0016e72:	83 ec 0c             	sub    esp,0xc
c0016e75:	53                   	push   ebx
c0016e76:	e8 15 6f 00 00       	call   c001dd90 <Mutex::Mutex()>
c0016e7b:	83 c4 10             	add    esp,0x10
c0016e7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e82:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016e85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e89:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016e8d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016e90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e94:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016e9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e9f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016ea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ea9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016eac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016eb0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016eb6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ebc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016ec0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016ec3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016ec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eca:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016ece:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ed2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016ed8:	05 00 01 00 00       	add    eax,0x100
c0016edd:	c1 e0 04             	shl    eax,0x4
c0016ee0:	83 ec 0c             	sub    esp,0xc
c0016ee3:	50                   	push   eax
c0016ee4:	e8 5a 89 ff ff       	call   c000f843 <malloc>
c0016ee9:	83 c4 10             	add    esp,0x10
c0016eec:	89 c2                	mov    edx,eax
c0016eee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ef2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ef9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016f00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f04:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f08:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f0c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f12:	c1 e0 07             	shl    eax,0x7
c0016f15:	83 ec 0c             	sub    esp,0xc
c0016f18:	50                   	push   eax
c0016f19:	e8 25 89 ff ff       	call   c000f843 <malloc>
c0016f1e:	83 c4 10             	add    esp,0x10
c0016f21:	89 c2                	mov    edx,eax
c0016f23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f27:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016f2a:	90                   	nop
c0016f2b:	83 c4 18             	add    esp,0x18
c0016f2e:	5b                   	pop    ebx
c0016f2f:	c3                   	ret    

c0016f30 <VCache::invalidateReadBuffer()>:
c0016f30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f34:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016f3a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f3e:	c3                   	ret    
c0016f3f:	90                   	nop

c0016f40 <VCache::writeWriteBuffer()>:
c0016f40:	53                   	push   ebx
c0016f41:	83 ec 14             	sub    esp,0x14
c0016f44:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016f48:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f4b:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f4d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016f50:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f53:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016f56:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016f59:	50                   	push   eax
c0016f5a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016f5d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016f64:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016f6b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016f6f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016f76:	83 c4 28             	add    esp,0x28
c0016f79:	5b                   	pop    ebx
c0016f7a:	c3                   	ret    
c0016f7b:	90                   	nop

c0016f7c <VCache::~VCache()>:
c0016f7c:	83 ec 0c             	sub    esp,0xc
c0016f7f:	ba 74 b1 02 c0       	mov    edx,0xc002b174
c0016f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f88:	89 10                	mov    DWORD PTR [eax],edx
c0016f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f8e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016f91:	84 c0                	test   al,al
c0016f93:	74 0f                	je     c0016fa4 <VCache::~VCache()+0x28>
c0016f95:	83 ec 0c             	sub    esp,0xc
c0016f98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f9c:	e8 9f ff ff ff       	call   c0016f40 <VCache::writeWriteBuffer()>
c0016fa1:	83 c4 10             	add    esp,0x10
c0016fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fa8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016fab:	83 ec 0c             	sub    esp,0xc
c0016fae:	50                   	push   eax
c0016faf:	e8 9f 88 ff ff       	call   c000f853 <free>
c0016fb4:	83 c4 10             	add    esp,0x10
c0016fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fbb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016fbe:	83 ec 0c             	sub    esp,0xc
c0016fc1:	50                   	push   eax
c0016fc2:	e8 8c 88 ff ff       	call   c000f853 <free>
c0016fc7:	83 c4 10             	add    esp,0x10
c0016fca:	90                   	nop
c0016fcb:	83 c4 0c             	add    esp,0xc
c0016fce:	c3                   	ret    
c0016fcf:	90                   	nop

c0016fd0 <VCache::~VCache()>:
c0016fd0:	83 ec 0c             	sub    esp,0xc
c0016fd3:	83 ec 0c             	sub    esp,0xc
c0016fd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fda:	e8 9d ff ff ff       	call   c0016f7c <VCache::~VCache()>
c0016fdf:	83 c4 10             	add    esp,0x10
c0016fe2:	83 ec 08             	sub    esp,0x8
c0016fe5:	6a 44                	push   0x44
c0016fe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016feb:	e8 cc bc ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0016ff0:	83 c4 10             	add    esp,0x10
c0016ff3:	83 c4 0c             	add    esp,0xc
c0016ff6:	c3                   	ret    
c0016ff7:	90                   	nop

c0016ff8 <VCache::write(unsigned long long, int, void*)>:
c0016ff8:	55                   	push   ebp
c0016ff9:	57                   	push   edi
c0016ffa:	56                   	push   esi
c0016ffb:	53                   	push   ebx
c0016ffc:	83 ec 28             	sub    esp,0x28
c0016fff:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017003:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017007:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001700b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001700f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017012:	e8 db 71 00 00       	call   c001e1f2 <Semaphore::acquire()>
c0017017:	83 c4 10             	add    esp,0x10
c001701a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001701e:	74 0c                	je     c001702c <VCache::write(unsigned long long, int, void*)+0x34>
c0017020:	83 ec 0c             	sub    esp,0xc
c0017023:	53                   	push   ebx
c0017024:	e8 07 ff ff ff       	call   c0016f30 <VCache::invalidateReadBuffer()>
c0017029:	83 c4 10             	add    esp,0x10
c001702c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017030:	74 66                	je     c0017098 <VCache::write(unsigned long long, int, void*)+0xa0>
c0017032:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017035:	99                   	cdq    
c0017036:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001703a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001703d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017040:	89 c1                	mov    ecx,eax
c0017042:	89 d0                	mov    eax,edx
c0017044:	31 f1                	xor    ecx,esi
c0017046:	31 f8                	xor    eax,edi
c0017048:	89 ca                	mov    edx,ecx
c001704a:	09 c2                	or     edx,eax
c001704c:	75 3e                	jne    c001708c <VCache::write(unsigned long long, int, void*)+0x94>
c001704e:	83 fd 01             	cmp    ebp,0x1
c0017051:	75 39                	jne    c001708c <VCache::write(unsigned long long, int, void*)+0x94>
c0017053:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017056:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001705c:	51                   	push   ecx
c001705d:	50                   	push   eax
c001705e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017062:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017066:	0f af c8             	imul   ecx,eax
c0017069:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001706c:	51                   	push   ecx
c001706d:	e8 d2 96 fe ff       	call   c0000744 <memcpy>
c0017072:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017075:	83 c4 10             	add    esp,0x10
c0017078:	40                   	inc    eax
c0017079:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001707c:	83 c0 80             	add    eax,0xffffff80
c001707f:	75 57                	jne    c00170d8 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017081:	83 ec 0c             	sub    esp,0xc
c0017084:	53                   	push   ebx
c0017085:	e8 b6 fe ff ff       	call   c0016f40 <VCache::writeWriteBuffer()>
c001708a:	eb 34                	jmp    c00170c0 <VCache::write(unsigned long long, int, void*)+0xc8>
c001708c:	83 ec 0c             	sub    esp,0xc
c001708f:	53                   	push   ebx
c0017090:	e8 ab fe ff ff       	call   c0016f40 <VCache::writeWriteBuffer()>
c0017095:	83 c4 10             	add    esp,0x10
c0017098:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001709b:	83 fd 7f             	cmp    ebp,0x7f
c001709e:	7f 25                	jg     c00170c5 <VCache::write(unsigned long long, int, void*)+0xcd>
c00170a0:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00170a3:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00170a6:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00170a9:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00170ad:	52                   	push   edx
c00170ae:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00170b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00170b8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00170bb:	e8 84 96 fe ff       	call   c0000744 <memcpy>
c00170c0:	83 c4 10             	add    esp,0x10
c00170c3:	eb 13                	jmp    c00170d8 <VCache::write(unsigned long long, int, void*)+0xe0>
c00170c5:	83 ec 0c             	sub    esp,0xc
c00170c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00170ca:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00170ce:	55                   	push   ebp
c00170cf:	57                   	push   edi
c00170d0:	56                   	push   esi
c00170d1:	50                   	push   eax
c00170d2:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00170d5:	83 c4 20             	add    esp,0x20
c00170d8:	83 ec 0c             	sub    esp,0xc
c00170db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00170de:	e8 bd 76 00 00       	call   c001e7a0 <Semaphore::release()>
c00170e3:	83 c4 2c             	add    esp,0x2c
c00170e6:	31 c0                	xor    eax,eax
c00170e8:	5b                   	pop    ebx
c00170e9:	5e                   	pop    esi
c00170ea:	5f                   	pop    edi
c00170eb:	5d                   	pop    ebp
c00170ec:	c3                   	ret    
c00170ed:	90                   	nop

c00170ee <VCache::read(unsigned long long, int, void*)>:
c00170ee:	55                   	push   ebp
c00170ef:	57                   	push   edi
c00170f0:	56                   	push   esi
c00170f1:	53                   	push   ebx
c00170f2:	83 ec 28             	sub    esp,0x28
c00170f5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00170f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00170fd:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017101:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017105:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017109:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001710d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017111:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017114:	e8 d9 70 00 00       	call   c001e1f2 <Semaphore::acquire()>
c0017119:	83 c4 10             	add    esp,0x10
c001711c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017120:	74 0c                	je     c001712e <VCache::read(unsigned long long, int, void*)+0x40>
c0017122:	83 ec 0c             	sub    esp,0xc
c0017125:	53                   	push   ebx
c0017126:	e8 15 fe ff ff       	call   c0016f40 <VCache::writeWriteBuffer()>
c001712b:	83 c4 10             	add    esp,0x10
c001712e:	83 fe 01             	cmp    esi,0x1
c0017131:	0f 85 80 00 00 00    	jne    c00171b7 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017137:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001713a:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017141:	75 74                	jne    c00171b7 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017143:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017146:	89 d1                	mov    ecx,edx
c0017148:	f7 d9                	neg    ecx
c001714a:	89 cf                	mov    edi,ecx
c001714c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017150:	c1 ff 1f             	sar    edi,0x1f
c0017153:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017156:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001715a:	89 ce                	mov    esi,ecx
c001715c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017160:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017164:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017168:	89 cf                	mov    edi,ecx
c001716a:	74 0a                	je     c0017176 <VCache::read(unsigned long long, int, void*)+0x88>
c001716c:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001716f:	75 05                	jne    c0017176 <VCache::read(unsigned long long, int, void*)+0x88>
c0017171:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017174:	74 1c                	je     c0017192 <VCache::read(unsigned long long, int, void*)+0xa4>
c0017176:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001717a:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001717d:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017180:	83 ec 0c             	sub    esp,0xc
c0017183:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017185:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017188:	52                   	push   edx
c0017189:	57                   	push   edi
c001718a:	56                   	push   esi
c001718b:	50                   	push   eax
c001718c:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001718f:	83 c4 20             	add    esp,0x20
c0017192:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017195:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001719b:	50                   	push   eax
c001719c:	52                   	push   edx
c001719d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00171a0:	48                   	dec    eax
c00171a1:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00171a5:	0f af c2             	imul   eax,edx
c00171a8:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00171ab:	50                   	push   eax
c00171ac:	55                   	push   ebp
c00171ad:	e8 92 95 fe ff       	call   c0000744 <memcpy>
c00171b2:	83 c4 10             	add    esp,0x10
c00171b5:	eb 21                	jmp    c00171d8 <VCache::read(unsigned long long, int, void*)+0xea>
c00171b7:	83 ec 0c             	sub    esp,0xc
c00171ba:	53                   	push   ebx
c00171bb:	e8 70 fd ff ff       	call   c0016f30 <VCache::invalidateReadBuffer()>
c00171c0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00171c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00171c8:	56                   	push   esi
c00171c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171d1:	50                   	push   eax
c00171d2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00171d5:	83 c4 20             	add    esp,0x20
c00171d8:	83 ec 0c             	sub    esp,0xc
c00171db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171de:	e8 bd 75 00 00       	call   c001e7a0 <Semaphore::release()>
c00171e3:	83 c4 2c             	add    esp,0x2c
c00171e6:	31 c0                	xor    eax,eax
c00171e8:	5b                   	pop    ebx
c00171e9:	5e                   	pop    esi
c00171ea:	5f                   	pop    edi
c00171eb:	5d                   	pop    ebp
c00171ec:	c3                   	ret    
c00171ed:	90                   	nop

c00171ee <Video::putrect(int, int, int, int, unsigned int)>:
c00171ee:	55                   	push   ebp
c00171ef:	57                   	push   edi
c00171f0:	56                   	push   esi
c00171f1:	53                   	push   ebx
c00171f2:	83 ec 1c             	sub    esp,0x1c
c00171f5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00171f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171fd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017201:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017205:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017209:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001720d:	01 df                	add    edi,ebx
c001720f:	39 fb                	cmp    ebx,edi
c0017211:	7d 1f                	jge    c0017232 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017213:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017217:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001721b:	7d 12                	jge    c001722f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001721d:	8b 16                	mov    edx,DWORD PTR [esi]
c001721f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017223:	53                   	push   ebx
c0017224:	55                   	push   ebp
c0017225:	45                   	inc    ebp
c0017226:	56                   	push   esi
c0017227:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001722a:	83 c4 10             	add    esp,0x10
c001722d:	eb e8                	jmp    c0017217 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001722f:	43                   	inc    ebx
c0017230:	eb dd                	jmp    c001720f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017232:	83 c4 1c             	add    esp,0x1c
c0017235:	5b                   	pop    ebx
c0017236:	5e                   	pop    esi
c0017237:	5f                   	pop    edi
c0017238:	5d                   	pop    ebp
c0017239:	c3                   	ret    

c001723a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001723a:	55                   	push   ebp
c001723b:	57                   	push   edi
c001723c:	31 ff                	xor    edi,edi
c001723e:	56                   	push   esi
c001723f:	53                   	push   ebx
c0017240:	83 ec 1c             	sub    esp,0x1c
c0017243:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017247:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001724b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017252:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017257:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001725b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001725f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017263:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017266:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001726a:	01 f9                	add    ecx,edi
c001726c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017270:	7d 2f                	jge    c00172a1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017272:	31 f6                	xor    esi,esi
c0017274:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017278:	01 f2                	add    edx,esi
c001727a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001727e:	7d 1a                	jge    c001729a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017280:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017283:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017286:	46                   	inc    esi
c0017287:	51                   	push   ecx
c0017288:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001728c:	52                   	push   edx
c001728d:	55                   	push   ebp
c001728e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017291:	83 c4 10             	add    esp,0x10
c0017294:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017298:	eb da                	jmp    c0017274 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001729a:	47                   	inc    edi
c001729b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001729f:	eb c5                	jmp    c0017266 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00172a1:	83 c4 1c             	add    esp,0x1c
c00172a4:	5b                   	pop    ebx
c00172a5:	5e                   	pop    esi
c00172a6:	5f                   	pop    edi
c00172a7:	5d                   	pop    ebp
c00172a8:	c3                   	ret    
c00172a9:	90                   	nop

c00172aa <Video::blit(unsigned int*, int, int, int, int)>:
c00172aa:	55                   	push   ebp
c00172ab:	57                   	push   edi
c00172ac:	56                   	push   esi
c00172ad:	53                   	push   ebx
c00172ae:	83 ec 1c             	sub    esp,0x1c
c00172b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172b9:	85 c0                	test   eax,eax
c00172bb:	79 02                	jns    c00172bf <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00172bd:	31 c0                	xor    eax,eax
c00172bf:	c1 e0 02             	shl    eax,0x2
c00172c2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172ca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172ce:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00172d2:	39 d8                	cmp    eax,ebx
c00172d4:	7e 49                	jle    c001731f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00172d6:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00172dc:	7c 41                	jl     c001731f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00172de:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00172e2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00172e6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00172ea:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00172ee:	39 f9                	cmp    ecx,edi
c00172f0:	7e 22                	jle    c0017314 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00172f2:	83 c5 04             	add    ebp,0x4
c00172f5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00172fb:	7c 14                	jl     c0017311 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00172fd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00172ff:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017302:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017306:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001730a:	56                   	push   esi
c001730b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001730e:	83 c4 10             	add    esp,0x10
c0017311:	47                   	inc    edi
c0017312:	eb d2                	jmp    c00172e6 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017318:	43                   	inc    ebx
c0017319:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001731d:	eb ab                	jmp    c00172ca <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001731f:	83 c4 1c             	add    esp,0x1c
c0017322:	5b                   	pop    ebx
c0017323:	5e                   	pop    esi
c0017324:	5f                   	pop    edi
c0017325:	5d                   	pop    ebp
c0017326:	c3                   	ret    
c0017327:	90                   	nop

c0017328 <Video::clearScreen(unsigned int)>:
c0017328:	57                   	push   edi
c0017329:	56                   	push   esi
c001732a:	53                   	push   ebx
c001732b:	31 db                	xor    ebx,ebx
c001732d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017331:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017337:	7e 1f                	jle    c0017358 <Video::clearScreen(unsigned int)+0x30>
c0017339:	31 ff                	xor    edi,edi
c001733b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017341:	7e 12                	jle    c0017355 <Video::clearScreen(unsigned int)+0x2d>
c0017343:	8b 06                	mov    eax,DWORD PTR [esi]
c0017345:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017349:	53                   	push   ebx
c001734a:	57                   	push   edi
c001734b:	47                   	inc    edi
c001734c:	56                   	push   esi
c001734d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017350:	83 c4 10             	add    esp,0x10
c0017353:	eb e6                	jmp    c001733b <Video::clearScreen(unsigned int)+0x13>
c0017355:	43                   	inc    ebx
c0017356:	eb d9                	jmp    c0017331 <Video::clearScreen(unsigned int)+0x9>
c0017358:	5b                   	pop    ebx
c0017359:	5e                   	pop    esi
c001735a:	5f                   	pop    edi
c001735b:	c3                   	ret    

c001735c <Video::putpixel(int, int, unsigned int)>:
c001735c:	c7 44 24 04 7c b1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b17c
c0017364:	e9 0e 31 00 00       	jmp    c001a477 <Krnl::panic(char const*)>
c0017369:	90                   	nop

c001736a <Video::Video(char const*)>:
c001736a:	83 ec 0c             	sub    esp,0xc
c001736d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017371:	83 ec 08             	sub    esp,0x8
c0017374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017378:	50                   	push   eax
c0017379:	e8 34 d0 ff ff       	call   c00143b2 <Device::Device(char const*)>
c001737e:	83 c4 10             	add    esp,0x10
c0017381:	ba 00 b2 02 c0       	mov    edx,0xc002b200
c0017386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001738a:	89 10                	mov    DWORD PTR [eax],edx
c001738c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017390:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001739a:	90                   	nop
c001739b:	83 c4 0c             	add    esp,0xc
c001739e:	c3                   	ret    
c001739f:	90                   	nop

c00173a0 <Video::~Video()>:
c00173a0:	83 ec 0c             	sub    esp,0xc
c00173a3:	ba 00 b2 02 c0       	mov    edx,0xc002b200
c00173a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173ac:	89 10                	mov    DWORD PTR [eax],edx
c00173ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173b2:	83 ec 0c             	sub    esp,0xc
c00173b5:	50                   	push   eax
c00173b6:	e8 d9 cc ff ff       	call   c0014094 <Device::~Device()>
c00173bb:	83 c4 10             	add    esp,0x10
c00173be:	90                   	nop
c00173bf:	83 c4 0c             	add    esp,0xc
c00173c2:	c3                   	ret    
c00173c3:	90                   	nop

c00173c4 <Video::~Video()>:
c00173c4:	83 ec 0c             	sub    esp,0xc
c00173c7:	83 ec 0c             	sub    esp,0xc
c00173ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173ce:	e8 cd ff ff ff       	call   c00173a0 <Video::~Video()>
c00173d3:	83 c4 10             	add    esp,0x10
c00173d6:	83 ec 08             	sub    esp,0x8
c00173d9:	68 64 01 00 00       	push   0x164
c00173de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173e2:	e8 d5 b8 ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c00173e7:	83 c4 10             	add    esp,0x10
c00173ea:	83 c4 0c             	add    esp,0xc
c00173ed:	c3                   	ret    

c00173ee <Video::isMonochrome()>:
c00173ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173f2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00173f8:	c3                   	ret    
c00173f9:	90                   	nop

c00173fa <Video::getWidth()>:
c00173fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173fe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017404:	c3                   	ret    
c0017405:	90                   	nop

c0017406 <Video::getHeight()>:
c0017406:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001740a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017410:	c3                   	ret    
c0017411:	90                   	nop

c0017412 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017412:	55                   	push   ebp
c0017413:	57                   	push   edi
c0017414:	56                   	push   esi
c0017415:	53                   	push   ebx
c0017416:	83 ec 2c             	sub    esp,0x2c
c0017419:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001741d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017421:	83 f8 01             	cmp    eax,0x1
c0017424:	19 c9                	sbb    ecx,ecx
c0017426:	31 db                	xor    ebx,ebx
c0017428:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001742c:	89 cd                	mov    ebp,ecx
c001742e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017436:	f7 d5                	not    ebp
c0017438:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001743e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017442:	01 d8                	add    eax,ebx
c0017444:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017448:	56                   	push   esi
c0017449:	e8 b8 ff ff ff       	call   c0017406 <Video::getHeight()>
c001744e:	59                   	pop    ecx
c001744f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017453:	7e 70                	jle    c00174c5 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017455:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017459:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001745d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017460:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017464:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017468:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001746f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017473:	89 f8                	mov    eax,edi
c0017475:	83 c0 20             	add    eax,0x20
c0017478:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001747c:	56                   	push   esi
c001747d:	e8 78 ff ff ff       	call   c00173fa <Video::getWidth()>
c0017482:	5a                   	pop    edx
c0017483:	39 c7                	cmp    edi,eax
c0017485:	7d 34                	jge    c00174bb <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017487:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001748c:	74 05                	je     c0017493 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001748e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017490:	55                   	push   ebp
c0017491:	eb 0d                	jmp    c00174a0 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017493:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017498:	74 12                	je     c00174ac <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001749a:	8b 06                	mov    eax,DWORD PTR [esi]
c001749c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00174a4:	57                   	push   edi
c00174a5:	56                   	push   esi
c00174a6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174a9:	83 c4 10             	add    esp,0x10
c00174ac:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00174b0:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00174b4:	47                   	inc    edi
c00174b5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00174b9:	75 c1                	jne    c001747c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00174bb:	43                   	inc    ebx
c00174bc:	83 fb 20             	cmp    ebx,0x20
c00174bf:	0f 85 79 ff ff ff    	jne    c001743e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00174c5:	83 c4 2c             	add    esp,0x2c
c00174c8:	5b                   	pop    ebx
c00174c9:	5e                   	pop    esi
c00174ca:	5f                   	pop    edi
c00174cb:	5d                   	pop    ebp
c00174cc:	c3                   	ret    
c00174cd:	90                   	nop

c00174ce <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00174ce:	55                   	push   ebp
c00174cf:	57                   	push   edi
c00174d0:	56                   	push   esi
c00174d1:	53                   	push   ebx
c00174d2:	83 ec 28             	sub    esp,0x28
c00174d5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00174d9:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00174dd:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00174e1:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00174e5:	c1 e7 08             	shl    edi,0x8
c00174e8:	01 c7                	add    edi,eax
c00174ea:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00174ee:	c1 e0 08             	shl    eax,0x8
c00174f1:	01 d0                	add    eax,edx
c00174f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174fb:	0f af c7             	imul   eax,edi
c00174fe:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017505:	50                   	push   eax
c0017506:	e8 38 83 ff ff       	call   c000f843 <malloc>
c001750b:	83 c4 10             	add    esp,0x10
c001750e:	89 c5                	mov    ebp,eax
c0017510:	85 c0                	test   eax,eax
c0017512:	75 15                	jne    c0017529 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017514:	83 ec 0c             	sub    esp,0xc
c0017517:	68 9d b1 02 c0       	push   0xc002b19d
c001751c:	e8 7b b8 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0017521:	83 c4 10             	add    esp,0x10
c0017524:	e9 1c 01 00 00       	jmp    c0017645 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017529:	be 12 00 00 00       	mov    esi,0x12
c001752e:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017532:	74 11                	je     c0017545 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017534:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017538:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001753c:	c1 fe 03             	sar    esi,0x3
c001753f:	0f af f0             	imul   esi,eax
c0017542:	83 c6 12             	add    esi,0x12
c0017545:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017549:	74 04                	je     c001754f <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001754b:	85 ff                	test   edi,edi
c001754d:	75 12                	jne    c0017561 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c001754f:	83 ec 0c             	sub    esp,0xc
c0017552:	68 b4 b1 02 c0       	push   0xc002b1b4
c0017557:	e8 40 b8 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001755c:	e9 ce 00 00 00       	jmp    c001762f <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017561:	52                   	push   edx
c0017562:	52                   	push   edx
c0017563:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017567:	50                   	push   eax
c0017568:	68 c9 b1 02 c0       	push   0xc002b1c9
c001756d:	e8 2a b8 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0017572:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017576:	83 c4 10             	add    esp,0x10
c0017579:	80 fa 02             	cmp    dl,0x2
c001757c:	0f 85 98 00 00 00    	jne    c001761a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017582:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017587:	75 10                	jne    c0017599 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017589:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001758d:	75 0a                	jne    c0017599 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001758f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017592:	83 e8 18             	sub    eax,0x18
c0017595:	a8 f7                	test   al,0xf7
c0017597:	74 0a                	je     c00175a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017599:	83 ec 0c             	sub    esp,0xc
c001759c:	68 d6 b1 02 c0       	push   0xc002b1d6
c00175a1:	eb 7f                	jmp    c0017622 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00175a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00175ab:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00175b3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00175b7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00175bf:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00175c3:	75 0c                	jne    c00175d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00175c5:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00175ca:	c1 e0 18             	shl    eax,0x18
c00175cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00175d1:	41                   	inc    ecx
c00175d2:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00175d7:	c1 e2 10             	shl    edx,0x10
c00175da:	89 d0                	mov    eax,edx
c00175dc:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00175e1:	c1 e2 08             	shl    edx,0x8
c00175e4:	09 c2                	or     edx,eax
c00175e6:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00175ea:	09 c2                	or     edx,eax
c00175ec:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00175f0:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00175f4:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00175f8:	c1 f8 03             	sar    eax,0x3
c00175fb:	01 c6                	add    esi,eax
c00175fd:	89 c8                	mov    eax,ecx
c00175ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017603:	39 c7                	cmp    edi,eax
c0017605:	7f b0                	jg     c00175b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017607:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001760b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001760f:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017612:	7e 22                	jle    c0017636 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017614:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017618:	eb 99                	jmp    c00175b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001761a:	50                   	push   eax
c001761b:	50                   	push   eax
c001761c:	52                   	push   edx
c001761d:	68 e4 b1 02 c0       	push   0xc002b1e4
c0017622:	e8 75 b7 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0017627:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001762a:	e8 24 82 ff ff       	call   c000f853 <free>
c001762f:	83 c4 10             	add    esp,0x10
c0017632:	31 ed                	xor    ebp,ebp
c0017634:	eb 0f                	jmp    c0017645 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017636:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001763a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001763d:	89 38                	mov    DWORD PTR [eax],edi
c001763f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017643:	89 08                	mov    DWORD PTR [eax],ecx
c0017645:	83 c4 1c             	add    esp,0x1c
c0017648:	89 e8                	mov    eax,ebp
c001764a:	5b                   	pop    ebx
c001764b:	5e                   	pop    esi
c001764c:	5f                   	pop    edi
c001764d:	5d                   	pop    ebp
c001764e:	c3                   	ret    
c001764f:	90                   	nop

c0017650 <Video::putTGA(int, int, unsigned char*, int)>:
c0017650:	55                   	push   ebp
c0017651:	57                   	push   edi
c0017652:	56                   	push   esi
c0017653:	53                   	push   ebx
c0017654:	83 ec 28             	sub    esp,0x28
c0017657:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001765b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001765f:	50                   	push   eax
c0017660:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017664:	50                   	push   eax
c0017665:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017669:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001766d:	56                   	push   esi
c001766e:	e8 5b fe ff ff       	call   c00174ce <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017673:	83 c4 20             	add    esp,0x20
c0017676:	85 c0                	test   eax,eax
c0017678:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001767c:	74 35                	je     c00176b3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001767e:	89 c7                	mov    edi,eax
c0017680:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017684:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017688:	39 d8                	cmp    eax,ebx
c001768a:	7e 27                	jle    c00176b3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001768c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017690:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017694:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017698:	39 e8                	cmp    eax,ebp
c001769a:	7e 14                	jle    c00176b0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001769c:	8b 06                	mov    eax,DWORD PTR [esi]
c001769e:	83 c7 04             	add    edi,0x4
c00176a1:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00176a4:	53                   	push   ebx
c00176a5:	55                   	push   ebp
c00176a6:	45                   	inc    ebp
c00176a7:	56                   	push   esi
c00176a8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176ab:	83 c4 10             	add    esp,0x10
c00176ae:	eb e0                	jmp    c0017690 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00176b0:	43                   	inc    ebx
c00176b1:	eb cd                	jmp    c0017680 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00176b3:	83 c4 1c             	add    esp,0x1c
c00176b6:	5b                   	pop    ebx
c00176b7:	5e                   	pop    esi
c00176b8:	5f                   	pop    edi
c00176b9:	5d                   	pop    ebp
c00176ba:	c3                   	ret    
c00176bb:	90                   	nop

c00176bc <ACPI::close(int, int, void*)>:
c00176bc:	83 ec 1c             	sub    esp,0x1c
c00176bf:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00176c7:	74 0a                	je     c00176d3 <ACPI::close(int, int, void*)+0x17>
c00176c9:	b8 00 00 00 00       	mov    eax,0x0
c00176ce:	e9 9a 00 00 00       	jmp    c001776d <ACPI::close(int, int, void*)+0xb1>
c00176d3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00176d8:	75 37                	jne    c0017711 <ACPI::close(int, int, void*)+0x55>
c00176da:	83 ec 0c             	sub    esp,0xc
c00176dd:	68 40 b2 02 c0       	push   0xc002b240
c00176e2:	e8 b5 b6 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00176e7:	83 c4 10             	add    esp,0x10
c00176ea:	a1 08 09 03 c0       	mov    eax,ds:0xc0030908
c00176ef:	85 c0                	test   eax,eax
c00176f1:	74 07                	je     c00176fa <ACPI::close(int, int, void*)+0x3e>
c00176f3:	a1 08 09 03 c0       	mov    eax,ds:0xc0030908
c00176f8:	ff d0                	call   eax
c00176fa:	83 ec 0c             	sub    esp,0xc
c00176fd:	68 64 b3 02 c0       	push   0xc002b364
c0017702:	e8 70 2d 00 00       	call   c001a477 <Krnl::panic(char const*)>
c0017707:	83 c4 10             	add    esp,0x10
c001770a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001770f:	eb 5c                	jmp    c001776d <ACPI::close(int, int, void*)+0xb1>
c0017711:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017716:	75 50                	jne    c0017768 <ACPI::close(int, int, void*)+0xac>
c0017718:	a1 04 09 03 c0       	mov    eax,ds:0xc0030904
c001771d:	85 c0                	test   eax,eax
c001771f:	74 07                	je     c0017728 <ACPI::close(int, int, void*)+0x6c>
c0017721:	a1 04 09 03 c0       	mov    eax,ds:0xc0030904
c0017726:	ff d0                	call   eax
c0017728:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001772d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017732:	83 e0 02             	and    eax,0x2
c0017735:	74 1c                	je     c0017753 <ACPI::close(int, int, void*)+0x97>
c0017737:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001773e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017742:	89 c2                	mov    edx,eax
c0017744:	ec                   	in     al,dx
c0017745:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017749:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001774d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017751:	eb da                	jmp    c001772d <ACPI::close(int, int, void*)+0x71>
c0017753:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001775a:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001775f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017763:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017767:	ee                   	out    dx,al
c0017768:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001776d:	83 c4 1c             	add    esp,0x1c
c0017770:	c3                   	ret    

c0017771 <findRSDP()>:
c0017771:	83 ec 1c             	sub    esp,0x1c
c0017774:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0017779:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001777f:	83 e0 04             	and    eax,0x4
c0017782:	84 c0                	test   al,al
c0017784:	75 07                	jne    c001778d <findRSDP()+0x1c>
c0017786:	b8 00 00 00 00       	mov    eax,0x0
c001778b:	eb 6a                	jmp    c00177f7 <findRSDP()+0x86>
c001778d:	a1 94 e2 02 c0       	mov    eax,ds:0xc002e294
c0017792:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017797:	7f 1b                	jg     c00177b4 <findRSDP()+0x43>
c0017799:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001779e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00177a4:	83 e2 fb             	and    edx,0xfffffffb
c00177a7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177ad:	b8 00 00 00 00       	mov    eax,0x0
c00177b2:	eb 43                	jmp    c00177f7 <findRSDP()+0x86>
c00177b4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00177bc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00177c4:	77 2c                	ja     c00177f2 <findRSDP()+0x81>
c00177c6:	83 ec 04             	sub    esp,0x4
c00177c9:	6a 08                	push   0x8
c00177cb:	68 4d b2 02 c0       	push   0xc002b24d
c00177d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00177d4:	e8 67 8e fe ff       	call   c0000640 <memcmp>
c00177d9:	83 c4 10             	add    esp,0x10
c00177dc:	85 c0                	test   eax,eax
c00177de:	0f 94 c0             	sete   al
c00177e1:	84 c0                	test   al,al
c00177e3:	74 06                	je     c00177eb <findRSDP()+0x7a>
c00177e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00177e9:	eb 0c                	jmp    c00177f7 <findRSDP()+0x86>
c00177eb:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00177f0:	eb ca                	jmp    c00177bc <findRSDP()+0x4b>
c00177f2:	b8 00 00 00 00       	mov    eax,0x0
c00177f7:	83 c4 1c             	add    esp,0x1c
c00177fa:	c3                   	ret    

c00177fb <loadACPITables(unsigned char*)>:
c00177fb:	56                   	push   esi
c00177fc:	53                   	push   ebx
c00177fd:	83 ec 44             	sub    esp,0x44
c0017800:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0017805:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001780b:	83 e0 04             	and    eax,0x4
c001780e:	84 c0                	test   al,al
c0017810:	0f 84 05 02 00 00    	je     c0017a1b <loadACPITables(unsigned char*)+0x220>
c0017816:	a0 20 0b 03 c0       	mov    al,ds:0xc0030b20
c001781b:	84 c0                	test   al,al
c001781d:	74 75                	je     c0017894 <loadACPITables(unsigned char*)+0x99>
c001781f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017823:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017827:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001782b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001782e:	83 e8 24             	sub    eax,0x24
c0017831:	c1 e8 03             	shr    eax,0x3
c0017834:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017838:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017840:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017844:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017848:	0f 8d b2 00 00 00    	jge    c0017900 <loadACPITables(unsigned char*)+0x105>
c001784e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017852:	83 c0 24             	add    eax,0x24
c0017855:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017859:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001785d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017861:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017865:	c1 e0 03             	shl    eax,0x3
c0017868:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c001786c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017870:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017873:	8b 00                	mov    eax,DWORD PTR [eax]
c0017875:	89 c1                	mov    ecx,eax
c0017877:	a1 0c 09 03 c0       	mov    eax,ds:0xc003090c
c001787c:	8d 50 01             	lea    edx,[eax+0x1]
c001787f:	89 15 0c 09 03 c0    	mov    DWORD PTR ds:0xc003090c,edx
c0017885:	89 ca                	mov    edx,ecx
c0017887:	89 14 c5 24 09 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf6dc],edx
c001788e:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017892:	eb ac                	jmp    c0017840 <loadACPITables(unsigned char*)+0x45>
c0017894:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017898:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001789c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178a3:	83 e8 24             	sub    eax,0x24
c00178a6:	c1 e8 02             	shr    eax,0x2
c00178a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00178ad:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00178b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178b9:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00178bd:	7d 41                	jge    c0017900 <loadACPITables(unsigned char*)+0x105>
c00178bf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00178c3:	83 c0 24             	add    eax,0x24
c00178c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00178ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00178ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00178d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178d6:	c1 e0 02             	shl    eax,0x2
c00178d9:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00178dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00178e1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00178e3:	a1 0c 09 03 c0       	mov    eax,ds:0xc003090c
c00178e8:	8d 50 01             	lea    edx,[eax+0x1]
c00178eb:	89 15 0c 09 03 c0    	mov    DWORD PTR ds:0xc003090c,edx
c00178f1:	89 ca                	mov    edx,ecx
c00178f3:	89 14 c5 24 09 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf6dc],edx
c00178fa:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00178fe:	eb b5                	jmp    c00178b5 <loadACPITables(unsigned char*)+0xba>
c0017900:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017908:	a1 0c 09 03 c0       	mov    eax,ds:0xc003090c
c001790d:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017911:	0f 8d 05 01 00 00    	jge    c0017a1c <loadACPITables(unsigned char*)+0x221>
c0017917:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001791b:	8b 04 c5 24 09 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf6dc]
c0017922:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001792a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001792e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017932:	25 ff 0f 00 00       	and    eax,0xfff
c0017937:	89 c6                	mov    esi,eax
c0017939:	e8 a8 a4 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c001793e:	89 c3                	mov    ebx,eax
c0017940:	83 ec 0c             	sub    esp,0xc
c0017943:	6a 01                	push   0x1
c0017945:	e8 f5 a1 ff ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c001794a:	83 c4 10             	add    esp,0x10
c001794d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017951:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017957:	83 ec 0c             	sub    esp,0xc
c001795a:	6a 01                	push   0x1
c001795c:	6a 01                	push   0x1
c001795e:	50                   	push   eax
c001795f:	52                   	push   edx
c0017960:	53                   	push   ebx
c0017961:	e8 96 ab ff ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017966:	83 c4 20             	add    esp,0x20
c0017969:	09 f0                	or     eax,esi
c001796b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001796f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017973:	c1 e0 03             	shl    eax,0x3
c0017976:	05 20 09 03 c0       	add    eax,0xc0030920
c001797b:	83 ec 04             	sub    esp,0x4
c001797e:	6a 04                	push   0x4
c0017980:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017984:	50                   	push   eax
c0017985:	e8 ba 8d fe ff       	call   c0000744 <memcpy>
c001798a:	83 c4 10             	add    esp,0x10
c001798d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017991:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017998:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001799c:	05 00 10 00 00       	add    eax,0x1000
c00179a1:	c1 e8 0c             	shr    eax,0xc
c00179a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00179af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179b3:	25 ff 0f 00 00       	and    eax,0xfff
c00179b8:	89 c6                	mov    esi,eax
c00179ba:	e8 27 a4 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c00179bf:	89 c3                	mov    ebx,eax
c00179c1:	83 ec 0c             	sub    esp,0xc
c00179c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00179c8:	e8 72 a1 ff ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c00179cd:	83 c4 10             	add    esp,0x10
c00179d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00179d4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00179da:	83 ec 0c             	sub    esp,0xc
c00179dd:	6a 01                	push   0x1
c00179df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00179e3:	50                   	push   eax
c00179e4:	52                   	push   edx
c00179e5:	53                   	push   ebx
c00179e6:	e8 11 ab ff ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00179eb:	83 c4 20             	add    esp,0x20
c00179ee:	09 f0                	or     eax,esi
c00179f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00179f4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00179f7:	83 ec 0c             	sub    esp,0xc
c00179fa:	50                   	push   eax
c00179fb:	e8 a1 a4 ff ff       	call   c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c0017a00:	83 c4 10             	add    esp,0x10
c0017a03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017a0b:	89 14 c5 24 09 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf6dc],edx
c0017a12:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017a16:	e9 ed fe ff ff       	jmp    c0017908 <loadACPITables(unsigned char*)+0x10d>
c0017a1b:	90                   	nop
c0017a1c:	83 c4 44             	add    esp,0x44
c0017a1f:	5b                   	pop    ebx
c0017a20:	5e                   	pop    esi
c0017a21:	c3                   	ret    

c0017a22 <findRSDT(unsigned char*)>:
c0017a22:	56                   	push   esi
c0017a23:	53                   	push   ebx
c0017a24:	83 ec 44             	sub    esp,0x44
c0017a27:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0017a2c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a32:	83 e0 04             	and    eax,0x4
c0017a35:	84 c0                	test   al,al
c0017a37:	75 0a                	jne    c0017a43 <findRSDT(unsigned char*)+0x21>
c0017a39:	b8 00 00 00 00       	mov    eax,0x0
c0017a3e:	e9 f7 00 00 00       	jmp    c0017b3a <findRSDT(unsigned char*)+0x118>
c0017a43:	83 ec 04             	sub    esp,0x4
c0017a46:	6a 24                	push   0x24
c0017a48:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017a4c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017a50:	50                   	push   eax
c0017a51:	e8 ee 8c fe ff       	call   c0000744 <memcpy>
c0017a56:	83 c4 10             	add    esp,0x10
c0017a59:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017a5d:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017a61:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a6d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a71:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017a75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a7d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a81:	25 ff 0f 00 00       	and    eax,0xfff
c0017a86:	89 c6                	mov    esi,eax
c0017a88:	e8 59 a3 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017a8d:	89 c3                	mov    ebx,eax
c0017a8f:	83 ec 0c             	sub    esp,0xc
c0017a92:	6a 02                	push   0x2
c0017a94:	e8 a6 a0 ff ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c0017a99:	83 c4 10             	add    esp,0x10
c0017a9c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017aa0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017aa6:	83 ec 0c             	sub    esp,0xc
c0017aa9:	6a 01                	push   0x1
c0017aab:	6a 02                	push   0x2
c0017aad:	50                   	push   eax
c0017aae:	52                   	push   edx
c0017aaf:	53                   	push   ebx
c0017ab0:	e8 47 aa ff ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ab5:	83 c4 20             	add    esp,0x20
c0017ab8:	09 f0                	or     eax,esi
c0017aba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017abe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ac2:	25 ff 0f 00 00       	and    eax,0xfff
c0017ac7:	89 c6                	mov    esi,eax
c0017ac9:	e8 18 a3 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017ace:	89 c3                	mov    ebx,eax
c0017ad0:	83 ec 0c             	sub    esp,0xc
c0017ad3:	6a 02                	push   0x2
c0017ad5:	e8 65 a0 ff ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c0017ada:	83 c4 10             	add    esp,0x10
c0017add:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ae1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ae7:	83 ec 0c             	sub    esp,0xc
c0017aea:	6a 01                	push   0x1
c0017aec:	6a 02                	push   0x2
c0017aee:	50                   	push   eax
c0017aef:	52                   	push   edx
c0017af0:	53                   	push   ebx
c0017af1:	e8 06 aa ff ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017af6:	83 c4 20             	add    esp,0x20
c0017af9:	09 f0                	or     eax,esi
c0017afb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017aff:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017b04:	75 11                	jne    c0017b17 <findRSDT(unsigned char*)+0xf5>
c0017b06:	c6 05 20 0b 03 c0 00 	mov    BYTE PTR ds:0xc0030b20,0x0
c0017b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b11:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017b15:	eb 1f                	jmp    c0017b36 <findRSDT(unsigned char*)+0x114>
c0017b17:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017b1c:	75 11                	jne    c0017b2f <findRSDT(unsigned char*)+0x10d>
c0017b1e:	c6 05 20 0b 03 c0 01 	mov    BYTE PTR ds:0xc0030b20,0x1
c0017b25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b29:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017b2d:	eb 07                	jmp    c0017b36 <findRSDT(unsigned char*)+0x114>
c0017b2f:	b8 00 00 00 00       	mov    eax,0x0
c0017b34:	eb 04                	jmp    c0017b3a <findRSDT(unsigned char*)+0x118>
c0017b36:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b3a:	83 c4 44             	add    esp,0x44
c0017b3d:	5b                   	pop    ebx
c0017b3e:	5e                   	pop    esi
c0017b3f:	c3                   	ret    

c0017b40 <findDataTable(unsigned char*, char*)>:
c0017b40:	83 ec 1c             	sub    esp,0x1c
c0017b43:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0017b48:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b4e:	83 e0 04             	and    eax,0x4
c0017b51:	84 c0                	test   al,al
c0017b53:	75 07                	jne    c0017b5c <findDataTable(unsigned char*, char*)+0x1c>
c0017b55:	b8 00 00 00 00       	mov    eax,0x0
c0017b5a:	eb 7c                	jmp    c0017bd8 <findDataTable(unsigned char*, char*)+0x98>
c0017b5c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017b64:	a1 0c 09 03 c0       	mov    eax,ds:0xc003090c
c0017b69:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017b6d:	7d 3a                	jge    c0017ba9 <findDataTable(unsigned char*, char*)+0x69>
c0017b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b73:	c1 e0 03             	shl    eax,0x3
c0017b76:	05 20 09 03 c0       	add    eax,0xc0030920
c0017b7b:	83 ec 04             	sub    esp,0x4
c0017b7e:	6a 04                	push   0x4
c0017b80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b84:	50                   	push   eax
c0017b85:	e8 b6 8a fe ff       	call   c0000640 <memcmp>
c0017b8a:	83 c4 10             	add    esp,0x10
c0017b8d:	85 c0                	test   eax,eax
c0017b8f:	0f 94 c0             	sete   al
c0017b92:	84 c0                	test   al,al
c0017b94:	74 0d                	je     c0017ba3 <findDataTable(unsigned char*, char*)+0x63>
c0017b96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b9a:	8b 04 c5 24 09 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf6dc]
c0017ba1:	eb 35                	jmp    c0017bd8 <findDataTable(unsigned char*, char*)+0x98>
c0017ba3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017ba7:	eb bb                	jmp    c0017b64 <findDataTable(unsigned char*, char*)+0x24>
c0017ba9:	a0 20 0b 03 c0       	mov    al,ds:0xc0030b20
c0017bae:	84 c0                	test   al,al
c0017bb0:	74 07                	je     c0017bb9 <findDataTable(unsigned char*, char*)+0x79>
c0017bb2:	b8 58 00 00 00       	mov    eax,0x58
c0017bb7:	eb 05                	jmp    c0017bbe <findDataTable(unsigned char*, char*)+0x7e>
c0017bb9:	b8 52 00 00 00       	mov    eax,0x52
c0017bbe:	83 ec 04             	sub    esp,0x4
c0017bc1:	50                   	push   eax
c0017bc2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bc6:	68 88 b3 02 c0       	push   0xc002b388
c0017bcb:	e8 cc b1 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0017bd0:	83 c4 10             	add    esp,0x10
c0017bd3:	b8 00 00 00 00       	mov    eax,0x0
c0017bd8:	83 c4 1c             	add    esp,0x1c
c0017bdb:	c3                   	ret    

c0017bdc <scanMADT()>:
c0017bdc:	53                   	push   ebx
c0017bdd:	83 ec 38             	sub    esp,0x38
c0017be0:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0017be5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017beb:	83 e0 04             	and    eax,0x4
c0017bee:	84 c0                	test   al,al
c0017bf0:	0f 84 63 04 00 00    	je     c0018059 <scanMADT()+0x47d>
c0017bf6:	e8 76 fb ff ff       	call   c0017771 <findRSDP()>
c0017bfb:	a3 2c 0b 03 c0       	mov    ds:0xc0030b2c,eax
c0017c00:	a1 2c 0b 03 c0       	mov    eax,ds:0xc0030b2c
c0017c05:	85 c0                	test   eax,eax
c0017c07:	75 19                	jne    c0017c22 <scanMADT()+0x46>
c0017c09:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0017c0e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c14:	83 e2 fb             	and    edx,0xfffffffb
c0017c17:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017c1d:	e9 3b 04 00 00       	jmp    c001805d <scanMADT()+0x481>
c0017c22:	a1 2c 0b 03 c0       	mov    eax,ds:0xc0030b2c
c0017c27:	83 ec 0c             	sub    esp,0xc
c0017c2a:	50                   	push   eax
c0017c2b:	e8 f2 fd ff ff       	call   c0017a22 <findRSDT(unsigned char*)>
c0017c30:	83 c4 10             	add    esp,0x10
c0017c33:	a3 28 0b 03 c0       	mov    ds:0xc0030b28,eax
c0017c38:	a1 28 0b 03 c0       	mov    eax,ds:0xc0030b28
c0017c3d:	85 c0                	test   eax,eax
c0017c3f:	75 19                	jne    c0017c5a <scanMADT()+0x7e>
c0017c41:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0017c46:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c4c:	83 e2 fb             	and    edx,0xfffffffb
c0017c4f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017c55:	e9 03 04 00 00       	jmp    c001805d <scanMADT()+0x481>
c0017c5a:	a1 28 0b 03 c0       	mov    eax,ds:0xc0030b28
c0017c5f:	83 ec 0c             	sub    esp,0xc
c0017c62:	50                   	push   eax
c0017c63:	e8 93 fb ff ff       	call   c00177fb <loadACPITables(unsigned char*)>
c0017c68:	83 c4 10             	add    esp,0x10
c0017c6b:	a1 28 0b 03 c0       	mov    eax,ds:0xc0030b28
c0017c70:	83 ec 08             	sub    esp,0x8
c0017c73:	68 56 b2 02 c0       	push   0xc002b256
c0017c78:	50                   	push   eax
c0017c79:	e8 c2 fe ff ff       	call   c0017b40 <findDataTable(unsigned char*, char*)>
c0017c7e:	83 c4 10             	add    esp,0x10
c0017c81:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017c85:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017c8a:	75 19                	jne    c0017ca5 <scanMADT()+0xc9>
c0017c8c:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0017c91:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c97:	83 e2 fe             	and    edx,0xfffffffe
c0017c9a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ca0:	e9 b8 03 00 00       	jmp    c001805d <scanMADT()+0x481>
c0017ca5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017cad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017cb4:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017cb8:	0f 87 9f 03 00 00    	ja     c001805d <scanMADT()+0x481>
c0017cbe:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017cc6:	0f 87 91 03 00 00    	ja     c001805d <scanMADT()+0x481>
c0017ccc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cd0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017cd4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cd8:	8d 50 01             	lea    edx,[eax+0x1]
c0017cdb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cdf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ce3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ce7:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017ceb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cef:	8d 50 01             	lea    edx,[eax+0x1]
c0017cf2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cf6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cfa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017cfe:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017d02:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017d07:	0f 86 4f 03 00 00    	jbe    c001805c <scanMADT()+0x480>
c0017d0d:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017d12:	75 57                	jne    c0017d6b <scanMADT()+0x18f>
c0017d14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d18:	8d 50 01             	lea    edx,[eax+0x1]
c0017d1b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d1f:	8a 15 20 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d20
c0017d25:	0f b6 d2             	movzx  edx,dl
c0017d28:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d2c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d30:	88 82 60 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf2a0],al
c0017d36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d3a:	8d 50 01             	lea    edx,[eax+0x1]
c0017d3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d41:	8a 15 20 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d20
c0017d47:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017d4a:	88 0d 20 0d 03 c0    	mov    BYTE PTR ds:0xc0030d20,cl
c0017d50:	0f b6 d2             	movzx  edx,dl
c0017d53:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d57:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d5b:	88 82 40 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf2c0],al
c0017d61:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017d66:	e9 da 02 00 00       	jmp    c0018045 <scanMADT()+0x469>
c0017d6b:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017d70:	0f 85 14 01 00 00    	jne    c0017e8a <scanMADT()+0x2ae>
c0017d76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d7a:	8d 50 01             	lea    edx,[eax+0x1]
c0017d7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d81:	8a 15 e0 0b 03 c0    	mov    dl,BYTE PTR ds:0xc0030be0
c0017d87:	0f b6 d2             	movzx  edx,dl
c0017d8a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d8e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d92:	88 82 00 0c 03 c0    	mov    BYTE PTR [edx-0x3ffcf400],al
c0017d98:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017d9c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017da0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017da4:	01 d0                	add    eax,edx
c0017da6:	83 c0 2c             	add    eax,0x2c
c0017da9:	8a 00                	mov    al,BYTE PTR [eax]
c0017dab:	0f b6 d0             	movzx  edx,al
c0017dae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017db2:	8d 48 01             	lea    ecx,[eax+0x1]
c0017db5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017db9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017dbd:	0f b6 c0             	movzx  eax,al
c0017dc0:	c1 e0 08             	shl    eax,0x8
c0017dc3:	89 d1                	mov    ecx,edx
c0017dc5:	09 c1                	or     ecx,eax
c0017dc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dcb:	8d 50 02             	lea    edx,[eax+0x2]
c0017dce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dd2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017dd6:	0f b6 c0             	movzx  eax,al
c0017dd9:	c1 e0 10             	shl    eax,0x10
c0017ddc:	09 c1                	or     ecx,eax
c0017dde:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017de2:	8d 50 03             	lea    edx,[eax+0x3]
c0017de5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017de9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ded:	0f b6 c0             	movzx  eax,al
c0017df0:	c1 e0 18             	shl    eax,0x18
c0017df3:	09 c1                	or     ecx,eax
c0017df5:	89 ca                	mov    edx,ecx
c0017df7:	a0 e0 0b 03 c0       	mov    al,ds:0xc0030be0
c0017dfc:	0f b6 c0             	movzx  eax,al
c0017dff:	89 14 85 20 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3e0],edx
c0017e06:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e0b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e13:	01 d0                	add    eax,edx
c0017e15:	83 c0 2c             	add    eax,0x2c
c0017e18:	8a 00                	mov    al,BYTE PTR [eax]
c0017e1a:	0f b6 d0             	movzx  edx,al
c0017e1d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e21:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e28:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017e2c:	0f b6 c0             	movzx  eax,al
c0017e2f:	c1 e0 08             	shl    eax,0x8
c0017e32:	89 d1                	mov    ecx,edx
c0017e34:	09 c1                	or     ecx,eax
c0017e36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e3a:	8d 50 02             	lea    edx,[eax+0x2]
c0017e3d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e41:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e45:	0f b6 c0             	movzx  eax,al
c0017e48:	c1 e0 10             	shl    eax,0x10
c0017e4b:	09 c1                	or     ecx,eax
c0017e4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e51:	8d 50 03             	lea    edx,[eax+0x3]
c0017e54:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e58:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e5c:	0f b6 c0             	movzx  eax,al
c0017e5f:	c1 e0 18             	shl    eax,0x18
c0017e62:	09 c1                	or     ecx,eax
c0017e64:	89 ca                	mov    edx,ecx
c0017e66:	a0 e0 0b 03 c0       	mov    al,ds:0xc0030be0
c0017e6b:	0f b6 c0             	movzx  eax,al
c0017e6e:	89 14 85 a0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf360],edx
c0017e75:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e7a:	a0 e0 0b 03 c0       	mov    al,ds:0xc0030be0
c0017e7f:	40                   	inc    eax
c0017e80:	a2 e0 0b 03 c0       	mov    ds:0xc0030be0,al
c0017e85:	e9 bb 01 00 00       	jmp    c0018045 <scanMADT()+0x469>
c0017e8a:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017e8f:	0f 85 e9 00 00 00    	jne    c0017f7e <scanMADT()+0x3a2>
c0017e95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e99:	8d 50 01             	lea    edx,[eax+0x1]
c0017e9c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ea0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ea4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ea8:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017eac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eb0:	8d 50 01             	lea    edx,[eax+0x1]
c0017eb3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017eb7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ebb:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ebf:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017ec3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ec7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ecb:	01 d0                	add    eax,edx
c0017ecd:	83 c0 2c             	add    eax,0x2c
c0017ed0:	8a 00                	mov    al,BYTE PTR [eax]
c0017ed2:	0f b6 d0             	movzx  edx,al
c0017ed5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed9:	8d 48 01             	lea    ecx,[eax+0x1]
c0017edc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ee0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ee4:	0f b6 c0             	movzx  eax,al
c0017ee7:	c1 e0 08             	shl    eax,0x8
c0017eea:	89 d1                	mov    ecx,edx
c0017eec:	09 c1                	or     ecx,eax
c0017eee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ef2:	8d 50 02             	lea    edx,[eax+0x2]
c0017ef5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ef9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017efd:	0f b6 c0             	movzx  eax,al
c0017f00:	c1 e0 10             	shl    eax,0x10
c0017f03:	09 c1                	or     ecx,eax
c0017f05:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f09:	8d 50 03             	lea    edx,[eax+0x3]
c0017f0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f10:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f14:	0f b6 c0             	movzx  eax,al
c0017f17:	c1 e0 18             	shl    eax,0x18
c0017f1a:	09 c8                	or     eax,ecx
c0017f1c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017f20:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f25:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f2d:	01 d0                	add    eax,edx
c0017f2f:	83 c0 2c             	add    eax,0x2c
c0017f32:	8a 00                	mov    al,BYTE PTR [eax]
c0017f34:	0f b6 c0             	movzx  eax,al
c0017f37:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017f3b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f3e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f42:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017f46:	0f b6 d2             	movzx  edx,dl
c0017f49:	c1 e2 08             	shl    edx,0x8
c0017f4c:	09 d0                	or     eax,edx
c0017f4e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017f53:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017f58:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017f5d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f61:	88 90 a0 d4 02 c0    	mov    BYTE PTR [eax-0x3ffd2b60],dl
c0017f67:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017f6c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017f71:	66 89 84 12 c0 0b 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf440],ax
c0017f79:	e9 c7 00 00 00       	jmp    c0018045 <scanMADT()+0x469>
c0017f7e:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017f83:	0f 85 b0 00 00 00    	jne    c0018039 <scanMADT()+0x45d>
c0017f89:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f8d:	8d 50 01             	lea    edx,[eax+0x1]
c0017f90:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f94:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f98:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f9c:	0f b6 c0             	movzx  eax,al
c0017f9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017fa3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fa7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fab:	01 d0                	add    eax,edx
c0017fad:	83 c0 2c             	add    eax,0x2c
c0017fb0:	8a 00                	mov    al,BYTE PTR [eax]
c0017fb2:	0f b6 d0             	movzx  edx,al
c0017fb5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fb9:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fbc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fc0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fc4:	0f b6 c0             	movzx  eax,al
c0017fc7:	c1 e0 08             	shl    eax,0x8
c0017fca:	09 d0                	or     eax,edx
c0017fcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017fd0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017fd5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fd9:	8d 50 01             	lea    edx,[eax+0x1]
c0017fdc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fe0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fe4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fe8:	0f b6 c0             	movzx  eax,al
c0017feb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ff3:	c1 e0 08             	shl    eax,0x8
c0017ff6:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017ffa:	89 c1                	mov    ecx,eax
c0017ffc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018000:	c1 e0 18             	shl    eax,0x18
c0018003:	89 c3                	mov    ebx,eax
c0018005:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c001800a:	8d 50 01             	lea    edx,[eax+0x1]
c001800d:	89 15 30 0b 03 c0    	mov    DWORD PTR ds:0xc0030b30,edx
c0018013:	09 d9                	or     ecx,ebx
c0018015:	89 ca                	mov    edx,ecx
c0018017:	89 14 85 40 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf4c0],edx
c001801e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001802a:	68 b8 b3 02 c0       	push   0xc002b3b8
c001802f:	e8 68 ad ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018034:	83 c4 10             	add    esp,0x10
c0018037:	eb 0c                	jmp    c0018045 <scanMADT()+0x469>
c0018039:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001803e:	75 05                	jne    c0018045 <scanMADT()+0x469>
c0018040:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018045:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001804a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001804e:	01 d0                	add    eax,edx
c0018050:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018054:	e9 54 fc ff ff       	jmp    c0017cad <scanMADT()+0xd1>
c0018059:	90                   	nop
c001805a:	eb 01                	jmp    c001805d <scanMADT()+0x481>
c001805c:	90                   	nop
c001805d:	83 c4 38             	add    esp,0x38
c0018060:	5b                   	pop    ebx
c0018061:	c3                   	ret    

c0018062 <ACPI::ACPI()>:
c0018062:	83 ec 0c             	sub    esp,0xc
c0018065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018069:	83 ec 08             	sub    esp,0x8
c001806c:	68 5b b2 02 c0       	push   0xc002b25b
c0018071:	50                   	push   eax
c0018072:	e8 3b c3 ff ff       	call   c00143b2 <Device::Device(char const*)>
c0018077:	83 c4 10             	add    esp,0x10
c001807a:	ba 2c b4 02 c0       	mov    edx,0xc002b42c
c001807f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018083:	89 10                	mov    DWORD PTR [eax],edx
c0018085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018089:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018094:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001809e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180a2:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00180ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b0:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00180b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180bb:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00180c2:	e8 15 fb ff ff       	call   c0017bdc <scanMADT()>
c00180c7:	90                   	nop
c00180c8:	83 c4 0c             	add    esp,0xc
c00180cb:	c3                   	ret    

c00180cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00180cc:	83 ec 2c             	sub    esp,0x2c
c00180cf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00180d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00180d7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00180db:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00180df:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00180e4:	88 d0                	mov    al,dl
c00180e6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00180ea:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00180ef:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00180f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00180fb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018101:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018105:	0f 8d 97 00 00 00    	jge    c00181a2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001810b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001810f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018113:	83 c2 2a             	add    edx,0x2a
c0018116:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001811a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001811f:	75 78                	jne    c0018199 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018121:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018125:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018129:	83 c2 2a             	add    edx,0x2a
c001812c:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018130:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018134:	75 63                	jne    c0018199 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018136:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001813b:	74 3a                	je     c0018177 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001813d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018141:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018145:	83 c2 2a             	add    edx,0x2a
c0018148:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001814c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018150:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018153:	39 c2                	cmp    edx,eax
c0018155:	74 10                	je     c0018167 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018157:	83 ec 0c             	sub    esp,0xc
c001815a:	68 f4 b3 02 c0       	push   0xc002b3f4
c001815f:	e8 13 23 00 00       	call   c001a477 <Krnl::panic(char const*)>
c0018164:	83 c4 10             	add    esp,0x10
c0018167:	83 ec 0c             	sub    esp,0xc
c001816a:	68 60 b2 02 c0       	push   0xc002b260
c001816f:	e8 03 23 00 00       	call   c001a477 <Krnl::panic(char const*)>
c0018174:	83 c4 10             	add    esp,0x10
c0018177:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001817b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001817f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018183:	83 c2 2a             	add    edx,0x2a
c0018186:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001818a:	8b 02                	mov    eax,DWORD PTR [edx]
c001818c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001818f:	89 01                	mov    DWORD PTR [ecx],eax
c0018191:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018194:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018199:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001819d:	e9 55 ff ff ff       	jmp    c00180f7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00181a2:	90                   	nop
c00181a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181a7:	83 c4 2c             	add    esp,0x2c
c00181aa:	c2 04 00             	ret    0x4
c00181ad:	90                   	nop

c00181ae <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00181ae:	83 ec 1c             	sub    esp,0x1c
c00181b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181b5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00181b9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00181bd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00181c2:	88 c8                	mov    al,cl
c00181c4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00181c8:	88 d0                	mov    al,dl
c00181ca:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00181ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181d2:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00181d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181dc:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00181df:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00181e3:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00181e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181eb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00181f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181f5:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00181f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181fc:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018201:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018205:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001820b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001820f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018212:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018216:	83 c2 2a             	add    edx,0x2a
c0018219:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001821d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018221:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018227:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001822b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001822e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018232:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018236:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001823a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018240:	8d 50 01             	lea    edx,[eax+0x1]
c0018243:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018247:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001824d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018251:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018257:	3d 00 02 00 00       	cmp    eax,0x200
c001825c:	75 10                	jne    c001826e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001825e:	83 ec 0c             	sub    esp,0xc
c0018261:	68 6f b2 02 c0       	push   0xc002b26f
c0018266:	e8 0c 22 00 00       	call   c001a477 <Krnl::panic(char const*)>
c001826b:	83 c4 10             	add    esp,0x10
c001826e:	90                   	nop
c001826f:	83 c4 1c             	add    esp,0x1c
c0018272:	c3                   	ret    
c0018273:	90                   	nop

c0018274 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018274:	b8 00 00 00 00       	mov    eax,0x0
c0018279:	c3                   	ret    

c001827a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001827a:	83 ec 1c             	sub    esp,0x1c
c001827d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018281:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018284:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018288:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001828d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018292:	83 ec 08             	sub    esp,0x8
c0018295:	52                   	push   edx
c0018296:	50                   	push   eax
c0018297:	e8 bc 6b ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c001829c:	83 c4 10             	add    esp,0x10
c001829f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00182a3:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00182a8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00182ad:	83 ec 04             	sub    esp,0x4
c00182b0:	6a 01                	push   0x1
c00182b2:	52                   	push   edx
c00182b3:	50                   	push   eax
c00182b4:	e8 b5 6c ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c00182b9:	83 c4 10             	add    esp,0x10
c00182bc:	90                   	nop
c00182bd:	83 c4 1c             	add    esp,0x1c
c00182c0:	c3                   	ret    
c00182c1:	90                   	nop

c00182c2 <ACPI::open(int, int, void*)>:
c00182c2:	53                   	push   ebx
c00182c3:	83 ec 28             	sub    esp,0x28
c00182c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182ca:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00182d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182d5:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00182dc:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00182e1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00182e7:	83 e0 04             	and    eax,0x4
c00182ea:	84 c0                	test   al,al
c00182ec:	74 47                	je     c0018335 <ACPI::open(int, int, void*)+0x73>
c00182ee:	a1 28 0b 03 c0       	mov    eax,ds:0xc0030b28
c00182f3:	83 ec 08             	sub    esp,0x8
c00182f6:	68 8c b2 02 c0       	push   0xc002b28c
c00182fb:	50                   	push   eax
c00182fc:	e8 3f f8 ff ff       	call   c0017b40 <findDataTable(unsigned char*, char*)>
c0018301:	83 c4 10             	add    esp,0x10
c0018304:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018308:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001830d:	74 26                	je     c0018335 <ACPI::open(int, int, void*)+0x73>
c001830f:	83 ec 0c             	sub    esp,0xc
c0018312:	68 91 b2 02 c0       	push   0xc002b291
c0018317:	e8 80 aa ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001831c:	83 c4 10             	add    esp,0x10
c001831f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018323:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001832a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001832e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018335:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c001833d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018341:	8a 00                	mov    al,BYTE PTR [eax]
c0018343:	3c 01                	cmp    al,0x1
c0018345:	75 28                	jne    c001836f <ACPI::open(int, int, void*)+0xad>
c0018347:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001834b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018352:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018356:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001835d:	83 ec 0c             	sub    esp,0xc
c0018360:	68 a2 b2 02 c0       	push   0xc002b2a2
c0018365:	e8 32 aa ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001836a:	83 c4 10             	add    esp,0x10
c001836d:	eb 25                	jmp    c0018394 <ACPI::open(int, int, void*)+0xd2>
c001836f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018373:	8a 00                	mov    al,BYTE PTR [eax]
c0018375:	3c 02                	cmp    al,0x2
c0018377:	75 1b                	jne    c0018394 <ACPI::open(int, int, void*)+0xd2>
c0018379:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001837d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018384:	83 ec 0c             	sub    esp,0xc
c0018387:	68 aa b2 02 c0       	push   0xc002b2aa
c001838c:	e8 0b aa ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018391:	83 c4 10             	add    esp,0x10
c0018394:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018398:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001839e:	83 f0 01             	xor    eax,0x1
c00183a1:	84 c0                	test   al,al
c00183a3:	74 6a                	je     c001840f <ACPI::open(int, int, void*)+0x14d>
c00183a5:	83 ec 0c             	sub    esp,0xc
c00183a8:	68 b2 b2 02 c0       	push   0xc002b2b2
c00183ad:	e8 ea a9 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00183b2:	83 c4 10             	add    esp,0x10
c00183b5:	e8 96 7d fe ff       	call   c0000150 <manualPCIProbe>
c00183ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00183be:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00183c3:	75 28                	jne    c00183ed <ACPI::open(int, int, void*)+0x12b>
c00183c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183c9:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00183d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183d4:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00183db:	83 ec 0c             	sub    esp,0xc
c00183de:	68 c0 b2 02 c0       	push   0xc002b2c0
c00183e3:	e8 b4 a9 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00183e8:	83 c4 10             	add    esp,0x10
c00183eb:	eb 22                	jmp    c001840f <ACPI::open(int, int, void*)+0x14d>
c00183ed:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00183f2:	75 1b                	jne    c001840f <ACPI::open(int, int, void*)+0x14d>
c00183f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183f8:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00183ff:	83 ec 0c             	sub    esp,0xc
c0018402:	68 ca b2 02 c0       	push   0xc002b2ca
c0018407:	e8 90 a9 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001840c:	83 c4 10             	add    esp,0x10
c001840f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018413:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018419:	84 c0                	test   al,al
c001841b:	74 13                	je     c0018430 <ACPI::open(int, int, void*)+0x16e>
c001841d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018421:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018427:	83 f0 01             	xor    eax,0x1
c001842a:	0f b6 c0             	movzx  eax,al
c001842d:	40                   	inc    eax
c001842e:	eb 05                	jmp    c0018435 <ACPI::open(int, int, void*)+0x173>
c0018430:	b8 00 00 00 00       	mov    eax,0x0
c0018435:	83 ec 08             	sub    esp,0x8
c0018438:	50                   	push   eax
c0018439:	68 d4 b2 02 c0       	push   0xc002b2d4
c001843e:	e8 59 a9 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018443:	83 c4 10             	add    esp,0x10
c0018446:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001844a:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018450:	84 c0                	test   al,al
c0018452:	74 67                	je     c00184bb <ACPI::open(int, int, void*)+0x1f9>
c0018454:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c001845c:	83 ec 0c             	sub    esp,0xc
c001845f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018463:	e8 db 73 ff ff       	call   c000f843 <malloc>
c0018468:	83 c4 10             	add    esp,0x10
c001846b:	89 c3                	mov    ebx,eax
c001846d:	83 ec 0c             	sub    esp,0xc
c0018470:	53                   	push   ebx
c0018471:	e8 2c a3 00 00       	call   c00227a2 <PCI::PCI()>
c0018476:	83 c4 10             	add    esp,0x10
c0018479:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001847d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018481:	83 ec 08             	sub    esp,0x8
c0018484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018488:	50                   	push   eax
c0018489:	e8 34 bd ff ff       	call   c00141c2 <Device::addChild(Device*)>
c001848e:	83 c4 10             	add    esp,0x10
c0018491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018495:	8b 00                	mov    eax,DWORD PTR [eax]
c0018497:	83 c0 08             	add    eax,0x8
c001849a:	8b 00                	mov    eax,DWORD PTR [eax]
c001849c:	6a 00                	push   0x0
c001849e:	6a 00                	push   0x0
c00184a0:	6a 00                	push   0x0
c00184a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00184a6:	ff d0                	call   eax
c00184a8:	83 c4 10             	add    esp,0x10
c00184ab:	83 ec 0c             	sub    esp,0xc
c00184ae:	68 dd b2 02 c0       	push   0xc002b2dd
c00184b3:	e8 e4 a8 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00184b8:	83 c4 10             	add    esp,0x10
c00184bb:	e8 bd 98 ff ff       	call   c0011d7d <Virt::swappingSetup()>
c00184c0:	83 ec 0c             	sub    esp,0xc
c00184c3:	68 e8 b2 02 c0       	push   0xc002b2e8
c00184c8:	e8 80 46 00 00       	call   c001cb4d <Thr::loadKernelSymbolTable(char const*)>
c00184cd:	83 c4 10             	add    esp,0x10
c00184d0:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c00184d6:	83 ec 08             	sub    esp,0x8
c00184d9:	6a 01                	push   0x1
c00184db:	68 06 b3 02 c0       	push   0xc002b306
c00184e0:	e8 c5 50 00 00       	call   c001d5aa <Thr::loadDLL(char const*, bool)>
c00184e5:	83 c4 10             	add    esp,0x10
c00184e8:	83 ec 08             	sub    esp,0x8
c00184eb:	53                   	push   ebx
c00184ec:	50                   	push   eax
c00184ed:	e8 07 53 00 00       	call   c001d7f9 <Thr::executeDLL(unsigned long, void*)>
c00184f2:	83 c4 10             	add    esp,0x10
c00184f5:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c00184fb:	83 ec 08             	sub    esp,0x8
c00184fe:	6a 01                	push   0x1
c0018500:	68 23 b3 02 c0       	push   0xc002b323
c0018505:	e8 a0 50 00 00       	call   c001d5aa <Thr::loadDLL(char const*, bool)>
c001850a:	83 c4 10             	add    esp,0x10
c001850d:	83 ec 08             	sub    esp,0x8
c0018510:	53                   	push   ebx
c0018511:	50                   	push   eax
c0018512:	e8 e2 52 00 00       	call   c001d7f9 <Thr::executeDLL(unsigned long, void*)>
c0018517:	83 c4 10             	add    esp,0x10
c001851a:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001851f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018525:	83 e0 04             	and    eax,0x4
c0018528:	84 c0                	test   al,al
c001852a:	0f 84 d2 00 00 00    	je     c0018602 <ACPI::open(int, int, void*)+0x340>
c0018530:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018537:	83 ec 0c             	sub    esp,0xc
c001853a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001853e:	e8 00 73 ff ff       	call   c000f843 <malloc>
c0018543:	83 c4 10             	add    esp,0x10
c0018546:	89 c3                	mov    ebx,eax
c0018548:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001854d:	83 ec 04             	sub    esp,0x4
c0018550:	50                   	push   eax
c0018551:	68 40 b3 02 c0       	push   0xc002b340
c0018556:	53                   	push   ebx
c0018557:	e8 98 ad ff ff       	call   c00132f4 <File::File(char const*, Process*)>
c001855c:	83 c4 10             	add    esp,0x10
c001855f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018563:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018568:	74 17                	je     c0018581 <ACPI::open(int, int, void*)+0x2bf>
c001856a:	83 ec 0c             	sub    esp,0xc
c001856d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018571:	e8 50 b0 ff ff       	call   c00135c6 <File::exists()>
c0018576:	83 c4 10             	add    esp,0x10
c0018579:	84 c0                	test   al,al
c001857b:	74 04                	je     c0018581 <ACPI::open(int, int, void*)+0x2bf>
c001857d:	b0 01                	mov    al,0x1
c001857f:	eb 02                	jmp    c0018583 <ACPI::open(int, int, void*)+0x2c1>
c0018581:	b0 00                	mov    al,0x0
c0018583:	84 c0                	test   al,al
c0018585:	74 22                	je     c00185a9 <ACPI::open(int, int, void*)+0x2e7>
c0018587:	83 ec 08             	sub    esp,0x8
c001858a:	6a 01                	push   0x1
c001858c:	68 40 b3 02 c0       	push   0xc002b340
c0018591:	e8 14 50 00 00       	call   c001d5aa <Thr::loadDLL(char const*, bool)>
c0018596:	83 c4 10             	add    esp,0x10
c0018599:	83 ec 08             	sub    esp,0x8
c001859c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00185a0:	50                   	push   eax
c00185a1:	e8 53 52 00 00       	call   c001d7f9 <Thr::executeDLL(unsigned long, void*)>
c00185a6:	83 c4 10             	add    esp,0x10
c00185a9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00185ae:	74 1e                	je     c00185ce <ACPI::open(int, int, void*)+0x30c>
c00185b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00185b5:	74 17                	je     c00185ce <ACPI::open(int, int, void*)+0x30c>
c00185b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00185bd:	83 c0 08             	add    eax,0x8
c00185c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00185c2:	83 ec 0c             	sub    esp,0xc
c00185c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00185c9:	ff d0                	call   eax
c00185cb:	83 c4 10             	add    esp,0x10
c00185ce:	a1 28 0b 03 c0       	mov    eax,ds:0xc0030b28
c00185d3:	83 ec 08             	sub    esp,0x8
c00185d6:	68 5d b3 02 c0       	push   0xc002b35d
c00185db:	50                   	push   eax
c00185dc:	e8 5f f5 ff ff       	call   c0017b40 <findDataTable(unsigned char*, char*)>
c00185e1:	83 c4 10             	add    esp,0x10
c00185e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185e8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00185ed:	74 13                	je     c0018602 <ACPI::open(int, int, void*)+0x340>
c00185ef:	83 ec 08             	sub    esp,0x8
c00185f2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00185f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00185fa:	e8 7b fc ff ff       	call   c001827a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00185ff:	83 c4 10             	add    esp,0x10
c0018602:	b8 00 00 00 00       	mov    eax,0x0
c0018607:	83 c4 28             	add    esp,0x28
c001860a:	5b                   	pop    ebx
c001860b:	c3                   	ret    

c001860c <ACPI::sleep()>:
c001860c:	83 ec 0c             	sub    esp,0xc
c001860f:	a1 00 09 03 c0       	mov    eax,ds:0xc0030900
c0018614:	85 c0                	test   eax,eax
c0018616:	74 07                	je     c001861f <ACPI::sleep()+0x13>
c0018618:	a1 00 09 03 c0       	mov    eax,ds:0xc0030900
c001861d:	ff d0                	call   eax
c001861f:	90                   	nop
c0018620:	83 c4 0c             	add    esp,0xc
c0018623:	c3                   	ret    

c0018624 <CPU::close(int, int, void*)>:
c0018624:	31 c0                	xor    eax,eax
c0018626:	c3                   	ret    
c0018627:	90                   	nop

c0018628 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018628:	55                   	push   ebp
c0018629:	57                   	push   edi
c001862a:	56                   	push   esi
c001862b:	53                   	push   ebx
c001862c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018630:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018634:	89 ce                	mov    esi,ecx
c0018636:	89 d5                	mov    ebp,edx
c0018638:	80 f9 04             	cmp    cl,0x4
c001863b:	75 28                	jne    c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001863d:	8d 42 f9             	lea    eax,[edx-0x7]
c0018640:	3c 03                	cmp    al,0x3
c0018642:	0f 86 63 01 00 00    	jbe    c00187ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018648:	80 fa 03             	cmp    dl,0x3
c001864b:	0f 84 5a 01 00 00    	je     c00187ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018651:	8d 7a f2             	lea    edi,[edx-0xe]
c0018654:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018659:	89 fb                	mov    ebx,edi
c001865b:	80 fb 01             	cmp    bl,0x1
c001865e:	77 4e                	ja     c00186ae <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018660:	e9 52 01 00 00       	jmp    c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018665:	80 f9 05             	cmp    cl,0x5
c0018668:	75 4d                	jne    c00186b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001866a:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c001866f:	80 fa 03             	cmp    dl,0x3
c0018672:	0f 86 3f 01 00 00    	jbe    c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018678:	8d 7a fa             	lea    edi,[edx-0x6]
c001867b:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c0018680:	89 fb                	mov    ebx,edi
c0018682:	80 fb 01             	cmp    bl,0x1
c0018685:	0f 86 2c 01 00 00    	jbe    c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001868b:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0018690:	80 fa 08             	cmp    dl,0x8
c0018693:	0f 84 1e 01 00 00    	je     c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018699:	89 d7                	mov    edi,edx
c001869b:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c00186a0:	83 e7 fb             	and    edi,0xfffffffb
c00186a3:	89 fb                	mov    ebx,edi
c00186a5:	80 fb 09             	cmp    bl,0x9
c00186a8:	0f 84 09 01 00 00    	je     c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186ae:	31 c0                	xor    eax,eax
c00186b0:	89 eb                	mov    ebx,ebp
c00186b2:	0f b6 fb             	movzx  edi,bl
c00186b5:	eb 30                	jmp    c00186e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00186b7:	31 c0                	xor    eax,eax
c00186b9:	80 f9 06             	cmp    cl,0x6
c00186bc:	75 f2                	jne    c00186b0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186be:	80 fa 0a             	cmp    dl,0xa
c00186c1:	77 ed                	ja     c00186b0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186c3:	bf de 05 00 00       	mov    edi,0x5de
c00186c8:	0f a3 d7             	bt     edi,edx
c00186cb:	73 e3                	jae    c00186b0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186cd:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c00186d2:	e9 e0 00 00 00       	jmp    c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186d7:	39 c7                	cmp    edi,eax
c00186d9:	0f 84 d3 00 00 00    	je     c00187b2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00186df:	40                   	inc    eax
c00186e0:	3d d0 00 00 00       	cmp    eax,0xd0
c00186e5:	74 09                	je     c00186f0 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00186e7:	89 f3                	mov    ebx,esi
c00186e9:	80 fb 0f             	cmp    bl,0xf
c00186ec:	75 f1                	jne    c00186df <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00186ee:	eb e7                	jmp    c00186d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00186f0:	80 f9 10             	cmp    cl,0x10
c00186f3:	75 14                	jne    c0018709 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00186f5:	8d 42 fc             	lea    eax,[edx-0x4]
c00186f8:	83 e0 fb             	and    eax,0xfffffffb
c00186fb:	3c 02                	cmp    al,0x2
c00186fd:	76 34                	jbe    c0018733 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00186ff:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c0018704:	80 fa 02             	cmp    dl,0x2
c0018707:	eb 24                	jmp    c001872d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018709:	80 f9 11             	cmp    cl,0x11
c001870c:	75 13                	jne    c0018721 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001870e:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c0018713:	80 fa 03             	cmp    dl,0x3
c0018716:	0f 85 9b 00 00 00    	jne    c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001871c:	e9 91 00 00 00       	jmp    c00187b2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018721:	80 f9 12             	cmp    cl,0x12
c0018724:	75 14                	jne    c001873a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018726:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c001872b:	fe ca                	dec    dl
c001872d:	0f 85 84 00 00 00    	jne    c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018733:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018738:	eb 7d                	jmp    c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001873a:	80 f9 14             	cmp    cl,0x14
c001873d:	75 12                	jne    c0018751 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001873f:	4a                   	dec    edx
c0018740:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c0018745:	80 fa 01             	cmp    dl,0x1
c0018748:	77 6d                	ja     c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001874a:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c001874f:	eb 66                	jmp    c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018751:	80 f9 15             	cmp    cl,0x15
c0018754:	75 31                	jne    c0018787 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018756:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c001875b:	80 fa 01             	cmp    dl,0x1
c001875e:	74 57                	je     c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018760:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c0018765:	80 fa 13             	cmp    dl,0x13
c0018768:	76 0c                	jbe    c0018776 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001876a:	80 fa 30             	cmp    dl,0x30
c001876d:	75 48                	jne    c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001876f:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018774:	eb 41                	jmp    c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018776:	b9 04 00 09 00       	mov    ecx,0x90004
c001877b:	0f a3 d1             	bt     ecx,edx
c001877e:	73 37                	jae    c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018780:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018785:	eb 30                	jmp    c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018787:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c001878c:	80 f9 16             	cmp    cl,0x16
c001878f:	75 26                	jne    c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018791:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018796:	84 d2                	test   dl,dl
c0018798:	74 1d                	je     c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001879a:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c001879f:	80 fa 30             	cmp    dl,0x30
c00187a2:	75 13                	jne    c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187a4:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c00187a9:	eb 0c                	jmp    c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ab:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c00187b0:	eb 05                	jmp    c00187b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187b2:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c00187b7:	5b                   	pop    ebx
c00187b8:	5e                   	pop    esi
c00187b9:	5f                   	pop    edi
c00187ba:	5d                   	pop    ebp
c00187bb:	c3                   	ret    

c00187bc <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00187bc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00187c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00187c4:	80 f9 04             	cmp    cl,0x4
c00187c7:	75 6b                	jne    c0018834 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00187c9:	b8 c0 d4 02 c0       	mov    eax,0xc002d4c0
c00187ce:	80 fa 01             	cmp    dl,0x1
c00187d1:	0f 86 92 02 00 00    	jbe    c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187d7:	b8 d0 d4 02 c0       	mov    eax,0xc002d4d0
c00187dc:	80 fa 02             	cmp    dl,0x2
c00187df:	0f 84 84 02 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187e5:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c00187ea:	80 fa 03             	cmp    dl,0x3
c00187ed:	0f 84 76 02 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187f3:	b8 f0 d4 02 c0       	mov    eax,0xc002d4f0
c00187f8:	80 fa 04             	cmp    dl,0x4
c00187fb:	0f 84 68 02 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018801:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c0018806:	80 fa 05             	cmp    dl,0x5
c0018809:	0f 84 5a 02 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001880f:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c0018814:	80 fa 07             	cmp    dl,0x7
c0018817:	0f 84 4c 02 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001881d:	83 ea 08             	sub    edx,0x8
c0018820:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c0018825:	80 fa 01             	cmp    dl,0x1
c0018828:	0f 87 3b 02 00 00    	ja     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001882e:	b8 10 d5 02 c0       	mov    eax,0xc002d510
c0018833:	c3                   	ret    
c0018834:	80 f9 05             	cmp    cl,0x5
c0018837:	75 45                	jne    c001887e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018839:	8d 4a ff             	lea    ecx,[edx-0x1]
c001883c:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0018841:	80 f9 02             	cmp    cl,0x2
c0018844:	0f 86 1f 02 00 00    	jbe    c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001884a:	80 fa 04             	cmp    dl,0x4
c001884d:	0f 84 f3 01 00 00    	je     c0018a46 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018853:	80 fa 07             	cmp    dl,0x7
c0018856:	0f 84 0d 02 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001885c:	b8 30 d5 02 c0       	mov    eax,0xc002d530
c0018861:	80 fa 08             	cmp    dl,0x8
c0018864:	0f 84 ff 01 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001886a:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c001886f:	80 fa 09             	cmp    dl,0x9
c0018872:	0f 85 f1 01 00 00    	jne    c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018878:	b8 40 d5 02 c0       	mov    eax,0xc002d540
c001887d:	c3                   	ret    
c001887e:	80 f9 06             	cmp    cl,0x6
c0018881:	0f 85 85 01 00 00    	jne    c0018a0c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018887:	b8 50 d5 02 c0       	mov    eax,0xc002d550
c001888c:	80 fa 01             	cmp    dl,0x1
c001888f:	0f 84 d4 01 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018895:	8d 42 fb             	lea    eax,[edx-0x5]
c0018898:	3c 01                	cmp    al,0x1
c001889a:	0f 86 ac 01 00 00    	jbe    c0018a4c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00188a0:	80 fa 03             	cmp    dl,0x3
c00188a3:	0f 84 a3 01 00 00    	je     c0018a4c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00188a9:	8d 4a f9             	lea    ecx,[edx-0x7]
c00188ac:	b8 70 d5 02 c0       	mov    eax,0xc002d570
c00188b1:	80 f9 01             	cmp    cl,0x1
c00188b4:	0f 86 af 01 00 00    	jbe    c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188ba:	80 fa 09             	cmp    dl,0x9
c00188bd:	0f 84 8f 01 00 00    	je     c0018a52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00188c3:	8d 4a f6             	lea    ecx,[edx-0xa]
c00188c6:	80 f9 01             	cmp    cl,0x1
c00188c9:	0f 86 9a 01 00 00    	jbe    c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188cf:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c00188d4:	80 fa 0d             	cmp    dl,0xd
c00188d7:	0f 84 8c 01 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188dd:	b8 90 d5 02 c0       	mov    eax,0xc002d590
c00188e2:	80 fa 0e             	cmp    dl,0xe
c00188e5:	0f 84 7e 01 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188eb:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c00188f0:	80 fa 0f             	cmp    dl,0xf
c00188f3:	0f 84 70 01 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f9:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c00188fe:	80 fa 15             	cmp    dl,0x15
c0018901:	0f 84 62 01 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018907:	8d 4a ea             	lea    ecx,[edx-0x16]
c001890a:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c001890f:	80 f9 01             	cmp    cl,0x1
c0018912:	0f 86 51 01 00 00    	jbe    c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018918:	80 fa 1a             	cmp    dl,0x1a
c001891b:	0f 84 37 01 00 00    	je     c0018a58 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018921:	80 fa 1c             	cmp    dl,0x1c
c0018924:	0f 84 34 01 00 00    	je     c0018a5e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001892a:	80 fa 1d             	cmp    dl,0x1d
c001892d:	0f 84 36 01 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018933:	b8 d0 d5 02 c0       	mov    eax,0xc002d5d0
c0018938:	80 fa 25             	cmp    dl,0x25
c001893b:	0f 84 28 01 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018941:	8d 4a da             	lea    ecx,[edx-0x26]
c0018944:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0018949:	80 f9 01             	cmp    cl,0x1
c001894c:	0f 86 17 01 00 00    	jbe    c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018952:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c0018957:	80 fa 2a             	cmp    dl,0x2a
c001895a:	0f 84 09 01 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018960:	b8 d0 d5 02 c0       	mov    eax,0xc002d5d0
c0018965:	80 fa 2c             	cmp    dl,0x2c
c0018968:	0f 84 fb 00 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001896e:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c0018973:	80 fa 2d             	cmp    dl,0x2d
c0018976:	0f 84 ed 00 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001897c:	b8 b0 d5 02 c0       	mov    eax,0xc002d5b0
c0018981:	80 fa 2e             	cmp    dl,0x2e
c0018984:	0f 84 df 00 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001898a:	b8 d0 d5 02 c0       	mov    eax,0xc002d5d0
c001898f:	80 fa 2f             	cmp    dl,0x2f
c0018992:	0f 84 d1 00 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018998:	8d 4a cb             	lea    ecx,[edx-0x35]
c001899b:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c00189a0:	80 f9 01             	cmp    cl,0x1
c00189a3:	0f 86 c0 00 00 00    	jbe    c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a9:	b8 f0 d5 02 c0       	mov    eax,0xc002d5f0
c00189ae:	80 fa 37             	cmp    dl,0x37
c00189b1:	0f 84 b2 00 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b7:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c00189bc:	80 fa 3a             	cmp    dl,0x3a
c00189bf:	0f 84 a4 00 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c5:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c00189ca:	80 fa 3c             	cmp    dl,0x3c
c00189cd:	0f 84 96 00 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d3:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c00189d8:	80 fa 3d             	cmp    dl,0x3d
c00189db:	0f 84 88 00 00 00    	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e1:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c00189e6:	80 fa 3e             	cmp    dl,0x3e
c00189e9:	74 7e                	je     c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189eb:	8d 42 bb             	lea    eax,[edx-0x45]
c00189ee:	3c 01                	cmp    al,0x1
c00189f0:	76 72                	jbe    c0018a64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00189f2:	80 fa 3f             	cmp    dl,0x3f
c00189f5:	74 6d                	je     c0018a64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00189f7:	80 fa 4a             	cmp    dl,0x4a
c00189fa:	74 0a                	je     c0018a06 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00189fc:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c0018a01:	80 fa 4d             	cmp    dl,0x4d
c0018a04:	75 63                	jne    c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a06:	b8 f0 d5 02 c0       	mov    eax,0xc002d5f0
c0018a0b:	c3                   	ret    
c0018a0c:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c0018a11:	80 f9 0b             	cmp    cl,0xb
c0018a14:	75 0a                	jne    c0018a20 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018a16:	fe ca                	dec    dl
c0018a18:	75 4f                	jne    c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a1a:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c0018a1f:	c3                   	ret    
c0018a20:	80 f9 0f             	cmp    cl,0xf
c0018a23:	75 44                	jne    c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a25:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c0018a2a:	80 fa 02             	cmp    dl,0x2
c0018a2d:	76 3a                	jbe    c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a2f:	8d 42 fd             	lea    eax,[edx-0x3]
c0018a32:	3c 01                	cmp    al,0x1
c0018a34:	76 0a                	jbe    c0018a40 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018a36:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c0018a3b:	80 fa 06             	cmp    dl,0x6
c0018a3e:	75 29                	jne    c0018a69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a40:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c0018a45:	c3                   	ret    
c0018a46:	b8 30 d5 02 c0       	mov    eax,0xc002d530
c0018a4b:	c3                   	ret    
c0018a4c:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c0018a51:	c3                   	ret    
c0018a52:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c0018a57:	c3                   	ret    
c0018a58:	b8 b0 d5 02 c0       	mov    eax,0xc002d5b0
c0018a5d:	c3                   	ret    
c0018a5e:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0018a63:	c3                   	ret    
c0018a64:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c0018a69:	c3                   	ret    

c0018a6a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018a6a:	60                   	pusha  
c0018a6b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a77:	9c                   	pushf  
c0018a78:	fa                   	cli    
c0018a79:	0f 09                	wbinvd 
c0018a7b:	0f 30                	wrmsr  
c0018a7d:	9d                   	popf   
c0018a7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a82:	89 02                	mov    DWORD PTR [edx],eax
c0018a84:	61                   	popa   
c0018a85:	c3                   	ret    

c0018a86 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018a86:	60                   	pusha  
c0018a87:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a8b:	9c                   	pushf  
c0018a8c:	fa                   	cli    
c0018a8d:	0f 09                	wbinvd 
c0018a8f:	31 c0                	xor    eax,eax
c0018a91:	31 d2                	xor    edx,edx
c0018a93:	0f 32                	rdmsr  
c0018a95:	9d                   	popf   
c0018a96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a9a:	89 02                	mov    DWORD PTR [edx],eax
c0018a9c:	61                   	popa   
c0018a9d:	c3                   	ret    

c0018a9e <CPU::AMD_K6_writeback(int, int, int)>:
c0018a9e:	56                   	push   esi
c0018a9f:	53                   	push   ebx
c0018aa0:	83 ec 10             	sub    esp,0x10
c0018aa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018aa7:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018aac:	75 5d                	jne    c0018b0b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018aae:	83 f8 08             	cmp    eax,0x8
c0018ab1:	75 09                	jne    c0018abc <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018ab3:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018ab8:	7e 13                	jle    c0018acd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018aba:	eb 30                	jmp    c0018aec <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018abc:	83 f8 06             	cmp    eax,0x6
c0018abf:	7c 4a                	jl     c0018b0b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ac1:	83 f8 07             	cmp    eax,0x7
c0018ac4:	7e 07                	jle    c0018acd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ac6:	83 f8 09             	cmp    eax,0x9
c0018ac9:	74 21                	je     c0018aec <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018acb:	eb 3e                	jmp    c0018b0b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018acd:	89 e6                	mov    esi,esp
c0018acf:	8b 1d 88 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e288
c0018ad5:	56                   	push   esi
c0018ad6:	c1 eb 15             	shr    ebx,0x15
c0018ad9:	68 82 00 00 c0       	push   0xc0000082
c0018ade:	83 e3 7e             	and    ebx,0x7e
c0018ae1:	e8 a0 ff ff ff       	call   c0018a86 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ae6:	56                   	push   esi
c0018ae7:	6a 00                	push   0x0
c0018ae9:	53                   	push   ebx
c0018aea:	eb 12                	jmp    c0018afe <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018aec:	89 e3                	mov    ebx,esp
c0018aee:	53                   	push   ebx
c0018aef:	68 82 00 00 c0       	push   0xc0000082
c0018af4:	e8 8d ff ff ff       	call   c0018a86 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018af9:	53                   	push   ebx
c0018afa:	6a 00                	push   0x0
c0018afc:	6a 00                	push   0x0
c0018afe:	68 82 00 00 c0       	push   0xc0000082
c0018b03:	e8 62 ff ff ff       	call   c0018a6a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018b08:	83 c4 18             	add    esp,0x18
c0018b0b:	83 c4 10             	add    esp,0x10
c0018b0e:	5b                   	pop    ebx
c0018b0f:	5e                   	pop    esi
c0018b10:	c3                   	ret    
c0018b11:	90                   	nop

c0018b12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018b12:	55                   	push   ebp
c0018b13:	57                   	push   edi
c0018b14:	56                   	push   esi
c0018b15:	53                   	push   ebx
c0018b16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b1a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018b1e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018b22:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018b26:	39 05 60 d7 02 c0    	cmp    DWORD PTR ds:0xc002d760,eax
c0018b2c:	75 23                	jne    c0018b51 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018b2e:	a1 8c 0d 03 c0       	mov    eax,ds:0xc0030d8c
c0018b33:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018b37:	89 06                	mov    DWORD PTR [esi],eax
c0018b39:	a1 88 0d 03 c0       	mov    eax,ds:0xc0030d88
c0018b3e:	89 07                	mov    DWORD PTR [edi],eax
c0018b40:	a1 84 0d 03 c0       	mov    eax,ds:0xc0030d84
c0018b45:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018b48:	a1 80 0d 03 c0       	mov    eax,ds:0xc0030d80
c0018b4d:	89 02                	mov    DWORD PTR [edx],eax
c0018b4f:	eb 3f                	jmp    c0018b90 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018b51:	31 c9                	xor    ecx,ecx
c0018b53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b57:	0f a2                	cpuid  
c0018b59:	89 06                	mov    DWORD PTR [esi],eax
c0018b5b:	89 1f                	mov    DWORD PTR [edi],ebx
c0018b5d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b61:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018b64:	89 10                	mov    DWORD PTR [eax],edx
c0018b66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b6a:	a3 60 d7 02 c0       	mov    ds:0xc002d760,eax
c0018b6f:	8b 06                	mov    eax,DWORD PTR [esi]
c0018b71:	a3 8c 0d 03 c0       	mov    ds:0xc0030d8c,eax
c0018b76:	8b 07                	mov    eax,DWORD PTR [edi]
c0018b78:	a3 88 0d 03 c0       	mov    ds:0xc0030d88,eax
c0018b7d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b80:	a3 84 0d 03 c0       	mov    ds:0xc0030d84,eax
c0018b85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b89:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b8b:	a3 80 0d 03 c0       	mov    ds:0xc0030d80,eax
c0018b90:	5b                   	pop    ebx
c0018b91:	5e                   	pop    esi
c0018b92:	5f                   	pop    edi
c0018b93:	5d                   	pop    ebp
c0018b94:	c3                   	ret    
c0018b95:	90                   	nop

c0018b96 <CPU::cpuidCheckEDX(unsigned int)>:
c0018b96:	83 ec 10             	sub    esp,0x10
c0018b99:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b9d:	50                   	push   eax
c0018b9e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ba2:	50                   	push   eax
c0018ba3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ba7:	50                   	push   eax
c0018ba8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bac:	50                   	push   eax
c0018bad:	6a 01                	push   0x1
c0018baf:	e8 5e ff ff ff       	call   c0018b12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bb4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bb8:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018bbc:	0f 95 c0             	setne  al
c0018bbf:	83 c4 24             	add    esp,0x24
c0018bc2:	c3                   	ret    
c0018bc3:	90                   	nop

c0018bc4 <CPU::cpuidCheckECX(unsigned int)>:
c0018bc4:	83 ec 10             	sub    esp,0x10
c0018bc7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bcb:	50                   	push   eax
c0018bcc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bd0:	50                   	push   eax
c0018bd1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bd5:	50                   	push   eax
c0018bd6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bda:	50                   	push   eax
c0018bdb:	6a 01                	push   0x1
c0018bdd:	e8 30 ff ff ff       	call   c0018b12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018be2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018be6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018bea:	0f 95 c0             	setne  al
c0018bed:	83 c4 24             	add    esp,0x24
c0018bf0:	c3                   	ret    
c0018bf1:	90                   	nop

c0018bf2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018bf2:	83 ec 10             	sub    esp,0x10
c0018bf5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bf9:	50                   	push   eax
c0018bfa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bfe:	50                   	push   eax
c0018bff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c03:	50                   	push   eax
c0018c04:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c08:	50                   	push   eax
c0018c09:	6a 07                	push   0x7
c0018c0b:	e8 02 ff ff ff       	call   c0018b12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c10:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c14:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018c18:	0f 95 c0             	setne  al
c0018c1b:	83 c4 24             	add    esp,0x24
c0018c1e:	c3                   	ret    
c0018c1f:	90                   	nop

c0018c20 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018c20:	83 ec 10             	sub    esp,0x10
c0018c23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c27:	50                   	push   eax
c0018c28:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c2c:	50                   	push   eax
c0018c2d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c31:	50                   	push   eax
c0018c32:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c36:	50                   	push   eax
c0018c37:	6a 07                	push   0x7
c0018c39:	e8 d4 fe ff ff       	call   c0018b12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c42:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018c46:	0f 95 c0             	setne  al
c0018c49:	83 c4 24             	add    esp,0x24
c0018c4c:	c3                   	ret    
c0018c4d:	90                   	nop

c0018c4e <CPU::CPU()>:
c0018c4e:	83 ec 0c             	sub    esp,0xc
c0018c51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c55:	83 ec 08             	sub    esp,0x8
c0018c58:	68 42 b7 02 c0       	push   0xc002b742
c0018c5d:	50                   	push   eax
c0018c5e:	e8 4f b7 ff ff       	call   c00143b2 <Device::Device(char const*)>
c0018c63:	83 c4 10             	add    esp,0x10
c0018c66:	ba 1c b8 02 c0       	mov    edx,0xc002b81c
c0018c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c6f:	89 10                	mov    DWORD PTR [eax],edx
c0018c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c75:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018c7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c83:	05 78 01 00 00       	add    eax,0x178
c0018c88:	83 ec 0c             	sub    esp,0xc
c0018c8b:	50                   	push   eax
c0018c8c:	e8 c7 63 ff ff       	call   c000f058 <GDT::GDT()>
c0018c91:	83 c4 10             	add    esp,0x10
c0018c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c98:	05 7c 09 00 00       	add    eax,0x97c
c0018c9d:	83 ec 0c             	sub    esp,0xc
c0018ca0:	50                   	push   eax
c0018ca1:	e8 14 66 ff ff       	call   c000f2ba <IDT::IDT()>
c0018ca6:	83 c4 10             	add    esp,0x10
c0018ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cad:	05 7c 11 00 00       	add    eax,0x117c
c0018cb2:	83 ec 0c             	sub    esp,0xc
c0018cb5:	50                   	push   eax
c0018cb6:	e8 b5 87 ff ff       	call   c0011470 <TSS::TSS()>
c0018cbb:	83 c4 10             	add    esp,0x10
c0018cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cc2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018cc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ccd:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018cd7:	90                   	nop
c0018cd8:	83 c4 0c             	add    esp,0xc
c0018cdb:	c3                   	ret    

c0018cdc <CPU::displayFeatures()>:
c0018cdc:	53                   	push   ebx
c0018cdd:	83 ec 10             	sub    esp,0x10
c0018ce0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018ce4:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018cea:	68 50 b4 02 c0       	push   0xc002b450
c0018cef:	e8 a8 a0 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018cf4:	59                   	pop    ecx
c0018cf5:	58                   	pop    eax
c0018cf6:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018cfc:	50                   	push   eax
c0018cfd:	68 61 b4 02 c0       	push   0xc002b461
c0018d02:	e8 95 a0 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018d07:	58                   	pop    eax
c0018d08:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d0e:	5a                   	pop    edx
c0018d0f:	c1 e8 0e             	shr    eax,0xe
c0018d12:	0f b6 c0             	movzx  eax,al
c0018d15:	50                   	push   eax
c0018d16:	68 72 b4 02 c0       	push   0xc002b472
c0018d1b:	e8 7c a0 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018d20:	59                   	pop    ecx
c0018d21:	58                   	pop    eax
c0018d22:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d28:	66 c1 e8 06          	shr    ax,0x6
c0018d2c:	0f b6 c0             	movzx  eax,al
c0018d2f:	50                   	push   eax
c0018d30:	68 83 b4 02 c0       	push   0xc002b483
c0018d35:	e8 62 a0 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018d3a:	c7 04 24 30 b9 02 c0 	mov    DWORD PTR [esp],0xc002b930
c0018d41:	e8 56 a0 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018d46:	83 c4 10             	add    esp,0x10
c0018d49:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018d4e:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018d55:	74 05                	je     c0018d5c <CPU::displayFeatures()+0x80>
c0018d57:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018d5c:	52                   	push   edx
c0018d5d:	52                   	push   edx
c0018d5e:	50                   	push   eax
c0018d5f:	68 94 b4 02 c0       	push   0xc002b494
c0018d64:	e8 33 a0 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018d69:	83 c4 10             	add    esp,0x10
c0018d6c:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018d71:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018d78:	78 05                	js     c0018d7f <CPU::displayFeatures()+0xa3>
c0018d7a:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018d7f:	51                   	push   ecx
c0018d80:	51                   	push   ecx
c0018d81:	50                   	push   eax
c0018d82:	68 ab b4 02 c0       	push   0xc002b4ab
c0018d87:	e8 10 a0 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018d8c:	83 c4 10             	add    esp,0x10
c0018d8f:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018d94:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018d9b:	75 05                	jne    c0018da2 <CPU::displayFeatures()+0xc6>
c0018d9d:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018da2:	52                   	push   edx
c0018da3:	52                   	push   edx
c0018da4:	50                   	push   eax
c0018da5:	68 c2 b4 02 c0       	push   0xc002b4c2
c0018daa:	e8 ed 9f ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018daf:	83 c4 10             	add    esp,0x10
c0018db2:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018db7:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018dbe:	75 05                	jne    c0018dc5 <CPU::displayFeatures()+0xe9>
c0018dc0:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018dc5:	51                   	push   ecx
c0018dc6:	51                   	push   ecx
c0018dc7:	50                   	push   eax
c0018dc8:	68 d9 b4 02 c0       	push   0xc002b4d9
c0018dcd:	e8 ca 9f ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018dd2:	83 c4 10             	add    esp,0x10
c0018dd5:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018dda:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018de1:	75 05                	jne    c0018de8 <CPU::displayFeatures()+0x10c>
c0018de3:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018de8:	52                   	push   edx
c0018de9:	52                   	push   edx
c0018dea:	50                   	push   eax
c0018deb:	68 f0 b4 02 c0       	push   0xc002b4f0
c0018df0:	e8 a7 9f ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018df5:	83 c4 10             	add    esp,0x10
c0018df8:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018dfd:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018e04:	75 05                	jne    c0018e0b <CPU::displayFeatures()+0x12f>
c0018e06:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018e0b:	51                   	push   ecx
c0018e0c:	51                   	push   ecx
c0018e0d:	50                   	push   eax
c0018e0e:	68 07 b5 02 c0       	push   0xc002b507
c0018e13:	e8 84 9f ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018e18:	83 c4 10             	add    esp,0x10
c0018e1b:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018e20:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018e27:	75 05                	jne    c0018e2e <CPU::displayFeatures()+0x152>
c0018e29:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018e2e:	52                   	push   edx
c0018e2f:	52                   	push   edx
c0018e30:	50                   	push   eax
c0018e31:	68 1e b5 02 c0       	push   0xc002b51e
c0018e36:	e8 61 9f ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018e3b:	83 c4 10             	add    esp,0x10
c0018e3e:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018e43:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018e4a:	75 05                	jne    c0018e51 <CPU::displayFeatures()+0x175>
c0018e4c:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018e51:	51                   	push   ecx
c0018e52:	51                   	push   ecx
c0018e53:	50                   	push   eax
c0018e54:	68 35 b5 02 c0       	push   0xc002b535
c0018e59:	e8 3e 9f ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018e5e:	83 c4 10             	add    esp,0x10
c0018e61:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018e66:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018e6d:	75 05                	jne    c0018e74 <CPU::displayFeatures()+0x198>
c0018e6f:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018e74:	52                   	push   edx
c0018e75:	52                   	push   edx
c0018e76:	50                   	push   eax
c0018e77:	68 4c b5 02 c0       	push   0xc002b54c
c0018e7c:	e8 1b 9f ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018e81:	83 c4 10             	add    esp,0x10
c0018e84:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018e89:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018e90:	75 05                	jne    c0018e97 <CPU::displayFeatures()+0x1bb>
c0018e92:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018e97:	51                   	push   ecx
c0018e98:	51                   	push   ecx
c0018e99:	50                   	push   eax
c0018e9a:	68 63 b5 02 c0       	push   0xc002b563
c0018e9f:	e8 f8 9e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018ea4:	83 c4 10             	add    esp,0x10
c0018ea7:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018eac:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018eb3:	75 05                	jne    c0018eba <CPU::displayFeatures()+0x1de>
c0018eb5:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018eba:	52                   	push   edx
c0018ebb:	52                   	push   edx
c0018ebc:	50                   	push   eax
c0018ebd:	68 7a b5 02 c0       	push   0xc002b57a
c0018ec2:	e8 d5 9e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018ec7:	83 c4 10             	add    esp,0x10
c0018eca:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018ecf:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018ed6:	75 05                	jne    c0018edd <CPU::displayFeatures()+0x201>
c0018ed8:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018edd:	51                   	push   ecx
c0018ede:	51                   	push   ecx
c0018edf:	50                   	push   eax
c0018ee0:	68 91 b5 02 c0       	push   0xc002b591
c0018ee5:	e8 b2 9e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018eea:	83 c4 10             	add    esp,0x10
c0018eed:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018ef2:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018ef9:	75 05                	jne    c0018f00 <CPU::displayFeatures()+0x224>
c0018efb:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018f00:	52                   	push   edx
c0018f01:	52                   	push   edx
c0018f02:	50                   	push   eax
c0018f03:	68 a8 b5 02 c0       	push   0xc002b5a8
c0018f08:	e8 8f 9e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018f0d:	83 c4 10             	add    esp,0x10
c0018f10:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018f15:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018f1c:	78 05                	js     c0018f23 <CPU::displayFeatures()+0x247>
c0018f1e:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018f23:	51                   	push   ecx
c0018f24:	51                   	push   ecx
c0018f25:	50                   	push   eax
c0018f26:	68 bf b5 02 c0       	push   0xc002b5bf
c0018f2b:	e8 6c 9e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018f30:	83 c4 10             	add    esp,0x10
c0018f33:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018f38:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018f3f:	75 05                	jne    c0018f46 <CPU::displayFeatures()+0x26a>
c0018f41:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018f46:	52                   	push   edx
c0018f47:	52                   	push   edx
c0018f48:	50                   	push   eax
c0018f49:	68 d6 b5 02 c0       	push   0xc002b5d6
c0018f4e:	e8 49 9e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0018f53:	83 c4 18             	add    esp,0x18
c0018f56:	5b                   	pop    ebx
c0018f57:	c3                   	ret    

c0018f58 <CPU::detectFeatures()>:
c0018f58:	55                   	push   ebp
c0018f59:	57                   	push   edi
c0018f5a:	56                   	push   esi
c0018f5b:	53                   	push   ebx
c0018f5c:	83 ec 50             	sub    esp,0x50
c0018f5f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018f63:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018f6d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018f74:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018f7a:	6a 0d                	push   0xd
c0018f7c:	6a 00                	push   0x0
c0018f7e:	57                   	push   edi
c0018f7f:	e8 f4 77 fe ff       	call   c0000778 <memset>
c0018f84:	83 c4 10             	add    esp,0x10
c0018f87:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0018f8c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018f93:	0f 84 20 09 00 00    	je     c00198b9 <CPU::detectFeatures()+0x961>
c0018f99:	83 ec 0c             	sub    esp,0xc
c0018f9c:	6a 10                	push   0x10
c0018f9e:	e8 f3 fb ff ff       	call   c0018b96 <CPU::cpuidCheckEDX(unsigned int)>
c0018fa3:	83 e0 01             	and    eax,0x1
c0018fa6:	8d 14 00             	lea    edx,[eax+eax*1]
c0018fa9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018faf:	83 e0 fd             	and    eax,0xfffffffd
c0018fb2:	09 d0                	or     eax,edx
c0018fb4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018fba:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018fc1:	e8 d0 fb ff ff       	call   c0018b96 <CPU::cpuidCheckEDX(unsigned int)>
c0018fc6:	83 e0 01             	and    eax,0x1
c0018fc9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018fd0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018fd6:	83 e0 fb             	and    eax,0xfffffffb
c0018fd9:	09 d0                	or     eax,edx
c0018fdb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018fe1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018fe8:	e8 a9 fb ff ff       	call   c0018b96 <CPU::cpuidCheckEDX(unsigned int)>
c0018fed:	83 e0 01             	and    eax,0x1
c0018ff0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018ff7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ffd:	83 e0 f7             	and    eax,0xfffffff7
c0019000:	09 d0                	or     eax,edx
c0019002:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019008:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001900f:	e8 82 fb ff ff       	call   c0018b96 <CPU::cpuidCheckEDX(unsigned int)>
c0019014:	83 e0 01             	and    eax,0x1
c0019017:	c1 e0 04             	shl    eax,0x4
c001901a:	88 c2                	mov    dl,al
c001901c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019022:	83 e0 ef             	and    eax,0xffffffef
c0019025:	09 d0                	or     eax,edx
c0019027:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001902d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019034:	e8 5d fb ff ff       	call   c0018b96 <CPU::cpuidCheckEDX(unsigned int)>
c0019039:	83 e0 01             	and    eax,0x1
c001903c:	c1 e0 05             	shl    eax,0x5
c001903f:	88 c2                	mov    dl,al
c0019041:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019047:	83 e0 df             	and    eax,0xffffffdf
c001904a:	09 d0                	or     eax,edx
c001904c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019052:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019059:	e8 38 fb ff ff       	call   c0018b96 <CPU::cpuidCheckEDX(unsigned int)>
c001905e:	83 e0 01             	and    eax,0x1
c0019061:	8d 14 00             	lea    edx,[eax+eax*1]
c0019064:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001906a:	83 e0 fd             	and    eax,0xfffffffd
c001906d:	09 d0                	or     eax,edx
c001906f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019075:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001907c:	e8 15 fb ff ff       	call   c0018b96 <CPU::cpuidCheckEDX(unsigned int)>
c0019081:	83 e0 01             	and    eax,0x1
c0019084:	c1 e0 06             	shl    eax,0x6
c0019087:	88 c2                	mov    dl,al
c0019089:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001908f:	83 e0 bf             	and    eax,0xffffffbf
c0019092:	09 d0                	or     eax,edx
c0019094:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001909a:	58                   	pop    eax
c001909b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001909f:	56                   	push   esi
c00190a0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00190a4:	55                   	push   ebp
c00190a5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00190a9:	50                   	push   eax
c00190aa:	8d 54 24 28          	lea    edx,[esp+0x28]
c00190ae:	52                   	push   edx
c00190af:	6a 00                	push   0x0
c00190b1:	e8 5c fa ff ff       	call   c0018b12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190b6:	83 c4 1c             	add    esp,0x1c
c00190b9:	6a 04                	push   0x4
c00190bb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00190bf:	50                   	push   eax
c00190c0:	57                   	push   edi
c00190c1:	e8 7e 76 fe ff       	call   c0000744 <memcpy>
c00190c6:	83 c4 0c             	add    esp,0xc
c00190c9:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00190cf:	6a 04                	push   0x4
c00190d1:	56                   	push   esi
c00190d2:	50                   	push   eax
c00190d3:	e8 6c 76 fe ff       	call   c0000744 <memcpy>
c00190d8:	83 c4 0c             	add    esp,0xc
c00190db:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00190e1:	6a 04                	push   0x4
c00190e3:	55                   	push   ebp
c00190e4:	50                   	push   eax
c00190e5:	e8 5a 76 fe ff       	call   c0000744 <memcpy>
c00190ea:	58                   	pop    eax
c00190eb:	5a                   	pop    edx
c00190ec:	68 ed b5 02 c0       	push   0xc002b5ed
c00190f1:	57                   	push   edi
c00190f2:	e8 c9 77 fe ff       	call   c00008c0 <strcmp>
c00190f7:	83 c4 10             	add    esp,0x10
c00190fa:	85 c0                	test   eax,eax
c00190fc:	75 0f                	jne    c001910d <CPU::detectFeatures()+0x1b5>
c00190fe:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019108:	e9 22 02 00 00       	jmp    c001932f <CPU::detectFeatures()+0x3d7>
c001910d:	50                   	push   eax
c001910e:	50                   	push   eax
c001910f:	68 fa b5 02 c0       	push   0xc002b5fa
c0019114:	57                   	push   edi
c0019115:	e8 a6 77 fe ff       	call   c00008c0 <strcmp>
c001911a:	83 c4 10             	add    esp,0x10
c001911d:	85 c0                	test   eax,eax
c001911f:	74 dd                	je     c00190fe <CPU::detectFeatures()+0x1a6>
c0019121:	51                   	push   ecx
c0019122:	51                   	push   ecx
c0019123:	68 07 b6 02 c0       	push   0xc002b607
c0019128:	57                   	push   edi
c0019129:	e8 92 77 fe ff       	call   c00008c0 <strcmp>
c001912e:	83 c4 10             	add    esp,0x10
c0019131:	85 c0                	test   eax,eax
c0019133:	74 2a                	je     c001915f <CPU::detectFeatures()+0x207>
c0019135:	52                   	push   edx
c0019136:	52                   	push   edx
c0019137:	68 14 b6 02 c0       	push   0xc002b614
c001913c:	57                   	push   edi
c001913d:	e8 7e 77 fe ff       	call   c00008c0 <strcmp>
c0019142:	83 c4 10             	add    esp,0x10
c0019145:	85 c0                	test   eax,eax
c0019147:	74 16                	je     c001915f <CPU::detectFeatures()+0x207>
c0019149:	50                   	push   eax
c001914a:	50                   	push   eax
c001914b:	68 21 b6 02 c0       	push   0xc002b621
c0019150:	57                   	push   edi
c0019151:	e8 6a 77 fe ff       	call   c00008c0 <strcmp>
c0019156:	83 c4 10             	add    esp,0x10
c0019159:	85 c0                	test   eax,eax
c001915b:	74 48                	je     c00191a5 <CPU::detectFeatures()+0x24d>
c001915d:	eb 0f                	jmp    c001916e <CPU::detectFeatures()+0x216>
c001915f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019169:	e9 c1 01 00 00       	jmp    c001932f <CPU::detectFeatures()+0x3d7>
c001916e:	50                   	push   eax
c001916f:	50                   	push   eax
c0019170:	68 2e b6 02 c0       	push   0xc002b62e
c0019175:	57                   	push   edi
c0019176:	e8 45 77 fe ff       	call   c00008c0 <strcmp>
c001917b:	83 c4 10             	add    esp,0x10
c001917e:	85 c0                	test   eax,eax
c0019180:	74 23                	je     c00191a5 <CPU::detectFeatures()+0x24d>
c0019182:	50                   	push   eax
c0019183:	50                   	push   eax
c0019184:	68 3b b6 02 c0       	push   0xc002b63b
c0019189:	57                   	push   edi
c001918a:	e8 31 77 fe ff       	call   c00008c0 <strcmp>
c001918f:	83 c4 10             	add    esp,0x10
c0019192:	85 c0                	test   eax,eax
c0019194:	75 1e                	jne    c00191b4 <CPU::detectFeatures()+0x25c>
c0019196:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00191a0:	e9 8a 01 00 00       	jmp    c001932f <CPU::detectFeatures()+0x3d7>
c00191a5:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00191af:	e9 7b 01 00 00       	jmp    c001932f <CPU::detectFeatures()+0x3d7>
c00191b4:	50                   	push   eax
c00191b5:	50                   	push   eax
c00191b6:	68 48 b6 02 c0       	push   0xc002b648
c00191bb:	57                   	push   edi
c00191bc:	e8 ff 76 fe ff       	call   c00008c0 <strcmp>
c00191c1:	83 c4 10             	add    esp,0x10
c00191c4:	85 c0                	test   eax,eax
c00191c6:	75 0f                	jne    c00191d7 <CPU::detectFeatures()+0x27f>
c00191c8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00191d2:	e9 58 01 00 00       	jmp    c001932f <CPU::detectFeatures()+0x3d7>
c00191d7:	50                   	push   eax
c00191d8:	50                   	push   eax
c00191d9:	68 07 b6 02 c0       	push   0xc002b607
c00191de:	57                   	push   edi
c00191df:	e8 dc 76 fe ff       	call   c00008c0 <strcmp>
c00191e4:	83 c4 10             	add    esp,0x10
c00191e7:	85 c0                	test   eax,eax
c00191e9:	75 0f                	jne    c00191fa <CPU::detectFeatures()+0x2a2>
c00191eb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00191f5:	e9 35 01 00 00       	jmp    c001932f <CPU::detectFeatures()+0x3d7>
c00191fa:	50                   	push   eax
c00191fb:	50                   	push   eax
c00191fc:	68 55 b6 02 c0       	push   0xc002b655
c0019201:	57                   	push   edi
c0019202:	e8 b9 76 fe ff       	call   c00008c0 <strcmp>
c0019207:	83 c4 10             	add    esp,0x10
c001920a:	85 c0                	test   eax,eax
c001920c:	75 0f                	jne    c001921d <CPU::detectFeatures()+0x2c5>
c001920e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019218:	e9 12 01 00 00       	jmp    c001932f <CPU::detectFeatures()+0x3d7>
c001921d:	51                   	push   ecx
c001921e:	51                   	push   ecx
c001921f:	68 62 b6 02 c0       	push   0xc002b662
c0019224:	57                   	push   edi
c0019225:	e8 96 76 fe ff       	call   c00008c0 <strcmp>
c001922a:	83 c4 10             	add    esp,0x10
c001922d:	85 c0                	test   eax,eax
c001922f:	75 0f                	jne    c0019240 <CPU::detectFeatures()+0x2e8>
c0019231:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001923b:	e9 ef 00 00 00       	jmp    c001932f <CPU::detectFeatures()+0x3d7>
c0019240:	52                   	push   edx
c0019241:	52                   	push   edx
c0019242:	68 6f b6 02 c0       	push   0xc002b66f
c0019247:	57                   	push   edi
c0019248:	e8 73 76 fe ff       	call   c00008c0 <strcmp>
c001924d:	83 c4 10             	add    esp,0x10
c0019250:	85 c0                	test   eax,eax
c0019252:	75 0f                	jne    c0019263 <CPU::detectFeatures()+0x30b>
c0019254:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001925e:	e9 cc 00 00 00       	jmp    c001932f <CPU::detectFeatures()+0x3d7>
c0019263:	50                   	push   eax
c0019264:	50                   	push   eax
c0019265:	68 7c b6 02 c0       	push   0xc002b67c
c001926a:	57                   	push   edi
c001926b:	e8 50 76 fe ff       	call   c00008c0 <strcmp>
c0019270:	83 c4 10             	add    esp,0x10
c0019273:	85 c0                	test   eax,eax
c0019275:	75 0f                	jne    c0019286 <CPU::detectFeatures()+0x32e>
c0019277:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019281:	e9 a9 00 00 00       	jmp    c001932f <CPU::detectFeatures()+0x3d7>
c0019286:	50                   	push   eax
c0019287:	50                   	push   eax
c0019288:	68 89 b6 02 c0       	push   0xc002b689
c001928d:	57                   	push   edi
c001928e:	e8 2d 76 fe ff       	call   c00008c0 <strcmp>
c0019293:	83 c4 10             	add    esp,0x10
c0019296:	85 c0                	test   eax,eax
c0019298:	75 0f                	jne    c00192a9 <CPU::detectFeatures()+0x351>
c001929a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00192a4:	e9 86 00 00 00       	jmp    c001932f <CPU::detectFeatures()+0x3d7>
c00192a9:	50                   	push   eax
c00192aa:	50                   	push   eax
c00192ab:	68 96 b6 02 c0       	push   0xc002b696
c00192b0:	57                   	push   edi
c00192b1:	e8 0a 76 fe ff       	call   c00008c0 <strcmp>
c00192b6:	83 c4 10             	add    esp,0x10
c00192b9:	85 c0                	test   eax,eax
c00192bb:	75 0c                	jne    c00192c9 <CPU::detectFeatures()+0x371>
c00192bd:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00192c7:	eb 66                	jmp    c001932f <CPU::detectFeatures()+0x3d7>
c00192c9:	50                   	push   eax
c00192ca:	50                   	push   eax
c00192cb:	68 a3 b6 02 c0       	push   0xc002b6a3
c00192d0:	57                   	push   edi
c00192d1:	e8 ea 75 fe ff       	call   c00008c0 <strcmp>
c00192d6:	83 c4 10             	add    esp,0x10
c00192d9:	85 c0                	test   eax,eax
c00192db:	75 0c                	jne    c00192e9 <CPU::detectFeatures()+0x391>
c00192dd:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00192e7:	eb 46                	jmp    c001932f <CPU::detectFeatures()+0x3d7>
c00192e9:	50                   	push   eax
c00192ea:	50                   	push   eax
c00192eb:	68 b0 b6 02 c0       	push   0xc002b6b0
c00192f0:	57                   	push   edi
c00192f1:	e8 ca 75 fe ff       	call   c00008c0 <strcmp>
c00192f6:	83 c4 10             	add    esp,0x10
c00192f9:	85 c0                	test   eax,eax
c00192fb:	74 e0                	je     c00192dd <CPU::detectFeatures()+0x385>
c00192fd:	50                   	push   eax
c00192fe:	50                   	push   eax
c00192ff:	68 bd b6 02 c0       	push   0xc002b6bd
c0019304:	57                   	push   edi
c0019305:	e8 b6 75 fe ff       	call   c00008c0 <strcmp>
c001930a:	83 c4 10             	add    esp,0x10
c001930d:	85 c0                	test   eax,eax
c001930f:	74 cc                	je     c00192dd <CPU::detectFeatures()+0x385>
c0019311:	51                   	push   ecx
c0019312:	51                   	push   ecx
c0019313:	68 ca b6 02 c0       	push   0xc002b6ca
c0019318:	57                   	push   edi
c0019319:	e8 a2 75 fe ff       	call   c00008c0 <strcmp>
c001931e:	83 c4 10             	add    esp,0x10
c0019321:	85 c0                	test   eax,eax
c0019323:	74 b8                	je     c00192dd <CPU::detectFeatures()+0x385>
c0019325:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001932f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019334:	0f 86 be 00 00 00    	jbe    c00193f8 <CPU::detectFeatures()+0x4a0>
c001933a:	83 ec 0c             	sub    esp,0xc
c001933d:	68 80 00 00 00       	push   0x80
c0019342:	e8 ab f8 ff ff       	call   c0018bf2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019347:	83 e0 01             	and    eax,0x1
c001934a:	c1 e0 06             	shl    eax,0x6
c001934d:	88 c2                	mov    dl,al
c001934f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019355:	83 e0 bf             	and    eax,0xffffffbf
c0019358:	09 d0                	or     eax,edx
c001935a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019360:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019367:	e8 86 f8 ff ff       	call   c0018bf2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001936c:	83 e0 01             	and    eax,0x1
c001936f:	c1 e0 04             	shl    eax,0x4
c0019372:	88 c2                	mov    dl,al
c0019374:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001937a:	83 e0 ef             	and    eax,0xffffffef
c001937d:	09 d0                	or     eax,edx
c001937f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019385:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001938c:	e8 61 f8 ff ff       	call   c0018bf2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019391:	c1 e0 07             	shl    eax,0x7
c0019394:	88 c2                	mov    dl,al
c0019396:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001939c:	83 e0 7f             	and    eax,0x7f
c001939f:	09 d0                	or     eax,edx
c00193a1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193a7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00193ae:	e8 6d f8 ff ff       	call   c0018c20 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00193b3:	83 e0 01             	and    eax,0x1
c00193b6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00193bd:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00193c3:	83 e0 f7             	and    eax,0xfffffff7
c00193c6:	09 d0                	or     eax,edx
c00193c8:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00193ce:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00193d5:	e8 46 f8 ff ff       	call   c0018c20 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00193da:	83 c4 10             	add    esp,0x10
c00193dd:	83 e0 01             	and    eax,0x1
c00193e0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00193e7:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00193ed:	83 e0 fb             	and    eax,0xfffffffb
c00193f0:	09 d0                	or     eax,edx
c00193f2:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00193f8:	83 ec 0c             	sub    esp,0xc
c00193fb:	56                   	push   esi
c00193fc:	55                   	push   ebp
c00193fd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019401:	57                   	push   edi
c0019402:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019406:	50                   	push   eax
c0019407:	6a 01                	push   0x1
c0019409:	e8 04 f7 ff ff       	call   c0018b12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001940e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019412:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019418:	88 ca                	mov    dl,cl
c001941a:	83 e0 f0             	and    eax,0xfffffff0
c001941d:	83 e2 0f             	and    edx,0xf
c0019420:	09 d0                	or     eax,edx
c0019422:	88 ca                	mov    dl,cl
c0019424:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001942a:	c0 ea 04             	shr    dl,0x4
c001942d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019431:	0f b6 c2             	movzx  eax,dl
c0019434:	83 c4 20             	add    esp,0x20
c0019437:	c1 e0 06             	shl    eax,0x6
c001943a:	89 c5                	mov    ebp,eax
c001943c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019442:	66 25 3f c0          	and    ax,0xc03f
c0019446:	09 e8                	or     eax,ebp
c0019448:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001944f:	89 c8                	mov    eax,ecx
c0019451:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019457:	c1 e8 08             	shr    eax,0x8
c001945a:	83 e2 3f             	and    edx,0x3f
c001945d:	83 e0 0f             	and    eax,0xf
c0019460:	89 c5                	mov    ebp,eax
c0019462:	c1 e5 06             	shl    ebp,0x6
c0019465:	09 d5                	or     ebp,edx
c0019467:	89 ea                	mov    edx,ebp
c0019469:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001946f:	88 c2                	mov    dl,al
c0019471:	c0 ea 02             	shr    dl,0x2
c0019474:	89 d5                	mov    ebp,edx
c0019476:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001947c:	83 e2 c0             	and    edx,0xffffffc0
c001947f:	09 d5                	or     ebp,edx
c0019481:	89 ea                	mov    edx,ebp
c0019483:	89 cd                	mov    ebp,ecx
c0019485:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001948b:	c1 ed 0c             	shr    ebp,0xc
c001948e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019494:	83 e5 03             	and    ebp,0x3
c0019497:	83 e2 cf             	and    edx,0xffffffcf
c001949a:	c1 e5 04             	shl    ebp,0x4
c001949d:	09 d5                	or     ebp,edx
c001949f:	3c 06                	cmp    al,0x6
c00194a1:	89 ea                	mov    edx,ebp
c00194a3:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00194a9:	74 04                	je     c00194af <CPU::detectFeatures()+0x557>
c00194ab:	3c 0f                	cmp    al,0xf
c00194ad:	75 5c                	jne    c001950b <CPU::detectFeatures()+0x5b3>
c00194af:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00194b3:	89 cd                	mov    ebp,ecx
c00194b5:	c1 ed 10             	shr    ebp,0x10
c00194b8:	c1 e5 04             	shl    ebp,0x4
c00194bb:	09 ea                	or     edx,ebp
c00194bd:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00194c3:	0f b6 d2             	movzx  edx,dl
c00194c6:	66 81 e5 3f c0       	and    bp,0xc03f
c00194cb:	c1 e2 06             	shl    edx,0x6
c00194ce:	09 ea                	or     edx,ebp
c00194d0:	3c 0f                	cmp    al,0xf
c00194d2:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00194d9:	75 30                	jne    c001950b <CPU::detectFeatures()+0x5b3>
c00194db:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00194e1:	c1 e9 14             	shr    ecx,0x14
c00194e4:	83 e0 3f             	and    eax,0x3f
c00194e7:	83 c1 0f             	add    ecx,0xf
c00194ea:	88 ca                	mov    dl,cl
c00194ec:	c0 e9 02             	shr    cl,0x2
c00194ef:	c1 e2 06             	shl    edx,0x6
c00194f2:	09 d0                	or     eax,edx
c00194f4:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00194fa:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019500:	83 e0 c0             	and    eax,0xffffffc0
c0019503:	09 c1                	or     ecx,eax
c0019505:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001950b:	83 ec 0c             	sub    esp,0xc
c001950e:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019515:	56                   	push   esi
c0019516:	8d 44 24 28          	lea    eax,[esp+0x28]
c001951a:	50                   	push   eax
c001951b:	57                   	push   edi
c001951c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019520:	55                   	push   ebp
c0019521:	68 00 00 00 80       	push   0x80000000
c0019526:	e8 e7 f5 ff ff       	call   c0018b12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001952b:	83 c4 20             	add    esp,0x20
c001952e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019536:	8d 44 24 18          	lea    eax,[esp+0x18]
c001953a:	76 1e                	jbe    c001955a <CPU::detectFeatures()+0x602>
c001953c:	83 ec 0c             	sub    esp,0xc
c001953f:	56                   	push   esi
c0019540:	50                   	push   eax
c0019541:	57                   	push   edi
c0019542:	55                   	push   ebp
c0019543:	68 01 00 00 80       	push   0x80000001
c0019548:	e8 c5 f5 ff ff       	call   c0018b12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001954d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019557:	83 c4 20             	add    esp,0x20
c001955a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019560:	83 f8 01             	cmp    eax,0x1
c0019563:	75 6f                	jne    c00195d4 <CPU::detectFeatures()+0x67c>
c0019565:	51                   	push   ecx
c0019566:	51                   	push   ecx
c0019567:	68 d6 b6 02 c0       	push   0xc002b6d6
c001956c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019570:	56                   	push   esi
c0019571:	e8 be 72 fe ff       	call   c0000834 <strcpy>
c0019576:	5f                   	pop    edi
c0019577:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001957d:	5d                   	pop    ebp
c001957e:	66 c1 e8 06          	shr    ax,0x6
c0019582:	0f b6 c0             	movzx  eax,al
c0019585:	50                   	push   eax
c0019586:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001958c:	c1 e8 0e             	shr    eax,0xe
c001958f:	0f b6 c0             	movzx  eax,al
c0019592:	50                   	push   eax
c0019593:	e8 24 f2 ff ff       	call   c00187bc <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019598:	5a                   	pop    edx
c0019599:	59                   	pop    ecx
c001959a:	50                   	push   eax
c001959b:	56                   	push   esi
c001959c:	e8 d3 73 fe ff       	call   c0000974 <strcat>
c00195a1:	5f                   	pop    edi
c00195a2:	5d                   	pop    ebp
c00195a3:	56                   	push   esi
c00195a4:	53                   	push   ebx
c00195a5:	e8 fa ad ff ff       	call   c00143a4 <Device::setName(char const*)>
c00195aa:	58                   	pop    eax
c00195ab:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00195b1:	5a                   	pop    edx
c00195b2:	68 dd b6 02 c0       	push   0xc002b6dd
c00195b7:	50                   	push   eax
c00195b8:	e8 03 73 fe ff       	call   c00008c0 <strcmp>
c00195bd:	83 c4 10             	add    esp,0x10
c00195c0:	85 c0                	test   eax,eax
c00195c2:	0f 85 71 03 00 00    	jne    c0019939 <CPU::detectFeatures()+0x9e1>
c00195c8:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00195cf:	e9 65 03 00 00       	jmp    c0019939 <CPU::detectFeatures()+0x9e1>
c00195d4:	83 f8 02             	cmp    eax,0x2
c00195d7:	0f 85 b5 00 00 00    	jne    c0019692 <CPU::detectFeatures()+0x73a>
c00195dd:	57                   	push   edi
c00195de:	57                   	push   edi
c00195df:	68 ef b6 02 c0       	push   0xc002b6ef
c00195e4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00195e8:	56                   	push   esi
c00195e9:	e8 46 72 fe ff       	call   c0000834 <strcpy>
c00195ee:	5d                   	pop    ebp
c00195ef:	58                   	pop    eax
c00195f0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195f6:	66 c1 e8 06          	shr    ax,0x6
c00195fa:	0f b6 c0             	movzx  eax,al
c00195fd:	50                   	push   eax
c00195fe:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019604:	c1 e8 0e             	shr    eax,0xe
c0019607:	0f b6 c0             	movzx  eax,al
c001960a:	50                   	push   eax
c001960b:	e8 18 f0 ff ff       	call   c0018628 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019610:	5a                   	pop    edx
c0019611:	59                   	pop    ecx
c0019612:	50                   	push   eax
c0019613:	56                   	push   esi
c0019614:	e8 5b 73 fe ff       	call   c0000974 <strcat>
c0019619:	5f                   	pop    edi
c001961a:	5d                   	pop    ebp
c001961b:	56                   	push   esi
c001961c:	53                   	push   ebx
c001961d:	e8 82 ad ff ff       	call   c00143a4 <Device::setName(char const*)>
c0019622:	58                   	pop    eax
c0019623:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019629:	5a                   	pop    edx
c001962a:	68 f4 b6 02 c0       	push   0xc002b6f4
c001962f:	50                   	push   eax
c0019630:	e8 8b 72 fe ff       	call   c00008c0 <strcmp>
c0019635:	83 c4 10             	add    esp,0x10
c0019638:	85 c0                	test   eax,eax
c001963a:	75 20                	jne    c001965c <CPU::detectFeatures()+0x704>
c001963c:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c0019642:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019648:	a8 01                	test   al,0x1
c001964a:	74 10                	je     c001965c <CPU::detectFeatures()+0x704>
c001964c:	83 e0 fe             	and    eax,0xfffffffe
c001964f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019655:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001965c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019662:	c1 e8 0e             	shr    eax,0xe
c0019665:	3c 05                	cmp    al,0x5
c0019667:	0f 85 cc 02 00 00    	jne    c0019939 <CPU::detectFeatures()+0x9e1>
c001966d:	56                   	push   esi
c001966e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019674:	83 e0 0f             	and    eax,0xf
c0019677:	50                   	push   eax
c0019678:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001967e:	66 c1 e8 06          	shr    ax,0x6
c0019682:	0f b6 c0             	movzx  eax,al
c0019685:	50                   	push   eax
c0019686:	6a 05                	push   0x5
c0019688:	e8 11 f4 ff ff       	call   c0018a9e <CPU::AMD_K6_writeback(int, int, int)>
c001968d:	e9 1f 02 00 00       	jmp    c00198b1 <CPU::detectFeatures()+0x959>
c0019692:	8d 50 fd             	lea    edx,[eax-0x3]
c0019695:	83 fa 01             	cmp    edx,0x1
c0019698:	76 09                	jbe    c00196a3 <CPU::detectFeatures()+0x74b>
c001969a:	83 f8 06             	cmp    eax,0x6
c001969d:	0f 85 91 01 00 00    	jne    c0019834 <CPU::detectFeatures()+0x8dc>
c00196a3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00196a9:	c1 ea 0e             	shr    edx,0xe
c00196ac:	80 fa 05             	cmp    dl,0x5
c00196af:	75 7b                	jne    c001972c <CPU::detectFeatures()+0x7d4>
c00196b1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00196b7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00196bc:	66 81 fa 00 01       	cmp    dx,0x100
c00196c1:	75 0c                	jne    c00196cf <CPU::detectFeatures()+0x777>
c00196c3:	51                   	push   ecx
c00196c4:	51                   	push   ecx
c00196c5:	68 fb b6 02 c0       	push   0xc002b6fb
c00196ca:	e9 dc 01 00 00       	jmp    c00198ab <CPU::detectFeatures()+0x953>
c00196cf:	66 81 fa 00 02       	cmp    dx,0x200
c00196d4:	75 0c                	jne    c00196e2 <CPU::detectFeatures()+0x78a>
c00196d6:	52                   	push   edx
c00196d7:	52                   	push   edx
c00196d8:	68 0e b7 02 c0       	push   0xc002b70e
c00196dd:	e9 c9 01 00 00       	jmp    c00198ab <CPU::detectFeatures()+0x953>
c00196e2:	66 81 fa 40 02       	cmp    dx,0x240
c00196e7:	75 0c                	jne    c00196f5 <CPU::detectFeatures()+0x79d>
c00196e9:	50                   	push   eax
c00196ea:	50                   	push   eax
c00196eb:	68 20 b7 02 c0       	push   0xc002b720
c00196f0:	e9 b6 01 00 00       	jmp    c00198ab <CPU::detectFeatures()+0x953>
c00196f5:	83 f8 06             	cmp    eax,0x6
c00196f8:	75 0c                	jne    c0019706 <CPU::detectFeatures()+0x7ae>
c00196fa:	50                   	push   eax
c00196fb:	50                   	push   eax
c00196fc:	68 32 b7 02 c0       	push   0xc002b732
c0019701:	e9 a5 01 00 00       	jmp    c00198ab <CPU::detectFeatures()+0x953>
c0019706:	83 f8 04             	cmp    eax,0x4
c0019709:	75 0c                	jne    c0019717 <CPU::detectFeatures()+0x7bf>
c001970b:	50                   	push   eax
c001970c:	50                   	push   eax
c001970d:	68 3e b7 02 c0       	push   0xc002b73e
c0019712:	e9 94 01 00 00       	jmp    c00198ab <CPU::detectFeatures()+0x953>
c0019717:	83 f8 03             	cmp    eax,0x3
c001971a:	0f 85 19 02 00 00    	jne    c0019939 <CPU::detectFeatures()+0x9e1>
c0019720:	50                   	push   eax
c0019721:	50                   	push   eax
c0019722:	68 46 b7 02 c0       	push   0xc002b746
c0019727:	e9 7f 01 00 00       	jmp    c00198ab <CPU::detectFeatures()+0x953>
c001972c:	80 fa 06             	cmp    dl,0x6
c001972f:	0f 85 db 00 00 00    	jne    c0019810 <CPU::detectFeatures()+0x8b8>
c0019735:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001973b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019740:	66 81 fa 80 01       	cmp    dx,0x180
c0019745:	75 0c                	jne    c0019753 <CPU::detectFeatures()+0x7fb>
c0019747:	50                   	push   eax
c0019748:	50                   	push   eax
c0019749:	68 51 b7 02 c0       	push   0xc002b751
c001974e:	e9 58 01 00 00       	jmp    c00198ab <CPU::detectFeatures()+0x953>
c0019753:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019759:	66 f7 c1 80 ff       	test   cx,0xff80
c001975e:	75 0c                	jne    c001976c <CPU::detectFeatures()+0x814>
c0019760:	50                   	push   eax
c0019761:	50                   	push   eax
c0019762:	68 61 b7 02 c0       	push   0xc002b761
c0019767:	e9 3f 01 00 00       	jmp    c00198ab <CPU::detectFeatures()+0x953>
c001976c:	66 81 fa 40 02       	cmp    dx,0x240
c0019771:	75 0c                	jne    c001977f <CPU::detectFeatures()+0x827>
c0019773:	55                   	push   ebp
c0019774:	55                   	push   ebp
c0019775:	68 68 b7 02 c0       	push   0xc002b768
c001977a:	e9 2c 01 00 00       	jmp    c00198ab <CPU::detectFeatures()+0x953>
c001977f:	66 81 fa 80 02       	cmp    dx,0x280
c0019784:	75 0c                	jne    c0019792 <CPU::detectFeatures()+0x83a>
c0019786:	57                   	push   edi
c0019787:	57                   	push   edi
c0019788:	68 71 b7 02 c0       	push   0xc002b771
c001978d:	e9 19 01 00 00       	jmp    c00198ab <CPU::detectFeatures()+0x953>
c0019792:	66 81 fa 40 03       	cmp    dx,0x340
c0019797:	74 ed                	je     c0019786 <CPU::detectFeatures()+0x82e>
c0019799:	66 81 fa c0 03       	cmp    dx,0x3c0
c001979e:	75 0c                	jne    c00197ac <CPU::detectFeatures()+0x854>
c00197a0:	56                   	push   esi
c00197a1:	56                   	push   esi
c00197a2:	68 78 b7 02 c0       	push   0xc002b778
c00197a7:	e9 ff 00 00 00       	jmp    c00198ab <CPU::detectFeatures()+0x953>
c00197ac:	83 f8 06             	cmp    eax,0x6
c00197af:	0f 84 45 ff ff ff    	je     c00196fa <CPU::detectFeatures()+0x7a2>
c00197b5:	83 f8 04             	cmp    eax,0x4
c00197b8:	0f 84 4d ff ff ff    	je     c001970b <CPU::detectFeatures()+0x7b3>
c00197be:	83 f8 03             	cmp    eax,0x3
c00197c1:	0f 85 72 01 00 00    	jne    c0019939 <CPU::detectFeatures()+0x9e1>
c00197c7:	51                   	push   ecx
c00197c8:	51                   	push   ecx
c00197c9:	68 81 b7 02 c0       	push   0xc002b781
c00197ce:	53                   	push   ebx
c00197cf:	e8 d0 ab ff ff       	call   c00143a4 <Device::setName(char const*)>
c00197d4:	b1 c1                	mov    cl,0xc1
c00197d6:	88 c8                	mov    al,cl
c00197d8:	e6 22                	out    0x22,al
c00197da:	e4 23                	in     al,0x23
c00197dc:	88 c2                	mov    dl,al
c00197de:	88 c8                	mov    al,cl
c00197e0:	e6 22                	out    0x22,al
c00197e2:	88 d0                	mov    al,dl
c00197e4:	83 c8 10             	or     eax,0x10
c00197e7:	e6 23                	out    0x23,al
c00197e9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00197f0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00197f3:	89 d0                	mov    eax,edx
c00197f5:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00197fb:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00197ff:	40                   	inc    eax
c0019800:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019806:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001980b:	e9 a1 00 00 00       	jmp    c00198b1 <CPU::detectFeatures()+0x959>
c0019810:	83 f8 06             	cmp    eax,0x6
c0019813:	0f 84 e1 fe ff ff    	je     c00196fa <CPU::detectFeatures()+0x7a2>
c0019819:	83 f8 04             	cmp    eax,0x4
c001981c:	0f 84 e9 fe ff ff    	je     c001970b <CPU::detectFeatures()+0x7b3>
c0019822:	83 f8 03             	cmp    eax,0x3
c0019825:	0f 85 0e 01 00 00    	jne    c0019939 <CPU::detectFeatures()+0x9e1>
c001982b:	52                   	push   edx
c001982c:	52                   	push   edx
c001982d:	68 8c b7 02 c0       	push   0xc002b78c
c0019832:	eb 77                	jmp    c00198ab <CPU::detectFeatures()+0x953>
c0019834:	83 f8 07             	cmp    eax,0x7
c0019837:	75 09                	jne    c0019842 <CPU::detectFeatures()+0x8ea>
c0019839:	50                   	push   eax
c001983a:	50                   	push   eax
c001983b:	68 96 b7 02 c0       	push   0xc002b796
c0019840:	eb 69                	jmp    c00198ab <CPU::detectFeatures()+0x953>
c0019842:	83 f8 0a             	cmp    eax,0xa
c0019845:	75 09                	jne    c0019850 <CPU::detectFeatures()+0x8f8>
c0019847:	50                   	push   eax
c0019848:	50                   	push   eax
c0019849:	68 a1 b7 02 c0       	push   0xc002b7a1
c001984e:	eb 5b                	jmp    c00198ab <CPU::detectFeatures()+0x953>
c0019850:	83 f8 0b             	cmp    eax,0xb
c0019853:	75 09                	jne    c001985e <CPU::detectFeatures()+0x906>
c0019855:	50                   	push   eax
c0019856:	50                   	push   eax
c0019857:	68 a9 b7 02 c0       	push   0xc002b7a9
c001985c:	eb 4d                	jmp    c00198ab <CPU::detectFeatures()+0x953>
c001985e:	83 f8 08             	cmp    eax,0x8
c0019861:	75 09                	jne    c001986c <CPU::detectFeatures()+0x914>
c0019863:	50                   	push   eax
c0019864:	50                   	push   eax
c0019865:	68 b2 b7 02 c0       	push   0xc002b7b2
c001986a:	eb 3f                	jmp    c00198ab <CPU::detectFeatures()+0x953>
c001986c:	83 f8 09             	cmp    eax,0x9
c001986f:	75 09                	jne    c001987a <CPU::detectFeatures()+0x922>
c0019871:	50                   	push   eax
c0019872:	50                   	push   eax
c0019873:	68 ba b7 02 c0       	push   0xc002b7ba
c0019878:	eb 31                	jmp    c00198ab <CPU::detectFeatures()+0x953>
c001987a:	83 f8 05             	cmp    eax,0x5
c001987d:	75 09                	jne    c0019888 <CPU::detectFeatures()+0x930>
c001987f:	50                   	push   eax
c0019880:	50                   	push   eax
c0019881:	68 c2 b7 02 c0       	push   0xc002b7c2
c0019886:	eb 23                	jmp    c00198ab <CPU::detectFeatures()+0x953>
c0019888:	83 f8 0c             	cmp    eax,0xc
c001988b:	75 09                	jne    c0019896 <CPU::detectFeatures()+0x93e>
c001988d:	55                   	push   ebp
c001988e:	55                   	push   ebp
c001988f:	68 d0 b7 02 c0       	push   0xc002b7d0
c0019894:	eb 15                	jmp    c00198ab <CPU::detectFeatures()+0x953>
c0019896:	83 f8 0d             	cmp    eax,0xd
c0019899:	75 09                	jne    c00198a4 <CPU::detectFeatures()+0x94c>
c001989b:	57                   	push   edi
c001989c:	57                   	push   edi
c001989d:	68 db b7 02 c0       	push   0xc002b7db
c00198a2:	eb 07                	jmp    c00198ab <CPU::detectFeatures()+0x953>
c00198a4:	56                   	push   esi
c00198a5:	56                   	push   esi
c00198a6:	68 ef b7 02 c0       	push   0xc002b7ef
c00198ab:	53                   	push   ebx
c00198ac:	e8 f3 aa ff ff       	call   c00143a4 <Device::setName(char const*)>
c00198b1:	83 c4 10             	add    esp,0x10
c00198b4:	e9 80 00 00 00       	jmp    c0019939 <CPU::detectFeatures()+0x9e1>
c00198b9:	51                   	push   ecx
c00198ba:	51                   	push   ecx
c00198bb:	68 3b b6 02 c0       	push   0xc002b63b
c00198c0:	57                   	push   edi
c00198c1:	e8 6e 6f fe ff       	call   c0000834 <strcpy>
c00198c6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00198d0:	e8 d9 69 fe ff       	call   c00002ae <is486>
c00198d5:	83 c4 10             	add    esp,0x10
c00198d8:	85 c0                	test   eax,eax
c00198da:	74 2b                	je     c0019907 <CPU::detectFeatures()+0x9af>
c00198dc:	52                   	push   edx
c00198dd:	52                   	push   edx
c00198de:	68 fb b7 02 c0       	push   0xc002b7fb
c00198e3:	53                   	push   ebx
c00198e4:	e8 bb aa ff ff       	call   c00143a4 <Device::setName(char const*)>
c00198e9:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00198f0:	0f 20 c0             	mov    eax,cr0
c00198f3:	83 e0 14             	and    eax,0x14
c00198f6:	83 c4 10             	add    esp,0x10
c00198f9:	83 f8 04             	cmp    eax,0x4
c00198fc:	75 1f                	jne    c001991d <CPU::detectFeatures()+0x9c5>
c00198fe:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019905:	eb 32                	jmp    c0019939 <CPU::detectFeatures()+0x9e1>
c0019907:	50                   	push   eax
c0019908:	50                   	push   eax
c0019909:	68 06 b8 02 c0       	push   0xc002b806
c001990e:	53                   	push   ebx
c001990f:	e8 90 aa ff ff       	call   c00143a4 <Device::setName(char const*)>
c0019914:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001991b:	eb d3                	jmp    c00198f0 <CPU::detectFeatures()+0x998>
c001991d:	e8 67 69 fe ff       	call   c0000289 <hasLegacyFPU>
c0019922:	83 e0 01             	and    eax,0x1
c0019925:	8d 14 00             	lea    edx,[eax+eax*1]
c0019928:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001992e:	83 e0 fd             	and    eax,0xfffffffd
c0019931:	09 d0                	or     eax,edx
c0019933:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019939:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019940:	83 c4 4c             	add    esp,0x4c
c0019943:	5b                   	pop    ebx
c0019944:	5e                   	pop    esi
c0019945:	5f                   	pop    edi
c0019946:	5d                   	pop    ebp
c0019947:	c3                   	ret    

c0019948 <CPU::setupSMEP()>:
c0019948:	0f 20 e0             	mov    eax,cr4
c001994b:	0d 00 00 10 00       	or     eax,0x100000
c0019950:	0f 22 e0             	mov    cr4,eax
c0019953:	c3                   	ret    

c0019954 <CPU::setupUMIP()>:
c0019954:	0f 20 e0             	mov    eax,cr4
c0019957:	80 cc 08             	or     ah,0x8
c001995a:	0f 22 e0             	mov    cr4,eax
c001995d:	c3                   	ret    

c001995e <CPU::setupTSC()>:
c001995e:	0f 20 e0             	mov    eax,cr4
c0019961:	83 c8 04             	or     eax,0x4
c0019964:	0f 22 e0             	mov    cr4,eax
c0019967:	c3                   	ret    

c0019968 <CPU::setupLargePages()>:
c0019968:	0f 20 e0             	mov    eax,cr4
c001996b:	83 c8 10             	or     eax,0x10
c001996e:	0f 22 e0             	mov    cr4,eax
c0019971:	c3                   	ret    

c0019972 <CPU::setupPAT()>:
c0019972:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0019977:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001997e:	74 2c                	je     c00199ac <CPU::setupPAT()+0x3a>
c0019980:	53                   	push   ebx
c0019981:	83 ec 10             	sub    esp,0x10
c0019984:	68 77 02 00 00       	push   0x277
c0019989:	50                   	push   eax
c001998a:	e8 59 54 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c001998f:	83 e2 f8             	and    edx,0xfffffff8
c0019992:	83 ca 01             	or     edx,0x1
c0019995:	52                   	push   edx
c0019996:	50                   	push   eax
c0019997:	68 77 02 00 00       	push   0x277
c001999c:	ff 35 48 e2 02 c0    	push   DWORD PTR ds:0xc002e248
c00199a2:	e8 6d 54 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c00199a7:	83 c4 28             	add    esp,0x28
c00199aa:	5b                   	pop    ebx
c00199ab:	c3                   	ret    
c00199ac:	c3                   	ret    
c00199ad:	90                   	nop

c00199ae <CPU::setupMTRR()>:
c00199ae:	c3                   	ret    
c00199af:	90                   	nop

c00199b0 <CPU::setupGlobalPages()>:
c00199b0:	0f 20 e0             	mov    eax,cr4
c00199b3:	0c 80                	or     al,0x80
c00199b5:	0f 22 e0             	mov    cr4,eax
c00199b8:	c3                   	ret    
c00199b9:	90                   	nop

c00199ba <CPU::allowUsermodeDataAccess()>:
c00199ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199be:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00199c5:	74 03                	je     c00199ca <CPU::allowUsermodeDataAccess()+0x10>
c00199c7:	0f 01 cb             	stac   
c00199ca:	c3                   	ret    
c00199cb:	90                   	nop

c00199cc <CPU::prohibitUsermodeDataAccess()>:
c00199cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199d0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00199d7:	74 03                	je     c00199dc <CPU::prohibitUsermodeDataAccess()+0x10>
c00199d9:	0f 01 ca             	clac   
c00199dc:	c3                   	ret    
c00199dd:	90                   	nop

c00199de <CPU::setupSMAP()>:
c00199de:	0f 20 e0             	mov    eax,cr4
c00199e1:	0d 00 00 20 00       	or     eax,0x200000
c00199e6:	0f 22 e0             	mov    cr4,eax
c00199e9:	eb e1                	jmp    c00199cc <CPU::prohibitUsermodeDataAccess()>
c00199eb:	90                   	nop

c00199ec <CPU::setupFeatures()>:
c00199ec:	83 ec 0c             	sub    esp,0xc
c00199ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00199f3:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00199fa:	74 07                	je     c0019a03 <CPU::setupFeatures()+0x17>
c00199fc:	52                   	push   edx
c00199fd:	e8 46 ff ff ff       	call   c0019948 <CPU::setupSMEP()>
c0019a02:	58                   	pop    eax
c0019a03:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019a0a:	74 07                	je     c0019a13 <CPU::setupFeatures()+0x27>
c0019a0c:	52                   	push   edx
c0019a0d:	e8 cc ff ff ff       	call   c00199de <CPU::setupSMAP()>
c0019a12:	58                   	pop    eax
c0019a13:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019a1a:	74 07                	je     c0019a23 <CPU::setupFeatures()+0x37>
c0019a1c:	52                   	push   edx
c0019a1d:	e8 32 ff ff ff       	call   c0019954 <CPU::setupUMIP()>
c0019a22:	58                   	pop    eax
c0019a23:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019a2a:	74 07                	je     c0019a33 <CPU::setupFeatures()+0x47>
c0019a2c:	52                   	push   edx
c0019a2d:	e8 2c ff ff ff       	call   c001995e <CPU::setupTSC()>
c0019a32:	58                   	pop    eax
c0019a33:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019a3a:	74 07                	je     c0019a43 <CPU::setupFeatures()+0x57>
c0019a3c:	52                   	push   edx
c0019a3d:	e8 26 ff ff ff       	call   c0019968 <CPU::setupLargePages()>
c0019a42:	59                   	pop    ecx
c0019a43:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019a4a:	74 07                	je     c0019a53 <CPU::setupFeatures()+0x67>
c0019a4c:	52                   	push   edx
c0019a4d:	e8 5e ff ff ff       	call   c00199b0 <CPU::setupGlobalPages()>
c0019a52:	58                   	pop    eax
c0019a53:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019a5a:	74 0c                	je     c0019a68 <CPU::setupFeatures()+0x7c>
c0019a5c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019a60:	83 c4 0c             	add    esp,0xc
c0019a63:	e9 0a ff ff ff       	jmp    c0019972 <CPU::setupPAT()>
c0019a68:	83 c4 0c             	add    esp,0xc
c0019a6b:	c3                   	ret    

c0019a6c <CPU::open(int, int, void*)>:
c0019a6c:	57                   	push   edi
c0019a6d:	56                   	push   esi
c0019a6e:	53                   	push   ebx
c0019a6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019a73:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019a77:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019a7d:	83 ec 0c             	sub    esp,0xc
c0019a80:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019a86:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019a8c:	50                   	push   eax
c0019a8d:	e8 42 56 ff ff       	call   c000f0d4 <GDT::setup()>
c0019a92:	83 c4 0c             	add    esp,0xc
c0019a95:	6a 00                	push   0x0
c0019a97:	68 ef be ad de       	push   0xdeadbeef
c0019a9c:	57                   	push   edi
c0019a9d:	e8 0e 7a ff ff       	call   c00114b0 <TSS::setup(unsigned long, unsigned long)>
c0019aa2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019aa5:	e8 e6 79 ff ff       	call   c0011490 <TSS::flush()>
c0019aaa:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ab3:	e8 78 58 ff ff       	call   c000f330 <IDT::setup()>
c0019ab8:	b8 00 04 00 00       	mov    eax,0x400
c0019abd:	0f 23 f8             	mov    db7,eax
c0019ac0:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019aca:	e8 11 64 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0019acf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019ad5:	89 30                	mov    DWORD PTR [eax],esi
c0019ad7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019add:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019ae0:	58                   	pop    eax
c0019ae1:	5a                   	pop    edx
c0019ae2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ae8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019aec:	e8 ef 89 ff ff       	call   c00124e0 <VAS::setCPUSpecific(unsigned long)>
c0019af1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019af4:	e8 5f f4 ff ff       	call   c0018f58 <CPU::detectFeatures()>
c0019af9:	e8 94 bc ff ff       	call   c0015792 <setupInterruptController()>
c0019afe:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019b04:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c0019b09:	83 e0 10             	and    eax,0x10
c0019b0c:	83 f8 01             	cmp    eax,0x1
c0019b0f:	19 c0                	sbb    eax,eax
c0019b11:	83 e0 46             	and    eax,0x46
c0019b14:	83 c0 1e             	add    eax,0x1e
c0019b17:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b1a:	e8 b7 d1 ff ff       	call   c0016cd6 <setupTimer(int)>
c0019b1f:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019b25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b28:	e8 bf fe ff ff       	call   c00199ec <CPU::setupFeatures()>
c0019b2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b30:	e8 a7 f1 ff ff       	call   c0018cdc <CPU::displayFeatures()>
c0019b35:	83 c4 10             	add    esp,0x10
c0019b38:	31 c0                	xor    eax,eax
c0019b3a:	5b                   	pop    ebx
c0019b3b:	5e                   	pop    esi
c0019b3c:	5f                   	pop    edi
c0019b3d:	c3                   	ret    

c0019b3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019b3e:	57                   	push   edi
c0019b3f:	56                   	push   esi
c0019b40:	53                   	push   ebx
c0019b41:	51                   	push   ecx
c0019b42:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019b46:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019b49:	0f 02 c0             	lar    eax,ax
c0019b4c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019b4f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b53:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019b56:	88 ca                	mov    dl,cl
c0019b58:	c0 ea 06             	shr    dl,0x6
c0019b5b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019b5f:	89 ca                	mov    edx,ecx
c0019b61:	66 c1 ea 03          	shr    dx,0x3
c0019b65:	83 e2 07             	and    edx,0x7
c0019b68:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019b6d:	88 17                	mov    BYTE PTR [edi],dl
c0019b6f:	0f 84 a6 01 00 00    	je     c0019d1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019b75:	83 e1 07             	and    ecx,0x7
c0019b78:	80 f9 04             	cmp    cl,0x4
c0019b7b:	0f 84 98 00 00 00    	je     c0019c19 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019b81:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019b86:	0f 95 c0             	setne  al
c0019b89:	80 f9 05             	cmp    cl,0x5
c0019b8c:	0f 95 c2             	setne  dl
c0019b8f:	08 c2                	or     dl,al
c0019b91:	74 79                	je     c0019c0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019b93:	84 c9                	test   cl,cl
c0019b95:	75 05                	jne    c0019b9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019b97:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019b9a:	eb 3c                	jmp    c0019bd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b9c:	80 f9 01             	cmp    cl,0x1
c0019b9f:	75 05                	jne    c0019ba6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019ba1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ba4:	eb 32                	jmp    c0019bd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ba6:	80 f9 02             	cmp    cl,0x2
c0019ba9:	75 05                	jne    c0019bb0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019bab:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019bae:	eb 28                	jmp    c0019bd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bb0:	31 c0                	xor    eax,eax
c0019bb2:	80 f9 03             	cmp    cl,0x3
c0019bb5:	75 05                	jne    c0019bbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019bb7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019bba:	eb 1c                	jmp    c0019bd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bbc:	80 f9 05             	cmp    cl,0x5
c0019bbf:	75 05                	jne    c0019bc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019bc1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019bc4:	eb 12                	jmp    c0019bd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bc6:	80 f9 06             	cmp    cl,0x6
c0019bc9:	75 05                	jne    c0019bd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019bcb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019bce:	eb 08                	jmp    c0019bd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bd0:	80 f9 07             	cmp    cl,0x7
c0019bd3:	75 03                	jne    c0019bd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bd5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019bd8:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019bdd:	75 10                	jne    c0019bef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019bdf:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019be3:	b9 03 00 00 00       	mov    ecx,0x3
c0019be8:	01 d0                	add    eax,edx
c0019bea:	e9 37 01 00 00       	jmp    c0019d26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019bef:	b9 02 00 00 00       	mov    ecx,0x2
c0019bf4:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019bf9:	0f 85 27 01 00 00    	jne    c0019d26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019bff:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019c02:	b9 06 00 00 00       	mov    ecx,0x6
c0019c07:	e9 1a 01 00 00       	jmp    c0019d26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c0c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019c0f:	b9 06 00 00 00       	mov    ecx,0x6
c0019c14:	e9 0f 01 00 00       	jmp    c0019d28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c19:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019c1c:	88 ca                	mov    dl,cl
c0019c1e:	c0 ea 06             	shr    dl,0x6
c0019c21:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019c25:	89 ca                	mov    edx,ecx
c0019c27:	66 c1 ea 03          	shr    dx,0x3
c0019c2b:	83 e2 07             	and    edx,0x7
c0019c2e:	80 e1 07             	and    cl,0x7
c0019c31:	75 05                	jne    c0019c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019c33:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019c36:	eb 4c                	jmp    c0019c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c38:	80 f9 01             	cmp    cl,0x1
c0019c3b:	75 05                	jne    c0019c42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019c3d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019c40:	eb 42                	jmp    c0019c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c42:	80 f9 02             	cmp    cl,0x2
c0019c45:	75 05                	jne    c0019c4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019c47:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019c4a:	eb 38                	jmp    c0019c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c4c:	80 f9 03             	cmp    cl,0x3
c0019c4f:	75 05                	jne    c0019c56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019c51:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019c54:	eb 2e                	jmp    c0019c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c56:	80 f9 04             	cmp    cl,0x4
c0019c59:	75 12                	jne    c0019c6d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019c5b:	f6 c4 60             	test   ah,0x60
c0019c5e:	75 08                	jne    c0019c68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019c60:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019c63:	8d 78 14             	lea    edi,[eax+0x14]
c0019c66:	eb 1c                	jmp    c0019c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c68:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019c6b:	eb 17                	jmp    c0019c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c6d:	80 f9 05             	cmp    cl,0x5
c0019c70:	75 05                	jne    c0019c77 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019c72:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019c75:	eb 0d                	jmp    c0019c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c77:	80 f9 06             	cmp    cl,0x6
c0019c7a:	75 05                	jne    c0019c81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019c7c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019c7f:	eb 03                	jmp    c0019c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c81:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019c84:	84 d2                	test   dl,dl
c0019c86:	75 05                	jne    c0019c8d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019c88:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019c8b:	eb 3c                	jmp    c0019cc9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c8d:	80 fa 01             	cmp    dl,0x1
c0019c90:	75 05                	jne    c0019c97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019c92:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019c95:	eb 32                	jmp    c0019cc9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c97:	80 fa 02             	cmp    dl,0x2
c0019c9a:	75 05                	jne    c0019ca1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019c9c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019c9f:	eb 28                	jmp    c0019cc9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ca1:	80 fa 03             	cmp    dl,0x3
c0019ca4:	75 05                	jne    c0019cab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019ca6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019ca9:	eb 1e                	jmp    c0019cc9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cab:	31 c0                	xor    eax,eax
c0019cad:	80 fa 04             	cmp    dl,0x4
c0019cb0:	74 17                	je     c0019cc9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cb2:	80 fa 05             	cmp    dl,0x5
c0019cb5:	75 05                	jne    c0019cbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019cb7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019cba:	eb 0d                	jmp    c0019cc9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cbc:	80 fa 06             	cmp    dl,0x6
c0019cbf:	75 05                	jne    c0019cc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019cc1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019cc4:	eb 03                	jmp    c0019cc9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cc6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019cc9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019cce:	0f 94 c2             	sete   dl
c0019cd1:	80 f9 05             	cmp    cl,0x5
c0019cd4:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019cd8:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019cdd:	d3 e0                	shl    eax,cl
c0019cdf:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019ce3:	74 0a                	je     c0019cef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019ce5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ce8:	b9 07 00 00 00       	mov    ecx,0x7
c0019ced:	eb 37                	jmp    c0019d26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019cef:	01 f8                	add    eax,edi
c0019cf1:	b9 03 00 00 00       	mov    ecx,0x3
c0019cf6:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019cfb:	74 2b                	je     c0019d28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019cfd:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d02:	75 0d                	jne    c0019d11 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019d04:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019d08:	01 c8                	add    eax,ecx
c0019d0a:	b9 04 00 00 00       	mov    ecx,0x4
c0019d0f:	eb 17                	jmp    c0019d28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d11:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019d14:	b9 07 00 00 00       	mov    ecx,0x7
c0019d19:	eb 0d                	jmp    c0019d28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d1b:	b9 02 00 00 00       	mov    ecx,0x2
c0019d20:	b2 01                	mov    dl,0x1
c0019d22:	31 c0                	xor    eax,eax
c0019d24:	eb 02                	jmp    c0019d28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d26:	31 d2                	xor    edx,edx
c0019d28:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019d2c:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019d2e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d32:	88 11                	mov    BYTE PTR [ecx],dl
c0019d34:	5a                   	pop    edx
c0019d35:	5b                   	pop    ebx
c0019d36:	5e                   	pop    esi
c0019d37:	5f                   	pop    edi
c0019d38:	c3                   	ret    

c0019d39 <Krnl::smpEntry()>:
c0019d39:	eb fe                	jmp    c0019d39 <Krnl::smpEntry()>

c0019d3b <Krnl::startCPU(int)>:
c0019d3b:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0019d40:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019d47:	0f 84 36 01 00 00    	je     c0019e83 <Krnl::startCPU(int)+0x148>
c0019d4d:	53                   	push   ebx
c0019d4e:	83 ec 08             	sub    esp,0x8
c0019d51:	e8 1b 3f 00 00       	call   c001dc71 <lockScheduler()>
c0019d56:	52                   	push   edx
c0019d57:	52                   	push   edx
c0019d58:	6a 1b                	push   0x1b
c0019d5a:	ff 35 48 e2 02 c0    	push   DWORD PTR ds:0xc002e248
c0019d60:	e8 83 50 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019d65:	59                   	pop    ecx
c0019d66:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019d6b:	89 c3                	mov    ebx,eax
c0019d6d:	58                   	pop    eax
c0019d6e:	53                   	push   ebx
c0019d6f:	68 40 b8 02 c0       	push   0xc002b840
c0019d74:	e8 23 90 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0019d79:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d87:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d91:	c1 e0 18             	shl    eax,0x18
c0019d94:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019d9a:	83 c4 10             	add    esp,0x10
c0019d9d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019da3:	09 c2                	or     edx,eax
c0019da5:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019dab:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019db1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019db7:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019dbd:	80 cd c5             	or     ch,0xc5
c0019dc0:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019dc6:	f3 90                	pause  
c0019dc8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019dca:	0f ba e1 0c          	bt     ecx,0xc
c0019dce:	72 f6                	jb     c0019dc6 <Krnl::startCPU(int)+0x8b>
c0019dd0:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019dd6:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ddc:	09 c1                	or     ecx,eax
c0019dde:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019de4:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019dea:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019df0:	80 cd 85             	or     ch,0x85
c0019df3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019df9:	f3 90                	pause  
c0019dfb:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019dfd:	0f ba e1 0c          	bt     ecx,0xc
c0019e01:	72 f6                	jb     c0019df9 <Krnl::startCPU(int)+0xbe>
c0019e03:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e0d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e13:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e19:	09 c1                	or     ecx,eax
c0019e1b:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019e21:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019e27:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019e2d:	81 c9 02 06 00 00    	or     ecx,0x602
c0019e33:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019e39:	f3 90                	pause  
c0019e3b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e3d:	0f ba e1 0c          	bt     ecx,0xc
c0019e41:	72 f6                	jb     c0019e39 <Krnl::startCPU(int)+0xfe>
c0019e43:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e4d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e53:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e59:	09 c8                	or     eax,ecx
c0019e5b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019e61:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019e67:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019e6c:	0d 02 06 00 00       	or     eax,0x602
c0019e71:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019e77:	f3 90                	pause  
c0019e79:	8b 02                	mov    eax,DWORD PTR [edx]
c0019e7b:	0f ba e0 0c          	bt     eax,0xc
c0019e7f:	72 f6                	jb     c0019e77 <Krnl::startCPU(int)+0x13c>
c0019e81:	eb fe                	jmp    c0019e81 <Krnl::startCPU(int)+0x146>
c0019e83:	c3                   	ret    

c0019e84 <Krnl::startCPUs()>:
c0019e84:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0019e89:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019e8f:	88 c2                	mov    dl,al
c0019e91:	83 e2 0a             	and    edx,0xa
c0019e94:	80 fa 0a             	cmp    dl,0xa
c0019e97:	75 09                	jne    c0019ea2 <Krnl::startCPUs()+0x1e>
c0019e99:	a8 01                	test   al,0x1
c0019e9b:	74 05                	je     c0019ea2 <Krnl::startCPUs()+0x1e>
c0019e9d:	e9 f9 62 fe ff       	jmp    c000019b <prepareTramp>
c0019ea2:	c3                   	ret    
c0019ea3:	90                   	nop

c0019ea4 <EnvVarContainer::getEnv(char const*)>:
c0019ea4:	57                   	push   edi
c0019ea5:	56                   	push   esi
c0019ea6:	53                   	push   ebx
c0019ea7:	31 db                	xor    ebx,ebx
c0019ea9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ead:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019eaf:	7e 2b                	jle    c0019edc <EnvVarContainer::getEnv(char const*)+0x38>
c0019eb1:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019eb8:	50                   	push   eax
c0019eb9:	50                   	push   eax
c0019eba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019ebd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019ec0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019ec4:	e8 f7 69 fe ff       	call   c00008c0 <strcmp>
c0019ec9:	83 c4 10             	add    esp,0x10
c0019ecc:	85 c0                	test   eax,eax
c0019ece:	75 09                	jne    c0019ed9 <EnvVarContainer::getEnv(char const*)+0x35>
c0019ed0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019ed3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019ed7:	eb 05                	jmp    c0019ede <EnvVarContainer::getEnv(char const*)+0x3a>
c0019ed9:	43                   	inc    ebx
c0019eda:	eb d1                	jmp    c0019ead <EnvVarContainer::getEnv(char const*)+0x9>
c0019edc:	31 c0                	xor    eax,eax
c0019ede:	5b                   	pop    ebx
c0019edf:	5e                   	pop    esi
c0019ee0:	5f                   	pop    edi
c0019ee1:	c3                   	ret    

c0019ee2 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019ee2:	57                   	push   edi
c0019ee3:	56                   	push   esi
c0019ee4:	53                   	push   ebx
c0019ee5:	83 ec 1c             	sub    esp,0x1c
c0019ee8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019eec:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019ef0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019ef4:	57                   	push   edi
c0019ef5:	e8 9a 68 fe ff       	call   c0000794 <strlen>
c0019efa:	40                   	inc    eax
c0019efb:	89 04 24             	mov    DWORD PTR [esp],eax
c0019efe:	e8 40 59 ff ff       	call   c000f843 <malloc>
c0019f03:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019f0a:	e8 85 68 fe ff       	call   c0000794 <strlen>
c0019f0f:	40                   	inc    eax
c0019f10:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f13:	e8 2b 59 ff ff       	call   c000f843 <malloc>
c0019f18:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019f1f:	e8 70 68 fe ff       	call   c0000794 <strlen>
c0019f24:	83 c4 0c             	add    esp,0xc
c0019f27:	40                   	inc    eax
c0019f28:	50                   	push   eax
c0019f29:	6a 00                	push   0x0
c0019f2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019f2f:	e8 44 68 fe ff       	call   c0000778 <memset>
c0019f34:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f37:	e8 58 68 fe ff       	call   c0000794 <strlen>
c0019f3c:	83 c4 0c             	add    esp,0xc
c0019f3f:	40                   	inc    eax
c0019f40:	50                   	push   eax
c0019f41:	57                   	push   edi
c0019f42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019f46:	e8 f9 67 fe ff       	call   c0000744 <memcpy>
c0019f4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f4e:	e8 41 68 fe ff       	call   c0000794 <strlen>
c0019f53:	83 c4 0c             	add    esp,0xc
c0019f56:	40                   	inc    eax
c0019f57:	50                   	push   eax
c0019f58:	6a 00                	push   0x0
c0019f5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f5e:	e8 15 68 fe ff       	call   c0000778 <memset>
c0019f63:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f66:	e8 29 68 fe ff       	call   c0000794 <strlen>
c0019f6b:	83 c4 0c             	add    esp,0xc
c0019f6e:	40                   	inc    eax
c0019f6f:	50                   	push   eax
c0019f70:	56                   	push   esi
c0019f71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f75:	e8 ca 67 fe ff       	call   c0000744 <memcpy>
c0019f7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f7c:	40                   	inc    eax
c0019f7d:	89 03                	mov    DWORD PTR [ebx],eax
c0019f7f:	c1 e0 03             	shl    eax,0x3
c0019f82:	5a                   	pop    edx
c0019f83:	59                   	pop    ecx
c0019f84:	50                   	push   eax
c0019f85:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019f88:	e8 a2 58 ff ff       	call   c000f82f <realloc>
c0019f8d:	83 c4 0c             	add    esp,0xc
c0019f90:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019f93:	6a 08                	push   0x8
c0019f95:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019f99:	52                   	push   edx
c0019f9a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019f9c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019fa0:	50                   	push   eax
c0019fa1:	e8 9e 67 fe ff       	call   c0000744 <memcpy>
c0019fa6:	83 c4 20             	add    esp,0x20
c0019fa9:	5b                   	pop    ebx
c0019faa:	5e                   	pop    esi
c0019fab:	5f                   	pop    edi
c0019fac:	c3                   	ret    
c0019fad:	90                   	nop

c0019fae <EnvVarContainer::deleteEnv(char const*)>:
c0019fae:	c3                   	ret    
c0019faf:	90                   	nop

c0019fb0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019fb0:	55                   	push   ebp
c0019fb1:	57                   	push   edi
c0019fb2:	56                   	push   esi
c0019fb3:	53                   	push   ebx
c0019fb4:	81 ec 38 01 00 00    	sub    esp,0x138
c0019fba:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019fc1:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019fc8:	68 14 01 00 00       	push   0x114
c0019fcd:	e8 71 58 ff ff       	call   c000f843 <malloc>
c0019fd2:	83 c4 0c             	add    esp,0xc
c0019fd5:	89 c7                	mov    edi,eax
c0019fd7:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019fda:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019fe1:	50                   	push   eax
c0019fe2:	e8 0d 93 ff ff       	call   c00132f4 <File::File(char const*, Process*)>
c0019fe7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019fea:	e8 d7 95 ff ff       	call   c00135c6 <File::exists()>
c0019fef:	83 c4 10             	add    esp,0x10
c0019ff2:	84 c0                	test   al,al
c0019ff4:	75 31                	jne    c001a027 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019ff6:	51                   	push   ecx
c0019ff7:	51                   	push   ecx
c0019ff8:	6a 12                	push   0x12
c0019ffa:	57                   	push   edi
c0019ffb:	e8 58 93 ff ff       	call   c0013358 <File::open(FileOpenMode)>
c001a000:	8b 07                	mov    eax,DWORD PTR [edi]
c001a002:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a005:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a008:	e8 87 67 fe ff       	call   c0000794 <strlen>
c001a00d:	5a                   	pop    edx
c001a00e:	31 d2                	xor    edx,edx
c001a010:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a014:	51                   	push   ecx
c001a015:	55                   	push   ebp
c001a016:	52                   	push   edx
c001a017:	50                   	push   eax
c001a018:	57                   	push   edi
c001a019:	ff d3                	call   ebx
c001a01b:	83 c4 14             	add    esp,0x14
c001a01e:	57                   	push   edi
c001a01f:	e8 92 93 ff ff       	call   c00133b6 <File::close()>
c001a024:	83 c4 10             	add    esp,0x10
c001a027:	31 db                	xor    ebx,ebx
c001a029:	50                   	push   eax
c001a02a:	31 ed                	xor    ebp,ebp
c001a02c:	68 00 01 00 00       	push   0x100
c001a031:	6a 00                	push   0x0
c001a033:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a037:	50                   	push   eax
c001a038:	e8 3b 67 fe ff       	call   c0000778 <memset>
c001a03d:	58                   	pop    eax
c001a03e:	5a                   	pop    edx
c001a03f:	6a 01                	push   0x1
c001a041:	57                   	push   edi
c001a042:	e8 11 93 ff ff       	call   c0013358 <File::open(FileOpenMode)>
c001a047:	83 c4 10             	add    esp,0x10
c001a04a:	83 ec 0c             	sub    esp,0xc
c001a04d:	8b 07                	mov    eax,DWORD PTR [edi]
c001a04f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a053:	51                   	push   ecx
c001a054:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a058:	52                   	push   edx
c001a059:	6a 00                	push   0x0
c001a05b:	6a 01                	push   0x1
c001a05d:	57                   	push   edi
c001a05e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a061:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a065:	83 c4 20             	add    esp,0x20
c001a068:	3c 0d                	cmp    al,0xd
c001a06a:	0f 84 12 01 00 00    	je     c001a182 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a070:	85 db                	test   ebx,ebx
c001a072:	0f 84 fd 00 00 00    	je     c001a175 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a078:	3c 0a                	cmp    al,0xa
c001a07a:	74 13                	je     c001a08f <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a07c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a081:	74 0c                	je     c001a08f <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a083:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a089:	0f 8e e6 00 00 00    	jle    c001a175 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a08f:	83 ec 0c             	sub    esp,0xc
c001a092:	8d 53 01             	lea    edx,[ebx+0x1]
c001a095:	29 dd                	sub    ebp,ebx
c001a097:	52                   	push   edx
c001a098:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a09c:	e8 a2 57 ff ff       	call   c000f843 <malloc>
c001a0a1:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a0a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a0a8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a0ab:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a0af:	e8 8f 57 ff ff       	call   c000f843 <malloc>
c001a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a0b8:	83 c4 0c             	add    esp,0xc
c001a0bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a0bf:	52                   	push   edx
c001a0c0:	6a 00                	push   0x0
c001a0c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a0c6:	e8 ad 66 fe ff       	call   c0000778 <memset>
c001a0cb:	83 c4 0c             	add    esp,0xc
c001a0ce:	53                   	push   ebx
c001a0cf:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a0d3:	55                   	push   ebp
c001a0d4:	01 eb                	add    ebx,ebp
c001a0d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a0da:	e8 65 66 fe ff       	call   c0000744 <memcpy>
c001a0df:	83 c4 0c             	add    esp,0xc
c001a0e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a0e6:	51                   	push   ecx
c001a0e7:	6a 00                	push   0x0
c001a0e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a0ed:	e8 86 66 fe ff       	call   c0000778 <memset>
c001a0f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0f5:	e8 9a 66 fe ff       	call   c0000794 <strlen>
c001a0fa:	83 c4 0c             	add    esp,0xc
c001a0fd:	50                   	push   eax
c001a0fe:	53                   	push   ebx
c001a0ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a103:	e8 3c 66 fe ff       	call   c0000744 <memcpy>
c001a108:	5b                   	pop    ebx
c001a109:	58                   	pop    eax
c001a10a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a10e:	68 51 b8 02 c0       	push   0xc002b851
c001a113:	e8 84 8c ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001a118:	8b 06                	mov    eax,DWORD PTR [esi]
c001a11a:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a11d:	40                   	inc    eax
c001a11e:	83 c4 10             	add    esp,0x10
c001a121:	89 06                	mov    DWORD PTR [esi],eax
c001a123:	85 d2                	test   edx,edx
c001a125:	75 0c                	jne    c001a133 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a127:	83 ec 0c             	sub    esp,0xc
c001a12a:	6a 08                	push   0x8
c001a12c:	e8 12 57 ff ff       	call   c000f843 <malloc>
c001a131:	eb 0c                	jmp    c001a13f <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a133:	c1 e0 03             	shl    eax,0x3
c001a136:	51                   	push   ecx
c001a137:	51                   	push   ecx
c001a138:	50                   	push   eax
c001a139:	52                   	push   edx
c001a13a:	e8 f0 56 ff ff       	call   c000f82f <realloc>
c001a13f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a142:	83 c4 10             	add    esp,0x10
c001a145:	31 db                	xor    ebx,ebx
c001a147:	52                   	push   edx
c001a148:	6a 08                	push   0x8
c001a14a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a14e:	50                   	push   eax
c001a14f:	8b 16                	mov    edx,DWORD PTR [esi]
c001a151:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a154:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a158:	50                   	push   eax
c001a159:	e8 e6 65 fe ff       	call   c0000744 <memcpy>
c001a15e:	83 c4 0c             	add    esp,0xc
c001a161:	68 00 01 00 00       	push   0x100
c001a166:	6a 00                	push   0x0
c001a168:	55                   	push   ebp
c001a169:	31 ed                	xor    ebp,ebp
c001a16b:	e8 08 66 fe ff       	call   c0000778 <memset>
c001a170:	83 c4 10             	add    esp,0x10
c001a173:	eb 0d                	jmp    c001a182 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a175:	3c 3d                	cmp    al,0x3d
c001a177:	74 07                	je     c001a180 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a179:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a17d:	45                   	inc    ebp
c001a17e:	eb 02                	jmp    c001a182 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a180:	89 eb                	mov    ebx,ebp
c001a182:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a187:	0f 85 bd fe ff ff    	jne    c001a04a <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a18d:	50                   	push   eax
c001a18e:	50                   	push   eax
c001a18f:	ff 36                	push   DWORD PTR [esi]
c001a191:	68 5f b8 02 c0       	push   0xc002b85f
c001a196:	e8 01 8c ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001a19b:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a1a1:	5b                   	pop    ebx
c001a1a2:	5e                   	pop    esi
c001a1a3:	5f                   	pop    edi
c001a1a4:	5d                   	pop    ebp
c001a1a5:	c3                   	ret    

c001a1a6 <EnvVarContainer::__loadSystem()>:
c001a1a6:	83 ec 10             	sub    esp,0x10
c001a1a9:	68 80 d7 02 c0       	push   0xc002d780
c001a1ae:	68 8a b8 02 c0       	push   0xc002b88a
c001a1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a1b7:	e8 f4 fd ff ff       	call   c0019fb0 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a1bc:	83 c4 1c             	add    esp,0x1c
c001a1bf:	c3                   	ret    

c001a1c0 <EnvVarContainer::__loadUser()>:
c001a1c0:	c3                   	ret    
c001a1c1:	90                   	nop

c001a1c2 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a1c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a1cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1d4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a1d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a1e2:	90                   	nop
c001a1e3:	c3                   	ret    

c001a1e4 <EnvVarContainer::~EnvVarContainer()>:
c001a1e4:	83 ec 0c             	sub    esp,0xc
c001a1e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a1ee:	85 c0                	test   eax,eax
c001a1f0:	74 1d                	je     c001a20f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1f8:	85 c0                	test   eax,eax
c001a1fa:	74 13                	je     c001a20f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a200:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a203:	83 ec 0c             	sub    esp,0xc
c001a206:	50                   	push   eax
c001a207:	e8 47 56 ff ff       	call   c000f853 <free>
c001a20c:	83 c4 10             	add    esp,0x10
c001a20f:	90                   	nop
c001a210:	83 c4 0c             	add    esp,0xc
c001a213:	c3                   	ret    

c001a214 <Krnl::getEnv(Process*, char const*)>:
c001a214:	53                   	push   ebx
c001a215:	83 ec 08             	sub    esp,0x8
c001a218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a21c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a220:	39 05 b4 17 03 c0    	cmp    DWORD PTR ds:0xc00317b4,eax
c001a226:	74 04                	je     c001a22c <Krnl::getEnv(Process*, char const*)+0x18>
c001a228:	85 c0                	test   eax,eax
c001a22a:	75 0b                	jne    c001a237 <Krnl::getEnv(Process*, char const*)+0x23>
c001a22c:	a1 94 0d 03 c0       	mov    eax,ds:0xc0030d94
c001a231:	85 c0                	test   eax,eax
c001a233:	75 19                	jne    c001a24e <Krnl::getEnv(Process*, char const*)+0x3a>
c001a235:	eb 27                	jmp    c001a25e <Krnl::getEnv(Process*, char const*)+0x4a>
c001a237:	52                   	push   edx
c001a238:	52                   	push   edx
c001a239:	53                   	push   ebx
c001a23a:	ff b0 3a 1b 00 00    	push   DWORD PTR [eax+0x1b3a]
c001a240:	e8 5f fc ff ff       	call   c0019ea4 <EnvVarContainer::getEnv(char const*)>
c001a245:	83 c4 10             	add    esp,0x10
c001a248:	85 c0                	test   eax,eax
c001a24a:	75 28                	jne    c001a274 <Krnl::getEnv(Process*, char const*)+0x60>
c001a24c:	eb de                	jmp    c001a22c <Krnl::getEnv(Process*, char const*)+0x18>
c001a24e:	52                   	push   edx
c001a24f:	52                   	push   edx
c001a250:	53                   	push   ebx
c001a251:	50                   	push   eax
c001a252:	e8 4d fc ff ff       	call   c0019ea4 <EnvVarContainer::getEnv(char const*)>
c001a257:	83 c4 10             	add    esp,0x10
c001a25a:	85 c0                	test   eax,eax
c001a25c:	75 16                	jne    c001a274 <Krnl::getEnv(Process*, char const*)+0x60>
c001a25e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a262:	a1 98 0d 03 c0       	mov    eax,ds:0xc0030d98
c001a267:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a26b:	83 c4 08             	add    esp,0x8
c001a26e:	5b                   	pop    ebx
c001a26f:	e9 30 fc ff ff       	jmp    c0019ea4 <EnvVarContainer::getEnv(char const*)>
c001a274:	83 c4 08             	add    esp,0x8
c001a277:	5b                   	pop    ebx
c001a278:	c3                   	ret    

c001a279 <Krnl::setEnvSystem(char const*, char const*)>:
c001a279:	83 ec 10             	sub    esp,0x10
c001a27c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a280:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a284:	ff 35 98 0d 03 c0    	push   DWORD PTR ds:0xc0030d98
c001a28a:	e8 53 fc ff ff       	call   c0019ee2 <EnvVarContainer::setEnv(char const*, char const*)>
c001a28f:	83 c4 1c             	add    esp,0x1c
c001a292:	c3                   	ret    

c001a293 <Krnl::setEnvUser(char const*, char const*)>:
c001a293:	a1 94 0d 03 c0       	mov    eax,ds:0xc0030d94
c001a298:	85 c0                	test   eax,eax
c001a29a:	74 15                	je     c001a2b1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a29c:	83 ec 10             	sub    esp,0x10
c001a29f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2a7:	50                   	push   eax
c001a2a8:	e8 35 fc ff ff       	call   c0019ee2 <EnvVarContainer::setEnv(char const*, char const*)>
c001a2ad:	83 c4 1c             	add    esp,0x1c
c001a2b0:	c3                   	ret    
c001a2b1:	c3                   	ret    

c001a2b2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a2b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2b6:	8b 80 3a 1b 00 00    	mov    eax,DWORD PTR [eax+0x1b3a]
c001a2bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2c0:	e9 1d fc ff ff       	jmp    c0019ee2 <EnvVarContainer::setEnv(char const*, char const*)>

c001a2c5 <Krnl::deleteEnvSystem(char const*)>:
c001a2c5:	c3                   	ret    

c001a2c6 <Krnl::deleteEnvUser(char const*)>:
c001a2c6:	c3                   	ret    

c001a2c7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a2c7:	c3                   	ret    

c001a2c8 <Krnl::newProcessEnv(Process*)>:
c001a2c8:	83 ec 28             	sub    esp,0x28
c001a2cb:	6a 0c                	push   0xc
c001a2cd:	e8 71 55 ff ff       	call   c000f843 <malloc>
c001a2d2:	5a                   	pop    edx
c001a2d3:	59                   	pop    ecx
c001a2d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2d8:	50                   	push   eax
c001a2d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2dd:	e8 e0 fe ff ff       	call   c001a1c2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a2e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2e6:	83 c4 2c             	add    esp,0x2c
c001a2e9:	c3                   	ret    

c001a2ea <Krnl::copyProcessEnv(Process*, Process*)>:
c001a2ea:	56                   	push   esi
c001a2eb:	53                   	push   ebx
c001a2ec:	83 ec 10             	sub    esp,0x10
c001a2ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2f3:	8b b0 3a 1b 00 00    	mov    esi,DWORD PTR [eax+0x1b3a]
c001a2f9:	6a 0c                	push   0xc
c001a2fb:	e8 43 55 ff ff       	call   c000f843 <malloc>
c001a300:	89 c3                	mov    ebx,eax
c001a302:	58                   	pop    eax
c001a303:	5a                   	pop    edx
c001a304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a308:	53                   	push   ebx
c001a309:	e8 b4 fe ff ff       	call   c001a1c2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a30e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a310:	89 03                	mov    DWORD PTR [ebx],eax
c001a312:	c1 e0 03             	shl    eax,0x3
c001a315:	89 04 24             	mov    DWORD PTR [esp],eax
c001a318:	e8 26 55 ff ff       	call   c000f843 <malloc>
c001a31d:	83 c4 0c             	add    esp,0xc
c001a320:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a323:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a325:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a32c:	52                   	push   edx
c001a32d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a330:	50                   	push   eax
c001a331:	e8 0e 64 fe ff       	call   c0000744 <memcpy>
c001a336:	89 d8                	mov    eax,ebx
c001a338:	83 c4 14             	add    esp,0x14
c001a33b:	5b                   	pop    ebx
c001a33c:	5e                   	pop    esi
c001a33d:	c3                   	ret    

c001a33e <Krnl::loadSystemEnv()>:
c001a33e:	53                   	push   ebx
c001a33f:	83 ec 14             	sub    esp,0x14
c001a342:	6a 0c                	push   0xc
c001a344:	e8 fa 54 ff ff       	call   c000f843 <malloc>
c001a349:	89 c3                	mov    ebx,eax
c001a34b:	58                   	pop    eax
c001a34c:	5a                   	pop    edx
c001a34d:	ff 35 b4 17 03 c0    	push   DWORD PTR ds:0xc00317b4
c001a353:	53                   	push   ebx
c001a354:	e8 69 fe ff ff       	call   c001a1c2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a359:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a35c:	89 1d 98 0d 03 c0    	mov    DWORD PTR ds:0xc0030d98,ebx
c001a362:	e8 3f fe ff ff       	call   c001a1a6 <EnvVarContainer::__loadSystem()>
c001a367:	83 c4 18             	add    esp,0x18
c001a36a:	5b                   	pop    ebx
c001a36b:	c3                   	ret    

c001a36c <Krnl::loadUserEnv()>:
c001a36c:	53                   	push   ebx
c001a36d:	83 ec 14             	sub    esp,0x14
c001a370:	6a 0c                	push   0xc
c001a372:	e8 cc 54 ff ff       	call   c000f843 <malloc>
c001a377:	89 c3                	mov    ebx,eax
c001a379:	58                   	pop    eax
c001a37a:	5a                   	pop    edx
c001a37b:	ff 35 b4 17 03 c0    	push   DWORD PTR ds:0xc00317b4
c001a381:	53                   	push   ebx
c001a382:	e8 3b fe ff ff       	call   c001a1c2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a387:	89 1d 94 0d 03 c0    	mov    DWORD PTR ds:0xc0030d94,ebx
c001a38d:	83 c4 18             	add    esp,0x18
c001a390:	5b                   	pop    ebx
c001a391:	c3                   	ret    

c001a392 <Krnl::flushEnv()>:
c001a392:	c3                   	ret    

c001a393 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a393:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a397:	8b 15 94 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d94
c001a39d:	8b 88 3a 1b 00 00    	mov    ecx,DWORD PTR [eax+0x1b3a]
c001a3a3:	a1 98 0d 03 c0       	mov    eax,ds:0xc0030d98
c001a3a8:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3aa:	03 01                	add    eax,DWORD PTR [ecx]
c001a3ac:	85 d2                	test   edx,edx
c001a3ae:	74 02                	je     c001a3b2 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a3b0:	03 02                	add    eax,DWORD PTR [edx]
c001a3b2:	c3                   	ret    

c001a3b3 <Krnl::getProcessEnvPair(Process*, int)>:
c001a3b3:	57                   	push   edi
c001a3b4:	8b 0d 94 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030d94
c001a3ba:	56                   	push   esi
c001a3bb:	85 c9                	test   ecx,ecx
c001a3bd:	53                   	push   ebx
c001a3be:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a3c2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a3c6:	8b 97 3a 1b 00 00    	mov    edx,DWORD PTR [edi+0x1b3a]
c001a3cc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3d0:	8b 02                	mov    eax,DWORD PTR [edx]
c001a3d2:	75 47                	jne    c001a41b <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a3d4:	39 c3                	cmp    ebx,eax
c001a3d6:	7c 47                	jl     c001a41f <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a3d8:	8b 15 98 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d98
c001a3de:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a3e0:	01 c1                	add    ecx,eax
c001a3e2:	39 d9                	cmp    ecx,ebx
c001a3e4:	7e 6c                	jle    c001a452 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a3e6:	51                   	push   ecx
c001a3e7:	89 d9                	mov    ecx,ebx
c001a3e9:	29 c1                	sub    ecx,eax
c001a3eb:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a3ee:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a3f2:	53                   	push   ebx
c001a3f3:	68 ac b8 02 c0       	push   0xc002b8ac
c001a3f8:	e8 9f 89 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001a3fd:	8b 87 3a 1b 00 00    	mov    eax,DWORD PTR [edi+0x1b3a]
c001a403:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a405:	a1 98 0d 03 c0       	mov    eax,ds:0xc0030d98
c001a40a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a40d:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a411:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a414:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a417:	89 06                	mov    DWORD PTR [esi],eax
c001a419:	eb 51                	jmp    c001a46c <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a41b:	39 c3                	cmp    ebx,eax
c001a41d:	7d 05                	jge    c001a424 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a41f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a422:	eb 20                	jmp    c001a444 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a424:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a426:	8d 14 07             	lea    edx,[edi+eax*1]
c001a429:	39 da                	cmp    edx,ebx
c001a42b:	7e 04                	jle    c001a431 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a42d:	29 c3                	sub    ebx,eax
c001a42f:	eb 10                	jmp    c001a441 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a431:	8b 0d 98 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030d98
c001a437:	03 11                	add    edx,DWORD PTR [ecx]
c001a439:	39 da                	cmp    edx,ebx
c001a43b:	7e 15                	jle    c001a452 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a43d:	29 c3                	sub    ebx,eax
c001a43f:	29 fb                	sub    ebx,edi
c001a441:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a444:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a448:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a44b:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a44e:	89 06                	mov    DWORD PTR [esi],eax
c001a450:	eb 1d                	jmp    c001a46f <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a452:	83 ec 0c             	sub    esp,0xc
c001a455:	68 c0 b8 02 c0       	push   0xc002b8c0
c001a45a:	e8 18 00 00 00       	call   c001a477 <Krnl::panic(char const*)>
c001a45f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a465:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a46c:	83 c4 10             	add    esp,0x10
c001a46f:	89 f0                	mov    eax,esi
c001a471:	5b                   	pop    ebx
c001a472:	5e                   	pop    esi
c001a473:	5f                   	pop    edi
c001a474:	c2 04 00             	ret    0x4

c001a477 <Krnl::panic(char const*)>:
c001a477:	55                   	push   ebp
c001a478:	89 e5                	mov    ebp,esp
c001a47a:	53                   	push   ebx
c001a47b:	83 ec 0c             	sub    esp,0xc
c001a47e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a481:	fa                   	cli    
c001a482:	c6 05 a4 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030da4,0x1
c001a489:	53                   	push   ebx
c001a48a:	c6 05 84 d1 02 c0 00 	mov    BYTE PTR ds:0xc002d184,0x0
c001a491:	68 da b8 02 c0       	push   0xc002b8da
c001a496:	e8 01 89 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001a49b:	58                   	pop    eax
c001a49c:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a4a1:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4a7:	e8 45 68 ff ff       	call   c0010cf1 <setActiveTerminal(VgaText*)>
c001a4ac:	83 c4 0c             	add    esp,0xc
c001a4af:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a4b4:	6a 01                	push   0x1
c001a4b6:	6a 0f                	push   0xf
c001a4b8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4be:	e8 5f 62 ff ff       	call   c0010722 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a4c3:	58                   	pop    eax
c001a4c4:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a4c9:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4cf:	e8 be 6a ff ff       	call   c0010f92 <VgaText::clearScreen()>
c001a4d4:	58                   	pop    eax
c001a4d5:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a4da:	5a                   	pop    edx
c001a4db:	68 f3 b8 02 c0       	push   0xc002b8f3
c001a4e0:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4e6:	e8 25 6c ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a4eb:	59                   	pop    ecx
c001a4ec:	58                   	pop    eax
c001a4ed:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a4f2:	68 98 b9 02 c0       	push   0xc002b998
c001a4f7:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4fd:	e8 0e 6c ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a502:	58                   	pop    eax
c001a503:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a508:	5a                   	pop    edx
c001a509:	68 0f b9 02 c0       	push   0xc002b90f
c001a50e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a514:	e8 f7 6b ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a519:	59                   	pop    ecx
c001a51a:	58                   	pop    eax
c001a51b:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a520:	53                   	push   ebx
c001a521:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a527:	e8 e4 6b ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a52c:	58                   	pop    eax
c001a52d:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a532:	5a                   	pop    edx
c001a533:	68 2f b9 02 c0       	push   0xc002b92f
c001a538:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a53e:	e8 cd 6b ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a543:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c001a548:	83 c4 10             	add    esp,0x10
c001a54b:	85 c0                	test   eax,eax
c001a54d:	74 02                	je     c001a551 <Krnl::panic(char const*)+0xda>
c001a54f:	ff d0                	call   eax
c001a551:	83 ec 0c             	sub    esp,0xc
c001a554:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a557:	e8 fd 2f 00 00       	call   c001d559 <Thr::getDriverNameFromAddress(unsigned long)>
c001a55c:	83 c4 10             	add    esp,0x10
c001a55f:	89 c3                	mov    ebx,eax
c001a561:	85 c0                	test   eax,eax
c001a563:	0f 84 50 02 00 00    	je     c001a7b9 <Krnl::panic(char const*)+0x342>
c001a569:	83 ec 08             	sub    esp,0x8
c001a56c:	8b 15 b4 17 03 c0    	mov    edx,DWORD PTR ds:0xc00317b4
c001a572:	68 d4 b9 02 c0       	push   0xc002b9d4
c001a577:	ff b2 26 19 00 00    	push   DWORD PTR [edx+0x1926]
c001a57d:	e8 8e 6b ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a582:	58                   	pop    eax
c001a583:	5a                   	pop    edx
c001a584:	8b 15 b4 17 03 c0    	mov    edx,DWORD PTR ds:0xc00317b4
c001a58a:	68 0f b9 02 c0       	push   0xc002b90f
c001a58f:	ff b2 26 19 00 00    	push   DWORD PTR [edx+0x1926]
c001a595:	e8 76 6b ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a59a:	59                   	pop    ecx
c001a59b:	58                   	pop    eax
c001a59c:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a5a1:	53                   	push   ebx
c001a5a2:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5a8:	e8 63 6b ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a5ad:	83 c4 10             	add    esp,0x10
c001a5b0:	83 ec 08             	sub    esp,0x8
c001a5b3:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a5b8:	68 2e b9 02 c0       	push   0xc002b92e
c001a5bd:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5c3:	e8 48 6b ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a5c8:	58                   	pop    eax
c001a5c9:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a5ce:	5a                   	pop    edx
c001a5cf:	68 2c ba 02 c0       	push   0xc002ba2c
c001a5d4:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5da:	e8 31 6b ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a5df:	59                   	pop    ecx
c001a5e0:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a5e5:	5b                   	pop    ebx
c001a5e6:	68 6c ba 02 c0       	push   0xc002ba6c
c001a5eb:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5f1:	e8 1a 6b ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a5f6:	58                   	pop    eax
c001a5f7:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a5fc:	5a                   	pop    edx
c001a5fd:	68 1a b9 02 c0       	push   0xc002b91a
c001a602:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a608:	e8 03 6b ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a60d:	59                   	pop    ecx
c001a60e:	5b                   	pop    ebx
c001a60f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a612:	68 32 b9 02 c0       	push   0xc002b932
c001a617:	e8 80 87 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001a61c:	58                   	pop    eax
c001a61d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a620:	5a                   	pop    edx
c001a621:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a624:	68 3b b9 02 c0       	push   0xc002b93b
c001a629:	e8 6e 87 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001a62e:	59                   	pop    ecx
c001a62f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a632:	5b                   	pop    ebx
c001a633:	8b 00                	mov    eax,DWORD PTR [eax]
c001a635:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a638:	68 44 b9 02 c0       	push   0xc002b944
c001a63d:	e8 5a 87 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001a642:	58                   	pop    eax
c001a643:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a648:	5a                   	pop    edx
c001a649:	68 b0 ba 02 c0       	push   0xc002bab0
c001a64e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a654:	e8 b7 6a ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a659:	59                   	pop    ecx
c001a65a:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a65f:	5b                   	pop    ebx
c001a660:	68 4d b9 02 c0       	push   0xc002b94d
c001a665:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a66b:	e8 a0 6a ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a670:	0f 20 c0             	mov    eax,cr0
c001a673:	5a                   	pop    edx
c001a674:	59                   	pop    ecx
c001a675:	50                   	push   eax
c001a676:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a67b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a681:	e8 b0 6a ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c001a686:	5b                   	pop    ebx
c001a687:	58                   	pop    eax
c001a688:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a68d:	68 57 b9 02 c0       	push   0xc002b957
c001a692:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a698:	e8 73 6a ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a69d:	0f 20 d0             	mov    eax,cr2
c001a6a0:	5a                   	pop    edx
c001a6a1:	59                   	pop    ecx
c001a6a2:	50                   	push   eax
c001a6a3:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a6a8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6ae:	e8 83 6a ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c001a6b3:	5b                   	pop    ebx
c001a6b4:	58                   	pop    eax
c001a6b5:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a6ba:	68 61 b9 02 c0       	push   0xc002b961
c001a6bf:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6c5:	e8 46 6a ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a6ca:	0f 20 d8             	mov    eax,cr3
c001a6cd:	5a                   	pop    edx
c001a6ce:	59                   	pop    ecx
c001a6cf:	50                   	push   eax
c001a6d0:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a6d5:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6db:	e8 56 6a ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c001a6e0:	5b                   	pop    ebx
c001a6e1:	58                   	pop    eax
c001a6e2:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a6e7:	68 74 b9 02 c0       	push   0xc002b974
c001a6ec:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6f2:	e8 19 6a ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a6f7:	0f 20 e0             	mov    eax,cr4
c001a6fa:	5a                   	pop    edx
c001a6fb:	59                   	pop    ecx
c001a6fc:	50                   	push   eax
c001a6fd:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a702:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a708:	e8 29 6a ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c001a70d:	5b                   	pop    ebx
c001a70e:	58                   	pop    eax
c001a70f:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a714:	68 7e b9 02 c0       	push   0xc002b97e
c001a719:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a71f:	e8 ec 69 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a724:	5a                   	pop    edx
c001a725:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a72a:	59                   	pop    ecx
c001a72b:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a731:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a734:	50                   	push   eax
c001a735:	e8 fc 69 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c001a73a:	5b                   	pop    ebx
c001a73b:	58                   	pop    eax
c001a73c:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a741:	68 95 b9 02 c0       	push   0xc002b995
c001a746:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a74c:	e8 bf 69 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a751:	5a                   	pop    edx
c001a752:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a757:	59                   	pop    ecx
c001a758:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a75e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a761:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a764:	50                   	push   eax
c001a765:	e8 cc 69 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c001a76a:	5b                   	pop    ebx
c001a76b:	58                   	pop    eax
c001a76c:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a771:	68 95 b9 02 c0       	push   0xc002b995
c001a776:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a77c:	e8 8f 69 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a781:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a786:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a789:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a78f:	8b 12                	mov    edx,DWORD PTR [edx]
c001a791:	59                   	pop    ecx
c001a792:	5b                   	pop    ebx
c001a793:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a796:	50                   	push   eax
c001a797:	e8 9a 69 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c001a79c:	83 c4 10             	add    esp,0x10
c001a79f:	b2 fe                	mov    dl,0xfe
c001a7a1:	e4 60                	in     al,0x60
c001a7a3:	3c 1c                	cmp    al,0x1c
c001a7a5:	74 04                	je     c001a7ab <Krnl::panic(char const*)+0x334>
c001a7a7:	3c 5a                	cmp    al,0x5a
c001a7a9:	75 f6                	jne    c001a7a1 <Krnl::panic(char const*)+0x32a>
c001a7ab:	e4 64                	in     al,0x64
c001a7ad:	a8 02                	test   al,0x2
c001a7af:	75 fa                	jne    c001a7ab <Krnl::panic(char const*)+0x334>
c001a7b1:	88 d0                	mov    al,dl
c001a7b3:	e6 64                	out    0x64,al
c001a7b5:	fa                   	cli    
c001a7b6:	f4                   	hlt    
c001a7b7:	eb e8                	jmp    c001a7a1 <Krnl::panic(char const*)+0x32a>
c001a7b9:	50                   	push   eax
c001a7ba:	50                   	push   eax
c001a7bb:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a7c0:	68 00 ba 02 c0       	push   0xc002ba00
c001a7c5:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7cb:	e8 40 69 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a7d0:	58                   	pop    eax
c001a7d1:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a7d6:	5a                   	pop    edx
c001a7d7:	68 0f b9 02 c0       	push   0xc002b90f
c001a7dc:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7e2:	e8 29 69 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a7e7:	59                   	pop    ecx
c001a7e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a7ed:	5b                   	pop    ebx
c001a7ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a7f1:	83 c0 0c             	add    eax,0xc
c001a7f4:	50                   	push   eax
c001a7f5:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a7fa:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a800:	e8 0b 69 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a805:	83 c4 10             	add    esp,0x10
c001a808:	e9 a3 fd ff ff       	jmp    c001a5b0 <Krnl::panic(char const*)+0x139>

c001a80d <Net::switchEndian16(unsigned short)>:
c001a80d:	83 ec 04             	sub    esp,0x4
c001a810:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a814:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a818:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a81c:	c1 f8 08             	sar    eax,0x8
c001a81f:	89 c2                	mov    edx,eax
c001a821:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a825:	c1 e0 08             	shl    eax,0x8
c001a828:	09 d0                	or     eax,edx
c001a82a:	83 c4 04             	add    esp,0x4
c001a82d:	c3                   	ret    

c001a82e <Net::switchEndian32(unsigned int)>:
c001a82e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a832:	c1 e8 18             	shr    eax,0x18
c001a835:	89 c2                	mov    edx,eax
c001a837:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a83b:	c1 e0 08             	shl    eax,0x8
c001a83e:	25 00 00 ff 00       	and    eax,0xff0000
c001a843:	09 c2                	or     edx,eax
c001a845:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a849:	c1 e8 08             	shr    eax,0x8
c001a84c:	25 00 ff 00 00       	and    eax,0xff00
c001a851:	09 c2                	or     edx,eax
c001a853:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a857:	c1 e0 18             	shl    eax,0x18
c001a85a:	09 d0                	or     eax,edx
c001a85c:	c3                   	ret    

c001a85d <Net::crc32Calc(unsigned char*, int)>:
c001a85d:	83 ec 10             	sub    esp,0x10
c001a860:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a865:	75 07                	jne    c001a86e <Net::crc32Calc(unsigned char*, int)+0x11>
c001a867:	b8 00 00 00 00       	mov    eax,0x0
c001a86c:	eb 7c                	jmp    c001a8ea <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a86e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a873:	7f 07                	jg     c001a87c <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a875:	b8 00 00 00 00       	mov    eax,0x0
c001a87a:	eb 6e                	jmp    c001a8ea <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a87c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a884:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a88c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a890:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a894:	7d 4e                	jge    c001a8e4 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a896:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a89a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a89e:	01 d0                	add    eax,edx
c001a8a0:	8a 00                	mov    al,BYTE PTR [eax]
c001a8a2:	0f b6 c0             	movzx  eax,al
c001a8a5:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a8a9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8b1:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a8b6:	7f 26                	jg     c001a8de <Net::crc32Calc(unsigned char*, int)+0x81>
c001a8b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8bc:	83 e0 01             	and    eax,0x1
c001a8bf:	74 0d                	je     c001a8ce <Net::crc32Calc(unsigned char*, int)+0x71>
c001a8c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8c5:	d1 e8                	shr    eax,1
c001a8c7:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a8cc:	eb 06                	jmp    c001a8d4 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a8ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8d2:	d1 e8                	shr    eax,1
c001a8d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a8d8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a8dc:	eb d3                	jmp    c001a8b1 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a8de:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a8e2:	eb a8                	jmp    c001a88c <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a8e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8e8:	f7 d0                	not    eax
c001a8ea:	83 c4 10             	add    esp,0x10
c001a8ed:	c3                   	ret    

c001a8ee <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a8ee:	83 ec 1c             	sub    esp,0x1c
c001a8f1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a8f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a901:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a906:	7f 14                	jg     c001a91c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a908:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a90c:	8d 50 01             	lea    edx,[eax+0x1]
c001a90f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a913:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a916:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a91a:	eb e5                	jmp    c001a901 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a91c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a920:	8d 50 01             	lea    edx,[eax+0x1]
c001a923:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a927:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a92a:	83 ec 04             	sub    esp,0x4
c001a92d:	6a 06                	push   0x6
c001a92f:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a933:	50                   	push   eax
c001a934:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a938:	e8 07 5e fe ff       	call   c0000744 <memcpy>
c001a93d:	83 c4 10             	add    esp,0x10
c001a940:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a945:	83 ec 04             	sub    esp,0x4
c001a948:	6a 06                	push   0x6
c001a94a:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a94e:	50                   	push   eax
c001a94f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a953:	e8 ec 5d fe ff       	call   c0000744 <memcpy>
c001a958:	83 c4 10             	add    esp,0x10
c001a95b:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a960:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a964:	0f b7 c0             	movzx  eax,ax
c001a967:	c1 f8 08             	sar    eax,0x8
c001a96a:	89 c1                	mov    ecx,eax
c001a96c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a970:	8d 50 01             	lea    edx,[eax+0x1]
c001a973:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a977:	88 ca                	mov    dl,cl
c001a979:	88 10                	mov    BYTE PTR [eax],dl
c001a97b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a97f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a983:	8d 48 01             	lea    ecx,[eax+0x1]
c001a986:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a98a:	88 10                	mov    BYTE PTR [eax],dl
c001a98c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a994:	83 ec 04             	sub    esp,0x4
c001a997:	52                   	push   edx
c001a998:	50                   	push   eax
c001a999:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a99d:	e8 a2 5d fe ff       	call   c0000744 <memcpy>
c001a9a2:	83 c4 10             	add    esp,0x10
c001a9a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a9a9:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a9ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9b1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a9b5:	83 ec 08             	sub    esp,0x8
c001a9b8:	50                   	push   eax
c001a9b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a9bd:	e8 9b fe ff ff       	call   c001a85d <Net::crc32Calc(unsigned char*, int)>
c001a9c2:	83 c4 10             	add    esp,0x10
c001a9c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a9c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9cd:	c1 e8 18             	shr    eax,0x18
c001a9d0:	89 c1                	mov    ecx,eax
c001a9d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9d6:	8d 50 01             	lea    edx,[eax+0x1]
c001a9d9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9dd:	88 ca                	mov    dl,cl
c001a9df:	88 10                	mov    BYTE PTR [eax],dl
c001a9e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9e5:	c1 e8 10             	shr    eax,0x10
c001a9e8:	89 c1                	mov    ecx,eax
c001a9ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9ee:	8d 50 01             	lea    edx,[eax+0x1]
c001a9f1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9f5:	88 ca                	mov    dl,cl
c001a9f7:	88 10                	mov    BYTE PTR [eax],dl
c001a9f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9fd:	c1 e8 08             	shr    eax,0x8
c001aa00:	89 c1                	mov    ecx,eax
c001aa02:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa06:	8d 50 01             	lea    edx,[eax+0x1]
c001aa09:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa0d:	88 ca                	mov    dl,cl
c001aa0f:	88 10                	mov    BYTE PTR [eax],dl
c001aa11:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa15:	8d 50 01             	lea    edx,[eax+0x1]
c001aa18:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa20:	88 10                	mov    BYTE PTR [eax],dl
c001aa22:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aa26:	83 c4 1c             	add    esp,0x1c
c001aa29:	c3                   	ret    

c001aa2a <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001aa2a:	83 ec 2c             	sub    esp,0x2c
c001aa2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa31:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa35:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001aa3a:	83 ec 04             	sub    esp,0x4
c001aa3d:	6a 06                	push   0x6
c001aa3f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aa43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aa47:	83 c0 0e             	add    eax,0xe
c001aa4a:	50                   	push   eax
c001aa4b:	e8 f4 5c fe ff       	call   c0000744 <memcpy>
c001aa50:	83 c4 10             	add    esp,0x10
c001aa53:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001aa58:	83 ec 04             	sub    esp,0x4
c001aa5b:	6a 06                	push   0x6
c001aa5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aa61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aa65:	83 c0 08             	add    eax,0x8
c001aa68:	50                   	push   eax
c001aa69:	e8 d6 5c fe ff       	call   c0000744 <memcpy>
c001aa6e:	83 c4 10             	add    esp,0x10
c001aa71:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001aa76:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa7a:	8d 50 01             	lea    edx,[eax+0x1]
c001aa7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aa81:	8a 00                	mov    al,BYTE PTR [eax]
c001aa83:	0f b6 c0             	movzx  eax,al
c001aa86:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001aa8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa8f:	8d 50 01             	lea    edx,[eax+0x1]
c001aa92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aa96:	8a 00                	mov    al,BYTE PTR [eax]
c001aa98:	0f b6 c0             	movzx  eax,al
c001aa9b:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001aaa0:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001aaa5:	c1 e0 08             	shl    eax,0x8
c001aaa8:	89 c2                	mov    edx,eax
c001aaaa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aaae:	09 d0                	or     eax,edx
c001aab0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aab4:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aab8:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001aabd:	75 3a                	jne    c001aaf9 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aabf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aac3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aac6:	66 3d dc 05          	cmp    ax,0x5dc
c001aaca:	77 10                	ja     c001aadc <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001aacc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aad0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aad3:	0f b7 c0             	movzx  eax,ax
c001aad6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aada:	eb 1d                	jmp    c001aaf9 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aadc:	83 ec 0c             	sub    esp,0xc
c001aadf:	68 d8 ba 02 c0       	push   0xc002bad8
c001aae4:	e8 b3 82 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001aae9:	83 c4 10             	add    esp,0x10
c001aaec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aaf0:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001aaf4:	e9 c0 00 00 00       	jmp    c001abb9 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001aaf9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aafd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab01:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab03:	83 ec 04             	sub    esp,0x4
c001ab06:	52                   	push   edx
c001ab07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab0b:	50                   	push   eax
c001ab0c:	e8 33 5c fe ff       	call   c0000744 <memcpy>
c001ab11:	83 c4 10             	add    esp,0x10
c001ab14:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab18:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ab1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab20:	8d 50 01             	lea    edx,[eax+0x1]
c001ab23:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab27:	8a 00                	mov    al,BYTE PTR [eax]
c001ab29:	0f b6 c0             	movzx  eax,al
c001ab2c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab34:	8d 50 01             	lea    edx,[eax+0x1]
c001ab37:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab3b:	8a 00                	mov    al,BYTE PTR [eax]
c001ab3d:	0f b6 c0             	movzx  eax,al
c001ab40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ab44:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab48:	8d 50 01             	lea    edx,[eax+0x1]
c001ab4b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab4f:	8a 00                	mov    al,BYTE PTR [eax]
c001ab51:	0f b6 c0             	movzx  eax,al
c001ab54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab5c:	8d 50 01             	lea    edx,[eax+0x1]
c001ab5f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab63:	8a 00                	mov    al,BYTE PTR [eax]
c001ab65:	0f b6 c0             	movzx  eax,al
c001ab68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab70:	c1 e0 18             	shl    eax,0x18
c001ab73:	89 c2                	mov    edx,eax
c001ab75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab79:	c1 e0 10             	shl    eax,0x10
c001ab7c:	09 c2                	or     edx,eax
c001ab7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab82:	c1 e0 08             	shl    eax,0x8
c001ab85:	09 d0                	or     eax,edx
c001ab87:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ab8b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab93:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ab97:	83 e8 04             	sub    eax,0x4
c001ab9a:	83 ec 08             	sub    esp,0x8
c001ab9d:	50                   	push   eax
c001ab9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001aba2:	e8 b6 fc ff ff       	call   c001a85d <Net::crc32Calc(unsigned char*, int)>
c001aba7:	83 c4 10             	add    esp,0x10
c001abaa:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001abae:	0f 94 c2             	sete   dl
c001abb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abb5:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001abb8:	90                   	nop
c001abb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abbd:	83 c4 2c             	add    esp,0x2c
c001abc0:	c2 04 00             	ret    0x4

c001abc3 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001abc3:	55                   	push   ebp
c001abc4:	57                   	push   edi
c001abc5:	56                   	push   esi
c001abc6:	53                   	push   ebx
c001abc7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001abcd:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001abd4:	8a 1e                	mov    bl,BYTE PTR [esi]
c001abd6:	8d 6e 01             	lea    ebp,[esi+0x1]
c001abd9:	80 fb 40             	cmp    bl,0x40
c001abdc:	75 1b                	jne    c001abf9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001abde:	8a 16                	mov    dl,BYTE PTR [esi]
c001abe0:	84 d2                	test   dl,dl
c001abe2:	0f 84 f1 00 00 00    	je     c001acd9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001abe8:	8d 46 01             	lea    eax,[esi+0x1]
c001abeb:	80 fa 3a             	cmp    dl,0x3a
c001abee:	74 04                	je     c001abf4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001abf0:	89 c6                	mov    esi,eax
c001abf2:	eb ea                	jmp    c001abde <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001abf4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001abf7:	89 c6                	mov    esi,eax
c001abf9:	50                   	push   eax
c001abfa:	6a 40                	push   0x40
c001abfc:	6a 00                	push   0x0
c001abfe:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac02:	50                   	push   eax
c001ac03:	e8 70 5b fe ff       	call   c0000778 <memset>
c001ac08:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ac0f:	31 c0                	xor    eax,eax
c001ac11:	83 c4 10             	add    esp,0x10
c001ac14:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ac16:	84 c9                	test   cl,cl
c001ac18:	0f 84 bb 00 00 00    	je     c001acd9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac1e:	3d c7 00 00 00       	cmp    eax,0xc7
c001ac23:	0f 8f b0 00 00 00    	jg     c001acd9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac29:	80 f9 0a             	cmp    cl,0xa
c001ac2c:	0f 85 98 00 00 00    	jne    c001acca <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ac32:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ac37:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ac3b:	a8 df                	test   al,0xdf
c001ac3d:	0f 94 c1             	sete   cl
c001ac40:	3c 23                	cmp    al,0x23
c001ac42:	0f 94 c2             	sete   dl
c001ac45:	08 d1                	or     cl,dl
c001ac47:	75 4a                	jne    c001ac93 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac49:	8d 50 f7             	lea    edx,[eax-0x9]
c001ac4c:	80 fa 01             	cmp    dl,0x1
c001ac4f:	76 42                	jbe    c001ac93 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac51:	3c 5b                	cmp    al,0x5b
c001ac53:	75 42                	jne    c001ac97 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ac55:	80 fb 40             	cmp    bl,0x40
c001ac58:	75 39                	jne    c001ac93 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac5a:	83 ec 0c             	sub    esp,0xc
c001ac5d:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ac61:	52                   	push   edx
c001ac62:	e8 2d 5b fe ff       	call   c0000794 <strlen>
c001ac67:	83 c4 10             	add    esp,0x10
c001ac6a:	83 f8 3f             	cmp    eax,0x3f
c001ac6d:	77 6a                	ja     c001acd9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac6f:	50                   	push   eax
c001ac70:	50                   	push   eax
c001ac71:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ac75:	52                   	push   edx
c001ac76:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac7a:	52                   	push   edx
c001ac7b:	e8 b4 5b fe ff       	call   c0000834 <strcpy>
c001ac80:	58                   	pop    eax
c001ac81:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac85:	52                   	push   edx
c001ac86:	e8 09 5b fe ff       	call   c0000794 <strlen>
c001ac8b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ac90:	83 c4 10             	add    esp,0x10
c001ac93:	31 d2                	xor    edx,edx
c001ac95:	eb 3a                	jmp    c001acd1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ac97:	80 fb 40             	cmp    bl,0x40
c001ac9a:	74 06                	je     c001aca2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ac9c:	8d 44 24 58          	lea    eax,[esp+0x58]
c001aca0:	eb 20                	jmp    c001acc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001aca2:	50                   	push   eax
c001aca3:	50                   	push   eax
c001aca4:	55                   	push   ebp
c001aca5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aca9:	50                   	push   eax
c001acaa:	e8 11 5c fe ff       	call   c00008c0 <strcmp>
c001acaf:	83 c4 10             	add    esp,0x10
c001acb2:	85 c0                	test   eax,eax
c001acb4:	75 dd                	jne    c001ac93 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acb6:	eb e4                	jmp    c001ac9c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001acb8:	8d 50 01             	lea    edx,[eax+0x1]
c001acbb:	80 f9 3d             	cmp    cl,0x3d
c001acbe:	74 1d                	je     c001acdd <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001acc0:	89 d0                	mov    eax,edx
c001acc2:	8a 08                	mov    cl,BYTE PTR [eax]
c001acc4:	84 c9                	test   cl,cl
c001acc6:	75 f0                	jne    c001acb8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001acc8:	eb 0f                	jmp    c001acd9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acca:	8d 50 01             	lea    edx,[eax+0x1]
c001accd:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001acd1:	47                   	inc    edi
c001acd2:	89 d0                	mov    eax,edx
c001acd4:	e9 3b ff ff ff       	jmp    c001ac14 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001acd9:	31 c0                	xor    eax,eax
c001acdb:	eb 33                	jmp    c001ad10 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001acdd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ace1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ace4:	50                   	push   eax
c001ace5:	50                   	push   eax
c001ace6:	8d 44 24 60          	lea    eax,[esp+0x60]
c001acea:	50                   	push   eax
c001aceb:	56                   	push   esi
c001acec:	e8 cf 5b fe ff       	call   c00008c0 <strcmp>
c001acf1:	83 c4 10             	add    esp,0x10
c001acf4:	85 c0                	test   eax,eax
c001acf6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001acfa:	75 97                	jne    c001ac93 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acfc:	51                   	push   ecx
c001acfd:	51                   	push   ecx
c001acfe:	52                   	push   edx
c001acff:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ad06:	e8 29 5b fe ff       	call   c0000834 <strcpy>
c001ad0b:	83 c4 10             	add    esp,0x10
c001ad0e:	b0 01                	mov    al,0x1
c001ad10:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ad16:	5b                   	pop    ebx
c001ad17:	5e                   	pop    esi
c001ad18:	5f                   	pop    edi
c001ad19:	5d                   	pop    ebp
c001ad1a:	c3                   	ret    

c001ad1b <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ad1b:	57                   	push   edi
c001ad1c:	56                   	push   esi
c001ad1d:	53                   	push   ebx
c001ad1e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad24:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ad2b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ad32:	53                   	push   ebx
c001ad33:	e8 5c 5a fe ff       	call   c0000794 <strlen>
c001ad38:	89 34 24             	mov    DWORD PTR [esp],esi
c001ad3b:	89 c7                	mov    edi,eax
c001ad3d:	e8 52 5a fe ff       	call   c0000794 <strlen>
c001ad42:	83 c4 10             	add    esp,0x10
c001ad45:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ad49:	3d ff 00 00 00       	cmp    eax,0xff
c001ad4e:	0f 87 d3 00 00 00    	ja     c001ae27 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ad54:	57                   	push   edi
c001ad55:	57                   	push   edi
c001ad56:	56                   	push   esi
c001ad57:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ad5b:	56                   	push   esi
c001ad5c:	e8 d3 5a fe ff       	call   c0000834 <strcpy>
c001ad61:	58                   	pop    eax
c001ad62:	5a                   	pop    edx
c001ad63:	68 38 c0 02 c0       	push   0xc002c038
c001ad68:	56                   	push   esi
c001ad69:	e8 06 5c fe ff       	call   c0000974 <strcat>
c001ad6e:	59                   	pop    ecx
c001ad6f:	5f                   	pop    edi
c001ad70:	53                   	push   ebx
c001ad71:	56                   	push   esi
c001ad72:	e8 fd 5b fe ff       	call   c0000974 <strcat>
c001ad77:	58                   	pop    eax
c001ad78:	5a                   	pop    edx
c001ad79:	68 24 bb 02 c0       	push   0xc002bb24
c001ad7e:	56                   	push   esi
c001ad7f:	e8 f0 5b fe ff       	call   c0000974 <strcat>
c001ad84:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ad8b:	e8 b3 4a ff ff       	call   c000f843 <malloc>
c001ad90:	83 c4 0c             	add    esp,0xc
c001ad93:	89 c3                	mov    ebx,eax
c001ad95:	ff 35 b4 17 03 c0    	push   DWORD PTR ds:0xc00317b4
c001ad9b:	56                   	push   esi
c001ad9c:	50                   	push   eax
c001ad9d:	e8 52 85 ff ff       	call   c00132f4 <File::File(char const*, Process*)>
c001ada2:	83 c4 10             	add    esp,0x10
c001ada5:	85 db                	test   ebx,ebx
c001ada7:	74 7e                	je     c001ae27 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ada9:	51                   	push   ecx
c001adaa:	51                   	push   ecx
c001adab:	6a 01                	push   0x1
c001adad:	53                   	push   ebx
c001adae:	e8 a5 85 ff ff       	call   c0013358 <File::open(FileOpenMode)>
c001adb3:	83 c4 10             	add    esp,0x10
c001adb6:	85 c0                	test   eax,eax
c001adb8:	74 08                	je     c001adc2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001adba:	83 ec 0c             	sub    esp,0xc
c001adbd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adbf:	53                   	push   ebx
c001adc0:	eb 5f                	jmp    c001ae21 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001adc2:	52                   	push   edx
c001adc3:	8d 44 24 17          	lea    eax,[esp+0x17]
c001adc7:	50                   	push   eax
c001adc8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001adcc:	50                   	push   eax
c001adcd:	53                   	push   ebx
c001adce:	e8 31 88 ff ff       	call   c0013604 <File::stat(unsigned long long*, bool*)>
c001add3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001add7:	83 c4 10             	add    esp,0x10
c001adda:	89 c1                	mov    ecx,eax
c001addc:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ade0:	74 31                	je     c001ae13 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ade2:	83 ec 0c             	sub    esp,0xc
c001ade5:	50                   	push   eax
c001ade6:	e8 58 4a ff ff       	call   c000f843 <malloc>
c001adeb:	89 c6                	mov    esi,eax
c001aded:	58                   	pop    eax
c001adee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adf0:	8d 54 24 20          	lea    edx,[esp+0x20]
c001adf4:	52                   	push   edx
c001adf5:	56                   	push   esi
c001adf6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001adfa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001adfe:	53                   	push   ebx
c001adff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae02:	83 c4 20             	add    esp,0x20
c001ae05:	85 c0                	test   eax,eax
c001ae07:	75 0a                	jne    c001ae13 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae0d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ae11:	74 18                	je     c001ae2b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ae13:	83 ec 0c             	sub    esp,0xc
c001ae16:	53                   	push   ebx
c001ae17:	e8 9a 85 ff ff       	call   c00133b6 <File::close()>
c001ae1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae21:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae24:	83 c4 10             	add    esp,0x10
c001ae27:	31 c0                	xor    eax,eax
c001ae29:	eb 3b                	jmp    c001ae66 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ae2b:	83 ec 0c             	sub    esp,0xc
c001ae2e:	53                   	push   ebx
c001ae2f:	e8 82 85 ff ff       	call   c00133b6 <File::close()>
c001ae34:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae39:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae3c:	83 c4 0c             	add    esp,0xc
c001ae3f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae46:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae4d:	56                   	push   esi
c001ae4e:	e8 70 fd ff ff       	call   c001abc3 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001ae53:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae56:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ae5a:	e8 f4 49 ff ff       	call   c000f853 <free>
c001ae5f:	83 c4 10             	add    esp,0x10
c001ae62:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ae66:	81 c4 20 01 00 00    	add    esp,0x120
c001ae6c:	5b                   	pop    ebx
c001ae6d:	5e                   	pop    esi
c001ae6e:	5f                   	pop    edi
c001ae6f:	c3                   	ret    

c001ae70 <Reg::getLine(char*, char*, char*)>:
c001ae70:	57                   	push   edi
c001ae71:	56                   	push   esi
c001ae72:	53                   	push   ebx
c001ae73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae77:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ae7b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ae7f:	57                   	push   edi
c001ae80:	56                   	push   esi
c001ae81:	53                   	push   ebx
c001ae82:	68 29 bb 02 c0       	push   0xc002bb29
c001ae87:	e8 8f fe ff ff       	call   c001ad1b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ae8c:	83 c4 10             	add    esp,0x10
c001ae8f:	84 c0                	test   al,al
c001ae91:	75 10                	jne    c001aea3 <Reg::getLine(char*, char*, char*)+0x33>
c001ae93:	57                   	push   edi
c001ae94:	56                   	push   esi
c001ae95:	53                   	push   ebx
c001ae96:	68 4e bb 02 c0       	push   0xc002bb4e
c001ae9b:	e8 7b fe ff ff       	call   c001ad1b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aea0:	83 c4 10             	add    esp,0x10
c001aea3:	5b                   	pop    ebx
c001aea4:	5e                   	pop    esi
c001aea5:	5f                   	pop    edi
c001aea6:	c3                   	ret    

c001aea7 <Reg::readInt(char*, char*, int*)>:
c001aea7:	55                   	push   ebp
c001aea8:	57                   	push   edi
c001aea9:	56                   	push   esi
c001aeaa:	53                   	push   ebx
c001aeab:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aeb1:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aeb5:	57                   	push   edi
c001aeb6:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aebd:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aec4:	e8 a7 ff ff ff       	call   c001ae70 <Reg::getLine(char*, char*, char*)>
c001aec9:	83 c4 10             	add    esp,0x10
c001aecc:	84 c0                	test   al,al
c001aece:	0f 84 b3 00 00 00    	je     c001af87 <Reg::readInt(char*, char*, int*)+0xe0>
c001aed4:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aed8:	80 fa 2b             	cmp    dl,0x2b
c001aedb:	74 0c                	je     c001aee9 <Reg::readInt(char*, char*, int*)+0x42>
c001aedd:	80 fa 2d             	cmp    dl,0x2d
c001aee0:	75 0e                	jne    c001aef0 <Reg::readInt(char*, char*, int*)+0x49>
c001aee2:	ba 01 00 00 00       	mov    edx,0x1
c001aee7:	eb 0b                	jmp    c001aef4 <Reg::readInt(char*, char*, int*)+0x4d>
c001aee9:	ba 01 00 00 00       	mov    edx,0x1
c001aeee:	eb 02                	jmp    c001aef2 <Reg::readInt(char*, char*, int*)+0x4b>
c001aef0:	31 d2                	xor    edx,edx
c001aef2:	31 c0                	xor    eax,eax
c001aef4:	be 0a 00 00 00       	mov    esi,0xa
c001aef9:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aefe:	75 20                	jne    c001af20 <Reg::readInt(char*, char*, int*)+0x79>
c001af00:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001af04:	80 f9 78             	cmp    cl,0x78
c001af07:	75 0a                	jne    c001af13 <Reg::readInt(char*, char*, int*)+0x6c>
c001af09:	83 c2 02             	add    edx,0x2
c001af0c:	be 10 00 00 00       	mov    esi,0x10
c001af11:	eb 0d                	jmp    c001af20 <Reg::readInt(char*, char*, int*)+0x79>
c001af13:	80 f9 62             	cmp    cl,0x62
c001af16:	75 08                	jne    c001af20 <Reg::readInt(char*, char*, int*)+0x79>
c001af18:	83 c2 02             	add    edx,0x2
c001af1b:	be 02 00 00 00       	mov    esi,0x2
c001af20:	01 d7                	add    edi,edx
c001af22:	31 d2                	xor    edx,edx
c001af24:	8a 1f                	mov    bl,BYTE PTR [edi]
c001af26:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001af2a:	80 fb 0d             	cmp    bl,0xd
c001af2d:	0f 94 c3             	sete   bl
c001af30:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001af35:	0f 94 c1             	sete   cl
c001af38:	08 cb                	or     bl,cl
c001af3a:	75 3a                	jne    c001af76 <Reg::readInt(char*, char*, int*)+0xcf>
c001af3c:	0f af d6             	imul   edx,esi
c001af3f:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001af44:	83 fe 10             	cmp    esi,0x10
c001af47:	75 26                	jne    c001af6f <Reg::readInt(char*, char*, int*)+0xc8>
c001af49:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001af4d:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001af50:	89 e9                	mov    ecx,ebp
c001af52:	80 f9 05             	cmp    cl,0x5
c001af55:	77 06                	ja     c001af5d <Reg::readInt(char*, char*, int*)+0xb6>
c001af57:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001af5b:	eb 16                	jmp    c001af73 <Reg::readInt(char*, char*, int*)+0xcc>
c001af5d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001af61:	83 e9 61             	sub    ecx,0x61
c001af64:	80 f9 05             	cmp    cl,0x5
c001af67:	77 06                	ja     c001af6f <Reg::readInt(char*, char*, int*)+0xc8>
c001af69:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001af6d:	eb 04                	jmp    c001af73 <Reg::readInt(char*, char*, int*)+0xcc>
c001af6f:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001af73:	47                   	inc    edi
c001af74:	eb ae                	jmp    c001af24 <Reg::readInt(char*, char*, int*)+0x7d>
c001af76:	84 c0                	test   al,al
c001af78:	74 02                	je     c001af7c <Reg::readInt(char*, char*, int*)+0xd5>
c001af7a:	f7 da                	neg    edx
c001af7c:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001af83:	89 10                	mov    DWORD PTR [eax],edx
c001af85:	88 d8                	mov    al,bl
c001af87:	81 c4 ec 00 00 00    	add    esp,0xec
c001af8d:	5b                   	pop    ebx
c001af8e:	5e                   	pop    esi
c001af8f:	5f                   	pop    edi
c001af90:	5d                   	pop    ebp
c001af91:	c3                   	ret    

c001af92 <Reg::readString(char*, char*, char*, int)>:
c001af92:	57                   	push   edi
c001af93:	56                   	push   esi
c001af94:	53                   	push   ebx
c001af95:	81 ec d4 00 00 00    	sub    esp,0xd4
c001af9b:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001afa2:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001afa6:	57                   	push   edi
c001afa7:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001afae:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001afb5:	e8 b6 fe ff ff       	call   c001ae70 <Reg::getLine(char*, char*, char*)>
c001afba:	83 c4 10             	add    esp,0x10
c001afbd:	89 c6                	mov    esi,eax
c001afbf:	84 c0                	test   al,al
c001afc1:	74 44                	je     c001b007 <Reg::readString(char*, char*, char*, int)+0x75>
c001afc3:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001afca:	31 c0                	xor    eax,eax
c001afcc:	4a                   	dec    edx
c001afcd:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001afd0:	84 c9                	test   cl,cl
c001afd2:	74 0f                	je     c001afe3 <Reg::readString(char*, char*, char*, int)+0x51>
c001afd4:	39 c2                	cmp    edx,eax
c001afd6:	7e 0b                	jle    c001afe3 <Reg::readString(char*, char*, char*, int)+0x51>
c001afd8:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001afdb:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001afe0:	40                   	inc    eax
c001afe1:	eb ea                	jmp    c001afcd <Reg::readString(char*, char*, char*, int)+0x3b>
c001afe3:	83 ec 0c             	sub    esp,0xc
c001afe6:	53                   	push   ebx
c001afe7:	e8 a8 57 fe ff       	call   c0000794 <strlen>
c001afec:	83 c4 10             	add    esp,0x10
c001afef:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001aff4:	75 11                	jne    c001b007 <Reg::readString(char*, char*, char*, int)+0x75>
c001aff6:	83 ec 0c             	sub    esp,0xc
c001aff9:	53                   	push   ebx
c001affa:	e8 95 57 fe ff       	call   c0000794 <strlen>
c001afff:	83 c4 10             	add    esp,0x10
c001b002:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b007:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b00d:	89 f0                	mov    eax,esi
c001b00f:	5b                   	pop    ebx
c001b010:	5e                   	pop    esi
c001b011:	5f                   	pop    edi
c001b012:	c3                   	ret    

c001b013 <Reg::readBool(char*, char*, bool*)>:
c001b013:	83 ec 20             	sub    esp,0x20
c001b016:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b01a:	50                   	push   eax
c001b01b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b01f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b023:	e8 7f fe ff ff       	call   c001aea7 <Reg::readInt(char*, char*, int*)>
c001b028:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b02d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b031:	0f 95 02             	setne  BYTE PTR [edx]
c001b034:	83 c4 2c             	add    esp,0x2c
c001b037:	c3                   	ret    

c001b038 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b038:	53                   	push   ebx
c001b039:	83 ec 1c             	sub    esp,0x1c
c001b03c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b040:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b044:	50                   	push   eax
c001b045:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b049:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b04d:	e8 c1 ff ff ff       	call   c001b013 <Reg::readBool(char*, char*, bool*)>
c001b052:	83 c4 10             	add    esp,0x10
c001b055:	84 c0                	test   al,al
c001b057:	74 04                	je     c001b05d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b059:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b05d:	88 d8                	mov    al,bl
c001b05f:	83 c4 18             	add    esp,0x18
c001b062:	5b                   	pop    ebx
c001b063:	c3                   	ret    

c001b064 <Reg::readIntWithDefault(char*, char*, int)>:
c001b064:	53                   	push   ebx
c001b065:	83 ec 1c             	sub    esp,0x1c
c001b068:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b06c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b070:	50                   	push   eax
c001b071:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b075:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b079:	e8 29 fe ff ff       	call   c001aea7 <Reg::readInt(char*, char*, int*)>
c001b07e:	83 c4 10             	add    esp,0x10
c001b081:	84 c0                	test   al,al
c001b083:	74 04                	je     c001b089 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b085:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b089:	89 d8                	mov    eax,ebx
c001b08b:	83 c4 18             	add    esp,0x18
c001b08e:	5b                   	pop    ebx
c001b08f:	c3                   	ret    

c001b090 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b090:	57                   	push   edi
c001b091:	56                   	push   esi
c001b092:	53                   	push   ebx
c001b093:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b097:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b09b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b09f:	56                   	push   esi
c001b0a0:	53                   	push   ebx
c001b0a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0a9:	e8 e4 fe ff ff       	call   c001af92 <Reg::readString(char*, char*, char*, int)>
c001b0ae:	83 c4 10             	add    esp,0x10
c001b0b1:	84 c0                	test   al,al
c001b0b3:	75 1b                	jne    c001b0d0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b0b5:	50                   	push   eax
c001b0b6:	56                   	push   esi
c001b0b7:	4e                   	dec    esi
c001b0b8:	6a 00                	push   0x0
c001b0ba:	53                   	push   ebx
c001b0bb:	e8 b8 56 fe ff       	call   c0000778 <memset>
c001b0c0:	83 c4 0c             	add    esp,0xc
c001b0c3:	56                   	push   esi
c001b0c4:	57                   	push   edi
c001b0c5:	53                   	push   ebx
c001b0c6:	89 fb                	mov    ebx,edi
c001b0c8:	e8 77 56 fe ff       	call   c0000744 <memcpy>
c001b0cd:	83 c4 10             	add    esp,0x10
c001b0d0:	89 d8                	mov    eax,ebx
c001b0d2:	5b                   	pop    ebx
c001b0d3:	5e                   	pop    esi
c001b0d4:	5f                   	pop    edi
c001b0d5:	c3                   	ret    

c001b0d6 <Sys::eject(regs*)>:
c001b0d6:	83 ec 0c             	sub    esp,0xc
c001b0d9:	83 ca ff             	or     edx,0xffffffff
c001b0dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0e0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b0e3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b0e8:	83 e9 41             	sub    ecx,0x41
c001b0eb:	83 f9 19             	cmp    ecx,0x19
c001b0ee:	77 18                	ja     c001b108 <Sys::eject(regs*)+0x32>
c001b0f0:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c001b0f7:	85 c9                	test   ecx,ecx
c001b0f9:	74 0d                	je     c001b108 <Sys::eject(regs*)+0x32>
c001b0fb:	83 ec 0c             	sub    esp,0xc
c001b0fe:	51                   	push   ecx
c001b0ff:	e8 74 b4 ff ff       	call   c0016578 <LogicalDisk::eject()>
c001b104:	83 c4 10             	add    esp,0x10
c001b107:	99                   	cdq    
c001b108:	83 c4 0c             	add    esp,0xc
c001b10b:	c3                   	ret    

c001b10c <Sys::exit(regs*)>:
c001b10c:	83 ec 18             	sub    esp,0x18
c001b10f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b113:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b116:	e8 99 35 00 00       	call   c001e6b4 <terminateTask(int)>
c001b11b:	83 c8 ff             	or     eax,0xffffffff
c001b11e:	83 c4 1c             	add    esp,0x1c
c001b121:	89 c2                	mov    edx,eax
c001b123:	c3                   	ret    

c001b124 <Sys::getCwd(regs*)>:
c001b124:	83 ec 10             	sub    esp,0x10
c001b127:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b12b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b12e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b131:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b136:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b139:	e8 b8 7f ff ff       	call   c00130f6 <Fs::getcwd(Process*, char*, int)>
c001b13e:	83 c4 1c             	add    esp,0x1c
c001b141:	99                   	cdq    
c001b142:	c3                   	ret    

c001b143 <Sys::getPID(regs*)>:
c001b143:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b148:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b14b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b14d:	99                   	cdq    
c001b14e:	c3                   	ret    

c001b14f <Sys::getRAMData(regs*)>:
c001b14f:	8b 0d 94 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e294
c001b155:	6b 05 90 e2 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e290,0x64
c001b15c:	99                   	cdq    
c001b15d:	f7 f9                	idiv   ecx
c001b15f:	c1 e0 18             	shl    eax,0x18
c001b162:	09 c8                	or     eax,ecx
c001b164:	99                   	cdq    
c001b165:	c3                   	ret    

c001b166 <Sys::loadDLL(regs*)>:
c001b166:	56                   	push   esi
c001b167:	53                   	push   ebx
c001b168:	31 d2                	xor    edx,edx
c001b16a:	51                   	push   ecx
c001b16b:	b8 01 00 00 00       	mov    eax,0x1
c001b170:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b174:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b178:	0f 84 8c 00 00 00    	je     c001b20a <Sys::loadDLL(regs*)+0xa4>
c001b17e:	83 ec 0c             	sub    esp,0xc
c001b181:	68 14 01 00 00       	push   0x114
c001b186:	e8 b8 46 ff ff       	call   c000f843 <malloc>
c001b18b:	83 c4 0c             	add    esp,0xc
c001b18e:	89 c3                	mov    ebx,eax
c001b190:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b195:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b198:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b19b:	53                   	push   ebx
c001b19c:	e8 53 81 ff ff       	call   c00132f4 <File::File(char const*, Process*)>
c001b1a1:	83 c4 10             	add    esp,0x10
c001b1a4:	31 d2                	xor    edx,edx
c001b1a6:	b8 02 00 00 00       	mov    eax,0x2
c001b1ab:	85 db                	test   ebx,ebx
c001b1ad:	74 5b                	je     c001b20a <Sys::loadDLL(regs*)+0xa4>
c001b1af:	83 ec 0c             	sub    esp,0xc
c001b1b2:	53                   	push   ebx
c001b1b3:	e8 0e 84 ff ff       	call   c00135c6 <File::exists()>
c001b1b8:	83 c4 10             	add    esp,0x10
c001b1bb:	84 c0                	test   al,al
c001b1bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1bf:	75 11                	jne    c001b1d2 <Sys::loadDLL(regs*)+0x6c>
c001b1c1:	83 ec 0c             	sub    esp,0xc
c001b1c4:	53                   	push   ebx
c001b1c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1c8:	83 c4 10             	add    esp,0x10
c001b1cb:	b8 03 00 00 00       	mov    eax,0x3
c001b1d0:	eb 36                	jmp    c001b208 <Sys::loadDLL(regs*)+0xa2>
c001b1d2:	83 ec 0c             	sub    esp,0xc
c001b1d5:	53                   	push   ebx
c001b1d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1d9:	58                   	pop    eax
c001b1da:	5a                   	pop    edx
c001b1db:	6a 00                	push   0x0
c001b1dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b1e0:	e8 c5 23 00 00       	call   c001d5aa <Thr::loadDLL(char const*, bool)>
c001b1e5:	83 c4 10             	add    esp,0x10
c001b1e8:	89 c1                	mov    ecx,eax
c001b1ea:	31 d2                	xor    edx,edx
c001b1ec:	b8 04 00 00 00       	mov    eax,0x4
c001b1f1:	85 c9                	test   ecx,ecx
c001b1f3:	74 15                	je     c001b20a <Sys::loadDLL(regs*)+0xa4>
c001b1f5:	53                   	push   ebx
c001b1f6:	53                   	push   ebx
c001b1f7:	ff 35 48 e2 02 c0    	push   DWORD PTR ds:0xc002e248
c001b1fd:	51                   	push   ecx
c001b1fe:	e8 f6 25 00 00       	call   c001d7f9 <Thr::executeDLL(unsigned long, void*)>
c001b203:	83 c4 10             	add    esp,0x10
c001b206:	31 c0                	xor    eax,eax
c001b208:	31 d2                	xor    edx,edx
c001b20a:	59                   	pop    ecx
c001b20b:	5b                   	pop    ebx
c001b20c:	5e                   	pop    esi
c001b20d:	c3                   	ret    

c001b20e <Sys::read(regs*)>:
c001b20e:	57                   	push   edi
c001b20f:	56                   	push   esi
c001b210:	53                   	push   ebx
c001b211:	83 ec 10             	sub    esp,0x10
c001b214:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b218:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b21b:	83 f8 02             	cmp    eax,0x2
c001b21e:	77 10                	ja     c001b230 <Sys::read(regs*)+0x22>
c001b220:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b225:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b228:	8b 88 26 19 00 00    	mov    ecx,DWORD PTR [eax+0x1926]
c001b22e:	eb 0e                	jmp    c001b23e <Sys::read(regs*)+0x30>
c001b230:	83 ec 0c             	sub    esp,0xc
c001b233:	50                   	push   eax
c001b234:	e8 b0 67 ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001b239:	83 c4 10             	add    esp,0x10
c001b23c:	89 c1                	mov    ecx,eax
c001b23e:	83 c8 ff             	or     eax,0xffffffff
c001b241:	85 c9                	test   ecx,ecx
c001b243:	89 c2                	mov    edx,eax
c001b245:	74 28                	je     c001b26f <Sys::read(regs*)+0x61>
c001b247:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b24f:	31 ff                	xor    edi,edi
c001b251:	83 ec 0c             	sub    esp,0xc
c001b254:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b256:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b25a:	52                   	push   edx
c001b25b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b25e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b261:	57                   	push   edi
c001b262:	56                   	push   esi
c001b263:	51                   	push   ecx
c001b264:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b267:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b26b:	83 c4 20             	add    esp,0x20
c001b26e:	99                   	cdq    
c001b26f:	83 c4 10             	add    esp,0x10
c001b272:	5b                   	pop    ebx
c001b273:	5e                   	pop    esi
c001b274:	5f                   	pop    edi
c001b275:	c3                   	ret    

c001b276 <Sys::sbrk(regs*)>:
c001b276:	56                   	push   esi
c001b277:	53                   	push   ebx
c001b278:	50                   	push   eax
c001b279:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b27e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b282:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b285:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b288:	8b 88 32 19 00 00    	mov    ecx,DWORD PTR [eax+0x1932]
c001b28e:	85 db                	test   ebx,ebx
c001b290:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b293:	74 02                	je     c001b297 <Sys::sbrk(regs*)+0x21>
c001b295:	79 06                	jns    c001b29d <Sys::sbrk(regs*)+0x27>
c001b297:	89 f0                	mov    eax,esi
c001b299:	31 d2                	xor    edx,edx
c001b29b:	eb 2a                	jmp    c001b2c7 <Sys::sbrk(regs*)+0x51>
c001b29d:	83 c8 ff             	or     eax,0xffffffff
c001b2a0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b2a6:	89 c2                	mov    edx,eax
c001b2a8:	77 1d                	ja     c001b2c7 <Sys::sbrk(regs*)+0x51>
c001b2aa:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b2b0:	50                   	push   eax
c001b2b1:	c1 ea 0c             	shr    edx,0xc
c001b2b4:	68 07 0c 00 00       	push   0xc07
c001b2b9:	52                   	push   edx
c001b2ba:	51                   	push   ecx
c001b2bb:	e8 48 70 ff ff       	call   c0012308 <VAS::allocatePages(int, int)>
c001b2c0:	89 f0                	mov    eax,esi
c001b2c2:	31 d2                	xor    edx,edx
c001b2c4:	83 c4 10             	add    esp,0x10
c001b2c7:	59                   	pop    ecx
c001b2c8:	5b                   	pop    ebx
c001b2c9:	5e                   	pop    esi
c001b2ca:	c3                   	ret    

c001b2cb <Sys::setCwd(regs*)>:
c001b2cb:	83 ec 14             	sub    esp,0x14
c001b2ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2d2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2da:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2dd:	e8 83 83 ff ff       	call   c0013665 <Fs::setcwd(Process*, char*)>
c001b2e2:	83 c4 1c             	add    esp,0x1c
c001b2e5:	99                   	cdq    
c001b2e6:	c3                   	ret    

c001b2e7 <Sys::setTime(regs*)>:
c001b2e7:	55                   	push   ebp
c001b2e8:	31 d2                	xor    edx,edx
c001b2ea:	57                   	push   edi
c001b2eb:	bf 18 00 00 00       	mov    edi,0x18
c001b2f0:	56                   	push   esi
c001b2f1:	53                   	push   ebx
c001b2f2:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b2f7:	83 ec 30             	sub    esp,0x30
c001b2fa:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b2fe:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b301:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b304:	f7 f3                	div    ebx
c001b306:	89 d6                	mov    esi,edx
c001b308:	31 d2                	xor    edx,edx
c001b30a:	f7 f3                	div    ebx
c001b30c:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b30f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b313:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b318:	31 d2                	xor    edx,edx
c001b31a:	f7 f3                	div    ebx
c001b31c:	31 d2                	xor    edx,edx
c001b31e:	bb 0c 00 00 00       	mov    ebx,0xc
c001b323:	f7 f7                	div    edi
c001b325:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b328:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b32c:	0f b7 cd             	movzx  ecx,bp
c001b32f:	56                   	push   esi
c001b330:	89 c7                	mov    edi,eax
c001b332:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b336:	c1 e6 10             	shl    esi,0x10
c001b339:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b33d:	83 e7 1f             	and    edi,0x1f
c001b340:	51                   	push   ecx
c001b341:	47                   	inc    edi
c001b342:	c1 e8 05             	shr    eax,0x5
c001b345:	31 d2                	xor    edx,edx
c001b347:	f7 f3                	div    ebx
c001b349:	31 db                	xor    ebx,ebx
c001b34b:	52                   	push   edx
c001b34c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b350:	57                   	push   edi
c001b351:	68 69 bb 02 c0       	push   0xc002bb69
c001b356:	e8 41 7a ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001b35b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b35f:	89 f8                	mov    eax,edi
c001b361:	31 c9                	xor    ecx,ecx
c001b363:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b367:	88 c1                	mov    cl,al
c001b369:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b36f:	88 d5                	mov    ch,dl
c001b371:	c1 e0 10             	shl    eax,0x10
c001b374:	0f b7 d1             	movzx  edx,cx
c001b377:	09 c2                	or     edx,eax
c001b379:	89 d8                	mov    eax,ebx
c001b37b:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b380:	09 f0                	or     eax,esi
c001b382:	89 c3                	mov    ebx,eax
c001b384:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b388:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b38c:	83 c4 18             	add    esp,0x18
c001b38f:	53                   	push   ebx
c001b390:	52                   	push   edx
c001b391:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b395:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b399:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b39d:	e8 dd 89 ff ff       	call   c0013d7f <datetimeToSeconds(datetime_t)>
c001b3a2:	83 c4 0c             	add    esp,0xc
c001b3a5:	52                   	push   edx
c001b3a6:	50                   	push   eax
c001b3a7:	56                   	push   esi
c001b3a8:	e8 59 8b ff ff       	call   c0013f06 <secondsToDatetime(unsigned long long)>
c001b3ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b3b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b3b5:	51                   	push   ecx
c001b3b6:	89 d6                	mov    esi,edx
c001b3b8:	51                   	push   ecx
c001b3b9:	c1 ee 10             	shr    esi,0x10
c001b3bc:	89 f3                	mov    ebx,esi
c001b3be:	0f b6 f3             	movzx  esi,bl
c001b3c1:	56                   	push   esi
c001b3c2:	0f b6 f6             	movzx  esi,dh
c001b3c5:	0f b6 d2             	movzx  edx,dl
c001b3c8:	56                   	push   esi
c001b3c9:	52                   	push   edx
c001b3ca:	89 c2                	mov    edx,eax
c001b3cc:	c1 ea 10             	shr    edx,0x10
c001b3cf:	52                   	push   edx
c001b3d0:	0f b6 d4             	movzx  edx,ah
c001b3d3:	0f b6 c0             	movzx  eax,al
c001b3d6:	52                   	push   edx
c001b3d7:	50                   	push   eax
c001b3d8:	68 85 bb 02 c0       	push   0xc002bb85
c001b3dd:	e8 ba 79 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001b3e2:	83 c4 2c             	add    esp,0x2c
c001b3e5:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001b3ea:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b3ee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b3f2:	53                   	push   ebx
c001b3f3:	51                   	push   ecx
c001b3f4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b3fa:	e8 a7 8a ff ff       	call   c0013ea6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b3ff:	83 f0 01             	xor    eax,0x1
c001b402:	31 d2                	xor    edx,edx
c001b404:	0f b6 c0             	movzx  eax,al
c001b407:	83 c4 3c             	add    esp,0x3c
c001b40a:	5b                   	pop    ebx
c001b40b:	5e                   	pop    esi
c001b40c:	5f                   	pop    edi
c001b40d:	5d                   	pop    ebp
c001b40e:	c3                   	ret    

c001b40f <Sys::timezone(regs*)>:
c001b40f:	53                   	push   ebx
c001b410:	83 ec 08             	sub    esp,0x8
c001b413:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b417:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b41b:	75 17                	jne    c001b434 <Sys::timezone(regs*)+0x25>
c001b41d:	83 ec 0c             	sub    esp,0xc
c001b420:	68 a1 bb 02 c0       	push   0xc002bba1
c001b425:	e8 72 79 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001b42a:	83 c8 ff             	or     eax,0xffffffff
c001b42d:	83 c4 10             	add    esp,0x10
c001b430:	89 c2                	mov    edx,eax
c001b432:	eb 20                	jmp    c001b454 <Sys::timezone(regs*)+0x45>
c001b434:	83 ec 0c             	sub    esp,0xc
c001b437:	68 d9 bb 02 c0       	push   0xc002bbd9
c001b43c:	e8 5b 79 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001b441:	58                   	pop    eax
c001b442:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b445:	e8 be 87 ff ff       	call   c0013c08 <User::loadClockSettings(int)>
c001b44a:	83 c4 10             	add    esp,0x10
c001b44d:	b8 01 00 00 00       	mov    eax,0x1
c001b452:	31 d2                	xor    edx,edx
c001b454:	83 c4 08             	add    esp,0x8
c001b457:	5b                   	pop    ebx
c001b458:	c3                   	ret    

c001b459 <Sys::write(regs*)>:
c001b459:	57                   	push   edi
c001b45a:	56                   	push   esi
c001b45b:	53                   	push   ebx
c001b45c:	83 ec 10             	sub    esp,0x10
c001b45f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b463:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b466:	83 f8 02             	cmp    eax,0x2
c001b469:	77 10                	ja     c001b47b <Sys::write(regs*)+0x22>
c001b46b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b470:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b473:	8b 88 26 19 00 00    	mov    ecx,DWORD PTR [eax+0x1926]
c001b479:	eb 0e                	jmp    c001b489 <Sys::write(regs*)+0x30>
c001b47b:	83 ec 0c             	sub    esp,0xc
c001b47e:	50                   	push   eax
c001b47f:	e8 65 65 ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001b484:	83 c4 10             	add    esp,0x10
c001b487:	89 c1                	mov    ecx,eax
c001b489:	83 c8 ff             	or     eax,0xffffffff
c001b48c:	85 c9                	test   ecx,ecx
c001b48e:	89 c2                	mov    edx,eax
c001b490:	74 28                	je     c001b4ba <Sys::write(regs*)+0x61>
c001b492:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b49a:	31 ff                	xor    edi,edi
c001b49c:	83 ec 0c             	sub    esp,0xc
c001b49f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b4a1:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b4a5:	52                   	push   edx
c001b4a6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b4a9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b4ac:	57                   	push   edi
c001b4ad:	56                   	push   esi
c001b4ae:	51                   	push   ecx
c001b4af:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b4b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b4b6:	83 c4 20             	add    esp,0x20
c001b4b9:	99                   	cdq    
c001b4ba:	83 c4 10             	add    esp,0x10
c001b4bd:	5b                   	pop    ebx
c001b4be:	5e                   	pop    esi
c001b4bf:	5f                   	pop    edi
c001b4c0:	c3                   	ret    

c001b4c1 <Sys::wsbe(regs*)>:
c001b4c1:	57                   	push   edi
c001b4c2:	b9 0b 00 00 00       	mov    ecx,0xb
c001b4c7:	56                   	push   esi
c001b4c8:	be 18 bc 02 c0       	mov    esi,0xc002bc18
c001b4cd:	53                   	push   ebx
c001b4ce:	83 ec 30             	sub    esp,0x30
c001b4d1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b4d5:	fc                   	cld    
c001b4d6:	83 ec 0c             	sub    esp,0xc
c001b4d9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b4db:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b4df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4e4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4e7:	8b b0 26 19 00 00    	mov    esi,DWORD PTR [eax+0x1926]
c001b4ed:	8b 06                	mov    eax,DWORD PTR [esi]
c001b4ef:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b4f2:	57                   	push   edi
c001b4f3:	e8 9c 52 fe ff       	call   c0000794 <strlen>
c001b4f8:	5a                   	pop    edx
c001b4f9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b4fd:	52                   	push   edx
c001b4fe:	31 d2                	xor    edx,edx
c001b500:	57                   	push   edi
c001b501:	52                   	push   edx
c001b502:	50                   	push   eax
c001b503:	56                   	push   esi
c001b504:	ff d3                	call   ebx
c001b506:	83 c4 14             	add    esp,0x14
c001b509:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b50d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b510:	e8 9f 31 00 00       	call   c001e6b4 <terminateTask(int)>
c001b515:	83 c4 40             	add    esp,0x40
c001b518:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b51d:	5b                   	pop    ebx
c001b51e:	31 d2                	xor    edx,edx
c001b520:	5e                   	pop    esi
c001b521:	5f                   	pop    edi
c001b522:	c3                   	ret    

c001b523 <Sys::yield(regs*)>:
c001b523:	57                   	push   edi
c001b524:	56                   	push   esi
c001b525:	53                   	push   ebx
c001b526:	e8 46 27 00 00       	call   c001dc71 <lockScheduler()>
c001b52b:	e8 7c 2a 00 00       	call   c001dfac <schedule()>
c001b530:	e8 3e 27 00 00       	call   c001dc73 <unlockScheduler()>
c001b535:	8b 35 d0 e8 02 c0    	mov    esi,DWORD PTR ds:0xc002e8d0
c001b53b:	8b 3d d4 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e8d4
c001b541:	89 f0                	mov    eax,esi
c001b543:	89 fb                	mov    ebx,edi
c001b545:	89 f1                	mov    ecx,esi
c001b547:	c1 e0 07             	shl    eax,0x7
c001b54a:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b54e:	25 80 30 0f 00       	and    eax,0xf3080
c001b553:	c1 eb 17             	shr    ebx,0x17
c001b556:	31 c8                	xor    eax,ecx
c001b558:	89 da                	mov    edx,ebx
c001b55a:	5b                   	pop    ebx
c001b55b:	5e                   	pop    esi
c001b55c:	5f                   	pop    edi
c001b55d:	c3                   	ret    

c001b55e <sysCallSeekDir(regs*)>:
c001b55e:	31 c0                	xor    eax,eax
c001b560:	31 d2                	xor    edx,edx
c001b562:	c3                   	ret    

c001b563 <sysCallTellDir(regs*)>:
c001b563:	31 c0                	xor    eax,eax
c001b565:	31 d2                	xor    edx,edx
c001b567:	c3                   	ret    

c001b568 <sysCallVerify(regs*)>:
c001b568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b56c:	31 d2                	xor    edx,edx
c001b56e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b571:	c3                   	ret    

c001b572 <sysFormatDisk(regs*)>:
c001b572:	56                   	push   esi
c001b573:	53                   	push   ebx
c001b574:	53                   	push   ebx
c001b575:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b579:	8b 1d d0 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3d0
c001b57f:	eb 25                	jmp    c001b5a6 <sysFormatDisk(regs*)+0x34>
c001b581:	83 ec 0c             	sub    esp,0xc
c001b584:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b587:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b589:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b58c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b58f:	50                   	push   eax
c001b590:	ff 34 85 60 e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd17a0]
c001b597:	53                   	push   ebx
c001b598:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b59b:	83 c4 20             	add    esp,0x20
c001b59e:	83 f8 08             	cmp    eax,0x8
c001b5a1:	75 12                	jne    c001b5b5 <sysFormatDisk(regs*)+0x43>
c001b5a3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b5a6:	85 db                	test   ebx,ebx
c001b5a8:	75 d7                	jne    c001b581 <sysFormatDisk(regs*)+0xf>
c001b5aa:	59                   	pop    ecx
c001b5ab:	b8 03 00 00 00       	mov    eax,0x3
c001b5b0:	31 d2                	xor    edx,edx
c001b5b2:	5b                   	pop    ebx
c001b5b3:	5e                   	pop    esi
c001b5b4:	c3                   	ret    
c001b5b5:	85 c0                	test   eax,eax
c001b5b7:	74 1b                	je     c001b5d4 <sysFormatDisk(regs*)+0x62>
c001b5b9:	83 f8 09             	cmp    eax,0x9
c001b5bc:	74 0b                	je     c001b5c9 <sysFormatDisk(regs*)+0x57>
c001b5be:	59                   	pop    ecx
c001b5bf:	b8 02 00 00 00       	mov    eax,0x2
c001b5c4:	31 d2                	xor    edx,edx
c001b5c6:	5b                   	pop    ebx
c001b5c7:	5e                   	pop    esi
c001b5c8:	c3                   	ret    
c001b5c9:	59                   	pop    ecx
c001b5ca:	b8 01 00 00 00       	mov    eax,0x1
c001b5cf:	31 d2                	xor    edx,edx
c001b5d1:	5b                   	pop    ebx
c001b5d2:	5e                   	pop    esi
c001b5d3:	c3                   	ret    
c001b5d4:	59                   	pop    ecx
c001b5d5:	31 c0                	xor    eax,eax
c001b5d7:	31 d2                	xor    edx,edx
c001b5d9:	5b                   	pop    ebx
c001b5da:	5e                   	pop    esi
c001b5db:	c3                   	ret    

c001b5dc <sysSetDiskVolumeLabel(regs*)>:
c001b5dc:	56                   	push   esi
c001b5dd:	53                   	push   ebx
c001b5de:	53                   	push   ebx
c001b5df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b5e3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b5e6:	83 f8 19             	cmp    eax,0x19
c001b5e9:	77 29                	ja     c001b614 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b5eb:	8b 0c 85 60 e8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd17a0]
c001b5f2:	85 c9                	test   ecx,ecx
c001b5f4:	74 1e                	je     c001b614 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b5f6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b5f9:	85 d2                	test   edx,edx
c001b5fb:	74 17                	je     c001b614 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b5fd:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b603:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b605:	52                   	push   edx
c001b606:	50                   	push   eax
c001b607:	51                   	push   ecx
c001b608:	53                   	push   ebx
c001b609:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b60c:	83 c4 10             	add    esp,0x10
c001b60f:	99                   	cdq    
c001b610:	59                   	pop    ecx
c001b611:	5b                   	pop    ebx
c001b612:	5e                   	pop    esi
c001b613:	c3                   	ret    
c001b614:	59                   	pop    ecx
c001b615:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b61a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b61f:	5b                   	pop    ebx
c001b620:	5e                   	pop    esi
c001b621:	c3                   	ret    

c001b622 <sysGetDiskVolumeLabel(regs*)>:
c001b622:	57                   	push   edi
c001b623:	56                   	push   esi
c001b624:	53                   	push   ebx
c001b625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b629:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b62c:	83 fa 19             	cmp    edx,0x19
c001b62f:	77 34                	ja     c001b665 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b631:	8b 0c 95 60 e8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd17a0]
c001b638:	85 c9                	test   ecx,ecx
c001b63a:	74 29                	je     c001b665 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b63c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b63f:	85 db                	test   ebx,ebx
c001b641:	74 22                	je     c001b665 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b643:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b646:	85 c0                	test   eax,eax
c001b648:	74 1b                	je     c001b665 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b64a:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b650:	83 ec 0c             	sub    esp,0xc
c001b653:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b655:	50                   	push   eax
c001b656:	53                   	push   ebx
c001b657:	52                   	push   edx
c001b658:	51                   	push   ecx
c001b659:	56                   	push   esi
c001b65a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b65d:	83 c4 20             	add    esp,0x20
c001b660:	99                   	cdq    
c001b661:	5b                   	pop    ebx
c001b662:	5e                   	pop    esi
c001b663:	5f                   	pop    edi
c001b664:	c3                   	ret    
c001b665:	5b                   	pop    ebx
c001b666:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b66b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b670:	5e                   	pop    esi
c001b671:	5f                   	pop    edi
c001b672:	c3                   	ret    

c001b673 <sysShutdown(regs*)>:
c001b673:	83 ec 0c             	sub    esp,0xc
c001b676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b67a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b67d:	85 c0                	test   eax,eax
c001b67f:	74 18                	je     c001b699 <sysShutdown(regs*)+0x26>
c001b681:	83 f8 01             	cmp    eax,0x1
c001b684:	74 38                	je     c001b6be <sysShutdown(regs*)+0x4b>
c001b686:	83 f8 02             	cmp    eax,0x2
c001b689:	74 24                	je     c001b6af <sysShutdown(regs*)+0x3c>
c001b68b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b690:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b695:	83 c4 0c             	add    esp,0xc
c001b698:	c3                   	ret    
c001b699:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001b69e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b6a0:	6a 00                	push   0x0
c001b6a2:	6a 00                	push   0x0
c001b6a4:	6a 00                	push   0x0
c001b6a6:	50                   	push   eax
c001b6a7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b6aa:	83 c4 10             	add    esp,0x10
c001b6ad:	eb dc                	jmp    c001b68b <sysShutdown(regs*)+0x18>
c001b6af:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001b6b4:	8b 10                	mov    edx,DWORD PTR [eax]
c001b6b6:	6a 00                	push   0x0
c001b6b8:	6a 00                	push   0x0
c001b6ba:	6a 01                	push   0x1
c001b6bc:	eb e8                	jmp    c001b6a6 <sysShutdown(regs*)+0x33>
c001b6be:	a1 00 09 03 c0       	mov    eax,ds:0xc0030900
c001b6c3:	85 c0                	test   eax,eax
c001b6c5:	74 02                	je     c001b6c9 <sysShutdown(regs*)+0x56>
c001b6c7:	ff d0                	call   eax
c001b6c9:	31 c0                	xor    eax,eax
c001b6cb:	31 d2                	xor    edx,edx
c001b6cd:	83 c4 0c             	add    esp,0xc
c001b6d0:	c3                   	ret    

c001b6d1 <sysCallRealpath(regs*)>:
c001b6d1:	83 ec 0c             	sub    esp,0xc
c001b6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6d8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b6db:	85 d2                	test   edx,edx
c001b6dd:	74 07                	je     c001b6e6 <sysCallRealpath(regs*)+0x15>
c001b6df:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b6e2:	85 c0                	test   eax,eax
c001b6e4:	75 0b                	jne    c001b6f1 <sysCallRealpath(regs*)+0x20>
c001b6e6:	b8 01 00 00 00       	mov    eax,0x1
c001b6eb:	31 d2                	xor    edx,edx
c001b6ed:	83 c4 0c             	add    esp,0xc
c001b6f0:	c3                   	ret    
c001b6f1:	51                   	push   ecx
c001b6f2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b6f8:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b6fb:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b701:	51                   	push   ecx
c001b702:	52                   	push   edx
c001b703:	50                   	push   eax
c001b704:	e8 41 7a ff ff       	call   c001314a <Fs::standardiseFiles(char*, char const*, char const*)>
c001b709:	83 c4 10             	add    esp,0x10
c001b70c:	31 c0                	xor    eax,eax
c001b70e:	31 d2                	xor    edx,edx
c001b710:	83 c4 0c             	add    esp,0xc
c001b713:	c3                   	ret    

c001b714 <sysCallGetArgc(regs*)>:
c001b714:	83 ec 14             	sub    esp,0x14
c001b717:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b71c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b71f:	ff b0 36 19 00 00    	push   DWORD PTR [eax+0x1936]
c001b725:	68 44 bc 02 c0       	push   0xc002bc44
c001b72a:	e8 6d 76 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001b72f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b734:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b737:	8b 80 36 19 00 00    	mov    eax,DWORD PTR [eax+0x1936]
c001b73d:	83 c4 1c             	add    esp,0x1c
c001b740:	99                   	cdq    
c001b741:	c3                   	ret    

c001b742 <sysCallReadDir(regs*)>:
c001b742:	53                   	push   ebx
c001b743:	83 ec 18             	sub    esp,0x18
c001b746:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b74a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b74d:	83 f8 02             	cmp    eax,0x2
c001b750:	76 53                	jbe    c001b7a5 <sysCallReadDir(regs*)+0x63>
c001b752:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b755:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b75b:	77 4f                	ja     c001b7ac <sysCallReadDir(regs*)+0x6a>
c001b75d:	83 ec 0c             	sub    esp,0xc
c001b760:	50                   	push   eax
c001b761:	e8 83 62 ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001b766:	83 c4 10             	add    esp,0x10
c001b769:	85 c0                	test   eax,eax
c001b76b:	74 50                	je     c001b7bd <sysCallReadDir(regs*)+0x7b>
c001b76d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b775:	83 ec 0c             	sub    esp,0xc
c001b778:	8b 10                	mov    edx,DWORD PTR [eax]
c001b77a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b77e:	51                   	push   ecx
c001b77f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b782:	6a 00                	push   0x0
c001b784:	68 10 01 00 00       	push   0x110
c001b789:	50                   	push   eax
c001b78a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b78d:	83 c4 20             	add    esp,0x20
c001b790:	85 c0                	test   eax,eax
c001b792:	74 38                	je     c001b7cc <sysCallReadDir(regs*)+0x8a>
c001b794:	83 f8 07             	cmp    eax,0x7
c001b797:	74 0c                	je     c001b7a5 <sysCallReadDir(regs*)+0x63>
c001b799:	b8 02 00 00 00       	mov    eax,0x2
c001b79e:	31 d2                	xor    edx,edx
c001b7a0:	83 c4 18             	add    esp,0x18
c001b7a3:	5b                   	pop    ebx
c001b7a4:	c3                   	ret    
c001b7a5:	b8 01 00 00 00       	mov    eax,0x1
c001b7aa:	eb f2                	jmp    c001b79e <sysCallReadDir(regs*)+0x5c>
c001b7ac:	83 ec 08             	sub    esp,0x8
c001b7af:	52                   	push   edx
c001b7b0:	68 5c bd 02 c0       	push   0xc002bd5c
c001b7b5:	e8 e2 75 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001b7ba:	83 c4 10             	add    esp,0x10
c001b7bd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7c2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7c7:	83 c4 18             	add    esp,0x18
c001b7ca:	5b                   	pop    ebx
c001b7cb:	c3                   	ret    
c001b7cc:	31 c0                	xor    eax,eax
c001b7ce:	eb ce                	jmp    c001b79e <sysCallReadDir(regs*)+0x5c>

c001b7d0 <sysCallIsATTY(regs*)>:
c001b7d0:	83 ec 0c             	sub    esp,0xc
c001b7d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7d7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7da:	83 f8 02             	cmp    eax,0x2
c001b7dd:	76 07                	jbe    c001b7e6 <sysCallIsATTY(regs*)+0x16>
c001b7df:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b7e4:	75 26                	jne    c001b80c <sysCallIsATTY(regs*)+0x3c>
c001b7e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7eb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7ee:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001b7f4:	85 c0                	test   eax,eax
c001b7f6:	74 24                	je     c001b81c <sysCallIsATTY(regs*)+0x4c>
c001b7f8:	83 ec 0c             	sub    esp,0xc
c001b7fb:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7fd:	50                   	push   eax
c001b7fe:	ff 12                	call   DWORD PTR [edx]
c001b800:	31 d2                	xor    edx,edx
c001b802:	0f b6 c0             	movzx  eax,al
c001b805:	83 c4 10             	add    esp,0x10
c001b808:	83 c4 0c             	add    esp,0xc
c001b80b:	c3                   	ret    
c001b80c:	83 ec 0c             	sub    esp,0xc
c001b80f:	50                   	push   eax
c001b810:	e8 d4 61 ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001b815:	83 c4 10             	add    esp,0x10
c001b818:	85 c0                	test   eax,eax
c001b81a:	75 dc                	jne    c001b7f8 <sysCallIsATTY(regs*)+0x28>
c001b81c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b821:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b826:	83 c4 0c             	add    esp,0xc
c001b829:	c3                   	ret    

c001b82a <sysCallSeek(regs*)>:
c001b82a:	53                   	push   ebx
c001b82b:	83 ec 08             	sub    esp,0x8
c001b82e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b832:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b835:	83 f8 02             	cmp    eax,0x2
c001b838:	76 4a                	jbe    c001b884 <sysCallSeek(regs*)+0x5a>
c001b83a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b83f:	77 32                	ja     c001b873 <sysCallSeek(regs*)+0x49>
c001b841:	83 ec 0c             	sub    esp,0xc
c001b844:	50                   	push   eax
c001b845:	e8 9f 61 ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001b84a:	83 c4 0c             	add    esp,0xc
c001b84d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b850:	31 db                	xor    ebx,ebx
c001b852:	53                   	push   ebx
c001b853:	51                   	push   ecx
c001b854:	50                   	push   eax
c001b855:	e8 bc 7b ff ff       	call   c0013416 <File::seek(unsigned long long)>
c001b85a:	83 c4 10             	add    esp,0x10
c001b85d:	85 c0                	test   eax,eax
c001b85f:	0f 95 c0             	setne  al
c001b862:	31 d2                	xor    edx,edx
c001b864:	0f b6 c0             	movzx  eax,al
c001b867:	f7 d8                	neg    eax
c001b869:	83 d2 00             	adc    edx,0x0
c001b86c:	83 c4 08             	add    esp,0x8
c001b86f:	f7 da                	neg    edx
c001b871:	5b                   	pop    ebx
c001b872:	c3                   	ret    
c001b873:	83 ec 08             	sub    esp,0x8
c001b876:	50                   	push   eax
c001b877:	68 4f bc 02 c0       	push   0xc002bc4f
c001b87c:	e8 1b 75 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001b881:	83 c4 10             	add    esp,0x10
c001b884:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b889:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b88e:	83 c4 08             	add    esp,0x8
c001b891:	5b                   	pop    ebx
c001b892:	c3                   	ret    

c001b893 <sysCallTell(regs*)>:
c001b893:	53                   	push   ebx
c001b894:	83 ec 08             	sub    esp,0x8
c001b897:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b89b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b89e:	83 f8 02             	cmp    eax,0x2
c001b8a1:	76 5e                	jbe    c001b901 <sysCallTell(regs*)+0x6e>
c001b8a3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b8a8:	77 2d                	ja     c001b8d7 <sysCallTell(regs*)+0x44>
c001b8aa:	83 ec 0c             	sub    esp,0xc
c001b8ad:	50                   	push   eax
c001b8ae:	e8 36 61 ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001b8b3:	5a                   	pop    edx
c001b8b4:	59                   	pop    ecx
c001b8b5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b8b8:	50                   	push   eax
c001b8b9:	e8 ae 7b ff ff       	call   c001346c <File::tell(unsigned long long*)>
c001b8be:	83 c4 10             	add    esp,0x10
c001b8c1:	85 c0                	test   eax,eax
c001b8c3:	0f 95 c0             	setne  al
c001b8c6:	31 d2                	xor    edx,edx
c001b8c8:	0f b6 c0             	movzx  eax,al
c001b8cb:	f7 d8                	neg    eax
c001b8cd:	83 d2 00             	adc    edx,0x0
c001b8d0:	83 c4 08             	add    esp,0x8
c001b8d3:	f7 da                	neg    edx
c001b8d5:	5b                   	pop    ebx
c001b8d6:	c3                   	ret    
c001b8d7:	83 ec 08             	sub    esp,0x8
c001b8da:	50                   	push   eax
c001b8db:	68 69 bc 02 c0       	push   0xc002bc69
c001b8e0:	e8 b7 74 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001b8e5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8e8:	83 c4 10             	add    esp,0x10
c001b8eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b8f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b8f8:	31 d2                	xor    edx,edx
c001b8fa:	31 c0                	xor    eax,eax
c001b8fc:	83 c4 08             	add    esp,0x8
c001b8ff:	5b                   	pop    ebx
c001b900:	c3                   	ret    
c001b901:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b906:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b90b:	83 c4 08             	add    esp,0x8
c001b90e:	5b                   	pop    ebx
c001b90f:	c3                   	ret    

c001b910 <sysCallSize(regs*)>:
c001b910:	53                   	push   ebx
c001b911:	83 ec 18             	sub    esp,0x18
c001b914:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b918:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b91b:	83 f8 02             	cmp    eax,0x2
c001b91e:	76 64                	jbe    c001b984 <sysCallSize(regs*)+0x74>
c001b920:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b925:	77 33                	ja     c001b95a <sysCallSize(regs*)+0x4a>
c001b927:	83 ec 0c             	sub    esp,0xc
c001b92a:	50                   	push   eax
c001b92b:	e8 b9 60 ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001b930:	83 c4 0c             	add    esp,0xc
c001b933:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b937:	52                   	push   edx
c001b938:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b93b:	50                   	push   eax
c001b93c:	e8 c3 7c ff ff       	call   c0013604 <File::stat(unsigned long long*, bool*)>
c001b941:	83 c4 10             	add    esp,0x10
c001b944:	85 c0                	test   eax,eax
c001b946:	0f 95 c0             	setne  al
c001b949:	31 d2                	xor    edx,edx
c001b94b:	0f b6 c0             	movzx  eax,al
c001b94e:	f7 d8                	neg    eax
c001b950:	83 d2 00             	adc    edx,0x0
c001b953:	83 c4 18             	add    esp,0x18
c001b956:	f7 da                	neg    edx
c001b958:	5b                   	pop    ebx
c001b959:	c3                   	ret    
c001b95a:	83 ec 08             	sub    esp,0x8
c001b95d:	50                   	push   eax
c001b95e:	68 83 bc 02 c0       	push   0xc002bc83
c001b963:	e8 34 74 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001b968:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b96b:	83 c4 10             	add    esp,0x10
c001b96e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b974:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b97b:	31 d2                	xor    edx,edx
c001b97d:	31 c0                	xor    eax,eax
c001b97f:	83 c4 18             	add    esp,0x18
c001b982:	5b                   	pop    ebx
c001b983:	c3                   	ret    
c001b984:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b989:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b98e:	83 c4 18             	add    esp,0x18
c001b991:	5b                   	pop    ebx
c001b992:	c3                   	ret    

c001b993 <sysCallSizeFromFilename(regs*)>:
c001b993:	57                   	push   edi
c001b994:	56                   	push   esi
c001b995:	53                   	push   ebx
c001b996:	83 ec 20             	sub    esp,0x20
c001b999:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b99d:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b9a0:	83 fb 02             	cmp    ebx,0x2
c001b9a3:	0f 86 99 00 00 00    	jbe    c001ba42 <sysCallSizeFromFilename(regs*)+0xaf>
c001b9a9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b9af:	77 65                	ja     c001ba16 <sysCallSizeFromFilename(regs*)+0x83>
c001b9b1:	83 ec 0c             	sub    esp,0xc
c001b9b4:	68 14 01 00 00       	push   0x114
c001b9b9:	e8 85 3e ff ff       	call   c000f843 <malloc>
c001b9be:	83 c4 0c             	add    esp,0xc
c001b9c1:	89 c6                	mov    esi,eax
c001b9c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9c8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9cb:	53                   	push   ebx
c001b9cc:	56                   	push   esi
c001b9cd:	e8 22 79 ff ff       	call   c00132f4 <File::File(char const*, Process*)>
c001b9d2:	83 c4 0c             	add    esp,0xc
c001b9d5:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b9d9:	50                   	push   eax
c001b9da:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b9dd:	56                   	push   esi
c001b9de:	e8 21 7c ff ff       	call   c0013604 <File::stat(unsigned long long*, bool*)>
c001b9e3:	83 c4 10             	add    esp,0x10
c001b9e6:	85 f6                	test   esi,esi
c001b9e8:	74 14                	je     c001b9fe <sysCallSizeFromFilename(regs*)+0x6b>
c001b9ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9ee:	8b 16                	mov    edx,DWORD PTR [esi]
c001b9f0:	83 ec 0c             	sub    esp,0xc
c001b9f3:	56                   	push   esi
c001b9f4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b9f7:	83 c4 10             	add    esp,0x10
c001b9fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9fe:	85 c0                	test   eax,eax
c001ba00:	0f 95 c0             	setne  al
c001ba03:	31 d2                	xor    edx,edx
c001ba05:	0f b6 c0             	movzx  eax,al
c001ba08:	f7 d8                	neg    eax
c001ba0a:	83 d2 00             	adc    edx,0x0
c001ba0d:	83 c4 20             	add    esp,0x20
c001ba10:	f7 da                	neg    edx
c001ba12:	5b                   	pop    ebx
c001ba13:	5e                   	pop    esi
c001ba14:	5f                   	pop    edi
c001ba15:	c3                   	ret    
c001ba16:	83 ec 08             	sub    esp,0x8
c001ba19:	53                   	push   ebx
c001ba1a:	68 83 bc 02 c0       	push   0xc002bc83
c001ba1f:	e8 78 73 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001ba24:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001ba27:	83 c4 10             	add    esp,0x10
c001ba2a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba37:	31 d2                	xor    edx,edx
c001ba39:	83 c4 20             	add    esp,0x20
c001ba3c:	31 c0                	xor    eax,eax
c001ba3e:	5b                   	pop    ebx
c001ba3f:	5e                   	pop    esi
c001ba40:	5f                   	pop    edi
c001ba41:	c3                   	ret    
c001ba42:	83 c4 20             	add    esp,0x20
c001ba45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba4a:	5b                   	pop    ebx
c001ba4b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba50:	5e                   	pop    esi
c001ba51:	5f                   	pop    edi
c001ba52:	c3                   	ret    

c001ba53 <sysCallClose(regs*)>:
c001ba53:	53                   	push   ebx
c001ba54:	83 ec 08             	sub    esp,0x8
c001ba57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba5b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba5e:	83 f8 02             	cmp    eax,0x2
c001ba61:	76 50                	jbe    c001bab3 <sysCallClose(regs*)+0x60>
c001ba63:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba68:	74 58                	je     c001bac2 <sysCallClose(regs*)+0x6f>
c001ba6a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba6f:	74 60                	je     c001bad1 <sysCallClose(regs*)+0x7e>
c001ba71:	77 2f                	ja     c001baa2 <sysCallClose(regs*)+0x4f>
c001ba73:	83 ec 0c             	sub    esp,0xc
c001ba76:	50                   	push   eax
c001ba77:	e8 6d 5f ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001ba7c:	89 c3                	mov    ebx,eax
c001ba7e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba81:	e8 30 79 ff ff       	call   c00133b6 <File::close()>
c001ba86:	83 c4 10             	add    esp,0x10
c001ba89:	85 db                	test   ebx,ebx
c001ba8b:	74 0c                	je     c001ba99 <sysCallClose(regs*)+0x46>
c001ba8d:	83 ec 0c             	sub    esp,0xc
c001ba90:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ba92:	53                   	push   ebx
c001ba93:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ba96:	83 c4 10             	add    esp,0x10
c001ba99:	31 c0                	xor    eax,eax
c001ba9b:	31 d2                	xor    edx,edx
c001ba9d:	83 c4 08             	add    esp,0x8
c001baa0:	5b                   	pop    ebx
c001baa1:	c3                   	ret    
c001baa2:	83 ec 08             	sub    esp,0x8
c001baa5:	50                   	push   eax
c001baa6:	68 80 bd 02 c0       	push   0xc002bd80
c001baab:	e8 ec 72 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001bab0:	83 c4 10             	add    esp,0x10
c001bab3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bab8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001babd:	83 c4 08             	add    esp,0x8
c001bac0:	5b                   	pop    ebx
c001bac1:	c3                   	ret    
c001bac2:	83 ec 0c             	sub    esp,0xc
c001bac5:	68 9e bc 02 c0       	push   0xc002bc9e
c001baca:	e8 cd 72 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001bacf:	eb c5                	jmp    c001ba96 <sysCallClose(regs*)+0x43>
c001bad1:	83 ec 0c             	sub    esp,0xc
c001bad4:	68 ac bc 02 c0       	push   0xc002bcac
c001bad9:	eb ef                	jmp    c001baca <sysCallClose(regs*)+0x77>

c001badb <sysCallOpenDir(regs*)>:
c001badb:	56                   	push   esi
c001badc:	53                   	push   ebx
c001badd:	53                   	push   ebx
c001bade:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bae2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bae5:	85 f6                	test   esi,esi
c001bae7:	74 59                	je     c001bb42 <sysCallOpenDir(regs*)+0x67>
c001bae9:	83 ec 0c             	sub    esp,0xc
c001baec:	68 14 01 00 00       	push   0x114
c001baf1:	e8 4d 3d ff ff       	call   c000f843 <malloc>
c001baf6:	83 c4 0c             	add    esp,0xc
c001baf9:	89 c6                	mov    esi,eax
c001bafb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb00:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb03:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb06:	56                   	push   esi
c001bb07:	e8 94 7c ff ff       	call   c00137a0 <Directory::Directory(char const*, Process*)>
c001bb0c:	83 c4 10             	add    esp,0x10
c001bb0f:	85 f6                	test   esi,esi
c001bb11:	74 2f                	je     c001bb42 <sysCallOpenDir(regs*)+0x67>
c001bb13:	83 ec 0c             	sub    esp,0xc
c001bb16:	56                   	push   esi
c001bb17:	e8 e8 7c ff ff       	call   c0013804 <Directory::open()>
c001bb1c:	83 c4 10             	add    esp,0x10
c001bb1f:	85 c0                	test   eax,eax
c001bb21:	75 1f                	jne    c001bb42 <sysCallOpenDir(regs*)+0x67>
c001bb23:	83 ec 0c             	sub    esp,0xc
c001bb26:	56                   	push   esi
c001bb27:	e8 c8 5b ff ff       	call   c00116f4 <UnixFile::getFileDescriptor()>
c001bb2c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bb2f:	83 c4 10             	add    esp,0x10
c001bb32:	89 02                	mov    DWORD PTR [edx],eax
c001bb34:	c1 f8 1f             	sar    eax,0x1f
c001bb37:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bb3a:	31 c0                	xor    eax,eax
c001bb3c:	59                   	pop    ecx
c001bb3d:	31 d2                	xor    edx,edx
c001bb3f:	5b                   	pop    ebx
c001bb40:	5e                   	pop    esi
c001bb41:	c3                   	ret    
c001bb42:	59                   	pop    ecx
c001bb43:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb48:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb4d:	5b                   	pop    ebx
c001bb4e:	5e                   	pop    esi
c001bb4f:	c3                   	ret    

c001bb50 <sysCallCloseDir(regs*)>:
c001bb50:	53                   	push   ebx
c001bb51:	83 ec 08             	sub    esp,0x8
c001bb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb58:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb5b:	83 f8 02             	cmp    eax,0x2
c001bb5e:	76 47                	jbe    c001bba7 <sysCallCloseDir(regs*)+0x57>
c001bb60:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb65:	77 2f                	ja     c001bb96 <sysCallCloseDir(regs*)+0x46>
c001bb67:	83 ec 0c             	sub    esp,0xc
c001bb6a:	50                   	push   eax
c001bb6b:	e8 79 5e ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001bb70:	89 c3                	mov    ebx,eax
c001bb72:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb75:	e8 e6 7c ff ff       	call   c0013860 <Directory::close()>
c001bb7a:	83 c4 10             	add    esp,0x10
c001bb7d:	85 db                	test   ebx,ebx
c001bb7f:	74 0c                	je     c001bb8d <sysCallCloseDir(regs*)+0x3d>
c001bb81:	83 ec 0c             	sub    esp,0xc
c001bb84:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb86:	53                   	push   ebx
c001bb87:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb8a:	83 c4 10             	add    esp,0x10
c001bb8d:	31 c0                	xor    eax,eax
c001bb8f:	31 d2                	xor    edx,edx
c001bb91:	83 c4 08             	add    esp,0x8
c001bb94:	5b                   	pop    ebx
c001bb95:	c3                   	ret    
c001bb96:	83 ec 08             	sub    esp,0x8
c001bb99:	50                   	push   eax
c001bb9a:	68 a8 bd 02 c0       	push   0xc002bda8
c001bb9f:	e8 f8 71 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001bba4:	83 c4 10             	add    esp,0x10
c001bba7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbac:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbb1:	83 c4 08             	add    esp,0x8
c001bbb4:	5b                   	pop    ebx
c001bbb5:	c3                   	ret    

c001bbb6 <sysCallMakeDir(regs*)>:
c001bbb6:	56                   	push   esi
c001bbb7:	53                   	push   ebx
c001bbb8:	83 ec 10             	sub    esp,0x10
c001bbbb:	68 14 01 00 00       	push   0x114
c001bbc0:	e8 7e 3c ff ff       	call   c000f843 <malloc>
c001bbc5:	83 c4 0c             	add    esp,0xc
c001bbc8:	89 c3                	mov    ebx,eax
c001bbca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbcf:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbd2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbd6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bbd9:	53                   	push   ebx
c001bbda:	e8 c1 7b ff ff       	call   c00137a0 <Directory::Directory(char const*, Process*)>
c001bbdf:	83 c4 10             	add    esp,0x10
c001bbe2:	85 db                	test   ebx,ebx
c001bbe4:	74 32                	je     c001bc18 <sysCallMakeDir(regs*)+0x62>
c001bbe6:	83 ec 0c             	sub    esp,0xc
c001bbe9:	53                   	push   ebx
c001bbea:	e8 f5 7d ff ff       	call   c00139e4 <Directory::create()>
c001bbef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbf2:	89 c6                	mov    esi,eax
c001bbf4:	e8 67 7c ff ff       	call   c0013860 <Directory::close()>
c001bbf9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bbfb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbfe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc01:	83 c4 10             	add    esp,0x10
c001bc04:	31 c0                	xor    eax,eax
c001bc06:	59                   	pop    ecx
c001bc07:	85 f6                	test   esi,esi
c001bc09:	5b                   	pop    ebx
c001bc0a:	0f 95 c0             	setne  al
c001bc0d:	5e                   	pop    esi
c001bc0e:	31 d2                	xor    edx,edx
c001bc10:	f7 d8                	neg    eax
c001bc12:	83 d2 00             	adc    edx,0x0
c001bc15:	f7 da                	neg    edx
c001bc17:	c3                   	ret    
c001bc18:	59                   	pop    ecx
c001bc19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc1e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc23:	5b                   	pop    ebx
c001bc24:	5e                   	pop    esi
c001bc25:	c3                   	ret    

c001bc26 <sysCallWait(regs*)>:
c001bc26:	83 ec 10             	sub    esp,0x10
c001bc29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bc2d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bc30:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc33:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bc36:	e8 ec 24 00 00       	call   c001e127 <waitTask(int, int*, int)>
c001bc3b:	83 c4 1c             	add    esp,0x1c
c001bc3e:	99                   	cdq    
c001bc3f:	c3                   	ret    

c001bc40 <sysCallNotImpl(regs*)>:
c001bc40:	83 ec 18             	sub    esp,0x18
c001bc43:	68 ba bc 02 c0       	push   0xc002bcba
c001bc48:	e8 2a e8 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001bc4d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc52:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc57:	83 c4 1c             	add    esp,0x1c
c001bc5a:	c3                   	ret    

c001bc5b <sysPanic(regs*)>:
c001bc5b:	83 ec 18             	sub    esp,0x18
c001bc5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc62:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc65:	e8 0d e8 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001bc6a:	c7 04 24 d4 bc 02 c0 	mov    DWORD PTR [esp],0xc002bcd4
c001bc71:	e8 01 e8 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001bc76:	b8 01 00 00 00       	mov    eax,0x1
c001bc7b:	31 d2                	xor    edx,edx
c001bc7d:	83 c4 1c             	add    esp,0x1c
c001bc80:	c3                   	ret    

c001bc81 <sysCallRmdir(regs*)>:
c001bc81:	56                   	push   esi
c001bc82:	53                   	push   ebx
c001bc83:	83 ec 20             	sub    esp,0x20
c001bc86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bc8a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bc8d:	68 14 01 00 00       	push   0x114
c001bc92:	e8 ac 3b ff ff       	call   c000f843 <malloc>
c001bc97:	83 c4 0c             	add    esp,0xc
c001bc9a:	89 c3                	mov    ebx,eax
c001bc9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bca1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bca4:	56                   	push   esi
c001bca5:	53                   	push   ebx
c001bca6:	e8 49 76 ff ff       	call   c00132f4 <File::File(char const*, Process*)>
c001bcab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcae:	e8 1d 78 ff ff       	call   c00134d0 <File::unlink()>
c001bcb3:	83 c4 10             	add    esp,0x10
c001bcb6:	85 db                	test   ebx,ebx
c001bcb8:	74 14                	je     c001bcce <sysCallRmdir(regs*)+0x4d>
c001bcba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcbe:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bcc0:	83 ec 0c             	sub    esp,0xc
c001bcc3:	53                   	push   ebx
c001bcc4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bcc7:	83 c4 10             	add    esp,0x10
c001bcca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bcce:	85 c0                	test   eax,eax
c001bcd0:	0f 95 c0             	setne  al
c001bcd3:	31 d2                	xor    edx,edx
c001bcd5:	0f b6 c0             	movzx  eax,al
c001bcd8:	f7 d8                	neg    eax
c001bcda:	83 d2 00             	adc    edx,0x0
c001bcdd:	83 c4 14             	add    esp,0x14
c001bce0:	f7 da                	neg    edx
c001bce2:	5b                   	pop    ebx
c001bce3:	5e                   	pop    esi
c001bce4:	c3                   	ret    

c001bce5 <sysCallUnlink(regs*)>:
c001bce5:	56                   	push   esi
c001bce6:	53                   	push   ebx
c001bce7:	83 ec 20             	sub    esp,0x20
c001bcea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bcee:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bcf1:	68 14 01 00 00       	push   0x114
c001bcf6:	e8 48 3b ff ff       	call   c000f843 <malloc>
c001bcfb:	83 c4 0c             	add    esp,0xc
c001bcfe:	89 c3                	mov    ebx,eax
c001bd00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd05:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd08:	56                   	push   esi
c001bd09:	53                   	push   ebx
c001bd0a:	e8 e5 75 ff ff       	call   c00132f4 <File::File(char const*, Process*)>
c001bd0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd12:	e8 b9 77 ff ff       	call   c00134d0 <File::unlink()>
c001bd17:	83 c4 10             	add    esp,0x10
c001bd1a:	85 db                	test   ebx,ebx
c001bd1c:	74 14                	je     c001bd32 <sysCallUnlink(regs*)+0x4d>
c001bd1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd22:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd24:	83 ec 0c             	sub    esp,0xc
c001bd27:	53                   	push   ebx
c001bd28:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd2b:	83 c4 10             	add    esp,0x10
c001bd2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd32:	85 c0                	test   eax,eax
c001bd34:	0f 95 c0             	setne  al
c001bd37:	31 d2                	xor    edx,edx
c001bd39:	0f b6 c0             	movzx  eax,al
c001bd3c:	f7 d8                	neg    eax
c001bd3e:	83 d2 00             	adc    edx,0x0
c001bd41:	83 c4 14             	add    esp,0x14
c001bd44:	f7 da                	neg    edx
c001bd46:	5b                   	pop    ebx
c001bd47:	5e                   	pop    esi
c001bd48:	c3                   	ret    

c001bd49 <sysCallGetArgv(regs*)>:
c001bd49:	83 ec 0c             	sub    esp,0xc
c001bd4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd50:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bd53:	85 c0                	test   eax,eax
c001bd55:	78 2b                	js     c001bd82 <sysCallGetArgv(regs*)+0x39>
c001bd57:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bd5d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bd60:	3b 81 36 19 00 00    	cmp    eax,DWORD PTR [ecx+0x1936]
c001bd66:	7d 1a                	jge    c001bd82 <sysCallGetArgv(regs*)+0x39>
c001bd68:	8b 84 81 3a 19 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x193a]
c001bd6f:	85 c0                	test   eax,eax
c001bd71:	74 17                	je     c001bd8a <sysCallGetArgv(regs*)+0x41>
c001bd73:	83 ec 08             	sub    esp,0x8
c001bd76:	50                   	push   eax
c001bd77:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bd7a:	e8 b5 4a fe ff       	call   c0000834 <strcpy>
c001bd7f:	83 c4 10             	add    esp,0x10
c001bd82:	31 c0                	xor    eax,eax
c001bd84:	31 d2                	xor    edx,edx
c001bd86:	83 c4 0c             	add    esp,0xc
c001bd89:	c3                   	ret    
c001bd8a:	b8 01 00 00 00       	mov    eax,0x1
c001bd8f:	31 d2                	xor    edx,edx
c001bd91:	83 c4 0c             	add    esp,0xc
c001bd94:	c3                   	ret    

c001bd95 <sysCallTTYName(regs*)>:
c001bd95:	56                   	push   esi
c001bd96:	53                   	push   ebx
c001bd97:	53                   	push   ebx
c001bd98:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd9c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bd9f:	85 c0                	test   eax,eax
c001bda1:	74 5f                	je     c001be02 <sysCallTTYName(regs*)+0x6d>
c001bda3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bda6:	83 f8 02             	cmp    eax,0x2
c001bda9:	77 3e                	ja     c001bde9 <sysCallTTYName(regs*)+0x54>
c001bdab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdb0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bdb3:	8b 98 26 19 00 00    	mov    ebx,DWORD PTR [eax+0x1926]
c001bdb9:	85 db                	test   ebx,ebx
c001bdbb:	74 45                	je     c001be02 <sysCallTTYName(regs*)+0x6d>
c001bdbd:	83 ec 0c             	sub    esp,0xc
c001bdc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdc2:	53                   	push   ebx
c001bdc3:	ff 10                	call   DWORD PTR [eax]
c001bdc5:	83 c4 10             	add    esp,0x10
c001bdc8:	84 c0                	test   al,al
c001bdca:	74 41                	je     c001be0d <sysCallTTYName(regs*)+0x78>
c001bdcc:	83 ec 08             	sub    esp,0x8
c001bdcf:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bdd5:	53                   	push   ebx
c001bdd6:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bdd9:	e8 56 4a fe ff       	call   c0000834 <strcpy>
c001bdde:	83 c4 10             	add    esp,0x10
c001bde1:	31 c0                	xor    eax,eax
c001bde3:	59                   	pop    ecx
c001bde4:	31 d2                	xor    edx,edx
c001bde6:	5b                   	pop    ebx
c001bde7:	5e                   	pop    esi
c001bde8:	c3                   	ret    
c001bde9:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bdee:	74 bb                	je     c001bdab <sysCallTTYName(regs*)+0x16>
c001bdf0:	83 ec 0c             	sub    esp,0xc
c001bdf3:	50                   	push   eax
c001bdf4:	e8 f0 5b ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001bdf9:	83 c4 10             	add    esp,0x10
c001bdfc:	89 c3                	mov    ebx,eax
c001bdfe:	85 db                	test   ebx,ebx
c001be00:	75 bb                	jne    c001bdbd <sysCallTTYName(regs*)+0x28>
c001be02:	59                   	pop    ecx
c001be03:	b8 01 00 00 00       	mov    eax,0x1
c001be08:	31 d2                	xor    edx,edx
c001be0a:	5b                   	pop    ebx
c001be0b:	5e                   	pop    esi
c001be0c:	c3                   	ret    
c001be0d:	59                   	pop    ecx
c001be0e:	b8 02 00 00 00       	mov    eax,0x2
c001be13:	31 d2                	xor    edx,edx
c001be15:	5b                   	pop    ebx
c001be16:	5e                   	pop    esi
c001be17:	c3                   	ret    

c001be18 <sysCallUSleep(regs*)>:
c001be18:	83 ec 14             	sub    esp,0x14
c001be1b:	b8 e8 03 00 00       	mov    eax,0x3e8
c001be20:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be24:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001be2b:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001be2e:	01 ca                	add    edx,ecx
c001be30:	52                   	push   edx
c001be31:	50                   	push   eax
c001be32:	e8 89 23 00 00       	call   c001e1c0 <nanoSleep(unsigned long long)>
c001be37:	31 c0                	xor    eax,eax
c001be39:	31 d2                	xor    edx,edx
c001be3b:	83 c4 1c             	add    esp,0x1c
c001be3e:	c3                   	ret    

c001be3f <sysCallSpawn(regs*)>:
c001be3f:	56                   	push   esi
c001be40:	53                   	push   ebx
c001be41:	53                   	push   ebx
c001be42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be46:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001be49:	85 f6                	test   esi,esi
c001be4b:	75 08                	jne    c001be55 <sysCallSpawn(regs*)+0x16>
c001be4d:	59                   	pop    ecx
c001be4e:	31 c0                	xor    eax,eax
c001be50:	31 d2                	xor    edx,edx
c001be52:	5b                   	pop    ebx
c001be53:	5e                   	pop    esi
c001be54:	c3                   	ret    
c001be55:	83 ec 0c             	sub    esp,0xc
c001be58:	68 3f 1b 00 00       	push   0x1b3f
c001be5d:	e8 e1 39 ff ff       	call   c000f843 <malloc>
c001be62:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001be65:	89 c6                	mov    esi,eax
c001be67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be6c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be6f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be72:	56                   	push   esi
c001be73:	e8 44 1a 00 00       	call   c001d8bc <Process::Process(char const*, Process*, char**)>
c001be78:	83 c4 20             	add    esp,0x20
c001be7b:	80 be 3e 1b 00 00 00 	cmp    BYTE PTR [esi+0x1b3e],0x0
c001be82:	75 c9                	jne    c001be4d <sysCallSpawn(regs*)+0xe>
c001be84:	83 ec 0c             	sub    esp,0xc
c001be87:	56                   	push   esi
c001be88:	e8 f9 1f 00 00       	call   c001de86 <Process::createUserThread()>
c001be8d:	8b 06                	mov    eax,DWORD PTR [esi]
c001be8f:	83 c4 10             	add    esp,0x10
c001be92:	99                   	cdq    
c001be93:	59                   	pop    ecx
c001be94:	5b                   	pop    ebx
c001be95:	5e                   	pop    esi
c001be96:	c3                   	ret    

c001be97 <sysCallGetEnv(regs*)>:
c001be97:	55                   	push   ebp
c001be98:	57                   	push   edi
c001be99:	56                   	push   esi
c001be9a:	53                   	push   ebx
c001be9b:	83 ec 28             	sub    esp,0x28
c001be9e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bea2:	68 e3 bc 02 c0       	push   0xc002bce3
c001bea7:	e8 f0 6e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001beac:	5f                   	pop    edi
c001bead:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001beb0:	5d                   	pop    ebp
c001beb1:	53                   	push   ebx
c001beb2:	68 29 c0 02 c0       	push   0xc002c029
c001beb7:	e8 e0 6e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001bebc:	58                   	pop    eax
c001bebd:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bec0:	5a                   	pop    edx
c001bec1:	57                   	push   edi
c001bec2:	68 ec bc 02 c0       	push   0xc002bcec
c001bec7:	e8 d0 6e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001becc:	59                   	pop    ecx
c001becd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bed2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bed5:	e8 b9 e4 ff ff       	call   c001a393 <Krnl::getProcessTotalEnvCount(Process*)>
c001beda:	5a                   	pop    edx
c001bedb:	89 c5                	mov    ebp,eax
c001bedd:	59                   	pop    ecx
c001bede:	50                   	push   eax
c001bedf:	68 f6 bc 02 c0       	push   0xc002bcf6
c001bee4:	e8 b3 6e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001bee9:	83 c4 10             	add    esp,0x10
c001beec:	39 ef                	cmp    edi,ebp
c001beee:	7c 15                	jl     c001bf05 <sysCallGetEnv(regs*)+0x6e>
c001bef0:	85 db                	test   ebx,ebx
c001bef2:	75 0c                	jne    c001bf00 <sysCallGetEnv(regs*)+0x69>
c001bef4:	83 c4 1c             	add    esp,0x1c
c001bef7:	31 c0                	xor    eax,eax
c001bef9:	5b                   	pop    ebx
c001befa:	31 d2                	xor    edx,edx
c001befc:	5e                   	pop    esi
c001befd:	5f                   	pop    edi
c001befe:	5d                   	pop    ebp
c001beff:	c3                   	ret    
c001bf00:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bf03:	eb ef                	jmp    c001bef4 <sysCallGetEnv(regs*)+0x5d>
c001bf05:	83 ec 0c             	sub    esp,0xc
c001bf08:	68 02 bd 02 c0       	push   0xc002bd02
c001bf0d:	e8 8a 6e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001bf12:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf16:	83 c4 0c             	add    esp,0xc
c001bf19:	57                   	push   edi
c001bf1a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf20:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bf23:	50                   	push   eax
c001bf24:	e8 8a e4 ff ff       	call   c001a3b3 <Krnl::getProcessEnvPair(Process*, int)>
c001bf29:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bf2d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bf31:	68 a8 c0 02 c0       	push   0xc002c0a8
c001bf36:	e8 61 6e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001bf3b:	83 c4 10             	add    esp,0x10
c001bf3e:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001bf41:	85 f6                	test   esi,esi
c001bf43:	75 47                	jne    c001bf8c <sysCallGetEnv(regs*)+0xf5>
c001bf45:	83 ec 0c             	sub    esp,0xc
c001bf48:	55                   	push   ebp
c001bf49:	e8 46 48 fe ff       	call   c0000794 <strlen>
c001bf4e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf51:	89 c3                	mov    ebx,eax
c001bf53:	e8 3c 48 fe ff       	call   c0000794 <strlen>
c001bf58:	5a                   	pop    edx
c001bf59:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bf5d:	59                   	pop    ecx
c001bf5e:	50                   	push   eax
c001bf5f:	68 05 bd 02 c0       	push   0xc002bd05
c001bf64:	e8 33 6e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001bf69:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bf6c:	e8 23 48 fe ff       	call   c0000794 <strlen>
c001bf71:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf74:	89 c3                	mov    ebx,eax
c001bf76:	e8 19 48 fe ff       	call   c0000794 <strlen>
c001bf7b:	83 c4 10             	add    esp,0x10
c001bf7e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bf82:	83 c4 1c             	add    esp,0x1c
c001bf85:	31 d2                	xor    edx,edx
c001bf87:	5b                   	pop    ebx
c001bf88:	5e                   	pop    esi
c001bf89:	5f                   	pop    edi
c001bf8a:	5d                   	pop    ebp
c001bf8b:	c3                   	ret    
c001bf8c:	83 ec 0c             	sub    esp,0xc
c001bf8f:	68 c2 c0 02 c0       	push   0xc002c0c2
c001bf94:	e8 03 6e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001bf99:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bf9c:	58                   	pop    eax
c001bf9d:	5a                   	pop    edx
c001bf9e:	55                   	push   ebp
c001bf9f:	53                   	push   ebx
c001bfa0:	e8 8f 48 fe ff       	call   c0000834 <strcpy>
c001bfa5:	59                   	pop    ecx
c001bfa6:	5e                   	pop    esi
c001bfa7:	68 0f bd 02 c0       	push   0xc002bd0f
c001bfac:	53                   	push   ebx
c001bfad:	e8 c2 49 fe ff       	call   c0000974 <strcat>
c001bfb2:	5d                   	pop    ebp
c001bfb3:	58                   	pop    eax
c001bfb4:	57                   	push   edi
c001bfb5:	53                   	push   ebx
c001bfb6:	e8 b9 49 fe ff       	call   c0000974 <strcat>
c001bfbb:	c7 04 24 dc c0 02 c0 	mov    DWORD PTR [esp],0xc002c0dc
c001bfc2:	e8 d5 6d ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001bfc7:	83 c4 10             	add    esp,0x10
c001bfca:	e9 25 ff ff ff       	jmp    c001bef4 <sysCallGetEnv(regs*)+0x5d>

c001bfcf <sysAppSettings(regs*)>:
c001bfcf:	53                   	push   ebx
c001bfd0:	83 ec 08             	sub    esp,0x8
c001bfd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfd7:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bfda:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001bfe0:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bfe5:	66 3d c0 09          	cmp    ax,0x9c0
c001bfe9:	75 2f                	jne    c001c01a <sysAppSettings(regs*)+0x4b>
c001bfeb:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001bff1:	83 e0 1f             	and    eax,0x1f
c001bff4:	3c 01                	cmp    al,0x1
c001bff6:	74 2e                	je     c001c026 <sysAppSettings(regs*)+0x57>
c001bff8:	3c 07                	cmp    al,0x7
c001bffa:	0f 84 bd 00 00 00    	je     c001c0bd <sysAppSettings(regs*)+0xee>
c001c000:	84 c0                	test   al,al
c001c002:	0f 84 dc 00 00 00    	je     c001c0e4 <sysAppSettings(regs*)+0x115>
c001c008:	3c 08                	cmp    al,0x8
c001c00a:	74 6d                	je     c001c079 <sysAppSettings(regs*)+0xaa>
c001c00c:	0f b6 c0             	movzx  eax,al
c001c00f:	83 c4 08             	add    esp,0x8
c001c012:	05 e8 03 00 00       	add    eax,0x3e8
c001c017:	5b                   	pop    ebx
c001c018:	99                   	cdq    
c001c019:	c3                   	ret    
c001c01a:	b8 01 00 00 00       	mov    eax,0x1
c001c01f:	31 d2                	xor    edx,edx
c001c021:	83 c4 08             	add    esp,0x8
c001c024:	5b                   	pop    ebx
c001c025:	c3                   	ret    
c001c026:	51                   	push   ecx
c001c027:	68 00 01 00 00       	push   0x100
c001c02c:	6a 00                	push   0x0
c001c02e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c033:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c036:	83 c0 0c             	add    eax,0xc
c001c039:	50                   	push   eax
c001c03a:	e8 39 47 fe ff       	call   c0000778 <memset>
c001c03f:	83 c4 0c             	add    esp,0xc
c001c042:	68 ff 00 00 00       	push   0xff
c001c047:	53                   	push   ebx
c001c048:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c04d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c050:	83 c0 0c             	add    eax,0xc
c001c053:	50                   	push   eax
c001c054:	e8 eb 46 fe ff       	call   c0000744 <memcpy>
c001c059:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c05e:	5b                   	pop    ebx
c001c05f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c062:	5a                   	pop    edx
c001c063:	8d 50 0c             	lea    edx,[eax+0xc]
c001c066:	52                   	push   edx
c001c067:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c06d:	e8 f2 4a ff ff       	call   c0010b64 <VgaText::setTitle(char*)>
c001c072:	83 c4 10             	add    esp,0x10
c001c075:	31 c0                	xor    eax,eax
c001c077:	eb a6                	jmp    c001c01f <sysAppSettings(regs*)+0x50>
c001c079:	83 ec 08             	sub    esp,0x8
c001c07c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c082:	83 e0 0f             	and    eax,0xf
c001c085:	50                   	push   eax
c001c086:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c08b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c08e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c094:	e8 bb 4a ff ff       	call   c0010b54 <VgaText::setTitleColour(VgaColour)>
c001c099:	58                   	pop    eax
c001c09a:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c0a0:	5a                   	pop    edx
c001c0a1:	c1 e8 04             	shr    eax,0x4
c001c0a4:	83 e0 0f             	and    eax,0xf
c001c0a7:	50                   	push   eax
c001c0a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0b0:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c0b6:	e8 89 4a ff ff       	call   c0010b44 <VgaText::setTitleTextColour(VgaColour)>
c001c0bb:	eb b5                	jmp    c001c072 <sysAppSettings(regs*)+0xa3>
c001c0bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0c5:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001c0cb:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c0d1:	c0 e8 06             	shr    al,0x6
c001c0d4:	83 e0 01             	and    eax,0x1
c001c0d7:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c0dd:	31 c0                	xor    eax,eax
c001c0df:	e9 3b ff ff ff       	jmp    c001c01f <sysAppSettings(regs*)+0x50>
c001c0e4:	b8 02 00 00 00       	mov    eax,0x2
c001c0e9:	e9 31 ff ff ff       	jmp    c001c01f <sysAppSettings(regs*)+0x50>

c001c0ee <sysSetFatAttrib(regs*)>:
c001c0ee:	57                   	push   edi
c001c0ef:	56                   	push   esi
c001c0f0:	53                   	push   ebx
c001c0f1:	83 ec 1c             	sub    esp,0x1c
c001c0f4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c0f8:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c0fb:	68 14 01 00 00       	push   0x114
c001c100:	e8 3e 37 ff ff       	call   c000f843 <malloc>
c001c105:	83 c4 0c             	add    esp,0xc
c001c108:	89 c3                	mov    ebx,eax
c001c10a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c10f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c112:	57                   	push   edi
c001c113:	53                   	push   ebx
c001c114:	e8 db 71 ff ff       	call   c00132f4 <File::File(char const*, Process*)>
c001c119:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c11c:	83 c4 0c             	add    esp,0xc
c001c11f:	0f b6 d4             	movzx  edx,ah
c001c122:	0f b6 c0             	movzx  eax,al
c001c125:	52                   	push   edx
c001c126:	50                   	push   eax
c001c127:	53                   	push   ebx
c001c128:	e8 3d 74 ff ff       	call   c001356a <File::chfatattr(unsigned char, unsigned char)>
c001c12d:	83 c4 10             	add    esp,0x10
c001c130:	85 db                	test   ebx,ebx
c001c132:	74 14                	je     c001c148 <sysSetFatAttrib(regs*)+0x5a>
c001c134:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c138:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c13a:	83 ec 0c             	sub    esp,0xc
c001c13d:	53                   	push   ebx
c001c13e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c141:	83 c4 10             	add    esp,0x10
c001c144:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c148:	85 c0                	test   eax,eax
c001c14a:	0f 95 c0             	setne  al
c001c14d:	31 d2                	xor    edx,edx
c001c14f:	0f b6 c0             	movzx  eax,al
c001c152:	f7 d8                	neg    eax
c001c154:	83 d2 00             	adc    edx,0x0
c001c157:	83 c4 10             	add    esp,0x10
c001c15a:	f7 da                	neg    edx
c001c15c:	5b                   	pop    ebx
c001c15d:	5e                   	pop    esi
c001c15e:	5f                   	pop    edi
c001c15f:	c3                   	ret    

c001c160 <sysPipe(regs*)>:
c001c160:	57                   	push   edi
c001c161:	56                   	push   esi
c001c162:	53                   	push   ebx
c001c163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c167:	83 ec 0c             	sub    esp,0xc
c001c16a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c16d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c170:	6a 20                	push   0x20
c001c172:	e8 cc 36 ff ff       	call   c000f843 <malloc>
c001c177:	89 c3                	mov    ebx,eax
c001c179:	58                   	pop    eax
c001c17a:	5a                   	pop    edx
c001c17b:	68 00 50 00 00       	push   0x5000
c001c180:	53                   	push   ebx
c001c181:	e8 0e 43 ff ff       	call   c0010494 <Pipe::Pipe(int)>
c001c186:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c189:	e8 66 55 ff ff       	call   c00116f4 <UnixFile::getFileDescriptor()>
c001c18e:	89 07                	mov    DWORD PTR [edi],eax
c001c190:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c193:	e8 5c 55 ff ff       	call   c00116f4 <UnixFile::getFileDescriptor()>
c001c198:	83 c4 10             	add    esp,0x10
c001c19b:	89 06                	mov    DWORD PTR [esi],eax
c001c19d:	31 d2                	xor    edx,edx
c001c19f:	5b                   	pop    ebx
c001c1a0:	31 c0                	xor    eax,eax
c001c1a2:	5e                   	pop    esi
c001c1a3:	5f                   	pop    edi
c001c1a4:	c3                   	ret    

c001c1a5 <sysGetUnixTime(regs*)>:
c001c1a5:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001c1aa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c1b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c1b4:	e9 25 7b ff ff       	jmp    c0013cde <Clock::timeInSecondsLocal()>

c001c1b9 <string_ends_with(char const*, char const*)>:
c001c1b9:	57                   	push   edi
c001c1ba:	56                   	push   esi
c001c1bb:	53                   	push   ebx
c001c1bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1c0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c1c4:	83 ec 0c             	sub    esp,0xc
c001c1c7:	53                   	push   ebx
c001c1c8:	e8 c7 45 fe ff       	call   c0000794 <strlen>
c001c1cd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1d0:	89 c6                	mov    esi,eax
c001c1d2:	e8 bd 45 fe ff       	call   c0000794 <strlen>
c001c1d7:	83 c4 10             	add    esp,0x10
c001c1da:	39 c6                	cmp    esi,eax
c001c1dc:	7d 06                	jge    c001c1e4 <string_ends_with(char const*, char const*)+0x2b>
c001c1de:	5b                   	pop    ebx
c001c1df:	31 c0                	xor    eax,eax
c001c1e1:	5e                   	pop    esi
c001c1e2:	5f                   	pop    edi
c001c1e3:	c3                   	ret    
c001c1e4:	83 ec 08             	sub    esp,0x8
c001c1e7:	29 c6                	sub    esi,eax
c001c1e9:	57                   	push   edi
c001c1ea:	01 f3                	add    ebx,esi
c001c1ec:	53                   	push   ebx
c001c1ed:	e8 ce 46 fe ff       	call   c00008c0 <strcmp>
c001c1f2:	83 c4 10             	add    esp,0x10
c001c1f5:	85 c0                	test   eax,eax
c001c1f7:	5b                   	pop    ebx
c001c1f8:	0f 94 c0             	sete   al
c001c1fb:	5e                   	pop    esi
c001c1fc:	0f b6 c0             	movzx  eax,al
c001c1ff:	5f                   	pop    edi
c001c200:	c3                   	ret    

c001c201 <sysCallOpen(regs*)>:
c001c201:	56                   	push   esi
c001c202:	53                   	push   ebx
c001c203:	81 ec 04 01 00 00    	sub    esp,0x104
c001c209:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c210:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c213:	85 c9                	test   ecx,ecx
c001c215:	0f 84 b3 00 00 00    	je     c001c2ce <sysCallOpen(regs*)+0xcd>
c001c21b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c21e:	85 c0                	test   eax,eax
c001c220:	0f 84 a8 00 00 00    	je     c001c2ce <sysCallOpen(regs*)+0xcd>
c001c226:	52                   	push   edx
c001c227:	68 11 bd 02 c0       	push   0xc002bd11
c001c22c:	50                   	push   eax
c001c22d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c231:	56                   	push   esi
c001c232:	e8 13 6f ff ff       	call   c001314a <Fs::standardiseFiles(char*, char const*, char const*)>
c001c237:	89 34 24             	mov    DWORD PTR [esp],esi
c001c23a:	e8 55 45 fe ff       	call   c0000794 <strlen>
c001c23f:	83 c4 10             	add    esp,0x10
c001c242:	48                   	dec    eax
c001c243:	74 1d                	je     c001c262 <sysCallOpen(regs*)+0x61>
c001c245:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c248:	eb 0f                	jmp    c001c259 <sysCallOpen(regs*)+0x58>
c001c24a:	80 fa 3a             	cmp    dl,0x3a
c001c24d:	74 0f                	je     c001c25e <sysCallOpen(regs*)+0x5d>
c001c24f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c253:	48                   	dec    eax
c001c254:	74 0c                	je     c001c262 <sysCallOpen(regs*)+0x61>
c001c256:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c259:	80 fa 2e             	cmp    dl,0x2e
c001c25c:	75 ec                	jne    c001c24a <sysCallOpen(regs*)+0x49>
c001c25e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c262:	83 ec 08             	sub    esp,0x8
c001c265:	68 15 bd 02 c0       	push   0xc002bd15
c001c26a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c26d:	e8 47 ff ff ff       	call   c001c1b9 <string_ends_with(char const*, char const*)>
c001c272:	83 c4 10             	add    esp,0x10
c001c275:	85 c0                	test   eax,eax
c001c277:	75 17                	jne    c001c290 <sysCallOpen(regs*)+0x8f>
c001c279:	83 ec 08             	sub    esp,0x8
c001c27c:	68 36 bd 02 c0       	push   0xc002bd36
c001c281:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c284:	e8 30 ff ff ff       	call   c001c1b9 <string_ends_with(char const*, char const*)>
c001c289:	83 c4 10             	add    esp,0x10
c001c28c:	85 c0                	test   eax,eax
c001c28e:	74 51                	je     c001c2e1 <sysCallOpen(regs*)+0xe0>
c001c290:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c293:	83 ec 08             	sub    esp,0x8
c001c296:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c29c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c2a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c2a6:	ff 30                	push   DWORD PTR [eax]
c001c2a8:	68 1a bd 02 c0       	push   0xc002bd1a
c001c2ad:	e8 ea 6a ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001c2b2:	c7 04 24 29 bd 02 c0 	mov    DWORD PTR [esp],0xc002bd29
c001c2b9:	e8 de 6a ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001c2be:	83 c4 10             	add    esp,0x10
c001c2c1:	81 c4 04 01 00 00    	add    esp,0x104
c001c2c7:	31 c0                	xor    eax,eax
c001c2c9:	31 d2                	xor    edx,edx
c001c2cb:	5b                   	pop    ebx
c001c2cc:	5e                   	pop    esi
c001c2cd:	c3                   	ret    
c001c2ce:	81 c4 04 01 00 00    	add    esp,0x104
c001c2d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c2d9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c2de:	5b                   	pop    ebx
c001c2df:	5e                   	pop    esi
c001c2e0:	c3                   	ret    
c001c2e1:	83 ec 08             	sub    esp,0x8
c001c2e4:	68 16 bd 02 c0       	push   0xc002bd16
c001c2e9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2ec:	e8 cf 45 fe ff       	call   c00008c0 <strcmp>
c001c2f1:	83 c4 10             	add    esp,0x10
c001c2f4:	85 c0                	test   eax,eax
c001c2f6:	74 98                	je     c001c290 <sysCallOpen(regs*)+0x8f>
c001c2f8:	83 ec 08             	sub    esp,0x8
c001c2fb:	68 15 bd 02 c0       	push   0xc002bd15
c001c300:	56                   	push   esi
c001c301:	e8 b3 fe ff ff       	call   c001c1b9 <string_ends_with(char const*, char const*)>
c001c306:	83 c4 10             	add    esp,0x10
c001c309:	85 c0                	test   eax,eax
c001c30b:	75 83                	jne    c001c290 <sysCallOpen(regs*)+0x8f>
c001c30d:	83 ec 08             	sub    esp,0x8
c001c310:	68 3b bd 02 c0       	push   0xc002bd3b
c001c315:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c318:	e8 9c fe ff ff       	call   c001c1b9 <string_ends_with(char const*, char const*)>
c001c31d:	83 c4 10             	add    esp,0x10
c001c320:	85 c0                	test   eax,eax
c001c322:	0f 85 d9 00 00 00    	jne    c001c401 <sysCallOpen(regs*)+0x200>
c001c328:	83 ec 08             	sub    esp,0x8
c001c32b:	68 40 bd 02 c0       	push   0xc002bd40
c001c330:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c333:	e8 81 fe ff ff       	call   c001c1b9 <string_ends_with(char const*, char const*)>
c001c338:	83 c4 10             	add    esp,0x10
c001c33b:	85 c0                	test   eax,eax
c001c33d:	0f 85 be 00 00 00    	jne    c001c401 <sysCallOpen(regs*)+0x200>
c001c343:	83 ec 08             	sub    esp,0x8
c001c346:	68 3c bd 02 c0       	push   0xc002bd3c
c001c34b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c34e:	e8 6d 45 fe ff       	call   c00008c0 <strcmp>
c001c353:	83 c4 10             	add    esp,0x10
c001c356:	85 c0                	test   eax,eax
c001c358:	0f 84 a3 00 00 00    	je     c001c401 <sysCallOpen(regs*)+0x200>
c001c35e:	83 ec 08             	sub    esp,0x8
c001c361:	68 3b bd 02 c0       	push   0xc002bd3b
c001c366:	56                   	push   esi
c001c367:	e8 4d fe ff ff       	call   c001c1b9 <string_ends_with(char const*, char const*)>
c001c36c:	83 c4 10             	add    esp,0x10
c001c36f:	85 c0                	test   eax,eax
c001c371:	0f 85 8a 00 00 00    	jne    c001c401 <sysCallOpen(regs*)+0x200>
c001c377:	83 ec 0c             	sub    esp,0xc
c001c37a:	68 14 01 00 00       	push   0x114
c001c37f:	e8 bf 34 ff ff       	call   c000f843 <malloc>
c001c384:	83 c4 0c             	add    esp,0xc
c001c387:	89 c6                	mov    esi,eax
c001c389:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c38e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c391:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c394:	56                   	push   esi
c001c395:	e8 5a 6f ff ff       	call   c00132f4 <File::File(char const*, Process*)>
c001c39a:	83 c4 10             	add    esp,0x10
c001c39d:	85 f6                	test   esi,esi
c001c39f:	0f 84 29 ff ff ff    	je     c001c2ce <sysCallOpen(regs*)+0xcd>
c001c3a5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c3a8:	0f b6 c2             	movzx  eax,dl
c001c3ab:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c3ae:	89 d0                	mov    eax,edx
c001c3b0:	83 e0 01             	and    eax,0x1
c001c3b3:	f6 c2 02             	test   dl,0x2
c001c3b6:	74 03                	je     c001c3bb <sysCallOpen(regs*)+0x1ba>
c001c3b8:	83 c8 02             	or     eax,0x2
c001c3bb:	f6 c2 04             	test   dl,0x4
c001c3be:	74 03                	je     c001c3c3 <sysCallOpen(regs*)+0x1c2>
c001c3c0:	83 c8 04             	or     eax,0x4
c001c3c3:	f6 c2 08             	test   dl,0x8
c001c3c6:	74 03                	je     c001c3cb <sysCallOpen(regs*)+0x1ca>
c001c3c8:	83 c8 0a             	or     eax,0xa
c001c3cb:	83 e2 10             	and    edx,0x10
c001c3ce:	74 03                	je     c001c3d3 <sysCallOpen(regs*)+0x1d2>
c001c3d0:	83 c8 12             	or     eax,0x12
c001c3d3:	83 ec 08             	sub    esp,0x8
c001c3d6:	50                   	push   eax
c001c3d7:	56                   	push   esi
c001c3d8:	e8 7b 6f ff ff       	call   c0013358 <File::open(FileOpenMode)>
c001c3dd:	83 c4 10             	add    esp,0x10
c001c3e0:	85 c0                	test   eax,eax
c001c3e2:	0f 85 e6 fe ff ff    	jne    c001c2ce <sysCallOpen(regs*)+0xcd>
c001c3e8:	83 ec 0c             	sub    esp,0xc
c001c3eb:	56                   	push   esi
c001c3ec:	e8 03 53 ff ff       	call   c00116f4 <UnixFile::getFileDescriptor()>
c001c3f1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c3f4:	89 02                	mov    DWORD PTR [edx],eax
c001c3f6:	c1 f8 1f             	sar    eax,0x1f
c001c3f9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c3fc:	e9 bd fe ff ff       	jmp    c001c2be <sysCallOpen(regs*)+0xbd>
c001c401:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c404:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c40a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c411:	e9 ab fe ff ff       	jmp    c001c2c1 <sysCallOpen(regs*)+0xc0>

c001c416 <Sys::loadSyscalls()>:
c001c416:	c7 05 c0 0d 03 c0 23 b5 01 c0 	mov    DWORD PTR ds:0xc0030dc0,0xc001b523
c001c420:	c7 05 c4 0d 03 c0 0c b1 01 c0 	mov    DWORD PTR ds:0xc0030dc4,0xc001b10c
c001c42a:	c7 05 c8 0d 03 c0 76 b2 01 c0 	mov    DWORD PTR ds:0xc0030dc8,0xc001b276
c001c434:	c7 05 cc 0d 03 c0 59 b4 01 c0 	mov    DWORD PTR ds:0xc0030dcc,0xc001b459
c001c43e:	c7 05 d0 0d 03 c0 0e b2 01 c0 	mov    DWORD PTR ds:0xc0030dd0,0xc001b20e
c001c448:	c7 05 d4 0d 03 c0 43 b1 01 c0 	mov    DWORD PTR ds:0xc0030dd4,0xc001b143
c001c452:	c7 05 d8 0d 03 c0 24 b1 01 c0 	mov    DWORD PTR ds:0xc0030dd8,0xc001b124
c001c45c:	c7 05 dc 0d 03 c0 cb b2 01 c0 	mov    DWORD PTR ds:0xc0030ddc,0xc001b2cb
c001c466:	c7 05 e4 0d 03 c0 53 ba 01 c0 	mov    DWORD PTR ds:0xc0030de4,0xc001ba53
c001c470:	c7 05 e0 0d 03 c0 01 c2 01 c0 	mov    DWORD PTR ds:0xc0030de0,0xc001c201
c001c47a:	c7 05 e8 0d 03 c0 db ba 01 c0 	mov    DWORD PTR ds:0xc0030de8,0xc001badb
c001c484:	c7 05 ec 0d 03 c0 42 b7 01 c0 	mov    DWORD PTR ds:0xc0030dec,0xc001b742
c001c48e:	c7 05 f0 0d 03 c0 5e b5 01 c0 	mov    DWORD PTR ds:0xc0030df0,0xc001b55e
c001c498:	c7 05 f4 0d 03 c0 63 b5 01 c0 	mov    DWORD PTR ds:0xc0030df4,0xc001b563
c001c4a2:	c7 05 f8 0d 03 c0 b6 bb 01 c0 	mov    DWORD PTR ds:0xc0030df8,0xc001bbb6
c001c4ac:	c7 05 fc 0d 03 c0 50 bb 01 c0 	mov    DWORD PTR ds:0xc0030dfc,0xc001bb50
c001c4b6:	c7 05 00 0e 03 c0 2a b8 01 c0 	mov    DWORD PTR ds:0xc0030e00,0xc001b82a
c001c4c0:	c7 05 04 0e 03 c0 93 b8 01 c0 	mov    DWORD PTR ds:0xc0030e04,0xc001b893
c001c4ca:	c7 05 08 0e 03 c0 10 b9 01 c0 	mov    DWORD PTR ds:0xc0030e08,0xc001b910
c001c4d4:	c7 05 0c 0e 03 c0 68 b5 01 c0 	mov    DWORD PTR ds:0xc0030e0c,0xc001b568
c001c4de:	c7 05 10 0e 03 c0 26 bc 01 c0 	mov    DWORD PTR ds:0xc0030e10,0xc001bc26
c001c4e8:	c7 05 14 0e 03 c0 40 bc 01 c0 	mov    DWORD PTR ds:0xc0030e14,0xc001bc40
c001c4f2:	c7 05 18 0e 03 c0 40 bc 01 c0 	mov    DWORD PTR ds:0xc0030e18,0xc001bc40
c001c4fc:	c7 05 1c 0e 03 c0 81 bc 01 c0 	mov    DWORD PTR ds:0xc0030e1c,0xc001bc81
c001c506:	c7 05 20 0e 03 c0 e5 bc 01 c0 	mov    DWORD PTR ds:0xc0030e20,0xc001bce5
c001c510:	c7 05 24 0e 03 c0 14 b7 01 c0 	mov    DWORD PTR ds:0xc0030e24,0xc001b714
c001c51a:	c7 05 28 0e 03 c0 49 bd 01 c0 	mov    DWORD PTR ds:0xc0030e28,0xc001bd49
c001c524:	c7 05 2c 0e 03 c0 d1 b6 01 c0 	mov    DWORD PTR ds:0xc0030e2c,0xc001b6d1
c001c52e:	c7 05 30 0e 03 c0 95 bd 01 c0 	mov    DWORD PTR ds:0xc0030e30,0xc001bd95
c001c538:	c7 05 34 0e 03 c0 d0 b7 01 c0 	mov    DWORD PTR ds:0xc0030e34,0xc001b7d0
c001c542:	c7 05 38 0e 03 c0 18 be 01 c0 	mov    DWORD PTR ds:0xc0030e38,0xc001be18
c001c54c:	c7 05 3c 0e 03 c0 93 b9 01 c0 	mov    DWORD PTR ds:0xc0030e3c,0xc001b993
c001c556:	c7 05 40 0e 03 c0 3f be 01 c0 	mov    DWORD PTR ds:0xc0030e40,0xc001be3f
c001c560:	c7 05 44 0e 03 c0 97 be 01 c0 	mov    DWORD PTR ds:0xc0030e44,0xc001be97
c001c56a:	c7 05 48 0e 03 c0 cf bf 01 c0 	mov    DWORD PTR ds:0xc0030e48,0xc001bfcf
c001c574:	c7 05 4c 0e 03 c0 72 b5 01 c0 	mov    DWORD PTR ds:0xc0030e4c,0xc001b572
c001c57e:	c7 05 50 0e 03 c0 dc b5 01 c0 	mov    DWORD PTR ds:0xc0030e50,0xc001b5dc
c001c588:	c7 05 54 0e 03 c0 22 b6 01 c0 	mov    DWORD PTR ds:0xc0030e54,0xc001b622
c001c592:	c7 05 58 0e 03 c0 ee c0 01 c0 	mov    DWORD PTR ds:0xc0030e58,0xc001c0ee
c001c59c:	c7 05 5c 0e 03 c0 5b bc 01 c0 	mov    DWORD PTR ds:0xc0030e5c,0xc001bc5b
c001c5a6:	c7 05 60 0e 03 c0 73 b6 01 c0 	mov    DWORD PTR ds:0xc0030e60,0xc001b673
c001c5b0:	c7 05 64 0e 03 c0 60 c1 01 c0 	mov    DWORD PTR ds:0xc0030e64,0xc001c160
c001c5ba:	c7 05 68 0e 03 c0 a5 c1 01 c0 	mov    DWORD PTR ds:0xc0030e68,0xc001c1a5
c001c5c4:	c7 05 6c 0e 03 c0 66 b1 01 c0 	mov    DWORD PTR ds:0xc0030e6c,0xc001b166
c001c5ce:	c7 05 70 0e 03 c0 e7 b2 01 c0 	mov    DWORD PTR ds:0xc0030e70,0xc001b2e7
c001c5d8:	c7 05 74 0e 03 c0 0f b4 01 c0 	mov    DWORD PTR ds:0xc0030e74,0xc001b40f
c001c5e2:	c7 05 78 0e 03 c0 d6 b0 01 c0 	mov    DWORD PTR ds:0xc0030e78,0xc001b0d6
c001c5ec:	c7 05 7c 0e 03 c0 c1 b4 01 c0 	mov    DWORD PTR ds:0xc0030e7c,0xc001b4c1
c001c5f6:	c7 05 80 0e 03 c0 4f b1 01 c0 	mov    DWORD PTR ds:0xc0030e80,0xc001b14f
c001c600:	c3                   	ret    

c001c601 <Sys::systemCall(regs*, void*)>:
c001c601:	53                   	push   ebx
c001c602:	83 ec 08             	sub    esp,0x8
c001c605:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c609:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c60c:	83 f8 7f             	cmp    eax,0x7f
c001c60f:	77 16                	ja     c001c627 <Sys::systemCall(regs*, void*)+0x26>
c001c611:	8b 14 85 c0 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf240]
c001c618:	85 d2                	test   edx,edx
c001c61a:	74 0b                	je     c001c627 <Sys::systemCall(regs*, void*)+0x26>
c001c61c:	83 ec 0c             	sub    esp,0xc
c001c61f:	53                   	push   ebx
c001c620:	ff d2                	call   edx
c001c622:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c625:	eb 0d                	jmp    c001c634 <Sys::systemCall(regs*, void*)+0x33>
c001c627:	52                   	push   edx
c001c628:	52                   	push   edx
c001c629:	50                   	push   eax
c001c62a:	68 45 bd 02 c0       	push   0xc002bd45
c001c62f:	e8 68 67 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001c634:	83 c4 10             	add    esp,0x10
c001c637:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c63c:	31 d2                	xor    edx,edx
c001c63e:	83 c4 08             	add    esp,0x8
c001c641:	5b                   	pop    ebx
c001c642:	c3                   	ret    

c001c643 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c643:	55                   	push   ebp
c001c644:	57                   	push   edi
c001c645:	56                   	push   esi
c001c646:	53                   	push   ebx
c001c647:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c64d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c654:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c65b:	85 c0                	test   eax,eax
c001c65d:	0f 95 c1             	setne  cl
c001c660:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c668:	0f 94 c2             	sete   dl
c001c66b:	84 d1                	test   cl,dl
c001c66d:	74 23                	je     c001c692 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c66f:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c675:	74 1b                	je     c001c692 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c677:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c67d:	89 da                	mov    edx,ebx
c001c67f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c685:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c68b:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c692:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c699:	05 ff 0f 00 00       	add    eax,0xfff
c001c69e:	83 ec 0c             	sub    esp,0xc
c001c6a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c6a5:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c6ab:	c1 e8 0c             	shr    eax,0xc
c001c6ae:	89 ef                	mov    edi,ebp
c001c6b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c6b4:	c1 ef 0c             	shr    edi,0xc
c001c6b7:	6a 01                	push   0x1
c001c6b9:	e8 81 54 ff ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c001c6be:	89 c6                	mov    esi,eax
c001c6c0:	58                   	pop    eax
c001c6c1:	5a                   	pop    edx
c001c6c2:	57                   	push   edi
c001c6c3:	68 cb bd 02 c0       	push   0xc002bdcb
c001c6c8:	e8 cf 66 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001c6cd:	59                   	pop    ecx
c001c6ce:	58                   	pop    eax
c001c6cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c6d3:	68 dd bd 02 c0       	push   0xc002bddd
c001c6d8:	e8 bf 66 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001c6dd:	83 c4 10             	add    esp,0x10
c001c6e0:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c6e6:	0f 86 24 01 00 00    	jbe    c001c810 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c6ec:	c1 e7 0c             	shl    edi,0xc
c001c6ef:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c6f2:	89 df                	mov    edi,ebx
c001c6f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6f8:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c6ff:	01 dd                	add    ebp,ebx
c001c701:	29 fd                	sub    ebp,edi
c001c703:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c707:	0f 84 01 01 00 00    	je     c001c80e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c70d:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c713:	76 05                	jbe    c001c71a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c715:	bd 00 10 00 00       	mov    ebp,0x1000
c001c71a:	83 ec 0c             	sub    esp,0xc
c001c71d:	31 d2                	xor    edx,edx
c001c71f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c726:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c728:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c72c:	50                   	push   eax
c001c72d:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c731:	50                   	push   eax
c001c732:	52                   	push   edx
c001c733:	55                   	push   ebp
c001c734:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c73b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c73e:	83 c4 20             	add    esp,0x20
c001c741:	85 c0                	test   eax,eax
c001c743:	74 0a                	je     c001c74f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c745:	53                   	push   ebx
c001c746:	53                   	push   ebx
c001c747:	50                   	push   eax
c001c748:	68 ef bd 02 c0       	push   0xc002bdef
c001c74d:	eb 0f                	jmp    c001c75e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c74f:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c753:	74 20                	je     c001c775 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c755:	51                   	push   ecx
c001c756:	51                   	push   ecx
c001c757:	6a 00                	push   0x0
c001c759:	68 1a be 02 c0       	push   0xc002be1a
c001c75e:	e8 39 66 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001c763:	89 34 24             	mov    DWORD PTR [esp],esi
c001c766:	e8 36 57 ff ff       	call   c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c001c76b:	83 c4 10             	add    esp,0x10
c001c76e:	31 c0                	xor    eax,eax
c001c770:	e9 55 01 00 00       	jmp    c001c8ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c775:	e8 f7 14 00 00       	call   c001dc71 <lockScheduler()>
c001c77a:	e8 61 37 ff ff       	call   c000fee0 <Phys::allocatePage()>
c001c77f:	6a 07                	push   0x7
c001c781:	89 c5                	mov    ebp,eax
c001c783:	56                   	push   esi
c001c784:	50                   	push   eax
c001c785:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c78a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c78d:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c793:	e8 70 5a ff ff       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c798:	83 c4 0c             	add    esp,0xc
c001c79b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c7a2:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7a8:	6a 00                	push   0x0
c001c7aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7b2:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7b8:	e8 b5 58 ff ff       	call   c0012072 <VAS::mapOtherVASIn(bool, VAS*)>
c001c7bd:	58                   	pop    eax
c001c7be:	5a                   	pop    edx
c001c7bf:	68 07 0c 00 00       	push   0xc07
c001c7c4:	57                   	push   edi
c001c7c5:	81 c7 00 10 00 00    	add    edi,0x1000
c001c7cb:	55                   	push   ebp
c001c7cc:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c7d3:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7d9:	6a 00                	push   0x0
c001c7db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7e3:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7e9:	e8 d4 5d ff ff       	call   c00125c2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c7ee:	83 c4 1c             	add    esp,0x1c
c001c7f1:	68 00 10 00 00       	push   0x1000
c001c7f6:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c7fa:	50                   	push   eax
c001c7fb:	56                   	push   esi
c001c7fc:	e8 43 3f fe ff       	call   c0000744 <memcpy>
c001c801:	e8 6d 14 00 00       	call   c001dc73 <unlockScheduler()>
c001c806:	83 c4 10             	add    esp,0x10
c001c809:	e9 ea fe ff ff       	jmp    c001c6f8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c80e:	89 fb                	mov    ebx,edi
c001c810:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c818:	0f 86 9e 00 00 00    	jbe    c001c8bc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c81e:	e8 4e 14 00 00       	call   c001dc71 <lockScheduler()>
c001c823:	51                   	push   ecx
c001c824:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c82b:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c831:	6a 00                	push   0x0
c001c833:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c838:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c83b:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c841:	e8 2c 58 ff ff       	call   c0012072 <VAS::mapOtherVASIn(bool, VAS*)>
c001c846:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c84a:	c1 e7 0c             	shl    edi,0xc
c001c84d:	01 df                	add    edi,ebx
c001c84f:	83 c4 10             	add    esp,0x10
c001c852:	39 fb                	cmp    ebx,edi
c001c854:	74 61                	je     c001c8b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c856:	e8 85 36 ff ff       	call   c000fee0 <Phys::allocatePage()>
c001c85b:	6a 07                	push   0x7
c001c85d:	89 c5                	mov    ebp,eax
c001c85f:	56                   	push   esi
c001c860:	50                   	push   eax
c001c861:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c866:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c869:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c86f:	e8 94 59 ff ff       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c874:	58                   	pop    eax
c001c875:	5a                   	pop    edx
c001c876:	68 07 0c 00 00       	push   0xc07
c001c87b:	53                   	push   ebx
c001c87c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c882:	55                   	push   ebp
c001c883:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c88a:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c890:	6a 00                	push   0x0
c001c892:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c897:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c89a:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c8a0:	e8 1d 5d ff ff       	call   c00125c2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c8a5:	83 c4 1c             	add    esp,0x1c
c001c8a8:	68 00 10 00 00       	push   0x1000
c001c8ad:	6a 00                	push   0x0
c001c8af:	56                   	push   esi
c001c8b0:	e8 c3 3e fe ff       	call   c0000778 <memset>
c001c8b5:	eb 98                	jmp    c001c84f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c8b7:	e8 b7 13 00 00       	call   c001dc73 <unlockScheduler()>
c001c8bc:	83 ec 0c             	sub    esp,0xc
c001c8bf:	56                   	push   esi
c001c8c0:	e8 dc 55 ff ff       	call   c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c001c8c5:	83 c4 10             	add    esp,0x10
c001c8c8:	b0 01                	mov    al,0x1
c001c8ca:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c8d0:	5b                   	pop    ebx
c001c8d1:	5e                   	pop    esi
c001c8d2:	5f                   	pop    edi
c001c8d3:	5d                   	pop    ebp
c001c8d4:	c3                   	ret    

c001c8d5 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c8d5:	55                   	push   ebp
c001c8d6:	57                   	push   edi
c001c8d7:	56                   	push   esi
c001c8d8:	53                   	push   ebx
c001c8d9:	83 ec 48             	sub    esp,0x48
c001c8dc:	68 14 01 00 00       	push   0x114
c001c8e1:	e8 5d 2f ff ff       	call   c000f843 <malloc>
c001c8e6:	83 c4 0c             	add    esp,0xc
c001c8e9:	89 c6                	mov    esi,eax
c001c8eb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c8ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c8f3:	50                   	push   eax
c001c8f4:	e8 fb 69 ff ff       	call   c00132f4 <File::File(char const*, Process*)>
c001c8f9:	58                   	pop    eax
c001c8fa:	5a                   	pop    edx
c001c8fb:	6a 01                	push   0x1
c001c8fd:	56                   	push   esi
c001c8fe:	e8 55 6a ff ff       	call   c0013358 <File::open(FileOpenMode)>
c001c903:	83 c4 10             	add    esp,0x10
c001c906:	85 c0                	test   eax,eax
c001c908:	0f 85 47 01 00 00    	jne    c001ca55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c90e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c916:	83 ec 0c             	sub    esp,0xc
c001c919:	6a 34                	push   0x34
c001c91b:	e8 23 2f ff ff       	call   c000f843 <malloc>
c001c920:	89 c3                	mov    ebx,eax
c001c922:	58                   	pop    eax
c001c923:	8b 06                	mov    eax,DWORD PTR [esi]
c001c925:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c929:	57                   	push   edi
c001c92a:	53                   	push   ebx
c001c92b:	6a 00                	push   0x0
c001c92d:	6a 34                	push   0x34
c001c92f:	56                   	push   esi
c001c930:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c933:	83 c4 20             	add    esp,0x20
c001c936:	85 c0                	test   eax,eax
c001c938:	0f 85 17 01 00 00    	jne    c001ca55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c93e:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c944:	0f 85 0b 01 00 00    	jne    c001ca55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c94a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c94d:	85 c0                	test   eax,eax
c001c94f:	0f 84 00 01 00 00    	je     c001ca55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c955:	31 d2                	xor    edx,edx
c001c957:	55                   	push   ebp
c001c958:	52                   	push   edx
c001c959:	50                   	push   eax
c001c95a:	56                   	push   esi
c001c95b:	e8 b6 6a ff ff       	call   c0013416 <File::seek(unsigned long long)>
c001c960:	83 c4 10             	add    esp,0x10
c001c963:	85 c0                	test   eax,eax
c001c965:	0f 85 ea 00 00 00    	jne    c001ca55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c96b:	83 ec 0c             	sub    esp,0xc
c001c96e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c971:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c975:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c979:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c97d:	0f af c2             	imul   eax,edx
c001c980:	50                   	push   eax
c001c981:	e8 bd 2e ff ff       	call   c000f843 <malloc>
c001c986:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c988:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c98c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c98f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c993:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c997:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c99b:	0f af c2             	imul   eax,edx
c001c99e:	99                   	cdq    
c001c99f:	52                   	push   edx
c001c9a0:	50                   	push   eax
c001c9a1:	56                   	push   esi
c001c9a2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9a5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c9a8:	83 c4 20             	add    esp,0x20
c001c9ab:	85 c0                	test   eax,eax
c001c9ad:	0f 84 a2 00 00 00    	je     c001ca55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9b3:	31 d2                	xor    edx,edx
c001c9b5:	51                   	push   ecx
c001c9b6:	52                   	push   edx
c001c9b7:	50                   	push   eax
c001c9b8:	56                   	push   esi
c001c9b9:	e8 58 6a ff ff       	call   c0013416 <File::seek(unsigned long long)>
c001c9be:	83 c4 10             	add    esp,0x10
c001c9c1:	85 c0                	test   eax,eax
c001c9c3:	0f 85 8c 00 00 00    	jne    c001ca55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9c9:	83 ec 0c             	sub    esp,0xc
c001c9cc:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c9d0:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c9d4:	31 ed                	xor    ebp,ebp
c001c9d6:	0f af c2             	imul   eax,edx
c001c9d9:	50                   	push   eax
c001c9da:	e8 64 2e ff ff       	call   c000f843 <malloc>
c001c9df:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c9e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c9e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c9e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9ec:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c9f0:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c9f4:	0f af c2             	imul   eax,edx
c001c9f7:	99                   	cdq    
c001c9f8:	52                   	push   edx
c001c9f9:	50                   	push   eax
c001c9fa:	56                   	push   esi
c001c9fb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9fe:	83 c4 20             	add    esp,0x20
c001ca01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ca09:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001ca0d:	0f 86 80 00 00 00    	jbe    c001ca93 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001ca13:	0f b7 fd             	movzx  edi,bp
c001ca16:	c1 e7 05             	shl    edi,0x5
c001ca19:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001ca1d:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001ca20:	75 6b                	jne    c001ca8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ca22:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001ca25:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ca29:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ca2c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca30:	52                   	push   edx
c001ca31:	31 d2                	xor    edx,edx
c001ca33:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001ca36:	52                   	push   edx
c001ca37:	50                   	push   eax
c001ca38:	56                   	push   esi
c001ca39:	e8 d8 69 ff ff       	call   c0013416 <File::seek(unsigned long long)>
c001ca3e:	83 c4 10             	add    esp,0x10
c001ca41:	85 c0                	test   eax,eax
c001ca43:	74 17                	je     c001ca5c <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ca45:	83 ec 0c             	sub    esp,0xc
c001ca48:	68 46 be 02 c0       	push   0xc002be46
c001ca4d:	e8 4a 63 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001ca52:	83 c4 10             	add    esp,0x10
c001ca55:	31 c0                	xor    eax,eax
c001ca57:	e9 87 00 00 00       	jmp    c001cae3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ca5c:	83 ec 0c             	sub    esp,0xc
c001ca5f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ca62:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ca65:	50                   	push   eax
c001ca66:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ca6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca6e:	56                   	push   esi
c001ca6f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ca73:	e8 cb fb ff ff       	call   c001c643 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ca78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ca7c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ca80:	83 c4 20             	add    esp,0x20
c001ca83:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ca87:	73 04                	jae    c001ca8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ca89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca8d:	45                   	inc    ebp
c001ca8e:	e9 76 ff ff ff       	jmp    c001ca09 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ca93:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ca97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca9f:	89 91 2e 19 00 00    	mov    DWORD PTR [ecx+0x192e],edx
c001caa5:	83 ec 0c             	sub    esp,0xc
c001caa8:	8b 91 32 19 00 00    	mov    edx,DWORD PTR [ecx+0x1932]
c001caae:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cab3:	05 00 10 00 00       	add    eax,0x1000
c001cab8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cabb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cabf:	e8 8f 2d ff ff       	call   c000f853 <free>
c001cac4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cac7:	e8 87 2d ff ff       	call   c000f853 <free>
c001cacc:	58                   	pop    eax
c001cacd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cad1:	e8 7d 2d ff ff       	call   c000f853 <free>
c001cad6:	89 34 24             	mov    DWORD PTR [esp],esi
c001cad9:	e8 d8 68 ff ff       	call   c00133b6 <File::close()>
c001cade:	83 c4 10             	add    esp,0x10
c001cae1:	b0 01                	mov    al,0x1
c001cae3:	83 c4 3c             	add    esp,0x3c
c001cae6:	5b                   	pop    ebx
c001cae7:	5e                   	pop    esi
c001cae8:	5f                   	pop    edi
c001cae9:	5d                   	pop    ebp
c001caea:	c3                   	ret    

c001caeb <Thr::runtimeReferenceHelper()>:
c001caeb:	83 ec 18             	sub    esp,0x18
c001caee:	68 4e be 02 c0       	push   0xc002be4e
c001caf3:	e8 a4 62 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001caf8:	fa                   	cli    
c001caf9:	83 c4 10             	add    esp,0x10
c001cafc:	eb fe                	jmp    c001cafc <Thr::runtimeReferenceHelper()+0x11>

c001cafe <Thr::getAddressOfKernelSymbol(char const*)>:
c001cafe:	57                   	push   edi
c001caff:	56                   	push   esi
c001cb00:	53                   	push   ebx
c001cb01:	31 db                	xor    ebx,ebx
c001cb03:	39 1d 60 17 03 c0    	cmp    DWORD PTR ds:0xc0031760,ebx
c001cb09:	7e 3c                	jle    c001cb47 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cb0b:	8b 34 9d e0 16 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce920]
c001cb12:	31 ff                	xor    edi,edi
c001cb14:	39 3c 9d e0 15 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcea20],edi
c001cb1b:	7e 27                	jle    c001cb44 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cb1d:	50                   	push   eax
c001cb1e:	50                   	push   eax
c001cb1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb23:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb25:	03 04 9d 60 16 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce9a0]
c001cb2c:	50                   	push   eax
c001cb2d:	e8 8e 3d fe ff       	call   c00008c0 <strcmp>
c001cb32:	83 c4 10             	add    esp,0x10
c001cb35:	85 c0                	test   eax,eax
c001cb37:	75 05                	jne    c001cb3e <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cb39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cb3c:	eb 0b                	jmp    c001cb49 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cb3e:	83 c6 10             	add    esi,0x10
c001cb41:	47                   	inc    edi
c001cb42:	eb d0                	jmp    c001cb14 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cb44:	43                   	inc    ebx
c001cb45:	eb bc                	jmp    c001cb03 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cb47:	31 c0                	xor    eax,eax
c001cb49:	5b                   	pop    ebx
c001cb4a:	5e                   	pop    esi
c001cb4b:	5f                   	pop    edi
c001cb4c:	c3                   	ret    

c001cb4d <Thr::loadKernelSymbolTable(char const*)>:
c001cb4d:	55                   	push   ebp
c001cb4e:	57                   	push   edi
c001cb4f:	56                   	push   esi
c001cb50:	53                   	push   ebx
c001cb51:	83 ec 68             	sub    esp,0x68
c001cb54:	8b 35 b4 17 03 c0    	mov    esi,DWORD PTR ds:0xc00317b4
c001cb5a:	68 14 01 00 00       	push   0x114
c001cb5f:	e8 df 2c ff ff       	call   c000f843 <malloc>
c001cb64:	83 c4 0c             	add    esp,0xc
c001cb67:	89 c3                	mov    ebx,eax
c001cb69:	56                   	push   esi
c001cb6a:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cb6e:	50                   	push   eax
c001cb6f:	e8 80 67 ff ff       	call   c00132f4 <File::File(char const*, Process*)>
c001cb74:	5e                   	pop    esi
c001cb75:	5f                   	pop    edi
c001cb76:	6a 01                	push   0x1
c001cb78:	53                   	push   ebx
c001cb79:	e8 da 67 ff ff       	call   c0013358 <File::open(FileOpenMode)>
c001cb7e:	83 c4 10             	add    esp,0x10
c001cb81:	85 c0                	test   eax,eax
c001cb83:	74 0a                	je     c001cb8f <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cb85:	83 ec 0c             	sub    esp,0xc
c001cb88:	68 70 be 02 c0       	push   0xc002be70
c001cb8d:	eb 34                	jmp    c001cbc3 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cb8f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cb97:	83 ec 0c             	sub    esp,0xc
c001cb9a:	6a 34                	push   0x34
c001cb9c:	e8 a2 2c ff ff       	call   c000f843 <malloc>
c001cba1:	59                   	pop    ecx
c001cba2:	89 c7                	mov    edi,eax
c001cba4:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cba8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cbaa:	56                   	push   esi
c001cbab:	57                   	push   edi
c001cbac:	6a 00                	push   0x0
c001cbae:	6a 34                	push   0x34
c001cbb0:	53                   	push   ebx
c001cbb1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cbb4:	83 c4 20             	add    esp,0x20
c001cbb7:	85 c0                	test   eax,eax
c001cbb9:	74 17                	je     c001cbd2 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cbbb:	83 ec 0c             	sub    esp,0xc
c001cbbe:	68 87 be 02 c0       	push   0xc002be87
c001cbc3:	e8 af d8 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001cbc8:	83 c4 10             	add    esp,0x10
c001cbcb:	31 c0                	xor    eax,eax
c001cbcd:	e9 31 02 00 00       	jmp    c001ce03 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cbd2:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cbd8:	75 e1                	jne    c001cbbb <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cbda:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cbdd:	85 c0                	test   eax,eax
c001cbdf:	74 da                	je     c001cbbb <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cbe1:	52                   	push   edx
c001cbe2:	31 d2                	xor    edx,edx
c001cbe4:	52                   	push   edx
c001cbe5:	50                   	push   eax
c001cbe6:	53                   	push   ebx
c001cbe7:	e8 2a 68 ff ff       	call   c0013416 <File::seek(unsigned long long)>
c001cbec:	83 c4 10             	add    esp,0x10
c001cbef:	85 c0                	test   eax,eax
c001cbf1:	75 c8                	jne    c001cbbb <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cbf3:	83 ec 0c             	sub    esp,0xc
c001cbf6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cbfa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cbfe:	31 ed                	xor    ebp,ebp
c001cc00:	0f af c2             	imul   eax,edx
c001cc03:	50                   	push   eax
c001cc04:	e8 3a 2c ff ff       	call   c000f843 <malloc>
c001cc09:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cc0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc0f:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc16:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cc1a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc1e:	0f af c2             	imul   eax,edx
c001cc21:	99                   	cdq    
c001cc22:	52                   	push   edx
c001cc23:	50                   	push   eax
c001cc24:	53                   	push   ebx
c001cc25:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc28:	83 c4 20             	add    esp,0x20
c001cc2b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc33:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cc3b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cc43:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cc4b:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cc4f:	0f 86 aa 00 00 00    	jbe    c001ccff <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cc55:	0f b7 f5             	movzx  esi,bp
c001cc58:	6b f6 28             	imul   esi,esi,0x28
c001cc5b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cc5f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cc62:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc66:	50                   	push   eax
c001cc67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc6b:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cc6f:	8b 16                	mov    edx,DWORD PTR [esi]
c001cc71:	6b c0 28             	imul   eax,eax,0x28
c001cc74:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cc78:	89 d0                	mov    eax,edx
c001cc7a:	31 d2                	xor    edx,edx
c001cc7c:	52                   	push   edx
c001cc7d:	50                   	push   eax
c001cc7e:	53                   	push   ebx
c001cc7f:	e8 92 67 ff ff       	call   c0013416 <File::seek(unsigned long long)>
c001cc84:	83 c4 0c             	add    esp,0xc
c001cc87:	6a 20                	push   0x20
c001cc89:	6a 00                	push   0x0
c001cc8b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cc8f:	52                   	push   edx
c001cc90:	e8 e3 3a fe ff       	call   c0000778 <memset>
c001cc95:	58                   	pop    eax
c001cc96:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc98:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cc9c:	51                   	push   ecx
c001cc9d:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cca1:	52                   	push   edx
c001cca2:	6a 00                	push   0x0
c001cca4:	6a 1f                	push   0x1f
c001cca6:	53                   	push   ebx
c001cca7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ccaa:	83 c4 18             	add    esp,0x18
c001ccad:	68 9e be 02 c0       	push   0xc002be9e
c001ccb2:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ccb6:	52                   	push   edx
c001ccb7:	e8 04 3c fe ff       	call   c00008c0 <strcmp>
c001ccbc:	83 c4 10             	add    esp,0x10
c001ccbf:	85 c0                	test   eax,eax
c001ccc1:	75 0f                	jne    c001ccd2 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ccc3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ccc6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccd2:	50                   	push   eax
c001ccd3:	50                   	push   eax
c001ccd4:	68 a6 be 02 c0       	push   0xc002bea6
c001ccd9:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ccdd:	50                   	push   eax
c001ccde:	e8 dd 3b fe ff       	call   c00008c0 <strcmp>
c001cce3:	83 c4 10             	add    esp,0x10
c001cce6:	85 c0                	test   eax,eax
c001cce8:	75 0f                	jne    c001ccf9 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ccea:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cced:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ccf1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ccf9:	45                   	inc    ebp
c001ccfa:	e9 4c ff ff ff       	jmp    c001cc4b <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ccff:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cd04:	75 10                	jne    c001cd16 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cd06:	83 ec 0c             	sub    esp,0xc
c001cd09:	68 ae be 02 c0       	push   0xc002beae
c001cd0e:	e8 64 d7 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001cd13:	83 c4 10             	add    esp,0x10
c001cd16:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cd1b:	75 10                	jne    c001cd2d <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cd1d:	83 ec 0c             	sub    esp,0xc
c001cd20:	68 ae be 02 c0       	push   0xc002beae
c001cd25:	e8 4d d7 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001cd2a:	83 c4 10             	add    esp,0x10
c001cd2d:	31 d2                	xor    edx,edx
c001cd2f:	50                   	push   eax
c001cd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd34:	52                   	push   edx
c001cd35:	50                   	push   eax
c001cd36:	53                   	push   ebx
c001cd37:	e8 da 66 ff ff       	call   c0013416 <File::seek(unsigned long long)>
c001cd3c:	5a                   	pop    edx
c001cd3d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cd41:	e8 fd 2a ff ff       	call   c000f843 <malloc>
c001cd46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cd4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cd4e:	31 c9                	xor    ecx,ecx
c001cd50:	5e                   	pop    esi
c001cd51:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd53:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cd57:	55                   	push   ebp
c001cd58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd5c:	51                   	push   ecx
c001cd5d:	52                   	push   edx
c001cd5e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cd62:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cd66:	53                   	push   ebx
c001cd67:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd6a:	83 c4 14             	add    esp,0x14
c001cd6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd71:	e8 cd 2a ff ff       	call   c000f843 <malloc>
c001cd76:	89 c6                	mov    esi,eax
c001cd78:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd7a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd7d:	56                   	push   esi
c001cd7e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd82:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cd86:	51                   	push   ecx
c001cd87:	52                   	push   edx
c001cd88:	53                   	push   ebx
c001cd89:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd8c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd90:	8b 15 60 17 03 c0    	mov    edx,DWORD PTR ds:0xc0031760
c001cd96:	83 c4 1c             	add    esp,0x1c
c001cd99:	c1 e8 04             	shr    eax,0x4
c001cd9c:	89 04 95 e0 15 03 c0 	mov    DWORD PTR [edx*4-0x3ffcea20],eax
c001cda3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cda7:	31 d2                	xor    edx,edx
c001cda9:	52                   	push   edx
c001cdaa:	50                   	push   eax
c001cdab:	53                   	push   ebx
c001cdac:	e8 65 66 ff ff       	call   c0013416 <File::seek(unsigned long long)>
c001cdb1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cdb3:	31 d2                	xor    edx,edx
c001cdb5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cdb8:	56                   	push   esi
c001cdb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cdbd:	52                   	push   edx
c001cdbe:	50                   	push   eax
c001cdbf:	53                   	push   ebx
c001cdc0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdc3:	83 c4 14             	add    esp,0x14
c001cdc6:	53                   	push   ebx
c001cdc7:	e8 ea 65 ff ff       	call   c00133b6 <File::close()>
c001cdcc:	5d                   	pop    ebp
c001cdcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cdd1:	e8 7d 2a ff ff       	call   c000f853 <free>
c001cdd6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cdd9:	e8 75 2a ff ff       	call   c000f853 <free>
c001cdde:	a1 60 17 03 c0       	mov    eax,ds:0xc0031760
c001cde3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cde7:	8d 50 01             	lea    edx,[eax+0x1]
c001cdea:	89 0c 85 e0 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce920],ecx
c001cdf1:	89 34 85 60 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce9a0],esi
c001cdf8:	89 15 60 17 03 c0    	mov    DWORD PTR ds:0xc0031760,edx
c001cdfe:	83 c4 10             	add    esp,0x10
c001ce01:	b0 01                	mov    al,0x1
c001ce03:	83 c4 5c             	add    esp,0x5c
c001ce06:	5b                   	pop    ebx
c001ce07:	5e                   	pop    esi
c001ce08:	5f                   	pop    edi
c001ce09:	5d                   	pop    ebp
c001ce0a:	c3                   	ret    

c001ce0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ce0b:	55                   	push   ebp
c001ce0c:	57                   	push   edi
c001ce0d:	56                   	push   esi
c001ce0e:	53                   	push   ebx
c001ce0f:	81 ec 68 03 00 00    	sub    esp,0x368
c001ce15:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ce1c:	8b 1d b4 17 03 c0    	mov    ebx,DWORD PTR ds:0xc00317b4
c001ce22:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ce26:	68 14 01 00 00       	push   0x114
c001ce2b:	e8 13 2a ff ff       	call   c000f843 <malloc>
c001ce30:	83 c4 0c             	add    esp,0xc
c001ce33:	89 c5                	mov    ebp,eax
c001ce35:	53                   	push   ebx
c001ce36:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ce3d:	50                   	push   eax
c001ce3e:	e8 b1 64 ff ff       	call   c00132f4 <File::File(char const*, Process*)>
c001ce43:	5e                   	pop    esi
c001ce44:	5f                   	pop    edi
c001ce45:	6a 01                	push   0x1
c001ce47:	55                   	push   ebp
c001ce48:	e8 0b 65 ff ff       	call   c0013358 <File::open(FileOpenMode)>
c001ce4d:	83 c4 10             	add    esp,0x10
c001ce50:	85 c0                	test   eax,eax
c001ce52:	0f 85 8d 06 00 00    	jne    c001d4e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce58:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ce60:	83 ec 0c             	sub    esp,0xc
c001ce63:	6a 34                	push   0x34
c001ce65:	e8 d9 29 ff ff       	call   c000f843 <malloc>
c001ce6a:	5b                   	pop    ebx
c001ce6b:	89 c7                	mov    edi,eax
c001ce6d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ce71:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce74:	53                   	push   ebx
c001ce75:	57                   	push   edi
c001ce76:	6a 00                	push   0x0
c001ce78:	6a 34                	push   0x34
c001ce7a:	55                   	push   ebp
c001ce7b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce7e:	83 c4 20             	add    esp,0x20
c001ce81:	85 c0                	test   eax,eax
c001ce83:	0f 85 5c 06 00 00    	jne    c001d4e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce89:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ce8f:	0f 85 50 06 00 00    	jne    c001d4e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce95:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce98:	85 c0                	test   eax,eax
c001ce9a:	0f 84 45 06 00 00    	je     c001d4e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cea0:	31 d2                	xor    edx,edx
c001cea2:	51                   	push   ecx
c001cea3:	52                   	push   edx
c001cea4:	50                   	push   eax
c001cea5:	55                   	push   ebp
c001cea6:	e8 6b 65 ff ff       	call   c0013416 <File::seek(unsigned long long)>
c001ceab:	83 c4 10             	add    esp,0x10
c001ceae:	85 c0                	test   eax,eax
c001ceb0:	0f 85 2f 06 00 00    	jne    c001d4e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ceb6:	83 ec 0c             	sub    esp,0xc
c001ceb9:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cebc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cec0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cec4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cec8:	0f af c2             	imul   eax,edx
c001cecb:	50                   	push   eax
c001cecc:	e8 72 29 ff ff       	call   c000f843 <malloc>
c001ced1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ced4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ced8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cedb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cedf:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cee3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cee7:	0f af c2             	imul   eax,edx
c001ceea:	99                   	cdq    
c001ceeb:	52                   	push   edx
c001ceec:	50                   	push   eax
c001ceed:	55                   	push   ebp
c001ceee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cef1:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cef4:	83 c4 20             	add    esp,0x20
c001cef7:	85 c0                	test   eax,eax
c001cef9:	0f 84 e6 05 00 00    	je     c001d4e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ceff:	52                   	push   edx
c001cf00:	31 d2                	xor    edx,edx
c001cf02:	52                   	push   edx
c001cf03:	50                   	push   eax
c001cf04:	55                   	push   ebp
c001cf05:	e8 0c 65 ff ff       	call   c0013416 <File::seek(unsigned long long)>
c001cf0a:	83 c4 10             	add    esp,0x10
c001cf0d:	85 c0                	test   eax,eax
c001cf0f:	0f 85 d0 05 00 00    	jne    c001d4e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf15:	83 ec 0c             	sub    esp,0xc
c001cf18:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cf1c:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cf20:	31 f6                	xor    esi,esi
c001cf22:	0f af c2             	imul   eax,edx
c001cf25:	50                   	push   eax
c001cf26:	e8 18 29 ff ff       	call   c000f843 <malloc>
c001cf2b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf2e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf35:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf39:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cf3d:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cf41:	0f af c2             	imul   eax,edx
c001cf44:	99                   	cdq    
c001cf45:	52                   	push   edx
c001cf46:	50                   	push   eax
c001cf47:	55                   	push   ebp
c001cf48:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf4b:	83 c4 20             	add    esp,0x20
c001cf4e:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cf52:	0f 86 8a 00 00 00    	jbe    c001cfe2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cf58:	0f b7 de             	movzx  ebx,si
c001cf5b:	c1 e3 05             	shl    ebx,0x5
c001cf5e:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cf62:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cf65:	75 75                	jne    c001cfdc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cf67:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cf6a:	31 d2                	xor    edx,edx
c001cf6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf70:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cf73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf77:	50                   	push   eax
c001cf78:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cf7b:	52                   	push   edx
c001cf7c:	50                   	push   eax
c001cf7d:	55                   	push   ebp
c001cf7e:	e8 93 64 ff ff       	call   c0013416 <File::seek(unsigned long long)>
c001cf83:	83 c4 10             	add    esp,0x10
c001cf86:	85 c0                	test   eax,eax
c001cf88:	0f 85 57 05 00 00    	jne    c001d4e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf8e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cf95:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cf9c:	31 d2                	xor    edx,edx
c001cf9e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cfa2:	83 ec 0c             	sub    esp,0xc
c001cfa5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cfa9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cfb0:	50                   	push   eax
c001cfb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cfb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfb9:	52                   	push   edx
c001cfba:	50                   	push   eax
c001cfbb:	55                   	push   ebp
c001cfbc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfbf:	83 c4 1c             	add    esp,0x1c
c001cfc2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cfc5:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cfc8:	50                   	push   eax
c001cfc9:	6a 00                	push   0x0
c001cfcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfcf:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cfd3:	50                   	push   eax
c001cfd4:	e8 9f 37 fe ff       	call   c0000778 <memset>
c001cfd9:	83 c4 10             	add    esp,0x10
c001cfdc:	46                   	inc    esi
c001cfdd:	e9 6c ff ff ff       	jmp    c001cf4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cfe2:	53                   	push   ebx
c001cfe3:	31 db                	xor    ebx,ebx
c001cfe5:	68 00 01 00 00       	push   0x100
c001cfea:	6a 00                	push   0x0
c001cfec:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cff0:	50                   	push   eax
c001cff1:	e8 82 37 fe ff       	call   c0000778 <memset>
c001cff6:	83 c4 0c             	add    esp,0xc
c001cff9:	68 00 01 00 00       	push   0x100
c001cffe:	6a 00                	push   0x0
c001d000:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d007:	50                   	push   eax
c001d008:	e8 6b 37 fe ff       	call   c0000778 <memset>
c001d00d:	83 c4 10             	add    esp,0x10
c001d010:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d018:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d020:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d028:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d030:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d038:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d03c:	0f 86 30 01 00 00    	jbe    c001d172 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d042:	0f b7 f3             	movzx  esi,bx
c001d045:	6b f6 28             	imul   esi,esi,0x28
c001d048:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d04c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d04f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d053:	52                   	push   edx
c001d054:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d058:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d05c:	8b 06                	mov    eax,DWORD PTR [esi]
c001d05e:	6b d2 28             	imul   edx,edx,0x28
c001d061:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d065:	31 d2                	xor    edx,edx
c001d067:	52                   	push   edx
c001d068:	50                   	push   eax
c001d069:	55                   	push   ebp
c001d06a:	e8 a7 63 ff ff       	call   c0013416 <File::seek(unsigned long long)>
c001d06f:	83 c4 0c             	add    esp,0xc
c001d072:	6a 20                	push   0x20
c001d074:	6a 00                	push   0x0
c001d076:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d07d:	51                   	push   ecx
c001d07e:	e8 f5 36 fe ff       	call   c0000778 <memset>
c001d083:	59                   	pop    ecx
c001d084:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d087:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d08b:	52                   	push   edx
c001d08c:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d093:	51                   	push   ecx
c001d094:	6a 00                	push   0x0
c001d096:	6a 1f                	push   0x1f
c001d098:	55                   	push   ebp
c001d099:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d09c:	83 c4 1c             	add    esp,0x1c
c001d09f:	6a 09                	push   0x9
c001d0a1:	68 c8 be 02 c0       	push   0xc002bec8
c001d0a6:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d0ad:	51                   	push   ecx
c001d0ae:	e8 8d 35 fe ff       	call   c0000640 <memcmp>
c001d0b3:	83 c4 10             	add    esp,0x10
c001d0b6:	85 c0                	test   eax,eax
c001d0b8:	75 21                	jne    c001d0db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d0ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0c2:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d0c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d0ca:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d0cd:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d0d4:	89 d0                	mov    eax,edx
c001d0d6:	40                   	inc    eax
c001d0d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0db:	50                   	push   eax
c001d0dc:	6a 09                	push   0x9
c001d0de:	68 d2 be 02 c0       	push   0xc002bed2
c001d0e3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0ea:	50                   	push   eax
c001d0eb:	e8 50 35 fe ff       	call   c0000640 <memcmp>
c001d0f0:	83 c4 10             	add    esp,0x10
c001d0f3:	85 c0                	test   eax,eax
c001d0f5:	75 21                	jne    c001d118 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d0f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0ff:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d103:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d107:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d10a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d111:	89 d0                	mov    eax,edx
c001d113:	40                   	inc    eax
c001d114:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d118:	50                   	push   eax
c001d119:	50                   	push   eax
c001d11a:	68 9e be 02 c0       	push   0xc002be9e
c001d11f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d126:	50                   	push   eax
c001d127:	e8 94 37 fe ff       	call   c00008c0 <strcmp>
c001d12c:	83 c4 10             	add    esp,0x10
c001d12f:	85 c0                	test   eax,eax
c001d131:	75 0f                	jne    c001d142 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d133:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d136:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d13a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d13e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d142:	50                   	push   eax
c001d143:	50                   	push   eax
c001d144:	68 a6 be 02 c0       	push   0xc002bea6
c001d149:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d150:	50                   	push   eax
c001d151:	e8 6a 37 fe ff       	call   c00008c0 <strcmp>
c001d156:	83 c4 10             	add    esp,0x10
c001d159:	85 c0                	test   eax,eax
c001d15b:	75 0f                	jne    c001d16c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d15d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d160:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d164:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d168:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d16c:	43                   	inc    ebx
c001d16d:	e9 c6 fe ff ff       	jmp    c001d038 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d172:	31 d2                	xor    edx,edx
c001d174:	50                   	push   eax
c001d175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d179:	52                   	push   edx
c001d17a:	50                   	push   eax
c001d17b:	55                   	push   ebp
c001d17c:	e8 95 62 ff ff       	call   c0013416 <File::seek(unsigned long long)>
c001d181:	58                   	pop    eax
c001d182:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d186:	e8 b8 26 ff ff       	call   c000f843 <malloc>
c001d18b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d18e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d192:	31 d2                	xor    edx,edx
c001d194:	58                   	pop    eax
c001d195:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d199:	53                   	push   ebx
c001d19a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d19e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d1a2:	52                   	push   edx
c001d1a3:	50                   	push   eax
c001d1a4:	55                   	push   ebp
c001d1a5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1a8:	83 c4 14             	add    esp,0x14
c001d1ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d1af:	e8 8f 26 ff ff       	call   c000f843 <malloc>
c001d1b4:	31 d2                	xor    edx,edx
c001d1b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d1ba:	83 c4 0c             	add    esp,0xc
c001d1bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d1c1:	52                   	push   edx
c001d1c2:	50                   	push   eax
c001d1c3:	55                   	push   ebp
c001d1c4:	e8 4d 62 ff ff       	call   c0013416 <File::seek(unsigned long long)>
c001d1c9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1cc:	31 d2                	xor    edx,edx
c001d1ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1d1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d1d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d1d9:	52                   	push   edx
c001d1da:	50                   	push   eax
c001d1db:	55                   	push   ebp
c001d1dc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1df:	83 c4 20             	add    esp,0x20
c001d1e2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d1ee:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d1f2:	0f 84 f1 02 00 00    	je     c001d4e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d1f8:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d1ff:	31 d2                	xor    edx,edx
c001d201:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d205:	c1 e8 03             	shr    eax,0x3
c001d208:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d20c:	51                   	push   ecx
c001d20d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d211:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d215:	52                   	push   edx
c001d216:	50                   	push   eax
c001d217:	55                   	push   ebp
c001d218:	e8 f9 61 ff ff       	call   c0013416 <File::seek(unsigned long long)>
c001d21d:	5b                   	pop    ebx
c001d21e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d222:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d229:	e8 15 26 ff ff       	call   c000f843 <malloc>
c001d22e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d231:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d235:	31 d2                	xor    edx,edx
c001d237:	5e                   	pop    esi
c001d238:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d23c:	50                   	push   eax
c001d23d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d241:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d245:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d24c:	52                   	push   edx
c001d24d:	50                   	push   eax
c001d24e:	55                   	push   ebp
c001d24f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d252:	83 c4 20             	add    esp,0x20
c001d255:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d25d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d261:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d265:	0f 8d 62 02 00 00    	jge    c001d4cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d26b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d26f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d273:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d278:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d27b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d27f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d283:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d287:	89 d8                	mov    eax,ebx
c001d289:	c1 e8 08             	shr    eax,0x8
c001d28c:	89 c6                	mov    esi,eax
c001d28e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d292:	c1 e6 04             	shl    esi,0x4
c001d295:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d299:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d29c:	85 d2                	test   edx,edx
c001d29e:	0f 85 bf 00 00 00    	jne    c001d363 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d2a4:	83 ec 0c             	sub    esp,0xc
c001d2a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2ab:	03 06                	add    eax,DWORD PTR [esi]
c001d2ad:	50                   	push   eax
c001d2ae:	e8 4b f8 ff ff       	call   c001cafe <Thr::getAddressOfKernelSymbol(char const*)>
c001d2b3:	83 c4 10             	add    esp,0x10
c001d2b6:	89 c2                	mov    edx,eax
c001d2b8:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d2bd:	85 c0                	test   eax,eax
c001d2bf:	0f 85 9e 00 00 00    	jne    c001d363 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d2c5:	83 ec 0c             	sub    esp,0xc
c001d2c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2cc:	03 06                	add    eax,DWORD PTR [esi]
c001d2ce:	50                   	push   eax
c001d2cf:	e8 21 12 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d2d4:	83 c4 10             	add    esp,0x10
c001d2d7:	89 c2                	mov    edx,eax
c001d2d9:	85 c0                	test   eax,eax
c001d2db:	0f 85 82 00 00 00    	jne    c001d363 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d2e1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d2e5:	50                   	push   eax
c001d2e6:	50                   	push   eax
c001d2e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2eb:	03 06                	add    eax,DWORD PTR [esi]
c001d2ed:	50                   	push   eax
c001d2ee:	68 dc be 02 c0       	push   0xc002bedc
c001d2f3:	e8 a4 5a ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001d2f8:	58                   	pop    eax
c001d2f9:	5a                   	pop    edx
c001d2fa:	68 f6 be 02 c0       	push   0xc002bef6
c001d2ff:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d306:	50                   	push   eax
c001d307:	e8 28 35 fe ff       	call   c0000834 <strcpy>
c001d30c:	59                   	pop    ecx
c001d30d:	58                   	pop    eax
c001d30e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d312:	03 06                	add    eax,DWORD PTR [esi]
c001d314:	50                   	push   eax
c001d315:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d31c:	50                   	push   eax
c001d31d:	e8 52 36 fe ff       	call   c0000974 <strcat>
c001d322:	58                   	pop    eax
c001d323:	5a                   	pop    edx
c001d324:	68 8c bf 02 c0       	push   0xc002bf8c
c001d329:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d330:	50                   	push   eax
c001d331:	e8 3e 36 fe ff       	call   c0000974 <strcat>
c001d336:	83 c4 10             	add    esp,0x10
c001d339:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d33e:	0f 84 43 01 00 00    	je     c001d487 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d344:	83 ec 0c             	sub    esp,0xc
c001d347:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d34e:	50                   	push   eax
c001d34f:	e8 23 d1 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001d354:	83 c4 10             	add    esp,0x10
c001d357:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d35b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d35f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d363:	80 fb 01             	cmp    bl,0x1
c001d366:	75 7d                	jne    c001d3e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d368:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d36f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d373:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d377:	01 ce                	add    esi,ecx
c001d379:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d37f:	0f 94 c0             	sete   al
c001d382:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d388:	0f 94 c3             	sete   bl
c001d38b:	09 c3                	or     ebx,eax
c001d38d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d38f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d394:	74 36                	je     c001d3cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d396:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d399:	84 db                	test   bl,bl
c001d39b:	75 0a                	jne    c001d3a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d39d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3a1:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d3a5:	76 37                	jbe    c001d3de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d3a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d3ab:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d3b0:	0f 84 d1 00 00 00    	je     c001d487 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d3b6:	83 ec 0c             	sub    esp,0xc
c001d3b9:	68 0d bf 02 c0       	push   0xc002bf0d
c001d3be:	e8 b4 d0 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001d3c3:	83 c4 10             	add    esp,0x10
c001d3c6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d3ca:	eb 12                	jmp    c001d3de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d3cc:	01 c1                	add    ecx,eax
c001d3ce:	84 db                	test   bl,bl
c001d3d0:	75 0c                	jne    c001d3de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d3d2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3d6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d3da:	77 02                	ja     c001d3de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d3dc:	01 d1                	add    ecx,edx
c001d3de:	89 0e                	mov    DWORD PTR [esi],ecx
c001d3e0:	e9 df 00 00 00       	jmp    c001d4c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d3e5:	80 fb 02             	cmp    bl,0x2
c001d3e8:	75 71                	jne    c001d45b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d3ea:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d3f1:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d3f5:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d3f9:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d3ff:	74 15                	je     c001d416 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d401:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d407:	74 0d                	je     c001d416 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d409:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d40d:	83 e8 04             	sub    eax,0x4
c001d410:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d414:	76 1f                	jbe    c001d435 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d416:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d41a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d41f:	74 66                	je     c001d487 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d421:	83 ec 0c             	sub    esp,0xc
c001d424:	68 29 bf 02 c0       	push   0xc002bf29
c001d429:	e8 49 d0 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001d42e:	83 c4 10             	add    esp,0x10
c001d431:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d435:	8b 06                	mov    eax,DWORD PTR [esi]
c001d437:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d43c:	74 13                	je     c001d451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d43e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d442:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d449:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d44d:	01 c8                	add    eax,ecx
c001d44f:	eb 04                	jmp    c001d455 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d451:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d455:	01 c2                	add    edx,eax
c001d457:	89 16                	mov    DWORD PTR [esi],edx
c001d459:	eb 69                	jmp    c001d4c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d45b:	0f b6 db             	movzx  ebx,bl
c001d45e:	50                   	push   eax
c001d45f:	50                   	push   eax
c001d460:	53                   	push   ebx
c001d461:	68 45 bf 02 c0       	push   0xc002bf45
c001d466:	e8 31 59 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001d46b:	83 c4 10             	add    esp,0x10
c001d46e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d473:	74 12                	je     c001d487 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d475:	83 ec 0c             	sub    esp,0xc
c001d478:	68 50 bf 02 c0       	push   0xc002bf50
c001d47d:	e8 f5 cf ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001d482:	83 c4 10             	add    esp,0x10
c001d485:	eb 3d                	jmp    c001d4c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d487:	83 ec 0c             	sub    esp,0xc
c001d48a:	55                   	push   ebp
c001d48b:	e8 26 5f ff ff       	call   c00133b6 <File::close()>
c001d490:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d493:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d496:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d499:	59                   	pop    ecx
c001d49a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d49e:	e8 b0 23 ff ff       	call   c000f853 <free>
c001d4a3:	5b                   	pop    ebx
c001d4a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4a8:	e8 a6 23 ff ff       	call   c000f853 <free>
c001d4ad:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d4b0:	e8 9e 23 ff ff       	call   c000f853 <free>
c001d4b5:	5e                   	pop    esi
c001d4b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4ba:	e8 94 23 ff ff       	call   c000f853 <free>
c001d4bf:	83 c4 10             	add    esp,0x10
c001d4c2:	eb 21                	jmp    c001d4e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d4c4:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d4c8:	e9 90 fd ff ff       	jmp    c001d25d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d4cd:	83 ec 0c             	sub    esp,0xc
c001d4d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d4d4:	e8 7a 23 ff ff       	call   c000f853 <free>
c001d4d9:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d4dd:	83 c4 10             	add    esp,0x10
c001d4e0:	e9 05 fd ff ff       	jmp    c001d1ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d4e5:	31 c0                	xor    eax,eax
c001d4e7:	eb 33                	jmp    c001d51c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d4e9:	83 ec 0c             	sub    esp,0xc
c001d4ec:	55                   	push   ebp
c001d4ed:	e8 c4 5e ff ff       	call   c00133b6 <File::close()>
c001d4f2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d4f5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d4f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d4fb:	58                   	pop    eax
c001d4fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d500:	e8 4e 23 ff ff       	call   c000f853 <free>
c001d505:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d508:	e8 46 23 ff ff       	call   c000f853 <free>
c001d50d:	5a                   	pop    edx
c001d50e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d512:	e8 3c 23 ff ff       	call   c000f853 <free>
c001d517:	83 c4 10             	add    esp,0x10
c001d51a:	b0 01                	mov    al,0x1
c001d51c:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d522:	5b                   	pop    ebx
c001d523:	5e                   	pop    esi
c001d524:	5f                   	pop    edi
c001d525:	5d                   	pop    ebp
c001d526:	c3                   	ret    

c001d527 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d527:	56                   	push   esi
c001d528:	31 d2                	xor    edx,edx
c001d52a:	53                   	push   ebx
c001d52b:	8b 1d c0 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030fc0
c001d531:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d535:	39 d3                	cmp    ebx,edx
c001d537:	7e 1b                	jle    c001d554 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d539:	8b 04 95 e0 11 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcee20]
c001d540:	39 c8                	cmp    eax,ecx
c001d542:	77 0d                	ja     c001d551 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d544:	8b 34 95 e0 0f 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf020]
c001d54b:	01 c6                	add    esi,eax
c001d54d:	39 ce                	cmp    esi,ecx
c001d54f:	77 05                	ja     c001d556 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d551:	42                   	inc    edx
c001d552:	eb e1                	jmp    c001d535 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d554:	31 c0                	xor    eax,eax
c001d556:	5b                   	pop    ebx
c001d557:	5e                   	pop    esi
c001d558:	c3                   	ret    

c001d559 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d559:	53                   	push   ebx
c001d55a:	31 c0                	xor    eax,eax
c001d55c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d560:	8b 1d c0 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030fc0
c001d566:	39 c3                	cmp    ebx,eax
c001d568:	7e 22                	jle    c001d58c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d56a:	8b 14 85 e0 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcee20]
c001d571:	39 ca                	cmp    edx,ecx
c001d573:	77 14                	ja     c001d589 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d575:	03 14 85 e0 0f 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf020]
c001d57c:	39 ca                	cmp    edx,ecx
c001d57e:	76 09                	jbe    c001d589 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d580:	8b 04 85 e0 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcec20]
c001d587:	eb 05                	jmp    c001d58e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d589:	40                   	inc    eax
c001d58a:	eb da                	jmp    c001d566 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d58c:	31 c0                	xor    eax,eax
c001d58e:	5b                   	pop    ebx
c001d58f:	c3                   	ret    

c001d590 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d590:	53                   	push   ebx
c001d591:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d595:	53                   	push   ebx
c001d596:	e8 8c ff ff ff       	call   c001d527 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d59b:	5a                   	pop    edx
c001d59c:	31 d2                	xor    edx,edx
c001d59e:	85 c0                	test   eax,eax
c001d5a0:	74 04                	je     c001d5a6 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d5a2:	89 da                	mov    edx,ebx
c001d5a4:	29 c2                	sub    edx,eax
c001d5a6:	89 d0                	mov    eax,edx
c001d5a8:	5b                   	pop    ebx
c001d5a9:	c3                   	ret    

c001d5aa <Thr::loadDLL(char const*, bool)>:
c001d5aa:	55                   	push   ebp
c001d5ab:	57                   	push   edi
c001d5ac:	56                   	push   esi
c001d5ad:	53                   	push   ebx
c001d5ae:	81 ec 34 01 00 00    	sub    esp,0x134
c001d5b4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d5bb:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d5c2:	56                   	push   esi
c001d5c3:	68 68 bf 02 c0       	push   0xc002bf68
c001d5c8:	e8 cf 57 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001d5cd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d5d4:	e8 6a 22 ff ff       	call   c000f843 <malloc>
c001d5d9:	83 c4 0c             	add    esp,0xc
c001d5dc:	89 c3                	mov    ebx,eax
c001d5de:	ff 35 b4 17 03 c0    	push   DWORD PTR ds:0xc00317b4
c001d5e4:	56                   	push   esi
c001d5e5:	50                   	push   eax
c001d5e6:	e8 09 5d ff ff       	call   c00132f4 <File::File(char const*, Process*)>
c001d5eb:	83 c4 10             	add    esp,0x10
c001d5ee:	85 db                	test   ebx,ebx
c001d5f0:	75 3c                	jne    c001d62e <Thr::loadDLL(char const*, bool)+0x84>
c001d5f2:	89 e8                	mov    eax,ebp
c001d5f4:	84 c0                	test   al,al
c001d5f6:	0f 84 f0 01 00 00    	je     c001d7ec <Thr::loadDLL(char const*, bool)+0x242>
c001d5fc:	50                   	push   eax
c001d5fd:	50                   	push   eax
c001d5fe:	68 79 bf 02 c0       	push   0xc002bf79
c001d603:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d607:	57                   	push   edi
c001d608:	e8 27 32 fe ff       	call   c0000834 <strcpy>
c001d60d:	58                   	pop    eax
c001d60e:	5a                   	pop    edx
c001d60f:	56                   	push   esi
c001d610:	57                   	push   edi
c001d611:	e8 5e 33 fe ff       	call   c0000974 <strcat>
c001d616:	59                   	pop    ecx
c001d617:	58                   	pop    eax
c001d618:	68 8c bf 02 c0       	push   0xc002bf8c
c001d61d:	57                   	push   edi
c001d61e:	e8 51 33 fe ff       	call   c0000974 <strcat>
c001d623:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d626:	e8 4c ce ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001d62b:	83 c4 10             	add    esp,0x10
c001d62e:	50                   	push   eax
c001d62f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d633:	50                   	push   eax
c001d634:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d638:	50                   	push   eax
c001d639:	53                   	push   ebx
c001d63a:	e8 c5 5f ff ff       	call   c0013604 <File::stat(unsigned long long*, bool*)>
c001d63f:	83 c4 10             	add    esp,0x10
c001d642:	85 db                	test   ebx,ebx
c001d644:	74 0c                	je     c001d652 <Thr::loadDLL(char const*, bool)+0xa8>
c001d646:	83 ec 0c             	sub    esp,0xc
c001d649:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d64b:	53                   	push   ebx
c001d64c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d64f:	83 c4 10             	add    esp,0x10
c001d652:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d657:	75 0a                	jne    c001d663 <Thr::loadDLL(char const*, bool)+0xb9>
c001d659:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d65d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d661:	75 3c                	jne    c001d69f <Thr::loadDLL(char const*, bool)+0xf5>
c001d663:	89 e8                	mov    eax,ebp
c001d665:	84 c0                	test   al,al
c001d667:	0f 84 67 01 00 00    	je     c001d7d4 <Thr::loadDLL(char const*, bool)+0x22a>
c001d66d:	50                   	push   eax
c001d66e:	50                   	push   eax
c001d66f:	68 79 bf 02 c0       	push   0xc002bf79
c001d674:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d678:	53                   	push   ebx
c001d679:	e8 b6 31 fe ff       	call   c0000834 <strcpy>
c001d67e:	58                   	pop    eax
c001d67f:	5a                   	pop    edx
c001d680:	56                   	push   esi
c001d681:	53                   	push   ebx
c001d682:	e8 ed 32 fe ff       	call   c0000974 <strcat>
c001d687:	59                   	pop    ecx
c001d688:	5f                   	pop    edi
c001d689:	68 8c bf 02 c0       	push   0xc002bf8c
c001d68e:	53                   	push   ebx
c001d68f:	e8 e0 32 fe ff       	call   c0000974 <strcat>
c001d694:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d697:	e8 db cd ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001d69c:	83 c4 10             	add    esp,0x10
c001d69f:	e8 42 47 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c001d6a4:	51                   	push   ecx
c001d6a5:	68 03 08 00 00       	push   0x803
c001d6aa:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d6ae:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d6b2:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d6b8:	83 d3 00             	adc    ebx,0x0
c001d6bb:	89 ca                	mov    edx,ecx
c001d6bd:	89 d1                	mov    ecx,edx
c001d6bf:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d6c3:	51                   	push   ecx
c001d6c4:	50                   	push   eax
c001d6c5:	e8 3e 4c ff ff       	call   c0012308 <VAS::allocatePages(int, int)>
c001d6ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d6ce:	89 c3                	mov    ebx,eax
c001d6d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d6d4:	05 ff 0f 00 00       	add    eax,0xfff
c001d6d9:	83 d2 00             	adc    edx,0x0
c001d6dc:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d6e0:	c1 ea 0c             	shr    edx,0xc
c001d6e3:	52                   	push   edx
c001d6e4:	50                   	push   eax
c001d6e5:	53                   	push   ebx
c001d6e6:	68 8e bf 02 c0       	push   0xc002bf8e
c001d6eb:	e8 ac 56 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001d6f0:	83 c4 14             	add    esp,0x14
c001d6f3:	56                   	push   esi
c001d6f4:	e8 9b 30 fe ff       	call   c0000794 <strlen>
c001d6f9:	8b 3d c0 0f 03 c0    	mov    edi,DWORD PTR ds:0xc0030fc0
c001d6ff:	40                   	inc    eax
c001d700:	89 04 24             	mov    DWORD PTR [esp],eax
c001d703:	e8 3b 21 ff ff       	call   c000f843 <malloc>
c001d708:	89 04 bd e0 13 03 c0 	mov    DWORD PTR [edi*4-0x3ffcec20],eax
c001d70f:	5f                   	pop    edi
c001d710:	58                   	pop    eax
c001d711:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c001d716:	56                   	push   esi
c001d717:	ff 34 85 e0 13 03 c0 	push   DWORD PTR [eax*4-0x3ffcec20]
c001d71e:	e8 11 31 fe ff       	call   c0000834 <strcpy>
c001d723:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c001d728:	8d 50 01             	lea    edx,[eax+0x1]
c001d72b:	89 1c 85 e0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee20],ebx
c001d732:	89 15 c0 0f 03 c0    	mov    DWORD PTR ds:0xc0030fc0,edx
c001d738:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d73c:	83 c4 0c             	add    esp,0xc
c001d73f:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c001d746:	6a 01                	push   0x1
c001d748:	53                   	push   ebx
c001d749:	56                   	push   esi
c001d74a:	e8 bc f6 ff ff       	call   c001ce0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d74f:	83 c4 10             	add    esp,0x10
c001d752:	89 c7                	mov    edi,eax
c001d754:	84 c0                	test   al,al
c001d756:	0f 85 8c 00 00 00    	jne    c001d7e8 <Thr::loadDLL(char const*, bool)+0x23e>
c001d75c:	89 e8                	mov    eax,ebp
c001d75e:	84 c0                	test   al,al
c001d760:	74 76                	je     c001d7d8 <Thr::loadDLL(char const*, bool)+0x22e>
c001d762:	83 ec 0c             	sub    esp,0xc
c001d765:	68 b2 bf 02 c0       	push   0xc002bfb2
c001d76a:	e8 08 cd ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001d76f:	83 c4 10             	add    esp,0x10
c001d772:	eb 64                	jmp    c001d7d8 <Thr::loadDLL(char const*, bool)+0x22e>
c001d774:	e8 6d 46 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c001d779:	89 f5                	mov    ebp,esi
c001d77b:	c1 e5 0c             	shl    ebp,0xc
c001d77e:	52                   	push   edx
c001d77f:	01 dd                	add    ebp,ebx
c001d781:	52                   	push   edx
c001d782:	55                   	push   ebp
c001d783:	50                   	push   eax
c001d784:	e8 f9 46 ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c001d789:	83 c4 10             	add    esp,0x10
c001d78c:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d78f:	75 0c                	jne    c001d79d <Thr::loadDLL(char const*, bool)+0x1f3>
c001d791:	83 ec 0c             	sub    esp,0xc
c001d794:	55                   	push   ebp
c001d795:	e8 bc 26 ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c001d79a:	83 c4 10             	add    esp,0x10
c001d79d:	46                   	inc    esi
c001d79e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d7a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7a6:	05 ff 0f 00 00       	add    eax,0xfff
c001d7ab:	83 d2 00             	adc    edx,0x0
c001d7ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d7b2:	c1 ea 0c             	shr    edx,0xc
c001d7b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d7b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d7bd:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d7c1:	ba 00 00 00 00       	mov    edx,0x0
c001d7c6:	89 d0                	mov    eax,edx
c001d7c8:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d7cc:	72 a6                	jb     c001d774 <Thr::loadDLL(char const*, bool)+0x1ca>
c001d7ce:	89 f8                	mov    eax,edi
c001d7d0:	84 c0                	test   al,al
c001d7d2:	75 18                	jne    c001d7ec <Thr::loadDLL(char const*, bool)+0x242>
c001d7d4:	31 db                	xor    ebx,ebx
c001d7d6:	eb 14                	jmp    c001d7ec <Thr::loadDLL(char const*, bool)+0x242>
c001d7d8:	83 ec 0c             	sub    esp,0xc
c001d7db:	68 d1 bf 02 c0       	push   0xc002bfd1
c001d7e0:	e8 92 cc ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001d7e5:	83 c4 10             	add    esp,0x10
c001d7e8:	31 f6                	xor    esi,esi
c001d7ea:	eb b2                	jmp    c001d79e <Thr::loadDLL(char const*, bool)+0x1f4>
c001d7ec:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d7f2:	89 d8                	mov    eax,ebx
c001d7f4:	5b                   	pop    ebx
c001d7f5:	5e                   	pop    esi
c001d7f6:	5f                   	pop    edi
c001d7f7:	5d                   	pop    ebp
c001d7f8:	c3                   	ret    

c001d7f9 <Thr::executeDLL(unsigned long, void*)>:
c001d7f9:	56                   	push   esi
c001d7fa:	53                   	push   ebx
c001d7fb:	52                   	push   edx
c001d7fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d800:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d804:	85 db                	test   ebx,ebx
c001d806:	75 10                	jne    c001d818 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d808:	83 ec 0c             	sub    esp,0xc
c001d80b:	68 ed bf 02 c0       	push   0xc002bfed
c001d810:	e8 62 cc ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001d815:	83 c4 10             	add    esp,0x10
c001d818:	50                   	push   eax
c001d819:	50                   	push   eax
c001d81a:	53                   	push   ebx
c001d81b:	68 17 c0 02 c0       	push   0xc002c017
c001d820:	e8 77 55 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001d825:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d829:	89 d8                	mov    eax,ebx
c001d82b:	83 c4 14             	add    esp,0x14
c001d82e:	5b                   	pop    ebx
c001d82f:	5e                   	pop    esi
c001d830:	ff e0                	jmp    eax

c001d832 <changeTSS>:
c001d832:	83 ec 14             	sub    esp,0x14
c001d835:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d83a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d83d:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d842:	c1 e2 15             	shl    edx,0x15
c001d845:	29 d0                	sub    eax,edx
c001d847:	50                   	push   eax
c001d848:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001d84d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d853:	05 7c 11 00 00       	add    eax,0x117c
c001d858:	50                   	push   eax
c001d859:	e8 20 3c ff ff       	call   c001147e <TSS::setESP(unsigned long)>
c001d85e:	83 c4 1c             	add    esp,0x1c
c001d861:	c3                   	ret    

c001d862 <Process::addArgs(char**)>:
c001d862:	57                   	push   edi
c001d863:	56                   	push   esi
c001d864:	53                   	push   ebx
c001d865:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d869:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d86d:	c7 86 36 19 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1936],0x0
c001d877:	85 ff                	test   edi,edi
c001d879:	74 3d                	je     c001d8b8 <Process::addArgs(char**)+0x56>
c001d87b:	8b 07                	mov    eax,DWORD PTR [edi]
c001d87d:	85 c0                	test   eax,eax
c001d87f:	74 37                	je     c001d8b8 <Process::addArgs(char**)+0x56>
c001d881:	31 db                	xor    ebx,ebx
c001d883:	83 ec 0c             	sub    esp,0xc
c001d886:	50                   	push   eax
c001d887:	e8 08 2f fe ff       	call   c0000794 <strlen>
c001d88c:	40                   	inc    eax
c001d88d:	89 04 24             	mov    DWORD PTR [esp],eax
c001d890:	e8 ae 1f ff ff       	call   c000f843 <malloc>
c001d895:	89 84 9e 3a 19 00 00 	mov    DWORD PTR [esi+ebx*4+0x193a],eax
c001d89c:	5a                   	pop    edx
c001d89d:	59                   	pop    ecx
c001d89e:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d8a1:	43                   	inc    ebx
c001d8a2:	50                   	push   eax
c001d8a3:	e8 8c 2f fe ff       	call   c0000834 <strcpy>
c001d8a8:	ff 86 36 19 00 00    	inc    DWORD PTR [esi+0x1936]
c001d8ae:	83 c4 10             	add    esp,0x10
c001d8b1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d8b4:	85 c0                	test   eax,eax
c001d8b6:	75 cb                	jne    c001d883 <Process::addArgs(char**)+0x21>
c001d8b8:	5b                   	pop    ebx
c001d8b9:	5e                   	pop    esi
c001d8ba:	5f                   	pop    edi
c001d8bb:	c3                   	ret    

c001d8bc <Process::Process(char const*, Process*, char**)>:
c001d8bc:	56                   	push   esi
c001d8bd:	53                   	push   ebx
c001d8be:	83 ec 14             	sub    esp,0x14
c001d8c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8c5:	05 0c 02 00 00       	add    eax,0x20c
c001d8ca:	bb 07 00 00 00       	mov    ebx,0x7
c001d8cf:	89 c6                	mov    esi,eax
c001d8d1:	85 db                	test   ebx,ebx
c001d8d3:	78 15                	js     c001d8ea <Process::Process(char const*, Process*, char**)+0x2e>
c001d8d5:	83 ec 0c             	sub    esp,0xc
c001d8d8:	56                   	push   esi
c001d8d9:	e8 54 b2 00 00       	call   c0028b32 <ThreadControlBlock::ThreadControlBlock()>
c001d8de:	83 c4 10             	add    esp,0x10
c001d8e1:	81 c6 e3 02 00 00    	add    esi,0x2e3
c001d8e7:	4b                   	dec    ebx
c001d8e8:	eb e7                	jmp    c001d8d1 <Process::Process(char const*, Process*, char**)+0x15>
c001d8ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8ee:	c6 80 3e 1b 00 00 00 	mov    BYTE PTR [eax+0x1b3e],0x0
c001d8f5:	83 ec 0c             	sub    esp,0xc
c001d8f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8fc:	e8 c7 c9 ff ff       	call   c001a2c8 <Krnl::newProcessEnv(Process*)>
c001d901:	83 c4 10             	add    esp,0x10
c001d904:	89 c2                	mov    edx,eax
c001d906:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d90a:	89 90 3a 1b 00 00    	mov    DWORD PTR [eax+0x1b3a],edx
c001d910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d914:	66 c7 80 24 19 00 00 00 00 	mov    WORD PTR [eax+0x1924],0x0
c001d91d:	a1 d0 d7 02 c0       	mov    eax,ds:0xc002d7d0
c001d922:	8d 50 01             	lea    edx,[eax+0x1]
c001d925:	89 15 d0 d7 02 c0    	mov    DWORD PTR ds:0xc002d7d0,edx
c001d92b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d92f:	89 02                	mov    DWORD PTR [edx],eax
c001d931:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d939:	83 ec 0c             	sub    esp,0xc
c001d93c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d940:	e8 fe 1e ff ff       	call   c000f843 <malloc>
c001d945:	83 c4 10             	add    esp,0x10
c001d948:	89 c3                	mov    ebx,eax
c001d94a:	83 ec 08             	sub    esp,0x8
c001d94d:	6a 00                	push   0x0
c001d94f:	53                   	push   ebx
c001d950:	e8 5b 4d ff ff       	call   c00126b0 <VAS::VAS(bool)>
c001d955:	83 c4 10             	add    esp,0x10
c001d958:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d95c:	89 98 32 19 00 00    	mov    DWORD PTR [eax+0x1932],ebx
c001d962:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d966:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001d970:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d974:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d978:	89 90 2a 19 00 00    	mov    DWORD PTR [eax+0x192a],edx
c001d97e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d982:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001d988:	85 c0                	test   eax,eax
c001d98a:	74 42                	je     c001d9ce <Process::Process(char const*, Process*, char**)+0x112>
c001d98c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d990:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001d996:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001d99c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9a0:	89 90 26 19 00 00    	mov    DWORD PTR [eax+0x1926],edx
c001d9a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9aa:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001d9b0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d9b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9ba:	05 0c 01 00 00       	add    eax,0x10c
c001d9bf:	83 ec 08             	sub    esp,0x8
c001d9c2:	52                   	push   edx
c001d9c3:	50                   	push   eax
c001d9c4:	e8 6b 2e fe ff       	call   c0000834 <strcpy>
c001d9c9:	83 c4 10             	add    esp,0x10
c001d9cc:	eb 63                	jmp    c001da31 <Process::Process(char const*, Process*, char**)+0x175>
c001d9ce:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001d9d6:	83 ec 0c             	sub    esp,0xc
c001d9d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d9dd:	e8 61 1e ff ff       	call   c000f843 <malloc>
c001d9e2:	83 c4 10             	add    esp,0x10
c001d9e5:	89 c3                	mov    ebx,eax
c001d9e7:	83 ec 08             	sub    esp,0x8
c001d9ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d9ee:	53                   	push   ebx
c001d9ef:	e8 88 37 ff ff       	call   c001117c <VgaText::VgaText(char const*)>
c001d9f4:	83 c4 10             	add    esp,0x10
c001d9f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9fb:	89 98 26 19 00 00    	mov    DWORD PTR [eax+0x1926],ebx
c001da01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da05:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001da0b:	83 ec 0c             	sub    esp,0xc
c001da0e:	50                   	push   eax
c001da0f:	e8 5b 2b ff ff       	call   c001056f <addToTerminalCycle(VgaText*)>
c001da14:	83 c4 10             	add    esp,0x10
c001da17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da1b:	05 0c 01 00 00       	add    eax,0x10c
c001da20:	83 ec 08             	sub    esp,0x8
c001da23:	68 36 c0 02 c0       	push   0xc002c036
c001da28:	50                   	push   eax
c001da29:	e8 06 2e fe ff       	call   c0000834 <strcpy>
c001da2e:	83 c4 10             	add    esp,0x10
c001da31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da35:	83 c0 0c             	add    eax,0xc
c001da38:	83 ec 08             	sub    esp,0x8
c001da3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da3f:	50                   	push   eax
c001da40:	e8 ef 2d fe ff       	call   c0000834 <strcpy>
c001da45:	83 c4 10             	add    esp,0x10
c001da48:	83 ec 08             	sub    esp,0x8
c001da4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001da4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da53:	e8 0a fe ff ff       	call   c001d862 <Process::addArgs(char**)>
c001da58:	83 c4 10             	add    esp,0x10
c001da5b:	83 ec 08             	sub    esp,0x8
c001da5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da66:	e8 6a ee ff ff       	call   c001c8d5 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001da6b:	83 c4 10             	add    esp,0x10
c001da6e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001da72:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001da76:	83 f0 01             	xor    eax,0x1
c001da79:	88 c2                	mov    dl,al
c001da7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da7f:	88 90 3e 1b 00 00    	mov    BYTE PTR [eax+0x1b3e],dl
c001da85:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001da8a:	83 ec 08             	sub    esp,0x8
c001da8d:	50                   	push   eax
c001da8e:	68 34 c1 02 c0       	push   0xc002c134
c001da93:	e8 04 53 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001da98:	83 c4 10             	add    esp,0x10
c001da9b:	90                   	nop
c001da9c:	83 c4 14             	add    esp,0x14
c001da9f:	5b                   	pop    ebx
c001daa0:	5e                   	pop    esi
c001daa1:	c3                   	ret    

c001daa2 <Process::Process(bool, char const*, Process*, char**)>:
c001daa2:	56                   	push   esi
c001daa3:	53                   	push   ebx
c001daa4:	83 ec 24             	sub    esp,0x24
c001daa7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001daab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001daaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dab3:	05 0c 02 00 00       	add    eax,0x20c
c001dab8:	bb 07 00 00 00       	mov    ebx,0x7
c001dabd:	89 c6                	mov    esi,eax
c001dabf:	85 db                	test   ebx,ebx
c001dac1:	78 15                	js     c001dad8 <Process::Process(bool, char const*, Process*, char**)+0x36>
c001dac3:	83 ec 0c             	sub    esp,0xc
c001dac6:	56                   	push   esi
c001dac7:	e8 66 b0 00 00       	call   c0028b32 <ThreadControlBlock::ThreadControlBlock()>
c001dacc:	83 c4 10             	add    esp,0x10
c001dacf:	81 c6 e3 02 00 00    	add    esi,0x2e3
c001dad5:	4b                   	dec    ebx
c001dad6:	eb e7                	jmp    c001dabf <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dad8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dadc:	c6 80 3e 1b 00 00 00 	mov    BYTE PTR [eax+0x1b3e],0x0
c001dae3:	83 ec 0c             	sub    esp,0xc
c001dae6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001daea:	e8 d9 c7 ff ff       	call   c001a2c8 <Krnl::newProcessEnv(Process*)>
c001daef:	83 c4 10             	add    esp,0x10
c001daf2:	89 c2                	mov    edx,eax
c001daf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001daf8:	89 90 3a 1b 00 00    	mov    DWORD PTR [eax+0x1b3a],edx
c001dafe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db02:	66 c7 80 24 19 00 00 00 00 	mov    WORD PTR [eax+0x1924],0x0
c001db0b:	a1 d0 d7 02 c0       	mov    eax,ds:0xc002d7d0
c001db10:	8d 50 01             	lea    edx,[eax+0x1]
c001db13:	89 15 d0 d7 02 c0    	mov    DWORD PTR ds:0xc002d7d0,edx
c001db19:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001db1d:	89 02                	mov    DWORD PTR [edx],eax
c001db1f:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001db27:	83 ec 0c             	sub    esp,0xc
c001db2a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001db2e:	e8 10 1d ff ff       	call   c000f843 <malloc>
c001db33:	83 c4 10             	add    esp,0x10
c001db36:	89 c3                	mov    ebx,eax
c001db38:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001db3d:	83 ec 08             	sub    esp,0x8
c001db40:	50                   	push   eax
c001db41:	53                   	push   ebx
c001db42:	e8 69 4b ff ff       	call   c00126b0 <VAS::VAS(bool)>
c001db47:	83 c4 10             	add    esp,0x10
c001db4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db4e:	89 98 32 19 00 00    	mov    DWORD PTR [eax+0x1932],ebx
c001db54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db58:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001db62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db66:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001db6a:	89 90 2a 19 00 00    	mov    DWORD PTR [eax+0x192a],edx
c001db70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db74:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001db7a:	85 c0                	test   eax,eax
c001db7c:	74 42                	je     c001dbc0 <Process::Process(bool, char const*, Process*, char**)+0x11e>
c001db7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db82:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001db88:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001db8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db92:	89 90 26 19 00 00    	mov    DWORD PTR [eax+0x1926],edx
c001db98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db9c:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001dba2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dba8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbac:	05 0c 01 00 00       	add    eax,0x10c
c001dbb1:	83 ec 08             	sub    esp,0x8
c001dbb4:	52                   	push   edx
c001dbb5:	50                   	push   eax
c001dbb6:	e8 79 2c fe ff       	call   c0000834 <strcpy>
c001dbbb:	83 c4 10             	add    esp,0x10
c001dbbe:	eb 63                	jmp    c001dc23 <Process::Process(bool, char const*, Process*, char**)+0x181>
c001dbc0:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dbc8:	83 ec 0c             	sub    esp,0xc
c001dbcb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dbcf:	e8 6f 1c ff ff       	call   c000f843 <malloc>
c001dbd4:	83 c4 10             	add    esp,0x10
c001dbd7:	89 c3                	mov    ebx,eax
c001dbd9:	83 ec 08             	sub    esp,0x8
c001dbdc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dbe0:	53                   	push   ebx
c001dbe1:	e8 96 35 ff ff       	call   c001117c <VgaText::VgaText(char const*)>
c001dbe6:	83 c4 10             	add    esp,0x10
c001dbe9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbed:	89 98 26 19 00 00    	mov    DWORD PTR [eax+0x1926],ebx
c001dbf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbf7:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001dbfd:	83 ec 0c             	sub    esp,0xc
c001dc00:	50                   	push   eax
c001dc01:	e8 69 29 ff ff       	call   c001056f <addToTerminalCycle(VgaText*)>
c001dc06:	83 c4 10             	add    esp,0x10
c001dc09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc0d:	05 0c 01 00 00       	add    eax,0x10c
c001dc12:	83 ec 08             	sub    esp,0x8
c001dc15:	68 36 c0 02 c0       	push   0xc002c036
c001dc1a:	50                   	push   eax
c001dc1b:	e8 14 2c fe ff       	call   c0000834 <strcpy>
c001dc20:	83 c4 10             	add    esp,0x10
c001dc23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc27:	83 c0 0c             	add    eax,0xc
c001dc2a:	83 ec 08             	sub    esp,0x8
c001dc2d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc31:	50                   	push   eax
c001dc32:	e8 fd 2b fe ff       	call   c0000834 <strcpy>
c001dc37:	83 c4 10             	add    esp,0x10
c001dc3a:	83 ec 08             	sub    esp,0x8
c001dc3d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dc41:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc45:	e8 18 fc ff ff       	call   c001d862 <Process::addArgs(char**)>
c001dc4a:	83 c4 10             	add    esp,0x10
c001dc4d:	90                   	nop
c001dc4e:	83 c4 24             	add    esp,0x24
c001dc51:	5b                   	pop    ebx
c001dc52:	5e                   	pop    esi
c001dc53:	c3                   	ret    

c001dc54 <disableIRQs()>:
c001dc54:	fa                   	cli    
c001dc55:	ff 05 8c 17 03 c0    	inc    DWORD PTR ds:0xc003178c
c001dc5b:	c3                   	ret    

c001dc5c <getIRQNestingLevel()>:
c001dc5c:	a1 8c 17 03 c0       	mov    eax,ds:0xc003178c
c001dc61:	c3                   	ret    

c001dc62 <enableIRQs()>:
c001dc62:	a1 8c 17 03 c0       	mov    eax,ds:0xc003178c
c001dc67:	48                   	dec    eax
c001dc68:	a3 8c 17 03 c0       	mov    ds:0xc003178c,eax
c001dc6d:	75 01                	jne    c001dc70 <enableIRQs()+0xe>
c001dc6f:	fb                   	sti    
c001dc70:	c3                   	ret    

c001dc71 <lockScheduler()>:
c001dc71:	eb e1                	jmp    c001dc54 <disableIRQs()>

c001dc73 <unlockScheduler()>:
c001dc73:	eb ed                	jmp    c001dc62 <enableIRQs()>

c001dc75 <userModeEntryPoint(void*)>:
c001dc75:	83 ec 0c             	sub    esp,0xc
c001dc78:	e8 f6 ff ff ff       	call   c001dc73 <unlockScheduler()>
c001dc7d:	fb                   	sti    
c001dc7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc83:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dc86:	8b 80 2e 19 00 00    	mov    eax,DWORD PTR [eax+0x192e]
c001dc8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dc90:	83 c4 0c             	add    esp,0xc
c001dc93:	e9 92 26 fe ff       	jmp    c000032a <goToUsermode>

c001dc98 <lockStuff()>:
c001dc98:	e8 b7 ff ff ff       	call   c001dc54 <disableIRQs()>
c001dc9d:	ff 05 88 17 03 c0    	inc    DWORD PTR ds:0xc0031788
c001dca3:	c3                   	ret    

c001dca4 <taskStartupFunction>:
c001dca4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dca9:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dcac:	c3                   	ret    

c001dcad <updateTimeUsed()>:
c001dcad:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001dcb2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dcb8:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dcbf:	74 50                	je     c001dd11 <updateTimeUsed()+0x64>
c001dcc1:	57                   	push   edi
c001dcc2:	56                   	push   esi
c001dcc3:	53                   	push   ebx
c001dcc4:	0f 31                	rdtsc  
c001dcc6:	89 c1                	mov    ecx,eax
c001dcc8:	a3 c8 17 03 c0       	mov    ds:0xc00317c8,eax
c001dccd:	2b 0d b8 17 03 c0    	sub    ecx,DWORD PTR ds:0xc00317b8
c001dcd3:	89 d3                	mov    ebx,edx
c001dcd5:	89 0d c0 17 03 c0    	mov    DWORD PTR ds:0xc00317c0,ecx
c001dcdb:	1b 1d bc 17 03 c0    	sbb    ebx,DWORD PTR ds:0xc00317bc
c001dce1:	a3 b8 17 03 c0       	mov    ds:0xc00317b8,eax
c001dce6:	89 1d c4 17 03 c0    	mov    DWORD PTR ds:0xc00317c4,ebx
c001dcec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcf1:	89 15 cc 17 03 c0    	mov    DWORD PTR ds:0xc00317cc,edx
c001dcf7:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dcfa:	89 15 bc 17 03 c0    	mov    DWORD PTR ds:0xc00317bc,edx
c001dd00:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001dd03:	01 f1                	add    ecx,esi
c001dd05:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001dd08:	11 fb                	adc    ebx,edi
c001dd0a:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001dd0d:	5b                   	pop    ebx
c001dd0e:	5e                   	pop    esi
c001dd0f:	5f                   	pop    edi
c001dd10:	c3                   	ret    
c001dd11:	c3                   	ret    

c001dd12 <switchToThread(ThreadControlBlock*)>:
c001dd12:	53                   	push   ebx
c001dd13:	83 ec 08             	sub    esp,0x8
c001dd16:	a1 88 17 03 c0       	mov    eax,ds:0xc0031788
c001dd1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd1f:	85 c0                	test   eax,eax
c001dd21:	75 30                	jne    c001dd53 <switchToThread(ThreadControlBlock*)+0x41>
c001dd23:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001dd26:	3c ff                	cmp    al,0xff
c001dd28:	74 25                	je     c001dd4f <switchToThread(ThreadControlBlock*)+0x3d>
c001dd2a:	0f b6 d0             	movzx  edx,al
c001dd2d:	b8 84 03 00 00       	mov    eax,0x384
c001dd32:	29 d0                	sub    eax,edx
c001dd34:	c1 e0 10             	shl    eax,0x10
c001dd37:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dd3a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dd3d:	e8 6b ff ff ff       	call   c001dcad <updateTimeUsed()>
c001dd42:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001dd46:	83 c4 08             	add    esp,0x8
c001dd49:	5b                   	pop    ebx
c001dd4a:	e9 13 26 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dd4f:	31 c0                	xor    eax,eax
c001dd51:	eb e7                	jmp    c001dd3a <switchToThread(ThreadControlBlock*)+0x28>
c001dd53:	c7 05 84 17 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031784,0x1
c001dd5d:	83 c4 08             	add    esp,0x8
c001dd60:	5b                   	pop    ebx
c001dd61:	c3                   	ret    

c001dd62 <Semaphore::Semaphore(int)>:
c001dd62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd6a:	89 10                	mov    DWORD PTR [eax],edx
c001dd6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd70:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dd77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dd82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd86:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dd8d:	90                   	nop
c001dd8e:	c3                   	ret    
c001dd8f:	90                   	nop

c001dd90 <Mutex::Mutex()>:
c001dd90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd94:	6a 01                	push   0x1
c001dd96:	50                   	push   eax
c001dd97:	e8 c6 ff ff ff       	call   c001dd62 <Semaphore::Semaphore(int)>
c001dd9c:	83 c4 08             	add    esp,0x8
c001dd9f:	90                   	nop
c001dda0:	c3                   	ret    
c001dda1:	90                   	nop

c001dda2 <Process::createThread(void (*)(void*), void*, int)>:
c001dda2:	55                   	push   ebp
c001dda3:	31 c9                	xor    ecx,ecx
c001dda5:	57                   	push   edi
c001dda6:	56                   	push   esi
c001dda7:	53                   	push   ebx
c001dda8:	83 ec 1c             	sub    esp,0x1c
c001ddab:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ddaf:	66 8b b3 24 19 00 00 	mov    si,WORD PTR [ebx+0x1924]
c001ddb6:	89 f2                	mov    edx,esi
c001ddb8:	0f b7 c2             	movzx  eax,dx
c001ddbb:	83 e2 01             	and    edx,0x1
c001ddbe:	74 14                	je     c001ddd4 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001ddc0:	d1 f8                	sar    eax,1
c001ddc2:	41                   	inc    ecx
c001ddc3:	89 c2                	mov    edx,eax
c001ddc5:	83 f9 10             	cmp    ecx,0x10
c001ddc8:	75 ee                	jne    c001ddb8 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001ddca:	83 c4 1c             	add    esp,0x1c
c001ddcd:	31 c0                	xor    eax,eax
c001ddcf:	5b                   	pop    ebx
c001ddd0:	5e                   	pop    esi
c001ddd1:	5f                   	pop    edi
c001ddd2:	5d                   	pop    ebp
c001ddd3:	c3                   	ret    
c001ddd4:	83 ec 08             	sub    esp,0x8
c001ddd7:	b8 01 00 00 00       	mov    eax,0x1
c001dddc:	d3 e0                	shl    eax,cl
c001ddde:	09 c6                	or     esi,eax
c001dde0:	8b 83 32 19 00 00    	mov    eax,DWORD PTR [ebx+0x1932]
c001dde6:	66 89 b3 24 19 00 00 	mov    WORD PTR [ebx+0x1924],si
c001dded:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001ddf0:	8d 04 89             	lea    eax,[ecx+ecx*4]
c001ddf3:	8d 04 c1             	lea    eax,[ecx+eax*8]
c001ddf6:	8d 34 c0             	lea    esi,[eax+eax*8]
c001ddf9:	01 f6                	add    esi,esi
c001ddfb:	01 ce                	add    esi,ecx
c001ddfd:	8d 04 33             	lea    eax,[ebx+esi*1]
c001de00:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001de06:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001de0c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001de10:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001de16:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001de1c:	89 ca                	mov    edx,ecx
c001de1e:	f7 da                	neg    edx
c001de20:	c1 e2 15             	shl    edx,0x15
c001de23:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001de29:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001de2f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001de33:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001de3d:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001de43:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001de47:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001de4d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001de57:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001de61:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001de68:	50                   	push   eax
c001de69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001de6d:	68 a8 17 03 c0       	push   0xc00317a8
c001de72:	e8 49 ab 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de77:	83 c4 10             	add    esp,0x10
c001de7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de7e:	83 c4 1c             	add    esp,0x1c
c001de81:	5b                   	pop    ebx
c001de82:	5e                   	pop    esi
c001de83:	5f                   	pop    edi
c001de84:	5d                   	pop    ebp
c001de85:	c3                   	ret    

c001de86 <Process::createUserThread()>:
c001de86:	83 ec 0c             	sub    esp,0xc
c001de89:	68 80 00 00 00       	push   0x80
c001de8e:	6a 00                	push   0x0
c001de90:	68 75 dc 01 c0       	push   0xc001dc75
c001de95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de99:	e8 04 ff ff ff       	call   c001dda2 <Process::createThread(void (*)(void*), void*, int)>
c001de9e:	83 c4 1c             	add    esp,0x1c
c001dea1:	c3                   	ret    

c001dea2 <setupMultitasking(void (*)())>:
c001dea2:	56                   	push   esi
c001dea3:	53                   	push   ebx
c001dea4:	53                   	push   ebx
c001dea5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dea9:	eb 10                	jmp    c001debb <setupMultitasking(void (*)())+0x19>
c001deab:	83 ec 0c             	sub    esp,0xc
c001deae:	68 a8 17 03 c0       	push   0xc00317a8
c001deb3:	e8 5a aa 00 00       	call   c0028912 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001deb8:	83 c4 10             	add    esp,0x10
c001debb:	83 ec 0c             	sub    esp,0xc
c001debe:	68 a8 17 03 c0       	push   0xc00317a8
c001dec3:	e8 2e aa 00 00       	call   c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dec8:	83 c4 10             	add    esp,0x10
c001decb:	84 c0                	test   al,al
c001decd:	74 dc                	je     c001deab <setupMultitasking(void (*)())+0x9>
c001decf:	83 ec 0c             	sub    esp,0xc
c001ded2:	68 3f 1b 00 00       	push   0x1b3f
c001ded7:	e8 67 19 ff ff       	call   c000f843 <malloc>
c001dedc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dee3:	89 c3                	mov    ebx,eax
c001dee5:	6a 00                	push   0x0
c001dee7:	68 3a c0 02 c0       	push   0xc002c03a
c001deec:	6a 01                	push   0x1
c001deee:	50                   	push   eax
c001deef:	e8 ae fb ff ff       	call   c001daa2 <Process::Process(bool, char const*, Process*, char**)>
c001def4:	83 c4 18             	add    esp,0x18
c001def7:	89 1d b4 17 03 c0    	mov    DWORD PTR ds:0xc00317b4,ebx
c001defd:	ff b3 26 19 00 00    	push   DWORD PTR [ebx+0x1926]
c001df03:	68 5c c1 02 c0       	push   0xc002c15c
c001df08:	e8 8f 4e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001df0d:	58                   	pop    eax
c001df0e:	ff b3 26 19 00 00    	push   DWORD PTR [ebx+0x1926]
c001df14:	e8 d8 2d ff ff       	call   c0010cf1 <setActiveTerminal(VgaText*)>
c001df19:	66 83 8b 24 19 00 00 01 	or     WORD PTR [ebx+0x1924],0x1
c001df21:	8b 83 32 19 00 00    	mov    eax,DWORD PTR [ebx+0x1932]
c001df27:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001df2a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001df34:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001df3a:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001df40:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001df4a:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001df54:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001df5e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001df64:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001df6a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001df74:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001df7a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001df84:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001df8a:	5a                   	pop    edx
c001df8b:	59                   	pop    ecx
c001df8c:	68 36 c0 02 c0       	push   0xc002c036
c001df91:	50                   	push   eax
c001df92:	e8 9d 28 fe ff       	call   c0000834 <strcpy>
c001df97:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001df9e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dfa2:	83 c4 14             	add    esp,0x14
c001dfa5:	5b                   	pop    ebx
c001dfa6:	5e                   	pop    esi
c001dfa7:	e9 a8 23 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001dfac <schedule()>:
c001dfac:	a1 88 17 03 c0       	mov    eax,ds:0xc0031788
c001dfb1:	85 c0                	test   eax,eax
c001dfb3:	74 0b                	je     c001dfc0 <schedule()+0x14>
c001dfb5:	c7 05 84 17 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031784,0x1
c001dfbf:	c3                   	ret    
c001dfc0:	53                   	push   ebx
c001dfc1:	83 ec 14             	sub    esp,0x14
c001dfc4:	68 a8 17 03 c0       	push   0xc00317a8
c001dfc9:	e8 28 a9 00 00       	call   c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dfce:	83 c4 10             	add    esp,0x10
c001dfd1:	84 c0                	test   al,al
c001dfd3:	75 38                	jne    c001e00d <schedule()+0x61>
c001dfd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dfda:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dfdd:	4a                   	dec    edx
c001dfde:	74 32                	je     c001e012 <schedule()+0x66>
c001dfe0:	83 ec 0c             	sub    esp,0xc
c001dfe3:	68 a8 17 03 c0       	push   0xc00317a8
c001dfe8:	e8 01 a9 00 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dfed:	c7 04 24 a8 17 03 c0 	mov    DWORD PTR [esp],0xc00317a8
c001dff4:	89 c3                	mov    ebx,eax
c001dff6:	e8 17 a9 00 00       	call   c0028912 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dffb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e002:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e005:	e8 08 fd ff ff       	call   c001dd12 <switchToThread(ThreadControlBlock*)>
c001e00a:	83 c4 10             	add    esp,0x10
c001e00d:	83 c4 08             	add    esp,0x8
c001e010:	5b                   	pop    ebx
c001e011:	c3                   	ret    
c001e012:	83 ec 08             	sub    esp,0x8
c001e015:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e01c:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e022:	68 a8 17 03 c0       	push   0xc00317a8
c001e027:	e8 94 a9 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e02c:	83 c4 10             	add    esp,0x10
c001e02f:	eb af                	jmp    c001dfe0 <schedule()+0x34>

c001e031 <unlockStuff()>:
c001e031:	a1 88 17 03 c0       	mov    eax,ds:0xc0031788
c001e036:	48                   	dec    eax
c001e037:	a3 88 17 03 c0       	mov    ds:0xc0031788,eax
c001e03c:	75 09                	jne    c001e047 <unlockStuff()+0x16>
c001e03e:	a1 84 17 03 c0       	mov    eax,ds:0xc0031784
c001e043:	85 c0                	test   eax,eax
c001e045:	75 05                	jne    c001e04c <unlockStuff()+0x1b>
c001e047:	e9 16 fc ff ff       	jmp    c001dc62 <enableIRQs()>
c001e04c:	83 ec 0c             	sub    esp,0xc
c001e04f:	c7 05 84 17 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031784,0x0
c001e059:	e8 4e ff ff ff       	call   c001dfac <schedule()>
c001e05e:	83 c4 0c             	add    esp,0xc
c001e061:	e9 fc fb ff ff       	jmp    c001dc62 <enableIRQs()>

c001e066 <Semaphore::tryAcquire()>:
c001e066:	83 ec 0c             	sub    esp,0xc
c001e069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e06d:	e8 26 fc ff ff       	call   c001dc98 <lockStuff()>
c001e072:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e075:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e077:	7c 0b                	jl     c001e084 <Semaphore::tryAcquire()+0x1e>
c001e079:	e8 b3 ff ff ff       	call   c001e031 <unlockStuff()>
c001e07e:	31 c0                	xor    eax,eax
c001e080:	83 c4 0c             	add    esp,0xc
c001e083:	c3                   	ret    
c001e084:	42                   	inc    edx
c001e085:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e088:	e8 a4 ff ff ff       	call   c001e031 <unlockStuff()>
c001e08d:	b0 01                	mov    al,0x1
c001e08f:	83 c4 0c             	add    esp,0xc
c001e092:	c3                   	ret    
c001e093:	90                   	nop

c001e094 <Semaphore::assertLocked(char const*)>:
c001e094:	83 ec 0c             	sub    esp,0xc
c001e097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e09b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e09f:	e8 f4 fb ff ff       	call   c001dc98 <lockStuff()>
c001e0a4:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e0a6:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e0a9:	7c 05                	jl     c001e0b0 <Semaphore::assertLocked(char const*)+0x1c>
c001e0ab:	83 c4 0c             	add    esp,0xc
c001e0ae:	eb 81                	jmp    c001e031 <unlockStuff()>
c001e0b0:	83 ec 0c             	sub    esp,0xc
c001e0b3:	52                   	push   edx
c001e0b4:	e8 be c3 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001e0b9:	83 c4 10             	add    esp,0x10
c001e0bc:	83 c4 0c             	add    esp,0xc
c001e0bf:	e9 6d ff ff ff       	jmp    c001e031 <unlockStuff()>

c001e0c4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e0c4:	83 ec 0c             	sub    esp,0xc
c001e0c7:	e8 90 fb ff ff       	call   c001dc5c <getIRQNestingLevel()>
c001e0cc:	83 ec 08             	sub    esp,0x8
c001e0cf:	50                   	push   eax
c001e0d0:	68 90 c1 02 c0       	push   0xc002c190
c001e0d5:	e8 c2 4c ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e0da:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e0de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0e3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e0e6:	e8 c1 fe ff ff       	call   c001dfac <schedule()>
c001e0eb:	e8 83 fb ff ff       	call   c001dc73 <unlockScheduler()>
c001e0f0:	e8 67 fb ff ff       	call   c001dc5c <getIRQNestingLevel()>
c001e0f5:	5a                   	pop    edx
c001e0f6:	59                   	pop    ecx
c001e0f7:	50                   	push   eax
c001e0f8:	68 c4 c1 02 c0       	push   0xc002c1c4
c001e0fd:	e8 9a 4c ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e102:	83 c4 1c             	add    esp,0x1c
c001e105:	c3                   	ret    

c001e106 <blockTask(TaskState)>:
c001e106:	83 ec 0c             	sub    esp,0xc
c001e109:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e10d:	e8 5f fb ff ff       	call   c001dc71 <lockScheduler()>
c001e112:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e117:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e11a:	e8 8d fe ff ff       	call   c001dfac <schedule()>
c001e11f:	83 c4 0c             	add    esp,0xc
c001e122:	e9 4c fb ff ff       	jmp    c001dc73 <unlockScheduler()>

c001e127 <waitTask(int, int*, int)>:
c001e127:	83 ec 18             	sub    esp,0x18
c001e12a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e12f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e133:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e136:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e13a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e13f:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e142:	6a 07                	push   0x7
c001e144:	e8 bd ff ff ff       	call   c001e106 <blockTask(TaskState)>
c001e149:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e14e:	83 c4 10             	add    esp,0x10
c001e151:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e154:	85 d2                	test   edx,edx
c001e156:	74 0a                	je     c001e162 <waitTask(int, int*, int)+0x3b>
c001e158:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e15b:	89 02                	mov    DWORD PTR [edx],eax
c001e15d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e162:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e165:	83 c4 0c             	add    esp,0xc
c001e168:	c3                   	ret    

c001e169 <nanoSleepUntil(unsigned long long)>:
c001e169:	83 ec 0c             	sub    esp,0xc
c001e16c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e170:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e174:	3b 05 d0 e8 02 c0    	cmp    eax,DWORD PTR ds:0xc002e8d0
c001e17a:	89 d1                	mov    ecx,edx
c001e17c:	1b 0d d4 e8 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e8d4
c001e182:	73 04                	jae    c001e188 <nanoSleepUntil(unsigned long long)+0x1f>
c001e184:	83 c4 0c             	add    esp,0xc
c001e187:	c3                   	ret    
c001e188:	e8 0b fb ff ff       	call   c001dc98 <lockStuff()>
c001e18d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e193:	83 ec 08             	sub    esp,0x8
c001e196:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e199:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e19c:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1a2:	68 9c 17 03 c0       	push   0xc003179c
c001e1a7:	e8 14 a8 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1ac:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e1b3:	e8 4e ff ff ff       	call   c001e106 <blockTask(TaskState)>
c001e1b8:	83 c4 1c             	add    esp,0x1c
c001e1bb:	e9 71 fe ff ff       	jmp    c001e031 <unlockStuff()>

c001e1c0 <nanoSleep(unsigned long long)>:
c001e1c0:	a1 d0 e8 02 c0       	mov    eax,ds:0xc002e8d0
c001e1c5:	8b 15 d4 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e8d4
c001e1cb:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e1cf:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e1d3:	eb 94                	jmp    c001e169 <nanoSleepUntil(unsigned long long)>

c001e1d5 <sleep(unsigned long long)>:
c001e1d5:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e1dd:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e1e2:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e1e6:	01 ca                	add    edx,ecx
c001e1e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e1ec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e1f0:	eb ce                	jmp    c001e1c0 <nanoSleep(unsigned long long)>

c001e1f2 <Semaphore::acquire()>:
c001e1f2:	83 ec 0c             	sub    esp,0xc
c001e1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f9:	e8 9a fa ff ff       	call   c001dc98 <lockStuff()>
c001e1fe:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e201:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e203:	7d 0c                	jge    c001e211 <Semaphore::acquire()+0x1f>
c001e205:	42                   	inc    edx
c001e206:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e209:	83 c4 0c             	add    esp,0xc
c001e20c:	e9 20 fe ff ff       	jmp    c001e031 <unlockStuff()>
c001e211:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e217:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e21e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e221:	85 d2                	test   edx,edx
c001e223:	74 2a                	je     c001e24f <Semaphore::acquire()+0x5d>
c001e225:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e228:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e22e:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e231:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e237:	83 ec 0c             	sub    esp,0xc
c001e23a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e23d:	6a 05                	push   0x5
c001e23f:	e8 c2 fe ff ff       	call   c001e106 <blockTask(TaskState)>
c001e244:	83 c4 10             	add    esp,0x10
c001e247:	83 c4 0c             	add    esp,0xc
c001e24a:	e9 e2 fd ff ff       	jmp    c001e031 <unlockStuff()>
c001e24f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e255:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e258:	eb d7                	jmp    c001e231 <Semaphore::acquire()+0x3f>

c001e25a <taskReturned>:
c001e25a:	83 ec 18             	sub    esp,0x18
c001e25d:	68 f8 c1 02 c0       	push   0xc002c1f8
c001e262:	e8 10 c2 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001e267:	83 c4 10             	add    esp,0x10
c001e26a:	83 ec 0c             	sub    esp,0xc
c001e26d:	6a 02                	push   0x2
c001e26f:	e8 92 fe ff ff       	call   c001e106 <blockTask(TaskState)>
c001e274:	e8 f8 f9 ff ff       	call   c001dc71 <lockScheduler()>
c001e279:	e8 2e fd ff ff       	call   c001dfac <schedule()>
c001e27e:	e8 f0 f9 ff ff       	call   c001dc73 <unlockScheduler()>
c001e283:	83 c4 10             	add    esp,0x10
c001e286:	eb e2                	jmp    c001e26a <taskReturned+0x10>

c001e288 <unblockTask(ThreadControlBlock*)>:
c001e288:	53                   	push   ebx
c001e289:	83 ec 08             	sub    esp,0x8
c001e28c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e290:	e8 dc f9 ff ff       	call   c001dc71 <lockScheduler()>
c001e295:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e298:	85 c0                	test   eax,eax
c001e29a:	74 5c                	je     c001e2f8 <unblockTask(ThreadControlBlock*)+0x70>
c001e29c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e29f:	48                   	dec    eax
c001e2a0:	74 31                	je     c001e2d3 <unblockTask(ThreadControlBlock*)+0x4b>
c001e2a2:	83 ec 0c             	sub    esp,0xc
c001e2a5:	68 a8 17 03 c0       	push   0xc00317a8
c001e2aa:	e8 3f a6 00 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e2af:	83 c4 10             	add    esp,0x10
c001e2b2:	85 c0                	test   eax,eax
c001e2b4:	75 17                	jne    c001e2cd <unblockTask(ThreadControlBlock*)+0x45>
c001e2b6:	eb 65                	jmp    c001e31d <unblockTask(ThreadControlBlock*)+0x95>
c001e2b8:	83 ec 08             	sub    esp,0x8
c001e2bb:	50                   	push   eax
c001e2bc:	68 a8 17 03 c0       	push   0xc00317a8
c001e2c1:	e8 02 a9 00 00       	call   c0028bc8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e2c6:	83 c4 10             	add    esp,0x10
c001e2c9:	85 c0                	test   eax,eax
c001e2cb:	74 50                	je     c001e31d <unblockTask(ThreadControlBlock*)+0x95>
c001e2cd:	39 c3                	cmp    ebx,eax
c001e2cf:	75 e7                	jne    c001e2b8 <unblockTask(ThreadControlBlock*)+0x30>
c001e2d1:	eb 1c                	jmp    c001e2ef <unblockTask(ThreadControlBlock*)+0x67>
c001e2d3:	83 ec 0c             	sub    esp,0xc
c001e2d6:	68 e8 c2 02 c0       	push   0xc002c2e8
c001e2db:	e8 bc 4a ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e2e0:	c7 04 24 74 c2 02 c0 	mov    DWORD PTR [esp],0xc002c274
c001e2e7:	e8 b0 4a ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e2ec:	83 c4 10             	add    esp,0x10
c001e2ef:	83 c4 08             	add    esp,0x8
c001e2f2:	5b                   	pop    ebx
c001e2f3:	e9 7b f9 ff ff       	jmp    c001dc73 <unlockScheduler()>
c001e2f8:	83 ec 0c             	sub    esp,0xc
c001e2fb:	68 2c c2 02 c0       	push   0xc002c22c
c001e300:	e8 97 4a ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e305:	c7 04 24 74 c2 02 c0 	mov    DWORD PTR [esp],0xc002c274
c001e30c:	e8 8b 4a ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e311:	83 c4 10             	add    esp,0x10
c001e314:	83 c4 08             	add    esp,0x8
c001e317:	5b                   	pop    ebx
c001e318:	e9 56 f9 ff ff       	jmp    c001dc73 <unlockScheduler()>
c001e31d:	83 ec 08             	sub    esp,0x8
c001e320:	53                   	push   ebx
c001e321:	68 a8 17 03 c0       	push   0xc00317a8
c001e326:	e8 95 a6 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e32b:	83 c4 10             	add    esp,0x10
c001e32e:	83 c4 08             	add    esp,0x8
c001e331:	5b                   	pop    ebx
c001e332:	e9 3c f9 ff ff       	jmp    c001dc73 <unlockScheduler()>

c001e337 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e337:	55                   	push   ebp
c001e338:	57                   	push   edi
c001e339:	56                   	push   esi
c001e33a:	53                   	push   ebx
c001e33b:	83 ec 1c             	sub    esp,0x1c
c001e33e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e342:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e345:	8b b8 36 19 00 00    	mov    edi,DWORD PTR [eax+0x1936]
c001e34b:	85 ff                	test   edi,edi
c001e34d:	7e 20                	jle    c001e36f <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e34f:	31 f6                	xor    esi,esi
c001e351:	83 ec 0c             	sub    esp,0xc
c001e354:	ff b4 b0 3a 19 00 00 	push   DWORD PTR [eax+esi*4+0x193a]
c001e35b:	46                   	inc    esi
c001e35c:	e8 f2 14 ff ff       	call   c000f853 <free>
c001e361:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e364:	83 c4 10             	add    esp,0x10
c001e367:	39 b0 36 19 00 00    	cmp    DWORD PTR [eax+0x1936],esi
c001e36d:	7f e2                	jg     c001e351 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e36f:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001e379:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e37e:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e381:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e384:	d3 c0                	rol    eax,cl
c001e386:	66 21 82 24 19 00 00 	and    WORD PTR [edx+0x1924],ax
c001e38d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e390:	89 f7                	mov    edi,esi
c001e392:	66 83 be 24 19 00 00 00 	cmp    WORD PTR [esi+0x1924],0x0
c001e39a:	0f 85 75 01 00 00    	jne    c001e515 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001e3a0:	8b ae 3a 1b 00 00    	mov    ebp,DWORD PTR [esi+0x1b3a]
c001e3a6:	85 ed                	test   ebp,ebp
c001e3a8:	74 1b                	je     c001e3c5 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e3aa:	83 ec 0c             	sub    esp,0xc
c001e3ad:	55                   	push   ebp
c001e3ae:	e8 31 be ff ff       	call   c001a1e4 <EnvVarContainer::~EnvVarContainer()>
c001e3b3:	59                   	pop    ecx
c001e3b4:	5e                   	pop    esi
c001e3b5:	6a 0c                	push   0xc
c001e3b7:	55                   	push   ebp
c001e3b8:	e8 ff 48 ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c001e3bd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e3c0:	83 c4 10             	add    esp,0x10
c001e3c3:	89 f7                	mov    edi,esi
c001e3c5:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e3cb:	85 c0                	test   eax,eax
c001e3cd:	0f 84 ab 00 00 00    	je     c001e47e <cleanupTerminatedTask(ThreadControlBlock*)+0x147>
c001e3d3:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e3d6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e3da:	31 c9                	xor    ecx,ecx
c001e3dc:	eb 10                	jmp    c001e3ee <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e3de:	41                   	inc    ecx
c001e3df:	83 f9 10             	cmp    ecx,0x10
c001e3e2:	0f 84 96 00 00 00    	je     c001e47e <cleanupTerminatedTask(ThreadControlBlock*)+0x147>
c001e3e8:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e3ee:	0f b7 90 24 19 00 00 	movzx  edx,WORD PTR [eax+0x1924]
c001e3f5:	d3 fa                	sar    edx,cl
c001e3f7:	83 e2 01             	and    edx,0x1
c001e3fa:	74 e2                	je     c001e3de <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e3fc:	8d 14 89             	lea    edx,[ecx+ecx*4]
c001e3ff:	8d 14 d1             	lea    edx,[ecx+edx*8]
c001e402:	8d 14 d2             	lea    edx,[edx+edx*8]
c001e405:	01 d2                	add    edx,edx
c001e407:	01 ca                	add    edx,ecx
c001e409:	01 d0                	add    eax,edx
c001e40b:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e411:	83 fd 07             	cmp    ebp,0x7
c001e414:	75 c8                	jne    c001e3de <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e416:	05 40 02 00 00       	add    eax,0x240
c001e41b:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e41e:	83 fd ff             	cmp    ebp,0xffffffff
c001e421:	0f 8c 08 01 00 00    	jl     c001e52f <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001e427:	0f 84 b9 01 00 00    	je     c001e5e6 <cleanupTerminatedTask(ThreadControlBlock*)+0x2af>
c001e42d:	85 ed                	test   ebp,ebp
c001e42f:	0f 84 a0 01 00 00    	je     c001e5d5 <cleanupTerminatedTask(ThreadControlBlock*)+0x29e>
c001e435:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e437:	75 a5                	jne    c001e3de <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e439:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e43f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e443:	01 d0                	add    eax,edx
c001e445:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e449:	83 ec 0c             	sub    esp,0xc
c001e44c:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e452:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e455:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001e45b:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e462:	50                   	push   eax
c001e463:	e8 20 fe ff ff       	call   c001e288 <unblockTask(ThreadControlBlock*)>
c001e468:	83 c4 10             	add    esp,0x10
c001e46b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e46e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e472:	89 f7                	mov    edi,esi
c001e474:	41                   	inc    ecx
c001e475:	83 f9 10             	cmp    ecx,0x10
c001e478:	0f 85 6a ff ff ff    	jne    c001e3e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e47e:	8b 86 26 19 00 00    	mov    eax,DWORD PTR [esi+0x1926]
c001e484:	85 c0                	test   eax,eax
c001e486:	74 5d                	je     c001e4e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c001e488:	8b 96 2a 19 00 00    	mov    edx,DWORD PTR [esi+0x192a]
c001e48e:	3b 82 26 19 00 00    	cmp    eax,DWORD PTR [edx+0x1926]
c001e494:	74 4f                	je     c001e4e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c001e496:	83 ec 0c             	sub    esp,0xc
c001e499:	68 a8 17 03 c0       	push   0xc00317a8
c001e49e:	e8 4b a4 00 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4a3:	c7 04 24 a8 17 03 c0 	mov    DWORD PTR [esp],0xc00317a8
c001e4aa:	89 c7                	mov    edi,eax
c001e4ac:	e8 45 a4 00 00       	call   c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e4b1:	83 c4 10             	add    esp,0x10
c001e4b4:	84 c0                	test   al,al
c001e4b6:	0f 84 e4 00 00 00    	je     c001e5a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x269>
c001e4bc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4bf:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001e4c5:	85 d2                	test   edx,edx
c001e4c7:	74 0f                	je     c001e4d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a1>
c001e4c9:	83 ec 0c             	sub    esp,0xc
c001e4cc:	8b 02                	mov    eax,DWORD PTR [edx]
c001e4ce:	52                   	push   edx
c001e4cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e4d2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4d5:	83 c4 10             	add    esp,0x10
c001e4d8:	c7 80 26 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1926],0x0
c001e4e2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e4e5:	8b 9f 32 19 00 00    	mov    ebx,DWORD PTR [edi+0x1932]
c001e4eb:	85 db                	test   ebx,ebx
c001e4ed:	74 16                	je     c001e505 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ce>
c001e4ef:	83 ec 0c             	sub    esp,0xc
c001e4f2:	53                   	push   ebx
c001e4f3:	e8 a4 3b ff ff       	call   c001209c <VAS::~VAS()>
c001e4f8:	58                   	pop    eax
c001e4f9:	5a                   	pop    edx
c001e4fa:	6a 14                	push   0x14
c001e4fc:	53                   	push   ebx
c001e4fd:	e8 ba 47 ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c001e502:	83 c4 10             	add    esp,0x10
c001e505:	83 ec 0c             	sub    esp,0xc
c001e508:	68 41 c0 02 c0       	push   0xc002c041
c001e50d:	e8 8a 48 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e512:	83 c4 10             	add    esp,0x10
c001e515:	83 ec 08             	sub    esp,0x8
c001e518:	68 3f 1b 00 00       	push   0x1b3f
c001e51d:	68 4f c0 02 c0       	push   0xc002c04f
c001e522:	e8 75 48 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e527:	83 c4 2c             	add    esp,0x2c
c001e52a:	5b                   	pop    ebx
c001e52b:	5e                   	pop    esi
c001e52c:	5f                   	pop    edi
c001e52d:	5d                   	pop    ebp
c001e52e:	c3                   	ret    
c001e52f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e533:	83 ec 0c             	sub    esp,0xc
c001e536:	68 2c c3 02 c0       	push   0xc002c32c
c001e53b:	e8 37 bf ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001e540:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e543:	83 c4 10             	add    esp,0x10
c001e546:	89 f7                	mov    edi,esi
c001e548:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e54c:	e9 8d fe ff ff       	jmp    c001e3de <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e551:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001e557:	39 82 26 19 00 00    	cmp    DWORD PTR [edx+0x1926],eax
c001e55d:	75 1c                	jne    c001e57b <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e55f:	83 ec 0c             	sub    esp,0xc
c001e562:	68 94 c3 02 c0       	push   0xc002c394
c001e567:	e8 30 48 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e56c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e573:	e8 8e fb ff ff       	call   c001e106 <blockTask(TaskState)>
c001e578:	83 c4 10             	add    esp,0x10
c001e57b:	83 ec 08             	sub    esp,0x8
c001e57e:	56                   	push   esi
c001e57f:	68 a8 17 03 c0       	push   0xc00317a8
c001e584:	e8 37 a4 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e589:	c7 04 24 a8 17 03 c0 	mov    DWORD PTR [esp],0xc00317a8
c001e590:	e8 59 a3 00 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e595:	83 c4 10             	add    esp,0x10
c001e598:	39 f8                	cmp    eax,edi
c001e59a:	0f 84 1c ff ff ff    	je     c001e4bc <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c001e5a0:	83 ec 0c             	sub    esp,0xc
c001e5a3:	68 a8 17 03 c0       	push   0xc00317a8
c001e5a8:	e8 41 a3 00 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5ad:	c7 04 24 a8 17 03 c0 	mov    DWORD PTR [esp],0xc00317a8
c001e5b4:	89 c6                	mov    esi,eax
c001e5b6:	e8 57 a3 00 00       	call   c0028912 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e5bb:	83 c4 10             	add    esp,0x10
c001e5be:	39 f3                	cmp    ebx,esi
c001e5c0:	74 b9                	je     c001e57b <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e5c2:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e5c5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5c8:	39 82 2a 19 00 00    	cmp    DWORD PTR [edx+0x192a],eax
c001e5ce:	75 ab                	jne    c001e57b <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e5d0:	e9 7c ff ff ff       	jmp    c001e551 <cleanupTerminatedTask(ThreadControlBlock*)+0x21a>
c001e5d5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5d9:	83 ec 0c             	sub    esp,0xc
c001e5dc:	68 60 c3 02 c0       	push   0xc002c360
c001e5e1:	e9 55 ff ff ff       	jmp    c001e53b <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c001e5e6:	8b 36                	mov    esi,DWORD PTR [esi]
c001e5e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5ec:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e5ef:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5f2:	8b b8 2a 19 00 00    	mov    edi,DWORD PTR [eax+0x192a]
c001e5f8:	01 d7                	add    edi,edx
c001e5fa:	89 f8                	mov    eax,edi
c001e5fc:	e9 44 fe ff ff       	jmp    c001e445 <cleanupTerminatedTask(ThreadControlBlock*)+0x10e>

c001e601 <cleanerTaskFunction(void*)>:
c001e601:	53                   	push   ebx
c001e602:	83 ec 08             	sub    esp,0x8
c001e605:	e8 69 f6 ff ff       	call   c001dc73 <unlockScheduler()>
c001e60a:	e8 62 f6 ff ff       	call   c001dc71 <lockScheduler()>
c001e60f:	80 3d 6c 17 03 c0 00 	cmp    BYTE PTR ds:0xc003176c,0x0
c001e616:	0f 85 8e 00 00 00    	jne    c001e6aa <cleanerTaskFunction(void*)+0xa9>
c001e61c:	83 ec 0c             	sub    esp,0xc
c001e61f:	6a 02                	push   0x2
c001e621:	e8 9e fa ff ff       	call   c001e0c4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e626:	83 c4 10             	add    esp,0x10
c001e629:	c6 05 6c 17 03 c0 00 	mov    BYTE PTR ds:0xc003176c,0x0
c001e630:	e8 63 f6 ff ff       	call   c001dc98 <lockStuff()>
c001e635:	e8 37 f6 ff ff       	call   c001dc71 <lockScheduler()>
c001e63a:	83 ec 0c             	sub    esp,0xc
c001e63d:	68 90 17 03 c0       	push   0xc0031790
c001e642:	e8 af a2 00 00       	call   c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e647:	83 c4 10             	add    esp,0x10
c001e64a:	84 c0                	test   al,al
c001e64c:	75 40                	jne    c001e68e <cleanerTaskFunction(void*)+0x8d>
c001e64e:	83 ec 0c             	sub    esp,0xc
c001e651:	68 90 17 03 c0       	push   0xc0031790
c001e656:	e8 93 a2 00 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e65b:	c7 04 24 90 17 03 c0 	mov    DWORD PTR [esp],0xc0031790
c001e662:	89 c3                	mov    ebx,eax
c001e664:	e8 a9 a2 00 00       	call   c0028912 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e669:	c7 04 24 65 c0 02 c0 	mov    DWORD PTR [esp],0xc002c065
c001e670:	e8 27 47 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e675:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e678:	e8 ba fc ff ff       	call   c001e337 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e67d:	c7 04 24 7e c0 02 c0 	mov    DWORD PTR [esp],0xc002c07e
c001e684:	e8 13 47 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e689:	83 c4 10             	add    esp,0x10
c001e68c:	eb ac                	jmp    c001e63a <cleanerTaskFunction(void*)+0x39>
c001e68e:	e8 e0 f5 ff ff       	call   c001dc73 <unlockScheduler()>
c001e693:	e8 99 f9 ff ff       	call   c001e031 <unlockStuff()>
c001e698:	e8 d4 f5 ff ff       	call   c001dc71 <lockScheduler()>
c001e69d:	80 3d 6c 17 03 c0 00 	cmp    BYTE PTR ds:0xc003176c,0x0
c001e6a4:	0f 84 72 ff ff ff    	je     c001e61c <cleanerTaskFunction(void*)+0x1b>
c001e6aa:	e8 c4 f5 ff ff       	call   c001dc73 <unlockScheduler()>
c001e6af:	e9 75 ff ff ff       	jmp    c001e629 <cleanerTaskFunction(void*)+0x28>

c001e6b4 <terminateTask(int)>:
c001e6b4:	83 ec 14             	sub    esp,0x14
c001e6b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e6bf:	83 c0 0c             	add    eax,0xc
c001e6c2:	50                   	push   eax
c001e6c3:	68 bc c3 02 c0       	push   0xc002c3bc
c001e6c8:	e8 cf 46 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e6cd:	e8 c6 f5 ff ff       	call   c001dc98 <lockStuff()>
c001e6d2:	e8 9a f5 ff ff       	call   c001dc71 <lockScheduler()>
c001e6d7:	c7 04 24 91 c0 02 c0 	mov    DWORD PTR [esp],0xc002c091
c001e6de:	e8 b9 46 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e6e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e6e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6ec:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e6ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6f4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e6f7:	5a                   	pop    edx
c001e6f8:	59                   	pop    ecx
c001e6f9:	50                   	push   eax
c001e6fa:	68 90 17 03 c0       	push   0xc0031790
c001e6ff:	e8 bc a2 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e704:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e709:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e710:	c7 04 24 ab c0 02 c0 	mov    DWORD PTR [esp],0xc002c0ab
c001e717:	e8 80 46 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e71c:	83 c4 10             	add    esp,0x10
c001e71f:	a1 68 17 03 c0       	mov    eax,ds:0xc0031768
c001e724:	85 c0                	test   eax,eax
c001e726:	74 5a                	je     c001e782 <terminateTask(int)+0xce>
c001e728:	83 ec 0c             	sub    esp,0xc
c001e72b:	68 c5 c0 02 c0       	push   0xc002c0c5
c001e730:	e8 67 46 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e735:	58                   	pop    eax
c001e736:	c6 05 6c 17 03 c0 01 	mov    BYTE PTR ds:0xc003176c,0x1
c001e73d:	ff 35 68 17 03 c0    	push   DWORD PTR ds:0xc0031768
c001e743:	e8 40 fb ff ff       	call   c001e288 <unblockTask(ThreadControlBlock*)>
c001e748:	c7 04 24 df c0 02 c0 	mov    DWORD PTR [esp],0xc002c0df
c001e74f:	e8 48 46 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e754:	83 c4 10             	add    esp,0x10
c001e757:	e8 17 f5 ff ff       	call   c001dc73 <unlockScheduler()>
c001e75c:	e8 d0 f8 ff ff       	call   c001e031 <unlockStuff()>
c001e761:	83 ec 0c             	sub    esp,0xc
c001e764:	68 17 c1 02 c0       	push   0xc002c117
c001e769:	e8 2e 46 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e76e:	83 c4 10             	add    esp,0x10
c001e771:	e8 fb f4 ff ff       	call   c001dc71 <lockScheduler()>
c001e776:	e8 31 f8 ff ff       	call   c001dfac <schedule()>
c001e77b:	e8 f3 f4 ff ff       	call   c001dc73 <unlockScheduler()>
c001e780:	eb ef                	jmp    c001e771 <terminateTask(int)+0xbd>
c001e782:	83 ec 0c             	sub    esp,0xc
c001e785:	68 f9 c0 02 c0       	push   0xc002c0f9
c001e78a:	e8 0d 46 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e78f:	83 c4 10             	add    esp,0x10
c001e792:	eb c3                	jmp    c001e757 <terminateTask(int)+0xa3>

c001e794 <Thr::terminateFromIRQ(int)>:
c001e794:	83 ec 18             	sub    esp,0x18
c001e797:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e79b:	e8 14 ff ff ff       	call   c001e6b4 <terminateTask(int)>

c001e7a0 <Semaphore::release()>:
c001e7a0:	83 ec 0c             	sub    esp,0xc
c001e7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7a7:	e8 ec f4 ff ff       	call   c001dc98 <lockStuff()>
c001e7ac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e7af:	85 d2                	test   edx,edx
c001e7b1:	74 1a                	je     c001e7cd <Semaphore::release()+0x2d>
c001e7b3:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e7b6:	83 ec 0c             	sub    esp,0xc
c001e7b9:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e7bc:	52                   	push   edx
c001e7bd:	e8 c6 fa ff ff       	call   c001e288 <unblockTask(ThreadControlBlock*)>
c001e7c2:	83 c4 10             	add    esp,0x10
c001e7c5:	83 c4 0c             	add    esp,0xc
c001e7c8:	e9 64 f8 ff ff       	jmp    c001e031 <unlockStuff()>
c001e7cd:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e7d0:	83 c4 0c             	add    esp,0xc
c001e7d3:	e9 59 f8 ff ff       	jmp    c001e031 <unlockStuff()>

c001e7d8 <__static_initialization_and_destruction_0(int, int)>:
c001e7d8:	83 ec 0c             	sub    esp,0xc
c001e7db:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e7e0:	0f 85 88 00 00 00    	jne    c001e86e <__static_initialization_and_destruction_0(int, int)+0x96>
c001e7e6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e7ee:	75 7e                	jne    c001e86e <__static_initialization_and_destruction_0(int, int)+0x96>
c001e7f0:	83 ec 0c             	sub    esp,0xc
c001e7f3:	68 a8 17 03 c0       	push   0xc00317a8
c001e7f8:	e8 73 a3 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e7fd:	83 c4 10             	add    esp,0x10
c001e800:	83 ec 04             	sub    esp,0x4
c001e803:	68 74 d1 02 c0       	push   0xc002d174
c001e808:	68 a8 17 03 c0       	push   0xc00317a8
c001e80d:	68 30 8b 02 c0       	push   0xc0028b30
c001e812:	e8 1f 44 ff ff       	call   c0012c36 <__cxa_atexit>
c001e817:	83 c4 10             	add    esp,0x10
c001e81a:	83 ec 0c             	sub    esp,0xc
c001e81d:	68 9c 17 03 c0       	push   0xc003179c
c001e822:	e8 49 a3 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e827:	83 c4 10             	add    esp,0x10
c001e82a:	83 ec 04             	sub    esp,0x4
c001e82d:	68 74 d1 02 c0       	push   0xc002d174
c001e832:	68 9c 17 03 c0       	push   0xc003179c
c001e837:	68 30 8b 02 c0       	push   0xc0028b30
c001e83c:	e8 f5 43 ff ff       	call   c0012c36 <__cxa_atexit>
c001e841:	83 c4 10             	add    esp,0x10
c001e844:	83 ec 0c             	sub    esp,0xc
c001e847:	68 90 17 03 c0       	push   0xc0031790
c001e84c:	e8 1f a3 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e851:	83 c4 10             	add    esp,0x10
c001e854:	83 ec 04             	sub    esp,0x4
c001e857:	68 74 d1 02 c0       	push   0xc002d174
c001e85c:	68 90 17 03 c0       	push   0xc0031790
c001e861:	68 30 8b 02 c0       	push   0xc0028b30
c001e866:	e8 cb 43 ff ff       	call   c0012c36 <__cxa_atexit>
c001e86b:	83 c4 10             	add    esp,0x10
c001e86e:	90                   	nop
c001e86f:	83 c4 0c             	add    esp,0xc
c001e872:	c3                   	ret    

c001e873 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e873:	83 ec 0c             	sub    esp,0xc
c001e876:	83 ec 08             	sub    esp,0x8
c001e879:	68 ff ff 00 00       	push   0xffff
c001e87e:	6a 01                	push   0x1
c001e880:	e8 53 ff ff ff       	call   c001e7d8 <__static_initialization_and_destruction_0(int, int)>
c001e885:	83 c4 10             	add    esp,0x10
c001e888:	83 c4 0c             	add    esp,0xc
c001e88b:	c3                   	ret    

c001e88c <Vm::inbv(unsigned short)>:
c001e88c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e890:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e895:	75 06                	jne    c001e89d <Vm::inbv(unsigned short)+0x11>
c001e897:	a0 ec 17 03 c0       	mov    al,ds:0xc00317ec
c001e89c:	c3                   	ret    
c001e89d:	ec                   	in     al,dx
c001e89e:	c3                   	ret    

c001e89f <Vm::outbv(unsigned short, unsigned char)>:
c001e89f:	53                   	push   ebx
c001e8a0:	83 ec 08             	sub    esp,0x8
c001e8a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e8ab:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e8b0:	75 38                	jne    c001e8ea <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e8b2:	0f b6 c3             	movzx  eax,bl
c001e8b5:	51                   	push   ecx
c001e8b6:	51                   	push   ecx
c001e8b7:	50                   	push   eax
c001e8b8:	68 db c3 02 c0       	push   0xc002c3db
c001e8bd:	e8 da 44 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001e8c2:	8b 15 ec 17 03 c0    	mov    edx,DWORD PTR ds:0xc00317ec
c001e8c8:	83 c4 10             	add    esp,0x10
c001e8cb:	8d 42 01             	lea    eax,[edx+0x1]
c001e8ce:	88 9a 00 18 03 c0    	mov    BYTE PTR [edx-0x3ffce800],bl
c001e8d4:	a3 ec 17 03 c0       	mov    ds:0xc00317ec,eax
c001e8d9:	83 f8 20             	cmp    eax,0x20
c001e8dc:	75 0f                	jne    c001e8ed <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e8de:	c7 05 ec 17 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00317ec,0x1f
c001e8e8:	eb 03                	jmp    c001e8ed <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e8ea:	88 d8                	mov    al,bl
c001e8ec:	ee                   	out    dx,al
c001e8ed:	83 c4 08             	add    esp,0x8
c001e8f0:	5b                   	pop    ebx
c001e8f1:	c3                   	ret    

c001e8f2 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e8f2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8f7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8fc:	c1 e0 04             	shl    eax,0x4
c001e8ff:	01 d0                	add    eax,edx
c001e901:	c3                   	ret    

c001e902 <Vm::getSegment(unsigned int)>:
c001e902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e906:	c1 e8 10             	shr    eax,0x10
c001e909:	c3                   	ret    

c001e90a <Vm::getOffset(unsigned int)>:
c001e90a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e90e:	c3                   	ret    

c001e90f <Vm::mainloop2()>:
c001e90f:	83 ec 0c             	sub    esp,0xc
c001e912:	e8 5a f3 ff ff       	call   c001dc71 <lockScheduler()>
c001e917:	83 ec 0c             	sub    esp,0xc
c001e91a:	c6 05 e5 17 03 c0 01 	mov    BYTE PTR ds:0xc00317e5,0x1
c001e921:	6a 02                	push   0x2
c001e923:	e8 9c f7 ff ff       	call   c001e0c4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e928:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e92d:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e931:	52                   	push   edx
c001e932:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e936:	52                   	push   edx
c001e937:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e93b:	52                   	push   edx
c001e93c:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e940:	50                   	push   eax
c001e941:	e8 b4 19 fe ff       	call   c00002fa <goToVM86>
c001e946:	83 c4 2c             	add    esp,0x2c
c001e949:	c3                   	ret    

c001e94a <Vm::mainVm8086Loop(void*)>:
c001e94a:	83 ec 0c             	sub    esp,0xc
c001e94d:	e8 21 f3 ff ff       	call   c001dc73 <unlockScheduler()>
c001e952:	83 c4 0c             	add    esp,0xc
c001e955:	eb b8                	jmp    c001e90f <Vm::mainloop2()>

c001e957 <Vm::mainloop3(unsigned long)>:
c001e957:	53                   	push   ebx
c001e958:	83 ec 08             	sub    esp,0x8
c001e95b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e95f:	e8 0d f3 ff ff       	call   c001dc71 <lockScheduler()>
c001e964:	83 ec 0c             	sub    esp,0xc
c001e967:	89 1d e0 17 03 c0    	mov    DWORD PTR ds:0xc00317e0,ebx
c001e96d:	6a 02                	push   0x2
c001e96f:	c6 05 e4 17 03 c0 01 	mov    BYTE PTR ds:0xc00317e4,0x1
c001e976:	e8 49 f7 ff ff       	call   c001e0c4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e97b:	83 c4 18             	add    esp,0x18
c001e97e:	5b                   	pop    ebx
c001e97f:	eb 8e                	jmp    c001e90f <Vm::mainloop2()>

c001e981 <Vm::initialise8086()>:
c001e981:	83 ec 0c             	sub    esp,0xc
c001e984:	68 80 00 00 00       	push   0x80
c001e989:	6a 00                	push   0x0
c001e98b:	68 4a e9 01 c0       	push   0xc001e94a
c001e990:	ff 35 b4 17 03 c0    	push   DWORD PTR ds:0xc00317b4
c001e996:	e8 07 f4 ff ff       	call   c001dda2 <Process::createThread(void (*)(void*), void*, int)>
c001e99b:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e9a2:	a3 e8 17 03 c0       	mov    ds:0xc00317e8,eax
c001e9a7:	68 00 01 00 00       	push   0x100
c001e9ac:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001e9b1:	6a 00                	push   0x0
c001e9b3:	6a 00                	push   0x0
c001e9b5:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001e9bb:	e8 3c 3b ff ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e9c0:	83 c4 2c             	add    esp,0x2c
c001e9c3:	c3                   	ret    

c001e9c4 <Vm::finish8086()>:
c001e9c4:	53                   	push   ebx
c001e9c5:	83 ec 08             	sub    esp,0x8
c001e9c8:	e8 a4 f2 ff ff       	call   c001dc71 <lockScheduler()>
c001e9cd:	80 3d e4 17 03 c0 00 	cmp    BYTE PTR ds:0xc00317e4,0x0
c001e9d4:	75 0c                	jne    c001e9e2 <Vm::finish8086()+0x1e>
c001e9d6:	e8 d1 f5 ff ff       	call   c001dfac <schedule()>
c001e9db:	e8 93 f2 ff ff       	call   c001dc73 <unlockScheduler()>
c001e9e0:	eb e6                	jmp    c001e9c8 <Vm::finish8086()+0x4>
c001e9e2:	83 ec 0c             	sub    esp,0xc
c001e9e5:	8b 1d e0 17 03 c0    	mov    ebx,DWORD PTR ds:0xc00317e0
c001e9eb:	ff 35 e8 17 03 c0    	push   DWORD PTR ds:0xc00317e8
c001e9f1:	c6 05 e4 17 03 c0 00 	mov    BYTE PTR ds:0xc00317e4,0x0
c001e9f8:	e8 8b f8 ff ff       	call   c001e288 <unblockTask(ThreadControlBlock*)>
c001e9fd:	e8 71 f2 ff ff       	call   c001dc73 <unlockScheduler()>
c001ea02:	89 d8                	mov    eax,ebx
c001ea04:	83 c4 18             	add    esp,0x18
c001ea07:	5b                   	pop    ebx
c001ea08:	c3                   	ret    

c001ea09 <Vm::getOutput8086(unsigned char*)>:
c001ea09:	83 ec 10             	sub    esp,0x10
c001ea0c:	ff 35 ec 17 03 c0    	push   DWORD PTR ds:0xc00317ec
c001ea12:	68 00 18 03 c0       	push   0xc0031800
c001ea17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea1b:	e8 24 1d fe ff       	call   c0000744 <memcpy>
c001ea20:	a1 ec 17 03 c0       	mov    eax,ds:0xc00317ec
c001ea25:	c7 05 ec 17 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00317ec,0x0
c001ea2f:	83 c4 1c             	add    esp,0x1c
c001ea32:	c3                   	ret    

c001ea33 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ea33:	55                   	push   ebp
c001ea34:	57                   	push   edi
c001ea35:	56                   	push   esi
c001ea36:	53                   	push   ebx
c001ea37:	83 ec 2c             	sub    esp,0x2c
c001ea3a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ea3e:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ea42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ea46:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ea4a:	e8 22 f2 ff ff       	call   c001dc71 <lockScheduler()>
c001ea4f:	a0 e5 17 03 c0       	mov    al,ds:0xc00317e5
c001ea54:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ea58:	84 c0                	test   al,al
c001ea5a:	75 0c                	jne    c001ea68 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ea5c:	e8 4b f5 ff ff       	call   c001dfac <schedule()>
c001ea61:	e8 0d f2 ff ff       	call   c001dc73 <unlockScheduler()>
c001ea66:	eb e2                	jmp    c001ea4a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ea68:	a1 e8 17 03 c0       	mov    eax,ds:0xc00317e8
c001ea6d:	c7 05 ec 17 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00317ec,0x0
c001ea77:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ea7b:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ea7f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ea83:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ea87:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ea8b:	50                   	push   eax
c001ea8c:	6a 20                	push   0x20
c001ea8e:	6a 00                	push   0x0
c001ea90:	68 00 18 03 c0       	push   0xc0031800
c001ea95:	e8 de 1c fe ff       	call   c0000778 <memset>
c001ea9a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001eaa1:	e8 9d 0d ff ff       	call   c000f843 <malloc>
c001eaa6:	83 c4 0c             	add    esp,0xc
c001eaa9:	89 c7                	mov    edi,eax
c001eaab:	ff 35 b4 17 03 c0    	push   DWORD PTR ds:0xc00317b4
c001eab1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eab5:	50                   	push   eax
c001eab6:	e8 39 48 ff ff       	call   c00132f4 <File::File(char const*, Process*)>
c001eabb:	83 c4 10             	add    esp,0x10
c001eabe:	85 ff                	test   edi,edi
c001eac0:	75 0a                	jne    c001eacc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001eac2:	83 ec 0c             	sub    esp,0xc
c001eac5:	68 f7 c3 02 c0       	push   0xc002c3f7
c001eaca:	eb 27                	jmp    c001eaf3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001eacc:	50                   	push   eax
c001eacd:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ead1:	50                   	push   eax
c001ead2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ead6:	50                   	push   eax
c001ead7:	57                   	push   edi
c001ead8:	e8 27 4b ff ff       	call   c0013604 <File::stat(unsigned long long*, bool*)>
c001eadd:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001eae2:	83 c4 10             	add    esp,0x10
c001eae5:	89 e8                	mov    eax,ebp
c001eae7:	84 c0                	test   al,al
c001eae9:	74 19                	je     c001eb04 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001eaeb:	83 ec 0c             	sub    esp,0xc
c001eaee:	68 0b c4 02 c0       	push   0xc002c40b
c001eaf3:	e8 7f b9 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001eaf8:	31 ed                	xor    ebp,ebp
c001eafa:	e8 74 f1 ff ff       	call   c001dc73 <unlockScheduler()>
c001eaff:	83 c4 10             	add    esp,0x10
c001eb02:	eb 75                	jmp    c001eb79 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001eb04:	50                   	push   eax
c001eb05:	50                   	push   eax
c001eb06:	6a 01                	push   0x1
c001eb08:	57                   	push   edi
c001eb09:	e8 4a 48 ff ff       	call   c0013358 <File::open(FileOpenMode)>
c001eb0e:	83 c4 10             	add    esp,0x10
c001eb11:	85 c0                	test   eax,eax
c001eb13:	74 17                	je     c001eb2c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001eb15:	83 ec 0c             	sub    esp,0xc
c001eb18:	68 24 c4 02 c0       	push   0xc002c424
c001eb1d:	e8 55 b9 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001eb22:	e8 4c f1 ff ff       	call   c001dc73 <unlockScheduler()>
c001eb27:	83 c4 10             	add    esp,0x10
c001eb2a:	eb 4d                	jmp    c001eb79 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001eb2c:	0f b7 f6             	movzx  esi,si
c001eb2f:	50                   	push   eax
c001eb30:	0f b7 db             	movzx  ebx,bx
c001eb33:	50                   	push   eax
c001eb34:	56                   	push   esi
c001eb35:	53                   	push   ebx
c001eb36:	e8 b7 fd ff ff       	call   c001e8f2 <Vm::realToLinear(unsigned short, unsigned short)>
c001eb3b:	5a                   	pop    edx
c001eb3c:	8b 17                	mov    edx,DWORD PTR [edi]
c001eb3e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001eb42:	51                   	push   ecx
c001eb43:	50                   	push   eax
c001eb44:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb48:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb4c:	57                   	push   edi
c001eb4d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001eb50:	83 c4 14             	add    esp,0x14
c001eb53:	57                   	push   edi
c001eb54:	e8 5d 48 ff ff       	call   c00133b6 <File::close()>
c001eb59:	c6 05 e5 17 03 c0 00 	mov    BYTE PTR ds:0xc00317e5,0x0
c001eb60:	e8 0e f1 ff ff       	call   c001dc73 <unlockScheduler()>
c001eb65:	59                   	pop    ecx
c001eb66:	ff 35 e8 17 03 c0    	push   DWORD PTR ds:0xc00317e8
c001eb6c:	e8 17 f7 ff ff       	call   c001e288 <unblockTask(ThreadControlBlock*)>
c001eb71:	83 c4 10             	add    esp,0x10
c001eb74:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001eb79:	83 c4 2c             	add    esp,0x2c
c001eb7c:	89 e8                	mov    eax,ebp
c001eb7e:	5b                   	pop    ebx
c001eb7f:	5e                   	pop    esi
c001eb80:	5f                   	pop    edi
c001eb81:	5d                   	pop    ebp
c001eb82:	c3                   	ret    

c001eb83 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001eb83:	57                   	push   edi
c001eb84:	56                   	push   esi
c001eb85:	53                   	push   ebx
c001eb86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eb8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb8e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eb92:	83 e8 06             	sub    eax,0x6
c001eb95:	0f b7 c0             	movzx  eax,ax
c001eb98:	50                   	push   eax
c001eb99:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001eb9e:	50                   	push   eax
c001eb9f:	e8 4e fd ff ff       	call   c001e8f2 <Vm::realToLinear(unsigned short, unsigned short)>
c001eba4:	5a                   	pop    edx
c001eba5:	5e                   	pop    esi
c001eba6:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001eba9:	8d 56 fa             	lea    edx,[esi-0x6]
c001ebac:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ebb2:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ebb5:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ebb8:	83 c2 02             	add    edx,0x2
c001ebbb:	66 89 10             	mov    WORD PTR [eax],dx
c001ebbe:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ebc1:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ebc5:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ebc8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ebcc:	89 d6                	mov    esi,edx
c001ebce:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ebd4:	66 81 e6 ff fd       	and    si,0xfdff
c001ebd9:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ebdd:	74 07                	je     c001ebe6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ebdf:	89 d6                	mov    esi,edx
c001ebe1:	66 81 ce 00 02       	or     si,0x200
c001ebe6:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ebea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ebef:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ebf3:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ebfb:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ebfe:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ec06:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ec09:	5b                   	pop    ebx
c001ec0a:	5e                   	pop    esi
c001ec0b:	5f                   	pop    edi
c001ec0c:	c3                   	ret    

c001ec0d <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ec0d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec12:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec17:	c1 e0 04             	shl    eax,0x4
c001ec1a:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ec1d:	c3                   	ret    

c001ec1e <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ec1e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec23:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec28:	c1 e0 04             	shl    eax,0x4
c001ec2b:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ec2f:	c3                   	ret    

c001ec30 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ec30:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec35:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec3a:	c1 e0 04             	shl    eax,0x4
c001ec3d:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ec40:	c3                   	ret    

c001ec41 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ec41:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec46:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec4b:	c1 e0 04             	shl    eax,0x4
c001ec4e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec52:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ec55:	c3                   	ret    

c001ec56 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ec56:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec5b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec60:	c1 e0 04             	shl    eax,0x4
c001ec63:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec67:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ec6b:	c3                   	ret    

c001ec6c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ec6c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec71:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec76:	c1 e0 04             	shl    eax,0x4
c001ec79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec7d:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ec80:	c3                   	ret    

c001ec81 <Vm::faultHandler(regs*)>:
c001ec81:	55                   	push   ebp
c001ec82:	57                   	push   edi
c001ec83:	56                   	push   esi
c001ec84:	53                   	push   ebx
c001ec85:	83 ec 1c             	sub    esp,0x1c
c001ec88:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ec8c:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ec8f:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ec92:	0f b7 c1             	movzx  eax,cx
c001ec95:	50                   	push   eax
c001ec96:	0f b7 c3             	movzx  eax,bx
c001ec99:	c1 e3 04             	shl    ebx,0x4
c001ec9c:	50                   	push   eax
c001ec9d:	e8 50 fc ff ff       	call   c001e8f2 <Vm::realToLinear(unsigned short, unsigned short)>
c001eca2:	5a                   	pop    edx
c001eca3:	89 c5                	mov    ebp,eax
c001eca5:	5e                   	pop    esi
c001eca6:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ecaa:	50                   	push   eax
c001ecab:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ecaf:	50                   	push   eax
c001ecb0:	e8 3d fc ff ff       	call   c001e8f2 <Vm::realToLinear(unsigned short, unsigned short)>
c001ecb5:	01 cb                	add    ebx,ecx
c001ecb7:	89 c6                	mov    esi,eax
c001ecb9:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ecbd:	50                   	push   eax
c001ecbe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ecc2:	50                   	push   eax
c001ecc3:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ecc7:	50                   	push   eax
c001ecc8:	55                   	push   ebp
c001ecc9:	53                   	push   ebx
c001ecca:	b3 06                	mov    bl,0x6
c001eccc:	68 3d c4 02 c0       	push   0xc002c43d
c001ecd1:	e8 c6 40 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001ecd6:	83 c4 20             	add    esp,0x20
c001ecd9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ecde:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ece3:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ece7:	3c 9d                	cmp    al,0x9d
c001ece9:	0f 84 d7 02 00 00    	je     c001efc6 <Vm::faultHandler(regs*)+0x345>
c001ecef:	0f 87 a3 00 00 00    	ja     c001ed98 <Vm::faultHandler(regs*)+0x117>
c001ecf5:	3c 66                	cmp    al,0x66
c001ecf7:	0f 84 15 02 00 00    	je     c001ef12 <Vm::faultHandler(regs*)+0x291>
c001ecfd:	77 5f                	ja     c001ed5e <Vm::faultHandler(regs*)+0xdd>
c001ecff:	3c 36                	cmp    al,0x36
c001ed01:	0f 84 f1 01 00 00    	je     c001eef8 <Vm::faultHandler(regs*)+0x277>
c001ed07:	77 28                	ja     c001ed31 <Vm::faultHandler(regs*)+0xb0>
c001ed09:	3c 26                	cmp    al,0x26
c001ed0b:	0f 84 99 01 00 00    	je     c001eeaa <Vm::faultHandler(regs*)+0x229>
c001ed11:	3c 2e                	cmp    al,0x2e
c001ed13:	0f 85 3b 07 00 00    	jne    c001f454 <Vm::faultHandler(regs*)+0x7d3>
c001ed19:	83 ec 0c             	sub    esp,0xc
c001ed1c:	31 db                	xor    ebx,ebx
c001ed1e:	68 52 c4 02 c0       	push   0xc002c452
c001ed23:	e8 74 40 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001ed28:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ed2b:	83 c4 10             	add    esp,0x10
c001ed2e:	45                   	inc    ebp
c001ed2f:	eb b2                	jmp    c001ece3 <Vm::faultHandler(regs*)+0x62>
c001ed31:	3c 64                	cmp    al,0x64
c001ed33:	0f 84 8b 01 00 00    	je     c001eec4 <Vm::faultHandler(regs*)+0x243>
c001ed39:	0f 87 9f 01 00 00    	ja     c001eede <Vm::faultHandler(regs*)+0x25d>
c001ed3f:	3c 3e                	cmp    al,0x3e
c001ed41:	0f 85 0d 07 00 00    	jne    c001f454 <Vm::faultHandler(regs*)+0x7d3>
c001ed47:	83 ec 0c             	sub    esp,0xc
c001ed4a:	b3 01                	mov    bl,0x1
c001ed4c:	68 56 c4 02 c0       	push   0xc002c456
c001ed51:	e8 46 40 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001ed56:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ed59:	83 c4 10             	add    esp,0x10
c001ed5c:	eb d0                	jmp    c001ed2e <Vm::faultHandler(regs*)+0xad>
c001ed5e:	3c 6d                	cmp    al,0x6d
c001ed60:	0f 84 af 03 00 00    	je     c001f115 <Vm::faultHandler(regs*)+0x494>
c001ed66:	77 15                	ja     c001ed7d <Vm::faultHandler(regs*)+0xfc>
c001ed68:	3c 67                	cmp    al,0x67
c001ed6a:	0f 84 bf 01 00 00    	je     c001ef2f <Vm::faultHandler(regs*)+0x2ae>
c001ed70:	3c 6c                	cmp    al,0x6c
c001ed72:	0f 84 3f 03 00 00    	je     c001f0b7 <Vm::faultHandler(regs*)+0x436>
c001ed78:	e9 d7 06 00 00       	jmp    c001f454 <Vm::faultHandler(regs*)+0x7d3>
c001ed7d:	3c 6f                	cmp    al,0x6f
c001ed7f:	0f 84 a4 04 00 00    	je     c001f229 <Vm::faultHandler(regs*)+0x5a8>
c001ed85:	0f 82 11 04 00 00    	jb     c001f19c <Vm::faultHandler(regs*)+0x51b>
c001ed8b:	3c 9c                	cmp    al,0x9c
c001ed8d:	0f 84 ba 01 00 00    	je     c001ef4d <Vm::faultHandler(regs*)+0x2cc>
c001ed93:	e9 bc 06 00 00       	jmp    c001f454 <Vm::faultHandler(regs*)+0x7d3>
c001ed98:	3c ec                	cmp    al,0xec
c001ed9a:	0f 84 24 06 00 00    	je     c001f3c4 <Vm::faultHandler(regs*)+0x743>
c001eda0:	0f 87 93 00 00 00    	ja     c001ee39 <Vm::faultHandler(regs*)+0x1b8>
c001eda6:	3c e4                	cmp    al,0xe4
c001eda8:	0f 84 5c 05 00 00    	je     c001f30a <Vm::faultHandler(regs*)+0x689>
c001edae:	77 6a                	ja     c001ee1a <Vm::faultHandler(regs*)+0x199>
c001edb0:	3c cd                	cmp    al,0xcd
c001edb2:	0f 84 7e 02 00 00    	je     c001f036 <Vm::faultHandler(regs*)+0x3b5>
c001edb8:	3c cf                	cmp    al,0xcf
c001edba:	0f 85 94 06 00 00    	jne    c001f454 <Vm::faultHandler(regs*)+0x7d3>
c001edc0:	83 ec 0c             	sub    esp,0xc
c001edc3:	68 9a c4 02 c0       	push   0xc002c49a
c001edc8:	e8 cf 3f ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001edcd:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001edd0:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001edd3:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001edd7:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001edda:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001edde:	0d 00 02 02 00       	or     eax,0x20200
c001ede3:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ede6:	56                   	push   esi
c001ede7:	53                   	push   ebx
c001ede8:	52                   	push   edx
c001ede9:	68 a0 c4 02 c0       	push   0xc002c4a0
c001edee:	e8 a9 3f ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001edf3:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001edf7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001edfd:	66 c1 e8 09          	shr    ax,0x9
c001ee01:	83 e0 01             	and    eax,0x1
c001ee04:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ee07:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ee0a:	83 c0 06             	add    eax,0x6
c001ee0d:	25 ff ff 00 00       	and    eax,0xffff
c001ee12:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ee15:	e9 95 02 00 00       	jmp    c001f0af <Vm::faultHandler(regs*)+0x42e>
c001ee1a:	3c e6                	cmp    al,0xe6
c001ee1c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ee20:	0f 84 4e 05 00 00    	je     c001f374 <Vm::faultHandler(regs*)+0x6f3>
c001ee26:	0f 82 0a 05 00 00    	jb     c001f336 <Vm::faultHandler(regs*)+0x6b5>
c001ee2c:	3c e7                	cmp    al,0xe7
c001ee2e:	0f 84 69 05 00 00    	je     c001f39d <Vm::faultHandler(regs*)+0x71c>
c001ee34:	e9 1b 06 00 00       	jmp    c001f454 <Vm::faultHandler(regs*)+0x7d3>
c001ee39:	3c ef                	cmp    al,0xef
c001ee3b:	0f 84 e6 05 00 00    	je     c001f427 <Vm::faultHandler(regs*)+0x7a6>
c001ee41:	77 37                	ja     c001ee7a <Vm::faultHandler(regs*)+0x1f9>
c001ee43:	3c ed                	cmp    al,0xed
c001ee45:	0f 84 a3 05 00 00    	je     c001f3ee <Vm::faultHandler(regs*)+0x76d>
c001ee4b:	3c ee                	cmp    al,0xee
c001ee4d:	0f 85 01 06 00 00    	jne    c001f454 <Vm::faultHandler(regs*)+0x7d3>
c001ee53:	52                   	push   edx
c001ee54:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ee57:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ee5a:	68 3b c5 02 c0       	push   0xc002c53b
c001ee5f:	e8 38 3f ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001ee64:	59                   	pop    ecx
c001ee65:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ee69:	5b                   	pop    ebx
c001ee6a:	50                   	push   eax
c001ee6b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ee6f:	50                   	push   eax
c001ee70:	e8 2a fa ff ff       	call   c001e89f <Vm::outbv(unsigned short, unsigned char)>
c001ee75:	e9 a5 05 00 00       	jmp    c001f41f <Vm::faultHandler(regs*)+0x79e>
c001ee7a:	3c fa                	cmp    al,0xfa
c001ee7c:	0f 84 f7 01 00 00    	je     c001f079 <Vm::faultHandler(regs*)+0x3f8>
c001ee82:	3c fb                	cmp    al,0xfb
c001ee84:	0f 84 0a 02 00 00    	je     c001f094 <Vm::faultHandler(regs*)+0x413>
c001ee8a:	3c f3                	cmp    al,0xf3
c001ee8c:	0f 85 c2 05 00 00    	jne    c001f454 <Vm::faultHandler(regs*)+0x7d3>
c001ee92:	83 ec 0c             	sub    esp,0xc
c001ee95:	68 73 c4 02 c0       	push   0xc002c473
c001ee9a:	e8 fd 3e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001ee9f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eea2:	83 c4 10             	add    esp,0x10
c001eea5:	e9 84 fe ff ff       	jmp    c001ed2e <Vm::faultHandler(regs*)+0xad>
c001eeaa:	83 ec 0c             	sub    esp,0xc
c001eead:	b3 02                	mov    bl,0x2
c001eeaf:	68 4e c4 02 c0       	push   0xc002c44e
c001eeb4:	e8 e3 3e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001eeb9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eebc:	83 c4 10             	add    esp,0x10
c001eebf:	e9 6a fe ff ff       	jmp    c001ed2e <Vm::faultHandler(regs*)+0xad>
c001eec4:	83 ec 0c             	sub    esp,0xc
c001eec7:	b3 03                	mov    bl,0x3
c001eec9:	68 5a c4 02 c0       	push   0xc002c45a
c001eece:	e8 c9 3e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001eed3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eed6:	83 c4 10             	add    esp,0x10
c001eed9:	e9 50 fe ff ff       	jmp    c001ed2e <Vm::faultHandler(regs*)+0xad>
c001eede:	83 ec 0c             	sub    esp,0xc
c001eee1:	b3 04                	mov    bl,0x4
c001eee3:	68 5e c4 02 c0       	push   0xc002c45e
c001eee8:	e8 af 3e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001eeed:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eef0:	83 c4 10             	add    esp,0x10
c001eef3:	e9 36 fe ff ff       	jmp    c001ed2e <Vm::faultHandler(regs*)+0xad>
c001eef8:	83 ec 0c             	sub    esp,0xc
c001eefb:	b3 05                	mov    bl,0x5
c001eefd:	68 62 c4 02 c0       	push   0xc002c462
c001ef02:	e8 95 3e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001ef07:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef0a:	83 c4 10             	add    esp,0x10
c001ef0d:	e9 1c fe ff ff       	jmp    c001ed2e <Vm::faultHandler(regs*)+0xad>
c001ef12:	83 ec 0c             	sub    esp,0xc
c001ef15:	68 66 c4 02 c0       	push   0xc002c466
c001ef1a:	e8 7d 3e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001ef1f:	83 c4 10             	add    esp,0x10
c001ef22:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef25:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ef2a:	e9 ff fd ff ff       	jmp    c001ed2e <Vm::faultHandler(regs*)+0xad>
c001ef2f:	50                   	push   eax
c001ef30:	50                   	push   eax
c001ef31:	6a 01                	push   0x1
c001ef33:	68 6b c4 02 c0       	push   0xc002c46b
c001ef38:	e8 5f 3e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001ef3d:	83 c4 10             	add    esp,0x10
c001ef40:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef43:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001ef48:	e9 e1 fd ff ff       	jmp    c001ed2e <Vm::faultHandler(regs*)+0xad>
c001ef4d:	83 ec 0c             	sub    esp,0xc
c001ef50:	68 79 c4 02 c0       	push   0xc002c479
c001ef55:	e8 42 3e ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001ef5a:	83 c4 10             	add    esp,0x10
c001ef5d:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001ef60:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ef65:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001ef68:	74 2f                	je     c001ef99 <Vm::faultHandler(regs*)+0x318>
c001ef6a:	83 ea 04             	sub    edx,0x4
c001ef6d:	25 ff 0d 00 00       	and    eax,0xdff
c001ef72:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ef78:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001ef7b:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001ef7e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef84:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001ef88:	0f 84 bf 04 00 00    	je     c001f44d <Vm::faultHandler(regs*)+0x7cc>
c001ef8e:	80 cc 02             	or     ah,0x2
c001ef91:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001ef94:	e9 b4 04 00 00       	jmp    c001f44d <Vm::faultHandler(regs*)+0x7cc>
c001ef99:	83 ea 02             	sub    edx,0x2
c001ef9c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001efa2:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001efa5:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001efa9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efaf:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001efb3:	74 05                	je     c001efba <Vm::faultHandler(regs*)+0x339>
c001efb5:	80 cc 02             	or     ah,0x2
c001efb8:	eb 03                	jmp    c001efbd <Vm::faultHandler(regs*)+0x33c>
c001efba:	80 e4 fd             	and    ah,0xfd
c001efbd:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001efc1:	e9 87 04 00 00       	jmp    c001f44d <Vm::faultHandler(regs*)+0x7cc>
c001efc6:	83 ec 0c             	sub    esp,0xc
c001efc9:	68 80 c4 02 c0       	push   0xc002c480
c001efce:	e8 c9 3d ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001efd3:	83 c4 10             	add    esp,0x10
c001efd6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001efdb:	74 28                	je     c001f005 <Vm::faultHandler(regs*)+0x384>
c001efdd:	8b 06                	mov    eax,DWORD PTR [esi]
c001efdf:	25 ff 0d 00 00       	and    eax,0xdff
c001efe4:	0d 00 02 02 00       	or     eax,0x20200
c001efe9:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001efec:	8b 06                	mov    eax,DWORD PTR [esi]
c001efee:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eff4:	c1 e8 09             	shr    eax,0x9
c001eff7:	83 e0 01             	and    eax,0x1
c001effa:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001effd:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f000:	83 c0 04             	add    eax,0x4
c001f003:	eb 24                	jmp    c001f029 <Vm::faultHandler(regs*)+0x3a8>
c001f005:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f008:	0d 00 02 02 00       	or     eax,0x20200
c001f00d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f010:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f013:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f019:	66 c1 e8 09          	shr    ax,0x9
c001f01d:	83 e0 01             	and    eax,0x1
c001f020:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f023:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f026:	83 c0 02             	add    eax,0x2
c001f029:	25 ff ff 00 00       	and    eax,0xffff
c001f02e:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f031:	e9 17 04 00 00       	jmp    c001f44d <Vm::faultHandler(regs*)+0x7cc>
c001f036:	53                   	push   ebx
c001f037:	53                   	push   ebx
c001f038:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f03c:	50                   	push   eax
c001f03d:	68 86 c4 02 c0       	push   0xc002c486
c001f042:	e8 55 3d ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001f047:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f04b:	83 c4 10             	add    esp,0x10
c001f04e:	3c ee                	cmp    al,0xee
c001f050:	75 10                	jne    c001f062 <Vm::faultHandler(regs*)+0x3e1>
c001f052:	83 ec 0c             	sub    esp,0xc
c001f055:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f058:	e8 fa f8 ff ff       	call   c001e957 <Vm::mainloop3(unsigned long)>
c001f05d:	e9 c0 03 00 00       	jmp    c001f422 <Vm::faultHandler(regs*)+0x7a1>
c001f062:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f066:	83 ec 0c             	sub    esp,0xc
c001f069:	53                   	push   ebx
c001f06a:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f06e:	53                   	push   ebx
c001f06f:	55                   	push   ebp
c001f070:	50                   	push   eax
c001f071:	57                   	push   edi
c001f072:	e8 0c fb ff ff       	call   c001eb83 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f077:	eb 36                	jmp    c001f0af <Vm::faultHandler(regs*)+0x42e>
c001f079:	83 ec 0c             	sub    esp,0xc
c001f07c:	68 90 c4 02 c0       	push   0xc002c490
c001f081:	e8 16 3d ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001f086:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f08b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f08f:	e9 8b 03 00 00       	jmp    c001f41f <Vm::faultHandler(regs*)+0x79e>
c001f094:	83 ec 0c             	sub    esp,0xc
c001f097:	68 95 c4 02 c0       	push   0xc002c495
c001f09c:	e8 fb 3c ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001f0a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0a6:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f0aa:	e9 70 03 00 00       	jmp    c001f41f <Vm::faultHandler(regs*)+0x79e>
c001f0af:	83 c4 20             	add    esp,0x20
c001f0b2:	e9 99 03 00 00       	jmp    c001f450 <Vm::faultHandler(regs*)+0x7cf>
c001f0b7:	83 ec 0c             	sub    esp,0xc
c001f0ba:	68 d3 c4 02 c0       	push   0xc002c4d3
c001f0bf:	e8 d8 3c ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001f0c4:	83 c4 10             	add    esp,0x10
c001f0c7:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f0ca:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f0cf:	74 0d                	je     c001f0de <Vm::faultHandler(regs*)+0x45d>
c001f0d1:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f0d8:	0f 87 9e 01 00 00    	ja     c001f27c <Vm::faultHandler(regs*)+0x5fb>
c001f0de:	83 ec 0c             	sub    esp,0xc
c001f0e1:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f0e5:	0f b7 db             	movzx  ebx,bx
c001f0e8:	50                   	push   eax
c001f0e9:	e8 9e f7 ff ff       	call   c001e88c <Vm::inbv(unsigned short)>
c001f0ee:	83 c4 0c             	add    esp,0xc
c001f0f1:	0f b6 c0             	movzx  eax,al
c001f0f4:	50                   	push   eax
c001f0f5:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f0f9:	50                   	push   eax
c001f0fa:	53                   	push   ebx
c001f0fb:	e8 41 fb ff ff       	call   c001ec41 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f100:	83 c4 10             	add    esp,0x10
c001f103:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f106:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f10a:	74 03                	je     c001f10f <Vm::faultHandler(regs*)+0x48e>
c001f10c:	48                   	dec    eax
c001f10d:	eb 01                	jmp    c001f110 <Vm::faultHandler(regs*)+0x48f>
c001f10f:	40                   	inc    eax
c001f110:	0f b7 c0             	movzx  eax,ax
c001f113:	eb 7f                	jmp    c001f194 <Vm::faultHandler(regs*)+0x513>
c001f115:	83 ec 0c             	sub    esp,0xc
c001f118:	68 05 c5 02 c0       	push   0xc002c505
c001f11d:	e8 7a 3c ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001f122:	83 c4 10             	add    esp,0x10
c001f125:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f128:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f12d:	74 0d                	je     c001f13c <Vm::faultHandler(regs*)+0x4bb>
c001f12f:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f136:	0f 87 40 01 00 00    	ja     c001f27c <Vm::faultHandler(regs*)+0x5fb>
c001f13c:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f13f:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f143:	0f b7 db             	movzx  ebx,bx
c001f146:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f14b:	74 20                	je     c001f16d <Vm::faultHandler(regs*)+0x4ec>
c001f14d:	ed                   	in     eax,dx
c001f14e:	51                   	push   ecx
c001f14f:	50                   	push   eax
c001f150:	56                   	push   esi
c001f151:	53                   	push   ebx
c001f152:	e8 15 fb ff ff       	call   c001ec6c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f157:	83 c4 10             	add    esp,0x10
c001f15a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f15d:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f161:	74 05                	je     c001f168 <Vm::faultHandler(regs*)+0x4e7>
c001f163:	83 e8 04             	sub    eax,0x4
c001f166:	eb 27                	jmp    c001f18f <Vm::faultHandler(regs*)+0x50e>
c001f168:	83 c0 04             	add    eax,0x4
c001f16b:	eb 22                	jmp    c001f18f <Vm::faultHandler(regs*)+0x50e>
c001f16d:	66 ed                	in     ax,dx
c001f16f:	0f b7 c0             	movzx  eax,ax
c001f172:	52                   	push   edx
c001f173:	50                   	push   eax
c001f174:	56                   	push   esi
c001f175:	53                   	push   ebx
c001f176:	e8 db fa ff ff       	call   c001ec56 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f17b:	83 c4 10             	add    esp,0x10
c001f17e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f181:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f185:	74 05                	je     c001f18c <Vm::faultHandler(regs*)+0x50b>
c001f187:	83 e8 02             	sub    eax,0x2
c001f18a:	eb 03                	jmp    c001f18f <Vm::faultHandler(regs*)+0x50e>
c001f18c:	83 c0 02             	add    eax,0x2
c001f18f:	25 ff ff 00 00       	and    eax,0xffff
c001f194:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f197:	e9 b1 02 00 00       	jmp    c001f44d <Vm::faultHandler(regs*)+0x7cc>
c001f19c:	83 ec 0c             	sub    esp,0xc
c001f19f:	4b                   	dec    ebx
c001f1a0:	68 0b c5 02 c0       	push   0xc002c50b
c001f1a5:	e8 f2 3b ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001f1aa:	83 c4 10             	add    esp,0x10
c001f1ad:	80 fb 05             	cmp    bl,0x5
c001f1b0:	77 0a                	ja     c001f1bc <Vm::faultHandler(regs*)+0x53b>
c001f1b2:	0f b6 db             	movzx  ebx,bl
c001f1b5:	ff 24 9d 7c c5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3a84]
c001f1bc:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f1c0:	eb 1b                	jmp    c001f1dd <Vm::faultHandler(regs*)+0x55c>
c001f1c2:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f1c6:	eb 15                	jmp    c001f1dd <Vm::faultHandler(regs*)+0x55c>
c001f1c8:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f1cc:	eb 0f                	jmp    c001f1dd <Vm::faultHandler(regs*)+0x55c>
c001f1ce:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f1d2:	eb 09                	jmp    c001f1dd <Vm::faultHandler(regs*)+0x55c>
c001f1d4:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f1d7:	eb 04                	jmp    c001f1dd <Vm::faultHandler(regs*)+0x55c>
c001f1d9:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f1dd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f1e2:	74 0d                	je     c001f1f1 <Vm::faultHandler(regs*)+0x570>
c001f1e4:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f1eb:	0f 87 8b 00 00 00    	ja     c001f27c <Vm::faultHandler(regs*)+0x5fb>
c001f1f1:	53                   	push   ebx
c001f1f2:	53                   	push   ebx
c001f1f3:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f1f7:	52                   	push   edx
c001f1f8:	50                   	push   eax
c001f1f9:	e8 0f fa ff ff       	call   c001ec0d <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f1fe:	5e                   	pop    esi
c001f1ff:	0f b6 c0             	movzx  eax,al
c001f202:	5d                   	pop    ebp
c001f203:	50                   	push   eax
c001f204:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f208:	50                   	push   eax
c001f209:	e8 91 f6 ff ff       	call   c001e89f <Vm::outbv(unsigned short, unsigned char)>
c001f20e:	83 c4 10             	add    esp,0x10
c001f211:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f214:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f218:	74 03                	je     c001f21d <Vm::faultHandler(regs*)+0x59c>
c001f21a:	48                   	dec    eax
c001f21b:	eb 01                	jmp    c001f21e <Vm::faultHandler(regs*)+0x59d>
c001f21d:	40                   	inc    eax
c001f21e:	0f b7 c0             	movzx  eax,ax
c001f221:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f224:	e9 24 02 00 00       	jmp    c001f44d <Vm::faultHandler(regs*)+0x7cc>
c001f229:	83 ec 0c             	sub    esp,0xc
c001f22c:	4b                   	dec    ebx
c001f22d:	68 0b c5 02 c0       	push   0xc002c50b
c001f232:	e8 65 3b ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001f237:	83 c4 10             	add    esp,0x10
c001f23a:	80 fb 05             	cmp    bl,0x5
c001f23d:	77 0a                	ja     c001f249 <Vm::faultHandler(regs*)+0x5c8>
c001f23f:	0f b6 db             	movzx  ebx,bl
c001f242:	ff 24 9d 94 c5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3a6c]
c001f249:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f24d:	eb 1b                	jmp    c001f26a <Vm::faultHandler(regs*)+0x5e9>
c001f24f:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f253:	eb 15                	jmp    c001f26a <Vm::faultHandler(regs*)+0x5e9>
c001f255:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f259:	eb 0f                	jmp    c001f26a <Vm::faultHandler(regs*)+0x5e9>
c001f25b:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f25f:	eb 09                	jmp    c001f26a <Vm::faultHandler(regs*)+0x5e9>
c001f261:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f264:	eb 04                	jmp    c001f26a <Vm::faultHandler(regs*)+0x5e9>
c001f266:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f26a:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f26d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f272:	74 39                	je     c001f2ad <Vm::faultHandler(regs*)+0x62c>
c001f274:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f27a:	76 31                	jbe    c001f2ad <Vm::faultHandler(regs*)+0x62c>
c001f27c:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f280:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f284:	51                   	push   ecx
c001f285:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f289:	51                   	push   ecx
c001f28a:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f28e:	51                   	push   ecx
c001f28f:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f293:	51                   	push   ecx
c001f294:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f298:	52                   	push   edx
c001f299:	50                   	push   eax
c001f29a:	50                   	push   eax
c001f29b:	68 d8 c4 02 c0       	push   0xc002c4d8
c001f2a0:	e8 f7 3a ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001f2a5:	83 c4 20             	add    esp,0x20
c001f2a8:	e9 fb 01 00 00       	jmp    c001f4a8 <Vm::faultHandler(regs*)+0x827>
c001f2ad:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f2b0:	0f b7 d3             	movzx  edx,bx
c001f2b3:	81 e6 00 04 00 00    	and    esi,0x400
c001f2b9:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f2bc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f2c1:	74 1d                	je     c001f2e0 <Vm::faultHandler(regs*)+0x65f>
c001f2c3:	51                   	push   ecx
c001f2c4:	51                   	push   ecx
c001f2c5:	52                   	push   edx
c001f2c6:	50                   	push   eax
c001f2c7:	e8 64 f9 ff ff       	call   c001ec30 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f2cc:	83 c4 10             	add    esp,0x10
c001f2cf:	89 ea                	mov    edx,ebp
c001f2d1:	ef                   	out    dx,eax
c001f2d2:	85 f6                	test   esi,esi
c001f2d4:	74 05                	je     c001f2db <Vm::faultHandler(regs*)+0x65a>
c001f2d6:	83 eb 04             	sub    ebx,0x4
c001f2d9:	eb 21                	jmp    c001f2fc <Vm::faultHandler(regs*)+0x67b>
c001f2db:	83 c3 04             	add    ebx,0x4
c001f2de:	eb 1c                	jmp    c001f2fc <Vm::faultHandler(regs*)+0x67b>
c001f2e0:	51                   	push   ecx
c001f2e1:	51                   	push   ecx
c001f2e2:	52                   	push   edx
c001f2e3:	50                   	push   eax
c001f2e4:	e8 35 f9 ff ff       	call   c001ec1e <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f2e9:	83 c4 10             	add    esp,0x10
c001f2ec:	89 ea                	mov    edx,ebp
c001f2ee:	66 ef                	out    dx,ax
c001f2f0:	85 f6                	test   esi,esi
c001f2f2:	74 05                	je     c001f2f9 <Vm::faultHandler(regs*)+0x678>
c001f2f4:	83 eb 02             	sub    ebx,0x2
c001f2f7:	eb 03                	jmp    c001f2fc <Vm::faultHandler(regs*)+0x67b>
c001f2f9:	83 c3 02             	add    ebx,0x2
c001f2fc:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f302:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f305:	e9 43 01 00 00       	jmp    c001f44d <Vm::faultHandler(regs*)+0x7cc>
c001f30a:	53                   	push   ebx
c001f30b:	53                   	push   ebx
c001f30c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f310:	50                   	push   eax
c001f311:	68 11 c5 02 c0       	push   0xc002c511
c001f316:	e8 81 3a ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001f31b:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f322:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f326:	89 04 24             	mov    DWORD PTR [esp],eax
c001f329:	e8 5e f5 ff ff       	call   c001e88c <Vm::inbv(unsigned short)>
c001f32e:	0f b6 c0             	movzx  eax,al
c001f331:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f334:	eb 5e                	jmp    c001f394 <Vm::faultHandler(regs*)+0x713>
c001f336:	51                   	push   ecx
c001f337:	51                   	push   ecx
c001f338:	53                   	push   ebx
c001f339:	68 17 c5 02 c0       	push   0xc002c517
c001f33e:	e8 59 3a ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001f343:	83 c4 10             	add    esp,0x10
c001f346:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f34b:	74 07                	je     c001f354 <Vm::faultHandler(regs*)+0x6d3>
c001f34d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f351:	ed                   	in     eax,dx
c001f352:	eb 14                	jmp    c001f368 <Vm::faultHandler(regs*)+0x6e7>
c001f354:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f357:	66 31 db             	xor    bx,bx
c001f35a:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f35d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f361:	66 ed                	in     ax,dx
c001f363:	0f b7 c0             	movzx  eax,ax
c001f366:	09 d8                	or     eax,ebx
c001f368:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f36b:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f36f:	e9 dc 00 00 00       	jmp    c001f450 <Vm::faultHandler(regs*)+0x7cf>
c001f374:	50                   	push   eax
c001f375:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f378:	53                   	push   ebx
c001f379:	68 1d c5 02 c0       	push   0xc002c51d
c001f37e:	e8 19 3a ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001f383:	58                   	pop    eax
c001f384:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f388:	5a                   	pop    edx
c001f389:	50                   	push   eax
c001f38a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f38e:	50                   	push   eax
c001f38f:	e8 0b f5 ff ff       	call   c001e89f <Vm::outbv(unsigned short, unsigned char)>
c001f394:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f398:	e9 85 00 00 00       	jmp    c001f422 <Vm::faultHandler(regs*)+0x7a1>
c001f39d:	50                   	push   eax
c001f39e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f3a1:	53                   	push   ebx
c001f3a2:	68 26 c5 02 c0       	push   0xc002c526
c001f3a7:	e8 f0 39 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001f3ac:	83 c4 10             	add    esp,0x10
c001f3af:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f3b3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f3b8:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f3bb:	74 03                	je     c001f3c0 <Vm::faultHandler(regs*)+0x73f>
c001f3bd:	ef                   	out    dx,eax
c001f3be:	eb ab                	jmp    c001f36b <Vm::faultHandler(regs*)+0x6ea>
c001f3c0:	66 ef                	out    dx,ax
c001f3c2:	eb a7                	jmp    c001f36b <Vm::faultHandler(regs*)+0x6ea>
c001f3c4:	55                   	push   ebp
c001f3c5:	55                   	push   ebp
c001f3c6:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f3c9:	68 2f c5 02 c0       	push   0xc002c52f
c001f3ce:	e8 c9 39 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001f3d3:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f3da:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f3de:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3e1:	e8 a6 f4 ff ff       	call   c001e88c <Vm::inbv(unsigned short)>
c001f3e6:	0f b6 c0             	movzx  eax,al
c001f3e9:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f3ec:	eb 31                	jmp    c001f41f <Vm::faultHandler(regs*)+0x79e>
c001f3ee:	56                   	push   esi
c001f3ef:	56                   	push   esi
c001f3f0:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f3f3:	68 35 c5 02 c0       	push   0xc002c535
c001f3f8:	e8 9f 39 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001f3fd:	83 c4 10             	add    esp,0x10
c001f400:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f403:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f408:	74 03                	je     c001f40d <Vm::faultHandler(regs*)+0x78c>
c001f40a:	ed                   	in     eax,dx
c001f40b:	eb 0d                	jmp    c001f41a <Vm::faultHandler(regs*)+0x799>
c001f40d:	66 ed                	in     ax,dx
c001f40f:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f412:	0f b7 c0             	movzx  eax,ax
c001f415:	66 31 d2             	xor    dx,dx
c001f418:	09 d0                	or     eax,edx
c001f41a:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f41d:	eb 2e                	jmp    c001f44d <Vm::faultHandler(regs*)+0x7cc>
c001f41f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f422:	83 c4 10             	add    esp,0x10
c001f425:	eb 29                	jmp    c001f450 <Vm::faultHandler(regs*)+0x7cf>
c001f427:	50                   	push   eax
c001f428:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f42b:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f42e:	68 44 c5 02 c0       	push   0xc002c544
c001f433:	e8 64 39 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001f438:	83 c4 10             	add    esp,0x10
c001f43b:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f43e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f443:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f446:	74 03                	je     c001f44b <Vm::faultHandler(regs*)+0x7ca>
c001f448:	ef                   	out    dx,eax
c001f449:	eb 02                	jmp    c001f44d <Vm::faultHandler(regs*)+0x7cc>
c001f44b:	66 ef                	out    dx,ax
c001f44d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f450:	b0 01                	mov    al,0x1
c001f452:	eb 56                	jmp    c001f4aa <Vm::faultHandler(regs*)+0x829>
c001f454:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f458:	51                   	push   ecx
c001f459:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f45d:	51                   	push   ecx
c001f45e:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f462:	51                   	push   ecx
c001f463:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f467:	51                   	push   ecx
c001f468:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f46c:	52                   	push   edx
c001f46d:	50                   	push   eax
c001f46e:	50                   	push   eax
c001f46f:	68 4d c5 02 c0       	push   0xc002c54d
c001f474:	e8 23 39 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c001f479:	83 c4 20             	add    esp,0x20
c001f47c:	83 ec 0c             	sub    esp,0xc
c001f47f:	6a 60                	push   0x60
c001f481:	e8 06 f4 ff ff       	call   c001e88c <Vm::inbv(unsigned short)>
c001f486:	83 c4 10             	add    esp,0x10
c001f489:	3c 1c                	cmp    al,0x1c
c001f48b:	74 04                	je     c001f491 <Vm::faultHandler(regs*)+0x810>
c001f48d:	3c 5a                	cmp    al,0x5a
c001f48f:	75 eb                	jne    c001f47c <Vm::faultHandler(regs*)+0x7fb>
c001f491:	3c 1c                	cmp    al,0x1c
c001f493:	74 04                	je     c001f499 <Vm::faultHandler(regs*)+0x818>
c001f495:	3c 5a                	cmp    al,0x5a
c001f497:	75 0f                	jne    c001f4a8 <Vm::faultHandler(regs*)+0x827>
c001f499:	83 ec 0c             	sub    esp,0xc
c001f49c:	6a 60                	push   0x60
c001f49e:	e8 e9 f3 ff ff       	call   c001e88c <Vm::inbv(unsigned short)>
c001f4a3:	83 c4 10             	add    esp,0x10
c001f4a6:	eb e9                	jmp    c001f491 <Vm::faultHandler(regs*)+0x810>
c001f4a8:	31 c0                	xor    eax,eax
c001f4aa:	83 c4 1c             	add    esp,0x1c
c001f4ad:	5b                   	pop    ebx
c001f4ae:	5e                   	pop    esi
c001f4af:	5f                   	pop    edi
c001f4b0:	5d                   	pop    ebp
c001f4b1:	c3                   	ret    

c001f4b2 <Vm::x87Save(void*)>:
c001f4b2:	83 ec 10             	sub    esp,0x10
c001f4b5:	6a 48                	push   0x48
c001f4b7:	68 20 18 03 c0       	push   0xc0031820
c001f4bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4c0:	e8 7f 12 fe ff       	call   c0000744 <memcpy>
c001f4c5:	83 c4 1c             	add    esp,0x1c
c001f4c8:	c3                   	ret    

c001f4c9 <Vm::x87Load(void*)>:
c001f4c9:	83 ec 10             	sub    esp,0x10
c001f4cc:	6a 48                	push   0x48
c001f4ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f4d2:	68 20 18 03 c0       	push   0xc0031820
c001f4d7:	e8 68 12 fe ff       	call   c0000744 <memcpy>
c001f4dc:	83 c4 1c             	add    esp,0x1c
c001f4df:	c3                   	ret    

c001f4e0 <Vm::fpuInternalTo32(unsigned long long)>:
c001f4e0:	57                   	push   edi
c001f4e1:	56                   	push   esi
c001f4e2:	53                   	push   ebx
c001f4e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4eb:	89 d6                	mov    esi,edx
c001f4ed:	89 d7                	mov    edi,edx
c001f4ef:	89 c1                	mov    ecx,eax
c001f4f1:	c1 ef 14             	shr    edi,0x14
c001f4f4:	89 d3                	mov    ebx,edx
c001f4f6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f4fc:	31 d2                	xor    edx,edx
c001f4fe:	89 f8                	mov    eax,edi
c001f500:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f506:	bf ff 00 00 00       	mov    edi,0xff
c001f50b:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f510:	83 d2 ff             	adc    edx,0xffffffff
c001f513:	39 c7                	cmp    edi,eax
c001f515:	bf 00 00 00 00       	mov    edi,0x0
c001f51a:	19 d7                	sbb    edi,edx
c001f51c:	72 15                	jb     c001f533 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f51e:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f522:	c1 e0 17             	shl    eax,0x17
c001f525:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f52b:	09 f1                	or     ecx,esi
c001f52d:	09 c1                	or     ecx,eax
c001f52f:	89 cf                	mov    edi,ecx
c001f531:	eb 02                	jmp    c001f535 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f533:	31 ff                	xor    edi,edi
c001f535:	89 f8                	mov    eax,edi
c001f537:	5b                   	pop    ebx
c001f538:	5e                   	pop    esi
c001f539:	5f                   	pop    edi
c001f53a:	c3                   	ret    

c001f53b <Vm::fpuInternalTo64(unsigned long long)>:
c001f53b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f53f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f543:	c3                   	ret    

c001f544 <Vm::fpu32ToInternal(unsigned int)>:
c001f544:	57                   	push   edi
c001f545:	31 ff                	xor    edi,edi
c001f547:	56                   	push   esi
c001f548:	53                   	push   ebx
c001f549:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f54d:	89 cb                	mov    ebx,ecx
c001f54f:	89 ce                	mov    esi,ecx
c001f551:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f557:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f55d:	c1 e9 17             	shr    ecx,0x17
c001f560:	89 f0                	mov    eax,esi
c001f562:	0f b6 d1             	movzx  edx,cl
c001f565:	81 c2 80 03 00 00    	add    edx,0x380
c001f56b:	89 d1                	mov    ecx,edx
c001f56d:	89 fa                	mov    edx,edi
c001f56f:	c1 e1 14             	shl    ecx,0x14
c001f572:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f576:	c1 e0 1d             	shl    eax,0x1d
c001f579:	89 d7                	mov    edi,edx
c001f57b:	89 c6                	mov    esi,eax
c001f57d:	89 ca                	mov    edx,ecx
c001f57f:	89 f0                	mov    eax,esi
c001f581:	09 fa                	or     edx,edi
c001f583:	09 da                	or     edx,ebx
c001f585:	5b                   	pop    ebx
c001f586:	5e                   	pop    esi
c001f587:	5f                   	pop    edi
c001f588:	c3                   	ret    

c001f589 <Vm::fpu64ToInternal(unsigned long long)>:
c001f589:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f58d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f591:	c3                   	ret    

c001f592 <Vm::fpuFloatToLong(unsigned long long)>:
c001f592:	57                   	push   edi
c001f593:	31 c0                	xor    eax,eax
c001f595:	56                   	push   esi
c001f596:	31 d2                	xor    edx,edx
c001f598:	53                   	push   ebx
c001f599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f59d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5a1:	89 d9                	mov    ecx,ebx
c001f5a3:	c1 e9 14             	shr    ecx,0x14
c001f5a6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f5ac:	89 cf                	mov    edi,ecx
c001f5ae:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f5b4:	78 33                	js     c001f5e9 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f5b6:	89 d9                	mov    ecx,ebx
c001f5b8:	89 f0                	mov    eax,esi
c001f5ba:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f5c0:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f5c6:	89 ca                	mov    edx,ecx
c001f5c8:	b9 34 00 00 00       	mov    ecx,0x34
c001f5cd:	29 f9                	sub    ecx,edi
c001f5cf:	0f ad d0             	shrd   eax,edx,cl
c001f5d2:	d3 fa                	sar    edx,cl
c001f5d4:	f6 c1 20             	test   cl,0x20
c001f5d7:	74 05                	je     c001f5de <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f5d9:	89 d0                	mov    eax,edx
c001f5db:	c1 fa 1f             	sar    edx,0x1f
c001f5de:	85 db                	test   ebx,ebx
c001f5e0:	79 07                	jns    c001f5e9 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f5e2:	f7 d8                	neg    eax
c001f5e4:	83 d2 00             	adc    edx,0x0
c001f5e7:	f7 da                	neg    edx
c001f5e9:	5b                   	pop    ebx
c001f5ea:	5e                   	pop    esi
c001f5eb:	5f                   	pop    edi
c001f5ec:	c3                   	ret    

c001f5ed <Vm::fpuULongToFloat(unsigned long long)>:
c001f5ed:	57                   	push   edi
c001f5ee:	31 c9                	xor    ecx,ecx
c001f5f0:	56                   	push   esi
c001f5f1:	53                   	push   ebx
c001f5f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5f6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f5fa:	0f ba e7 14          	bt     edi,0x14
c001f5fe:	72 07                	jb     c001f607 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f600:	01 f6                	add    esi,esi
c001f602:	11 ff                	adc    edi,edi
c001f604:	41                   	inc    ecx
c001f605:	eb f3                	jmp    c001f5fa <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f607:	89 fa                	mov    edx,edi
c001f609:	89 f0                	mov    eax,esi
c001f60b:	bb 33 04 00 00       	mov    ebx,0x433
c001f610:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f616:	29 cb                	sub    ebx,ecx
c001f618:	89 d9                	mov    ecx,ebx
c001f61a:	5b                   	pop    ebx
c001f61b:	c1 e1 14             	shl    ecx,0x14
c001f61e:	5e                   	pop    esi
c001f61f:	09 ca                	or     edx,ecx
c001f621:	5f                   	pop    edi
c001f622:	c3                   	ret    

c001f623 <Vm::fpuLongToFloat(long long)>:
c001f623:	56                   	push   esi
c001f624:	31 c0                	xor    eax,eax
c001f626:	53                   	push   ebx
c001f627:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f62b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f62f:	39 c8                	cmp    eax,ecx
c001f631:	19 d8                	sbb    eax,ebx
c001f633:	7d 04                	jge    c001f639 <Vm::fpuLongToFloat(long long)+0x16>
c001f635:	31 f6                	xor    esi,esi
c001f637:	eb 0c                	jmp    c001f645 <Vm::fpuLongToFloat(long long)+0x22>
c001f639:	f7 d9                	neg    ecx
c001f63b:	be 01 00 00 00       	mov    esi,0x1
c001f640:	83 d3 00             	adc    ebx,0x0
c001f643:	f7 db                	neg    ebx
c001f645:	31 c0                	xor    eax,eax
c001f647:	0f ba e3 14          	bt     ebx,0x14
c001f64b:	72 07                	jb     c001f654 <Vm::fpuLongToFloat(long long)+0x31>
c001f64d:	01 c9                	add    ecx,ecx
c001f64f:	11 db                	adc    ebx,ebx
c001f651:	40                   	inc    eax
c001f652:	eb f3                	jmp    c001f647 <Vm::fpuLongToFloat(long long)+0x24>
c001f654:	ba 33 04 00 00       	mov    edx,0x433
c001f659:	29 c2                	sub    edx,eax
c001f65b:	89 c8                	mov    eax,ecx
c001f65d:	c1 e2 14             	shl    edx,0x14
c001f660:	89 d9                	mov    ecx,ebx
c001f662:	89 f3                	mov    ebx,esi
c001f664:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f66a:	09 ca                	or     edx,ecx
c001f66c:	84 db                	test   bl,bl
c001f66e:	74 06                	je     c001f676 <Vm::fpuLongToFloat(long long)+0x53>
c001f670:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f676:	5b                   	pop    ebx
c001f677:	5e                   	pop    esi
c001f678:	c3                   	ret    

c001f679 <Vm::fpuGet0()>:
c001f679:	31 c0                	xor    eax,eax
c001f67b:	31 d2                	xor    edx,edx
c001f67d:	c3                   	ret    

c001f67e <Vm::fpuGet1()>:
c001f67e:	b8 01 00 00 00       	mov    eax,0x1
c001f683:	31 d2                	xor    edx,edx
c001f685:	c3                   	ret    

c001f686 <Vm::fpuGetPi()>:
c001f686:	b8 03 00 00 00       	mov    eax,0x3
c001f68b:	31 d2                	xor    edx,edx
c001f68d:	c3                   	ret    

c001f68e <Vm::fpuGetLog2E()>:
c001f68e:	83 ec 18             	sub    esp,0x18
c001f691:	68 ac c5 02 c0       	push   0xc002c5ac
c001f696:	e8 dc ad ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001f69b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6a0:	31 d2                	xor    edx,edx
c001f6a2:	83 c4 1c             	add    esp,0x1c
c001f6a5:	c3                   	ret    

c001f6a6 <Vm::fpuGetLogE2()>:
c001f6a6:	83 ec 18             	sub    esp,0x18
c001f6a9:	68 b8 c5 02 c0       	push   0xc002c5b8
c001f6ae:	e8 c4 ad ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001f6b3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6b8:	31 d2                	xor    edx,edx
c001f6ba:	83 c4 1c             	add    esp,0x1c
c001f6bd:	c3                   	ret    

c001f6be <Vm::fpuGetLog210()>:
c001f6be:	83 ec 18             	sub    esp,0x18
c001f6c1:	68 c4 c5 02 c0       	push   0xc002c5c4
c001f6c6:	e8 ac ad ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001f6cb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6d0:	31 d2                	xor    edx,edx
c001f6d2:	83 c4 1c             	add    esp,0x1c
c001f6d5:	c3                   	ret    

c001f6d6 <Vm::fpuGetLog102()>:
c001f6d6:	83 ec 18             	sub    esp,0x18
c001f6d9:	68 d1 c5 02 c0       	push   0xc002c5d1
c001f6de:	e8 94 ad ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001f6e3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6e8:	31 d2                	xor    edx,edx
c001f6ea:	83 c4 1c             	add    esp,0x1c
c001f6ed:	c3                   	ret    

c001f6ee <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f6ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6f2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f6f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6fa:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f6fe:	0f 92 c0             	setb   al
c001f701:	c3                   	ret    

c001f702 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f702:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f70a:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f70e:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f712:	09 c2                	or     edx,eax
c001f714:	0f 94 c0             	sete   al
c001f717:	c3                   	ret    

c001f718 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f718:	57                   	push   edi
c001f719:	56                   	push   esi
c001f71a:	53                   	push   ebx
c001f71b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f71f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f723:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f727:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f72b:	57                   	push   edi
c001f72c:	56                   	push   esi
c001f72d:	53                   	push   ebx
c001f72e:	51                   	push   ecx
c001f72f:	e8 ce ff ff ff       	call   c001f702 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f734:	83 c4 10             	add    esp,0x10
c001f737:	88 c2                	mov    dl,al
c001f739:	31 c0                	xor    eax,eax
c001f73b:	84 d2                	test   dl,dl
c001f73d:	75 0c                	jne    c001f74b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f73f:	57                   	push   edi
c001f740:	56                   	push   esi
c001f741:	53                   	push   ebx
c001f742:	51                   	push   ecx
c001f743:	e8 a6 ff ff ff       	call   c001f6ee <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f748:	83 c4 10             	add    esp,0x10
c001f74b:	83 e0 01             	and    eax,0x1
c001f74e:	5b                   	pop    ebx
c001f74f:	88 c1                	mov    cl,al
c001f751:	83 e2 01             	and    edx,0x1
c001f754:	a0 21 18 03 c0       	mov    al,ds:0xc0031821
c001f759:	c1 e2 06             	shl    edx,0x6
c001f75c:	83 e0 ba             	and    eax,0xffffffba
c001f75f:	5e                   	pop    esi
c001f760:	09 c8                	or     eax,ecx
c001f762:	5f                   	pop    edi
c001f763:	09 d0                	or     eax,edx
c001f765:	a2 21 18 03 c0       	mov    ds:0xc0031821,al
c001f76a:	c3                   	ret    

c001f76b <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f76b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f76f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f773:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f777:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f77b:	c3                   	ret    

c001f77c <Vm::fpuAbs(unsigned long long)>:
c001f77c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f780:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f784:	c3                   	ret    

c001f785 <Vm::fpuChs(unsigned long long)>:
c001f785:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f789:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f78d:	f7 d8                	neg    eax
c001f78f:	83 d2 00             	adc    edx,0x0
c001f792:	f7 da                	neg    edx
c001f794:	c3                   	ret    

c001f795 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f795:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f799:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f79e:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f7a2:	eb c7                	jmp    c001f76b <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f7a4 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f7a4:	53                   	push   ebx
c001f7a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f7ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7b1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7b5:	0f af ca             	imul   ecx,edx
c001f7b8:	0f af d8             	imul   ebx,eax
c001f7bb:	f7 e2                	mul    edx
c001f7bd:	01 d9                	add    ecx,ebx
c001f7bf:	5b                   	pop    ebx
c001f7c0:	01 ca                	add    edx,ecx
c001f7c2:	c3                   	ret    

c001f7c3 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f7c3:	83 ec 0c             	sub    esp,0xc
c001f7c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7d6:	e8 a1 70 00 00       	call   c002687c <__udivdi3>
c001f7db:	83 c4 1c             	add    esp,0x1c
c001f7de:	c3                   	ret    

c001f7df <Vm::fpuSquare(unsigned long long)>:
c001f7df:	50                   	push   eax
c001f7e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f7e8:	52                   	push   edx
c001f7e9:	50                   	push   eax
c001f7ea:	52                   	push   edx
c001f7eb:	50                   	push   eax
c001f7ec:	e8 b3 ff ff ff       	call   c001f7a4 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7f1:	83 c4 14             	add    esp,0x14
c001f7f4:	c3                   	ret    

c001f7f5 <Vm::fpuGetReg(int)>:
c001f7f5:	83 ec 0c             	sub    esp,0xc
c001f7f8:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f7fd:	76 10                	jbe    c001f80f <Vm::fpuGetReg(int)+0x1a>
c001f7ff:	83 ec 0c             	sub    esp,0xc
c001f802:	68 de c5 02 c0       	push   0xc002c5de
c001f807:	e8 6b ac ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001f80c:	83 c4 10             	add    esp,0x10
c001f80f:	a0 21 18 03 c0       	mov    al,ds:0xc0031821
c001f814:	b9 08 00 00 00       	mov    ecx,0x8
c001f819:	c0 e8 03             	shr    al,0x3
c001f81c:	83 e0 07             	and    eax,0x7
c001f81f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f823:	99                   	cdq    
c001f824:	f7 f9                	idiv   ecx
c001f826:	8b 04 d5 24 18 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce7dc]
c001f82d:	8b 14 d5 28 18 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce7d8]
c001f834:	83 c4 0c             	add    esp,0xc
c001f837:	c3                   	ret    

c001f838 <Vm::fpuSetReg(int, unsigned long long)>:
c001f838:	57                   	push   edi
c001f839:	56                   	push   esi
c001f83a:	52                   	push   edx
c001f83b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f83f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f843:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f848:	76 10                	jbe    c001f85a <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f84a:	83 ec 0c             	sub    esp,0xc
c001f84d:	68 f1 c5 02 c0       	push   0xc002c5f1
c001f852:	e8 20 ac ff ff       	call   c001a477 <Krnl::panic(char const*)>
c001f857:	83 c4 10             	add    esp,0x10
c001f85a:	a0 21 18 03 c0       	mov    al,ds:0xc0031821
c001f85f:	b9 08 00 00 00       	mov    ecx,0x8
c001f864:	c0 e8 03             	shr    al,0x3
c001f867:	83 e0 07             	and    eax,0x7
c001f86a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f86e:	99                   	cdq    
c001f86f:	f7 f9                	idiv   ecx
c001f871:	89 34 d5 24 18 03 c0 	mov    DWORD PTR [edx*8-0x3ffce7dc],esi
c001f878:	89 3c d5 28 18 03 c0 	mov    DWORD PTR [edx*8-0x3ffce7d8],edi
c001f87f:	58                   	pop    eax
c001f880:	5e                   	pop    esi
c001f881:	5f                   	pop    edi
c001f882:	c3                   	ret    

c001f883 <Vm::fpuPush(unsigned long long)>:
c001f883:	a0 21 18 03 c0       	mov    al,ds:0xc0031821
c001f888:	c0 e8 03             	shr    al,0x3
c001f88b:	83 e0 07             	and    eax,0x7
c001f88e:	83 c0 07             	add    eax,0x7
c001f891:	88 c2                	mov    dl,al
c001f893:	83 e0 07             	and    eax,0x7
c001f896:	83 e2 07             	and    edx,0x7
c001f899:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f8a0:	8a 15 21 18 03 c0    	mov    dl,BYTE PTR ds:0xc0031821
c001f8a6:	83 e2 c7             	and    edx,0xffffffc7
c001f8a9:	09 ca                	or     edx,ecx
c001f8ab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8af:	88 15 21 18 03 c0    	mov    BYTE PTR ds:0xc0031821,dl
c001f8b5:	89 0c c5 28 18 03 c0 	mov    DWORD PTR [eax*8-0x3ffce7d8],ecx
c001f8bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f8c0:	89 14 c5 24 18 03 c0 	mov    DWORD PTR [eax*8-0x3ffce7dc],edx
c001f8c7:	a1 64 18 03 c0       	mov    eax,ds:0xc0031864
c001f8cc:	83 f8 08             	cmp    eax,0x8
c001f8cf:	75 08                	jne    c001f8d9 <Vm::fpuPush(unsigned long long)+0x56>
c001f8d1:	80 0d 20 18 03 c0 40 	or     BYTE PTR ds:0xc0031820,0x40
c001f8d8:	c3                   	ret    
c001f8d9:	40                   	inc    eax
c001f8da:	a3 64 18 03 c0       	mov    ds:0xc0031864,eax
c001f8df:	c3                   	ret    

c001f8e0 <Vm::fpuPop()>:
c001f8e0:	8a 0d 21 18 03 c0    	mov    cl,BYTE PTR ds:0xc0031821
c001f8e6:	53                   	push   ebx
c001f8e7:	c0 e9 03             	shr    cl,0x3
c001f8ea:	8a 1d 21 18 03 c0    	mov    bl,BYTE PTR ds:0xc0031821
c001f8f0:	83 e1 07             	and    ecx,0x7
c001f8f3:	83 e3 c7             	and    ebx,0xffffffc7
c001f8f6:	8b 04 cd 24 18 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce7dc]
c001f8fd:	8b 14 cd 28 18 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce7d8]
c001f904:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f90b:	83 e1 38             	and    ecx,0x38
c001f90e:	09 d9                	or     ecx,ebx
c001f910:	88 0d 21 18 03 c0    	mov    BYTE PTR ds:0xc0031821,cl
c001f916:	8b 0d 64 18 03 c0    	mov    ecx,DWORD PTR ds:0xc0031864
c001f91c:	85 c9                	test   ecx,ecx
c001f91e:	74 09                	je     c001f929 <Vm::fpuPop()+0x49>
c001f920:	49                   	dec    ecx
c001f921:	89 0d 64 18 03 c0    	mov    DWORD PTR ds:0xc0031864,ecx
c001f927:	eb 07                	jmp    c001f930 <Vm::fpuPop()+0x50>
c001f929:	80 0d 20 18 03 c0 40 	or     BYTE PTR ds:0xc0031820,0x40
c001f930:	5b                   	pop    ebx
c001f931:	c3                   	ret    

c001f932 <Vm::x87Handler(regs*)>:
c001f932:	55                   	push   ebp
c001f933:	57                   	push   edi
c001f934:	56                   	push   esi
c001f935:	53                   	push   ebx
c001f936:	83 ec 1c             	sub    esp,0x1c
c001f939:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f93d:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f942:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f945:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f94d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f951:	50                   	push   eax
c001f952:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f956:	50                   	push   eax
c001f957:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f95b:	50                   	push   eax
c001f95c:	53                   	push   ebx
c001f95d:	e8 dc a1 ff ff       	call   c0019b3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f962:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f965:	83 c4 10             	add    esp,0x10
c001f968:	89 c6                	mov    esi,eax
c001f96a:	80 fa d9             	cmp    dl,0xd9
c001f96d:	0f 85 52 01 00 00    	jne    c001fac5 <Vm::x87Handler(regs*)+0x193>
c001f973:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f977:	8d 50 20             	lea    edx,[eax+0x20]
c001f97a:	80 fa 0e             	cmp    dl,0xe
c001f97d:	0f 87 86 00 00 00    	ja     c001fa09 <Vm::x87Handler(regs*)+0xd7>
c001f983:	0f b6 d2             	movzx  edx,dl
c001f986:	ff 24 95 04 c6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd39fc]
c001f98d:	e8 e7 fc ff ff       	call   c001f679 <Vm::fpuGet0()>
c001f992:	eb 05                	jmp    c001f999 <Vm::x87Handler(regs*)+0x67>
c001f994:	e8 e5 fc ff ff       	call   c001f67e <Vm::fpuGet1()>
c001f999:	57                   	push   edi
c001f99a:	57                   	push   edi
c001f99b:	52                   	push   edx
c001f99c:	50                   	push   eax
c001f99d:	e8 e1 fe ff ff       	call   c001f883 <Vm::fpuPush(unsigned long long)>
c001f9a2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9a6:	83 c4 10             	add    esp,0x10
c001f9a9:	b0 01                	mov    al,0x1
c001f9ab:	e9 e3 09 00 00       	jmp    c0020393 <Vm::x87Handler(regs*)+0xa61>
c001f9b0:	83 ec 0c             	sub    esp,0xc
c001f9b3:	6a 00                	push   0x0
c001f9b5:	e8 3b fe ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001f9ba:	59                   	pop    ecx
c001f9bb:	5e                   	pop    esi
c001f9bc:	52                   	push   edx
c001f9bd:	50                   	push   eax
c001f9be:	e8 c2 fd ff ff       	call   c001f785 <Vm::fpuChs(unsigned long long)>
c001f9c3:	eb 13                	jmp    c001f9d8 <Vm::x87Handler(regs*)+0xa6>
c001f9c5:	83 ec 0c             	sub    esp,0xc
c001f9c8:	6a 00                	push   0x0
c001f9ca:	e8 26 fe ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001f9cf:	5f                   	pop    edi
c001f9d0:	5d                   	pop    ebp
c001f9d1:	52                   	push   edx
c001f9d2:	50                   	push   eax
c001f9d3:	e8 a4 fd ff ff       	call   c001f77c <Vm::fpuAbs(unsigned long long)>
c001f9d8:	83 c4 0c             	add    esp,0xc
c001f9db:	52                   	push   edx
c001f9dc:	50                   	push   eax
c001f9dd:	6a 00                	push   0x0
c001f9df:	e8 54 fe ff ff       	call   c001f838 <Vm::fpuSetReg(int, unsigned long long)>
c001f9e4:	eb bc                	jmp    c001f9a2 <Vm::x87Handler(regs*)+0x70>
c001f9e6:	e8 d3 fc ff ff       	call   c001f6be <Vm::fpuGetLog210()>
c001f9eb:	eb ac                	jmp    c001f999 <Vm::x87Handler(regs*)+0x67>
c001f9ed:	e8 9c fc ff ff       	call   c001f68e <Vm::fpuGetLog2E()>
c001f9f2:	eb a5                	jmp    c001f999 <Vm::x87Handler(regs*)+0x67>
c001f9f4:	e8 8d fc ff ff       	call   c001f686 <Vm::fpuGetPi()>
c001f9f9:	eb 9e                	jmp    c001f999 <Vm::x87Handler(regs*)+0x67>
c001f9fb:	e8 d6 fc ff ff       	call   c001f6d6 <Vm::fpuGetLog102()>
c001fa00:	eb 97                	jmp    c001f999 <Vm::x87Handler(regs*)+0x67>
c001fa02:	e8 9f fc ff ff       	call   c001f6a6 <Vm::fpuGetLogE2()>
c001fa07:	eb 90                	jmp    c001f999 <Vm::x87Handler(regs*)+0x67>
c001fa09:	8d 50 40             	lea    edx,[eax+0x40]
c001fa0c:	80 fa 07             	cmp    dl,0x7
c001fa0f:	77 15                	ja     c001fa26 <Vm::x87Handler(regs*)+0xf4>
c001fa11:	83 ec 0c             	sub    esp,0xc
c001fa14:	2d c0 00 00 00       	sub    eax,0xc0
c001fa19:	50                   	push   eax
c001fa1a:	e8 d6 fd ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fa1f:	59                   	pop    ecx
c001fa20:	5e                   	pop    esi
c001fa21:	e9 75 ff ff ff       	jmp    c001f99b <Vm::x87Handler(regs*)+0x69>
c001fa26:	8d 50 38             	lea    edx,[eax+0x38]
c001fa29:	80 fa 07             	cmp    dl,0x7
c001fa2c:	77 3c                	ja     c001fa6a <Vm::x87Handler(regs*)+0x138>
c001fa2e:	83 ec 0c             	sub    esp,0xc
c001fa31:	2d c8 00 00 00       	sub    eax,0xc8
c001fa36:	50                   	push   eax
c001fa37:	e8 b9 fd ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fa3c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa43:	89 c6                	mov    esi,eax
c001fa45:	89 d7                	mov    edi,edx
c001fa47:	e8 a9 fd ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fa4c:	83 c4 0c             	add    esp,0xc
c001fa4f:	52                   	push   edx
c001fa50:	50                   	push   eax
c001fa51:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa55:	2d c8 00 00 00       	sub    eax,0xc8
c001fa5a:	50                   	push   eax
c001fa5b:	e8 d8 fd ff ff       	call   c001f838 <Vm::fpuSetReg(int, unsigned long long)>
c001fa60:	83 c4 0c             	add    esp,0xc
c001fa63:	57                   	push   edi
c001fa64:	56                   	push   esi
c001fa65:	e9 73 ff ff ff       	jmp    c001f9dd <Vm::x87Handler(regs*)+0xab>
c001fa6a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa6e:	84 d2                	test   dl,dl
c001fa70:	75 0f                	jne    c001fa81 <Vm::x87Handler(regs*)+0x14f>
c001fa72:	83 ec 0c             	sub    esp,0xc
c001fa75:	ff 36                	push   DWORD PTR [esi]
c001fa77:	e8 c8 fa ff ff       	call   c001f544 <Vm::fpu32ToInternal(unsigned int)>
c001fa7c:	e9 bf 00 00 00       	jmp    c001fb40 <Vm::x87Handler(regs*)+0x20e>
c001fa81:	80 fa 03             	cmp    dl,0x3
c001fa84:	75 13                	jne    c001fa99 <Vm::x87Handler(regs*)+0x167>
c001fa86:	e8 55 fe ff ff       	call   c001f8e0 <Vm::fpuPop()>
c001fa8b:	55                   	push   ebp
c001fa8c:	55                   	push   ebp
c001fa8d:	52                   	push   edx
c001fa8e:	50                   	push   eax
c001fa8f:	e8 4c fa ff ff       	call   c001f4e0 <Vm::fpuInternalTo32(unsigned long long)>
c001fa94:	e9 88 00 00 00       	jmp    c001fb21 <Vm::x87Handler(regs*)+0x1ef>
c001fa99:	80 fa 05             	cmp    dl,0x5
c001fa9c:	75 0e                	jne    c001faac <Vm::x87Handler(regs*)+0x17a>
c001fa9e:	66 8b 06             	mov    ax,WORD PTR [esi]
c001faa1:	66 a3 22 18 03 c0    	mov    ds:0xc0031822,ax
c001faa7:	e9 df 00 00 00       	jmp    c001fb8b <Vm::x87Handler(regs*)+0x259>
c001faac:	31 c0                	xor    eax,eax
c001faae:	80 fa 07             	cmp    dl,0x7
c001fab1:	0f 85 dc 08 00 00    	jne    c0020393 <Vm::x87Handler(regs*)+0xa61>
c001fab7:	66 a1 22 18 03 c0    	mov    ax,ds:0xc0031822
c001fabd:	66 89 06             	mov    WORD PTR [esi],ax
c001fac0:	e9 c6 00 00 00       	jmp    c001fb8b <Vm::x87Handler(regs*)+0x259>
c001fac5:	80 fa d8             	cmp    dl,0xd8
c001fac8:	0f 84 c9 00 00 00    	je     c001fb97 <Vm::x87Handler(regs*)+0x265>
c001face:	80 fa dc             	cmp    dl,0xdc
c001fad1:	0f 84 0d 02 00 00    	je     c001fce4 <Vm::x87Handler(regs*)+0x3b2>
c001fad7:	80 fa de             	cmp    dl,0xde
c001fada:	0f 84 cd 02 00 00    	je     c001fdad <Vm::x87Handler(regs*)+0x47b>
c001fae0:	80 fa dd             	cmp    dl,0xdd
c001fae3:	0f 84 5f 04 00 00    	je     c001ff48 <Vm::x87Handler(regs*)+0x616>
c001fae9:	80 fa da             	cmp    dl,0xda
c001faec:	0f 84 24 05 00 00    	je     c0020016 <Vm::x87Handler(regs*)+0x6e4>
c001faf2:	80 fa df             	cmp    dl,0xdf
c001faf5:	0f 84 68 05 00 00    	je     c0020063 <Vm::x87Handler(regs*)+0x731>
c001fafb:	31 c0                	xor    eax,eax
c001fafd:	80 fa db             	cmp    dl,0xdb
c001fb00:	0f 85 8d 08 00 00    	jne    c0020393 <Vm::x87Handler(regs*)+0xa61>
c001fb06:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb0a:	80 fa 03             	cmp    dl,0x3
c001fb0d:	0f 85 70 06 00 00    	jne    c0020183 <Vm::x87Handler(regs*)+0x851>
c001fb13:	e8 c8 fd ff ff       	call   c001f8e0 <Vm::fpuPop()>
c001fb18:	55                   	push   ebp
c001fb19:	55                   	push   ebp
c001fb1a:	52                   	push   edx
c001fb1b:	50                   	push   eax
c001fb1c:	e8 71 fa ff ff       	call   c001f592 <Vm::fpuFloatToLong(unsigned long long)>
c001fb21:	83 c4 10             	add    esp,0x10
c001fb24:	89 06                	mov    DWORD PTR [esi],eax
c001fb26:	eb 63                	jmp    c001fb8b <Vm::x87Handler(regs*)+0x259>
c001fb28:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb2c:	84 d2                	test   dl,dl
c001fb2e:	0f 85 e6 05 00 00    	jne    c002011a <Vm::x87Handler(regs*)+0x7e8>
c001fb34:	57                   	push   edi
c001fb35:	57                   	push   edi
c001fb36:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb39:	ff 36                	push   DWORD PTR [esi]
c001fb3b:	e8 49 fa ff ff       	call   c001f589 <Vm::fpu64ToInternal(unsigned long long)>
c001fb40:	5e                   	pop    esi
c001fb41:	5f                   	pop    edi
c001fb42:	52                   	push   edx
c001fb43:	50                   	push   eax
c001fb44:	e8 3a fd ff ff       	call   c001f883 <Vm::fpuPush(unsigned long long)>
c001fb49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fb4d:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb50:	e9 51 fe ff ff       	jmp    c001f9a6 <Vm::x87Handler(regs*)+0x74>
c001fb55:	80 fa 03             	cmp    dl,0x3
c001fb58:	0f 85 d7 06 00 00    	jne    c0020235 <Vm::x87Handler(regs*)+0x903>
c001fb5e:	57                   	push   edi
c001fb5f:	57                   	push   edi
c001fb60:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb63:	ff 36                	push   DWORD PTR [esi]
c001fb65:	e8 1f fa ff ff       	call   c001f589 <Vm::fpu64ToInternal(unsigned long long)>
c001fb6a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb71:	89 c6                	mov    esi,eax
c001fb73:	89 d7                	mov    edi,edx
c001fb75:	e8 7b fc ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fb7a:	57                   	push   edi
c001fb7b:	56                   	push   esi
c001fb7c:	52                   	push   edx
c001fb7d:	50                   	push   eax
c001fb7e:	e8 95 fb ff ff       	call   c001f718 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb83:	83 c4 20             	add    esp,0x20
c001fb86:	e8 55 fd ff ff       	call   c001f8e0 <Vm::fpuPop()>
c001fb8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb8f:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb92:	e9 12 fe ff ff       	jmp    c001f9a9 <Vm::x87Handler(regs*)+0x77>
c001fb97:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb9b:	8d 50 40             	lea    edx,[eax+0x40]
c001fb9e:	80 fa 07             	cmp    dl,0x7
c001fba1:	77 29                	ja     c001fbcc <Vm::x87Handler(regs*)+0x29a>
c001fba3:	83 ec 0c             	sub    esp,0xc
c001fba6:	2d c0 00 00 00       	sub    eax,0xc0
c001fbab:	50                   	push   eax
c001fbac:	e8 44 fc ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fbb1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbb8:	89 c6                	mov    esi,eax
c001fbba:	89 d7                	mov    edi,edx
c001fbbc:	e8 34 fc ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fbc1:	57                   	push   edi
c001fbc2:	56                   	push   esi
c001fbc3:	52                   	push   edx
c001fbc4:	50                   	push   eax
c001fbc5:	e8 a1 fb ff ff       	call   c001f76b <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fbca:	eb 2f                	jmp    c001fbfb <Vm::x87Handler(regs*)+0x2c9>
c001fbcc:	8d 50 38             	lea    edx,[eax+0x38]
c001fbcf:	80 fa 07             	cmp    dl,0x7
c001fbd2:	77 2f                	ja     c001fc03 <Vm::x87Handler(regs*)+0x2d1>
c001fbd4:	83 ec 0c             	sub    esp,0xc
c001fbd7:	2d c8 00 00 00       	sub    eax,0xc8
c001fbdc:	50                   	push   eax
c001fbdd:	e8 13 fc ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fbe2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbe9:	89 c6                	mov    esi,eax
c001fbeb:	89 d7                	mov    edi,edx
c001fbed:	e8 03 fc ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fbf2:	57                   	push   edi
c001fbf3:	56                   	push   esi
c001fbf4:	52                   	push   edx
c001fbf5:	50                   	push   eax
c001fbf6:	e8 a9 fb ff ff       	call   c001f7a4 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fbfb:	83 c4 1c             	add    esp,0x1c
c001fbfe:	e9 d8 fd ff ff       	jmp    c001f9db <Vm::x87Handler(regs*)+0xa9>
c001fc03:	8d 50 30             	lea    edx,[eax+0x30]
c001fc06:	80 fa 07             	cmp    dl,0x7
c001fc09:	77 0d                	ja     c001fc18 <Vm::x87Handler(regs*)+0x2e6>
c001fc0b:	83 ec 0c             	sub    esp,0xc
c001fc0e:	2d d0 00 00 00       	sub    eax,0xd0
c001fc13:	e9 99 03 00 00       	jmp    c001ffb1 <Vm::x87Handler(regs*)+0x67f>
c001fc18:	8d 50 28             	lea    edx,[eax+0x28]
c001fc1b:	80 fa 07             	cmp    dl,0x7
c001fc1e:	77 0d                	ja     c001fc2d <Vm::x87Handler(regs*)+0x2fb>
c001fc20:	83 ec 0c             	sub    esp,0xc
c001fc23:	2d d8 00 00 00       	sub    eax,0xd8
c001fc28:	e9 c0 03 00 00       	jmp    c001ffed <Vm::x87Handler(regs*)+0x6bb>
c001fc2d:	8d 50 20             	lea    edx,[eax+0x20]
c001fc30:	80 fa 07             	cmp    dl,0x7
c001fc33:	77 1b                	ja     c001fc50 <Vm::x87Handler(regs*)+0x31e>
c001fc35:	83 ec 0c             	sub    esp,0xc
c001fc38:	2d e0 00 00 00       	sub    eax,0xe0
c001fc3d:	50                   	push   eax
c001fc3e:	e8 b2 fb ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fc43:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc4a:	89 c6                	mov    esi,eax
c001fc4c:	89 d7                	mov    edi,edx
c001fc4e:	eb 22                	jmp    c001fc72 <Vm::x87Handler(regs*)+0x340>
c001fc50:	8d 50 18             	lea    edx,[eax+0x18]
c001fc53:	80 fa 07             	cmp    dl,0x7
c001fc56:	77 2d                	ja     c001fc85 <Vm::x87Handler(regs*)+0x353>
c001fc58:	83 ec 0c             	sub    esp,0xc
c001fc5b:	6a 00                	push   0x0
c001fc5d:	e8 93 fb ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fc62:	89 c6                	mov    esi,eax
c001fc64:	89 d7                	mov    edi,edx
c001fc66:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc6a:	2d e8 00 00 00       	sub    eax,0xe8
c001fc6f:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc72:	e8 7e fb ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fc77:	57                   	push   edi
c001fc78:	56                   	push   esi
c001fc79:	52                   	push   edx
c001fc7a:	50                   	push   eax
c001fc7b:	e8 15 fb ff ff       	call   c001f795 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc80:	e9 76 ff ff ff       	jmp    c001fbfb <Vm::x87Handler(regs*)+0x2c9>
c001fc85:	8d 50 10             	lea    edx,[eax+0x10]
c001fc88:	80 fa 07             	cmp    dl,0x7
c001fc8b:	77 1b                	ja     c001fca8 <Vm::x87Handler(regs*)+0x376>
c001fc8d:	83 ec 0c             	sub    esp,0xc
c001fc90:	2d f0 00 00 00       	sub    eax,0xf0
c001fc95:	50                   	push   eax
c001fc96:	e8 5a fb ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fc9b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fca2:	89 c6                	mov    esi,eax
c001fca4:	89 d7                	mov    edi,edx
c001fca6:	eb 22                	jmp    c001fcca <Vm::x87Handler(regs*)+0x398>
c001fca8:	3c f7                	cmp    al,0xf7
c001fcaa:	0f 86 d1 03 00 00    	jbe    c0020081 <Vm::x87Handler(regs*)+0x74f>
c001fcb0:	83 ec 0c             	sub    esp,0xc
c001fcb3:	6a 00                	push   0x0
c001fcb5:	e8 3b fb ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fcba:	89 c6                	mov    esi,eax
c001fcbc:	89 d7                	mov    edi,edx
c001fcbe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcc2:	2d f8 00 00 00       	sub    eax,0xf8
c001fcc7:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcca:	e8 26 fb ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fccf:	57                   	push   edi
c001fcd0:	56                   	push   esi
c001fcd1:	52                   	push   edx
c001fcd2:	50                   	push   eax
c001fcd3:	e8 eb fa ff ff       	call   c001f7c3 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fcd8:	83 c4 1c             	add    esp,0x1c
c001fcdb:	52                   	push   edx
c001fcdc:	50                   	push   eax
c001fcdd:	6a 00                	push   0x0
c001fcdf:	e9 51 02 00 00       	jmp    c001ff35 <Vm::x87Handler(regs*)+0x603>
c001fce4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fce8:	8d 50 40             	lea    edx,[eax+0x40]
c001fceb:	80 fa 07             	cmp    dl,0x7
c001fcee:	77 37                	ja     c001fd27 <Vm::x87Handler(regs*)+0x3f5>
c001fcf0:	83 ec 0c             	sub    esp,0xc
c001fcf3:	2d c0 00 00 00       	sub    eax,0xc0
c001fcf8:	50                   	push   eax
c001fcf9:	e8 f7 fa ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fcfe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd05:	89 c6                	mov    esi,eax
c001fd07:	89 d7                	mov    edi,edx
c001fd09:	e8 e7 fa ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fd0e:	57                   	push   edi
c001fd0f:	56                   	push   esi
c001fd10:	52                   	push   edx
c001fd11:	50                   	push   eax
c001fd12:	e8 54 fa ff ff       	call   c001f76b <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd17:	83 c4 1c             	add    esp,0x1c
c001fd1a:	52                   	push   edx
c001fd1b:	50                   	push   eax
c001fd1c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd20:	2d c0 00 00 00       	sub    eax,0xc0
c001fd25:	eb 3d                	jmp    c001fd64 <Vm::x87Handler(regs*)+0x432>
c001fd27:	8d 50 38             	lea    edx,[eax+0x38]
c001fd2a:	80 fa 07             	cmp    dl,0x7
c001fd2d:	77 3b                	ja     c001fd6a <Vm::x87Handler(regs*)+0x438>
c001fd2f:	83 ec 0c             	sub    esp,0xc
c001fd32:	2d c8 00 00 00       	sub    eax,0xc8
c001fd37:	50                   	push   eax
c001fd38:	e8 b8 fa ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fd3d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd44:	89 c6                	mov    esi,eax
c001fd46:	89 d7                	mov    edi,edx
c001fd48:	e8 a8 fa ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fd4d:	57                   	push   edi
c001fd4e:	56                   	push   esi
c001fd4f:	52                   	push   edx
c001fd50:	50                   	push   eax
c001fd51:	e8 4e fa ff ff       	call   c001f7a4 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd56:	83 c4 1c             	add    esp,0x1c
c001fd59:	52                   	push   edx
c001fd5a:	50                   	push   eax
c001fd5b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd5f:	2d c8 00 00 00       	sub    eax,0xc8
c001fd64:	50                   	push   eax
c001fd65:	e9 75 fc ff ff       	jmp    c001f9df <Vm::x87Handler(regs*)+0xad>
c001fd6a:	83 c0 18             	add    eax,0x18
c001fd6d:	3c 07                	cmp    al,0x7
c001fd6f:	0f 87 3b 04 00 00    	ja     c00201b0 <Vm::x87Handler(regs*)+0x87e>
c001fd75:	83 ec 0c             	sub    esp,0xc
c001fd78:	6a 00                	push   0x0
c001fd7a:	e8 76 fa ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fd7f:	89 c6                	mov    esi,eax
c001fd81:	89 d7                	mov    edi,edx
c001fd83:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd87:	2d e8 00 00 00       	sub    eax,0xe8
c001fd8c:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd8f:	e8 61 fa ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fd94:	57                   	push   edi
c001fd95:	56                   	push   esi
c001fd96:	52                   	push   edx
c001fd97:	50                   	push   eax
c001fd98:	e8 f8 f9 ff ff       	call   c001f795 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd9d:	83 c4 1c             	add    esp,0x1c
c001fda0:	52                   	push   edx
c001fda1:	50                   	push   eax
c001fda2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fda6:	2d e8 00 00 00       	sub    eax,0xe8
c001fdab:	eb b7                	jmp    c001fd64 <Vm::x87Handler(regs*)+0x432>
c001fdad:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdb1:	8d 50 40             	lea    edx,[eax+0x40]
c001fdb4:	80 fa 07             	cmp    dl,0x7
c001fdb7:	77 3a                	ja     c001fdf3 <Vm::x87Handler(regs*)+0x4c1>
c001fdb9:	83 ec 0c             	sub    esp,0xc
c001fdbc:	2d c0 00 00 00       	sub    eax,0xc0
c001fdc1:	50                   	push   eax
c001fdc2:	e8 2e fa ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fdc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdce:	89 c6                	mov    esi,eax
c001fdd0:	89 d7                	mov    edi,edx
c001fdd2:	e8 1e fa ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fdd7:	57                   	push   edi
c001fdd8:	56                   	push   esi
c001fdd9:	52                   	push   edx
c001fdda:	50                   	push   eax
c001fddb:	e8 8b f9 ff ff       	call   c001f76b <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fde0:	83 c4 1c             	add    esp,0x1c
c001fde3:	52                   	push   edx
c001fde4:	50                   	push   eax
c001fde5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fde9:	2d c0 00 00 00       	sub    eax,0xc0
c001fdee:	e9 9e 01 00 00       	jmp    c001ff91 <Vm::x87Handler(regs*)+0x65f>
c001fdf3:	8d 50 20             	lea    edx,[eax+0x20]
c001fdf6:	80 fa 07             	cmp    dl,0x7
c001fdf9:	77 3a                	ja     c001fe35 <Vm::x87Handler(regs*)+0x503>
c001fdfb:	83 ec 0c             	sub    esp,0xc
c001fdfe:	2d e0 00 00 00       	sub    eax,0xe0
c001fe03:	50                   	push   eax
c001fe04:	e8 ec f9 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fe09:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe10:	89 c6                	mov    esi,eax
c001fe12:	89 d7                	mov    edi,edx
c001fe14:	e8 dc f9 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fe19:	57                   	push   edi
c001fe1a:	56                   	push   esi
c001fe1b:	52                   	push   edx
c001fe1c:	50                   	push   eax
c001fe1d:	e8 73 f9 ff ff       	call   c001f795 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe22:	83 c4 1c             	add    esp,0x1c
c001fe25:	52                   	push   edx
c001fe26:	50                   	push   eax
c001fe27:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe2b:	2d e0 00 00 00       	sub    eax,0xe0
c001fe30:	e9 5c 01 00 00       	jmp    c001ff91 <Vm::x87Handler(regs*)+0x65f>
c001fe35:	8d 50 18             	lea    edx,[eax+0x18]
c001fe38:	80 fa 07             	cmp    dl,0x7
c001fe3b:	77 3b                	ja     c001fe78 <Vm::x87Handler(regs*)+0x546>
c001fe3d:	83 ec 0c             	sub    esp,0xc
c001fe40:	6a 00                	push   0x0
c001fe42:	e8 ae f9 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fe47:	89 c6                	mov    esi,eax
c001fe49:	89 d7                	mov    edi,edx
c001fe4b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe4f:	2d e8 00 00 00       	sub    eax,0xe8
c001fe54:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe57:	e8 99 f9 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fe5c:	57                   	push   edi
c001fe5d:	56                   	push   esi
c001fe5e:	52                   	push   edx
c001fe5f:	50                   	push   eax
c001fe60:	e8 30 f9 ff ff       	call   c001f795 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe65:	83 c4 1c             	add    esp,0x1c
c001fe68:	52                   	push   edx
c001fe69:	50                   	push   eax
c001fe6a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe6e:	2d e8 00 00 00       	sub    eax,0xe8
c001fe73:	e9 19 01 00 00       	jmp    c001ff91 <Vm::x87Handler(regs*)+0x65f>
c001fe78:	8d 50 38             	lea    edx,[eax+0x38]
c001fe7b:	80 fa 07             	cmp    dl,0x7
c001fe7e:	77 37                	ja     c001feb7 <Vm::x87Handler(regs*)+0x585>
c001fe80:	83 ec 0c             	sub    esp,0xc
c001fe83:	2d c8 00 00 00       	sub    eax,0xc8
c001fe88:	50                   	push   eax
c001fe89:	e8 67 f9 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fe8e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe95:	89 c6                	mov    esi,eax
c001fe97:	89 d7                	mov    edi,edx
c001fe99:	e8 57 f9 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fe9e:	57                   	push   edi
c001fe9f:	56                   	push   esi
c001fea0:	52                   	push   edx
c001fea1:	50                   	push   eax
c001fea2:	e8 fd f8 ff ff       	call   c001f7a4 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fea7:	83 c4 1c             	add    esp,0x1c
c001feaa:	52                   	push   edx
c001feab:	50                   	push   eax
c001feac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feb0:	2d c8 00 00 00       	sub    eax,0xc8
c001feb5:	eb 7d                	jmp    c001ff34 <Vm::x87Handler(regs*)+0x602>
c001feb7:	3c f7                	cmp    al,0xf7
c001feb9:	76 38                	jbe    c001fef3 <Vm::x87Handler(regs*)+0x5c1>
c001febb:	83 ec 0c             	sub    esp,0xc
c001febe:	6a 00                	push   0x0
c001fec0:	e8 30 f9 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fec5:	89 c6                	mov    esi,eax
c001fec7:	89 d7                	mov    edi,edx
c001fec9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fecd:	2d f8 00 00 00       	sub    eax,0xf8
c001fed2:	89 04 24             	mov    DWORD PTR [esp],eax
c001fed5:	e8 1b f9 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001feda:	57                   	push   edi
c001fedb:	56                   	push   esi
c001fedc:	52                   	push   edx
c001fedd:	50                   	push   eax
c001fede:	e8 e0 f8 ff ff       	call   c001f7c3 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fee3:	83 c4 1c             	add    esp,0x1c
c001fee6:	52                   	push   edx
c001fee7:	50                   	push   eax
c001fee8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feec:	2d f8 00 00 00       	sub    eax,0xf8
c001fef1:	eb 41                	jmp    c001ff34 <Vm::x87Handler(regs*)+0x602>
c001fef3:	8d 50 10             	lea    edx,[eax+0x10]
c001fef6:	80 fa 07             	cmp    dl,0x7
c001fef9:	0f 87 5a 01 00 00    	ja     c0020059 <Vm::x87Handler(regs*)+0x727>
c001feff:	83 ec 0c             	sub    esp,0xc
c001ff02:	2d f0 00 00 00       	sub    eax,0xf0
c001ff07:	50                   	push   eax
c001ff08:	e8 e8 f8 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001ff0d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff14:	89 c6                	mov    esi,eax
c001ff16:	89 d7                	mov    edi,edx
c001ff18:	e8 d8 f8 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001ff1d:	57                   	push   edi
c001ff1e:	56                   	push   esi
c001ff1f:	52                   	push   edx
c001ff20:	50                   	push   eax
c001ff21:	e8 9d f8 ff ff       	call   c001f7c3 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff26:	83 c4 1c             	add    esp,0x1c
c001ff29:	52                   	push   edx
c001ff2a:	50                   	push   eax
c001ff2b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff2f:	2d f0 00 00 00       	sub    eax,0xf0
c001ff34:	50                   	push   eax
c001ff35:	e8 fe f8 ff ff       	call   c001f838 <Vm::fpuSetReg(int, unsigned long long)>
c001ff3a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ff3e:	e8 9d f9 ff ff       	call   c001f8e0 <Vm::fpuPop()>
c001ff43:	e9 5e fa ff ff       	jmp    c001f9a6 <Vm::x87Handler(regs*)+0x74>
c001ff48:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff4c:	8d 50 30             	lea    edx,[eax+0x30]
c001ff4f:	80 fa 07             	cmp    dl,0x7
c001ff52:	77 1d                	ja     c001ff71 <Vm::x87Handler(regs*)+0x63f>
c001ff54:	83 ec 0c             	sub    esp,0xc
c001ff57:	6a 00                	push   0x0
c001ff59:	e8 97 f8 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001ff5e:	83 c4 0c             	add    esp,0xc
c001ff61:	52                   	push   edx
c001ff62:	50                   	push   eax
c001ff63:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff67:	2d d0 00 00 00       	sub    eax,0xd0
c001ff6c:	e9 f3 fd ff ff       	jmp    c001fd64 <Vm::x87Handler(regs*)+0x432>
c001ff71:	8d 50 28             	lea    edx,[eax+0x28]
c001ff74:	80 fa 07             	cmp    dl,0x7
c001ff77:	77 28                	ja     c001ffa1 <Vm::x87Handler(regs*)+0x66f>
c001ff79:	83 ec 0c             	sub    esp,0xc
c001ff7c:	6a 00                	push   0x0
c001ff7e:	e8 72 f8 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001ff83:	83 c4 0c             	add    esp,0xc
c001ff86:	52                   	push   edx
c001ff87:	50                   	push   eax
c001ff88:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff8c:	2d d8 00 00 00       	sub    eax,0xd8
c001ff91:	50                   	push   eax
c001ff92:	e8 a1 f8 ff ff       	call   c001f838 <Vm::fpuSetReg(int, unsigned long long)>
c001ff97:	e8 44 f9 ff ff       	call   c001f8e0 <Vm::fpuPop()>
c001ff9c:	e9 01 fa ff ff       	jmp    c001f9a2 <Vm::x87Handler(regs*)+0x70>
c001ffa1:	8d 50 20             	lea    edx,[eax+0x20]
c001ffa4:	80 fa 07             	cmp    dl,0x7
c001ffa7:	77 30                	ja     c001ffd9 <Vm::x87Handler(regs*)+0x6a7>
c001ffa9:	83 ec 0c             	sub    esp,0xc
c001ffac:	2d e0 00 00 00       	sub    eax,0xe0
c001ffb1:	50                   	push   eax
c001ffb2:	e8 3e f8 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001ffb7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffbe:	89 c6                	mov    esi,eax
c001ffc0:	89 d7                	mov    edi,edx
c001ffc2:	e8 2e f8 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001ffc7:	57                   	push   edi
c001ffc8:	56                   	push   esi
c001ffc9:	52                   	push   edx
c001ffca:	50                   	push   eax
c001ffcb:	e8 48 f7 ff ff       	call   c001f718 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ffd0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ffd4:	e9 54 02 00 00       	jmp    c002022d <Vm::x87Handler(regs*)+0x8fb>
c001ffd9:	8d 50 18             	lea    edx,[eax+0x18]
c001ffdc:	80 fa 07             	cmp    dl,0x7
c001ffdf:	0f 87 43 fb ff ff    	ja     c001fb28 <Vm::x87Handler(regs*)+0x1f6>
c001ffe5:	83 ec 0c             	sub    esp,0xc
c001ffe8:	2d e8 00 00 00       	sub    eax,0xe8
c001ffed:	50                   	push   eax
c001ffee:	e8 02 f8 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c001fff3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fffa:	89 c6                	mov    esi,eax
c001fffc:	89 d7                	mov    edi,edx
c001fffe:	e8 f2 f7 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c0020003:	57                   	push   edi
c0020004:	56                   	push   esi
c0020005:	52                   	push   edx
c0020006:	50                   	push   eax
c0020007:	e8 0c f7 ff ff       	call   c001f718 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002000c:	83 c4 20             	add    esp,0x20
c002000f:	e8 cc f8 ff ff       	call   c001f8e0 <Vm::fpuPop()>
c0020014:	eb 62                	jmp    c0020078 <Vm::x87Handler(regs*)+0x746>
c0020016:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c002001a:	0f 85 0f 01 00 00    	jne    c002012f <Vm::x87Handler(regs*)+0x7fd>
c0020020:	83 ec 0c             	sub    esp,0xc
c0020023:	6a 01                	push   0x1
c0020025:	e8 cb f7 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c002002a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020031:	89 c6                	mov    esi,eax
c0020033:	89 d7                	mov    edi,edx
c0020035:	e8 bb f7 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c002003a:	57                   	push   edi
c002003b:	56                   	push   esi
c002003c:	52                   	push   edx
c002003d:	50                   	push   eax
c002003e:	e8 d5 f6 ff ff       	call   c001f718 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020043:	83 c4 20             	add    esp,0x20
c0020046:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002004a:	e8 91 f8 ff ff       	call   c001f8e0 <Vm::fpuPop()>
c002004f:	e8 8c f8 ff ff       	call   c001f8e0 <Vm::fpuPop()>
c0020054:	e9 50 f9 ff ff       	jmp    c001f9a9 <Vm::x87Handler(regs*)+0x77>
c0020059:	3c d9                	cmp    al,0xd9
c002005b:	0f 85 b5 02 00 00    	jne    c0020316 <Vm::x87Handler(regs*)+0x9e4>
c0020061:	eb bd                	jmp    c0020020 <Vm::x87Handler(regs*)+0x6ee>
c0020063:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020067:	0f 85 ea 02 00 00    	jne    c0020357 <Vm::x87Handler(regs*)+0xa25>
c002006d:	0f b7 05 20 18 03 c0 	movzx  eax,WORD PTR ds:0xc0031820
c0020074:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020078:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002007c:	e9 28 f9 ff ff       	jmp    c001f9a9 <Vm::x87Handler(regs*)+0x77>
c0020081:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020085:	84 d2                	test   dl,dl
c0020087:	75 0f                	jne    c0020098 <Vm::x87Handler(regs*)+0x766>
c0020089:	83 ec 0c             	sub    esp,0xc
c002008c:	ff 36                	push   DWORD PTR [esi]
c002008e:	e8 b1 f4 ff ff       	call   c001f544 <Vm::fpu32ToInternal(unsigned int)>
c0020093:	e9 2c 01 00 00       	jmp    c00201c4 <Vm::x87Handler(regs*)+0x892>
c0020098:	80 fa 01             	cmp    dl,0x1
c002009b:	75 0f                	jne    c00200ac <Vm::x87Handler(regs*)+0x77a>
c002009d:	83 ec 0c             	sub    esp,0xc
c00200a0:	ff 36                	push   DWORD PTR [esi]
c00200a2:	e8 9d f4 ff ff       	call   c001f544 <Vm::fpu32ToInternal(unsigned int)>
c00200a7:	e9 81 02 00 00       	jmp    c002032d <Vm::x87Handler(regs*)+0x9fb>
c00200ac:	80 fa 04             	cmp    dl,0x4
c00200af:	75 0f                	jne    c00200c0 <Vm::x87Handler(regs*)+0x78e>
c00200b1:	83 ec 0c             	sub    esp,0xc
c00200b4:	ff 36                	push   DWORD PTR [esi]
c00200b6:	e8 89 f4 ff ff       	call   c001f544 <Vm::fpu32ToInternal(unsigned int)>
c00200bb:	e9 86 01 00 00       	jmp    c0020246 <Vm::x87Handler(regs*)+0x914>
c00200c0:	80 fa 05             	cmp    dl,0x5
c00200c3:	75 1b                	jne    c00200e0 <Vm::x87Handler(regs*)+0x7ae>
c00200c5:	83 ec 0c             	sub    esp,0xc
c00200c8:	6a 00                	push   0x0
c00200ca:	e8 26 f7 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c00200cf:	89 c7                	mov    edi,eax
c00200d1:	89 d5                	mov    ebp,edx
c00200d3:	58                   	pop    eax
c00200d4:	ff 36                	push   DWORD PTR [esi]
c00200d6:	e8 69 f4 ff ff       	call   c001f544 <Vm::fpu32ToInternal(unsigned int)>
c00200db:	e9 a3 01 00 00       	jmp    c0020283 <Vm::x87Handler(regs*)+0x951>
c00200e0:	80 fa 06             	cmp    dl,0x6
c00200e3:	75 0f                	jne    c00200f4 <Vm::x87Handler(regs*)+0x7c2>
c00200e5:	83 ec 0c             	sub    esp,0xc
c00200e8:	ff 36                	push   DWORD PTR [esi]
c00200ea:	e8 55 f4 ff ff       	call   c001f544 <Vm::fpu32ToInternal(unsigned int)>
c00200ef:	e9 ae 01 00 00       	jmp    c00202a2 <Vm::x87Handler(regs*)+0x970>
c00200f4:	31 c0                	xor    eax,eax
c00200f6:	80 fa 07             	cmp    dl,0x7
c00200f9:	0f 85 94 02 00 00    	jne    c0020393 <Vm::x87Handler(regs*)+0xa61>
c00200ff:	83 ec 0c             	sub    esp,0xc
c0020102:	6a 00                	push   0x0
c0020104:	e8 ec f6 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c0020109:	89 c7                	mov    edi,eax
c002010b:	89 d5                	mov    ebp,edx
c002010d:	58                   	pop    eax
c002010e:	ff 36                	push   DWORD PTR [esi]
c0020110:	e8 2f f4 ff ff       	call   c001f544 <Vm::fpu32ToInternal(unsigned int)>
c0020115:	e9 cb 01 00 00       	jmp    c00202e5 <Vm::x87Handler(regs*)+0x9b3>
c002011a:	80 fa 03             	cmp    dl,0x3
c002011d:	0f 85 d3 01 00 00    	jne    c00202f6 <Vm::x87Handler(regs*)+0x9c4>
c0020123:	e8 b8 f7 ff ff       	call   c001f8e0 <Vm::fpuPop()>
c0020128:	51                   	push   ecx
c0020129:	51                   	push   ecx
c002012a:	e9 de 01 00 00       	jmp    c002030d <Vm::x87Handler(regs*)+0x9db>
c002012f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020133:	80 fa 01             	cmp    dl,0x1
c0020136:	75 09                	jne    c0020141 <Vm::x87Handler(regs*)+0x80f>
c0020138:	57                   	push   edi
c0020139:	57                   	push   edi
c002013a:	8b 06                	mov    eax,DWORD PTR [esi]
c002013c:	e9 e3 01 00 00       	jmp    c0020324 <Vm::x87Handler(regs*)+0x9f2>
c0020141:	80 fa 04             	cmp    dl,0x4
c0020144:	75 12                	jne    c0020158 <Vm::x87Handler(regs*)+0x826>
c0020146:	31 d2                	xor    edx,edx
c0020148:	51                   	push   ecx
c0020149:	51                   	push   ecx
c002014a:	8b 06                	mov    eax,DWORD PTR [esi]
c002014c:	52                   	push   edx
c002014d:	50                   	push   eax
c002014e:	e8 d0 f4 ff ff       	call   c001f623 <Vm::fpuLongToFloat(long long)>
c0020153:	e9 ee 00 00 00       	jmp    c0020246 <Vm::x87Handler(regs*)+0x914>
c0020158:	31 c0                	xor    eax,eax
c002015a:	80 fa 07             	cmp    dl,0x7
c002015d:	0f 85 30 02 00 00    	jne    c0020393 <Vm::x87Handler(regs*)+0xa61>
c0020163:	83 ec 0c             	sub    esp,0xc
c0020166:	6a 00                	push   0x0
c0020168:	e8 88 f6 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c002016d:	89 c7                	mov    edi,eax
c002016f:	89 d5                	mov    ebp,edx
c0020171:	58                   	pop    eax
c0020172:	8b 06                	mov    eax,DWORD PTR [esi]
c0020174:	5a                   	pop    edx
c0020175:	31 d2                	xor    edx,edx
c0020177:	52                   	push   edx
c0020178:	50                   	push   eax
c0020179:	e8 a5 f4 ff ff       	call   c001f623 <Vm::fpuLongToFloat(long long)>
c002017e:	e9 62 01 00 00       	jmp    c00202e5 <Vm::x87Handler(regs*)+0x9b3>
c0020183:	84 d2                	test   dl,dl
c0020185:	75 0d                	jne    c0020194 <Vm::x87Handler(regs*)+0x862>
c0020187:	31 d2                	xor    edx,edx
c0020189:	55                   	push   ebp
c002018a:	55                   	push   ebp
c002018b:	8b 06                	mov    eax,DWORD PTR [esi]
c002018d:	52                   	push   edx
c002018e:	50                   	push   eax
c002018f:	e9 d3 01 00 00       	jmp    c0020367 <Vm::x87Handler(regs*)+0xa35>
c0020194:	31 c0                	xor    eax,eax
c0020196:	80 fa 02             	cmp    dl,0x2
c0020199:	0f 85 f4 01 00 00    	jne    c0020393 <Vm::x87Handler(regs*)+0xa61>
c002019f:	83 ec 0c             	sub    esp,0xc
c00201a2:	6a 00                	push   0x0
c00201a4:	e8 4c f6 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c00201a9:	59                   	pop    ecx
c00201aa:	5f                   	pop    edi
c00201ab:	e9 6a f9 ff ff       	jmp    c001fb1a <Vm::x87Handler(regs*)+0x1e8>
c00201b0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201b4:	84 d2                	test   dl,dl
c00201b6:	75 2a                	jne    c00201e2 <Vm::x87Handler(regs*)+0x8b0>
c00201b8:	50                   	push   eax
c00201b9:	50                   	push   eax
c00201ba:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201bd:	ff 36                	push   DWORD PTR [esi]
c00201bf:	e8 c5 f3 ff ff       	call   c001f589 <Vm::fpu64ToInternal(unsigned long long)>
c00201c4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201cb:	89 c6                	mov    esi,eax
c00201cd:	89 d7                	mov    edi,edx
c00201cf:	e8 21 f6 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c00201d4:	57                   	push   edi
c00201d5:	56                   	push   esi
c00201d6:	52                   	push   edx
c00201d7:	50                   	push   eax
c00201d8:	e8 8e f5 ff ff       	call   c001f76b <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00201dd:	e9 64 01 00 00       	jmp    c0020346 <Vm::x87Handler(regs*)+0xa14>
c00201e2:	80 fa 01             	cmp    dl,0x1
c00201e5:	75 11                	jne    c00201f8 <Vm::x87Handler(regs*)+0x8c6>
c00201e7:	50                   	push   eax
c00201e8:	50                   	push   eax
c00201e9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201ec:	ff 36                	push   DWORD PTR [esi]
c00201ee:	e8 96 f3 ff ff       	call   c001f589 <Vm::fpu64ToInternal(unsigned long long)>
c00201f3:	e9 35 01 00 00       	jmp    c002032d <Vm::x87Handler(regs*)+0x9fb>
c00201f8:	80 fa 02             	cmp    dl,0x2
c00201fb:	0f 85 54 f9 ff ff    	jne    c001fb55 <Vm::x87Handler(regs*)+0x223>
c0020201:	55                   	push   ebp
c0020202:	55                   	push   ebp
c0020203:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020206:	ff 36                	push   DWORD PTR [esi]
c0020208:	e8 7c f3 ff ff       	call   c001f589 <Vm::fpu64ToInternal(unsigned long long)>
c002020d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020214:	89 c6                	mov    esi,eax
c0020216:	89 d7                	mov    edi,edx
c0020218:	e8 d8 f5 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c002021d:	57                   	push   edi
c002021e:	56                   	push   esi
c002021f:	52                   	push   edx
c0020220:	50                   	push   eax
c0020221:	e8 f2 f4 ff ff       	call   c001f718 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020226:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002022a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002022d:	83 c4 20             	add    esp,0x20
c0020230:	e9 74 f7 ff ff       	jmp    c001f9a9 <Vm::x87Handler(regs*)+0x77>
c0020235:	80 fa 04             	cmp    dl,0x4
c0020238:	75 2a                	jne    c0020264 <Vm::x87Handler(regs*)+0x932>
c002023a:	51                   	push   ecx
c002023b:	51                   	push   ecx
c002023c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002023f:	ff 36                	push   DWORD PTR [esi]
c0020241:	e8 43 f3 ff ff       	call   c001f589 <Vm::fpu64ToInternal(unsigned long long)>
c0020246:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002024d:	89 c6                	mov    esi,eax
c002024f:	89 d7                	mov    edi,edx
c0020251:	e8 9f f5 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c0020256:	57                   	push   edi
c0020257:	56                   	push   esi
c0020258:	52                   	push   edx
c0020259:	50                   	push   eax
c002025a:	e8 36 f5 ff ff       	call   c001f795 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002025f:	e9 e2 00 00 00       	jmp    c0020346 <Vm::x87Handler(regs*)+0xa14>
c0020264:	80 fa 05             	cmp    dl,0x5
c0020267:	75 28                	jne    c0020291 <Vm::x87Handler(regs*)+0x95f>
c0020269:	83 ec 0c             	sub    esp,0xc
c002026c:	6a 00                	push   0x0
c002026e:	e8 82 f5 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c0020273:	89 c7                	mov    edi,eax
c0020275:	89 d5                	mov    ebp,edx
c0020277:	58                   	pop    eax
c0020278:	5a                   	pop    edx
c0020279:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002027c:	ff 36                	push   DWORD PTR [esi]
c002027e:	e8 06 f3 ff ff       	call   c001f589 <Vm::fpu64ToInternal(unsigned long long)>
c0020283:	83 c4 10             	add    esp,0x10
c0020286:	55                   	push   ebp
c0020287:	57                   	push   edi
c0020288:	52                   	push   edx
c0020289:	50                   	push   eax
c002028a:	e8 06 f5 ff ff       	call   c001f795 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002028f:	eb 60                	jmp    c00202f1 <Vm::x87Handler(regs*)+0x9bf>
c0020291:	80 fa 06             	cmp    dl,0x6
c0020294:	75 2a                	jne    c00202c0 <Vm::x87Handler(regs*)+0x98e>
c0020296:	51                   	push   ecx
c0020297:	51                   	push   ecx
c0020298:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002029b:	ff 36                	push   DWORD PTR [esi]
c002029d:	e8 e7 f2 ff ff       	call   c001f589 <Vm::fpu64ToInternal(unsigned long long)>
c00202a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202a9:	89 c6                	mov    esi,eax
c00202ab:	89 d7                	mov    edi,edx
c00202ad:	e8 43 f5 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c00202b2:	57                   	push   edi
c00202b3:	56                   	push   esi
c00202b4:	52                   	push   edx
c00202b5:	50                   	push   eax
c00202b6:	e8 08 f5 ff ff       	call   c001f7c3 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00202bb:	e9 86 00 00 00       	jmp    c0020346 <Vm::x87Handler(regs*)+0xa14>
c00202c0:	31 c0                	xor    eax,eax
c00202c2:	80 fa 07             	cmp    dl,0x7
c00202c5:	0f 85 c8 00 00 00    	jne    c0020393 <Vm::x87Handler(regs*)+0xa61>
c00202cb:	83 ec 0c             	sub    esp,0xc
c00202ce:	6a 00                	push   0x0
c00202d0:	e8 20 f5 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c00202d5:	89 c7                	mov    edi,eax
c00202d7:	89 d5                	mov    ebp,edx
c00202d9:	58                   	pop    eax
c00202da:	5a                   	pop    edx
c00202db:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202de:	ff 36                	push   DWORD PTR [esi]
c00202e0:	e8 a4 f2 ff ff       	call   c001f589 <Vm::fpu64ToInternal(unsigned long long)>
c00202e5:	83 c4 10             	add    esp,0x10
c00202e8:	55                   	push   ebp
c00202e9:	57                   	push   edi
c00202ea:	52                   	push   edx
c00202eb:	50                   	push   eax
c00202ec:	e8 d2 f4 ff ff       	call   c001f7c3 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00202f1:	83 c4 0c             	add    esp,0xc
c00202f4:	eb 53                	jmp    c0020349 <Vm::x87Handler(regs*)+0xa17>
c00202f6:	31 c0                	xor    eax,eax
c00202f8:	80 fa 02             	cmp    dl,0x2
c00202fb:	0f 85 92 00 00 00    	jne    c0020393 <Vm::x87Handler(regs*)+0xa61>
c0020301:	83 ec 0c             	sub    esp,0xc
c0020304:	6a 00                	push   0x0
c0020306:	e8 ea f4 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c002030b:	59                   	pop    ecx
c002030c:	5f                   	pop    edi
c002030d:	52                   	push   edx
c002030e:	50                   	push   eax
c002030f:	e8 27 f2 ff ff       	call   c001f53b <Vm::fpuInternalTo64(unsigned long long)>
c0020314:	eb 70                	jmp    c0020386 <Vm::x87Handler(regs*)+0xa54>
c0020316:	31 c0                	xor    eax,eax
c0020318:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c002031d:	75 74                	jne    c0020393 <Vm::x87Handler(regs*)+0xa61>
c002031f:	50                   	push   eax
c0020320:	50                   	push   eax
c0020321:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020324:	31 d2                	xor    edx,edx
c0020326:	52                   	push   edx
c0020327:	50                   	push   eax
c0020328:	e8 f6 f2 ff ff       	call   c001f623 <Vm::fpuLongToFloat(long long)>
c002032d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020334:	89 c6                	mov    esi,eax
c0020336:	89 d7                	mov    edi,edx
c0020338:	e8 b8 f4 ff ff       	call   c001f7f5 <Vm::fpuGetReg(int)>
c002033d:	57                   	push   edi
c002033e:	56                   	push   esi
c002033f:	52                   	push   edx
c0020340:	50                   	push   eax
c0020341:	e8 5e f4 ff ff       	call   c001f7a4 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020346:	83 c4 1c             	add    esp,0x1c
c0020349:	52                   	push   edx
c002034a:	50                   	push   eax
c002034b:	6a 00                	push   0x0
c002034d:	e8 e6 f4 ff ff       	call   c001f838 <Vm::fpuSetReg(int, unsigned long long)>
c0020352:	e9 f2 f7 ff ff       	jmp    c001fb49 <Vm::x87Handler(regs*)+0x217>
c0020357:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002035b:	80 fa 05             	cmp    dl,0x5
c002035e:	75 11                	jne    c0020371 <Vm::x87Handler(regs*)+0xa3f>
c0020360:	55                   	push   ebp
c0020361:	55                   	push   ebp
c0020362:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020365:	ff 36                	push   DWORD PTR [esi]
c0020367:	e8 81 f2 ff ff       	call   c001f5ed <Vm::fpuULongToFloat(unsigned long long)>
c002036c:	e9 cf f7 ff ff       	jmp    c001fb40 <Vm::x87Handler(regs*)+0x20e>
c0020371:	31 c0                	xor    eax,eax
c0020373:	80 fa 07             	cmp    dl,0x7
c0020376:	75 1b                	jne    c0020393 <Vm::x87Handler(regs*)+0xa61>
c0020378:	e8 63 f5 ff ff       	call   c001f8e0 <Vm::fpuPop()>
c002037d:	51                   	push   ecx
c002037e:	51                   	push   ecx
c002037f:	52                   	push   edx
c0020380:	50                   	push   eax
c0020381:	e8 0c f2 ff ff       	call   c001f592 <Vm::fpuFloatToLong(unsigned long long)>
c0020386:	83 c4 10             	add    esp,0x10
c0020389:	89 06                	mov    DWORD PTR [esi],eax
c002038b:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c002038e:	e9 f8 f7 ff ff       	jmp    c001fb8b <Vm::x87Handler(regs*)+0x259>
c0020393:	83 c4 1c             	add    esp,0x1c
c0020396:	5b                   	pop    ebx
c0020397:	5e                   	pop    esi
c0020398:	5f                   	pop    edi
c0020399:	5d                   	pop    ebp
c002039a:	c3                   	ret    

c002039b <__static_initialization_and_destruction_0(int, int)>:
c002039b:	83 ec 0c             	sub    esp,0xc
c002039e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00203a3:	75 1a                	jne    c00203bf <__static_initialization_and_destruction_0(int, int)+0x24>
c00203a5:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00203ad:	75 10                	jne    c00203bf <__static_initialization_and_destruction_0(int, int)+0x24>
c00203af:	83 ec 0c             	sub    esp,0xc
c00203b2:	68 20 18 03 c0       	push   0xc0031820
c00203b7:	e8 14 88 00 00       	call   c0028bd0 <Vm::_FPUState::_FPUState()>
c00203bc:	83 c4 10             	add    esp,0x10
c00203bf:	90                   	nop
c00203c0:	83 c4 0c             	add    esp,0xc
c00203c3:	c3                   	ret    

c00203c4 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00203c4:	83 ec 0c             	sub    esp,0xc
c00203c7:	83 ec 08             	sub    esp,0x8
c00203ca:	68 ff ff 00 00       	push   0xffff
c00203cf:	6a 01                	push   0x1
c00203d1:	e8 c5 ff ff ff       	call   c002039b <__static_initialization_and_destruction_0(int, int)>
c00203d6:	83 c4 10             	add    esp,0x10
c00203d9:	83 c4 0c             	add    esp,0xc
c00203dc:	c3                   	ret    
c00203dd:	90                   	nop

c00203de <FAT::getName()>:
c00203de:	b8 40 c6 02 c0       	mov    eax,0xc002c640
c00203e3:	c3                   	ret    

c00203e4 <FAT::tell(void*, unsigned long long*)>:
c00203e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00203e9:	75 06                	jne    c00203f1 <FAT::tell(void*, unsigned long long*)+0xd>
c00203eb:	b8 04 00 00 00       	mov    eax,0x4
c00203f0:	c3                   	ret    
c00203f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00203f6:	75 06                	jne    c00203fe <FAT::tell(void*, unsigned long long*)+0x1a>
c00203f8:	b8 04 00 00 00       	mov    eax,0x4
c00203fd:	c3                   	ret    
c00203fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020402:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020405:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020408:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002040c:	89 01                	mov    DWORD PTR [ecx],eax
c002040e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020411:	b8 00 00 00 00       	mov    eax,0x0
c0020416:	c3                   	ret    
c0020417:	90                   	nop

c0020418 <FAT::stat(void*, unsigned long long*)>:
c0020418:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002041d:	75 06                	jne    c0020425 <FAT::stat(void*, unsigned long long*)+0xd>
c002041f:	b8 04 00 00 00       	mov    eax,0x4
c0020424:	c3                   	ret    
c0020425:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002042a:	75 06                	jne    c0020432 <FAT::stat(void*, unsigned long long*)+0x1a>
c002042c:	b8 04 00 00 00       	mov    eax,0x4
c0020431:	c3                   	ret    
c0020432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020436:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020439:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002043c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020440:	89 01                	mov    DWORD PTR [ecx],eax
c0020442:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020445:	b8 00 00 00 00       	mov    eax,0x0
c002044a:	c3                   	ret    
c002044b:	90                   	nop

c002044c <FAT::~FAT()>:
c002044c:	83 ec 0c             	sub    esp,0xc
c002044f:	ba c4 c6 02 c0       	mov    edx,0xc002c6c4
c0020454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020458:	89 10                	mov    DWORD PTR [eax],edx
c002045a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002045e:	83 ec 0c             	sub    esp,0xc
c0020461:	50                   	push   eax
c0020462:	e8 5d 2c ff ff       	call   c00130c4 <Filesystem::~Filesystem()>
c0020467:	83 c4 10             	add    esp,0x10
c002046a:	90                   	nop
c002046b:	83 c4 0c             	add    esp,0xc
c002046e:	c3                   	ret    
c002046f:	90                   	nop

c0020470 <FAT::~FAT()>:
c0020470:	83 ec 0c             	sub    esp,0xc
c0020473:	83 ec 0c             	sub    esp,0xc
c0020476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002047a:	e8 cd ff ff ff       	call   c002044c <FAT::~FAT()>
c002047f:	83 c4 10             	add    esp,0x10
c0020482:	83 ec 08             	sub    esp,0x8
c0020485:	6a 08                	push   0x8
c0020487:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002048b:	e8 2c 28 ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0020490:	83 c4 10             	add    esp,0x10
c0020493:	83 c4 0c             	add    esp,0xc
c0020496:	c3                   	ret    
c0020497:	90                   	nop

c0020498 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020498:	83 ec 1c             	sub    esp,0x1c
c002049b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00204a2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00204a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204ab:	8b 04 85 a0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce760]
c00204b2:	83 f8 ff             	cmp    eax,0xffffffff
c00204b5:	75 34                	jne    c00204eb <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00204b7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00204bb:	88 c2                	mov    dl,al
c00204bd:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c00204c2:	01 d0                	add    eax,edx
c00204c4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00204c8:	8b 15 80 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031880
c00204ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204d2:	89 14 85 a0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce760],edx
c00204d9:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c00204de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00204e2:	89 14 85 20 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6e0],edx
c00204e9:	eb 17                	jmp    c0020502 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00204eb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00204ef:	88 c2                	mov    dl,al
c00204f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204f5:	8b 04 85 a0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce760]
c00204fc:	01 d0                	add    eax,edx
c00204fe:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020502:	83 ec 04             	sub    esp,0x4
c0020505:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020509:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002050d:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020511:	50                   	push   eax
c0020512:	e8 21 68 fe ff       	call   c0006d38 <f_getlabel>
c0020517:	83 c4 10             	add    esp,0x10
c002051a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002051e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020523:	75 07                	jne    c002052c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020525:	b8 00 00 00 00       	mov    eax,0x0
c002052a:	eb 05                	jmp    c0020531 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c002052c:	b8 01 00 00 00       	mov    eax,0x1
c0020531:	83 c4 1c             	add    esp,0x1c
c0020534:	c3                   	ret    
c0020535:	90                   	nop

c0020536 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020536:	57                   	push   edi
c0020537:	83 ec 58             	sub    esp,0x58
c002053a:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020542:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020546:	b9 0f 00 00 00       	mov    ecx,0xf
c002054b:	b8 00 00 00 00       	mov    eax,0x0
c0020550:	fc                   	cld    
c0020551:	89 d7                	mov    edi,edx
c0020553:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020555:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020559:	8b 04 85 a0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce760]
c0020560:	83 f8 ff             	cmp    eax,0xffffffff
c0020563:	75 34                	jne    c0020599 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020565:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020569:	88 c2                	mov    dl,al
c002056b:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c0020570:	01 d0                	add    eax,edx
c0020572:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020576:	8b 15 80 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031880
c002057c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020580:	89 14 85 a0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce760],edx
c0020587:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c002058c:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020590:	89 14 85 20 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6e0],edx
c0020597:	eb 17                	jmp    c00205b0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020599:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002059d:	88 c2                	mov    dl,al
c002059f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00205a3:	8b 04 85 a0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce760]
c00205aa:	01 d0                	add    eax,edx
c00205ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00205b0:	83 ec 08             	sub    esp,0x8
c00205b3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00205b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00205bb:	50                   	push   eax
c00205bc:	e8 b3 03 fe ff       	call   c0000974 <strcat>
c00205c1:	83 c4 10             	add    esp,0x10
c00205c4:	83 ec 0c             	sub    esp,0xc
c00205c7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00205cb:	50                   	push   eax
c00205cc:	e8 55 69 fe ff       	call   c0006f26 <f_setlabel>
c00205d1:	83 c4 10             	add    esp,0x10
c00205d4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00205d8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00205dd:	75 07                	jne    c00205e6 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00205df:	b8 00 00 00 00       	mov    eax,0x0
c00205e4:	eb 05                	jmp    c00205eb <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00205e6:	b8 01 00 00 00       	mov    eax,0x1
c00205eb:	83 c4 58             	add    esp,0x58
c00205ee:	5f                   	pop    edi
c00205ef:	c3                   	ret    

c00205f0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00205f0:	83 ec 2c             	sub    esp,0x2c
c00205f3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00205fb:	83 ec 08             	sub    esp,0x8
c00205fe:	68 64 c6 02 c0       	push   0xc002c664
c0020603:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020607:	e8 b4 02 fe ff       	call   c00008c0 <strcmp>
c002060c:	83 c4 10             	add    esp,0x10
c002060f:	85 c0                	test   eax,eax
c0020611:	0f 94 c0             	sete   al
c0020614:	84 c0                	test   al,al
c0020616:	74 0d                	je     c0020625 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020618:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020620:	e9 a6 00 00 00       	jmp    c00206cb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020625:	83 ec 08             	sub    esp,0x8
c0020628:	68 56 c6 02 c0       	push   0xc002c656
c002062d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020631:	e8 8a 02 fe ff       	call   c00008c0 <strcmp>
c0020636:	83 c4 10             	add    esp,0x10
c0020639:	85 c0                	test   eax,eax
c002063b:	0f 94 c0             	sete   al
c002063e:	84 c0                	test   al,al
c0020640:	74 0a                	je     c002064c <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020642:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002064a:	eb 7f                	jmp    c00206cb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002064c:	83 ec 08             	sub    esp,0x8
c002064f:	68 5c c6 02 c0       	push   0xc002c65c
c0020654:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020658:	e8 63 02 fe ff       	call   c00008c0 <strcmp>
c002065d:	83 c4 10             	add    esp,0x10
c0020660:	85 c0                	test   eax,eax
c0020662:	0f 94 c0             	sete   al
c0020665:	84 c0                	test   al,al
c0020667:	74 0a                	je     c0020673 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020669:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020671:	eb 58                	jmp    c00206cb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020673:	83 ec 08             	sub    esp,0x8
c0020676:	68 2c 93 02 c0       	push   0xc002932c
c002067b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002067f:	e8 3c 02 fe ff       	call   c00008c0 <strcmp>
c0020684:	83 c4 10             	add    esp,0x10
c0020687:	85 c0                	test   eax,eax
c0020689:	0f 94 c0             	sete   al
c002068c:	84 c0                	test   al,al
c002068e:	74 0a                	je     c002069a <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020690:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020698:	eb 31                	jmp    c00206cb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002069a:	83 ec 08             	sub    esp,0x8
c002069d:	68 62 c6 02 c0       	push   0xc002c662
c00206a2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206a6:	e8 15 02 fe ff       	call   c00008c0 <strcmp>
c00206ab:	83 c4 10             	add    esp,0x10
c00206ae:	85 c0                	test   eax,eax
c00206b0:	0f 94 c0             	sete   al
c00206b3:	84 c0                	test   al,al
c00206b5:	74 0a                	je     c00206c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00206b7:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00206bf:	eb 0a                	jmp    c00206cb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206c1:	b8 08 00 00 00       	mov    eax,0x8
c00206c6:	e9 04 01 00 00       	jmp    c00207cf <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00206cb:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00206d2:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00206d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206db:	8b 04 85 a0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce760]
c00206e2:	83 f8 ff             	cmp    eax,0xffffffff
c00206e5:	75 34                	jne    c002071b <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00206e7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00206eb:	88 c2                	mov    dl,al
c00206ed:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c00206f2:	01 d0                	add    eax,edx
c00206f4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00206f8:	8b 15 80 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031880
c00206fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020702:	89 14 85 a0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce760],edx
c0020709:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c002070e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020712:	89 14 85 20 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6e0],edx
c0020719:	eb 17                	jmp    c0020732 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002071b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002071f:	88 c2                	mov    dl,al
c0020721:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020725:	8b 04 85 a0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce760]
c002072c:	01 d0                	add    eax,edx
c002072e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020732:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020736:	88 04 24             	mov    BYTE PTR [esp],al
c0020739:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002073d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020741:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020749:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002074e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020756:	83 ec 0c             	sub    esp,0xc
c0020759:	68 00 20 00 00       	push   0x2000
c002075e:	e8 e0 f0 fe ff       	call   c000f843 <malloc>
c0020763:	83 c4 10             	add    esp,0x10
c0020766:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002076a:	68 00 20 00 00       	push   0x2000
c002076f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020773:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020777:	50                   	push   eax
c0020778:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c002077c:	50                   	push   eax
c002077d:	e8 ef 6b fe ff       	call   c0007371 <f_mkfs>
c0020782:	83 c4 10             	add    esp,0x10
c0020785:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020789:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002078e:	75 07                	jne    c0020797 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020790:	b8 00 00 00 00       	mov    eax,0x0
c0020795:	eb 38                	jmp    c00207cf <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020797:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c002079c:	75 17                	jne    c00207b5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c002079e:	83 ec 0c             	sub    esp,0xc
c00207a1:	68 94 c6 02 c0       	push   0xc002c694
c00207a6:	e8 f1 25 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00207ab:	83 c4 10             	add    esp,0x10
c00207ae:	b8 09 00 00 00       	mov    eax,0x9
c00207b3:	eb 1a                	jmp    c00207cf <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00207b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207b9:	83 ec 08             	sub    esp,0x8
c00207bc:	50                   	push   eax
c00207bd:	68 68 c6 02 c0       	push   0xc002c668
c00207c2:	e8 d5 25 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00207c7:	83 c4 10             	add    esp,0x10
c00207ca:	b8 01 00 00 00       	mov    eax,0x1
c00207cf:	83 c4 2c             	add    esp,0x2c
c00207d2:	c3                   	ret    
c00207d3:	90                   	nop

c00207d4 <FAT::tryMount(LogicalDisk*, int)>:
c00207d4:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00207da:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c00207df:	83 f8 14             	cmp    eax,0x14
c00207e2:	75 17                	jne    c00207fb <FAT::tryMount(LogicalDisk*, int)+0x27>
c00207e4:	83 ec 0c             	sub    esp,0xc
c00207e7:	68 7a c6 02 c0       	push   0xc002c67a
c00207ec:	e8 86 9c ff ff       	call   c001a477 <Krnl::panic(char const*)>
c00207f1:	83 c4 10             	add    esp,0x10
c00207f4:	b0 00                	mov    al,0x0
c00207f6:	e9 d7 01 00 00       	jmp    c00209d2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207fb:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020802:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020808:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002080e:	3d 00 02 00 00       	cmp    eax,0x200
c0020813:	74 07                	je     c002081c <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020815:	b0 00                	mov    al,0x0
c0020817:	e9 b6 01 00 00       	jmp    c00209d2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002081c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020824:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002082b:	8b 04 85 a0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce760]
c0020832:	83 f8 ff             	cmp    eax,0xffffffff
c0020835:	74 07                	je     c002083e <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020837:	b0 01                	mov    al,0x1
c0020839:	e9 94 01 00 00       	jmp    c00209d2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002083e:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020848:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020850:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020857:	88 c2                	mov    dl,al
c0020859:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c002085e:	01 d0                	add    eax,edx
c0020860:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020867:	8b 15 80 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031880
c002086d:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020874:	89 14 85 a0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce760],edx
c002087b:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c0020880:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020887:	89 14 85 20 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6e0],edx
c002088e:	83 ec 0c             	sub    esp,0xc
c0020891:	68 54 02 00 00       	push   0x254
c0020896:	e8 a8 ef fe ff       	call   c000f843 <malloc>
c002089b:	83 c4 10             	add    esp,0x10
c002089e:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00208a5:	83 ec 04             	sub    esp,0x4
c00208a8:	6a 00                	push   0x0
c00208aa:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00208b1:	50                   	push   eax
c00208b2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00208b9:	e8 71 46 fe ff       	call   c0004f2f <f_mount>
c00208be:	83 c4 10             	add    esp,0x10
c00208c1:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00208c8:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00208d0:	74 19                	je     c00208eb <FAT::tryMount(LogicalDisk*, int)+0x117>
c00208d2:	83 ec 0c             	sub    esp,0xc
c00208d5:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00208dc:	e8 82 ef fe ff       	call   c000f863 <rfree>
c00208e1:	83 c4 10             	add    esp,0x10
c00208e4:	b0 00                	mov    al,0x0
c00208e6:	e9 e7 00 00 00       	jmp    c00209d2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00208eb:	83 ec 04             	sub    esp,0x4
c00208ee:	68 00 01 00 00       	push   0x100
c00208f3:	6a 00                	push   0x0
c00208f5:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00208fc:	50                   	push   eax
c00208fd:	e8 76 fe fd ff       	call   c0000778 <memset>
c0020902:	83 c4 10             	add    esp,0x10
c0020905:	83 ec 08             	sub    esp,0x8
c0020908:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002090f:	50                   	push   eax
c0020910:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020917:	50                   	push   eax
c0020918:	e8 57 00 fe ff       	call   c0000974 <strcat>
c002091d:	83 c4 10             	add    esp,0x10
c0020920:	83 ec 08             	sub    esp,0x8
c0020923:	68 88 c6 02 c0       	push   0xc002c688
c0020928:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002092f:	50                   	push   eax
c0020930:	e8 3f 00 fe ff       	call   c0000974 <strcat>
c0020935:	83 c4 10             	add    esp,0x10
c0020938:	83 ec 04             	sub    esp,0x4
c002093b:	6a 01                	push   0x1
c002093d:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020944:	50                   	push   eax
c0020945:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020949:	50                   	push   eax
c002094a:	e8 42 46 fe ff       	call   c0004f91 <f_open>
c002094f:	83 c4 10             	add    esp,0x10
c0020952:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020959:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020960:	85 c0                	test   eax,eax
c0020962:	74 0a                	je     c002096e <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020964:	78 2d                	js     c0020993 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020966:	83 e8 04             	sub    eax,0x4
c0020969:	83 f8 01             	cmp    eax,0x1
c002096c:	77 25                	ja     c0020993 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002096e:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020976:	83 ec 0c             	sub    esp,0xc
c0020979:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002097d:	50                   	push   eax
c002097e:	e8 60 51 fe ff       	call   c0005ae3 <f_close>
c0020983:	83 c4 10             	add    esp,0x10
c0020986:	90                   	nop
c0020987:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c002098f:	74 3a                	je     c00209cb <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020991:	eb 2d                	jmp    c00209c0 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020993:	83 ec 0c             	sub    esp,0xc
c0020996:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002099d:	e8 c1 ee fe ff       	call   c000f863 <rfree>
c00209a2:	83 c4 10             	add    esp,0x10
c00209a5:	83 ec 04             	sub    esp,0x4
c00209a8:	6a 00                	push   0x0
c00209aa:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00209b1:	50                   	push   eax
c00209b2:	6a 00                	push   0x0
c00209b4:	e8 76 45 fe ff       	call   c0004f2f <f_mount>
c00209b9:	83 c4 10             	add    esp,0x10
c00209bc:	b0 00                	mov    al,0x0
c00209be:	eb 12                	jmp    c00209d2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209c0:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c00209c5:	40                   	inc    eax
c00209c6:	a3 80 18 03 c0       	mov    ds:0xc0031880,eax
c00209cb:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00209d2:	81 c4 6c 03 00 00    	add    esp,0x36c
c00209d8:	c3                   	ret    
c00209d9:	90                   	nop

c00209da <FAT::readDir(void*, unsigned long, void*, int*)>:
c00209da:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00209e0:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00209e8:	74 0a                	je     c00209f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00209ea:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00209f2:	75 0a                	jne    c00209fe <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00209f4:	b8 04 00 00 00       	mov    eax,0x4
c00209f9:	e9 db 00 00 00       	jmp    c0020ad9 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00209fe:	83 ec 08             	sub    esp,0x8
c0020a01:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020a08:	50                   	push   eax
c0020a09:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020a10:	e8 d8 56 fe ff       	call   c00060ed <f_readdir>
c0020a15:	83 c4 10             	add    esp,0x10
c0020a18:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020a1f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020a25:	83 ec 0c             	sub    esp,0xc
c0020a28:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020a2f:	83 c0 1a             	add    eax,0x1a
c0020a32:	50                   	push   eax
c0020a33:	e8 5c fd fd ff       	call   c0000794 <strlen>
c0020a38:	83 c4 10             	add    esp,0x10
c0020a3b:	ba 00 00 00 00       	mov    edx,0x0
c0020a40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020a44:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020a48:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020a4f:	0f b6 c0             	movzx  eax,al
c0020a52:	83 e0 10             	and    eax,0x10
c0020a55:	74 07                	je     c0020a5e <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020a57:	b8 02 00 00 00       	mov    eax,0x2
c0020a5c:	eb 05                	jmp    c0020a63 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020a5e:	b8 01 00 00 00       	mov    eax,0x1
c0020a63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a67:	83 ec 08             	sub    esp,0x8
c0020a6a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020a71:	83 c0 1a             	add    eax,0x1a
c0020a74:	50                   	push   eax
c0020a75:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a79:	83 c0 10             	add    eax,0x10
c0020a7c:	50                   	push   eax
c0020a7d:	e8 b2 fd fd ff       	call   c0000834 <strcpy>
c0020a82:	83 c4 10             	add    esp,0x10
c0020a85:	83 ec 04             	sub    esp,0x4
c0020a88:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020a8f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a93:	50                   	push   eax
c0020a94:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020a9b:	e8 a4 fc fd ff       	call   c0000744 <memcpy>
c0020aa0:	83 c4 10             	add    esp,0x10
c0020aa3:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020aaa:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020ab0:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020ab7:	84 c0                	test   al,al
c0020ab9:	75 07                	jne    c0020ac2 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020abb:	b8 07 00 00 00       	mov    eax,0x7
c0020ac0:	eb 17                	jmp    c0020ad9 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020ac2:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020ac9:	85 c0                	test   eax,eax
c0020acb:	75 07                	jne    c0020ad4 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020acd:	b8 00 00 00 00       	mov    eax,0x0
c0020ad2:	eb 05                	jmp    c0020ad9 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020ad4:	b8 01 00 00 00       	mov    eax,0x1
c0020ad9:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020adf:	c3                   	ret    

c0020ae0 <FAT::read(void*, unsigned long, void*, int*)>:
c0020ae0:	83 ec 1c             	sub    esp,0x1c
c0020ae3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ae8:	74 07                	je     c0020af1 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020aea:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020aef:	75 07                	jne    c0020af8 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020af1:	b8 04 00 00 00       	mov    eax,0x4
c0020af6:	eb 3d                	jmp    c0020b35 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020af8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020afc:	50                   	push   eax
c0020afd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020b01:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020b05:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b09:	e8 bf 48 fe ff       	call   c00053cd <f_read>
c0020b0e:	83 c4 10             	add    esp,0x10
c0020b11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b19:	89 c2                	mov    edx,eax
c0020b1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020b1f:	89 10                	mov    DWORD PTR [eax],edx
c0020b21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b25:	85 c0                	test   eax,eax
c0020b27:	75 07                	jne    c0020b30 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020b29:	b8 00 00 00 00       	mov    eax,0x0
c0020b2e:	eb 05                	jmp    c0020b35 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020b30:	b8 01 00 00 00       	mov    eax,0x1
c0020b35:	83 c4 1c             	add    esp,0x1c
c0020b38:	c3                   	ret    
c0020b39:	90                   	nop

c0020b3a <FAT::write(void*, unsigned long, void*, int*)>:
c0020b3a:	83 ec 1c             	sub    esp,0x1c
c0020b3d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b42:	74 07                	je     c0020b4b <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020b44:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020b49:	75 07                	jne    c0020b52 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020b4b:	b8 04 00 00 00       	mov    eax,0x4
c0020b50:	eb 3d                	jmp    c0020b8f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020b52:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b56:	50                   	push   eax
c0020b57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020b5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020b5f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b63:	e8 e5 4a fe ff       	call   c000564d <f_write>
c0020b68:	83 c4 10             	add    esp,0x10
c0020b6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b73:	89 c2                	mov    edx,eax
c0020b75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020b79:	89 10                	mov    DWORD PTR [eax],edx
c0020b7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b7f:	85 c0                	test   eax,eax
c0020b81:	75 07                	jne    c0020b8a <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020b83:	b8 00 00 00 00       	mov    eax,0x0
c0020b88:	eb 05                	jmp    c0020b8f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020b8a:	b8 01 00 00 00       	mov    eax,0x1
c0020b8f:	83 c4 1c             	add    esp,0x1c
c0020b92:	c3                   	ret    
c0020b93:	90                   	nop

c0020b94 <FAT::close(void*)>:
c0020b94:	83 ec 1c             	sub    esp,0x1c
c0020b97:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b9c:	75 07                	jne    c0020ba5 <FAT::close(void*)+0x11>
c0020b9e:	b8 04 00 00 00       	mov    eax,0x4
c0020ba3:	eb 36                	jmp    c0020bdb <FAT::close(void*)+0x47>
c0020ba5:	83 ec 0c             	sub    esp,0xc
c0020ba8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bac:	e8 32 4f fe ff       	call   c0005ae3 <f_close>
c0020bb1:	83 c4 10             	add    esp,0x10
c0020bb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bb8:	83 ec 0c             	sub    esp,0xc
c0020bbb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bbf:	e8 8f ec fe ff       	call   c000f853 <free>
c0020bc4:	83 c4 10             	add    esp,0x10
c0020bc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020bcb:	85 c0                	test   eax,eax
c0020bcd:	75 07                	jne    c0020bd6 <FAT::close(void*)+0x42>
c0020bcf:	b8 00 00 00 00       	mov    eax,0x0
c0020bd4:	eb 05                	jmp    c0020bdb <FAT::close(void*)+0x47>
c0020bd6:	b8 01 00 00 00       	mov    eax,0x1
c0020bdb:	83 c4 1c             	add    esp,0x1c
c0020bde:	c3                   	ret    
c0020bdf:	90                   	nop

c0020be0 <FAT::closeDir(void*)>:
c0020be0:	83 ec 1c             	sub    esp,0x1c
c0020be3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020be8:	75 07                	jne    c0020bf1 <FAT::closeDir(void*)+0x11>
c0020bea:	b8 04 00 00 00       	mov    eax,0x4
c0020bef:	eb 36                	jmp    c0020c27 <FAT::closeDir(void*)+0x47>
c0020bf1:	83 ec 0c             	sub    esp,0xc
c0020bf4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bf8:	e8 ce 54 fe ff       	call   c00060cb <f_closedir>
c0020bfd:	83 c4 10             	add    esp,0x10
c0020c00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c04:	83 ec 0c             	sub    esp,0xc
c0020c07:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c0b:	e8 43 ec fe ff       	call   c000f853 <free>
c0020c10:	83 c4 10             	add    esp,0x10
c0020c13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c17:	85 c0                	test   eax,eax
c0020c19:	75 07                	jne    c0020c22 <FAT::closeDir(void*)+0x42>
c0020c1b:	b8 00 00 00 00       	mov    eax,0x0
c0020c20:	eb 05                	jmp    c0020c27 <FAT::closeDir(void*)+0x47>
c0020c22:	b8 01 00 00 00       	mov    eax,0x1
c0020c27:	83 c4 1c             	add    esp,0x1c
c0020c2a:	c3                   	ret    
c0020c2b:	90                   	nop

c0020c2c <FAT::seek(void*, unsigned long long)>:
c0020c2c:	83 ec 2c             	sub    esp,0x2c
c0020c2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020c33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020c3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c3f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020c44:	75 07                	jne    c0020c4d <FAT::seek(void*, unsigned long long)+0x21>
c0020c46:	b8 04 00 00 00       	mov    eax,0x4
c0020c4b:	eb 2f                	jmp    c0020c7c <FAT::seek(void*, unsigned long long)+0x50>
c0020c4d:	83 ec 04             	sub    esp,0x4
c0020c50:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c54:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c58:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020c5c:	e8 b1 4e fe ff       	call   c0005b12 <f_lseek>
c0020c61:	83 c4 10             	add    esp,0x10
c0020c64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c6c:	85 c0                	test   eax,eax
c0020c6e:	75 07                	jne    c0020c77 <FAT::seek(void*, unsigned long long)+0x4b>
c0020c70:	b8 00 00 00 00       	mov    eax,0x0
c0020c75:	eb 05                	jmp    c0020c7c <FAT::seek(void*, unsigned long long)+0x50>
c0020c77:	b8 01 00 00 00       	mov    eax,0x1
c0020c7c:	83 c4 2c             	add    esp,0x2c
c0020c7f:	c3                   	ret    

c0020c80 <fatWrapperReadDisk>:
c0020c80:	83 ec 1c             	sub    esp,0x1c
c0020c83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c87:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020c8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0020c92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020c96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c9a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c9f:	8b 04 85 60 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17a0]
c0020ca6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020caa:	83 ec 0c             	sub    esp,0xc
c0020cad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cb1:	52                   	push   edx
c0020cb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cba:	50                   	push   eax
c0020cbb:	e8 22 59 ff ff       	call   c00165e2 <LogicalDisk::read(unsigned long long, int, void*)>
c0020cc0:	83 c4 20             	add    esp,0x20
c0020cc3:	83 c4 1c             	add    esp,0x1c
c0020cc6:	c3                   	ret    

c0020cc7 <fatWrapperWriteDisk>:
c0020cc7:	83 ec 1c             	sub    esp,0x1c
c0020cca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020cce:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020cd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020cd6:	89 04 24             	mov    DWORD PTR [esp],eax
c0020cd9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020cdd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ce1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ce6:	8b 04 85 60 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17a0]
c0020ced:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020cf1:	83 ec 0c             	sub    esp,0xc
c0020cf4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cf8:	52                   	push   edx
c0020cf9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d01:	50                   	push   eax
c0020d02:	e8 47 59 ff ff       	call   c001664e <LogicalDisk::write(unsigned long long, int, void*)>
c0020d07:	83 c4 20             	add    esp,0x20
c0020d0a:	83 c4 1c             	add    esp,0x1c
c0020d0d:	c3                   	ret    

c0020d0e <fatWrapperIoctl>:
c0020d0e:	53                   	push   ebx
c0020d0f:	83 ec 28             	sub    esp,0x28
c0020d12:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020d16:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020d1a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020d1e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020d22:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020d27:	75 31                	jne    c0020d5a <fatWrapperIoctl+0x4c>
c0020d29:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d2d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d31:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d36:	8b 04 85 60 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17a0]
c0020d3d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020d43:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020d49:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020d4d:	66 89 02             	mov    WORD PTR [edx],ax
c0020d50:	b8 00 00 00 00       	mov    eax,0x0
c0020d55:	e9 b2 00 00 00       	jmp    c0020e0c <fatWrapperIoctl+0xfe>
c0020d5a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020d5f:	75 6a                	jne    c0020dcb <fatWrapperIoctl+0xbd>
c0020d61:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d69:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d6e:	8b 04 85 60 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17a0]
c0020d75:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020d7b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020d81:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020d87:	89 c8                	mov    eax,ecx
c0020d89:	89 da                	mov    edx,ebx
c0020d8b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020d8f:	c1 e0 0a             	shl    eax,0xa
c0020d92:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020d97:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c0020d9e:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020da4:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020daa:	89 cb                	mov    ebx,ecx
c0020dac:	c1 fb 1f             	sar    ebx,0x1f
c0020daf:	53                   	push   ebx
c0020db0:	51                   	push   ecx
c0020db1:	52                   	push   edx
c0020db2:	50                   	push   eax
c0020db3:	e8 c4 5a 00 00       	call   c002687c <__udivdi3>
c0020db8:	83 c4 10             	add    esp,0x10
c0020dbb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020dbf:	89 01                	mov    DWORD PTR [ecx],eax
c0020dc1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020dc4:	b8 00 00 00 00       	mov    eax,0x0
c0020dc9:	eb 41                	jmp    c0020e0c <fatWrapperIoctl+0xfe>
c0020dcb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020dd0:	75 07                	jne    c0020dd9 <fatWrapperIoctl+0xcb>
c0020dd2:	b8 00 00 00 00       	mov    eax,0x0
c0020dd7:	eb 33                	jmp    c0020e0c <fatWrapperIoctl+0xfe>
c0020dd9:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020dde:	75 19                	jne    c0020df9 <fatWrapperIoctl+0xeb>
c0020de0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020de4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020de8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020dec:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020df2:	b8 00 00 00 00       	mov    eax,0x0
c0020df7:	eb 13                	jmp    c0020e0c <fatWrapperIoctl+0xfe>
c0020df9:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020dfe:	75 07                	jne    c0020e07 <fatWrapperIoctl+0xf9>
c0020e00:	b8 00 00 00 00       	mov    eax,0x0
c0020e05:	eb 05                	jmp    c0020e0c <fatWrapperIoctl+0xfe>
c0020e07:	b8 04 00 00 00       	mov    eax,0x4
c0020e0c:	83 c4 28             	add    esp,0x28
c0020e0f:	5b                   	pop    ebx
c0020e10:	c3                   	ret    
c0020e11:	90                   	nop

c0020e12 <FAT::FAT()>:
c0020e12:	83 ec 1c             	sub    esp,0x1c
c0020e15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e19:	83 ec 0c             	sub    esp,0xc
c0020e1c:	50                   	push   eax
c0020e1d:	e8 7e 22 ff ff       	call   c00130a0 <Filesystem::Filesystem()>
c0020e22:	83 c4 10             	add    esp,0x10
c0020e25:	ba c4 c6 02 c0       	mov    edx,0xc002c6c4
c0020e2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e2e:	89 10                	mov    DWORD PTR [eax],edx
c0020e30:	c7 05 80 18 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031880,0x0
c0020e3a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020e42:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020e47:	7f 15                	jg     c0020e5e <FAT::FAT()+0x4c>
c0020e49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e4d:	c7 04 85 a0 18 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce760],0xffffffff
c0020e58:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020e5c:	eb e4                	jmp    c0020e42 <FAT::FAT()+0x30>
c0020e5e:	90                   	nop
c0020e5f:	83 c4 1c             	add    esp,0x1c
c0020e62:	c3                   	ret    
c0020e63:	90                   	nop

c0020e64 <FAT::fixFilepath(char*)>:
c0020e64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e68:	8a 00                	mov    al,BYTE PTR [eax]
c0020e6a:	3c 40                	cmp    al,0x40
c0020e6c:	7e 2c                	jle    c0020e9a <FAT::fixFilepath(char*)+0x36>
c0020e6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e72:	8a 00                	mov    al,BYTE PTR [eax]
c0020e74:	83 e8 41             	sub    eax,0x41
c0020e77:	88 c2                	mov    dl,al
c0020e79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e7d:	88 10                	mov    BYTE PTR [eax],dl
c0020e7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e83:	8a 00                	mov    al,BYTE PTR [eax]
c0020e85:	0f be c0             	movsx  eax,al
c0020e88:	8b 04 85 a0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce760]
c0020e8f:	83 c0 30             	add    eax,0x30
c0020e92:	88 c2                	mov    dl,al
c0020e94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e98:	88 10                	mov    BYTE PTR [eax],dl
c0020e9a:	90                   	nop
c0020e9b:	c3                   	ret    

c0020e9c <FAT::open(char const*, void**, FileOpenMode)>:
c0020e9c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020ea2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020eaa:	74 0a                	je     c0020eb6 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020eac:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020eb4:	75 0a                	jne    c0020ec0 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020eb6:	b8 04 00 00 00       	mov    eax,0x4
c0020ebb:	e9 fd 00 00 00       	jmp    c0020fbd <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ec0:	83 ec 08             	sub    esp,0x8
c0020ec3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020eca:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ece:	50                   	push   eax
c0020ecf:	e8 60 f9 fd ff       	call   c0000834 <strcpy>
c0020ed4:	83 c4 10             	add    esp,0x10
c0020ed7:	83 ec 08             	sub    esp,0x8
c0020eda:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020ede:	50                   	push   eax
c0020edf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ee6:	e8 79 ff ff ff       	call   c0020e64 <FAT::fixFilepath(char*)>
c0020eeb:	83 c4 10             	add    esp,0x10
c0020eee:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020ef6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020efd:	83 e0 01             	and    eax,0x1
c0020f00:	74 08                	je     c0020f0a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020f02:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020f0a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f11:	83 e0 04             	and    eax,0x4
c0020f14:	74 10                	je     c0020f26 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020f16:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020f1e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020f26:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f2d:	83 e0 02             	and    eax,0x2
c0020f30:	74 08                	je     c0020f3a <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020f32:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020f3a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f41:	83 e0 08             	and    eax,0x8
c0020f44:	74 08                	je     c0020f4e <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020f46:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020f4e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f55:	83 e0 10             	and    eax,0x10
c0020f58:	74 08                	je     c0020f62 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020f5a:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020f62:	83 ec 0c             	sub    esp,0xc
c0020f65:	68 50 02 00 00       	push   0x250
c0020f6a:	e8 d4 e8 fe ff       	call   c000f843 <malloc>
c0020f6f:	83 c4 10             	add    esp,0x10
c0020f72:	89 c2                	mov    edx,eax
c0020f74:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020f7b:	89 10                	mov    DWORD PTR [eax],edx
c0020f7d:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020f85:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020f8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f8e:	83 ec 04             	sub    esp,0x4
c0020f91:	52                   	push   edx
c0020f92:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020f96:	52                   	push   edx
c0020f97:	50                   	push   eax
c0020f98:	e8 f4 3f fe ff       	call   c0004f91 <f_open>
c0020f9d:	83 c4 10             	add    esp,0x10
c0020fa0:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020fa7:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020faf:	74 07                	je     c0020fb8 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020fb1:	b8 01 00 00 00       	mov    eax,0x1
c0020fb6:	eb 05                	jmp    c0020fbd <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020fb8:	b8 00 00 00 00       	mov    eax,0x0
c0020fbd:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020fc3:	c3                   	ret    

c0020fc4 <FAT::openDir(char const*, void**)>:
c0020fc4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fca:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fd2:	74 0a                	je     c0020fde <FAT::openDir(char const*, void**)+0x1a>
c0020fd4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020fdc:	75 07                	jne    c0020fe5 <FAT::openDir(char const*, void**)+0x21>
c0020fde:	b8 04 00 00 00       	mov    eax,0x4
c0020fe3:	eb 7d                	jmp    c0021062 <FAT::openDir(char const*, void**)+0x9e>
c0020fe5:	83 ec 08             	sub    esp,0x8
c0020fe8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ff3:	50                   	push   eax
c0020ff4:	e8 3b f8 fd ff       	call   c0000834 <strcpy>
c0020ff9:	83 c4 10             	add    esp,0x10
c0020ffc:	83 ec 08             	sub    esp,0x8
c0020fff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021003:	50                   	push   eax
c0021004:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002100b:	e8 54 fe ff ff       	call   c0020e64 <FAT::fixFilepath(char*)>
c0021010:	83 c4 10             	add    esp,0x10
c0021013:	83 ec 0c             	sub    esp,0xc
c0021016:	6a 4c                	push   0x4c
c0021018:	e8 26 e8 fe ff       	call   c000f843 <malloc>
c002101d:	83 c4 10             	add    esp,0x10
c0021020:	89 c2                	mov    edx,eax
c0021022:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021029:	89 10                	mov    DWORD PTR [eax],edx
c002102b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021032:	8b 00                	mov    eax,DWORD PTR [eax]
c0021034:	83 ec 08             	sub    esp,0x8
c0021037:	8d 54 24 14          	lea    edx,[esp+0x14]
c002103b:	52                   	push   edx
c002103c:	50                   	push   eax
c002103d:	e8 87 4f fe ff       	call   c0005fc9 <f_opendir>
c0021042:	83 c4 10             	add    esp,0x10
c0021045:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002104c:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021054:	74 07                	je     c002105d <FAT::openDir(char const*, void**)+0x99>
c0021056:	b8 01 00 00 00       	mov    eax,0x1
c002105b:	eb 05                	jmp    c0021062 <FAT::openDir(char const*, void**)+0x9e>
c002105d:	b8 00 00 00 00       	mov    eax,0x0
c0021062:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021068:	c3                   	ret    
c0021069:	90                   	nop

c002106a <FAT::stat(char const*, unsigned long long*, bool*)>:
c002106a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021070:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021078:	75 0a                	jne    c0021084 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002107a:	b8 04 00 00 00       	mov    eax,0x4
c002107f:	e9 c9 00 00 00       	jmp    c002114d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021084:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c002108c:	75 0a                	jne    c0021098 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c002108e:	b8 04 00 00 00       	mov    eax,0x4
c0021093:	e9 b5 00 00 00       	jmp    c002114d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021098:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00210a0:	75 0a                	jne    c00210ac <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00210a2:	b8 04 00 00 00       	mov    eax,0x4
c00210a7:	e9 a1 00 00 00       	jmp    c002114d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00210ac:	83 ec 08             	sub    esp,0x8
c00210af:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00210b6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00210bd:	50                   	push   eax
c00210be:	e8 71 f7 fd ff       	call   c0000834 <strcpy>
c00210c3:	83 c4 10             	add    esp,0x10
c00210c6:	83 ec 08             	sub    esp,0x8
c00210c9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00210d0:	50                   	push   eax
c00210d1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00210d8:	e8 87 fd ff ff       	call   c0020e64 <FAT::fixFilepath(char*)>
c00210dd:	83 c4 10             	add    esp,0x10
c00210e0:	83 ec 08             	sub    esp,0x8
c00210e3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00210e7:	50                   	push   eax
c00210e8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00210ef:	50                   	push   eax
c00210f0:	e8 93 50 fe ff       	call   c0006188 <f_stat>
c00210f5:	83 c4 10             	add    esp,0x10
c00210f8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00210ff:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021106:	85 c0                	test   eax,eax
c0021108:	74 07                	je     c0021111 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002110a:	83 f8 04             	cmp    eax,0x4
c002110d:	74 32                	je     c0021141 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002110f:	eb 37                	jmp    c0021148 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021111:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021115:	0f b6 c0             	movzx  eax,al
c0021118:	83 e0 10             	and    eax,0x10
c002111b:	0f 95 c2             	setne  dl
c002111e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021125:	88 10                	mov    BYTE PTR [eax],dl
c0021127:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002112a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002112e:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021135:	89 01                	mov    DWORD PTR [ecx],eax
c0021137:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002113a:	b8 00 00 00 00       	mov    eax,0x0
c002113f:	eb 0c                	jmp    c002114d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021141:	b8 02 00 00 00       	mov    eax,0x2
c0021146:	eb 05                	jmp    c002114d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021148:	b8 01 00 00 00       	mov    eax,0x1
c002114d:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021153:	c3                   	ret    

c0021154 <FAT::unlink(char const*)>:
c0021154:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002115a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021162:	75 07                	jne    c002116b <FAT::unlink(char const*)+0x17>
c0021164:	b8 04 00 00 00       	mov    eax,0x4
c0021169:	eb 5c                	jmp    c00211c7 <FAT::unlink(char const*)+0x73>
c002116b:	83 ec 08             	sub    esp,0x8
c002116e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021175:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021179:	50                   	push   eax
c002117a:	e8 b5 f6 fd ff       	call   c0000834 <strcpy>
c002117f:	83 c4 10             	add    esp,0x10
c0021182:	83 ec 08             	sub    esp,0x8
c0021185:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021189:	50                   	push   eax
c002118a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021191:	e8 ce fc ff ff       	call   c0020e64 <FAT::fixFilepath(char*)>
c0021196:	83 c4 10             	add    esp,0x10
c0021199:	83 ec 0c             	sub    esp,0xc
c002119c:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211a0:	50                   	push   eax
c00211a1:	e8 34 53 fe ff       	call   c00064da <f_unlink>
c00211a6:	83 c4 10             	add    esp,0x10
c00211a9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211b0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00211b7:	85 c0                	test   eax,eax
c00211b9:	75 07                	jne    c00211c2 <FAT::unlink(char const*)+0x6e>
c00211bb:	b8 00 00 00 00       	mov    eax,0x0
c00211c0:	eb 05                	jmp    c00211c7 <FAT::unlink(char const*)+0x73>
c00211c2:	b8 01 00 00 00       	mov    eax,0x1
c00211c7:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211cd:	c3                   	ret    

c00211ce <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00211ce:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00211d4:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00211db:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00211e2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00211e6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00211ea:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00211f2:	75 0a                	jne    c00211fe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00211f4:	b8 04 00 00 00       	mov    eax,0x4
c00211f9:	e9 1c 01 00 00       	jmp    c002131a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00211fe:	83 ec 08             	sub    esp,0x8
c0021201:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021208:	8d 44 24 24          	lea    eax,[esp+0x24]
c002120c:	50                   	push   eax
c002120d:	e8 22 f6 fd ff       	call   c0000834 <strcpy>
c0021212:	83 c4 10             	add    esp,0x10
c0021215:	83 ec 08             	sub    esp,0x8
c0021218:	8d 44 24 20          	lea    eax,[esp+0x20]
c002121c:	50                   	push   eax
c002121d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021224:	e8 3b fc ff ff       	call   c0020e64 <FAT::fixFilepath(char*)>
c0021229:	83 c4 10             	add    esp,0x10
c002122c:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021234:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c002123c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021241:	83 e0 01             	and    eax,0x1
c0021244:	74 08                	je     c002124e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021246:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002124e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021253:	83 e0 02             	and    eax,0x2
c0021256:	74 08                	je     c0021260 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021258:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021260:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021265:	83 e0 04             	and    eax,0x4
c0021268:	74 08                	je     c0021272 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c002126a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021272:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021277:	83 e0 08             	and    eax,0x8
c002127a:	74 08                	je     c0021284 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c002127c:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021284:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021289:	83 e0 01             	and    eax,0x1
c002128c:	74 08                	je     c0021296 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002128e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021296:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002129b:	83 e0 02             	and    eax,0x2
c002129e:	74 08                	je     c00212a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00212a0:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00212a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212ad:	83 e0 04             	and    eax,0x4
c00212b0:	74 08                	je     c00212ba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00212b2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00212ba:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212bf:	83 e0 08             	and    eax,0x8
c00212c2:	74 08                	je     c00212cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00212c4:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00212cc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00212d3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00212da:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00212e2:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00212ea:	83 ec 04             	sub    esp,0x4
c00212ed:	52                   	push   edx
c00212ee:	50                   	push   eax
c00212ef:	8d 44 24 24          	lea    eax,[esp+0x24]
c00212f3:	50                   	push   eax
c00212f4:	e8 83 58 fe ff       	call   c0006b7c <f_chmod>
c00212f9:	83 c4 10             	add    esp,0x10
c00212fc:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021303:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002130a:	85 c0                	test   eax,eax
c002130c:	75 07                	jne    c0021315 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002130e:	b8 00 00 00 00       	mov    eax,0x0
c0021313:	eb 05                	jmp    c002131a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021315:	b8 01 00 00 00       	mov    eax,0x1
c002131a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021320:	c3                   	ret    
c0021321:	90                   	nop

c0021322 <FAT::rename(char const*, char const*)>:
c0021322:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021328:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021330:	74 0a                	je     c002133c <FAT::rename(char const*, char const*)+0x1a>
c0021332:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002133a:	75 0a                	jne    c0021346 <FAT::rename(char const*, char const*)+0x24>
c002133c:	b8 04 00 00 00       	mov    eax,0x4
c0021341:	e9 98 00 00 00       	jmp    c00213de <FAT::rename(char const*, char const*)+0xbc>
c0021346:	83 ec 08             	sub    esp,0x8
c0021349:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021350:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021357:	50                   	push   eax
c0021358:	e8 d7 f4 fd ff       	call   c0000834 <strcpy>
c002135d:	83 c4 10             	add    esp,0x10
c0021360:	83 ec 08             	sub    esp,0x8
c0021363:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c002136a:	50                   	push   eax
c002136b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021372:	e8 ed fa ff ff       	call   c0020e64 <FAT::fixFilepath(char*)>
c0021377:	83 c4 10             	add    esp,0x10
c002137a:	83 ec 08             	sub    esp,0x8
c002137d:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021384:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021388:	50                   	push   eax
c0021389:	e8 a6 f4 fd ff       	call   c0000834 <strcpy>
c002138e:	83 c4 10             	add    esp,0x10
c0021391:	83 ec 08             	sub    esp,0x8
c0021394:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021398:	50                   	push   eax
c0021399:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00213a0:	e8 bf fa ff ff       	call   c0020e64 <FAT::fixFilepath(char*)>
c00213a5:	83 c4 10             	add    esp,0x10
c00213a8:	83 ec 08             	sub    esp,0x8
c00213ab:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213af:	50                   	push   eax
c00213b0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00213b7:	50                   	push   eax
c00213b8:	e8 cc 54 fe ff       	call   c0006889 <f_rename>
c00213bd:	83 c4 10             	add    esp,0x10
c00213c0:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00213c7:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00213ce:	85 c0                	test   eax,eax
c00213d0:	75 07                	jne    c00213d9 <FAT::rename(char const*, char const*)+0xb7>
c00213d2:	b8 00 00 00 00       	mov    eax,0x0
c00213d7:	eb 05                	jmp    c00213de <FAT::rename(char const*, char const*)+0xbc>
c00213d9:	b8 01 00 00 00       	mov    eax,0x1
c00213de:	81 c4 1c 02 00 00    	add    esp,0x21c
c00213e4:	c3                   	ret    
c00213e5:	90                   	nop

c00213e6 <FAT::mkdir(char const*)>:
c00213e6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00213ec:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00213f4:	75 07                	jne    c00213fd <FAT::mkdir(char const*)+0x17>
c00213f6:	b8 04 00 00 00       	mov    eax,0x4
c00213fb:	eb 5c                	jmp    c0021459 <FAT::mkdir(char const*)+0x73>
c00213fd:	83 ec 08             	sub    esp,0x8
c0021400:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021407:	8d 44 24 18          	lea    eax,[esp+0x18]
c002140b:	50                   	push   eax
c002140c:	e8 23 f4 fd ff       	call   c0000834 <strcpy>
c0021411:	83 c4 10             	add    esp,0x10
c0021414:	83 ec 08             	sub    esp,0x8
c0021417:	8d 44 24 14          	lea    eax,[esp+0x14]
c002141b:	50                   	push   eax
c002141c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021423:	e8 3c fa ff ff       	call   c0020e64 <FAT::fixFilepath(char*)>
c0021428:	83 c4 10             	add    esp,0x10
c002142b:	83 ec 0c             	sub    esp,0xc
c002142e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021432:	50                   	push   eax
c0021433:	e8 25 52 fe ff       	call   c000665d <f_mkdir>
c0021438:	83 c4 10             	add    esp,0x10
c002143b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021442:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021449:	85 c0                	test   eax,eax
c002144b:	75 07                	jne    c0021454 <FAT::mkdir(char const*)+0x6e>
c002144d:	b8 00 00 00 00       	mov    eax,0x0
c0021452:	eb 05                	jmp    c0021459 <FAT::mkdir(char const*)+0x73>
c0021454:	b8 01 00 00 00       	mov    eax,0x1
c0021459:	81 c4 1c 01 00 00    	add    esp,0x11c
c002145f:	c3                   	ret    

c0021460 <FAT::exists(char const*)>:
c0021460:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021466:	83 ec 08             	sub    esp,0x8
c0021469:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021470:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021474:	50                   	push   eax
c0021475:	e8 ba f3 fd ff       	call   c0000834 <strcpy>
c002147a:	83 c4 10             	add    esp,0x10
c002147d:	83 ec 08             	sub    esp,0x8
c0021480:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021484:	50                   	push   eax
c0021485:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002148c:	e8 d3 f9 ff ff       	call   c0020e64 <FAT::fixFilepath(char*)>
c0021491:	83 c4 10             	add    esp,0x10
c0021494:	83 ec 08             	sub    esp,0x8
c0021497:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002149e:	50                   	push   eax
c002149f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00214a3:	50                   	push   eax
c00214a4:	e8 df 4c fe ff       	call   c0006188 <f_stat>
c00214a9:	83 c4 10             	add    esp,0x10
c00214ac:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00214b3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00214ba:	85 c0                	test   eax,eax
c00214bc:	75 04                	jne    c00214c2 <FAT::exists(char const*)+0x62>
c00214be:	b0 01                	mov    al,0x1
c00214c0:	eb 02                	jmp    c00214c4 <FAT::exists(char const*)+0x64>
c00214c2:	b0 00                	mov    al,0x0
c00214c4:	81 c4 2c 02 00 00    	add    esp,0x22c
c00214ca:	c3                   	ret    
c00214cb:	90                   	nop

c00214cc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00214cc:	b8 08 00 00 00       	mov    eax,0x8
c00214d1:	c3                   	ret    

c00214d2 <ISO9660::seek(void*, unsigned long long)>:
c00214d2:	53                   	push   ebx
c00214d3:	b8 04 00 00 00       	mov    eax,0x4
c00214d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00214e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00214e4:	85 d2                	test   edx,edx
c00214e6:	74 17                	je     c00214ff <ISO9660::seek(void*, unsigned long long)+0x2d>
c00214e8:	89 c8                	mov    eax,ecx
c00214ea:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00214ed:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00214f0:	b8 01 00 00 00       	mov    eax,0x1
c00214f5:	73 08                	jae    c00214ff <ISO9660::seek(void*, unsigned long long)+0x2d>
c00214f7:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00214fa:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00214fd:	31 c0                	xor    eax,eax
c00214ff:	5b                   	pop    ebx
c0021500:	c3                   	ret    
c0021501:	90                   	nop

c0021502 <ISO9660::tell(void*, unsigned long long*)>:
c0021502:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021506:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002150a:	85 d2                	test   edx,edx
c002150c:	74 12                	je     c0021520 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002150e:	85 c0                	test   eax,eax
c0021510:	74 0e                	je     c0021520 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021512:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021515:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021518:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002151b:	89 10                	mov    DWORD PTR [eax],edx
c002151d:	31 c0                	xor    eax,eax
c002151f:	c3                   	ret    
c0021520:	b8 04 00 00 00       	mov    eax,0x4
c0021525:	c3                   	ret    

c0021526 <ISO9660::getName()>:
c0021526:	b8 20 c7 02 c0       	mov    eax,0xc002c720
c002152b:	c3                   	ret    

c002152c <ISO9660::stat(void*, unsigned long long*)>:
c002152c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021530:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021534:	85 d2                	test   edx,edx
c0021536:	74 12                	je     c002154a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021538:	85 c0                	test   eax,eax
c002153a:	74 0e                	je     c002154a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002153c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002153f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021542:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021545:	89 10                	mov    DWORD PTR [eax],edx
c0021547:	31 c0                	xor    eax,eax
c0021549:	c3                   	ret    
c002154a:	b8 04 00 00 00       	mov    eax,0x4
c002154f:	c3                   	ret    

c0021550 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021550:	b8 01 00 00 00       	mov    eax,0x1
c0021555:	c3                   	ret    

c0021556 <ISO9660::unlink(char const*)>:
c0021556:	b8 01 00 00 00       	mov    eax,0x1
c002155b:	c3                   	ret    

c002155c <ISO9660::write(void*, unsigned long, void*, int*)>:
c002155c:	b8 01 00 00 00       	mov    eax,0x1
c0021561:	c3                   	ret    

c0021562 <ISO9660::rename(char const*, char const*)>:
c0021562:	b8 01 00 00 00       	mov    eax,0x1
c0021567:	c3                   	ret    

c0021568 <ISO9660::mkdir(char const*)>:
c0021568:	b8 01 00 00 00       	mov    eax,0x1
c002156d:	c3                   	ret    

c002156e <ISO9660::close(void*)>:
c002156e:	83 ec 0c             	sub    esp,0xc
c0021571:	b8 04 00 00 00       	mov    eax,0x4
c0021576:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002157a:	85 d2                	test   edx,edx
c002157c:	74 0e                	je     c002158c <ISO9660::close(void*)+0x1e>
c002157e:	83 ec 0c             	sub    esp,0xc
c0021581:	52                   	push   edx
c0021582:	e8 cc e2 fe ff       	call   c000f853 <free>
c0021587:	83 c4 10             	add    esp,0x10
c002158a:	31 c0                	xor    eax,eax
c002158c:	83 c4 0c             	add    esp,0xc
c002158f:	c3                   	ret    

c0021590 <ISO9660::closeDir(void*)>:
c0021590:	83 ec 0c             	sub    esp,0xc
c0021593:	b8 04 00 00 00       	mov    eax,0x4
c0021598:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002159c:	85 d2                	test   edx,edx
c002159e:	74 0e                	je     c00215ae <ISO9660::closeDir(void*)+0x1e>
c00215a0:	83 ec 0c             	sub    esp,0xc
c00215a3:	52                   	push   edx
c00215a4:	e8 aa e2 fe ff       	call   c000f853 <free>
c00215a9:	83 c4 10             	add    esp,0x10
c00215ac:	31 c0                	xor    eax,eax
c00215ae:	83 c4 0c             	add    esp,0xc
c00215b1:	c3                   	ret    

c00215b2 <ISO9660::~ISO9660()>:
c00215b2:	83 ec 0c             	sub    esp,0xc
c00215b5:	ba 84 c7 02 c0       	mov    edx,0xc002c784
c00215ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215be:	89 10                	mov    DWORD PTR [eax],edx
c00215c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215c4:	83 ec 0c             	sub    esp,0xc
c00215c7:	50                   	push   eax
c00215c8:	e8 f7 1a ff ff       	call   c00130c4 <Filesystem::~Filesystem()>
c00215cd:	83 c4 10             	add    esp,0x10
c00215d0:	90                   	nop
c00215d1:	83 c4 0c             	add    esp,0xc
c00215d4:	c3                   	ret    
c00215d5:	90                   	nop

c00215d6 <ISO9660::~ISO9660()>:
c00215d6:	83 ec 0c             	sub    esp,0xc
c00215d9:	83 ec 0c             	sub    esp,0xc
c00215dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215e0:	e8 cd ff ff ff       	call   c00215b2 <ISO9660::~ISO9660()>
c00215e5:	83 c4 10             	add    esp,0x10
c00215e8:	83 ec 08             	sub    esp,0x8
c00215eb:	6a 08                	push   0x8
c00215ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215f1:	e8 c6 16 ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c00215f6:	83 c4 10             	add    esp,0x10
c00215f9:	83 c4 0c             	add    esp,0xc
c00215fc:	c3                   	ret    

c00215fd <__memmem(unsigned char*, int, unsigned char*, int)>:
c00215fd:	55                   	push   ebp
c00215fe:	31 c9                	xor    ecx,ecx
c0021600:	57                   	push   edi
c0021601:	56                   	push   esi
c0021602:	53                   	push   ebx
c0021603:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021607:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002160b:	89 eb                	mov    ebx,ebp
c002160d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021611:	39 ce                	cmp    esi,ecx
c0021613:	7e 17                	jle    c002162c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021615:	31 d2                	xor    edx,edx
c0021617:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002161b:	7d 13                	jge    c0021630 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002161d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021621:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021624:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021627:	75 0d                	jne    c0021636 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021629:	42                   	inc    edx
c002162a:	eb eb                	jmp    c0021617 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002162c:	31 c0                	xor    eax,eax
c002162e:	eb 0a                	jmp    c002163a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021630:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021634:	eb 04                	jmp    c002163a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021636:	41                   	inc    ecx
c0021637:	43                   	inc    ebx
c0021638:	eb d7                	jmp    c0021611 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002163a:	5b                   	pop    ebx
c002163b:	5e                   	pop    esi
c002163c:	5f                   	pop    edi
c002163d:	5d                   	pop    ebp
c002163e:	c3                   	ret    

c002163f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002163f:	56                   	push   esi
c0021640:	53                   	push   ebx
c0021641:	52                   	push   edx
c0021642:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021646:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002164a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002164e:	39 0d 80 19 03 c0    	cmp    DWORD PTR ds:0xc0031980,ecx
c0021654:	75 08                	jne    c002165e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021656:	38 05 d4 d7 02 c0    	cmp    BYTE PTR ds:0xc002d7d4,al
c002165c:	74 2b                	je     c0021689 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002165e:	83 ec 0c             	sub    esp,0xc
c0021661:	a2 d4 d7 02 c0       	mov    ds:0xc002d7d4,al
c0021666:	68 a0 19 03 c0       	push   0xc00319a0
c002166b:	0f be c0             	movsx  eax,al
c002166e:	6a 01                	push   0x1
c0021670:	89 0d 80 19 03 c0    	mov    DWORD PTR ds:0xc0031980,ecx
c0021676:	31 db                	xor    ebx,ebx
c0021678:	53                   	push   ebx
c0021679:	51                   	push   ecx
c002167a:	ff 34 85 5c e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd18a4]
c0021681:	e8 5c 4f ff ff       	call   c00165e2 <LogicalDisk::read(unsigned long long, int, void*)>
c0021686:	83 c4 20             	add    esp,0x20
c0021689:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021691:	c7 44 24 14 a0 19 03 c0 	mov    DWORD PTR [esp+0x14],0xc00319a0
c0021699:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002169d:	58                   	pop    eax
c002169e:	5b                   	pop    ebx
c002169f:	5e                   	pop    esi
c00216a0:	e9 9f f0 fd ff       	jmp    c0000744 <memcpy>
c00216a5:	90                   	nop

c00216a6 <ISO9660::tryMount(LogicalDisk*, int)>:
c00216a6:	81 ec 10 08 00 00    	sub    esp,0x810
c00216ac:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00216b3:	83 c0 41             	add    eax,0x41
c00216b6:	0f be c0             	movsx  eax,al
c00216b9:	50                   	push   eax
c00216ba:	8d 44 24 08          	lea    eax,[esp+0x8]
c00216be:	50                   	push   eax
c00216bf:	6a 10                	push   0x10
c00216c1:	e8 79 ff ff ff       	call   c002163f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216c6:	83 c4 10             	add    esp,0x10
c00216c9:	31 c0                	xor    eax,eax
c00216cb:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00216d0:	75 1d                	jne    c00216ef <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216d2:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00216d7:	75 16                	jne    c00216ef <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216d9:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00216de:	75 0f                	jne    c00216ef <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216e0:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00216e5:	75 08                	jne    c00216ef <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216e7:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00216ec:	0f 94 c0             	sete   al
c00216ef:	81 c4 0c 08 00 00    	add    esp,0x80c
c00216f5:	c3                   	ret    

c00216f6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00216f6:	55                   	push   ebp
c00216f7:	57                   	push   edi
c00216f8:	56                   	push   esi
c00216f9:	53                   	push   ebx
c00216fa:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021700:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021707:	85 ed                	test   ebp,ebp
c0021709:	0f 84 d6 01 00 00    	je     c00218e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002170f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021717:	0f 84 c8 01 00 00    	je     c00218e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002171d:	b8 01 00 00 00       	mov    eax,0x1
c0021722:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021726:	0f 85 be 01 00 00    	jne    c00218ea <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c002172c:	31 d2                	xor    edx,edx
c002172e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021735:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021738:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c002173b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002173f:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021742:	89 04 24             	mov    DWORD PTR [esp],eax
c0021745:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021749:	01 f0                	add    eax,esi
c002174b:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002174e:	11 fa                	adc    edx,edi
c0021750:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021754:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021758:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002175c:	19 d1                	sbb    ecx,edx
c002175e:	72 0a                	jb     c002176a <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021760:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021764:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021768:	eb 13                	jmp    c002177d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002176a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002176e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021772:	29 f0                	sub    eax,esi
c0021774:	19 fa                	sbb    edx,edi
c0021776:	89 04 24             	mov    DWORD PTR [esp],eax
c0021779:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002177d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021780:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021783:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021787:	51                   	push   ecx
c0021788:	c1 e0 0b             	shl    eax,0xb
c002178b:	01 c6                	add    esi,eax
c002178d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021791:	11 d7                	adc    edi,edx
c0021793:	50                   	push   eax
c0021794:	89 fa                	mov    edx,edi
c0021796:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002179a:	89 f0                	mov    eax,esi
c002179c:	53                   	push   ebx
c002179d:	0f ac d0 0b          	shrd   eax,edx,0xb
c00217a1:	50                   	push   eax
c00217a2:	e8 98 fe ff ff       	call   c002163f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217ab:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00217ae:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00217b2:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00217b8:	83 c4 10             	add    esp,0x10
c00217bb:	b8 00 08 00 00       	mov    eax,0x800
c00217c0:	29 d0                	sub    eax,edx
c00217c2:	39 c1                	cmp    ecx,eax
c00217c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00217c8:	83 d9 00             	sbb    ecx,0x0
c00217cb:	7d 1c                	jge    c00217e9 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00217cd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00217d2:	75 12                	jne    c00217e6 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00217d4:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00217db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00217e1:	e9 fb 00 00 00       	jmp    c00218e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00217e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00217e9:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00217ec:	31 d2                	xor    edx,edx
c00217ee:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00217f2:	39 c2                	cmp    edx,eax
c00217f4:	7d 14                	jge    c002180a <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00217f6:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00217fd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021801:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021804:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021807:	42                   	inc    edx
c0021808:	eb e8                	jmp    c00217f2 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c002180a:	89 c3                	mov    ebx,eax
c002180c:	85 c0                	test   eax,eax
c002180e:	79 02                	jns    c0021812 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021810:	31 db                	xor    ebx,ebx
c0021812:	99                   	cdq    
c0021813:	01 c3                	add    ebx,eax
c0021815:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c002181c:	01 c6                	add    esi,eax
c002181e:	11 d7                	adc    edi,edx
c0021820:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021824:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021828:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002182b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002182f:	29 c6                	sub    esi,eax
c0021831:	19 d7                	sbb    edi,edx
c0021833:	89 34 24             	mov    DWORD PTR [esp],esi
c0021836:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002183a:	b8 ff 07 00 00       	mov    eax,0x7ff
c002183f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021842:	b8 00 00 00 00       	mov    eax,0x0
c0021847:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002184b:	7d 3e                	jge    c002188b <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c002184d:	52                   	push   edx
c002184e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021852:	50                   	push   eax
c0021853:	53                   	push   ebx
c0021854:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021858:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002185c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021860:	50                   	push   eax
c0021861:	e8 d9 fd ff ff       	call   c002163f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021866:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002186e:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021873:	81 c3 00 08 00 00    	add    ebx,0x800
c0021879:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021881:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021886:	83 c4 10             	add    esp,0x10
c0021889:	eb af                	jmp    c002183a <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c002188b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002188f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021892:	74 32                	je     c00218c6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021894:	50                   	push   eax
c0021895:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021899:	50                   	push   eax
c002189a:	8d 44 24 28          	lea    eax,[esp+0x28]
c002189e:	50                   	push   eax
c002189f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00218a3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00218a7:	0f ac fe 0b          	shrd   esi,edi,0xb
c00218ab:	56                   	push   esi
c00218ac:	e8 8e fd ff ff       	call   c002163f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218b1:	83 c4 0c             	add    esp,0xc
c00218b4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00218b8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00218bc:	50                   	push   eax
c00218bd:	53                   	push   ebx
c00218be:	e8 81 ee fd ff       	call   c0000744 <memcpy>
c00218c3:	83 c4 10             	add    esp,0x10
c00218c6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00218cd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00218d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218d5:	89 38                	mov    DWORD PTR [eax],edi
c00218d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218db:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00218de:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00218e1:	31 c0                	xor    eax,eax
c00218e3:	eb 05                	jmp    c00218ea <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00218e5:	b8 04 00 00 00       	mov    eax,0x4
c00218ea:	81 c4 2c 08 00 00    	add    esp,0x82c
c00218f0:	5b                   	pop    ebx
c00218f1:	5e                   	pop    esi
c00218f2:	5f                   	pop    edi
c00218f3:	5d                   	pop    ebp
c00218f4:	c3                   	ret    
c00218f5:	90                   	nop

c00218f6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00218f6:	55                   	push   ebp
c00218f7:	57                   	push   edi
c00218f8:	56                   	push   esi
c00218f9:	53                   	push   ebx
c00218fa:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021900:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021907:	85 f6                	test   esi,esi
c0021909:	0f 84 64 02 00 00    	je     c0021b73 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c002190f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021917:	0f 84 56 02 00 00    	je     c0021b73 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c002191d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021920:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021923:	75 0a                	jne    c002192f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021925:	b8 07 00 00 00       	mov    eax,0x7
c002192a:	e9 49 02 00 00       	jmp    c0021b78 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c002192f:	50                   	push   eax
c0021930:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021934:	50                   	push   eax
c0021935:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002193c:	53                   	push   ebx
c002193d:	8b 06                	mov    eax,DWORD PTR [esi]
c002193f:	c1 e0 0b             	shl    eax,0xb
c0021942:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021945:	c1 e8 0b             	shr    eax,0xb
c0021948:	50                   	push   eax
c0021949:	e8 f1 fc ff ff       	call   c002163f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002194e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021951:	83 c4 10             	add    esp,0x10
c0021954:	89 c1                	mov    ecx,eax
c0021956:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021959:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002195f:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021962:	84 db                	test   bl,bl
c0021964:	0f 85 90 00 00 00    	jne    c00219fa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c002196a:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021970:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021976:	29 c7                	sub    edi,eax
c0021978:	89 fb                	mov    ebx,edi
c002197a:	c1 fb 1f             	sar    ebx,0x1f
c002197d:	01 f8                	add    eax,edi
c002197f:	11 da                	adc    edx,ebx
c0021981:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021985:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021989:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c002198c:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c002198f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021992:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021995:	89 04 24             	mov    DWORD PTR [esp],eax
c0021998:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002199c:	89 d8                	mov    eax,ebx
c002199e:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00219a1:	ba 00 00 00 00       	mov    edx,0x0
c00219a6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00219aa:	b8 00 00 00 00       	mov    eax,0x0
c00219af:	73 0b                	jae    c00219bc <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c00219b1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00219b4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00219b8:	29 f8                	sub    eax,edi
c00219ba:	19 da                	sbb    edx,ebx
c00219bc:	89 d3                	mov    ebx,edx
c00219be:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00219c1:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00219c4:	09 c3                	or     ebx,eax
c00219c6:	0f 84 59 ff ff ff    	je     c0021925 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00219cc:	55                   	push   ebp
c00219cd:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00219d1:	50                   	push   eax
c00219d2:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00219d9:	53                   	push   ebx
c00219da:	8b 06                	mov    eax,DWORD PTR [esi]
c00219dc:	c1 e0 0b             	shl    eax,0xb
c00219df:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c00219e3:	c1 e8 0b             	shr    eax,0xb
c00219e6:	50                   	push   eax
c00219e7:	e8 53 fc ff ff       	call   c002163f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219ec:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00219ef:	83 c4 10             	add    esp,0x10
c00219f2:	25 ff 07 00 00       	and    eax,0x7ff
c00219f7:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00219fa:	57                   	push   edi
c00219fb:	6a 28                	push   0x28
c00219fd:	6a 00                	push   0x0
c00219ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021a03:	50                   	push   eax
c0021a04:	e8 6f ed fd ff       	call   c0000778 <memset>
c0021a09:	31 d2                	xor    edx,edx
c0021a0b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021a0e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021a14:	89 f8                	mov    eax,edi
c0021a16:	83 c0 21             	add    eax,0x21
c0021a19:	83 d2 00             	adc    edx,0x0
c0021a1c:	89 c7                	mov    edi,eax
c0021a1e:	89 d5                	mov    ebp,edx
c0021a20:	83 c4 10             	add    esp,0x10
c0021a23:	31 c9                	xor    ecx,ecx
c0021a25:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021a2c:	83 f9 28             	cmp    ecx,0x28
c0021a2f:	88 04 24             	mov    BYTE PTR [esp],al
c0021a32:	0f 94 c2             	sete   dl
c0021a35:	88 d0                	mov    al,dl
c0021a37:	ba ff 07 00 00       	mov    edx,0x7ff
c0021a3c:	39 fa                	cmp    edx,edi
c0021a3e:	ba 00 00 00 00       	mov    edx,0x0
c0021a43:	19 ea                	sbb    edx,ebp
c0021a45:	0f 92 c2             	setb   dl
c0021a48:	09 c2                	or     edx,eax
c0021a4a:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021a4e:	0f 94 c0             	sete   al
c0021a51:	08 d0                	or     al,dl
c0021a53:	75 16                	jne    c0021a6b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021a55:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021a59:	74 10                	je     c0021a6b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021a5b:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021a5e:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021a62:	41                   	inc    ecx
c0021a63:	83 c7 01             	add    edi,0x1
c0021a66:	83 d5 00             	adc    ebp,0x0
c0021a69:	eb ba                	jmp    c0021a25 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021a6b:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021a72:	83 ec 0c             	sub    esp,0xc
c0021a75:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021a79:	57                   	push   edi
c0021a7a:	e8 15 ed fd ff       	call   c0000794 <strlen>
c0021a7f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021a87:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021a8b:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021a92:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a95:	5a                   	pop    edx
c0021a96:	25 ff 07 00 00       	and    eax,0x7ff
c0021a9b:	01 c8                	add    eax,ecx
c0021a9d:	59                   	pop    ecx
c0021a9e:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021aa4:	83 e0 02             	and    eax,0x2
c0021aa7:	3c 01                	cmp    al,0x1
c0021aa9:	19 c0                	sbb    eax,eax
c0021aab:	83 c0 02             	add    eax,0x2
c0021aae:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021ab2:	57                   	push   edi
c0021ab3:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021ab7:	50                   	push   eax
c0021ab8:	e8 77 ed fd ff       	call   c0000834 <strcpy>
c0021abd:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021ac1:	83 c4 10             	add    esp,0x10
c0021ac4:	84 c0                	test   al,al
c0021ac6:	75 21                	jne    c0021ae9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021ac8:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021ad0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021ad8:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021ae0:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021ae7:	eb 28                	jmp    c0021b11 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021ae9:	fe c8                	dec    al
c0021aeb:	75 24                	jne    c0021b11 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021aed:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021af5:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021afd:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021b05:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021b0c:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021b11:	0f b6 fb             	movzx  edi,bl
c0021b14:	31 db                	xor    ebx,ebx
c0021b16:	50                   	push   eax
c0021b17:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021b1e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021b22:	50                   	push   eax
c0021b23:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021b2a:	e8 15 ec fd ff       	call   c0000744 <memcpy>
c0021b2f:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021b36:	89 f9                	mov    ecx,edi
c0021b38:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021b3e:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021b41:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b44:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021b47:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b4a:	83 c4 10             	add    esp,0x10
c0021b4d:	39 c7                	cmp    edi,eax
c0021b4f:	89 df                	mov    edi,ebx
c0021b51:	19 d7                	sbb    edi,edx
c0021b53:	72 10                	jb     c0021b65 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021b55:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021b5c:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021b63:	eb 0a                	jmp    c0021b6f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021b65:	29 c8                	sub    eax,ecx
c0021b67:	19 da                	sbb    edx,ebx
c0021b69:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b6c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b6f:	31 c0                	xor    eax,eax
c0021b71:	eb 05                	jmp    c0021b78 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021b73:	b8 04 00 00 00       	mov    eax,0x4
c0021b78:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021b7e:	5b                   	pop    ebx
c0021b7f:	5e                   	pop    esi
c0021b80:	5f                   	pop    edi
c0021b81:	5d                   	pop    ebp
c0021b82:	c3                   	ret    

c0021b83 <readRoot(unsigned int*, unsigned int*, char)>:
c0021b83:	81 ec 40 08 00 00    	sub    esp,0x840
c0021b89:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021b91:	50                   	push   eax
c0021b92:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021b96:	50                   	push   eax
c0021b97:	6a 10                	push   0x10
c0021b99:	e8 a1 fa ff ff       	call   c002163f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b9e:	83 c4 0c             	add    esp,0xc
c0021ba1:	6a 22                	push   0x22
c0021ba3:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021baa:	50                   	push   eax
c0021bab:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021baf:	50                   	push   eax
c0021bb0:	e8 8f eb fd ff       	call   c0000744 <memcpy>
c0021bb5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021bbc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021bc0:	89 10                	mov    DWORD PTR [eax],edx
c0021bc2:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021bc9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021bcd:	89 10                	mov    DWORD PTR [eax],edx
c0021bcf:	b0 01                	mov    al,0x1
c0021bd1:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021bd7:	c3                   	ret    

c0021bd8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021bd8:	55                   	push   ebp
c0021bd9:	57                   	push   edi
c0021bda:	56                   	push   esi
c0021bdb:	53                   	push   ebx
c0021bdc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021be2:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021be9:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021bf0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021bf4:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021bf8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021bfc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021c00:	75 03                	jne    c0021c05 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021c02:	83 c3 02             	add    ebx,0x2
c0021c05:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021c08:	75 03                	jne    c0021c0d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021c0a:	43                   	inc    ebx
c0021c0b:	eb f8                	jmp    c0021c05 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021c0d:	51                   	push   ecx
c0021c0e:	68 00 01 00 00       	push   0x100
c0021c13:	6a 00                	push   0x0
c0021c15:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c19:	50                   	push   eax
c0021c1a:	e8 59 eb fd ff       	call   c0000778 <memset>
c0021c1f:	83 c4 10             	add    esp,0x10
c0021c22:	31 d2                	xor    edx,edx
c0021c24:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021c27:	84 c0                	test   al,al
c0021c29:	74 21                	je     c0021c4c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021c2b:	3c 2f                	cmp    al,0x2f
c0021c2d:	75 0b                	jne    c0021c3a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021c2f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021c33:	bd 01 00 00 00       	mov    ebp,0x1
c0021c38:	eb 14                	jmp    c0021c4e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021c3a:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021c3d:	80 f9 19             	cmp    cl,0x19
c0021c40:	77 03                	ja     c0021c45 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021c42:	83 e8 20             	sub    eax,0x20
c0021c45:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021c49:	42                   	inc    edx
c0021c4a:	eb d8                	jmp    c0021c24 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021c4c:	31 ed                	xor    ebp,ebp
c0021c4e:	83 ec 0c             	sub    esp,0xc
c0021c51:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021c58:	e8 e6 db fe ff       	call   c000f843 <malloc>
c0021c5d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021c64:	89 c6                	mov    esi,eax
c0021c66:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021c6c:	c1 ef 0b             	shr    edi,0xb
c0021c6f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021c76:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021c7a:	83 c4 10             	add    esp,0x10
c0021c7d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021c82:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021c86:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021c8d:	74 28                	je     c0021cb7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021c8f:	52                   	push   edx
c0021c90:	57                   	push   edi
c0021c91:	50                   	push   eax
c0021c92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021c96:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021c9d:	e8 9d f9 ff ff       	call   c002163f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ca2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021ca6:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021cad:	05 00 08 00 00       	add    eax,0x800
c0021cb2:	83 c4 10             	add    esp,0x10
c0021cb5:	eb cb                	jmp    c0021c82 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021cb7:	83 ec 0c             	sub    esp,0xc
c0021cba:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021cbe:	57                   	push   edi
c0021cbf:	e8 d0 ea fd ff       	call   c0000794 <strlen>
c0021cc4:	50                   	push   eax
c0021cc5:	57                   	push   edi
c0021cc6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021ccd:	56                   	push   esi
c0021cce:	e8 2a f9 ff ff       	call   c00215fd <__memmem(unsigned char*, int, unsigned char*, int)>
c0021cd3:	83 c4 20             	add    esp,0x20
c0021cd6:	85 c0                	test   eax,eax
c0021cd8:	75 13                	jne    c0021ced <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021cda:	83 ec 0c             	sub    esp,0xc
c0021cdd:	56                   	push   esi
c0021cde:	e8 70 db fe ff       	call   c000f853 <free>
c0021ce3:	83 c4 10             	add    esp,0x10
c0021ce6:	31 c0                	xor    eax,eax
c0021ce8:	e9 b3 00 00 00       	jmp    c0021da0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ced:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021cf1:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021cf5:	c1 e7 08             	shl    edi,0x8
c0021cf8:	c1 e2 10             	shl    edx,0x10
c0021cfb:	09 d7                	or     edi,edx
c0021cfd:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021d01:	09 d7                	or     edi,edx
c0021d03:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021d07:	c1 e2 18             	shl    edx,0x18
c0021d0a:	09 d7                	or     edi,edx
c0021d0c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021d10:	89 d1                	mov    ecx,edx
c0021d12:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021d16:	c1 e1 08             	shl    ecx,0x8
c0021d19:	c1 e2 10             	shl    edx,0x10
c0021d1c:	09 ca                	or     edx,ecx
c0021d1e:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021d22:	09 ca                	or     edx,ecx
c0021d24:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021d28:	c1 e1 18             	shl    ecx,0x18
c0021d2b:	09 ca                	or     edx,ecx
c0021d2d:	89 e9                	mov    ecx,ebp
c0021d2f:	84 c9                	test   cl,cl
c0021d31:	74 3c                	je     c0021d6f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021d33:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021d37:	83 ec 0c             	sub    esp,0xc
c0021d3a:	56                   	push   esi
c0021d3b:	e8 13 db fe ff       	call   c000f853 <free>
c0021d40:	83 c4 0c             	add    esp,0xc
c0021d43:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d4a:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021d4f:	50                   	push   eax
c0021d50:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d57:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021d62:	52                   	push   edx
c0021d63:	57                   	push   edi
c0021d64:	53                   	push   ebx
c0021d65:	e8 6e fe ff ff       	call   c0021bd8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021d6a:	83 c4 20             	add    esp,0x20
c0021d6d:	eb 31                	jmp    c0021da0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021d6f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021d72:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021d79:	d0 e8                	shr    al,1
c0021d7b:	89 3b                	mov    DWORD PTR [ebx],edi
c0021d7d:	83 e0 01             	and    eax,0x1
c0021d80:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021d87:	83 ec 0c             	sub    esp,0xc
c0021d8a:	89 13                	mov    DWORD PTR [ebx],edx
c0021d8c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021d93:	89 03                	mov    DWORD PTR [ebx],eax
c0021d95:	56                   	push   esi
c0021d96:	e8 b8 da fe ff       	call   c000f853 <free>
c0021d9b:	83 c4 10             	add    esp,0x10
c0021d9e:	b0 01                	mov    al,0x1
c0021da0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021da6:	5b                   	pop    ebx
c0021da7:	5e                   	pop    esi
c0021da8:	5f                   	pop    edi
c0021da9:	5d                   	pop    ebp
c0021daa:	c3                   	ret    

c0021dab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021dab:	55                   	push   ebp
c0021dac:	57                   	push   edi
c0021dad:	56                   	push   esi
c0021dae:	53                   	push   ebx
c0021daf:	83 ec 20             	sub    esp,0x20
c0021db2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021db6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021dba:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021dbe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021dc6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021dce:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021dd3:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021dd9:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021ddf:	57                   	push   edi
c0021de0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021de4:	50                   	push   eax
c0021de5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021de9:	50                   	push   eax
c0021dea:	e8 94 fd ff ff       	call   c0021b83 <readRoot(unsigned int*, unsigned int*, char)>
c0021def:	5a                   	pop    edx
c0021df0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021df4:	e8 9b e9 fd ff       	call   c0000794 <strlen>
c0021df9:	83 c4 10             	add    esp,0x10
c0021dfc:	83 f8 03             	cmp    eax,0x3
c0021dff:	77 17                	ja     c0021e18 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021e01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e05:	89 03                	mov    DWORD PTR [ebx],eax
c0021e07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e0b:	89 06                	mov    DWORD PTR [esi],eax
c0021e0d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021e14:	b0 01                	mov    al,0x1
c0021e16:	eb 19                	jmp    c0021e31 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021e18:	50                   	push   eax
c0021e19:	55                   	push   ebp
c0021e1a:	57                   	push   edi
c0021e1b:	56                   	push   esi
c0021e1c:	53                   	push   ebx
c0021e1d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e21:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021e29:	e8 aa fd ff ff       	call   c0021bd8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e2e:	83 c4 20             	add    esp,0x20
c0021e31:	83 c4 1c             	add    esp,0x1c
c0021e34:	5b                   	pop    ebx
c0021e35:	5e                   	pop    esi
c0021e36:	5f                   	pop    edi
c0021e37:	5d                   	pop    ebp
c0021e38:	c3                   	ret    
c0021e39:	90                   	nop

c0021e3a <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021e3a:	57                   	push   edi
c0021e3b:	56                   	push   esi
c0021e3c:	53                   	push   ebx
c0021e3d:	83 ec 10             	sub    esp,0x10
c0021e40:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021e44:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021e48:	85 ff                	test   edi,edi
c0021e4a:	0f 84 9d 00 00 00    	je     c0021eed <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021e50:	85 f6                	test   esi,esi
c0021e52:	0f 84 95 00 00 00    	je     c0021eed <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021e58:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021e5d:	74 17                	je     c0021e76 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021e5f:	83 ec 0c             	sub    esp,0xc
c0021e62:	68 3b c7 02 c0       	push   0xc002c73b
c0021e67:	e8 30 0f ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0021e6c:	83 c4 10             	add    esp,0x10
c0021e6f:	b8 03 00 00 00       	mov    eax,0x3
c0021e74:	eb 7c                	jmp    c0021ef2 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021e76:	83 ec 0c             	sub    esp,0xc
c0021e79:	6a 1c                	push   0x1c
c0021e7b:	e8 c3 d9 fe ff       	call   c000f843 <malloc>
c0021e80:	89 07                	mov    DWORD PTR [edi],eax
c0021e82:	89 c3                	mov    ebx,eax
c0021e84:	58                   	pop    eax
c0021e85:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021e89:	50                   	push   eax
c0021e8a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021e8d:	50                   	push   eax
c0021e8e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e92:	50                   	push   eax
c0021e93:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e97:	50                   	push   eax
c0021e98:	56                   	push   esi
c0021e99:	e8 0d ff ff ff       	call   c0021dab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021e9e:	83 c4 20             	add    esp,0x20
c0021ea1:	84 c0                	test   al,al
c0021ea3:	74 07                	je     c0021eac <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021ea5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021eaa:	74 0b                	je     c0021eb7 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021eac:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021eb0:	b8 01 00 00 00       	mov    eax,0x1
c0021eb5:	eb 3b                	jmp    c0021ef2 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021eb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ebb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021ebf:	89 03                	mov    DWORD PTR [ebx],eax
c0021ec1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021ec8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ecc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021ed3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021eda:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021edd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021ee4:	8a 06                	mov    al,BYTE PTR [esi]
c0021ee6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021ee9:	31 c0                	xor    eax,eax
c0021eeb:	eb 05                	jmp    c0021ef2 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021eed:	b8 04 00 00 00       	mov    eax,0x4
c0021ef2:	83 c4 10             	add    esp,0x10
c0021ef5:	5b                   	pop    ebx
c0021ef6:	5e                   	pop    esi
c0021ef7:	5f                   	pop    edi
c0021ef8:	c3                   	ret    
c0021ef9:	90                   	nop

c0021efa <ISO9660::exists(char const*)>:
c0021efa:	83 ec 28             	sub    esp,0x28
c0021efd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021f01:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021f05:	52                   	push   edx
c0021f06:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021f09:	52                   	push   edx
c0021f0a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021f0e:	52                   	push   edx
c0021f0f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021f13:	52                   	push   edx
c0021f14:	50                   	push   eax
c0021f15:	e8 91 fe ff ff       	call   c0021dab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f1a:	83 c4 3c             	add    esp,0x3c
c0021f1d:	c3                   	ret    

c0021f1e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021f1e:	56                   	push   esi
c0021f1f:	53                   	push   ebx
c0021f20:	83 ec 14             	sub    esp,0x14
c0021f23:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021f27:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021f2b:	85 db                	test   ebx,ebx
c0021f2d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021f31:	0f 94 c2             	sete   dl
c0021f34:	85 f6                	test   esi,esi
c0021f36:	0f 94 c0             	sete   al
c0021f39:	08 c2                	or     dl,al
c0021f3b:	75 68                	jne    c0021fa5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021f3d:	85 c9                	test   ecx,ecx
c0021f3f:	74 64                	je     c0021fa5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021f41:	83 ec 0c             	sub    esp,0xc
c0021f44:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021f47:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f4b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021f51:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f58:	50                   	push   eax
c0021f59:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021f5c:	50                   	push   eax
c0021f5d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f61:	50                   	push   eax
c0021f62:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f66:	50                   	push   eax
c0021f67:	51                   	push   ecx
c0021f68:	e8 3e fe ff ff       	call   c0021dab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f6d:	83 c4 20             	add    esp,0x20
c0021f70:	ba 01 00 00 00       	mov    edx,0x1
c0021f75:	84 c0                	test   al,al
c0021f77:	74 31                	je     c0021faa <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f7d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f84:	89 03                	mov    DWORD PTR [ebx],eax
c0021f86:	ba 00 00 00 00       	mov    edx,0x0
c0021f8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f8f:	85 c0                	test   eax,eax
c0021f91:	0f 95 06             	setne  BYTE PTR [esi]
c0021f94:	74 14                	je     c0021faa <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f96:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021f9c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fa3:	eb 05                	jmp    c0021faa <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021fa5:	ba 04 00 00 00       	mov    edx,0x4
c0021faa:	83 c4 14             	add    esp,0x14
c0021fad:	89 d0                	mov    eax,edx
c0021faf:	5b                   	pop    ebx
c0021fb0:	5e                   	pop    esi
c0021fb1:	c3                   	ret    

c0021fb2 <ISO9660::openDir(char const*, void**)>:
c0021fb2:	57                   	push   edi
c0021fb3:	56                   	push   esi
c0021fb4:	53                   	push   ebx
c0021fb5:	83 ec 10             	sub    esp,0x10
c0021fb8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021fbc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021fc0:	85 ff                	test   edi,edi
c0021fc2:	0f 84 95 00 00 00    	je     c002205d <ISO9660::openDir(char const*, void**)+0xab>
c0021fc8:	85 f6                	test   esi,esi
c0021fca:	0f 84 8d 00 00 00    	je     c002205d <ISO9660::openDir(char const*, void**)+0xab>
c0021fd0:	83 ec 0c             	sub    esp,0xc
c0021fd3:	6a 1c                	push   0x1c
c0021fd5:	e8 69 d8 fe ff       	call   c000f843 <malloc>
c0021fda:	89 07                	mov    DWORD PTR [edi],eax
c0021fdc:	89 c3                	mov    ebx,eax
c0021fde:	59                   	pop    ecx
c0021fdf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fe3:	50                   	push   eax
c0021fe4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021fe7:	50                   	push   eax
c0021fe8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fec:	50                   	push   eax
c0021fed:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ff1:	50                   	push   eax
c0021ff2:	56                   	push   esi
c0021ff3:	e8 b3 fd ff ff       	call   c0021dab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ff8:	83 c4 20             	add    esp,0x20
c0021ffb:	84 c0                	test   al,al
c0021ffd:	74 07                	je     c0022006 <ISO9660::openDir(char const*, void**)+0x54>
c0021fff:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022004:	75 21                	jne    c0022027 <ISO9660::openDir(char const*, void**)+0x75>
c0022006:	0f b6 c0             	movzx  eax,al
c0022009:	52                   	push   edx
c002200a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002200e:	50                   	push   eax
c002200f:	68 61 c7 02 c0       	push   0xc002c761
c0022014:	e8 83 0d ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0022019:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002201d:	83 c4 10             	add    esp,0x10
c0022020:	b8 01 00 00 00       	mov    eax,0x1
c0022025:	eb 3b                	jmp    c0022062 <ISO9660::openDir(char const*, void**)+0xb0>
c0022027:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002202b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002202f:	89 03                	mov    DWORD PTR [ebx],eax
c0022031:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022038:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002203c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022043:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002204a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002204d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022054:	8a 06                	mov    al,BYTE PTR [esi]
c0022056:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022059:	31 c0                	xor    eax,eax
c002205b:	eb 05                	jmp    c0022062 <ISO9660::openDir(char const*, void**)+0xb0>
c002205d:	b8 04 00 00 00       	mov    eax,0x4
c0022062:	83 c4 10             	add    esp,0x10
c0022065:	5b                   	pop    ebx
c0022066:	5e                   	pop    esi
c0022067:	5f                   	pop    edi
c0022068:	c3                   	ret    
c0022069:	90                   	nop

c002206a <ISO9660::ISO9660()>:
c002206a:	83 ec 0c             	sub    esp,0xc
c002206d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022071:	83 ec 0c             	sub    esp,0xc
c0022074:	50                   	push   eax
c0022075:	e8 26 10 ff ff       	call   c00130a0 <Filesystem::Filesystem()>
c002207a:	83 c4 10             	add    esp,0x10
c002207d:	ba 84 c7 02 c0       	mov    edx,0xc002c784
c0022082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022086:	89 10                	mov    DWORD PTR [eax],edx
c0022088:	90                   	nop
c0022089:	83 c4 0c             	add    esp,0xc
c002208c:	c3                   	ret    
c002208d:	90                   	nop

c002208e <SoundChannel::~SoundChannel()>:
c002208e:	83 ec 0c             	sub    esp,0xc
c0022091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022095:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022098:	83 ec 0c             	sub    esp,0xc
c002209b:	50                   	push   eax
c002209c:	e8 b2 d7 fe ff       	call   c000f853 <free>
c00220a1:	83 c4 10             	add    esp,0x10
c00220a4:	90                   	nop
c00220a5:	83 c4 0c             	add    esp,0xc
c00220a8:	c3                   	ret    
c00220a9:	90                   	nop

c00220aa <SoundChannel::setSpeed(float)>:
c00220aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00220b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00220b5:	c3                   	ret    

c00220b6 <SoundChannel::getSpeed()>:
c00220b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220ba:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00220bd:	c3                   	ret    

c00220be <SoundChannel::setVolume(int)>:
c00220be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220c2:	83 f8 64             	cmp    eax,0x64
c00220c5:	7e 05                	jle    c00220cc <SoundChannel::setVolume(int)+0xe>
c00220c7:	b8 64 00 00 00       	mov    eax,0x64
c00220cc:	85 c0                	test   eax,eax
c00220ce:	79 02                	jns    c00220d2 <SoundChannel::setVolume(int)+0x14>
c00220d0:	31 c0                	xor    eax,eax
c00220d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00220d6:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00220d9:	c3                   	ret    

c00220da <SoundChannel::getVolume()>:
c00220da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220de:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00220e1:	c3                   	ret    

c00220e2 <SoundChannel::pause()>:
c00220e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220e6:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00220ea:	c3                   	ret    
c00220eb:	90                   	nop

c00220ec <SoundChannel::SoundChannel(int, int, int, int)>:
c00220ec:	83 ec 1c             	sub    esp,0x1c
c00220ef:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00220f3:	e8 ea ff ff ff       	call   c00220e2 <SoundChannel::pause()>
c00220f8:	83 c4 04             	add    esp,0x4
c00220fb:	6a 50                	push   0x50
c00220fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022101:	e8 b8 ff ff ff       	call   c00220be <SoundChannel::setVolume(int)>
c0022106:	83 c4 08             	add    esp,0x8
c0022109:	a1 fc c7 02 c0       	mov    eax,ds:0xc002c7fc
c002210e:	50                   	push   eax
c002210f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022113:	e8 92 ff ff ff       	call   c00220aa <SoundChannel::setSpeed(float)>
c0022118:	83 c4 08             	add    esp,0x8
c002211b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002211f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022123:	89 10                	mov    DWORD PTR [eax],edx
c0022125:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022129:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002212d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022134:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022138:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002213b:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022140:	75 23                	jne    c0022165 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022142:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022146:	8b 10                	mov    edx,DWORD PTR [eax]
c0022148:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002214c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002214f:	0f af c2             	imul   eax,edx
c0022152:	85 c0                	test   eax,eax
c0022154:	79 03                	jns    c0022159 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022156:	83 c0 03             	add    eax,0x3
c0022159:	c1 f8 02             	sar    eax,0x2
c002215c:	05 a0 0f 00 00       	add    eax,0xfa0
c0022161:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022169:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002216d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022174:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002217b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002217f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002218a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002218d:	c1 e0 02             	shl    eax,0x2
c0022190:	83 ec 0c             	sub    esp,0xc
c0022193:	50                   	push   eax
c0022194:	e8 aa d6 fe ff       	call   c000f843 <malloc>
c0022199:	83 c4 10             	add    esp,0x10
c002219c:	89 c2                	mov    edx,eax
c002219e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221a2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00221a5:	83 ec 04             	sub    esp,0x4
c00221a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00221ac:	50                   	push   eax
c00221ad:	6a 01                	push   0x1
c00221af:	6a 04                	push   0x4
c00221b1:	e8 e9 69 fe ff       	call   c0008b9f <src_new>
c00221b6:	83 c4 10             	add    esp,0x10
c00221b9:	89 c2                	mov    edx,eax
c00221bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221bf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00221c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221c6:	85 c0                	test   eax,eax
c00221c8:	74 10                	je     c00221da <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00221ca:	83 ec 0c             	sub    esp,0xc
c00221cd:	68 e0 c7 02 c0       	push   0xc002c7e0
c00221d2:	e8 a0 82 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c00221d7:	83 c4 10             	add    esp,0x10
c00221da:	a0 a0 25 03 c0       	mov    al,ds:0xc00325a0
c00221df:	83 f0 01             	xor    eax,0x1
c00221e2:	84 c0                	test   al,al
c00221e4:	74 57                	je     c002223d <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00221e6:	a1 00 c8 02 c0       	mov    eax,ds:0xc002c800
c00221eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221ef:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00221f7:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00221ff:	7f 35                	jg     c0022236 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022201:	83 ec 0c             	sub    esp,0xc
c0022204:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022208:	e8 9a 4f 00 00       	call   c00271a7 <__floatsisf>
c002220d:	83 c4 10             	add    esp,0x10
c0022210:	8b 15 00 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c800
c0022216:	83 ec 08             	sub    esp,0x8
c0022219:	52                   	push   edx
c002221a:	50                   	push   eax
c002221b:	e8 99 4b 00 00       	call   c0026db9 <__mulsf3>
c0022220:	83 c4 10             	add    esp,0x10
c0022223:	89 c2                	mov    edx,eax
c0022225:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022229:	89 14 85 a0 21 03 c0 	mov    DWORD PTR [eax*4-0x3ffcde60],edx
c0022230:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022234:	eb c1                	jmp    c00221f7 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022236:	c6 05 a0 25 03 c0 01 	mov    BYTE PTR ds:0xc00325a0,0x1
c002223d:	90                   	nop
c002223e:	83 c4 1c             	add    esp,0x1c
c0022241:	c3                   	ret    

c0022242 <SoundChannel::play()>:
c0022242:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022246:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c002224a:	c3                   	ret    
c002224b:	90                   	nop

c002224c <SoundChannel::paused()>:
c002224c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022250:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022253:	c3                   	ret    

c0022254 <SoundChannel::getSampleRate()>:
c0022254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022258:	8b 00                	mov    eax,DWORD PTR [eax]
c002225a:	c3                   	ret    
c002225b:	90                   	nop

c002225c <SoundChannel::getBits()>:
c002225c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022260:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022263:	c3                   	ret    

c0022264 <SoundChannel::getBufferUsed()>:
c0022264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022268:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002226b:	c3                   	ret    

c002226c <SoundChannel::getBufferSize()>:
c002226c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022270:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022273:	c3                   	ret    

c0022274 <SoundChannel::unbuffer(float*, int, int)>:
c0022274:	56                   	push   esi
c0022275:	53                   	push   ebx
c0022276:	83 ec 40             	sub    esp,0x40
c0022279:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002227d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022280:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022284:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022287:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002228b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002228f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022293:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022297:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002229b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002229f:	e8 03 4f 00 00       	call   c00271a7 <__floatsisf>
c00222a4:	5a                   	pop    edx
c00222a5:	89 c6                	mov    esi,eax
c00222a7:	ff 33                	push   DWORD PTR [ebx]
c00222a9:	e8 f9 4e 00 00       	call   c00271a7 <__floatsisf>
c00222ae:	59                   	pop    ecx
c00222af:	5a                   	pop    edx
c00222b0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00222b3:	50                   	push   eax
c00222b4:	e8 00 4b 00 00       	call   c0026db9 <__mulsf3>
c00222b9:	59                   	pop    ecx
c00222ba:	5a                   	pop    edx
c00222bb:	50                   	push   eax
c00222bc:	56                   	push   esi
c00222bd:	e8 ba 4c 00 00       	call   c0026f7c <__divsf3>
c00222c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00222c5:	e8 ad 61 00 00       	call   c0028477 <__extendsfdf2>
c00222ca:	59                   	pop    ecx
c00222cb:	5e                   	pop    esi
c00222cc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00222d0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00222d4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00222dc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00222e0:	50                   	push   eax
c00222e1:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00222e4:	e8 ab 64 fe ff       	call   c0008794 <src_process>
c00222e9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00222ed:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00222f0:	83 c4 0c             	add    esp,0xc
c00222f3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00222f6:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00222f9:	29 d0                	sub    eax,edx
c00222fb:	c1 e0 02             	shl    eax,0x2
c00222fe:	50                   	push   eax
c00222ff:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022302:	50                   	push   eax
c0022303:	51                   	push   ecx
c0022304:	e8 73 e3 fd ff       	call   c000067c <memmove>
c0022309:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002230d:	83 c4 44             	add    esp,0x44
c0022310:	5b                   	pop    ebx
c0022311:	5e                   	pop    esi
c0022312:	c3                   	ret    
c0022313:	90                   	nop

c0022314 <SoundChannel::buffer8(unsigned char*, int)>:
c0022314:	55                   	push   ebp
c0022315:	57                   	push   edi
c0022316:	56                   	push   esi
c0022317:	53                   	push   ebx
c0022318:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002231c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022320:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022323:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022327:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002232a:	74 7a                	je     c00223a6 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002232c:	85 ff                	test   edi,edi
c002232e:	7e 76                	jle    c00223a6 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022330:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022334:	8d 70 01             	lea    esi,[eax+0x1]
c0022337:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002233a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002233d:	8b 1c 9d a0 21 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcde60]
c0022344:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022347:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002234a:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002234d:	74 5e                	je     c00223ad <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002234f:	83 ff 01             	cmp    edi,0x1
c0022352:	74 4b                	je     c002239f <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022354:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022358:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002235b:	8d 70 01             	lea    esi,[eax+0x1]
c002235e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022361:	8b 1c 9d a0 21 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcde60]
c0022368:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002236b:	b8 02 00 00 00       	mov    eax,0x2
c0022370:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022373:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022376:	75 23                	jne    c002239b <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022378:	eb 27                	jmp    c00223a1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002237a:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002237f:	8d 71 01             	lea    esi,[ecx+0x1]
c0022382:	40                   	inc    eax
c0022383:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022386:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022389:	8b 1c 9d a0 21 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcde60]
c0022390:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022393:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022396:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022399:	74 06                	je     c00223a1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002239b:	39 c7                	cmp    edi,eax
c002239d:	75 db                	jne    c002237a <SoundChannel::buffer8(unsigned char*, int)+0x66>
c002239f:	89 f8                	mov    eax,edi
c00223a1:	5b                   	pop    ebx
c00223a2:	5e                   	pop    esi
c00223a3:	5f                   	pop    edi
c00223a4:	5d                   	pop    ebp
c00223a5:	c3                   	ret    
c00223a6:	5b                   	pop    ebx
c00223a7:	31 c0                	xor    eax,eax
c00223a9:	5e                   	pop    esi
c00223aa:	5f                   	pop    edi
c00223ab:	5d                   	pop    ebp
c00223ac:	c3                   	ret    
c00223ad:	b8 01 00 00 00       	mov    eax,0x1
c00223b2:	eb ed                	jmp    c00223a1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00223b4 <SoundDevice::SoundDevice(char const*)>:
c00223b4:	83 ec 1c             	sub    esp,0x1c
c00223b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223bb:	83 ec 08             	sub    esp,0x8
c00223be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00223c2:	50                   	push   eax
c00223c3:	e8 ea 1f ff ff       	call   c00143b2 <Device::Device(char const*)>
c00223c8:	83 c4 10             	add    esp,0x10
c00223cb:	ba 0c c8 02 c0       	mov    edx,0xc002c80c
c00223d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223d4:	89 10                	mov    DWORD PTR [eax],edx
c00223d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223da:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00223e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223e8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00223f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00223fa:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00223ff:	7f 19                	jg     c002241a <SoundDevice::SoundDevice(char const*)+0x66>
c0022401:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022405:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022409:	83 c2 54             	add    edx,0x54
c002240c:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022414:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022418:	eb e0                	jmp    c00223fa <SoundDevice::SoundDevice(char const*)+0x46>
c002241a:	90                   	nop
c002241b:	83 c4 1c             	add    esp,0x1c
c002241e:	c3                   	ret    
c002241f:	90                   	nop

c0022420 <SoundDevice::~SoundDevice()>:
c0022420:	53                   	push   ebx
c0022421:	83 ec 18             	sub    esp,0x18
c0022424:	ba 0c c8 02 c0       	mov    edx,0xc002c80c
c0022429:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002242d:	89 10                	mov    DWORD PTR [eax],edx
c002242f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022437:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002243c:	7f 46                	jg     c0022484 <SoundDevice::~SoundDevice()+0x64>
c002243e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022442:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022446:	83 c2 54             	add    edx,0x54
c0022449:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c002244d:	85 c0                	test   eax,eax
c002244f:	74 2d                	je     c002247e <SoundDevice::~SoundDevice()+0x5e>
c0022451:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022455:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022459:	83 c2 54             	add    edx,0x54
c002245c:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022460:	85 db                	test   ebx,ebx
c0022462:	74 1a                	je     c002247e <SoundDevice::~SoundDevice()+0x5e>
c0022464:	83 ec 0c             	sub    esp,0xc
c0022467:	53                   	push   ebx
c0022468:	e8 21 fc ff ff       	call   c002208e <SoundChannel::~SoundChannel()>
c002246d:	83 c4 10             	add    esp,0x10
c0022470:	83 ec 08             	sub    esp,0x8
c0022473:	6a 2c                	push   0x2c
c0022475:	53                   	push   ebx
c0022476:	e8 41 08 ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c002247b:	83 c4 10             	add    esp,0x10
c002247e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022482:	eb b3                	jmp    c0022437 <SoundDevice::~SoundDevice()+0x17>
c0022484:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022488:	83 ec 0c             	sub    esp,0xc
c002248b:	50                   	push   eax
c002248c:	e8 03 1c ff ff       	call   c0014094 <Device::~Device()>
c0022491:	83 c4 10             	add    esp,0x10
c0022494:	90                   	nop
c0022495:	83 c4 18             	add    esp,0x18
c0022498:	5b                   	pop    ebx
c0022499:	c3                   	ret    

c002249a <SoundDevice::~SoundDevice()>:
c002249a:	83 ec 0c             	sub    esp,0xc
c002249d:	83 ec 0c             	sub    esp,0xc
c00224a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224a4:	e8 77 ff ff ff       	call   c0022420 <SoundDevice::~SoundDevice()>
c00224a9:	83 c4 10             	add    esp,0x10
c00224ac:	83 ec 08             	sub    esp,0x8
c00224af:	68 e4 01 00 00       	push   0x1e4
c00224b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224b8:	e8 ff 07 ff ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c00224bd:	83 c4 10             	add    esp,0x10
c00224c0:	83 c4 0c             	add    esp,0xc
c00224c3:	c3                   	ret    

c00224c4 <SoundDevice::getFreeChannelNum()>:
c00224c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00224c8:	31 c0                	xor    eax,eax
c00224ca:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00224d2:	74 09                	je     c00224dd <SoundDevice::getFreeChannelNum()+0x19>
c00224d4:	40                   	inc    eax
c00224d5:	83 f8 20             	cmp    eax,0x20
c00224d8:	75 f0                	jne    c00224ca <SoundDevice::getFreeChannelNum()+0x6>
c00224da:	83 c8 ff             	or     eax,0xffffffff
c00224dd:	c3                   	ret    

c00224de <SoundDevice::addChannel(SoundChannel*)>:
c00224de:	56                   	push   esi
c00224df:	53                   	push   ebx
c00224e0:	51                   	push   ecx
c00224e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00224e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00224e9:	53                   	push   ebx
c00224ea:	e8 d5 ff ff ff       	call   c00224c4 <SoundDevice::getFreeChannelNum()>
c00224ef:	5a                   	pop    edx
c00224f0:	83 f8 ff             	cmp    eax,0xffffffff
c00224f3:	74 51                	je     c0022546 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00224f5:	85 f6                	test   esi,esi
c00224f7:	74 4d                	je     c0022546 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00224f9:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022500:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022507:	75 30                	jne    c0022539 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022509:	83 ec 0c             	sub    esp,0xc
c002250c:	56                   	push   esi
c002250d:	e8 42 fd ff ff       	call   c0022254 <SoundChannel::getSampleRate()>
c0022512:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022518:	89 34 24             	mov    DWORD PTR [esp],esi
c002251b:	e8 3c fd ff ff       	call   c002225c <SoundChannel::getBits()>
c0022520:	83 c4 0c             	add    esp,0xc
c0022523:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022529:	8b 13                	mov    edx,DWORD PTR [ebx]
c002252b:	50                   	push   eax
c002252c:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022532:	53                   	push   ebx
c0022533:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022536:	83 c4 10             	add    esp,0x10
c0022539:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002253f:	b8 01 00 00 00       	mov    eax,0x1
c0022544:	eb 03                	jmp    c0022549 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022546:	83 c8 ff             	or     eax,0xffffffff
c0022549:	5a                   	pop    edx
c002254a:	5b                   	pop    ebx
c002254b:	5e                   	pop    esi
c002254c:	c3                   	ret    
c002254d:	90                   	nop

c002254e <SoundDevice::removeChannel(int)>:
c002254e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022556:	83 fa 1f             	cmp    edx,0x1f
c0022559:	77 23                	ja     c002257e <SoundDevice::removeChannel(int)+0x30>
c002255b:	8d 14 90             	lea    edx,[eax+edx*4]
c002255e:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022565:	74 17                	je     c002257e <SoundDevice::removeChannel(int)+0x30>
c0022567:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022571:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022577:	75 05                	jne    c002257e <SoundDevice::removeChannel(int)+0x30>
c0022579:	8b 00                	mov    eax,DWORD PTR [eax]
c002257b:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c002257e:	c3                   	ret    
c002257f:	90                   	nop

c0022580 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022580:	57                   	push   edi
c0022581:	56                   	push   esi
c0022582:	53                   	push   ebx
c0022583:	31 db                	xor    ebx,ebx
c0022585:	83 ec 10             	sub    esp,0x10
c0022588:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002258c:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022590:	0f 8d cb 00 00 00    	jge    c0022661 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022596:	83 ec 0c             	sub    esp,0xc
c0022599:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002259d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00225a0:	e8 d2 5e 00 00       	call   c0028477 <__extendsfdf2>
c00225a5:	83 c4 10             	add    esp,0x10
c00225a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225b0:	68 00 00 f0 3f       	push   0x3ff00000
c00225b5:	6a 00                	push   0x0
c00225b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225bf:	e8 3f 4e 00 00       	call   c0027403 <__adddf3>
c00225c4:	83 c4 10             	add    esp,0x10
c00225c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225cf:	68 00 00 e0 3f       	push   0x3fe00000
c00225d4:	6a 00                	push   0x0
c00225d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225de:	e8 9d 54 00 00       	call   c0027a80 <__muldf3>
c00225e3:	83 c4 10             	add    esp,0x10
c00225e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225ee:	68 00 00 60 40       	push   0x40600000
c00225f3:	6a 00                	push   0x0
c00225f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225fd:	e8 7e 54 00 00       	call   c0027a80 <__muldf3>
c0022602:	59                   	pop    ecx
c0022603:	5f                   	pop    edi
c0022604:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022608:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002260c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022614:	e8 3a 5d 00 00       	call   c0028353 <__truncdfsf2>
c0022619:	5a                   	pop    edx
c002261a:	89 c7                	mov    edi,eax
c002261c:	59                   	pop    ecx
c002261d:	68 00 00 fe 42       	push   0x42fe0000
c0022622:	50                   	push   eax
c0022623:	e8 d5 4d 00 00       	call   c00273fd <__gesf2>
c0022628:	83 c4 10             	add    esp,0x10
c002262b:	85 c0                	test   eax,eax
c002262d:	78 06                	js     c0022635 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002262f:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022633:	eb 26                	jmp    c002265b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022635:	50                   	push   eax
c0022636:	50                   	push   eax
c0022637:	6a 00                	push   0x0
c0022639:	57                   	push   edi
c002263a:	e8 c2 4d 00 00       	call   c0027401 <__lesf2>
c002263f:	83 c4 10             	add    esp,0x10
c0022642:	85 c0                	test   eax,eax
c0022644:	7f 06                	jg     c002264c <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022646:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002264a:	eb 0f                	jmp    c002265b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002264c:	83 ec 0c             	sub    esp,0xc
c002264f:	57                   	push   edi
c0022650:	e8 b7 5e 00 00       	call   c002850c <lrintf>
c0022655:	83 c4 10             	add    esp,0x10
c0022658:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002265b:	43                   	inc    ebx
c002265c:	e9 2b ff ff ff       	jmp    c002258c <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022661:	83 c4 10             	add    esp,0x10
c0022664:	5b                   	pop    ebx
c0022665:	5e                   	pop    esi
c0022666:	5f                   	pop    edi
c0022667:	c3                   	ret    

c0022668 <SoundDevice::getAudio(int, float*, float*)>:
c0022668:	55                   	push   ebp
c0022669:	57                   	push   edi
c002266a:	56                   	push   esi
c002266b:	53                   	push   ebx
c002266c:	31 db                	xor    ebx,ebx
c002266e:	83 ec 20             	sub    esp,0x20
c0022671:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022675:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022679:	c1 e0 02             	shl    eax,0x2
c002267c:	50                   	push   eax
c002267d:	6a 00                	push   0x0
c002267f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022683:	e8 f0 e0 fd ff       	call   c0000778 <memset>
c0022688:	83 c4 10             	add    esp,0x10
c002268b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002268f:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022696:	85 c0                	test   eax,eax
c0022698:	0f 84 d7 00 00 00    	je     c0022775 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002269e:	83 ec 0c             	sub    esp,0xc
c00226a1:	50                   	push   eax
c00226a2:	e8 a5 fb ff ff       	call   c002224c <SoundChannel::paused()>
c00226a7:	83 c4 10             	add    esp,0x10
c00226aa:	84 c0                	test   al,al
c00226ac:	0f 85 c3 00 00 00    	jne    c0022775 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00226b2:	83 ec 0c             	sub    esp,0xc
c00226b5:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00226bc:	e8 19 fa ff ff       	call   c00220da <SoundChannel::getVolume()>
c00226c1:	83 c4 10             	add    esp,0x10
c00226c4:	85 c0                	test   eax,eax
c00226c6:	0f 84 a9 00 00 00    	je     c0022775 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00226cc:	83 ec 0c             	sub    esp,0xc
c00226cf:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00226d6:	e8 ff f9 ff ff       	call   c00220da <SoundChannel::getVolume()>
c00226db:	83 ec 0c             	sub    esp,0xc
c00226de:	50                   	push   eax
c00226df:	e8 c3 4a 00 00       	call   c00271a7 <__floatsisf>
c00226e4:	59                   	pop    ecx
c00226e5:	5d                   	pop    ebp
c00226e6:	31 ed                	xor    ebp,ebp
c00226e8:	68 00 00 c8 42       	push   0x42c80000
c00226ed:	50                   	push   eax
c00226ee:	e8 89 48 00 00       	call   c0026f7c <__divsf3>
c00226f3:	83 c4 10             	add    esp,0x10
c00226f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00226fa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00226fe:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022704:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022708:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002270f:	e8 60 fb ff ff       	call   c0022274 <SoundChannel::unbuffer(float*, int, int)>
c0022714:	83 c4 20             	add    esp,0x20
c0022717:	89 c1                	mov    ecx,eax
c0022719:	39 cd                	cmp    ebp,ecx
c002271b:	7d 52                	jge    c002276f <SoundDevice::getAudio(int, float*, float*)+0x107>
c002271d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022721:	50                   	push   eax
c0022722:	50                   	push   eax
c0022723:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022727:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002272a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002272e:	e8 86 46 00 00       	call   c0026db9 <__mulsf3>
c0022733:	5a                   	pop    edx
c0022734:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022738:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002273e:	e8 64 4a 00 00       	call   c00271a7 <__floatsisf>
c0022743:	59                   	pop    ecx
c0022744:	5a                   	pop    edx
c0022745:	50                   	push   eax
c0022746:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002274a:	e8 2d 48 00 00       	call   c0026f7c <__divsf3>
c002274f:	59                   	pop    ecx
c0022750:	5a                   	pop    edx
c0022751:	50                   	push   eax
c0022752:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022756:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022759:	e8 38 43 00 00       	call   c0026a96 <__addsf3>
c002275e:	83 c4 10             	add    esp,0x10
c0022761:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022765:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022769:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002276c:	45                   	inc    ebp
c002276d:	eb aa                	jmp    c0022719 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002276f:	39 cf                	cmp    edi,ecx
c0022771:	7e 02                	jle    c0022775 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022773:	89 cf                	mov    edi,ecx
c0022775:	43                   	inc    ebx
c0022776:	83 fb 20             	cmp    ebx,0x20
c0022779:	0f 85 10 ff ff ff    	jne    c002268f <SoundDevice::getAudio(int, float*, float*)+0x27>
c002277f:	83 c4 1c             	add    esp,0x1c
c0022782:	89 f8                	mov    eax,edi
c0022784:	5b                   	pop    ebx
c0022785:	5e                   	pop    esi
c0022786:	5f                   	pop    edi
c0022787:	5d                   	pop    ebp
c0022788:	c3                   	ret    
c0022789:	90                   	nop

c002278a <PCI::open(int, int, void*)>:
c002278a:	83 ec 18             	sub    esp,0x18
c002278d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022791:	8b 10                	mov    edx,DWORD PTR [eax]
c0022793:	50                   	push   eax
c0022794:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022797:	31 c0                	xor    eax,eax
c0022799:	83 c4 1c             	add    esp,0x1c
c002279c:	c3                   	ret    
c002279d:	90                   	nop

c002279e <PCI::close(int, int, void*)>:
c002279e:	31 c0                	xor    eax,eax
c00227a0:	c3                   	ret    
c00227a1:	90                   	nop

c00227a2 <PCI::PCI()>:
c00227a2:	83 ec 0c             	sub    esp,0xc
c00227a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227a9:	83 ec 08             	sub    esp,0x8
c00227ac:	68 3c c8 02 c0       	push   0xc002c83c
c00227b1:	50                   	push   eax
c00227b2:	e8 7f 12 ff ff       	call   c0013a36 <Bus::Bus(char const*)>
c00227b7:	83 c4 10             	add    esp,0x10
c00227ba:	ba a8 c8 02 c0       	mov    edx,0xc002c8a8
c00227bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227c3:	89 10                	mov    DWORD PTR [eax],edx
c00227c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227c9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00227cf:	0f b6 d0             	movzx  edx,al
c00227d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227d6:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00227dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227e1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00227e7:	0f b6 d0             	movzx  edx,al
c00227ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227ee:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00227f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227f7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00227fd:	8d 50 01             	lea    edx,[eax+0x1]
c0022800:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022804:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002280a:	0f b6 d0             	movzx  edx,al
c002280d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022811:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022815:	83 c9 c0             	or     ecx,0xffffffc0
c0022818:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002281c:	90                   	nop
c002281d:	83 c4 0c             	add    esp,0xc
c0022820:	c3                   	ret    
c0022821:	90                   	nop

c0022822 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022822:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022826:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002282b:	89 ca                	mov    edx,ecx
c002282d:	c1 e0 10             	shl    eax,0x10
c0022830:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022836:	09 d0                	or     eax,edx
c0022838:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002283d:	c1 e2 08             	shl    edx,0x8
c0022840:	09 d0                	or     eax,edx
c0022842:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022847:	c1 e2 0b             	shl    edx,0xb
c002284a:	09 d0                	or     eax,edx
c002284c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022851:	0d 00 00 00 80       	or     eax,0x80000000
c0022856:	ef                   	out    dx,eax
c0022857:	ba fc 0c 00 00       	mov    edx,0xcfc
c002285c:	ed                   	in     eax,dx
c002285d:	83 e1 02             	and    ecx,0x2
c0022860:	0f b6 c9             	movzx  ecx,cl
c0022863:	c1 e1 03             	shl    ecx,0x3
c0022866:	d3 e8                	shr    eax,cl
c0022868:	c3                   	ret    
c0022869:	90                   	nop

c002286a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002286a:	6a 00                	push   0x0
c002286c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022871:	50                   	push   eax
c0022872:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022877:	50                   	push   eax
c0022878:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002287d:	50                   	push   eax
c002287e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022882:	e8 9b ff ff ff       	call   c0022822 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022887:	83 c4 14             	add    esp,0x14
c002288a:	c3                   	ret    
c002288b:	90                   	nop

c002288c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002288c:	6a 0e                	push   0xe
c002288e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022893:	50                   	push   eax
c0022894:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022899:	50                   	push   eax
c002289a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002289f:	50                   	push   eax
c00228a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228a4:	e8 79 ff ff ff       	call   c0022822 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228a9:	83 c4 14             	add    esp,0x14
c00228ac:	0f b6 c0             	movzx  eax,al
c00228af:	c3                   	ret    

c00228b0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00228b0:	55                   	push   ebp
c00228b1:	57                   	push   edi
c00228b2:	56                   	push   esi
c00228b3:	53                   	push   ebx
c00228b4:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00228b9:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00228be:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00228c3:	6a 0a                	push   0xa
c00228c5:	56                   	push   esi
c00228c6:	55                   	push   ebp
c00228c7:	57                   	push   edi
c00228c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00228cc:	e8 51 ff ff ff       	call   c0022822 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228d1:	6a 0a                	push   0xa
c00228d3:	89 c3                	mov    ebx,eax
c00228d5:	56                   	push   esi
c00228d6:	0f b6 db             	movzx  ebx,bl
c00228d9:	55                   	push   ebp
c00228da:	57                   	push   edi
c00228db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228df:	e8 3e ff ff ff       	call   c0022822 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228e4:	83 c4 28             	add    esp,0x28
c00228e7:	25 00 ff 00 00       	and    eax,0xff00
c00228ec:	09 d8                	or     eax,ebx
c00228ee:	5b                   	pop    ebx
c00228ef:	5e                   	pop    esi
c00228f0:	5f                   	pop    edi
c00228f1:	5d                   	pop    ebp
c00228f2:	c3                   	ret    
c00228f3:	90                   	nop

c00228f4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00228f4:	6a 08                	push   0x8
c00228f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228fb:	50                   	push   eax
c00228fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022901:	50                   	push   eax
c0022902:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022907:	50                   	push   eax
c0022908:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002290c:	e8 11 ff ff ff       	call   c0022822 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022911:	83 c4 14             	add    esp,0x14
c0022914:	0f b6 c4             	movzx  eax,ah
c0022917:	c3                   	ret    

c0022918 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022918:	6a 08                	push   0x8
c002291a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002291f:	50                   	push   eax
c0022920:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022925:	50                   	push   eax
c0022926:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002292b:	50                   	push   eax
c002292c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022930:	e8 ed fe ff ff       	call   c0022822 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022935:	83 c4 14             	add    esp,0x14
c0022938:	c3                   	ret    
c0022939:	90                   	nop

c002293a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002293a:	6a 3c                	push   0x3c
c002293c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022941:	50                   	push   eax
c0022942:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022947:	50                   	push   eax
c0022948:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002294d:	50                   	push   eax
c002294e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022952:	e8 cb fe ff ff       	call   c0022822 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022957:	83 c4 14             	add    esp,0x14
c002295a:	c3                   	ret    
c002295b:	90                   	nop

c002295c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002295c:	6a 18                	push   0x18
c002295e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022963:	50                   	push   eax
c0022964:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022969:	50                   	push   eax
c002296a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002296f:	50                   	push   eax
c0022970:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022974:	e8 a9 fe ff ff       	call   c0022822 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022979:	83 c4 14             	add    esp,0x14
c002297c:	0f b6 c4             	movzx  eax,ah
c002297f:	c3                   	ret    

c0022980 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022980:	55                   	push   ebp
c0022981:	57                   	push   edi
c0022982:	56                   	push   esi
c0022983:	53                   	push   ebx
c0022984:	50                   	push   eax
c0022985:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022989:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c002298e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022993:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022998:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002299f:	8d 43 12             	lea    eax,[ebx+0x12]
c00229a2:	83 c3 10             	add    ebx,0x10
c00229a5:	0f b6 c0             	movzx  eax,al
c00229a8:	0f b6 db             	movzx  ebx,bl
c00229ab:	50                   	push   eax
c00229ac:	51                   	push   ecx
c00229ad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00229b1:	57                   	push   edi
c00229b2:	55                   	push   ebp
c00229b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00229b7:	e8 66 fe ff ff       	call   c0022822 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229bc:	53                   	push   ebx
c00229bd:	89 c6                	mov    esi,eax
c00229bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00229c3:	c1 e6 10             	shl    esi,0x10
c00229c6:	51                   	push   ecx
c00229c7:	57                   	push   edi
c00229c8:	55                   	push   ebp
c00229c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00229cd:	e8 50 fe ff ff       	call   c0022822 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229d2:	83 c4 2c             	add    esp,0x2c
c00229d5:	0f b7 c0             	movzx  eax,ax
c00229d8:	5b                   	pop    ebx
c00229d9:	09 f0                	or     eax,esi
c00229db:	5e                   	pop    esi
c00229dc:	5f                   	pop    edi
c00229dd:	5d                   	pop    ebp
c00229de:	c3                   	ret    
c00229df:	90                   	nop

c00229e0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00229e0:	53                   	push   ebx
c00229e1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00229e6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00229eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00229ef:	c1 e1 10             	shl    ecx,0x10
c00229f2:	25 fc 00 00 00       	and    eax,0xfc
c00229f7:	09 c1                	or     ecx,eax
c00229f9:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229fe:	c1 e0 08             	shl    eax,0x8
c0022a01:	09 c1                	or     ecx,eax
c0022a03:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022a08:	c1 e0 0b             	shl    eax,0xb
c0022a0b:	09 c1                	or     ecx,eax
c0022a0d:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022a13:	89 c8                	mov    eax,ecx
c0022a15:	ef                   	out    dx,eax
c0022a16:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a1b:	ed                   	in     eax,dx
c0022a1c:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022a21:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022a26:	74 0a                	je     c0022a32 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022a28:	0f b7 d8             	movzx  ebx,ax
c0022a2b:	89 d0                	mov    eax,edx
c0022a2d:	c1 e0 10             	shl    eax,0x10
c0022a30:	eb 05                	jmp    c0022a37 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022a32:	66 31 c0             	xor    ax,ax
c0022a35:	89 d3                	mov    ebx,edx
c0022a37:	09 c3                	or     ebx,eax
c0022a39:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a3e:	89 c8                	mov    eax,ecx
c0022a40:	ef                   	out    dx,eax
c0022a41:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a46:	89 d8                	mov    eax,ebx
c0022a48:	ef                   	out    dx,eax
c0022a49:	5b                   	pop    ebx
c0022a4a:	c3                   	ret    
c0022a4b:	90                   	nop

c0022a4c <PCI::checkBus(unsigned char)>:
c0022a4c:	56                   	push   esi
c0022a4d:	53                   	push   ebx
c0022a4e:	31 db                	xor    ebx,ebx
c0022a50:	51                   	push   ecx
c0022a51:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022a56:	52                   	push   edx
c0022a57:	53                   	push   ebx
c0022a58:	43                   	inc    ebx
c0022a59:	56                   	push   esi
c0022a5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a5e:	e8 2b 03 00 00       	call   c0022d8e <PCI::checkDevice(unsigned char, unsigned char)>
c0022a63:	83 c4 10             	add    esp,0x10
c0022a66:	83 fb 20             	cmp    ebx,0x20
c0022a69:	75 eb                	jne    c0022a56 <PCI::checkBus(unsigned char)+0xa>
c0022a6b:	58                   	pop    eax
c0022a6c:	5b                   	pop    ebx
c0022a6d:	5e                   	pop    esi
c0022a6e:	c3                   	ret    
c0022a6f:	90                   	nop

c0022a70 <PCI::foundDevice(PCIDeviceInfo)>:
c0022a70:	55                   	push   ebp
c0022a71:	57                   	push   edi
c0022a72:	56                   	push   esi
c0022a73:	53                   	push   ebx
c0022a74:	83 ec 1c             	sub    esp,0x1c
c0022a77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022a7b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022a81:	0f 84 52 01 00 00    	je     c0022bd9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022a87:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022a8b:	66 81 f9 06 04       	cmp    cx,0x406
c0022a90:	75 2c                	jne    c0022abe <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022a92:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022a97:	50                   	push   eax
c0022a98:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022a9d:	50                   	push   eax
c0022a9e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022aa3:	50                   	push   eax
c0022aa4:	56                   	push   esi
c0022aa5:	e8 b2 fe ff ff       	call   c002295c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022aaa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022aae:	0f b6 c0             	movzx  eax,al
c0022ab1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022ab5:	83 c4 2c             	add    esp,0x2c
c0022ab8:	5b                   	pop    ebx
c0022ab9:	5e                   	pop    esi
c0022aba:	5f                   	pop    edi
c0022abb:	5d                   	pop    ebp
c0022abc:	eb 8e                	jmp    c0022a4c <PCI::checkBus(unsigned char)>
c0022abe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022ac2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022ac8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022acc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022ad0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022ad4:	88 d3                	mov    bl,dl
c0022ad6:	85 c0                	test   eax,eax
c0022ad8:	74 33                	je     c0022b0d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022ada:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022add:	85 d2                	test   edx,edx
c0022adf:	74 28                	je     c0022b09 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022ae1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022ae7:	31 ef                	xor    edi,ebp
c0022ae9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022aef:	75 18                	jne    c0022b09 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022af1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022af5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022afb:	75 0c                	jne    c0022b09 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022afd:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022b03:	0f 84 d0 00 00 00    	je     c0022bd9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b09:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b0b:	eb c9                	jmp    c0022ad6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022b0d:	66 81 f9 01 06       	cmp    cx,0x601
c0022b12:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022b16:	75 19                	jne    c0022b31 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022b18:	83 ec 0c             	sub    esp,0xc
c0022b1b:	68 64 01 00 00       	push   0x164
c0022b20:	e8 1e cd fe ff       	call   c000f843 <malloc>
c0022b25:	89 c5                	mov    ebp,eax
c0022b27:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b2a:	e8 95 0f 00 00       	call   c0023ac4 <SATABus::SATABus()>
c0022b2f:	eb 1e                	jmp    c0022b4f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022b31:	66 81 f9 01 01       	cmp    cx,0x101
c0022b36:	75 60                	jne    c0022b98 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022b38:	83 ec 0c             	sub    esp,0xc
c0022b3b:	68 70 02 00 00       	push   0x270
c0022b40:	e8 fe cc fe ff       	call   c000f843 <malloc>
c0022b45:	89 c5                	mov    ebp,eax
c0022b47:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b4a:	e8 03 03 00 00       	call   c0022e52 <IDE::IDE()>
c0022b4f:	58                   	pop    eax
c0022b50:	5a                   	pop    edx
c0022b51:	55                   	push   ebp
c0022b52:	56                   	push   esi
c0022b53:	e8 6a 16 ff ff       	call   c00141c2 <Device::addChild(Device*)>
c0022b58:	83 ec 1c             	sub    esp,0x1c
c0022b5b:	b9 09 00 00 00       	mov    ecx,0x9
c0022b60:	fc                   	cld    
c0022b61:	89 e7                	mov    edi,esp
c0022b63:	89 de                	mov    esi,ebx
c0022b65:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022b67:	55                   	push   ebp
c0022b68:	e8 5f 15 ff ff       	call   c00140cc <Device::preOpenPCI(PCIDeviceInfo)>
c0022b6d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022b70:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022b74:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022b7c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022b84:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022b8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b8f:	83 c4 4c             	add    esp,0x4c
c0022b92:	5b                   	pop    ebx
c0022b93:	5e                   	pop    esi
c0022b94:	5f                   	pop    edi
c0022b95:	5d                   	pop    ebp
c0022b96:	ff e0                	jmp    eax
c0022b98:	83 ec 0c             	sub    esp,0xc
c0022b9b:	68 58 01 00 00       	push   0x158
c0022ba0:	e8 9e cc fe ff       	call   c000f843 <malloc>
c0022ba5:	89 c5                	mov    ebp,eax
c0022ba7:	58                   	pop    eax
c0022ba8:	5a                   	pop    edx
c0022ba9:	68 44 c8 02 c0       	push   0xc002c844
c0022bae:	55                   	push   ebp
c0022baf:	e8 04 19 ff ff       	call   c00144b8 <DriverlessDevice::DriverlessDevice(char const*)>
c0022bb4:	59                   	pop    ecx
c0022bb5:	5f                   	pop    edi
c0022bb6:	55                   	push   ebp
c0022bb7:	56                   	push   esi
c0022bb8:	e8 05 16 ff ff       	call   c00141c2 <Device::addChild(Device*)>
c0022bbd:	b9 09 00 00 00       	mov    ecx,0x9
c0022bc2:	fc                   	cld    
c0022bc3:	89 df                	mov    edi,ebx
c0022bc5:	89 de                	mov    esi,ebx
c0022bc7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022bc9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022bcd:	83 c4 2c             	add    esp,0x2c
c0022bd0:	5b                   	pop    ebx
c0022bd1:	5e                   	pop    esi
c0022bd2:	5f                   	pop    edi
c0022bd3:	5d                   	pop    ebp
c0022bd4:	e9 f3 14 ff ff       	jmp    c00140cc <Device::preOpenPCI(PCIDeviceInfo)>
c0022bd9:	83 c4 1c             	add    esp,0x1c
c0022bdc:	5b                   	pop    ebx
c0022bdd:	5e                   	pop    esi
c0022bde:	5f                   	pop    edi
c0022bdf:	5d                   	pop    ebp
c0022be0:	c3                   	ret    
c0022be1:	90                   	nop

c0022be2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022be2:	55                   	push   ebp
c0022be3:	57                   	push   edi
c0022be4:	56                   	push   esi
c0022be5:	53                   	push   ebx
c0022be6:	83 ec 5c             	sub    esp,0x5c
c0022be9:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022bed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022bf1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022bf5:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022bfa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022bfe:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022c02:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022c07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c0b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022c10:	6a 0c                	push   0xc
c0022c12:	55                   	push   ebp
c0022c13:	53                   	push   ebx
c0022c14:	57                   	push   edi
c0022c15:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022c1c:	e8 01 fc ff ff       	call   c0022822 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c21:	55                   	push   ebp
c0022c22:	53                   	push   ebx
c0022c23:	57                   	push   edi
c0022c24:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022c2b:	e8 80 fc ff ff       	call   c00228b0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022c30:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022c35:	83 c4 24             	add    esp,0x24
c0022c38:	55                   	push   ebp
c0022c39:	53                   	push   ebx
c0022c3a:	57                   	push   edi
c0022c3b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022c3f:	e8 f6 fc ff ff       	call   c002293a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022c44:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022c48:	6a 3c                	push   0x3c
c0022c4a:	55                   	push   ebp
c0022c4b:	53                   	push   ebx
c0022c4c:	57                   	push   edi
c0022c4d:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022c54:	e8 c9 fb ff ff       	call   c0022822 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c59:	0f b6 c4             	movzx  eax,ah
c0022c5c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022c60:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022c64:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022c68:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0022c6d:	83 c4 24             	add    esp,0x24
c0022c70:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022c76:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022c7d:	74 6c                	je     c0022ceb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022c7f:	31 f6                	xor    esi,esi
c0022c81:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c0022c87:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022c8d:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022c93:	7e 56                	jle    c0022ceb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022c95:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022c98:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022c9f:	39 cb                	cmp    ebx,ecx
c0022ca1:	75 45                	jne    c0022ce8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022ca3:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022caa:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022cae:	75 38                	jne    c0022ce8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022cb0:	83 ec 0c             	sub    esp,0xc
c0022cb3:	68 5e c8 02 c0       	push   0xc002c85e
c0022cb8:	e8 df 00 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0022cbd:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c0022cc3:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022cc9:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022cd1:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022cd5:	52                   	push   edx
c0022cd6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022cda:	53                   	push   ebx
c0022cdb:	68 83 c8 02 c0       	push   0xc002c883
c0022ce0:	e8 b7 00 ff ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0022ce5:	83 c4 20             	add    esp,0x20
c0022ce8:	46                   	inc    esi
c0022ce9:	eb 96                	jmp    c0022c81 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022ceb:	31 d2                	xor    edx,edx
c0022ced:	83 ec 0c             	sub    esp,0xc
c0022cf0:	55                   	push   ebp
c0022cf1:	53                   	push   ebx
c0022cf2:	57                   	push   edi
c0022cf3:	52                   	push   edx
c0022cf4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022cf8:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022cff:	e8 7c fc ff ff       	call   c0022980 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d04:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022d08:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022d0c:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022d10:	42                   	inc    edx
c0022d11:	83 c4 20             	add    esp,0x20
c0022d14:	83 fa 06             	cmp    edx,0x6
c0022d17:	75 d4                	jne    c0022ced <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022d19:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022d1d:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022d21:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022d25:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022d29:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022d2d:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022d31:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022d36:	86 e0                	xchg   al,ah
c0022d38:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022d3d:	55                   	push   ebp
c0022d3e:	53                   	push   ebx
c0022d3f:	57                   	push   edi
c0022d40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d44:	e8 ab fb ff ff       	call   c00228f4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022d49:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022d4d:	55                   	push   ebp
c0022d4e:	53                   	push   ebx
c0022d4f:	57                   	push   edi
c0022d50:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022d57:	e8 0e fb ff ff       	call   c002286a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d5c:	83 ec 0c             	sub    esp,0xc
c0022d5f:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022d64:	b9 09 00 00 00       	mov    ecx,0x9
c0022d69:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022d6d:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022d71:	fc                   	cld    
c0022d72:	89 e7                	mov    edi,esp
c0022d74:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d76:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022d7d:	e8 ee fc ff ff       	call   c0022a70 <PCI::foundDevice(PCIDeviceInfo)>
c0022d82:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022d88:	5b                   	pop    ebx
c0022d89:	5e                   	pop    esi
c0022d8a:	5f                   	pop    edi
c0022d8b:	5d                   	pop    ebp
c0022d8c:	c3                   	ret    
c0022d8d:	90                   	nop

c0022d8e <PCI::checkDevice(unsigned char, unsigned char)>:
c0022d8e:	55                   	push   ebp
c0022d8f:	57                   	push   edi
c0022d90:	56                   	push   esi
c0022d91:	53                   	push   ebx
c0022d92:	83 ec 0c             	sub    esp,0xc
c0022d95:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022d99:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022d9e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022da3:	6a 00                	push   0x0
c0022da5:	56                   	push   esi
c0022da6:	57                   	push   edi
c0022da7:	55                   	push   ebp
c0022da8:	e8 bd fa ff ff       	call   c002286a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022dad:	6a 00                	push   0x0
c0022daf:	56                   	push   esi
c0022db0:	57                   	push   edi
c0022db1:	55                   	push   ebp
c0022db2:	e8 2b fe ff ff       	call   c0022be2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022db7:	83 c4 20             	add    esp,0x20
c0022dba:	6a 00                	push   0x0
c0022dbc:	56                   	push   esi
c0022dbd:	57                   	push   edi
c0022dbe:	55                   	push   ebp
c0022dbf:	e8 c8 fa ff ff       	call   c002288c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022dc4:	83 c4 10             	add    esp,0x10
c0022dc7:	84 c0                	test   al,al
c0022dc9:	79 27                	jns    c0022df2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022dcb:	bb 01 00 00 00       	mov    ebx,0x1
c0022dd0:	53                   	push   ebx
c0022dd1:	56                   	push   esi
c0022dd2:	57                   	push   edi
c0022dd3:	55                   	push   ebp
c0022dd4:	e8 91 fa ff ff       	call   c002286a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022dd9:	83 c4 10             	add    esp,0x10
c0022ddc:	66 40                	inc    ax
c0022dde:	74 0c                	je     c0022dec <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022de0:	53                   	push   ebx
c0022de1:	56                   	push   esi
c0022de2:	57                   	push   edi
c0022de3:	55                   	push   ebp
c0022de4:	e8 f9 fd ff ff       	call   c0022be2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022de9:	83 c4 10             	add    esp,0x10
c0022dec:	43                   	inc    ebx
c0022ded:	83 fb 08             	cmp    ebx,0x8
c0022df0:	75 de                	jne    c0022dd0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022df2:	83 c4 0c             	add    esp,0xc
c0022df5:	5b                   	pop    ebx
c0022df6:	5e                   	pop    esi
c0022df7:	5f                   	pop    edi
c0022df8:	5d                   	pop    ebp
c0022df9:	c3                   	ret    

c0022dfa <PCI::detect()>:
c0022dfa:	56                   	push   esi
c0022dfb:	53                   	push   ebx
c0022dfc:	53                   	push   ebx
c0022dfd:	31 db                	xor    ebx,ebx
c0022dff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e03:	6a 00                	push   0x0
c0022e05:	6a 00                	push   0x0
c0022e07:	6a 00                	push   0x0
c0022e09:	56                   	push   esi
c0022e0a:	e8 7d fa ff ff       	call   c002288c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e0f:	83 c4 10             	add    esp,0x10
c0022e12:	a8 80                	test   al,0x80
c0022e14:	75 21                	jne    c0022e37 <PCI::detect()+0x3d>
c0022e16:	51                   	push   ecx
c0022e17:	51                   	push   ecx
c0022e18:	6a 00                	push   0x0
c0022e1a:	56                   	push   esi
c0022e1b:	e8 2c fc ff ff       	call   c0022a4c <PCI::checkBus(unsigned char)>
c0022e20:	83 c4 10             	add    esp,0x10
c0022e23:	eb 24                	jmp    c0022e49 <PCI::detect()+0x4f>
c0022e25:	52                   	push   edx
c0022e26:	52                   	push   edx
c0022e27:	53                   	push   ebx
c0022e28:	43                   	inc    ebx
c0022e29:	56                   	push   esi
c0022e2a:	e8 1d fc ff ff       	call   c0022a4c <PCI::checkBus(unsigned char)>
c0022e2f:	83 c4 10             	add    esp,0x10
c0022e32:	83 fb 08             	cmp    ebx,0x8
c0022e35:	74 12                	je     c0022e49 <PCI::detect()+0x4f>
c0022e37:	53                   	push   ebx
c0022e38:	6a 00                	push   0x0
c0022e3a:	6a 00                	push   0x0
c0022e3c:	56                   	push   esi
c0022e3d:	e8 28 fa ff ff       	call   c002286a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e42:	83 c4 10             	add    esp,0x10
c0022e45:	66 40                	inc    ax
c0022e47:	74 dc                	je     c0022e25 <PCI::detect()+0x2b>
c0022e49:	58                   	pop    eax
c0022e4a:	5b                   	pop    ebx
c0022e4b:	5e                   	pop    esi
c0022e4c:	c3                   	ret    
c0022e4d:	90                   	nop

c0022e4e <IDE::close(int, int, void*)>:
c0022e4e:	83 c8 ff             	or     eax,0xffffffff
c0022e51:	c3                   	ret    

c0022e52 <IDE::IDE()>:
c0022e52:	83 ec 0c             	sub    esp,0xc
c0022e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e59:	83 ec 08             	sub    esp,0x8
c0022e5c:	68 cc c8 02 c0       	push   0xc002c8cc
c0022e61:	50                   	push   eax
c0022e62:	e8 e7 16 ff ff       	call   c001454e <HardDiskController::HardDiskController(char const*)>
c0022e67:	83 c4 10             	add    esp,0x10
c0022e6a:	ba 0c cb 02 c0       	mov    edx,0xc002cb0c
c0022e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e73:	89 10                	mov    DWORD PTR [eax],edx
c0022e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e79:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022e80:	90                   	nop
c0022e81:	83 c4 0c             	add    esp,0xc
c0022e84:	c3                   	ret    
c0022e85:	90                   	nop

c0022e86 <IDE::prepareInterrupt(unsigned char)>:
c0022e86:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022e8b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022e8f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022e97:	c3                   	ret    

c0022e98 <selectDrive(unsigned char, unsigned char)>:
c0022e98:	c3                   	ret    
c0022e99:	90                   	nop

c0022e9a <IDE::getBase(unsigned char)>:
c0022e9a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022e9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ea3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022eab:	c3                   	ret    

c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022eac:	55                   	push   ebp
c0022ead:	57                   	push   edi
c0022eae:	56                   	push   esi
c0022eaf:	53                   	push   ebx
c0022eb0:	83 ec 1c             	sub    esp,0x1c
c0022eb3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022eb7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ebb:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022ebe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022ec2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022ec6:	80 f9 03             	cmp    cl,0x3
c0022ec9:	77 51                	ja     c0022f1c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022ecb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022ecf:	0f b6 f2             	movzx  esi,dl
c0022ed2:	0f b6 db             	movzx  ebx,bl
c0022ed5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022ed8:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022edc:	83 ca 80             	or     edx,0xffffff80
c0022edf:	0f b6 d2             	movzx  edx,dl
c0022ee2:	52                   	push   edx
c0022ee3:	6a 0c                	push   0xc
c0022ee5:	56                   	push   esi
c0022ee6:	57                   	push   edi
c0022ee7:	e8 c0 ff ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022eec:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022ef1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ef5:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022ef9:	ee                   	out    dx,al
c0022efa:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022eff:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022f03:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022f07:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022f0b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022f13:	83 c4 2c             	add    esp,0x2c
c0022f16:	5b                   	pop    ebx
c0022f17:	5e                   	pop    esi
c0022f18:	5f                   	pop    edi
c0022f19:	5d                   	pop    ebp
c0022f1a:	eb 90                	jmp    c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f1c:	80 fb 07             	cmp    bl,0x7
c0022f1f:	77 12                	ja     c0022f33 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022f21:	0f b6 d2             	movzx  edx,dl
c0022f24:	0f b6 db             	movzx  ebx,bl
c0022f27:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022f2f:	89 da                	mov    edx,ebx
c0022f31:	eb 2f                	jmp    c0022f62 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f33:	80 fb 0d             	cmp    bl,0xd
c0022f36:	77 13                	ja     c0022f4b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022f38:	0f b6 d2             	movzx  edx,dl
c0022f3b:	0f b6 db             	movzx  ebx,bl
c0022f3e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022f45:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022f49:	eb 17                	jmp    c0022f62 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f4b:	80 fb 15             	cmp    bl,0x15
c0022f4e:	77 13                	ja     c0022f63 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022f50:	0f b6 d2             	movzx  edx,dl
c0022f53:	0f b6 db             	movzx  ebx,bl
c0022f56:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022f5e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022f62:	ee                   	out    dx,al
c0022f63:	83 c4 1c             	add    esp,0x1c
c0022f66:	5b                   	pop    ebx
c0022f67:	5e                   	pop    esi
c0022f68:	5f                   	pop    edi
c0022f69:	5d                   	pop    ebp
c0022f6a:	c3                   	ret    
c0022f6b:	90                   	nop

c0022f6c <IDE::read(unsigned char, unsigned char)>:
c0022f6c:	55                   	push   ebp
c0022f6d:	57                   	push   edi
c0022f6e:	56                   	push   esi
c0022f6f:	53                   	push   ebx
c0022f70:	83 ec 1c             	sub    esp,0x1c
c0022f73:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f77:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f7b:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022f7e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f82:	3c 03                	cmp    al,0x3
c0022f84:	77 43                	ja     c0022fc9 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022f86:	0f b6 f2             	movzx  esi,dl
c0022f89:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f8c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022f90:	83 c8 80             	or     eax,0xffffff80
c0022f93:	0f b6 c0             	movzx  eax,al
c0022f96:	50                   	push   eax
c0022f97:	6a 0c                	push   0xc
c0022f99:	56                   	push   esi
c0022f9a:	57                   	push   edi
c0022f9b:	e8 0c ff ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fa0:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022fa5:	0f b6 c3             	movzx  eax,bl
c0022fa8:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022fac:	ec                   	in     al,dx
c0022fad:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022fb1:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022fb6:	52                   	push   edx
c0022fb7:	6a 0c                	push   0xc
c0022fb9:	56                   	push   esi
c0022fba:	57                   	push   edi
c0022fbb:	e8 ec fe ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fc0:	83 c4 20             	add    esp,0x20
c0022fc3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022fc7:	eb 49                	jmp    c0023012 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022fc9:	80 fb 07             	cmp    bl,0x7
c0022fcc:	77 12                	ja     c0022fe0 <IDE::read(unsigned char, unsigned char)+0x74>
c0022fce:	0f b6 d2             	movzx  edx,dl
c0022fd1:	0f b6 c3             	movzx  eax,bl
c0022fd4:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022fdc:	89 c2                	mov    edx,eax
c0022fde:	eb 31                	jmp    c0023011 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022fe0:	80 fb 0d             	cmp    bl,0xd
c0022fe3:	77 13                	ja     c0022ff8 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022fe5:	0f b6 d2             	movzx  edx,dl
c0022fe8:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022fef:	0f b6 d3             	movzx  edx,bl
c0022ff2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022ff6:	eb 19                	jmp    c0023011 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022ff8:	31 c0                	xor    eax,eax
c0022ffa:	80 fb 15             	cmp    bl,0x15
c0022ffd:	77 13                	ja     c0023012 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022fff:	0f b6 d2             	movzx  edx,dl
c0023002:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002300a:	0f b6 d3             	movzx  edx,bl
c002300d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023011:	ec                   	in     al,dx
c0023012:	83 c4 1c             	add    esp,0x1c
c0023015:	5b                   	pop    ebx
c0023016:	5e                   	pop    esi
c0023017:	5f                   	pop    edi
c0023018:	5d                   	pop    ebp
c0023019:	c3                   	ret    

c002301a <IDE::waitInterrupt(unsigned char)>:
c002301a:	55                   	push   ebp
c002301b:	57                   	push   edi
c002301c:	56                   	push   esi
c002301d:	53                   	push   ebx
c002301e:	31 db                	xor    ebx,ebx
c0023020:	83 ec 0c             	sub    esp,0xc
c0023023:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023027:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002302c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023034:	89 e8                	mov    eax,ebp
c0023036:	84 c0                	test   al,al
c0023038:	75 34                	jne    c002306e <IDE::waitInterrupt(unsigned char)+0x54>
c002303a:	52                   	push   edx
c002303b:	6a 0c                	push   0xc
c002303d:	56                   	push   esi
c002303e:	57                   	push   edi
c002303f:	e8 28 ff ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c0023044:	83 c4 10             	add    esp,0x10
c0023047:	a8 01                	test   al,0x1
c0023049:	75 2b                	jne    c0023076 <IDE::waitInterrupt(unsigned char)+0x5c>
c002304b:	f6 c3 04             	test   bl,0x4
c002304e:	75 16                	jne    c0023066 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023050:	83 fb 32             	cmp    ebx,0x32
c0023053:	7e 11                	jle    c0023066 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023055:	50                   	push   eax
c0023056:	50                   	push   eax
c0023057:	6a 00                	push   0x0
c0023059:	68 80 96 98 00       	push   0x989680
c002305e:	e8 5d b1 ff ff       	call   c001e1c0 <nanoSleep(unsigned long long)>
c0023063:	83 c4 10             	add    esp,0x10
c0023066:	83 fb 3c             	cmp    ebx,0x3c
c0023069:	74 0b                	je     c0023076 <IDE::waitInterrupt(unsigned char)+0x5c>
c002306b:	43                   	inc    ebx
c002306c:	eb be                	jmp    c002302c <IDE::waitInterrupt(unsigned char)+0x12>
c002306e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023076:	83 c4 0c             	add    esp,0xc
c0023079:	89 e8                	mov    eax,ebp
c002307b:	5b                   	pop    ebx
c002307c:	5e                   	pop    esi
c002307d:	5f                   	pop    edi
c002307e:	5d                   	pop    ebp
c002307f:	c3                   	ret    

c0023080 <ideChannel0IRQHandler(regs*, void*)>:
c0023080:	83 ec 10             	sub    esp,0x10
c0023083:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023087:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002308e:	6a 07                	push   0x7
c0023090:	6a 00                	push   0x0
c0023092:	50                   	push   eax
c0023093:	e8 d4 fe ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c0023098:	83 c4 1c             	add    esp,0x1c
c002309b:	c3                   	ret    

c002309c <ideChannel1IRQHandler(regs*, void*)>:
c002309c:	83 ec 10             	sub    esp,0x10
c002309f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230a3:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00230aa:	6a 07                	push   0x7
c00230ac:	6a 01                	push   0x1
c00230ae:	50                   	push   eax
c00230af:	e8 b8 fe ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c00230b4:	83 c4 1c             	add    esp,0x1c
c00230b7:	c3                   	ret    

c00230b8 <IDE::enableIRQs(unsigned char, bool)>:
c00230b8:	57                   	push   edi
c00230b9:	56                   	push   esi
c00230ba:	be 04 00 00 00       	mov    esi,0x4
c00230bf:	53                   	push   ebx
c00230c0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00230c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00230c9:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00230ce:	0f 94 c0             	sete   al
c00230d1:	d1 e0                	shl    eax,1
c00230d3:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00230da:	0f b6 c0             	movzx  eax,al
c00230dd:	50                   	push   eax
c00230de:	6a 0c                	push   0xc
c00230e0:	57                   	push   edi
c00230e1:	53                   	push   ebx
c00230e2:	e8 c5 fd ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230e7:	83 c4 10             	add    esp,0x10
c00230ea:	50                   	push   eax
c00230eb:	6a 0c                	push   0xc
c00230ed:	57                   	push   edi
c00230ee:	53                   	push   ebx
c00230ef:	e8 78 fe ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c00230f4:	83 c4 10             	add    esp,0x10
c00230f7:	4e                   	dec    esi
c00230f8:	75 f0                	jne    c00230ea <IDE::enableIRQs(unsigned char, bool)+0x32>
c00230fa:	5b                   	pop    ebx
c00230fb:	5e                   	pop    esi
c00230fc:	5f                   	pop    edi
c00230fd:	c3                   	ret    

c00230fe <IDE::open(int, int, void*)>:
c00230fe:	55                   	push   ebp
c00230ff:	57                   	push   edi
c0023100:	56                   	push   esi
c0023101:	53                   	push   ebx
c0023102:	83 ec 1c             	sub    esp,0x1c
c0023105:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023109:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023112:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002311b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023122:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023129:	0f 85 b0 02 00 00    	jne    c00233df <IDE::open(int, int, void*)+0x2e1>
c002312f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023135:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023139:	83 e0 7f             	and    eax,0x7f
c002313c:	3c 05                	cmp    al,0x5
c002313e:	74 04                	je     c0023144 <IDE::open(int, int, void*)+0x46>
c0023140:	3c 0f                	cmp    al,0xf
c0023142:	75 32                	jne    c0023176 <IDE::open(int, int, void*)+0x78>
c0023144:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002314a:	83 e0 fc             	and    eax,0xfffffffc
c002314d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023154:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002315a:	83 e0 fc             	and    eax,0xfffffffc
c002315d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023164:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002316a:	83 e0 fc             	and    eax,0xfffffffc
c002316d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023174:	eb 14                	jmp    c002318a <IDE::open(int, int, void*)+0x8c>
c0023176:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023180:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002318a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023191:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023198:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002319c:	89 c6                	mov    esi,eax
c002319e:	bf f8 0c 00 00       	mov    edi,0xcf8
c00231a3:	c1 e6 10             	shl    esi,0x10
c00231a6:	89 e8                	mov    eax,ebp
c00231a8:	89 fa                	mov    edx,edi
c00231aa:	c1 e0 0b             	shl    eax,0xb
c00231ad:	09 f0                	or     eax,esi
c00231af:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00231b6:	c1 e6 08             	shl    esi,0x8
c00231b9:	09 c6                	or     esi,eax
c00231bb:	89 f0                	mov    eax,esi
c00231bd:	0d 08 00 00 80       	or     eax,0x80000008
c00231c2:	ef                   	out    dx,eax
c00231c3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00231c8:	89 ca                	mov    edx,ecx
c00231ca:	ed                   	in     eax,dx
c00231cb:	c1 e8 10             	shr    eax,0x10
c00231ce:	3d ff ff 00 00       	cmp    eax,0xffff
c00231d3:	0f 84 f5 00 00 00    	je     c00232ce <IDE::open(int, int, void*)+0x1d0>
c00231d9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00231df:	89 fa                	mov    edx,edi
c00231e1:	89 f0                	mov    eax,esi
c00231e3:	ef                   	out    dx,eax
c00231e4:	b0 fe                	mov    al,0xfe
c00231e6:	89 ca                	mov    edx,ecx
c00231e8:	ee                   	out    dx,al
c00231e9:	89 f0                	mov    eax,esi
c00231eb:	89 fa                	mov    edx,edi
c00231ed:	ef                   	out    dx,eax
c00231ee:	89 ca                	mov    edx,ecx
c00231f0:	ed                   	in     eax,dx
c00231f1:	3c fe                	cmp    al,0xfe
c00231f3:	0f 85 a9 00 00 00    	jne    c00232a2 <IDE::open(int, int, void*)+0x1a4>
c00231f9:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c00231ff:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023206:	74 33                	je     c002323b <IDE::open(int, int, void*)+0x13d>
c0023208:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002320e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023212:	40                   	inc    eax
c0023213:	83 ec 0c             	sub    esp,0xc
c0023216:	0f b6 c0             	movzx  eax,al
c0023219:	50                   	push   eax
c002321a:	55                   	push   ebp
c002321b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002321f:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023225:	51                   	push   ecx
c0023226:	e8 a1 4e ff ff       	call   c00180cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002322b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023230:	83 c4 1c             	add    esp,0x1c
c0023233:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023239:	eb 0a                	jmp    c0023245 <IDE::open(int, int, void*)+0x147>
c002323b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023245:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002324c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023253:	c1 e1 10             	shl    ecx,0x10
c0023256:	c1 e0 08             	shl    eax,0x8
c0023259:	bf f8 0c 00 00       	mov    edi,0xcf8
c002325e:	09 c1                	or     ecx,eax
c0023260:	89 fa                	mov    edx,edi
c0023262:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023269:	c1 e0 0b             	shl    eax,0xb
c002326c:	09 c1                	or     ecx,eax
c002326e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023274:	89 c8                	mov    eax,ecx
c0023276:	ef                   	out    dx,eax
c0023277:	be fc 0c 00 00       	mov    esi,0xcfc
c002327c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023282:	89 f2                	mov    edx,esi
c0023284:	ee                   	out    dx,al
c0023285:	89 c8                	mov    eax,ecx
c0023287:	89 fa                	mov    edx,edi
c0023289:	ef                   	out    dx,eax
c002328a:	89 f2                	mov    edx,esi
c002328c:	ed                   	in     eax,dx
c002328d:	0f b6 c0             	movzx  eax,al
c0023290:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023296:	74 46                	je     c00232de <IDE::open(int, int, void*)+0x1e0>
c0023298:	83 ec 0c             	sub    esp,0xc
c002329b:	68 e4 c8 02 c0       	push   0xc002c8e4
c00232a0:	eb 34                	jmp    c00232d6 <IDE::open(int, int, void*)+0x1d8>
c00232a2:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00232ab:	75 17                	jne    c00232c4 <IDE::open(int, int, void*)+0x1c6>
c00232ad:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00232b2:	74 07                	je     c00232bb <IDE::open(int, int, void*)+0x1bd>
c00232b4:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00232b9:	75 09                	jne    c00232c4 <IDE::open(int, int, void*)+0x1c6>
c00232bb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00232c2:	eb 1a                	jmp    c00232de <IDE::open(int, int, void*)+0x1e0>
c00232c4:	83 ec 0c             	sub    esp,0xc
c00232c7:	68 ec c8 02 c0       	push   0xc002c8ec
c00232cc:	eb 08                	jmp    c00232d6 <IDE::open(int, int, void*)+0x1d8>
c00232ce:	83 ec 0c             	sub    esp,0xc
c00232d1:	68 1d c9 02 c0       	push   0xc002c91d
c00232d6:	e8 9c 71 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c00232db:	83 c4 10             	add    esp,0x10
c00232de:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00232e5:	79 1a                	jns    c0023301 <IDE::open(int, int, void*)+0x203>
c00232e7:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00232ed:	83 e0 fc             	and    eax,0xfffffffc
c00232f0:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00232f7:	83 c0 08             	add    eax,0x8
c00232fa:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023301:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023307:	89 c2                	mov    edx,eax
c0023309:	83 e2 0f             	and    edx,0xf
c002330c:	66 83 fa 08          	cmp    dx,0x8
c0023310:	75 0a                	jne    c002331c <IDE::open(int, int, void*)+0x21e>
c0023312:	83 e8 02             	sub    eax,0x2
c0023315:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002331c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023322:	89 c2                	mov    edx,eax
c0023324:	83 e2 0f             	and    edx,0xf
c0023327:	66 83 fa 08          	cmp    dx,0x8
c002332b:	75 0a                	jne    c0023337 <IDE::open(int, int, void*)+0x239>
c002332d:	83 e8 02             	sub    eax,0x2
c0023330:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023337:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002333e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023345:	89 d0                	mov    eax,edx
c0023347:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002334a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002334e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023352:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023355:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002335a:	0f b6 c9             	movzx  ecx,cl
c002335d:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023364:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023367:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002336b:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002336f:	8d 50 02             	lea    edx,[eax+0x2]
c0023372:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023377:	0f b6 d2             	movzx  edx,dl
c002337a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023380:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023383:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023387:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002338b:	8d 48 03             	lea    ecx,[eax+0x3]
c002338e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023393:	0f b6 c9             	movzx  ecx,cl
c0023396:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002339c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002339f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233a3:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00233a7:	8d 50 04             	lea    edx,[eax+0x4]
c00233aa:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00233b0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00233b5:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00233bc:	66 85 f6             	test   si,si
c00233bf:	74 3e                	je     c00233ff <IDE::open(int, int, void*)+0x301>
c00233c1:	0f b6 d2             	movzx  edx,dl
c00233c4:	83 c0 05             	add    eax,0x5
c00233c7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233ca:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233ce:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00233d2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00233d8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233dd:	eb 20                	jmp    c00233ff <IDE::open(int, int, void*)+0x301>
c00233df:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00233e9:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00233f3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233fa:	e9 02 ff ff ff       	jmp    c0023301 <IDE::open(int, int, void*)+0x203>
c00233ff:	52                   	push   edx
c0023400:	52                   	push   edx
c0023401:	6a 00                	push   0x0
c0023403:	53                   	push   ebx
c0023404:	e8 7d fa ff ff       	call   c0022e86 <IDE::prepareInterrupt(unsigned char)>
c0023409:	59                   	pop    ecx
c002340a:	5e                   	pop    esi
c002340b:	6a 01                	push   0x1
c002340d:	53                   	push   ebx
c002340e:	e8 73 fa ff ff       	call   c0022e86 <IDE::prepareInterrupt(unsigned char)>
c0023413:	83 c4 0c             	add    esp,0xc
c0023416:	6a 00                	push   0x0
c0023418:	6a 00                	push   0x0
c002341a:	53                   	push   ebx
c002341b:	e8 98 fc ff ff       	call   c00230b8 <IDE::enableIRQs(unsigned char, bool)>
c0023420:	83 c4 0c             	add    esp,0xc
c0023423:	6a 00                	push   0x0
c0023425:	6a 01                	push   0x1
c0023427:	53                   	push   ebx
c0023428:	e8 8b fc ff ff       	call   c00230b8 <IDE::enableIRQs(unsigned char, bool)>
c002342d:	83 c4 10             	add    esp,0x10
c0023430:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023437:	74 40                	je     c0023479 <IDE::open(int, int, void*)+0x37b>
c0023439:	83 ec 0c             	sub    esp,0xc
c002343c:	68 47 c9 02 c0       	push   0xc002c947
c0023441:	e8 56 f9 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0023446:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023449:	6a 01                	push   0x1
c002344b:	68 80 30 02 c0       	push   0xc0023080
c0023450:	6a 0e                	push   0xe
c0023452:	53                   	push   ebx
c0023453:	e8 ee 0c ff ff       	call   c0014146 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023458:	83 c4 14             	add    esp,0x14
c002345b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023461:	53                   	push   ebx
c0023462:	6a 01                	push   0x1
c0023464:	68 9c 30 02 c0       	push   0xc002309c
c0023469:	6a 0f                	push   0xf
c002346b:	53                   	push   ebx
c002346c:	e8 d5 0c ff ff       	call   c0014146 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023471:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023477:	eb 4a                	jmp    c00234c3 <IDE::open(int, int, void*)+0x3c5>
c0023479:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023483:	50                   	push   eax
c0023484:	6a 0f                	push   0xf
c0023486:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002348c:	68 63 c9 02 c0       	push   0xc002c963
c0023491:	e8 06 f9 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0023496:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023499:	6a 00                	push   0x0
c002349b:	68 80 30 02 c0       	push   0xc0023080
c00234a0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00234a6:	53                   	push   ebx
c00234a7:	e8 9a 0c ff ff       	call   c0014146 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234ac:	83 c4 14             	add    esp,0x14
c00234af:	53                   	push   ebx
c00234b0:	6a 00                	push   0x0
c00234b2:	68 9c 30 02 c0       	push   0xc002309c
c00234b7:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00234bd:	53                   	push   ebx
c00234be:	e8 83 0c ff ff       	call   c0014146 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00234c5:	83 c4 20             	add    esp,0x20
c00234c8:	83 ec 0c             	sub    esp,0xc
c00234cb:	53                   	push   ebx
c00234cc:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00234cf:	83 c4 0c             	add    esp,0xc
c00234d2:	6a 07                	push   0x7
c00234d4:	6a 00                	push   0x0
c00234d6:	53                   	push   ebx
c00234d7:	e8 90 fa ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c00234dc:	83 c4 0c             	add    esp,0xc
c00234df:	6a 07                	push   0x7
c00234e1:	6a 01                	push   0x1
c00234e3:	53                   	push   ebx
c00234e4:	e8 83 fa ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c00234e9:	83 c4 0c             	add    esp,0xc
c00234ec:	6a 01                	push   0x1
c00234ee:	6a 00                	push   0x0
c00234f0:	53                   	push   ebx
c00234f1:	e8 c2 fb ff ff       	call   c00230b8 <IDE::enableIRQs(unsigned char, bool)>
c00234f6:	83 c4 0c             	add    esp,0xc
c00234f9:	6a 01                	push   0x1
c00234fb:	6a 01                	push   0x1
c00234fd:	53                   	push   ebx
c00234fe:	e8 b5 fb ff ff       	call   c00230b8 <IDE::enableIRQs(unsigned char, bool)>
c0023503:	83 c4 2c             	add    esp,0x2c
c0023506:	31 c0                	xor    eax,eax
c0023508:	5b                   	pop    ebx
c0023509:	5e                   	pop    esi
c002350a:	5f                   	pop    edi
c002350b:	5d                   	pop    ebp
c002350c:	c3                   	ret    
c002350d:	90                   	nop

c002350e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002350e:	55                   	push   ebp
c002350f:	57                   	push   edi
c0023510:	56                   	push   esi
c0023511:	53                   	push   ebx
c0023512:	83 ec 1c             	sub    esp,0x1c
c0023515:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023519:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002351d:	8d 50 f8             	lea    edx,[eax-0x8]
c0023520:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023524:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023528:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002352c:	80 fa 03             	cmp    dl,0x3
c002352f:	77 5d                	ja     c002358e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023531:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023535:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023539:	0f b6 db             	movzx  ebx,bl
c002353c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002353f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023543:	83 ca 80             	or     edx,0xffffff80
c0023546:	0f b6 d2             	movzx  edx,dl
c0023549:	52                   	push   edx
c002354a:	6a 0c                	push   0xc
c002354c:	53                   	push   ebx
c002354d:	56                   	push   esi
c002354e:	e8 59 f9 ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023553:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023558:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002355c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023560:	0f b6 c0             	movzx  eax,al
c0023563:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023567:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023569:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002356e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023572:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023576:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002357a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023582:	83 c4 2c             	add    esp,0x2c
c0023585:	5b                   	pop    ebx
c0023586:	5e                   	pop    esi
c0023587:	5f                   	pop    edi
c0023588:	5d                   	pop    ebp
c0023589:	e9 1e f9 ff ff       	jmp    c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002358e:	3c 07                	cmp    al,0x7
c0023590:	77 10                	ja     c00235a2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023592:	0f b6 db             	movzx  ebx,bl
c0023595:	0f b6 d0             	movzx  edx,al
c0023598:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00235a0:	eb 2d                	jmp    c00235cf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00235a2:	3c 0d                	cmp    al,0xd
c00235a4:	77 13                	ja     c00235b9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00235a6:	0f b6 db             	movzx  ebx,bl
c00235a9:	0f b6 c0             	movzx  eax,al
c00235ac:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00235b3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00235b7:	eb 16                	jmp    c00235cf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00235b9:	3c 15                	cmp    al,0x15
c00235bb:	77 14                	ja     c00235d1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00235bd:	0f b6 db             	movzx  ebx,bl
c00235c0:	0f b6 c0             	movzx  eax,al
c00235c3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00235cb:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00235cf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00235d1:	83 c4 1c             	add    esp,0x1c
c00235d4:	5b                   	pop    ebx
c00235d5:	5e                   	pop    esi
c00235d6:	5f                   	pop    edi
c00235d7:	5d                   	pop    ebp
c00235d8:	c3                   	ret    
c00235d9:	90                   	nop

c00235da <IDE::detect()>:
c00235da:	55                   	push   ebp
c00235db:	57                   	push   edi
c00235dc:	56                   	push   esi
c00235dd:	53                   	push   ebx
c00235de:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00235e4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00235eb:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00235f2:	0f 85 be 02 00 00    	jne    c00238b6 <IDE::detect()+0x2dc>
c00235f8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00235ff:	31 f6                	xor    esi,esi
c0023601:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023609:	31 ed                	xor    ebp,ebp
c002360b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002360f:	c1 e0 06             	shl    eax,0x6
c0023612:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002361a:	89 e8                	mov    eax,ebp
c002361c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023620:	c1 e0 04             	shl    eax,0x4
c0023623:	83 c8 a0             	or     eax,0xffffffa0
c0023626:	0f b6 c0             	movzx  eax,al
c0023629:	50                   	push   eax
c002362a:	6a 06                	push   0x6
c002362c:	56                   	push   esi
c002362d:	53                   	push   ebx
c002362e:	e8 79 f8 ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023633:	83 c4 0c             	add    esp,0xc
c0023636:	6a 0c                	push   0xc
c0023638:	56                   	push   esi
c0023639:	53                   	push   ebx
c002363a:	e8 2d f9 ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c002363f:	83 c4 0c             	add    esp,0xc
c0023642:	6a 0c                	push   0xc
c0023644:	56                   	push   esi
c0023645:	53                   	push   ebx
c0023646:	e8 21 f9 ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c002364b:	83 c4 0c             	add    esp,0xc
c002364e:	6a 0c                	push   0xc
c0023650:	56                   	push   esi
c0023651:	53                   	push   ebx
c0023652:	e8 15 f9 ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c0023657:	83 c4 0c             	add    esp,0xc
c002365a:	6a 0c                	push   0xc
c002365c:	56                   	push   esi
c002365d:	53                   	push   ebx
c002365e:	e8 09 f9 ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c0023663:	68 ec 00 00 00       	push   0xec
c0023668:	6a 07                	push   0x7
c002366a:	56                   	push   esi
c002366b:	53                   	push   ebx
c002366c:	e8 3b f8 ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023671:	83 c4 1c             	add    esp,0x1c
c0023674:	6a 0c                	push   0xc
c0023676:	56                   	push   esi
c0023677:	53                   	push   ebx
c0023678:	e8 ef f8 ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c002367d:	83 c4 0c             	add    esp,0xc
c0023680:	6a 0c                	push   0xc
c0023682:	56                   	push   esi
c0023683:	53                   	push   ebx
c0023684:	e8 e3 f8 ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c0023689:	83 c4 0c             	add    esp,0xc
c002368c:	6a 0c                	push   0xc
c002368e:	56                   	push   esi
c002368f:	53                   	push   ebx
c0023690:	e8 d7 f8 ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c0023695:	83 c4 0c             	add    esp,0xc
c0023698:	6a 0c                	push   0xc
c002369a:	56                   	push   esi
c002369b:	53                   	push   ebx
c002369c:	e8 cb f8 ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c00236a1:	83 c4 0c             	add    esp,0xc
c00236a4:	6a 0c                	push   0xc
c00236a6:	56                   	push   esi
c00236a7:	53                   	push   ebx
c00236a8:	e8 bf f8 ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c00236ad:	83 c4 10             	add    esp,0x10
c00236b0:	84 c0                	test   al,al
c00236b2:	0f 84 8b 01 00 00    	je     c0023843 <IDE::detect()+0x269>
c00236b8:	31 ff                	xor    edi,edi
c00236ba:	50                   	push   eax
c00236bb:	6a 0c                	push   0xc
c00236bd:	56                   	push   esi
c00236be:	53                   	push   ebx
c00236bf:	e8 a8 f8 ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c00236c4:	83 c4 10             	add    esp,0x10
c00236c7:	a8 01                	test   al,0x1
c00236c9:	0f 85 8e 01 00 00    	jne    c002385d <IDE::detect()+0x283>
c00236cf:	84 c0                	test   al,al
c00236d1:	78 04                	js     c00236d7 <IDE::detect()+0xfd>
c00236d3:	a8 08                	test   al,0x8
c00236d5:	75 27                	jne    c00236fe <IDE::detect()+0x124>
c00236d7:	47                   	inc    edi
c00236d8:	81 ff 17 01 00 00    	cmp    edi,0x117
c00236de:	7e da                	jle    c00236ba <IDE::detect()+0xe0>
c00236e0:	50                   	push   eax
c00236e1:	50                   	push   eax
c00236e2:	6a 00                	push   0x0
c00236e4:	68 40 4b 4c 00       	push   0x4c4b40
c00236e9:	e8 d2 aa ff ff       	call   c001e1c0 <nanoSleep(unsigned long long)>
c00236ee:	83 c4 10             	add    esp,0x10
c00236f1:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00236f7:	75 c1                	jne    c00236ba <IDE::detect()+0xe0>
c00236f9:	e9 5f 01 00 00       	jmp    c002385d <IDE::detect()+0x283>
c00236fe:	31 c9                	xor    ecx,ecx
c0023700:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023704:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023708:	83 ec 0c             	sub    esp,0xc
c002370b:	68 80 00 00 00       	push   0x80
c0023710:	57                   	push   edi
c0023711:	6a 00                	push   0x0
c0023713:	56                   	push   esi
c0023714:	53                   	push   ebx
c0023715:	e8 f4 fd ff ff       	call   c002350e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002371a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002371f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023723:	89 d1                	mov    ecx,edx
c0023725:	c1 e0 06             	shl    eax,0x6
c0023728:	01 d8                	add    eax,ebx
c002372a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023731:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023738:	89 f2                	mov    edx,esi
c002373a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023740:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023744:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002374a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002374e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023755:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002375d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023764:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002376c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023772:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023779:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002377f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023783:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023787:	83 c4 20             	add    esp,0x20
c002378a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002378d:	83 c0 02             	add    eax,0x2
c0023790:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023796:	83 c7 02             	add    edi,0x2
c0023799:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002379c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00237a2:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00237a6:	75 e2                	jne    c002378a <IDE::detect()+0x1b0>
c00237a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237ac:	c1 e0 06             	shl    eax,0x6
c00237af:	01 d8                	add    eax,ebx
c00237b1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00237b7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00237be:	66 c1 ea 09          	shr    dx,0x9
c00237c2:	83 e2 01             	and    edx,0x1
c00237c5:	84 c9                	test   cl,cl
c00237c7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00237cd:	75 2f                	jne    c00237fe <IDE::detect()+0x224>
c00237cf:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00237d5:	85 c0                	test   eax,eax
c00237d7:	74 66                	je     c002383f <IDE::detect()+0x265>
c00237d9:	50                   	push   eax
c00237da:	55                   	push   ebp
c00237db:	56                   	push   esi
c00237dc:	68 7f c9 02 c0       	push   0xc002c97f
c00237e1:	e8 b6 f5 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00237e6:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00237ed:	e8 51 c0 fe ff       	call   c000f843 <malloc>
c00237f2:	89 c7                	mov    edi,eax
c00237f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00237f7:	e8 78 06 00 00       	call   c0023e74 <ATA::ATA()>
c00237fc:	eb 28                	jmp    c0023826 <IDE::detect()+0x24c>
c00237fe:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023804:	55                   	push   ebp
c0023805:	56                   	push   esi
c0023806:	68 ae c9 02 c0       	push   0xc002c9ae
c002380b:	e8 8c f5 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0023810:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023817:	e8 27 c0 fe ff       	call   c000f843 <malloc>
c002381c:	89 c7                	mov    edi,eax
c002381e:	89 04 24             	mov    DWORD PTR [esp],eax
c0023821:	e8 8e 0c 00 00       	call   c00244b4 <ATAPI::ATAPI()>
c0023826:	5a                   	pop    edx
c0023827:	59                   	pop    ecx
c0023828:	57                   	push   edi
c0023829:	53                   	push   ebx
c002382a:	e8 93 09 ff ff       	call   c00141c2 <Device::addChild(Device*)>
c002382f:	8b 07                	mov    eax,DWORD PTR [edi]
c0023831:	53                   	push   ebx
c0023832:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023836:	6a 00                	push   0x0
c0023838:	57                   	push   edi
c0023839:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002383c:	83 c4 20             	add    esp,0x20
c002383f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023843:	4d                   	dec    ebp
c0023844:	74 0a                	je     c0023850 <IDE::detect()+0x276>
c0023846:	bd 01 00 00 00       	mov    ebp,0x1
c002384b:	e9 bb fd ff ff       	jmp    c002360b <IDE::detect()+0x31>
c0023850:	4e                   	dec    esi
c0023851:	74 63                	je     c00238b6 <IDE::detect()+0x2dc>
c0023853:	be 01 00 00 00       	mov    esi,0x1
c0023858:	e9 ac fd ff ff       	jmp    c0023609 <IDE::detect()+0x2f>
c002385d:	50                   	push   eax
c002385e:	6a 04                	push   0x4
c0023860:	56                   	push   esi
c0023861:	53                   	push   ebx
c0023862:	e8 05 f7 ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c0023867:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002386b:	83 c4 0c             	add    esp,0xc
c002386e:	6a 05                	push   0x5
c0023870:	56                   	push   esi
c0023871:	53                   	push   ebx
c0023872:	e8 f5 f6 ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c0023877:	83 c4 10             	add    esp,0x10
c002387a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002387e:	80 fa 14             	cmp    dl,0x14
c0023881:	75 04                	jne    c0023887 <IDE::detect()+0x2ad>
c0023883:	3c eb                	cmp    al,0xeb
c0023885:	eb 07                	jmp    c002388e <IDE::detect()+0x2b4>
c0023887:	3c 96                	cmp    al,0x96
c0023889:	75 b8                	jne    c0023843 <IDE::detect()+0x269>
c002388b:	80 fa 69             	cmp    dl,0x69
c002388e:	75 b3                	jne    c0023843 <IDE::detect()+0x269>
c0023890:	68 a1 00 00 00       	push   0xa1
c0023895:	6a 07                	push   0x7
c0023897:	56                   	push   esi
c0023898:	53                   	push   ebx
c0023899:	e8 0e f6 ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002389e:	5f                   	pop    edi
c002389f:	58                   	pop    eax
c00238a0:	6a 00                	push   0x0
c00238a2:	68 40 42 0f 00       	push   0xf4240
c00238a7:	e8 14 a9 ff ff       	call   c001e1c0 <nanoSleep(unsigned long long)>
c00238ac:	83 c4 10             	add    esp,0x10
c00238af:	b1 01                	mov    cl,0x1
c00238b1:	e9 4a fe ff ff       	jmp    c0023700 <IDE::detect()+0x126>
c00238b6:	81 c4 1c 02 00 00    	add    esp,0x21c
c00238bc:	5b                   	pop    ebx
c00238bd:	5e                   	pop    esi
c00238be:	5f                   	pop    edi
c00238bf:	5d                   	pop    ebp
c00238c0:	c3                   	ret    
c00238c1:	90                   	nop

c00238c2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00238c2:	55                   	push   ebp
c00238c3:	57                   	push   edi
c00238c4:	56                   	push   esi
c00238c5:	53                   	push   ebx
c00238c6:	83 ec 1c             	sub    esp,0x1c
c00238c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00238cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00238d1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00238d5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00238d9:	88 c3                	mov    bl,al
c00238db:	84 c0                	test   al,al
c00238dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00238e1:	0f 84 67 01 00 00    	je     c0023a4e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00238e7:	83 ec 0c             	sub    esp,0xc
c00238ea:	68 df c9 02 c0       	push   0xc002c9df
c00238ef:	e8 a8 f4 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00238f4:	83 c4 10             	add    esp,0x10
c00238f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00238fb:	3c 01                	cmp    al,0x1
c00238fd:	75 17                	jne    c0023916 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00238ff:	83 ec 0c             	sub    esp,0xc
c0023902:	b3 13                	mov    bl,0x13
c0023904:	68 eb c9 02 c0       	push   0xc002c9eb
c0023909:	e8 8e f4 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c002390e:	83 c4 10             	add    esp,0x10
c0023911:	e9 25 01 00 00       	jmp    c0023a3b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023916:	3c 02                	cmp    al,0x2
c0023918:	0f 85 ef 00 00 00    	jne    c0023a0d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c002391e:	d1 e6                	shl    esi,1
c0023920:	09 ee                	or     esi,ebp
c0023922:	52                   	push   edx
c0023923:	89 f0                	mov    eax,esi
c0023925:	6a 01                	push   0x1
c0023927:	0f b6 f0             	movzx  esi,al
c002392a:	c1 e6 06             	shl    esi,0x6
c002392d:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023935:	50                   	push   eax
c0023936:	57                   	push   edi
c0023937:	e8 30 f6 ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c002393c:	83 c4 10             	add    esp,0x10
c002393f:	89 c6                	mov    esi,eax
c0023941:	a8 01                	test   al,0x1
c0023943:	74 12                	je     c0023957 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023945:	83 ec 0c             	sub    esp,0xc
c0023948:	b3 07                	mov    bl,0x7
c002394a:	68 00 ca 02 c0       	push   0xc002ca00
c002394f:	e8 48 f4 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0023954:	83 c4 10             	add    esp,0x10
c0023957:	f7 c6 02 00 00 00    	test   esi,0x2
c002395d:	74 12                	je     c0023971 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002395f:	83 ec 0c             	sub    esp,0xc
c0023962:	b3 03                	mov    bl,0x3
c0023964:	68 1e ca 02 c0       	push   0xc002ca1e
c0023969:	e8 2e f4 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c002396e:	83 c4 10             	add    esp,0x10
c0023971:	f7 c6 04 00 00 00    	test   esi,0x4
c0023977:	74 12                	je     c002398b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023979:	83 ec 0c             	sub    esp,0xc
c002397c:	b3 14                	mov    bl,0x14
c002397e:	68 3e ca 02 c0       	push   0xc002ca3e
c0023983:	e8 14 f4 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0023988:	83 c4 10             	add    esp,0x10
c002398b:	f7 c6 08 00 00 00    	test   esi,0x8
c0023991:	74 12                	je     c00239a5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023993:	83 ec 0c             	sub    esp,0xc
c0023996:	b3 03                	mov    bl,0x3
c0023998:	68 1e ca 02 c0       	push   0xc002ca1e
c002399d:	e8 fa f3 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00239a2:	83 c4 10             	add    esp,0x10
c00239a5:	f7 c6 10 00 00 00    	test   esi,0x10
c00239ab:	74 12                	je     c00239bf <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00239ad:	83 ec 0c             	sub    esp,0xc
c00239b0:	b3 15                	mov    bl,0x15
c00239b2:	68 56 ca 02 c0       	push   0xc002ca56
c00239b7:	e8 e0 f3 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00239bc:	83 c4 10             	add    esp,0x10
c00239bf:	f7 c6 20 00 00 00    	test   esi,0x20
c00239c5:	74 12                	je     c00239d9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00239c7:	83 ec 0c             	sub    esp,0xc
c00239ca:	b3 03                	mov    bl,0x3
c00239cc:	68 1e ca 02 c0       	push   0xc002ca1e
c00239d1:	e8 c6 f3 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00239d6:	83 c4 10             	add    esp,0x10
c00239d9:	f7 c6 40 00 00 00    	test   esi,0x40
c00239df:	74 12                	je     c00239f3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00239e1:	83 ec 0c             	sub    esp,0xc
c00239e4:	b3 16                	mov    bl,0x16
c00239e6:	68 70 ca 02 c0       	push   0xc002ca70
c00239eb:	e8 ac f3 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00239f0:	83 c4 10             	add    esp,0x10
c00239f3:	89 f0                	mov    eax,esi
c00239f5:	84 c0                	test   al,al
c00239f7:	79 42                	jns    c0023a3b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00239f9:	83 ec 0c             	sub    esp,0xc
c00239fc:	b3 0d                	mov    bl,0xd
c00239fe:	68 91 ca 02 c0       	push   0xc002ca91
c0023a03:	e8 94 f3 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0023a08:	83 c4 10             	add    esp,0x10
c0023a0b:	eb 2e                	jmp    c0023a3b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a0d:	3c 03                	cmp    al,0x3
c0023a0f:	75 14                	jne    c0023a25 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023a11:	83 ec 0c             	sub    esp,0xc
c0023a14:	b3 17                	mov    bl,0x17
c0023a16:	68 a5 ca 02 c0       	push   0xc002caa5
c0023a1b:	e8 7c f3 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0023a20:	83 c4 10             	add    esp,0x10
c0023a23:	eb 16                	jmp    c0023a3b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a25:	3c 04                	cmp    al,0x4
c0023a27:	75 12                	jne    c0023a3b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a29:	83 ec 0c             	sub    esp,0xc
c0023a2c:	b3 08                	mov    bl,0x8
c0023a2e:	68 bb ca 02 c0       	push   0xc002cabb
c0023a33:	e8 64 f3 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0023a38:	83 c4 10             	add    esp,0x10
c0023a3b:	50                   	push   eax
c0023a3c:	50                   	push   eax
c0023a3d:	0f b6 c3             	movzx  eax,bl
c0023a40:	50                   	push   eax
c0023a41:	68 d3 ca 02 c0       	push   0xc002cad3
c0023a46:	e8 51 f3 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0023a4b:	83 c4 10             	add    esp,0x10
c0023a4e:	83 c4 1c             	add    esp,0x1c
c0023a51:	88 d8                	mov    al,bl
c0023a53:	5b                   	pop    ebx
c0023a54:	5e                   	pop    esi
c0023a55:	5f                   	pop    edi
c0023a56:	5d                   	pop    ebp
c0023a57:	c3                   	ret    

c0023a58 <IDE::polling(unsigned char, unsigned int)>:
c0023a58:	57                   	push   edi
c0023a59:	56                   	push   esi
c0023a5a:	53                   	push   ebx
c0023a5b:	bb 04 00 00 00       	mov    ebx,0x4
c0023a60:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023a64:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023a69:	52                   	push   edx
c0023a6a:	6a 0c                	push   0xc
c0023a6c:	56                   	push   esi
c0023a6d:	57                   	push   edi
c0023a6e:	e8 f9 f4 ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c0023a73:	83 c4 10             	add    esp,0x10
c0023a76:	4b                   	dec    ebx
c0023a77:	75 f0                	jne    c0023a69 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023a79:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023a7e:	50                   	push   eax
c0023a7f:	6a 0c                	push   0xc
c0023a81:	56                   	push   esi
c0023a82:	57                   	push   edi
c0023a83:	e8 e4 f4 ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c0023a88:	83 c4 10             	add    esp,0x10
c0023a8b:	a8 01                	test   al,0x1
c0023a8d:	74 12                	je     c0023aa1 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023a8f:	83 ec 0c             	sub    esp,0xc
c0023a92:	68 ed ca 02 c0       	push   0xc002caed
c0023a97:	e8 00 f3 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0023a9c:	83 c4 10             	add    esp,0x10
c0023a9f:	eb 17                	jmp    c0023ab8 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023aa1:	a8 20                	test   al,0x20
c0023aa3:	75 0f                	jne    c0023ab4 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023aa5:	4b                   	dec    ebx
c0023aa6:	74 10                	je     c0023ab8 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023aa8:	84 c0                	test   al,al
c0023aaa:	78 d2                	js     c0023a7e <IDE::polling(unsigned char, unsigned int)+0x26>
c0023aac:	a8 08                	test   al,0x8
c0023aae:	74 ce                	je     c0023a7e <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ab0:	31 c0                	xor    eax,eax
c0023ab2:	eb 06                	jmp    c0023aba <IDE::polling(unsigned char, unsigned int)+0x62>
c0023ab4:	b0 01                	mov    al,0x1
c0023ab6:	eb 02                	jmp    c0023aba <IDE::polling(unsigned char, unsigned int)+0x62>
c0023ab8:	b0 02                	mov    al,0x2
c0023aba:	5b                   	pop    ebx
c0023abb:	5e                   	pop    esi
c0023abc:	5f                   	pop    edi
c0023abd:	c3                   	ret    

c0023abe <SATABus::close(int, int, void*)>:
c0023abe:	31 c0                	xor    eax,eax
c0023ac0:	c3                   	ret    
c0023ac1:	90                   	nop

c0023ac2 <SATABus::detect()>:
c0023ac2:	c3                   	ret    
c0023ac3:	90                   	nop

c0023ac4 <SATABus::SATABus()>:
c0023ac4:	83 ec 0c             	sub    esp,0xc
c0023ac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023acb:	83 ec 08             	sub    esp,0x8
c0023ace:	68 30 cb 02 c0       	push   0xc002cb30
c0023ad3:	50                   	push   eax
c0023ad4:	e8 75 0a ff ff       	call   c001454e <HardDiskController::HardDiskController(char const*)>
c0023ad9:	83 c4 10             	add    esp,0x10
c0023adc:	ba ec cb 02 c0       	mov    edx,0xc002cbec
c0023ae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ae5:	89 10                	mov    DWORD PTR [eax],edx
c0023ae7:	83 ec 0c             	sub    esp,0xc
c0023aea:	6a 50                	push   0x50
c0023aec:	e8 d4 c4 fe ff       	call   c000ffc5 <Phys::allocateContiguousPages(int)>
c0023af1:	83 c4 10             	add    esp,0x10
c0023af4:	89 c2                	mov    edx,eax
c0023af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023afa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023b00:	83 ec 0c             	sub    esp,0xc
c0023b03:	6a 50                	push   0x50
c0023b05:	e8 35 e0 fe ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c0023b0a:	83 c4 10             	add    esp,0x10
c0023b0d:	89 c2                	mov    edx,eax
c0023b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b13:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023b19:	e8 c8 e2 fe ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0023b1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b22:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023b28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b2c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023b32:	83 ec 0c             	sub    esp,0xc
c0023b35:	6a 03                	push   0x3
c0023b37:	6a 50                	push   0x50
c0023b39:	51                   	push   ecx
c0023b3a:	52                   	push   edx
c0023b3b:	50                   	push   eax
c0023b3c:	e8 bb e9 fe ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023b41:	83 c4 20             	add    esp,0x20
c0023b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b48:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b52:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023b58:	83 ec 04             	sub    esp,0x4
c0023b5b:	52                   	push   edx
c0023b5c:	50                   	push   eax
c0023b5d:	68 54 cb 02 c0       	push   0xc002cb54
c0023b62:	e8 35 f2 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0023b67:	83 c4 10             	add    esp,0x10
c0023b6a:	90                   	nop
c0023b6b:	83 c4 0c             	add    esp,0xc
c0023b6e:	c3                   	ret    
c0023b6f:	90                   	nop

c0023b70 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023b70:	83 ec 0c             	sub    esp,0xc
c0023b73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023b77:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023b7a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023b7d:	09 c2                	or     edx,eax
c0023b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b83:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023b89:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023b8b:	31 c0                	xor    eax,eax
c0023b8d:	c1 e9 08             	shr    ecx,0x8
c0023b90:	83 e1 0f             	and    ecx,0xf
c0023b93:	39 c8                	cmp    eax,ecx
c0023b95:	74 0a                	je     c0023ba1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023b97:	f6 c2 01             	test   dl,0x1
c0023b9a:	74 18                	je     c0023bb4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b9c:	d1 ea                	shr    edx,1
c0023b9e:	40                   	inc    eax
c0023b9f:	eb f2                	jmp    c0023b93 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023ba1:	83 ec 0c             	sub    esp,0xc
c0023ba4:	68 78 cb 02 c0       	push   0xc002cb78
c0023ba9:	e8 c9 68 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c0023bae:	83 c4 10             	add    esp,0x10
c0023bb1:	83 c8 ff             	or     eax,0xffffffff
c0023bb4:	83 c4 0c             	add    esp,0xc
c0023bb7:	c3                   	ret    

c0023bb8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023bb8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023bbc:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023bbf:	89 c2                	mov    edx,eax
c0023bc1:	c1 ea 08             	shr    edx,0x8
c0023bc4:	83 e2 0f             	and    edx,0xf
c0023bc7:	fe ca                	dec    dl
c0023bc9:	75 31                	jne    c0023bfc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023bcb:	83 e0 0f             	and    eax,0xf
c0023bce:	3c 03                	cmp    al,0x3
c0023bd0:	75 2a                	jne    c0023bfc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023bd2:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023bd5:	b8 02 00 00 00       	mov    eax,0x2
c0023bda:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023be0:	74 1c                	je     c0023bfe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023be2:	b8 04 00 00 00       	mov    eax,0x4
c0023be7:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023bed:	74 0f                	je     c0023bfe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023bef:	31 c0                	xor    eax,eax
c0023bf1:	83 fa 03             	cmp    edx,0x3
c0023bf4:	0f 94 c0             	sete   al
c0023bf7:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023bfb:	c3                   	ret    
c0023bfc:	31 c0                	xor    eax,eax
c0023bfe:	c3                   	ret    
c0023bff:	90                   	nop

c0023c00 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023c04:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c07:	0f ba e2 0f          	bt     edx,0xf
c0023c0b:	72 f7                	jb     c0023c04 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023c0d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c10:	83 ca 10             	or     edx,0x10
c0023c13:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c16:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c19:	83 ca 01             	or     edx,0x1
c0023c1c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c1f:	c3                   	ret    

c0023c20 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023c20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023c24:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c27:	83 e2 fe             	and    edx,0xfffffffe
c0023c2a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c2d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c30:	83 e2 ef             	and    edx,0xffffffef
c0023c33:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c36:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c39:	0f ba e2 0e          	bt     edx,0xe
c0023c3d:	72 f7                	jb     c0023c36 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c3f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c42:	0f ba e2 0f          	bt     edx,0xf
c0023c46:	72 ee                	jb     c0023c36 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c48:	c3                   	ret    
c0023c49:	90                   	nop

c0023c4a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023c4a:	55                   	push   ebp
c0023c4b:	57                   	push   edi
c0023c4c:	56                   	push   esi
c0023c4d:	53                   	push   ebx
c0023c4e:	83 ec 1c             	sub    esp,0x1c
c0023c51:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023c55:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023c59:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023c5d:	53                   	push   ebx
c0023c5e:	89 fd                	mov    ebp,edi
c0023c60:	56                   	push   esi
c0023c61:	c1 e5 0a             	shl    ebp,0xa
c0023c64:	e8 b7 ff ff ff       	call   c0023c20 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023c69:	83 ec 0c             	sub    esp,0xc
c0023c6c:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023c72:	01 e8                	add    eax,ebp
c0023c74:	89 03                	mov    DWORD PTR [ebx],eax
c0023c76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023c78:	68 00 04 00 00       	push   0x400
c0023c7d:	6a 00                	push   0x0
c0023c7f:	50                   	push   eax
c0023c80:	e8 f3 ca fd ff       	call   c0000778 <memset>
c0023c85:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023c8b:	89 fa                	mov    edx,edi
c0023c8d:	01 e8                	add    eax,ebp
c0023c8f:	c1 e7 0d             	shl    edi,0xd
c0023c92:	89 03                	mov    DWORD PTR [ebx],eax
c0023c94:	c1 e2 08             	shl    edx,0x8
c0023c97:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023c9e:	81 c2 00 80 00 00    	add    edx,0x8000
c0023ca4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023ca8:	89 d0                	mov    eax,edx
c0023caa:	83 c4 1c             	add    esp,0x1c
c0023cad:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023cb3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023cb6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023cb9:	68 00 01 00 00       	push   0x100
c0023cbe:	6a 00                	push   0x0
c0023cc0:	50                   	push   eax
c0023cc1:	e8 b2 ca fd ff       	call   c0000778 <memset>
c0023cc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023cca:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023cd0:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023cd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023cda:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023cdd:	83 c4 10             	add    esp,0x10
c0023ce0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023ce7:	31 ff                	xor    edi,edi
c0023ce9:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023cef:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023cf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023cf9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023cff:	83 c5 20             	add    ebp,0x20
c0023d02:	01 f8                	add    eax,edi
c0023d04:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023d07:	52                   	push   edx
c0023d08:	68 00 01 00 00       	push   0x100
c0023d0d:	6a 00                	push   0x0
c0023d0f:	50                   	push   eax
c0023d10:	e8 63 ca fd ff       	call   c0000778 <memset>
c0023d15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023d19:	83 c4 10             	add    esp,0x10
c0023d1c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023d22:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023d29:	01 f8                	add    eax,edi
c0023d2b:	81 c7 00 01 00 00    	add    edi,0x100
c0023d31:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023d34:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023d3a:	75 b3                	jne    c0023cef <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023d3c:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023d40:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023d44:	83 c4 1c             	add    esp,0x1c
c0023d47:	5b                   	pop    ebx
c0023d48:	5e                   	pop    esi
c0023d49:	5f                   	pop    edi
c0023d4a:	5d                   	pop    ebp
c0023d4b:	e9 b0 fe ff ff       	jmp    c0023c00 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023d50 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023d50:	55                   	push   ebp
c0023d51:	57                   	push   edi
c0023d52:	56                   	push   esi
c0023d53:	53                   	push   ebx
c0023d54:	31 db                	xor    ebx,ebx
c0023d56:	83 ec 0c             	sub    esp,0xc
c0023d59:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023d5d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023d61:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023d64:	f7 c7 01 00 00 00    	test   edi,0x1
c0023d6a:	0f 84 aa 00 00 00    	je     c0023e1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023d70:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023d74:	89 d8                	mov    eax,ebx
c0023d76:	c1 e0 07             	shl    eax,0x7
c0023d79:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023d80:	55                   	push   ebp
c0023d81:	56                   	push   esi
c0023d82:	e8 31 fe ff ff       	call   c0023bb8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023d87:	5a                   	pop    edx
c0023d88:	83 f8 01             	cmp    eax,0x1
c0023d8b:	59                   	pop    ecx
c0023d8c:	75 30                	jne    c0023dbe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023d8e:	50                   	push   eax
c0023d8f:	50                   	push   eax
c0023d90:	53                   	push   ebx
c0023d91:	68 9d cb 02 c0       	push   0xc002cb9d
c0023d96:	e8 01 f0 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0023d9b:	83 c4 0c             	add    esp,0xc
c0023d9e:	53                   	push   ebx
c0023d9f:	55                   	push   ebp
c0023da0:	56                   	push   esi
c0023da1:	e8 a4 fe ff ff       	call   c0023c4a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023da6:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023dad:	e8 91 ba fe ff       	call   c000f843 <malloc>
c0023db2:	89 c5                	mov    ebp,eax
c0023db4:	89 04 24             	mov    DWORD PTR [esp],eax
c0023db7:	e8 60 0d 00 00       	call   c0024b1c <SATA::SATA()>
c0023dbc:	eb 33                	jmp    c0023df1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023dbe:	83 f8 04             	cmp    eax,0x4
c0023dc1:	75 47                	jne    c0023e0a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023dc3:	50                   	push   eax
c0023dc4:	50                   	push   eax
c0023dc5:	53                   	push   ebx
c0023dc6:	68 b4 cb 02 c0       	push   0xc002cbb4
c0023dcb:	e8 cc ef fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0023dd0:	83 c4 0c             	add    esp,0xc
c0023dd3:	53                   	push   ebx
c0023dd4:	55                   	push   ebp
c0023dd5:	56                   	push   esi
c0023dd6:	e8 6f fe ff ff       	call   c0023c4a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ddb:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023de2:	e8 5c ba fe ff       	call   c000f843 <malloc>
c0023de7:	89 c5                	mov    ebp,eax
c0023de9:	89 04 24             	mov    DWORD PTR [esp],eax
c0023dec:	e8 d7 10 00 00       	call   c0024ec8 <SATAPI::SATAPI()>
c0023df1:	5a                   	pop    edx
c0023df2:	59                   	pop    ecx
c0023df3:	55                   	push   ebp
c0023df4:	56                   	push   esi
c0023df5:	e8 c8 03 ff ff       	call   c00141c2 <Device::addChild(Device*)>
c0023dfa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023dfd:	56                   	push   esi
c0023dfe:	6a 00                	push   0x0
c0023e00:	53                   	push   ebx
c0023e01:	55                   	push   ebp
c0023e02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023e05:	83 c4 20             	add    esp,0x20
c0023e08:	eb 10                	jmp    c0023e1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023e0a:	50                   	push   eax
c0023e0b:	50                   	push   eax
c0023e0c:	53                   	push   ebx
c0023e0d:	68 cd cb 02 c0       	push   0xc002cbcd
c0023e12:	e8 85 ef fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0023e17:	83 c4 10             	add    esp,0x10
c0023e1a:	d1 ef                	shr    edi,1
c0023e1c:	43                   	inc    ebx
c0023e1d:	83 fb 20             	cmp    ebx,0x20
c0023e20:	0f 85 3e ff ff ff    	jne    c0023d64 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023e26:	83 c4 0c             	add    esp,0xc
c0023e29:	5b                   	pop    ebx
c0023e2a:	5e                   	pop    esi
c0023e2b:	5f                   	pop    edi
c0023e2c:	5d                   	pop    ebp
c0023e2d:	c3                   	ret    

c0023e2e <SATABus::open(int, int, void*)>:
c0023e2e:	83 ec 14             	sub    esp,0x14
c0023e31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e35:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023e3b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023e41:	52                   	push   edx
c0023e42:	50                   	push   eax
c0023e43:	e8 08 ff ff ff       	call   c0023d50 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023e48:	31 c0                	xor    eax,eax
c0023e4a:	83 c4 1c             	add    esp,0x1c
c0023e4d:	c3                   	ret    

c0023e4e <ATA::close(int, int, void*)>:
c0023e4e:	83 ec 0c             	sub    esp,0xc
c0023e51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e55:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023e5b:	85 c0                	test   eax,eax
c0023e5d:	74 0c                	je     c0023e6b <ATA::close(int, int, void*)+0x1d>
c0023e5f:	83 ec 0c             	sub    esp,0xc
c0023e62:	8b 10                	mov    edx,DWORD PTR [eax]
c0023e64:	50                   	push   eax
c0023e65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023e68:	83 c4 10             	add    esp,0x10
c0023e6b:	31 c0                	xor    eax,eax
c0023e6d:	83 c4 0c             	add    esp,0xc
c0023e70:	c3                   	ret    
c0023e71:	90                   	nop

c0023e72 <ATA::powerSaving(PowerSavingLevel)>:
c0023e72:	c3                   	ret    
c0023e73:	90                   	nop

c0023e74 <ATA::ATA()>:
c0023e74:	83 ec 0c             	sub    esp,0xc
c0023e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e7b:	83 ec 04             	sub    esp,0x4
c0023e7e:	68 00 02 00 00       	push   0x200
c0023e83:	68 b5 cc 02 c0       	push   0xc002ccb5
c0023e88:	50                   	push   eax
c0023e89:	e8 58 07 ff ff       	call   c00145e6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023e8e:	83 c4 10             	add    esp,0x10
c0023e91:	ba 38 cc 02 c0       	mov    edx,0xc002cc38
c0023e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e9a:	89 10                	mov    DWORD PTR [eax],edx
c0023e9c:	90                   	nop
c0023e9d:	83 c4 0c             	add    esp,0xc
c0023ea0:	c3                   	ret    
c0023ea1:	90                   	nop

c0023ea2 <ATA::flush(bool)>:
c0023ea2:	53                   	push   ebx
c0023ea3:	83 ec 08             	sub    esp,0x8
c0023ea6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023eab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023eaf:	19 c0                	sbb    eax,eax
c0023eb1:	83 e0 fd             	and    eax,0xfffffffd
c0023eb4:	05 ea 00 00 00       	add    eax,0xea
c0023eb9:	50                   	push   eax
c0023eba:	6a 07                	push   0x7
c0023ebc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ec3:	50                   	push   eax
c0023ec4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023eca:	e8 dd ef ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ecf:	83 c4 0c             	add    esp,0xc
c0023ed2:	6a 00                	push   0x0
c0023ed4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023edb:	50                   	push   eax
c0023edc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ee2:	e8 71 fb ff ff       	call   c0023a58 <IDE::polling(unsigned char, unsigned int)>
c0023ee7:	83 c4 18             	add    esp,0x18
c0023eea:	5b                   	pop    ebx
c0023eeb:	c3                   	ret    

c0023eec <ATA::readyForCommand()>:
c0023eec:	56                   	push   esi
c0023eed:	53                   	push   ebx
c0023eee:	31 db                	xor    ebx,ebx
c0023ef0:	50                   	push   eax
c0023ef1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023ef5:	50                   	push   eax
c0023ef6:	6a 0c                	push   0xc
c0023ef8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023eff:	50                   	push   eax
c0023f00:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023f06:	e8 61 f0 ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c0023f0b:	83 c4 10             	add    esp,0x10
c0023f0e:	a8 88                	test   al,0x88
c0023f10:	74 23                	je     c0023f35 <ATA::readyForCommand()+0x49>
c0023f12:	43                   	inc    ebx
c0023f13:	83 fb 63             	cmp    ebx,0x63
c0023f16:	7e dd                	jle    c0023ef5 <ATA::readyForCommand()+0x9>
c0023f18:	51                   	push   ecx
c0023f19:	51                   	push   ecx
c0023f1a:	6a 00                	push   0x0
c0023f1c:	68 40 42 0f 00       	push   0xf4240
c0023f21:	e8 9a a2 ff ff       	call   c001e1c0 <nanoSleep(unsigned long long)>
c0023f26:	83 c4 10             	add    esp,0x10
c0023f29:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023f2f:	75 c4                	jne    c0023ef5 <ATA::readyForCommand()+0x9>
c0023f31:	31 c0                	xor    eax,eax
c0023f33:	eb 02                	jmp    c0023f37 <ATA::readyForCommand()+0x4b>
c0023f35:	b0 01                	mov    al,0x1
c0023f37:	5a                   	pop    edx
c0023f38:	5b                   	pop    ebx
c0023f39:	5e                   	pop    esi
c0023f3a:	c3                   	ret    
c0023f3b:	90                   	nop

c0023f3c <ATA::access(unsigned long long, int, void*, bool)>:
c0023f3c:	55                   	push   ebp
c0023f3d:	57                   	push   edi
c0023f3e:	56                   	push   esi
c0023f3f:	53                   	push   ebx
c0023f40:	83 ec 2c             	sub    esp,0x2c
c0023f43:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023f47:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023f4b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023f4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023f53:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023f57:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023f5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023f5f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023f65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023f69:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023f6f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023f73:	c1 e0 06             	shl    eax,0x6
c0023f76:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023f7e:	74 5d                	je     c0023fdd <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023f80:	89 fa                	mov    edx,edi
c0023f82:	89 f0                	mov    eax,esi
c0023f84:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023f88:	c1 ea 1c             	shr    edx,0x1c
c0023f8b:	89 d1                	mov    ecx,edx
c0023f8d:	09 c1                	or     ecx,eax
c0023f8f:	74 25                	je     c0023fb6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023f91:	31 ed                	xor    ebp,ebp
c0023f93:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023f9a:	89 fa                	mov    edx,edi
c0023f9c:	89 f0                	mov    eax,esi
c0023f9e:	0f ad d0             	shrd   eax,edx,cl
c0023fa1:	d3 ea                	shr    edx,cl
c0023fa3:	f6 c1 20             	test   cl,0x20
c0023fa6:	74 02                	je     c0023faa <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023fa8:	89 d0                	mov    eax,edx
c0023faa:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023fae:	45                   	inc    ebp
c0023faf:	83 fd 06             	cmp    ebp,0x6
c0023fb2:	75 df                	jne    c0023f93 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023fb4:	eb 76                	jmp    c002402c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023fb6:	89 f0                	mov    eax,esi
c0023fb8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023fbd:	89 fa                	mov    edx,edi
c0023fbf:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023fc6:	0f ac d0 10          	shrd   eax,edx,0x10
c0023fca:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023fcf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023fd3:	c1 ee 18             	shr    esi,0x18
c0023fd6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023fdb:	eb 56                	jmp    c0024033 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023fdd:	6a 00                	push   0x0
c0023fdf:	6a 3f                	push   0x3f
c0023fe1:	57                   	push   edi
c0023fe2:	56                   	push   esi
c0023fe3:	e8 94 29 00 00       	call   c002697c <__umoddi3>
c0023fe8:	83 c4 10             	add    esp,0x10
c0023feb:	40                   	inc    eax
c0023fec:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023ff0:	6a 00                	push   0x0
c0023ff2:	68 f0 03 00 00       	push   0x3f0
c0023ff7:	57                   	push   edi
c0023ff8:	56                   	push   esi
c0023ff9:	e8 7e 28 00 00       	call   c002687c <__udivdi3>
c0023ffe:	83 c4 10             	add    esp,0x10
c0024001:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024006:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002400d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024012:	6a 00                	push   0x0
c0024014:	6a 3f                	push   0x3f
c0024016:	57                   	push   edi
c0024017:	56                   	push   esi
c0024018:	e8 5f 28 00 00       	call   c002687c <__udivdi3>
c002401d:	83 c4 10             	add    esp,0x10
c0024020:	89 c6                	mov    esi,eax
c0024022:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024027:	83 e6 0f             	and    esi,0xf
c002402a:	eb 07                	jmp    c0024033 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002402c:	31 f6                	xor    esi,esi
c002402e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024033:	bf 01 00 00 00       	mov    edi,0x1
c0024038:	50                   	push   eax
c0024039:	6a 00                	push   0x0
c002403b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024042:	50                   	push   eax
c0024043:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024047:	e8 6c f0 ff ff       	call   c00230b8 <IDE::enableIRQs(unsigned char, bool)>
c002404c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002404f:	e8 98 fe ff ff       	call   c0023eec <ATA::readyForCommand()>
c0024054:	83 c4 10             	add    esp,0x10
c0024057:	84 c0                	test   al,al
c0024059:	0f 84 5a 02 00 00    	je     c00242b9 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002405f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024065:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002406b:	c1 e0 04             	shl    eax,0x4
c002406e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024075:	09 c6                	or     esi,eax
c0024077:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c002407c:	75 05                	jne    c0024083 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002407e:	83 ce a0             	or     esi,0xffffffa0
c0024081:	eb 03                	jmp    c0024086 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024083:	83 ce e0             	or     esi,0xffffffe0
c0024086:	89 f0                	mov    eax,esi
c0024088:	0f b6 f0             	movzx  esi,al
c002408b:	56                   	push   esi
c002408c:	6a 06                	push   0x6
c002408e:	51                   	push   ecx
c002408f:	52                   	push   edx
c0024090:	e8 17 ee ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024095:	83 c4 10             	add    esp,0x10
c0024098:	6a 00                	push   0x0
c002409a:	6a 01                	push   0x1
c002409c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240a3:	50                   	push   eax
c00240a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240aa:	e8 fd ed ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240af:	83 c4 10             	add    esp,0x10
c00240b2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00240b7:	75 6e                	jne    c0024127 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00240b9:	6a 00                	push   0x0
c00240bb:	6a 08                	push   0x8
c00240bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240c4:	50                   	push   eax
c00240c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240cb:	e8 dc ed ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240d0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00240d5:	50                   	push   eax
c00240d6:	6a 09                	push   0x9
c00240d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240df:	50                   	push   eax
c00240e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240e6:	e8 c1 ed ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240eb:	83 c4 20             	add    esp,0x20
c00240ee:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00240f3:	50                   	push   eax
c00240f4:	6a 0a                	push   0xa
c00240f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240fd:	50                   	push   eax
c00240fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024104:	e8 a3 ed ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024109:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002410e:	50                   	push   eax
c002410f:	6a 0b                	push   0xb
c0024111:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024118:	50                   	push   eax
c0024119:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002411f:	e8 88 ed ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024124:	83 c4 20             	add    esp,0x20
c0024127:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002412c:	50                   	push   eax
c002412d:	6a 02                	push   0x2
c002412f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024136:	50                   	push   eax
c0024137:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002413d:	e8 6a ed ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024142:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024147:	50                   	push   eax
c0024148:	6a 03                	push   0x3
c002414a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024151:	50                   	push   eax
c0024152:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024158:	e8 4f ed ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002415d:	83 c4 20             	add    esp,0x20
c0024160:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024165:	50                   	push   eax
c0024166:	6a 04                	push   0x4
c0024168:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002416f:	50                   	push   eax
c0024170:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024176:	e8 31 ed ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002417b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024180:	50                   	push   eax
c0024181:	6a 05                	push   0x5
c0024183:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002418a:	50                   	push   eax
c002418b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024191:	e8 16 ed ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024196:	83 c4 20             	add    esp,0x20
c0024199:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002419e:	0f 94 c0             	sete   al
c00241a1:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00241a6:	74 09                	je     c00241b1 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00241a8:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00241af:	eb 07                	jmp    c00241b8 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00241b1:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00241b8:	0f b6 c0             	movzx  eax,al
c00241bb:	50                   	push   eax
c00241bc:	6a 07                	push   0x7
c00241be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241c5:	50                   	push   eax
c00241c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241cc:	e8 db ec ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241d1:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00241d5:	83 c4 10             	add    esp,0x10
c00241d8:	85 f6                	test   esi,esi
c00241da:	0f 84 ba 00 00 00    	je     c002429a <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00241e0:	50                   	push   eax
c00241e1:	6a 01                	push   0x1
c00241e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241ea:	50                   	push   eax
c00241eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241f1:	e8 62 f8 ff ff       	call   c0023a58 <IDE::polling(unsigned char, unsigned int)>
c00241f6:	83 c4 10             	add    esp,0x10
c00241f9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00241ff:	84 c0                	test   al,al
c0024201:	74 2c                	je     c002422f <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024203:	0f b6 f8             	movzx  edi,al
c0024206:	0f b6 d2             	movzx  edx,dl
c0024209:	57                   	push   edi
c002420a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024211:	50                   	push   eax
c0024212:	52                   	push   edx
c0024213:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024219:	e8 a4 f6 ff ff       	call   c00238c2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002421e:	c7 04 24 10 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc10
c0024225:	e8 72 eb fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c002422a:	e9 87 00 00 00       	jmp    c00242b6 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002422f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024234:	74 33                	je     c0024269 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024236:	31 ed                	xor    ebp,ebp
c0024238:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002423c:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024240:	50                   	push   eax
c0024241:	50                   	push   eax
c0024242:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024249:	50                   	push   eax
c002424a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024250:	e8 45 ec ff ff       	call   c0022e9a <IDE::getBase(unsigned char)>
c0024255:	89 c2                	mov    edx,eax
c0024257:	89 f8                	mov    eax,edi
c0024259:	66 ef                	out    dx,ax
c002425b:	45                   	inc    ebp
c002425c:	83 c4 10             	add    esp,0x10
c002425f:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024265:	75 d1                	jne    c0024238 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024267:	eb 23                	jmp    c002428c <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024269:	0f b6 d2             	movzx  edx,dl
c002426c:	51                   	push   ecx
c002426d:	51                   	push   ecx
c002426e:	52                   	push   edx
c002426f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024275:	e8 20 ec ff ff       	call   c0022e9a <IDE::getBase(unsigned char)>
c002427a:	b9 00 01 00 00       	mov    ecx,0x100
c002427f:	89 c2                	mov    edx,eax
c0024281:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024285:	fc                   	cld    
c0024286:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024289:	83 c4 10             	add    esp,0x10
c002428c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024294:	4e                   	dec    esi
c0024295:	e9 3e ff ff ff       	jmp    c00241d8 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c002429a:	31 ff                	xor    edi,edi
c002429c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00242a1:	74 16                	je     c00242b9 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00242a3:	50                   	push   eax
c00242a4:	50                   	push   eax
c00242a5:	31 c0                	xor    eax,eax
c00242a7:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00242ac:	0f 94 c0             	sete   al
c00242af:	50                   	push   eax
c00242b0:	53                   	push   ebx
c00242b1:	e8 ec fb ff ff       	call   c0023ea2 <ATA::flush(bool)>
c00242b6:	83 c4 10             	add    esp,0x10
c00242b9:	83 c4 2c             	add    esp,0x2c
c00242bc:	89 f8                	mov    eax,edi
c00242be:	5b                   	pop    ebx
c00242bf:	5e                   	pop    esi
c00242c0:	5f                   	pop    edi
c00242c1:	5d                   	pop    ebp
c00242c2:	c3                   	ret    
c00242c3:	90                   	nop

c00242c4 <ATA::read(unsigned long long, int, void*)>:
c00242c4:	57                   	push   edi
c00242c5:	b8 04 00 00 00       	mov    eax,0x4
c00242ca:	56                   	push   esi
c00242cb:	53                   	push   ebx
c00242cc:	83 ec 10             	sub    esp,0x10
c00242cf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00242d3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00242d7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00242da:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00242de:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00242e2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00242e8:	77 3b                	ja     c0024325 <ATA::read(unsigned long long, int, void*)+0x61>
c00242ea:	b8 06 00 00 00       	mov    eax,0x6
c00242ef:	85 d2                	test   edx,edx
c00242f1:	74 32                	je     c0024325 <ATA::read(unsigned long long, int, void*)+0x61>
c00242f3:	50                   	push   eax
c00242f4:	50                   	push   eax
c00242f5:	6a 00                	push   0x0
c00242f7:	52                   	push   edx
c00242f8:	53                   	push   ebx
c00242f9:	57                   	push   edi
c00242fa:	56                   	push   esi
c00242fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00242ff:	e8 38 fc ff ff       	call   c0023f3c <ATA::access(unsigned long long, int, void*, bool)>
c0024304:	83 c4 20             	add    esp,0x20
c0024307:	85 c0                	test   eax,eax
c0024309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002430d:	75 11                	jne    c0024320 <ATA::read(unsigned long long, int, void*)+0x5c>
c002430f:	01 1d a8 25 03 c0    	add    DWORD PTR ds:0xc00325a8,ebx
c0024315:	e8 7a c6 fe ff       	call   c0010994 <VgaText::updateDiskUsage()>
c002431a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002431e:	eb 05                	jmp    c0024325 <ATA::read(unsigned long long, int, void*)+0x61>
c0024320:	b8 01 00 00 00       	mov    eax,0x1
c0024325:	83 c4 10             	add    esp,0x10
c0024328:	5b                   	pop    ebx
c0024329:	5e                   	pop    esi
c002432a:	5f                   	pop    edi
c002432b:	c3                   	ret    

c002432c <ATA::write(unsigned long long, int, void*)>:
c002432c:	57                   	push   edi
c002432d:	b8 04 00 00 00       	mov    eax,0x4
c0024332:	56                   	push   esi
c0024333:	53                   	push   ebx
c0024334:	83 ec 10             	sub    esp,0x10
c0024337:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002433b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002433f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024342:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024346:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002434a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024350:	77 3b                	ja     c002438d <ATA::write(unsigned long long, int, void*)+0x61>
c0024352:	b8 06 00 00 00       	mov    eax,0x6
c0024357:	85 d2                	test   edx,edx
c0024359:	74 32                	je     c002438d <ATA::write(unsigned long long, int, void*)+0x61>
c002435b:	50                   	push   eax
c002435c:	50                   	push   eax
c002435d:	6a 01                	push   0x1
c002435f:	52                   	push   edx
c0024360:	53                   	push   ebx
c0024361:	57                   	push   edi
c0024362:	56                   	push   esi
c0024363:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024367:	e8 d0 fb ff ff       	call   c0023f3c <ATA::access(unsigned long long, int, void*, bool)>
c002436c:	83 c4 20             	add    esp,0x20
c002436f:	85 c0                	test   eax,eax
c0024371:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024375:	75 11                	jne    c0024388 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024377:	01 1d a4 25 03 c0    	add    DWORD PTR ds:0xc00325a4,ebx
c002437d:	e8 12 c6 fe ff       	call   c0010994 <VgaText::updateDiskUsage()>
c0024382:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024386:	eb 05                	jmp    c002438d <ATA::write(unsigned long long, int, void*)+0x61>
c0024388:	b8 01 00 00 00       	mov    eax,0x1
c002438d:	83 c4 10             	add    esp,0x10
c0024390:	5b                   	pop    ebx
c0024391:	5e                   	pop    esi
c0024392:	5f                   	pop    edi
c0024393:	c3                   	ret    

c0024394 <ATA::detectCHS()>:
c0024394:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024398:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002439e:	c1 e0 06             	shl    eax,0x6
c00243a1:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00243a7:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00243b1:	c7 44 24 04 1b cc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cc1b
c00243b9:	e9 b9 60 ff ff       	jmp    c001a477 <Krnl::panic(char const*)>

c00243be <ATA::open(int, int, void*)>:
c00243be:	53                   	push   ebx
c00243bf:	83 ec 08             	sub    esp,0x8
c00243c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00243c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00243ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00243ce:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00243d4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00243da:	c1 e0 06             	shl    eax,0x6
c00243dd:	01 d0                	add    eax,edx
c00243df:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00243e6:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00243ec:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00243f3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00243fd:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024403:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002440a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024411:	75 0c                	jne    c002441f <ATA::open(int, int, void*)+0x61>
c0024413:	83 ec 0c             	sub    esp,0xc
c0024416:	53                   	push   ebx
c0024417:	e8 78 ff ff ff       	call   c0024394 <ATA::detectCHS()>
c002441c:	83 c4 10             	add    esp,0x10
c002441f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024425:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002442b:	c1 e0 06             	shl    eax,0x6
c002442e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024435:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002443f:	d1 e8                	shr    eax,1
c0024441:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024447:	6a 04                	push   0x4
c0024449:	6a 0c                	push   0xc
c002444b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024452:	50                   	push   eax
c0024453:	52                   	push   edx
c0024454:	e8 53 ea ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024459:	90                   	nop
c002445a:	90                   	nop
c002445b:	6a 00                	push   0x0
c002445d:	6a 0c                	push   0xc
c002445f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024466:	50                   	push   eax
c0024467:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002446d:	e8 3a ea ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024472:	83 c4 14             	add    esp,0x14
c0024475:	53                   	push   ebx
c0024476:	e8 d3 01 ff ff       	call   c001464e <PhysicalDisk::startCache()>
c002447b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002447e:	e8 77 23 ff ff       	call   c00167fa <createPartitionsForDisk(PhysicalDisk*)>
c0024483:	31 c0                	xor    eax,eax
c0024485:	83 c4 18             	add    esp,0x18
c0024488:	5b                   	pop    ebx
c0024489:	c3                   	ret    

c002448a <ATAPI::write(unsigned long long, int, void*)>:
c002448a:	b8 03 00 00 00       	mov    eax,0x3
c002448f:	c3                   	ret    

c0024490 <ATAPI::close(int, int, void*)>:
c0024490:	83 ec 0c             	sub    esp,0xc
c0024493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024497:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002449d:	85 c0                	test   eax,eax
c002449f:	74 0c                	je     c00244ad <ATAPI::close(int, int, void*)+0x1d>
c00244a1:	83 ec 0c             	sub    esp,0xc
c00244a4:	8b 10                	mov    edx,DWORD PTR [eax]
c00244a6:	50                   	push   eax
c00244a7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00244aa:	83 c4 10             	add    esp,0x10
c00244ad:	31 c0                	xor    eax,eax
c00244af:	83 c4 0c             	add    esp,0xc
c00244b2:	c3                   	ret    
c00244b3:	90                   	nop

c00244b4 <ATAPI::ATAPI()>:
c00244b4:	83 ec 0c             	sub    esp,0xc
c00244b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244bb:	83 ec 04             	sub    esp,0x4
c00244be:	68 00 08 00 00       	push   0x800
c00244c3:	68 55 cd 02 c0       	push   0xc002cd55
c00244c8:	50                   	push   eax
c00244c9:	e8 18 01 ff ff       	call   c00145e6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00244ce:	83 c4 10             	add    esp,0x10
c00244d1:	ba 70 cc 02 c0       	mov    edx,0xc002cc70
c00244d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244da:	89 10                	mov    DWORD PTR [eax],edx
c00244dc:	90                   	nop
c00244dd:	83 c4 0c             	add    esp,0xc
c00244e0:	c3                   	ret    
c00244e1:	90                   	nop

c00244e2 <ATAPI::readyForCommand()>:
c00244e2:	56                   	push   esi
c00244e3:	53                   	push   ebx
c00244e4:	31 db                	xor    ebx,ebx
c00244e6:	50                   	push   eax
c00244e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00244eb:	50                   	push   eax
c00244ec:	6a 0c                	push   0xc
c00244ee:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00244f5:	50                   	push   eax
c00244f6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00244fc:	e8 6b ea ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c0024501:	83 c4 10             	add    esp,0x10
c0024504:	a8 88                	test   al,0x88
c0024506:	74 23                	je     c002452b <ATAPI::readyForCommand()+0x49>
c0024508:	43                   	inc    ebx
c0024509:	83 fb 63             	cmp    ebx,0x63
c002450c:	7e dd                	jle    c00244eb <ATAPI::readyForCommand()+0x9>
c002450e:	51                   	push   ecx
c002450f:	51                   	push   ecx
c0024510:	6a 00                	push   0x0
c0024512:	68 40 42 0f 00       	push   0xf4240
c0024517:	e8 a4 9c ff ff       	call   c001e1c0 <nanoSleep(unsigned long long)>
c002451c:	83 c4 10             	add    esp,0x10
c002451f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024525:	75 c4                	jne    c00244eb <ATAPI::readyForCommand()+0x9>
c0024527:	31 c0                	xor    eax,eax
c0024529:	eb 02                	jmp    c002452d <ATAPI::readyForCommand()+0x4b>
c002452b:	b0 01                	mov    al,0x1
c002452d:	5a                   	pop    edx
c002452e:	5b                   	pop    ebx
c002452f:	5e                   	pop    esi
c0024530:	c3                   	ret    
c0024531:	90                   	nop

c0024532 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024532:	55                   	push   ebp
c0024533:	57                   	push   edi
c0024534:	56                   	push   esi
c0024535:	53                   	push   ebx
c0024536:	83 ec 20             	sub    esp,0x20
c0024539:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002453d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024541:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024545:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024549:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002454d:	6a 01                	push   0x1
c002454f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024556:	50                   	push   eax
c0024557:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002455d:	e8 56 eb ff ff       	call   c00230b8 <IDE::enableIRQs(unsigned char, bool)>
c0024562:	5e                   	pop    esi
c0024563:	58                   	pop    eax
c0024564:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002456b:	50                   	push   eax
c002456c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024572:	e8 0f e9 ff ff       	call   c0022e86 <IDE::prepareInterrupt(unsigned char)>
c0024577:	89 3c 24             	mov    DWORD PTR [esp],edi
c002457a:	e8 63 ff ff ff       	call   c00244e2 <ATAPI::readyForCommand()>
c002457f:	83 c4 10             	add    esp,0x10
c0024582:	84 c0                	test   al,al
c0024584:	75 0a                	jne    c0024590 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024586:	bb 01 00 00 00       	mov    ebx,0x1
c002458b:	e9 57 02 00 00       	jmp    c00247e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024590:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024596:	c1 e0 04             	shl    eax,0x4
c0024599:	0f b6 c0             	movzx  eax,al
c002459c:	50                   	push   eax
c002459d:	6a 06                	push   0x6
c002459f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245a6:	50                   	push   eax
c00245a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245ad:	e8 fa e8 ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245b2:	6a 00                	push   0x0
c00245b4:	6a 01                	push   0x1
c00245b6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245bd:	50                   	push   eax
c00245be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245c4:	e8 e3 e8 ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245c9:	83 c4 20             	add    esp,0x20
c00245cc:	0f b6 c3             	movzx  eax,bl
c00245cf:	0f b6 df             	movzx  ebx,bh
c00245d2:	50                   	push   eax
c00245d3:	6a 04                	push   0x4
c00245d5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245dc:	50                   	push   eax
c00245dd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245e3:	e8 c4 e8 ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245e8:	53                   	push   ebx
c00245e9:	6a 05                	push   0x5
c00245eb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245f2:	50                   	push   eax
c00245f3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245f9:	e8 ae e8 ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245fe:	83 c4 20             	add    esp,0x20
c0024601:	68 a0 00 00 00       	push   0xa0
c0024606:	6a 07                	push   0x7
c0024608:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002460f:	50                   	push   eax
c0024610:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024616:	e8 91 e8 ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002461b:	83 c4 0c             	add    esp,0xc
c002461e:	6a 01                	push   0x1
c0024620:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024627:	50                   	push   eax
c0024628:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002462e:	e8 25 f4 ff ff       	call   c0023a58 <IDE::polling(unsigned char, unsigned int)>
c0024633:	83 c4 10             	add    esp,0x10
c0024636:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002463c:	84 c0                	test   al,al
c002463e:	74 23                	je     c0024663 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024640:	0f b6 d8             	movzx  ebx,al
c0024643:	0f b6 d2             	movzx  edx,dl
c0024646:	53                   	push   ebx
c0024647:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002464e:	50                   	push   eax
c002464f:	52                   	push   edx
c0024650:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024656:	e8 67 f2 ff ff       	call   c00238c2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002465b:	83 c4 10             	add    esp,0x10
c002465e:	e9 84 01 00 00       	jmp    c00247e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024663:	0f b6 d2             	movzx  edx,dl
c0024666:	53                   	push   ebx
c0024667:	53                   	push   ebx
c0024668:	52                   	push   edx
c0024669:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002466f:	e8 26 e8 ff ff       	call   c0022e9a <IDE::getBase(unsigned char)>
c0024674:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024678:	b9 06 00 00 00       	mov    ecx,0x6
c002467d:	89 c2                	mov    edx,eax
c002467f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024682:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024686:	83 c4 10             	add    esp,0x10
c0024689:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002468f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024696:	85 db                	test   ebx,ebx
c0024698:	0f 84 ec 00 00 00    	je     c002478a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002469e:	51                   	push   ecx
c002469f:	51                   	push   ecx
c00246a0:	52                   	push   edx
c00246a1:	50                   	push   eax
c00246a2:	e8 73 e9 ff ff       	call   c002301a <IDE::waitInterrupt(unsigned char)>
c00246a7:	83 c4 10             	add    esp,0x10
c00246aa:	84 c0                	test   al,al
c00246ac:	0f 84 d4 fe ff ff    	je     c0024586 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00246b2:	56                   	push   esi
c00246b3:	56                   	push   esi
c00246b4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246bb:	50                   	push   eax
c00246bc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246c2:	e8 bf e7 ff ff       	call   c0022e86 <IDE::prepareInterrupt(unsigned char)>
c00246c7:	83 c4 0c             	add    esp,0xc
c00246ca:	6a 04                	push   0x4
c00246cc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246d3:	50                   	push   eax
c00246d4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246da:	e8 8d e8 ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c00246df:	83 c4 0c             	add    esp,0xc
c00246e2:	89 c6                	mov    esi,eax
c00246e4:	6a 05                	push   0x5
c00246e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246ed:	50                   	push   eax
c00246ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246f4:	e8 73 e8 ff ff       	call   c0022f6c <IDE::read(unsigned char, unsigned char)>
c00246f9:	89 f1                	mov    ecx,esi
c00246fb:	0f b6 c0             	movzx  eax,al
c00246fe:	0f b6 f1             	movzx  esi,cl
c0024701:	c1 e0 08             	shl    eax,0x8
c0024704:	09 c6                	or     esi,eax
c0024706:	d1 fe                	sar    esi,1
c0024708:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002470c:	83 c4 10             	add    esp,0x10
c002470f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024714:	74 41                	je     c0024757 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024716:	31 c9                	xor    ecx,ecx
c0024718:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002471e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024725:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024729:	75 0a                	jne    c0024735 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002472b:	01 c9                	add    ecx,ecx
c002472d:	01 cd                	add    ebp,ecx
c002472f:	4b                   	dec    ebx
c0024730:	e9 54 ff ff ff       	jmp    c0024689 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024735:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002473a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002473e:	51                   	push   ecx
c002473f:	51                   	push   ecx
c0024740:	52                   	push   edx
c0024741:	50                   	push   eax
c0024742:	e8 53 e7 ff ff       	call   c0022e9a <IDE::getBase(unsigned char)>
c0024747:	89 c2                	mov    edx,eax
c0024749:	89 f0                	mov    eax,esi
c002474b:	66 ef                	out    dx,ax
c002474d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024751:	83 c4 10             	add    esp,0x10
c0024754:	41                   	inc    ecx
c0024755:	eb c1                	jmp    c0024718 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024757:	31 f6                	xor    esi,esi
c0024759:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002475f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024766:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002476a:	75 06                	jne    c0024772 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002476c:	01 f6                	add    esi,esi
c002476e:	01 f5                	add    ebp,esi
c0024770:	eb bd                	jmp    c002472f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024772:	51                   	push   ecx
c0024773:	51                   	push   ecx
c0024774:	52                   	push   edx
c0024775:	50                   	push   eax
c0024776:	e8 1f e7 ff ff       	call   c0022e9a <IDE::getBase(unsigned char)>
c002477b:	89 c2                	mov    edx,eax
c002477d:	66 ed                	in     ax,dx
c002477f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024784:	83 c4 10             	add    esp,0x10
c0024787:	46                   	inc    esi
c0024788:	eb cf                	jmp    c0024759 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002478a:	51                   	push   ecx
c002478b:	51                   	push   ecx
c002478c:	52                   	push   edx
c002478d:	50                   	push   eax
c002478e:	e8 87 e8 ff ff       	call   c002301a <IDE::waitInterrupt(unsigned char)>
c0024793:	83 c4 10             	add    esp,0x10
c0024796:	84 c0                	test   al,al
c0024798:	0f 84 e8 fd ff ff    	je     c0024586 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002479e:	bb a0 86 01 00       	mov    ebx,0x186a0
c00247a3:	52                   	push   edx
c00247a4:	52                   	push   edx
c00247a5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247ac:	50                   	push   eax
c00247ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247b3:	e8 ce e6 ff ff       	call   c0022e86 <IDE::prepareInterrupt(unsigned char)>
c00247b8:	83 c4 10             	add    esp,0x10
c00247bb:	50                   	push   eax
c00247bc:	50                   	push   eax
c00247bd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247c4:	50                   	push   eax
c00247c5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247cb:	e8 ca e6 ff ff       	call   c0022e9a <IDE::getBase(unsigned char)>
c00247d0:	8d 50 07             	lea    edx,[eax+0x7]
c00247d3:	ec                   	in     al,dx
c00247d4:	83 c4 10             	add    esp,0x10
c00247d7:	a8 88                	test   al,0x88
c00247d9:	74 0a                	je     c00247e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00247db:	4b                   	dec    ebx
c00247dc:	75 dd                	jne    c00247bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00247de:	bb 02 00 00 00       	mov    ebx,0x2
c00247e3:	eb 02                	jmp    c00247e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247e5:	31 db                	xor    ebx,ebx
c00247e7:	83 c4 1c             	add    esp,0x1c
c00247ea:	89 d8                	mov    eax,ebx
c00247ec:	5b                   	pop    ebx
c00247ed:	5e                   	pop    esi
c00247ee:	5f                   	pop    edi
c00247ef:	5d                   	pop    ebp
c00247f0:	c3                   	ret    
c00247f1:	90                   	nop

c00247f2 <ATAPI::diskRemoved()>:
c00247f2:	83 ec 18             	sub    esp,0x18
c00247f5:	68 61 cd 02 c0       	push   0xc002cd61
c00247fa:	e8 9d e5 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00247ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024803:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002480a:	83 c4 1c             	add    esp,0x1c
c002480d:	c3                   	ret    

c002480e <ATAPI::eject()>:
c002480e:	57                   	push   edi
c002480f:	b9 03 00 00 00       	mov    ecx,0x3
c0024814:	53                   	push   ebx
c0024815:	83 ec 14             	sub    esp,0x14
c0024818:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002481c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024820:	fc                   	cld    
c0024821:	31 c0                	xor    eax,eax
c0024823:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024825:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002482a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002482f:	50                   	push   eax
c0024830:	50                   	push   eax
c0024831:	6a 00                	push   0x0
c0024833:	6a 00                	push   0x0
c0024835:	6a 00                	push   0x0
c0024837:	6a 02                	push   0x2
c0024839:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002483d:	50                   	push   eax
c002483e:	53                   	push   ebx
c002483f:	e8 ee fc ff ff       	call   c0024532 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024844:	83 c4 14             	add    esp,0x14
c0024847:	53                   	push   ebx
c0024848:	e8 a5 ff ff ff       	call   c00247f2 <ATAPI::diskRemoved()>
c002484d:	83 c4 24             	add    esp,0x24
c0024850:	31 c0                	xor    eax,eax
c0024852:	5b                   	pop    ebx
c0024853:	5f                   	pop    edi
c0024854:	c3                   	ret    
c0024855:	90                   	nop

c0024856 <ATAPI::diskInserted()>:
c0024856:	53                   	push   ebx
c0024857:	83 ec 14             	sub    esp,0x14
c002485a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002485e:	68 78 cd 02 c0       	push   0xc002cd78
c0024863:	e8 34 e5 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0024868:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002486f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024872:	e8 d7 fd fe ff       	call   c001464e <PhysicalDisk::startCache()>
c0024877:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002487b:	83 c4 18             	add    esp,0x18
c002487e:	5b                   	pop    ebx
c002487f:	e9 76 1f ff ff       	jmp    c00167fa <createPartitionsForDisk(PhysicalDisk*)>

c0024884 <ATAPI::detectMedia()>:
c0024884:	56                   	push   esi
c0024885:	53                   	push   ebx
c0024886:	83 ec 28             	sub    esp,0x28
c0024889:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002488d:	6a 0c                	push   0xc
c002488f:	6a 00                	push   0x0
c0024891:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024895:	56                   	push   esi
c0024896:	e8 dd be fd ff       	call   c0000778 <memset>
c002489b:	58                   	pop    eax
c002489c:	5a                   	pop    edx
c002489d:	6a 00                	push   0x0
c002489f:	6a 00                	push   0x0
c00248a1:	6a 00                	push   0x0
c00248a3:	6a 00                	push   0x0
c00248a5:	56                   	push   esi
c00248a6:	53                   	push   ebx
c00248a7:	e8 86 fc ff ff       	call   c0024532 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248ac:	83 c4 1c             	add    esp,0x1c
c00248af:	6a 0c                	push   0xc
c00248b1:	6a 00                	push   0x0
c00248b3:	56                   	push   esi
c00248b4:	e8 bf be fd ff       	call   c0000778 <memset>
c00248b9:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00248be:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00248c3:	59                   	pop    ecx
c00248c4:	58                   	pop    eax
c00248c5:	6a 01                	push   0x1
c00248c7:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00248cb:	50                   	push   eax
c00248cc:	6a 00                	push   0x0
c00248ce:	6a 12                	push   0x12
c00248d0:	56                   	push   esi
c00248d1:	53                   	push   ebx
c00248d2:	e8 5b fc ff ff       	call   c0024532 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248d7:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00248db:	83 c4 20             	add    esp,0x20
c00248de:	83 e0 7f             	and    eax,0x7f
c00248e1:	3c 70                	cmp    al,0x70
c00248e3:	74 15                	je     c00248fa <ATAPI::detectMedia()+0x76>
c00248e5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00248ec:	75 0c                	jne    c00248fa <ATAPI::detectMedia()+0x76>
c00248ee:	83 ec 0c             	sub    esp,0xc
c00248f1:	53                   	push   ebx
c00248f2:	e8 5f ff ff ff       	call   c0024856 <ATAPI::diskInserted()>
c00248f7:	83 c4 10             	add    esp,0x10
c00248fa:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00248fe:	83 e0 0f             	and    eax,0xf
c0024901:	3c 02                	cmp    al,0x2
c0024903:	75 1b                	jne    c0024920 <ATAPI::detectMedia()+0x9c>
c0024905:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002490a:	75 2d                	jne    c0024939 <ATAPI::detectMedia()+0xb5>
c002490c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024913:	74 24                	je     c0024939 <ATAPI::detectMedia()+0xb5>
c0024915:	83 ec 0c             	sub    esp,0xc
c0024918:	53                   	push   ebx
c0024919:	e8 d4 fe ff ff       	call   c00247f2 <ATAPI::diskRemoved()>
c002491e:	eb 16                	jmp    c0024936 <ATAPI::detectMedia()+0xb2>
c0024920:	84 c0                	test   al,al
c0024922:	75 15                	jne    c0024939 <ATAPI::detectMedia()+0xb5>
c0024924:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002492b:	75 0c                	jne    c0024939 <ATAPI::detectMedia()+0xb5>
c002492d:	83 ec 0c             	sub    esp,0xc
c0024930:	53                   	push   ebx
c0024931:	e8 20 ff ff ff       	call   c0024856 <ATAPI::diskInserted()>
c0024936:	83 c4 10             	add    esp,0x10
c0024939:	83 c4 24             	add    esp,0x24
c002493c:	5b                   	pop    ebx
c002493d:	5e                   	pop    esi
c002493e:	c3                   	ret    
c002493f:	90                   	nop

c0024940 <ATAPI::open(int, int, void*)>:
c0024940:	53                   	push   ebx
c0024941:	83 ec 08             	sub    esp,0x8
c0024944:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024948:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002494c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024950:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024956:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002495c:	c1 e0 06             	shl    eax,0x6
c002495f:	01 d0                	add    eax,edx
c0024961:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024968:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002496e:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024975:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002497f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024985:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002498c:	6a 04                	push   0x4
c002498e:	6a 0c                	push   0xc
c0024990:	51                   	push   ecx
c0024991:	52                   	push   edx
c0024992:	e8 15 e5 ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024997:	90                   	nop
c0024998:	90                   	nop
c0024999:	6a 00                	push   0x0
c002499b:	6a 0c                	push   0xc
c002499d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249a4:	50                   	push   eax
c00249a5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249ab:	e8 fc e4 ff ff       	call   c0022eac <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249b0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00249b7:	83 c4 14             	add    esp,0x14
c00249ba:	53                   	push   ebx
c00249bb:	e8 c4 fe ff ff       	call   c0024884 <ATAPI::detectMedia()>
c00249c0:	31 c0                	xor    eax,eax
c00249c2:	83 c4 18             	add    esp,0x18
c00249c5:	5b                   	pop    ebx
c00249c6:	c3                   	ret    
c00249c7:	90                   	nop

c00249c8 <ATAPI::read(unsigned long long, int, void*)>:
c00249c8:	55                   	push   ebp
c00249c9:	57                   	push   edi
c00249ca:	56                   	push   esi
c00249cb:	53                   	push   ebx
c00249cc:	83 ec 1c             	sub    esp,0x1c
c00249cf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00249d3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249d7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00249db:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00249e2:	74 41                	je     c0024a25 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00249e4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00249e8:	b9 03 00 00 00       	mov    ecx,0x3
c00249ed:	fc                   	cld    
c00249ee:	31 c0                	xor    eax,eax
c00249f0:	86 fb                	xchg   bl,bh
c00249f2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00249f4:	c1 c3 10             	rol    ebx,0x10
c00249f7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00249fc:	89 e8                	mov    eax,ebp
c00249fe:	86 fb                	xchg   bl,bh
c0024a00:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024a04:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024a08:	50                   	push   eax
c0024a09:	50                   	push   eax
c0024a0a:	55                   	push   ebp
c0024a0b:	c1 e5 0b             	shl    ebp,0xb
c0024a0e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024a12:	6a 00                	push   0x0
c0024a14:	55                   	push   ebp
c0024a15:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a19:	50                   	push   eax
c0024a1a:	56                   	push   esi
c0024a1b:	e8 12 fb ff ff       	call   c0024532 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a20:	83 c4 20             	add    esp,0x20
c0024a23:	eb 1a                	jmp    c0024a3f <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024a25:	83 ec 0c             	sub    esp,0xc
c0024a28:	56                   	push   esi
c0024a29:	e8 56 fe ff ff       	call   c0024884 <ATAPI::detectMedia()>
c0024a2e:	83 c4 10             	add    esp,0x10
c0024a31:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024a38:	75 aa                	jne    c00249e4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024a3a:	b8 02 00 00 00       	mov    eax,0x2
c0024a3f:	83 c4 1c             	add    esp,0x1c
c0024a42:	5b                   	pop    ebx
c0024a43:	5e                   	pop    esi
c0024a44:	5f                   	pop    edi
c0024a45:	5d                   	pop    ebp
c0024a46:	c3                   	ret    
c0024a47:	90                   	nop

c0024a48 <SATA::close(int, int, void*)>:
c0024a48:	83 ec 0c             	sub    esp,0xc
c0024a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a4f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024a55:	85 c0                	test   eax,eax
c0024a57:	74 0c                	je     c0024a65 <SATA::close(int, int, void*)+0x1d>
c0024a59:	83 ec 0c             	sub    esp,0xc
c0024a5c:	8b 10                	mov    edx,DWORD PTR [eax]
c0024a5e:	50                   	push   eax
c0024a5f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024a62:	83 c4 10             	add    esp,0x10
c0024a65:	31 c0                	xor    eax,eax
c0024a67:	83 c4 0c             	add    esp,0xc
c0024a6a:	c3                   	ret    
c0024a6b:	90                   	nop

c0024a6c <SATA::powerSaving(PowerSavingLevel)>:
c0024a6c:	c3                   	ret    
c0024a6d:	90                   	nop

c0024a6e <SATA::open(int, int, void*)>:
c0024a6e:	56                   	push   esi
c0024a6f:	53                   	push   ebx
c0024a70:	50                   	push   eax
c0024a71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024a79:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024a83:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024a89:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024a93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024a97:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024aa1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024aa7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024aae:	e8 2d b4 fe ff       	call   c000fee0 <Phys::allocatePage()>
c0024ab3:	89 c6                	mov    esi,eax
c0024ab5:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024abb:	81 c6 00 10 00 00    	add    esi,0x1000
c0024ac1:	e8 1a b4 fe ff       	call   c000fee0 <Phys::allocatePage()>
c0024ac6:	39 c6                	cmp    esi,eax
c0024ac8:	74 10                	je     c0024ada <SATA::open(int, int, void*)+0x6c>
c0024aca:	83 ec 0c             	sub    esp,0xc
c0024acd:	68 a0 cc 02 c0       	push   0xc002cca0
c0024ad2:	e8 a0 59 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c0024ad7:	83 c4 10             	add    esp,0x10
c0024ada:	83 ec 0c             	sub    esp,0xc
c0024add:	6a 02                	push   0x2
c0024adf:	e8 5b d0 fe ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c0024ae4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024aea:	e8 f7 d2 fe ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0024aef:	6a 03                	push   0x3
c0024af1:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024af7:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024afd:	50                   	push   eax
c0024afe:	e8 05 d7 fe ff       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024b03:	83 c4 14             	add    esp,0x14
c0024b06:	53                   	push   ebx
c0024b07:	e8 42 fb fe ff       	call   c001464e <PhysicalDisk::startCache()>
c0024b0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024b0f:	e8 e6 1c ff ff       	call   c00167fa <createPartitionsForDisk(PhysicalDisk*)>
c0024b14:	83 c4 14             	add    esp,0x14
c0024b17:	31 c0                	xor    eax,eax
c0024b19:	5b                   	pop    ebx
c0024b1a:	5e                   	pop    esi
c0024b1b:	c3                   	ret    

c0024b1c <SATA::SATA()>:
c0024b1c:	83 ec 0c             	sub    esp,0xc
c0024b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b23:	83 ec 04             	sub    esp,0x4
c0024b26:	68 00 02 00 00       	push   0x200
c0024b2b:	68 b4 cc 02 c0       	push   0xc002ccb4
c0024b30:	50                   	push   eax
c0024b31:	e8 b0 fa fe ff       	call   c00145e6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024b36:	83 c4 10             	add    esp,0x10
c0024b39:	ba 24 cd 02 c0       	mov    edx,0xc002cd24
c0024b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b42:	89 10                	mov    DWORD PTR [eax],edx
c0024b44:	90                   	nop
c0024b45:	83 c4 0c             	add    esp,0xc
c0024b48:	c3                   	ret    
c0024b49:	90                   	nop

c0024b4a <SATA::access(unsigned long long, int, void*, bool)>:
c0024b4a:	55                   	push   ebp
c0024b4b:	57                   	push   edi
c0024b4c:	56                   	push   esi
c0024b4d:	53                   	push   ebx
c0024b4e:	83 ec 2c             	sub    esp,0x2c
c0024b51:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024b55:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024b59:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024b5d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024b61:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024b65:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024b6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024b6e:	7e 10                	jle    c0024b80 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024b70:	83 ec 0c             	sub    esp,0xc
c0024b73:	68 c4 cc 02 c0       	push   0xc002ccc4
c0024b78:	e8 fa 58 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c0024b7d:	83 c4 10             	add    esp,0x10
c0024b80:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024b86:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024b8c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024b92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024b96:	89 f0                	mov    eax,esi
c0024b98:	c1 e0 07             	shl    eax,0x7
c0024b9b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024b9f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024ba9:	53                   	push   ebx
c0024baa:	8d 46 02             	lea    eax,[esi+0x2]
c0024bad:	53                   	push   ebx
c0024bae:	c1 e0 07             	shl    eax,0x7
c0024bb1:	bb 01 00 00 00       	mov    ebx,0x1
c0024bb6:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024bba:	50                   	push   eax
c0024bbb:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024bc1:	e8 aa ef ff ff       	call   c0023b70 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024bc6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024bca:	83 c4 10             	add    esp,0x10
c0024bcd:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024bd2:	0f 84 ce 01 00 00    	je     c0024da6 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024bd8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024bdc:	c1 e0 09             	shl    eax,0x9
c0024bdf:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024be4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024be8:	74 17                	je     c0024c01 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024bea:	51                   	push   ecx
c0024beb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024bef:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024bf3:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024bf9:	e8 46 bb fd ff       	call   c0000744 <memcpy>
c0024bfe:	83 c4 10             	add    esp,0x10
c0024c01:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024c07:	8d 46 02             	lea    eax,[esi+0x2]
c0024c0a:	c1 e0 07             	shl    eax,0x7
c0024c0d:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024c11:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c13:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024c19:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024c1f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c23:	c1 e1 05             	shl    ecx,0x5
c0024c26:	01 c8                	add    eax,ecx
c0024c28:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024c2c:	8a 18                	mov    bl,BYTE PTR [eax]
c0024c2e:	83 e1 01             	and    ecx,0x1
c0024c31:	83 e3 bf             	and    ebx,0xffffffbf
c0024c34:	c1 e1 06             	shl    ecx,0x6
c0024c37:	09 d9                	or     ecx,ebx
c0024c39:	88 08                	mov    BYTE PTR [eax],cl
c0024c3b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024c3d:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024c43:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024c49:	89 08                	mov    DWORD PTR [eax],ecx
c0024c4b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024c51:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024c57:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024c5d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024c60:	52                   	push   edx
c0024c61:	68 90 00 00 00       	push   0x90
c0024c66:	6a 00                	push   0x0
c0024c68:	53                   	push   ebx
c0024c69:	e8 0a bb fd ff       	call   c0000778 <memset>
c0024c6e:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024c74:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024c78:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024c7e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024c82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024c86:	83 c4 10             	add    esp,0x10
c0024c89:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024c8c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024c92:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024c98:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024c9d:	09 c8                	or     eax,ecx
c0024c9f:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024ca5:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024ca8:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024caf:	66 25 00 7f          	and    ax,0x7f00
c0024cb3:	66 0d 27 80          	or     ax,0x8027
c0024cb7:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024cbc:	66 89 03             	mov    WORD PTR [ebx],ax
c0024cbf:	19 c0                	sbb    eax,eax
c0024cc1:	83 e0 f0             	and    eax,0xfffffff0
c0024cc4:	83 c0 35             	add    eax,0x35
c0024cc7:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024cca:	89 f8                	mov    eax,edi
c0024ccc:	c1 e8 10             	shr    eax,0x10
c0024ccf:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024cd2:	89 f8                	mov    eax,edi
c0024cd4:	c1 e8 18             	shr    eax,0x18
c0024cd7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024cda:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024cde:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024ce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ce5:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024ce8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024cec:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024cf0:	89 f3                	mov    ebx,esi
c0024cf2:	31 c0                	xor    eax,eax
c0024cf4:	c1 e3 07             	shl    ebx,0x7
c0024cf7:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024cfb:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024d01:	80 e1 88             	and    cl,0x88
c0024d04:	74 0a                	je     c0024d10 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024d06:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d0b:	74 0a                	je     c0024d17 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024d0d:	40                   	inc    eax
c0024d0e:	eb eb                	jmp    c0024cfb <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024d10:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d15:	75 0a                	jne    c0024d21 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024d17:	83 ec 0c             	sub    esp,0xc
c0024d1a:	68 fd cc 02 c0       	push   0xc002ccfd
c0024d1f:	eb 56                	jmp    c0024d77 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024d21:	b8 01 00 00 00       	mov    eax,0x1
c0024d26:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024d2a:	c1 e6 07             	shl    esi,0x7
c0024d2d:	d3 e0                	shl    eax,cl
c0024d2f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024d33:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024d39:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024d3f:	85 c8                	test   eax,ecx
c0024d41:	74 20                	je     c0024d63 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024d43:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024d49:	0f ba e1 1e          	bt     ecx,0x1e
c0024d4d:	73 ea                	jae    c0024d39 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024d4f:	83 ec 0c             	sub    esp,0xc
c0024d52:	31 db                	xor    ebx,ebx
c0024d54:	68 0b cd 02 c0       	push   0xc002cd0b
c0024d59:	e8 19 57 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c0024d5e:	83 c4 10             	add    esp,0x10
c0024d61:	eb 43                	jmp    c0024da6 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d63:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024d69:	0f ba e0 1e          	bt     eax,0x1e
c0024d6d:	73 17                	jae    c0024d86 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024d6f:	83 ec 0c             	sub    esp,0xc
c0024d72:	68 0b cd 02 c0       	push   0xc002cd0b
c0024d77:	e8 fb 56 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c0024d7c:	bb 01 00 00 00       	mov    ebx,0x1
c0024d81:	83 c4 10             	add    esp,0x10
c0024d84:	eb 20                	jmp    c0024da6 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d86:	31 db                	xor    ebx,ebx
c0024d88:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d8d:	75 17                	jne    c0024da6 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d8f:	50                   	push   eax
c0024d90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d94:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d9a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024d9e:	e8 a1 b9 fd ff       	call   c0000744 <memcpy>
c0024da3:	83 c4 10             	add    esp,0x10
c0024da6:	83 c4 2c             	add    esp,0x2c
c0024da9:	89 d8                	mov    eax,ebx
c0024dab:	5b                   	pop    ebx
c0024dac:	5e                   	pop    esi
c0024dad:	5f                   	pop    edi
c0024dae:	5d                   	pop    ebp
c0024daf:	c3                   	ret    

c0024db0 <SATA::read(unsigned long long, int, void*)>:
c0024db0:	57                   	push   edi
c0024db1:	b8 04 00 00 00       	mov    eax,0x4
c0024db6:	56                   	push   esi
c0024db7:	53                   	push   ebx
c0024db8:	83 ec 10             	sub    esp,0x10
c0024dbb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024dbf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024dc3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024dc6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024dca:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024dce:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024dd4:	77 3b                	ja     c0024e11 <SATA::read(unsigned long long, int, void*)+0x61>
c0024dd6:	b8 06 00 00 00       	mov    eax,0x6
c0024ddb:	85 d2                	test   edx,edx
c0024ddd:	74 32                	je     c0024e11 <SATA::read(unsigned long long, int, void*)+0x61>
c0024ddf:	50                   	push   eax
c0024de0:	50                   	push   eax
c0024de1:	6a 00                	push   0x0
c0024de3:	52                   	push   edx
c0024de4:	53                   	push   ebx
c0024de5:	57                   	push   edi
c0024de6:	56                   	push   esi
c0024de7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024deb:	e8 5a fd ff ff       	call   c0024b4a <SATA::access(unsigned long long, int, void*, bool)>
c0024df0:	83 c4 20             	add    esp,0x20
c0024df3:	85 c0                	test   eax,eax
c0024df5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024df9:	75 11                	jne    c0024e0c <SATA::read(unsigned long long, int, void*)+0x5c>
c0024dfb:	01 1d a8 25 03 c0    	add    DWORD PTR ds:0xc00325a8,ebx
c0024e01:	e8 8e bb fe ff       	call   c0010994 <VgaText::updateDiskUsage()>
c0024e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e0a:	eb 05                	jmp    c0024e11 <SATA::read(unsigned long long, int, void*)+0x61>
c0024e0c:	b8 01 00 00 00       	mov    eax,0x1
c0024e11:	83 c4 10             	add    esp,0x10
c0024e14:	5b                   	pop    ebx
c0024e15:	5e                   	pop    esi
c0024e16:	5f                   	pop    edi
c0024e17:	c3                   	ret    

c0024e18 <SATA::write(unsigned long long, int, void*)>:
c0024e18:	55                   	push   ebp
c0024e19:	b8 04 00 00 00       	mov    eax,0x4
c0024e1e:	57                   	push   edi
c0024e1f:	56                   	push   esi
c0024e20:	53                   	push   ebx
c0024e21:	83 ec 1c             	sub    esp,0x1c
c0024e24:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024e28:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024e2c:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024e2f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024e33:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024e37:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024e3d:	77 56                	ja     c0024e95 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024e3f:	b8 06 00 00 00       	mov    eax,0x6
c0024e44:	85 ff                	test   edi,edi
c0024e46:	74 4d                	je     c0024e95 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024e48:	89 ee                	mov    esi,ebp
c0024e4a:	c1 e6 09             	shl    esi,0x9
c0024e4d:	01 fe                	add    esi,edi
c0024e4f:	89 c8                	mov    eax,ecx
c0024e51:	89 da                	mov    edx,ebx
c0024e53:	83 c0 01             	add    eax,0x1
c0024e56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024e5a:	83 d2 00             	adc    edx,0x0
c0024e5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024e61:	50                   	push   eax
c0024e62:	50                   	push   eax
c0024e63:	6a 01                	push   0x1
c0024e65:	57                   	push   edi
c0024e66:	81 c7 00 02 00 00    	add    edi,0x200
c0024e6c:	6a 01                	push   0x1
c0024e6e:	53                   	push   ebx
c0024e6f:	51                   	push   ecx
c0024e70:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024e74:	e8 d1 fc ff ff       	call   c0024b4a <SATA::access(unsigned long long, int, void*, bool)>
c0024e79:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024e7d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024e81:	83 c4 20             	add    esp,0x20
c0024e84:	39 f7                	cmp    edi,esi
c0024e86:	75 c7                	jne    c0024e4f <SATA::write(unsigned long long, int, void*)+0x37>
c0024e88:	01 2d a4 25 03 c0    	add    DWORD PTR ds:0xc00325a4,ebp
c0024e8e:	e8 01 bb fe ff       	call   c0010994 <VgaText::updateDiskUsage()>
c0024e93:	31 c0                	xor    eax,eax
c0024e95:	83 c4 1c             	add    esp,0x1c
c0024e98:	5b                   	pop    ebx
c0024e99:	5e                   	pop    esi
c0024e9a:	5f                   	pop    edi
c0024e9b:	5d                   	pop    ebp
c0024e9c:	c3                   	ret    
c0024e9d:	90                   	nop

c0024e9e <SATAPI::write(unsigned long long, int, void*)>:
c0024e9e:	b8 03 00 00 00       	mov    eax,0x3
c0024ea3:	c3                   	ret    

c0024ea4 <SATAPI::close(int, int, void*)>:
c0024ea4:	83 ec 0c             	sub    esp,0xc
c0024ea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024eb1:	85 c0                	test   eax,eax
c0024eb3:	74 0c                	je     c0024ec1 <SATAPI::close(int, int, void*)+0x1d>
c0024eb5:	83 ec 0c             	sub    esp,0xc
c0024eb8:	8b 10                	mov    edx,DWORD PTR [eax]
c0024eba:	50                   	push   eax
c0024ebb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024ebe:	83 c4 10             	add    esp,0x10
c0024ec1:	31 c0                	xor    eax,eax
c0024ec3:	83 c4 0c             	add    esp,0xc
c0024ec6:	c3                   	ret    
c0024ec7:	90                   	nop

c0024ec8 <SATAPI::SATAPI()>:
c0024ec8:	83 ec 0c             	sub    esp,0xc
c0024ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ecf:	83 ec 04             	sub    esp,0x4
c0024ed2:	68 00 08 00 00       	push   0x800
c0024ed7:	68 54 cd 02 c0       	push   0xc002cd54
c0024edc:	50                   	push   eax
c0024edd:	e8 04 f7 fe ff       	call   c00145e6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024ee2:	83 c4 10             	add    esp,0x10
c0024ee5:	ba 00 ce 02 c0       	mov    edx,0xc002ce00
c0024eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eee:	89 10                	mov    DWORD PTR [eax],edx
c0024ef0:	90                   	nop
c0024ef1:	83 c4 0c             	add    esp,0xc
c0024ef4:	c3                   	ret    
c0024ef5:	90                   	nop

c0024ef6 <SATAPI::diskRemoved()>:
c0024ef6:	83 ec 18             	sub    esp,0x18
c0024ef9:	68 60 cd 02 c0       	push   0xc002cd60
c0024efe:	e8 99 de fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0024f03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f07:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024f0e:	83 c4 1c             	add    esp,0x1c
c0024f11:	c3                   	ret    

c0024f12 <SATAPI::diskInserted()>:
c0024f12:	53                   	push   ebx
c0024f13:	83 ec 14             	sub    esp,0x14
c0024f16:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024f1a:	68 77 cd 02 c0       	push   0xc002cd77
c0024f1f:	e8 78 de fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0024f24:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024f2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024f2e:	e8 1b f7 fe ff       	call   c001464e <PhysicalDisk::startCache()>
c0024f33:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024f37:	83 c4 18             	add    esp,0x18
c0024f3a:	5b                   	pop    ebx
c0024f3b:	e9 ba 18 ff ff       	jmp    c00167fa <createPartitionsForDisk(PhysicalDisk*)>

c0024f40 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024f40:	55                   	push   ebp
c0024f41:	57                   	push   edi
c0024f42:	56                   	push   esi
c0024f43:	53                   	push   ebx
c0024f44:	83 ec 24             	sub    esp,0x24
c0024f47:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024f4b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024f4f:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0024f55:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024f59:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024f5d:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0024f63:	8d 5f 02             	lea    ebx,[edi+0x2]
c0024f66:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024f6c:	c1 e3 07             	shl    ebx,0x7
c0024f6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f73:	89 f8                	mov    eax,edi
c0024f75:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0024f79:	c1 e0 07             	shl    eax,0x7
c0024f7c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024f84:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024f8e:	53                   	push   ebx
c0024f8f:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0024f95:	e8 d6 eb ff ff       	call   c0023b70 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024f9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024f9e:	83 c4 10             	add    esp,0x10
c0024fa1:	b8 01 00 00 00       	mov    eax,0x1
c0024fa6:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0024fab:	0f 84 8a 01 00 00    	je     c002513b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024fb1:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024fb7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024fb9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024fbf:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024fc5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0024fc9:	c1 e1 05             	shl    ecx,0x5
c0024fcc:	01 c8                	add    eax,ecx
c0024fce:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024fd0:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024fd6:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024fdc:	89 08                	mov    DWORD PTR [eax],ecx
c0024fde:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024fe4:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024fea:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024ff0:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024ff3:	52                   	push   edx
c0024ff4:	68 90 00 00 00       	push   0x90
c0024ff9:	6a 00                	push   0x0
c0024ffb:	53                   	push   ebx
c0024ffc:	e8 77 b7 fd ff       	call   c0000778 <memset>
c0025001:	83 c4 0c             	add    esp,0xc
c0025004:	8d 43 40             	lea    eax,[ebx+0x40]
c0025007:	6a 0c                	push   0xc
c0025009:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002500d:	50                   	push   eax
c002500e:	e8 31 b7 fd ff       	call   c0000744 <memcpy>
c0025013:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025019:	89 ea                	mov    edx,ebp
c002501b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025021:	c1 ea 18             	shr    edx,0x18
c0025024:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025028:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002502b:	8d 48 ff             	lea    ecx,[eax-0x1]
c002502e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025032:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025038:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002503e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025043:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0025047:	09 c8                	or     eax,ecx
c0025049:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002504d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025053:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025056:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c002505d:	66 25 00 7f          	and    ax,0x7f00
c0025061:	66 0d 27 80          	or     ax,0x8027
c0025065:	66 89 03             	mov    WORD PTR [ebx],ax
c0025068:	89 e8                	mov    eax,ebp
c002506a:	c1 e8 10             	shr    eax,0x10
c002506d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025070:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025074:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025077:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002507b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002507e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025082:	83 c4 10             	add    esp,0x10
c0025085:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025089:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002508d:	31 c0                	xor    eax,eax
c002508f:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0025095:	80 e1 88             	and    cl,0x88
c0025098:	74 0a                	je     c00250a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c002509a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002509f:	74 0a                	je     c00250ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00250a1:	40                   	inc    eax
c00250a2:	eb eb                	jmp    c002508f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00250a4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00250a9:	75 0f                	jne    c00250ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00250ab:	83 ec 0c             	sub    esp,0xc
c00250ae:	68 fd cc 02 c0       	push   0xc002ccfd
c00250b3:	e8 bf 53 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c00250b8:	eb 3a                	jmp    c00250f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00250ba:	b8 01 00 00 00       	mov    eax,0x1
c00250bf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00250c3:	c1 e7 07             	shl    edi,0x7
c00250c6:	d3 e0                	shl    eax,cl
c00250c8:	03 3c 24             	add    edi,DWORD PTR [esp]
c00250cb:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00250d1:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00250d7:	85 d0                	test   eax,edx
c00250d9:	74 23                	je     c00250fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00250db:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00250e1:	0f ba e2 1e          	bt     edx,0x1e
c00250e5:	73 ea                	jae    c00250d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00250e7:	83 ec 0c             	sub    esp,0xc
c00250ea:	68 8f cd 02 c0       	push   0xc002cd8f
c00250ef:	e8 a8 dc fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00250f4:	83 c4 10             	add    esp,0x10
c00250f7:	b8 01 00 00 00       	mov    eax,0x1
c00250fc:	eb 3d                	jmp    c002513b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00250fe:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025104:	0f ba e0 1e          	bt     eax,0x1e
c0025108:	73 0a                	jae    c0025114 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c002510a:	83 ec 0c             	sub    esp,0xc
c002510d:	68 a2 cd 02 c0       	push   0xc002cda2
c0025112:	eb db                	jmp    c00250ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025114:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025119:	74 1e                	je     c0025139 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002511b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025120:	74 17                	je     c0025139 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025122:	50                   	push   eax
c0025123:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025127:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c002512d:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025131:	e8 0e b6 fd ff       	call   c0000744 <memcpy>
c0025136:	83 c4 10             	add    esp,0x10
c0025139:	31 c0                	xor    eax,eax
c002513b:	83 c4 1c             	add    esp,0x1c
c002513e:	5b                   	pop    ebx
c002513f:	5e                   	pop    esi
c0025140:	5f                   	pop    edi
c0025141:	5d                   	pop    ebp
c0025142:	c3                   	ret    
c0025143:	90                   	nop

c0025144 <SATAPI::eject()>:
c0025144:	57                   	push   edi
c0025145:	b9 03 00 00 00       	mov    ecx,0x3
c002514a:	53                   	push   ebx
c002514b:	83 ec 14             	sub    esp,0x14
c002514e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025152:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025156:	fc                   	cld    
c0025157:	31 c0                	xor    eax,eax
c0025159:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002515b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025160:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025165:	50                   	push   eax
c0025166:	6a 00                	push   0x0
c0025168:	6a 00                	push   0x0
c002516a:	6a 00                	push   0x0
c002516c:	6a 00                	push   0x0
c002516e:	6a 02                	push   0x2
c0025170:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025174:	50                   	push   eax
c0025175:	53                   	push   ebx
c0025176:	e8 c5 fd ff ff       	call   c0024f40 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002517b:	83 c4 14             	add    esp,0x14
c002517e:	53                   	push   ebx
c002517f:	e8 72 fd ff ff       	call   c0024ef6 <SATAPI::diskRemoved()>
c0025184:	83 c4 24             	add    esp,0x24
c0025187:	31 c0                	xor    eax,eax
c0025189:	5b                   	pop    ebx
c002518a:	5f                   	pop    edi
c002518b:	c3                   	ret    

c002518c <SATAPI::detectMedia()>:
c002518c:	56                   	push   esi
c002518d:	53                   	push   ebx
c002518e:	83 ec 28             	sub    esp,0x28
c0025191:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025195:	6a 0c                	push   0xc
c0025197:	6a 00                	push   0x0
c0025199:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002519d:	56                   	push   esi
c002519e:	e8 d5 b5 fd ff       	call   c0000778 <memset>
c00251a3:	83 c4 0c             	add    esp,0xc
c00251a6:	6a 00                	push   0x0
c00251a8:	6a 00                	push   0x0
c00251aa:	6a 00                	push   0x0
c00251ac:	6a 00                	push   0x0
c00251ae:	6a 00                	push   0x0
c00251b0:	56                   	push   esi
c00251b1:	53                   	push   ebx
c00251b2:	e8 89 fd ff ff       	call   c0024f40 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00251b7:	83 c4 1c             	add    esp,0x1c
c00251ba:	6a 0c                	push   0xc
c00251bc:	6a 00                	push   0x0
c00251be:	56                   	push   esi
c00251bf:	e8 b4 b5 fd ff       	call   c0000778 <memset>
c00251c4:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00251c9:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00251ce:	83 c4 0c             	add    esp,0xc
c00251d1:	6a 01                	push   0x1
c00251d3:	8d 44 24 16          	lea    eax,[esp+0x16]
c00251d7:	50                   	push   eax
c00251d8:	6a 00                	push   0x0
c00251da:	6a 00                	push   0x0
c00251dc:	6a 12                	push   0x12
c00251de:	56                   	push   esi
c00251df:	53                   	push   ebx
c00251e0:	e8 5b fd ff ff       	call   c0024f40 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00251e5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00251e9:	83 c4 20             	add    esp,0x20
c00251ec:	83 e0 7f             	and    eax,0x7f
c00251ef:	3c 70                	cmp    al,0x70
c00251f1:	74 15                	je     c0025208 <SATAPI::detectMedia()+0x7c>
c00251f3:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00251fa:	75 0c                	jne    c0025208 <SATAPI::detectMedia()+0x7c>
c00251fc:	83 ec 0c             	sub    esp,0xc
c00251ff:	53                   	push   ebx
c0025200:	e8 0d fd ff ff       	call   c0024f12 <SATAPI::diskInserted()>
c0025205:	83 c4 10             	add    esp,0x10
c0025208:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002520c:	83 e0 0f             	and    eax,0xf
c002520f:	3c 02                	cmp    al,0x2
c0025211:	75 1b                	jne    c002522e <SATAPI::detectMedia()+0xa2>
c0025213:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025218:	75 2d                	jne    c0025247 <SATAPI::detectMedia()+0xbb>
c002521a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025221:	74 24                	je     c0025247 <SATAPI::detectMedia()+0xbb>
c0025223:	83 ec 0c             	sub    esp,0xc
c0025226:	53                   	push   ebx
c0025227:	e8 ca fc ff ff       	call   c0024ef6 <SATAPI::diskRemoved()>
c002522c:	eb 16                	jmp    c0025244 <SATAPI::detectMedia()+0xb8>
c002522e:	84 c0                	test   al,al
c0025230:	75 15                	jne    c0025247 <SATAPI::detectMedia()+0xbb>
c0025232:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025239:	75 0c                	jne    c0025247 <SATAPI::detectMedia()+0xbb>
c002523b:	83 ec 0c             	sub    esp,0xc
c002523e:	53                   	push   ebx
c002523f:	e8 ce fc ff ff       	call   c0024f12 <SATAPI::diskInserted()>
c0025244:	83 c4 10             	add    esp,0x10
c0025247:	83 c4 24             	add    esp,0x24
c002524a:	5b                   	pop    ebx
c002524b:	5e                   	pop    esi
c002524c:	c3                   	ret    
c002524d:	90                   	nop

c002524e <SATAPI::open(int, int, void*)>:
c002524e:	56                   	push   esi
c002524f:	53                   	push   ebx
c0025250:	50                   	push   eax
c0025251:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025255:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025259:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025263:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025269:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025273:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025277:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025281:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025287:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002528e:	e8 4d ac fe ff       	call   c000fee0 <Phys::allocatePage()>
c0025293:	89 c6                	mov    esi,eax
c0025295:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002529b:	81 c6 00 10 00 00    	add    esi,0x1000
c00252a1:	e8 3a ac fe ff       	call   c000fee0 <Phys::allocatePage()>
c00252a6:	39 c6                	cmp    esi,eax
c00252a8:	74 10                	je     c00252ba <SATAPI::open(int, int, void*)+0x6c>
c00252aa:	83 ec 0c             	sub    esp,0xc
c00252ad:	68 b7 cd 02 c0       	push   0xc002cdb7
c00252b2:	e8 c0 51 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c00252b7:	83 c4 10             	add    esp,0x10
c00252ba:	83 ec 0c             	sub    esp,0xc
c00252bd:	6a 02                	push   0x2
c00252bf:	e8 7b c8 fe ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c00252c4:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00252ca:	e8 17 cb fe ff       	call   c0011de6 <Virt::getAKernelVAS()>
c00252cf:	6a 03                	push   0x3
c00252d1:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00252d7:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00252dd:	50                   	push   eax
c00252de:	e8 25 cf fe ff       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c00252e3:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00252ea:	83 c4 14             	add    esp,0x14
c00252ed:	53                   	push   ebx
c00252ee:	e8 99 fe ff ff       	call   c002518c <SATAPI::detectMedia()>
c00252f3:	83 c4 14             	add    esp,0x14
c00252f6:	31 c0                	xor    eax,eax
c00252f8:	5b                   	pop    ebx
c00252f9:	5e                   	pop    esi
c00252fa:	c3                   	ret    
c00252fb:	90                   	nop

c00252fc <SATAPI::read(unsigned long long, int, void*)>:
c00252fc:	55                   	push   ebp
c00252fd:	57                   	push   edi
c00252fe:	56                   	push   esi
c00252ff:	53                   	push   ebx
c0025300:	83 ec 1c             	sub    esp,0x1c
c0025303:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025307:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002530b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002530f:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025316:	74 19                	je     c0025331 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025318:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002531d:	7e 2e                	jle    c002534d <SATAPI::read(unsigned long long, int, void*)+0x51>
c002531f:	83 ec 0c             	sub    esp,0xc
c0025322:	68 cd cd 02 c0       	push   0xc002cdcd
c0025327:	e8 4b 51 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c002532c:	83 c4 10             	add    esp,0x10
c002532f:	eb 1c                	jmp    c002534d <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025331:	83 ec 0c             	sub    esp,0xc
c0025334:	55                   	push   ebp
c0025335:	e8 52 fe ff ff       	call   c002518c <SATAPI::detectMedia()>
c002533a:	83 c4 10             	add    esp,0x10
c002533d:	b8 02 00 00 00       	mov    eax,0x2
c0025342:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025349:	75 cd                	jne    c0025318 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002534b:	eb 49                	jmp    c0025396 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002534d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025351:	b9 03 00 00 00       	mov    ecx,0x3
c0025356:	fc                   	cld    
c0025357:	31 c0                	xor    eax,eax
c0025359:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002535b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025360:	89 d8                	mov    eax,ebx
c0025362:	86 e0                	xchg   al,ah
c0025364:	c1 c0 10             	rol    eax,0x10
c0025367:	86 e0                	xchg   al,ah
c0025369:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002536d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025371:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025375:	50                   	push   eax
c0025376:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002537a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002537e:	56                   	push   esi
c002537f:	53                   	push   ebx
c0025380:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025384:	c1 e0 0b             	shl    eax,0xb
c0025387:	50                   	push   eax
c0025388:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002538c:	50                   	push   eax
c002538d:	55                   	push   ebp
c002538e:	e8 ad fb ff ff       	call   c0024f40 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025393:	83 c4 20             	add    esp,0x20
c0025396:	83 c4 1c             	add    esp,0x1c
c0025399:	5b                   	pop    ebx
c002539a:	5e                   	pop    esi
c002539b:	5f                   	pop    edi
c002539c:	5d                   	pop    ebp
c002539d:	c3                   	ret    

c002539e <AVX::open(int, int, void*)>:
c002539e:	83 ec 0c             	sub    esp,0xc
c00253a1:	e8 42 11 00 00       	call   c00264e8 <avxInit>
c00253a6:	b8 00 00 00 00       	mov    eax,0x0
c00253ab:	83 c4 0c             	add    esp,0xc
c00253ae:	c3                   	ret    
c00253af:	90                   	nop

c00253b0 <AVX::close(int, int, void*)>:
c00253b0:	83 ec 0c             	sub    esp,0xc
c00253b3:	e8 31 11 00 00       	call   c00264e9 <avxClose>
c00253b8:	b8 00 00 00 00       	mov    eax,0x0
c00253bd:	83 c4 0c             	add    esp,0xc
c00253c0:	c3                   	ret    
c00253c1:	90                   	nop

c00253c2 <AVX::available()>:
c00253c2:	83 ec 0c             	sub    esp,0xc
c00253c5:	e8 16 11 00 00       	call   c00264e0 <avxDetect>
c00253ca:	85 c0                	test   eax,eax
c00253cc:	0f 95 c0             	setne  al
c00253cf:	83 c4 0c             	add    esp,0xc
c00253d2:	c3                   	ret    
c00253d3:	90                   	nop

c00253d4 <AVX::save(void*)>:
c00253d4:	83 ec 0c             	sub    esp,0xc
c00253d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253db:	83 ec 0c             	sub    esp,0xc
c00253de:	50                   	push   eax
c00253df:	e8 02 11 00 00       	call   c00264e6 <avxSave>
c00253e4:	83 c4 10             	add    esp,0x10
c00253e7:	90                   	nop
c00253e8:	83 c4 0c             	add    esp,0xc
c00253eb:	c3                   	ret    

c00253ec <AVX::load(void*)>:
c00253ec:	83 ec 0c             	sub    esp,0xc
c00253ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253f3:	83 ec 0c             	sub    esp,0xc
c00253f6:	50                   	push   eax
c00253f7:	e8 eb 10 00 00       	call   c00264e7 <avxLoad>
c00253fc:	83 c4 10             	add    esp,0x10
c00253ff:	90                   	nop
c0025400:	83 c4 0c             	add    esp,0xc
c0025403:	c3                   	ret    

c0025404 <AVX::AVX()>:
c0025404:	83 ec 0c             	sub    esp,0xc
c0025407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002540b:	83 ec 08             	sub    esp,0x8
c002540e:	68 30 ce 02 c0       	push   0xc002ce30
c0025413:	50                   	push   eax
c0025414:	e8 ab f2 fe ff       	call   c00146c4 <FPU::FPU(char const*)>
c0025419:	83 c4 10             	add    esp,0x10
c002541c:	ba 40 ce 02 c0       	mov    edx,0xc002ce40
c0025421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025425:	89 10                	mov    DWORD PTR [eax],edx
c0025427:	90                   	nop
c0025428:	83 c4 0c             	add    esp,0xc
c002542b:	c3                   	ret    

c002542c <MMX::available()>:
c002542c:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0025431:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025437:	83 e0 20             	and    eax,0x20
c002543a:	84 c0                	test   al,al
c002543c:	0f 95 c0             	setne  al
c002543f:	c3                   	ret    

c0025440 <MMX::open(int, int, void*)>:
c0025440:	83 ec 0c             	sub    esp,0xc
c0025443:	e8 24 11 00 00       	call   c002656c <x87Init>
c0025448:	b8 00 00 00 00       	mov    eax,0x0
c002544d:	83 c4 0c             	add    esp,0xc
c0025450:	c3                   	ret    
c0025451:	90                   	nop

c0025452 <MMX::close(int, int, void*)>:
c0025452:	83 ec 0c             	sub    esp,0xc
c0025455:	e8 2c 11 00 00       	call   c0026586 <x87Close>
c002545a:	b8 00 00 00 00       	mov    eax,0x0
c002545f:	83 c4 0c             	add    esp,0xc
c0025462:	c3                   	ret    
c0025463:	90                   	nop

c0025464 <MMX::save(void*)>:
c0025464:	83 ec 0c             	sub    esp,0xc
c0025467:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002546b:	83 ec 0c             	sub    esp,0xc
c002546e:	50                   	push   eax
c002546f:	e8 ed 10 00 00       	call   c0026561 <x87Save>
c0025474:	83 c4 10             	add    esp,0x10
c0025477:	90                   	nop
c0025478:	83 c4 0c             	add    esp,0xc
c002547b:	c3                   	ret    

c002547c <MMX::load(void*)>:
c002547c:	83 ec 0c             	sub    esp,0xc
c002547f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025483:	83 ec 0c             	sub    esp,0xc
c0025486:	50                   	push   eax
c0025487:	e8 db 10 00 00       	call   c0026567 <x87Load>
c002548c:	83 c4 10             	add    esp,0x10
c002548f:	90                   	nop
c0025490:	83 c4 0c             	add    esp,0xc
c0025493:	c3                   	ret    

c0025494 <MMX::MMX()>:
c0025494:	83 ec 0c             	sub    esp,0xc
c0025497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002549b:	83 ec 08             	sub    esp,0x8
c002549e:	68 70 ce 02 c0       	push   0xc002ce70
c00254a3:	50                   	push   eax
c00254a4:	e8 1b f2 fe ff       	call   c00146c4 <FPU::FPU(char const*)>
c00254a9:	83 c4 10             	add    esp,0x10
c00254ac:	ba 80 ce 02 c0       	mov    edx,0xc002ce80
c00254b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254b5:	89 10                	mov    DWORD PTR [eax],edx
c00254b7:	90                   	nop
c00254b8:	83 c4 0c             	add    esp,0xc
c00254bb:	c3                   	ret    

c00254bc <SSE::open(int, int, void*)>:
c00254bc:	83 ec 0c             	sub    esp,0xc
c00254bf:	e8 60 10 00 00       	call   c0026524 <sseInit>
c00254c4:	b8 00 00 00 00       	mov    eax,0x0
c00254c9:	83 c4 0c             	add    esp,0xc
c00254cc:	c3                   	ret    
c00254cd:	90                   	nop

c00254ce <SSE::close(int, int, void*)>:
c00254ce:	83 ec 0c             	sub    esp,0xc
c00254d1:	e8 5e 10 00 00       	call   c0026534 <sseClose>
c00254d6:	b8 00 00 00 00       	mov    eax,0x0
c00254db:	83 c4 0c             	add    esp,0xc
c00254de:	c3                   	ret    
c00254df:	90                   	nop

c00254e0 <SSE::available()>:
c00254e0:	83 ec 1c             	sub    esp,0x1c
c00254e3:	e8 18 10 00 00       	call   c0026500 <absolutelyNoChanceInHell>
c00254e8:	85 c0                	test   eax,eax
c00254ea:	0f 95 c0             	setne  al
c00254ed:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00254f1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00254f5:	83 c4 1c             	add    esp,0x1c
c00254f8:	c3                   	ret    
c00254f9:	90                   	nop

c00254fa <SSE::save(void*)>:
c00254fa:	83 ec 0c             	sub    esp,0xc
c00254fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025501:	83 ec 0c             	sub    esp,0xc
c0025504:	50                   	push   eax
c0025505:	e8 0e 10 00 00       	call   c0026518 <sseSave>
c002550a:	83 c4 10             	add    esp,0x10
c002550d:	90                   	nop
c002550e:	83 c4 0c             	add    esp,0xc
c0025511:	c3                   	ret    

c0025512 <SSE::load(void*)>:
c0025512:	83 ec 0c             	sub    esp,0xc
c0025515:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025519:	83 ec 0c             	sub    esp,0xc
c002551c:	50                   	push   eax
c002551d:	e8 fc 0f 00 00       	call   c002651e <sseLoad>
c0025522:	83 c4 10             	add    esp,0x10
c0025525:	90                   	nop
c0025526:	83 c4 0c             	add    esp,0xc
c0025529:	c3                   	ret    

c002552a <SSE::SSE()>:
c002552a:	83 ec 0c             	sub    esp,0xc
c002552d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025531:	83 ec 08             	sub    esp,0x8
c0025534:	68 b0 ce 02 c0       	push   0xc002ceb0
c0025539:	50                   	push   eax
c002553a:	e8 85 f1 fe ff       	call   c00146c4 <FPU::FPU(char const*)>
c002553f:	83 c4 10             	add    esp,0x10
c0025542:	ba c0 ce 02 c0       	mov    edx,0xc002cec0
c0025547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002554b:	89 10                	mov    DWORD PTR [eax],edx
c002554d:	90                   	nop
c002554e:	83 c4 0c             	add    esp,0xc
c0025551:	c3                   	ret    

c0025552 <x87::open(int, int, void*)>:
c0025552:	83 ec 0c             	sub    esp,0xc
c0025555:	e8 12 10 00 00       	call   c002656c <x87Init>
c002555a:	b8 00 00 00 00       	mov    eax,0x0
c002555f:	83 c4 0c             	add    esp,0xc
c0025562:	c3                   	ret    
c0025563:	90                   	nop

c0025564 <x87::close(int, int, void*)>:
c0025564:	83 ec 0c             	sub    esp,0xc
c0025567:	e8 1a 10 00 00       	call   c0026586 <x87Close>
c002556c:	b8 00 00 00 00       	mov    eax,0x0
c0025571:	83 c4 0c             	add    esp,0xc
c0025574:	c3                   	ret    
c0025575:	90                   	nop

c0025576 <x87::available()>:
c0025576:	83 ec 0c             	sub    esp,0xc
c0025579:	e8 c8 0f 00 00       	call   c0026546 <x87Detect>
c002557e:	85 c0                	test   eax,eax
c0025580:	0f 95 c0             	setne  al
c0025583:	83 c4 0c             	add    esp,0xc
c0025586:	c3                   	ret    
c0025587:	90                   	nop

c0025588 <x87::save(void*)>:
c0025588:	83 ec 0c             	sub    esp,0xc
c002558b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002558f:	83 ec 0c             	sub    esp,0xc
c0025592:	50                   	push   eax
c0025593:	e8 c9 0f 00 00       	call   c0026561 <x87Save>
c0025598:	83 c4 10             	add    esp,0x10
c002559b:	90                   	nop
c002559c:	83 c4 0c             	add    esp,0xc
c002559f:	c3                   	ret    

c00255a0 <x87::load(void*)>:
c00255a0:	83 ec 0c             	sub    esp,0xc
c00255a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255a7:	83 ec 0c             	sub    esp,0xc
c00255aa:	50                   	push   eax
c00255ab:	e8 b7 0f 00 00       	call   c0026567 <x87Load>
c00255b0:	83 c4 10             	add    esp,0x10
c00255b3:	90                   	nop
c00255b4:	83 c4 0c             	add    esp,0xc
c00255b7:	c3                   	ret    

c00255b8 <x87::x87()>:
c00255b8:	83 ec 0c             	sub    esp,0xc
c00255bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255bf:	83 ec 08             	sub    esp,0x8
c00255c2:	68 f0 ce 02 c0       	push   0xc002cef0
c00255c7:	50                   	push   eax
c00255c8:	e8 f7 f0 fe ff       	call   c00146c4 <FPU::FPU(char const*)>
c00255cd:	83 c4 10             	add    esp,0x10
c00255d0:	ba 00 cf 02 c0       	mov    edx,0xc002cf00
c00255d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255d9:	89 10                	mov    DWORD PTR [eax],edx
c00255db:	90                   	nop
c00255dc:	83 c4 0c             	add    esp,0xc
c00255df:	c3                   	ret    

c00255e0 <APIC::disable()>:
c00255e0:	90                   	nop
c00255e1:	c3                   	ret    

c00255e2 <APIC::close(int, int, void*)>:
c00255e2:	55                   	push   ebp
c00255e3:	89 e5                	mov    ebp,esp
c00255e5:	83 ec 08             	sub    esp,0x8
c00255e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00255ed:	83 c0 3c             	add    eax,0x3c
c00255f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00255f2:	83 ec 0c             	sub    esp,0xc
c00255f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255f8:	ff d0                	call   eax
c00255fa:	83 c4 10             	add    esp,0x10
c00255fd:	b8 00 00 00 00       	mov    eax,0x0
c0025602:	c9                   	leave  
c0025603:	c3                   	ret    

c0025604 <IOAPIC::close(int, int, void*)>:
c0025604:	b8 00 00 00 00       	mov    eax,0x0
c0025609:	c3                   	ret    

c002560a <APIC::io_wait()>:
c002560a:	eb 00                	jmp    c002560c <APIC::io_wait()+0x2>
c002560c:	eb 00                	jmp    c002560e <APIC::io_wait()+0x4>
c002560e:	90                   	nop
c002560f:	c3                   	ret    

c0025610 <APIC::getBase()>:
c0025610:	55                   	push   ebp
c0025611:	89 e5                	mov    ebp,esp
c0025613:	83 ec 18             	sub    esp,0x18
c0025616:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c002561b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025621:	83 e0 08             	and    eax,0x8
c0025624:	84 c0                	test   al,al
c0025626:	75 07                	jne    c002562f <APIC::getBase()+0x1f>
c0025628:	b8 00 00 00 00       	mov    eax,0x0
c002562d:	eb 21                	jmp    c0025650 <APIC::getBase()+0x40>
c002562f:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0025634:	83 ec 08             	sub    esp,0x8
c0025637:	6a 1b                	push   0x1b
c0025639:	50                   	push   eax
c002563a:	e8 a9 97 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c002563f:	83 c4 10             	add    esp,0x10
c0025642:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025645:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025648:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002564b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025650:	c9                   	leave  
c0025651:	c3                   	ret    

c0025652 <APIC::eoi(unsigned char)>:
c0025652:	55                   	push   ebp
c0025653:	89 e5                	mov    ebp,esp
c0025655:	83 ec 28             	sub    esp,0x28
c0025658:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002565b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002565e:	83 ec 0c             	sub    esp,0xc
c0025661:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025664:	e8 a7 ff ff ff       	call   c0025610 <APIC::getBase()>
c0025669:	83 c4 10             	add    esp,0x10
c002566c:	05 b0 00 00 00       	add    eax,0xb0
c0025671:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025674:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025677:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002567d:	90                   	nop
c002567e:	c9                   	leave  
c002567f:	c3                   	ret    

c0025680 <APIC::open(int, int, void*)>:
c0025680:	55                   	push   ebp
c0025681:	89 e5                	mov    ebp,esp
c0025683:	57                   	push   edi
c0025684:	56                   	push   esi
c0025685:	53                   	push   ebx
c0025686:	83 ec 2c             	sub    esp,0x2c
c0025689:	83 ec 0c             	sub    esp,0xc
c002568c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002568f:	e8 7c ff ff ff       	call   c0025610 <APIC::getBase()>
c0025694:	83 c4 10             	add    esp,0x10
c0025697:	89 c2                	mov    edx,eax
c0025699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002569c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00256a2:	0f b6 f8             	movzx  edi,al
c00256a5:	89 d0                	mov    eax,edx
c00256a7:	ba 00 00 00 00       	mov    edx,0x0
c00256ac:	89 c1                	mov    ecx,eax
c00256ae:	80 e5 ff             	and    ch,0xff
c00256b1:	89 cb                	mov    ebx,ecx
c00256b3:	0f b6 f2             	movzx  esi,dl
c00256b6:	89 d8                	mov    eax,ebx
c00256b8:	89 f2                	mov    edx,esi
c00256ba:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00256bd:	8d 5f 08             	lea    ebx,[edi+0x8]
c00256c0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00256c4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00256c8:	83 e0 00             	and    eax,0x0
c00256cb:	09 d0                	or     eax,edx
c00256cd:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00256d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256d4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00256da:	8d 50 01             	lea    edx,[eax+0x1]
c00256dd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00256e0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00256e6:	0f b6 d0             	movzx  edx,al
c00256e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256ec:	83 c2 08             	add    edx,0x8
c00256ef:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00256f3:	0f b6 c9             	movzx  ecx,cl
c00256f6:	81 c9 00 00 01 00    	or     ecx,0x10000
c00256fc:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025700:	83 ec 0c             	sub    esp,0xc
c0025703:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025706:	e8 05 ff ff ff       	call   c0025610 <APIC::getBase()>
c002570b:	83 c4 10             	add    esp,0x10
c002570e:	05 f0 00 00 00       	add    eax,0xf0
c0025713:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025716:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025719:	8b 00                	mov    eax,DWORD PTR [eax]
c002571b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002571e:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025725:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002572c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002572f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025732:	89 10                	mov    DWORD PTR [eax],edx
c0025734:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002573b:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0025740:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025743:	7d 7c                	jge    c00257c1 <APIC::open(int, int, void*)+0x141>
c0025745:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025748:	8b 04 85 40 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf4c0]
c002574f:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025752:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025755:	8b 04 85 40 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf4c0]
c002575c:	c1 e8 08             	shr    eax,0x8
c002575f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025763:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025766:	8b 04 85 40 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf4c0]
c002576d:	c1 e8 18             	shr    eax,0x18
c0025770:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025773:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025777:	75 40                	jne    c00257b9 <APIC::open(int, int, void*)+0x139>
c0025779:	83 ec 0c             	sub    esp,0xc
c002577c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002577f:	e8 8c fe ff ff       	call   c0025610 <APIC::getBase()>
c0025784:	83 c4 10             	add    esp,0x10
c0025787:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002578b:	75 07                	jne    c0025794 <APIC::open(int, int, void*)+0x114>
c002578d:	ba 60 03 00 00       	mov    edx,0x360
c0025792:	eb 05                	jmp    c0025799 <APIC::open(int, int, void*)+0x119>
c0025794:	ba 50 03 00 00       	mov    edx,0x350
c0025799:	01 d0                	add    eax,edx
c002579b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002579e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00257a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00257a3:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00257a6:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00257ad:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00257b1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00257b4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00257b7:	89 10                	mov    DWORD PTR [eax],edx
c00257b9:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00257bc:	e9 7a ff ff ff       	jmp    c002573b <APIC::open(int, int, void*)+0xbb>
c00257c1:	b8 00 00 00 00       	mov    eax,0x0
c00257c6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00257c9:	5b                   	pop    ebx
c00257ca:	5e                   	pop    esi
c00257cb:	5f                   	pop    edi
c00257cc:	5d                   	pop    ebp
c00257cd:	c3                   	ret    

c00257ce <IOAPIC::IOAPIC()>:
c00257ce:	83 ec 0c             	sub    esp,0xc
c00257d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257d5:	83 ec 08             	sub    esp,0x8
c00257d8:	68 30 cf 02 c0       	push   0xc002cf30
c00257dd:	50                   	push   eax
c00257de:	e8 cf eb fe ff       	call   c00143b2 <Device::Device(char const*)>
c00257e3:	83 c4 10             	add    esp,0x10
c00257e6:	ba 58 d0 02 c0       	mov    edx,0xc002d058
c00257eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257ef:	89 10                	mov    DWORD PTR [eax],edx
c00257f1:	90                   	nop
c00257f2:	83 c4 0c             	add    esp,0xc
c00257f5:	c3                   	ret    

c00257f6 <APIC::APIC()>:
c00257f6:	53                   	push   ebx
c00257f7:	83 ec 18             	sub    esp,0x18
c00257fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00257fe:	83 ec 08             	sub    esp,0x8
c0025801:	68 38 cf 02 c0       	push   0xc002cf38
c0025806:	50                   	push   eax
c0025807:	e8 12 f3 fe ff       	call   c0014b1e <InterruptController::InterruptController(char const*)>
c002580c:	83 c4 10             	add    esp,0x10
c002580f:	ba 10 d0 02 c0       	mov    edx,0xc002d010
c0025814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025818:	89 10                	mov    DWORD PTR [eax],edx
c002581a:	a0 00 26 03 c0       	mov    al,ds:0xc0032600
c002581f:	83 f0 01             	xor    eax,0x1
c0025822:	84 c0                	test   al,al
c0025824:	0f 84 a1 00 00 00    	je     c00258cb <APIC::APIC()+0xd5>
c002582a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002582f:	a0 e0 0b 03 c0       	mov    al,ds:0xc0030be0
c0025834:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025838:	0f 83 86 00 00 00    	jae    c00258c4 <APIC::APIC()+0xce>
c002583e:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025846:	83 ec 0c             	sub    esp,0xc
c0025849:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002584d:	e8 f1 9f fe ff       	call   c000f843 <malloc>
c0025852:	83 c4 10             	add    esp,0x10
c0025855:	89 c3                	mov    ebx,eax
c0025857:	83 ec 0c             	sub    esp,0xc
c002585a:	53                   	push   ebx
c002585b:	e8 6e ff ff ff       	call   c00257ce <IOAPIC::IOAPIC()>
c0025860:	83 c4 10             	add    esp,0x10
c0025863:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025867:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002586c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025870:	89 14 85 e0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda20],edx
c0025877:	a1 c0 25 03 c0       	mov    eax,ds:0xc00325c0
c002587c:	40                   	inc    eax
c002587d:	a3 c0 25 03 c0       	mov    ds:0xc00325c0,eax
c0025882:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0025887:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002588d:	83 ec 08             	sub    esp,0x8
c0025890:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025894:	50                   	push   eax
c0025895:	e8 28 e9 fe ff       	call   c00141c2 <Device::addChild(Device*)>
c002589a:	83 c4 10             	add    esp,0x10
c002589d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00258a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00258a3:	83 c0 08             	add    eax,0x8
c00258a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00258a8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00258ad:	6a 00                	push   0x0
c00258af:	6a 00                	push   0x0
c00258b1:	52                   	push   edx
c00258b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00258b6:	ff d0                	call   eax
c00258b8:	83 c4 10             	add    esp,0x10
c00258bb:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00258bf:	e9 6b ff ff ff       	jmp    c002582f <APIC::APIC()+0x39>
c00258c4:	c6 05 00 26 03 c0 01 	mov    BYTE PTR ds:0xc0032600,0x1
c00258cb:	90                   	nop
c00258cc:	83 c4 18             	add    esp,0x18
c00258cf:	5b                   	pop    ebx
c00258d0:	c3                   	ret    
c00258d1:	90                   	nop

c00258d2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00258d2:	55                   	push   ebp
c00258d3:	89 e5                	mov    ebp,esp
c00258d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258d8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00258de:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00258e1:	72 1d                	jb     c0025900 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00258e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258e6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00258ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258ef:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00258f5:	01 d0                	add    eax,edx
c00258f7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00258fa:	73 04                	jae    c0025900 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00258fc:	b0 01                	mov    al,0x1
c00258fe:	eb 02                	jmp    c0025902 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025900:	b0 00                	mov    al,0x0
c0025902:	5d                   	pop    ebp
c0025903:	c3                   	ret    

c0025904 <IOAPIC::read(int)>:
c0025904:	55                   	push   ebp
c0025905:	89 e5                	mov    ebp,esp
c0025907:	83 ec 10             	sub    esp,0x10
c002590a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002590d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025913:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025916:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025919:	0f b6 d0             	movzx  edx,al
c002591c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002591f:	89 10                	mov    DWORD PTR [eax],edx
c0025921:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025924:	83 c0 10             	add    eax,0x10
c0025927:	8b 00                	mov    eax,DWORD PTR [eax]
c0025929:	c9                   	leave  
c002592a:	c3                   	ret    
c002592b:	90                   	nop

c002592c <IOAPIC::open(int, int, void*)>:
c002592c:	55                   	push   ebp
c002592d:	89 e5                	mov    ebp,esp
c002592f:	57                   	push   edi
c0025930:	56                   	push   esi
c0025931:	53                   	push   ebx
c0025932:	83 ec 0c             	sub    esp,0xc
c0025935:	83 ec 0c             	sub    esp,0xc
c0025938:	68 63 cf 02 c0       	push   0xc002cf63
c002593d:	e8 5a d4 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0025942:	83 c4 10             	add    esp,0x10
c0025945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025948:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002594b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025951:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025954:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002595a:	8b 14 85 20 0c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf3e0]
c0025961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025964:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002596a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002596d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025973:	8b 14 85 a0 0c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf360]
c002597a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002597d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025986:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002598c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002598f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025995:	0f b6 f8             	movzx  edi,al
c0025998:	89 d0                	mov    eax,edx
c002599a:	ba 00 00 00 00       	mov    edx,0x0
c002599f:	89 c1                	mov    ecx,eax
c00259a1:	80 e5 ff             	and    ch,0xff
c00259a4:	89 cb                	mov    ebx,ecx
c00259a6:	0f b6 f2             	movzx  esi,dl
c00259a9:	89 d8                	mov    eax,ebx
c00259ab:	89 f2                	mov    edx,esi
c00259ad:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00259b0:	8d 5f 08             	lea    ebx,[edi+0x8]
c00259b3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00259b7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00259bb:	83 e0 00             	and    eax,0x0
c00259be:	09 d0                	or     eax,edx
c00259c0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00259c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259c7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00259cd:	8d 50 01             	lea    edx,[eax+0x1]
c00259d0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00259d3:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00259d9:	0f b6 d0             	movzx  edx,al
c00259dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259df:	83 c2 08             	add    edx,0x8
c00259e2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00259e6:	0f b6 c9             	movzx  ecx,cl
c00259e9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00259ef:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00259f3:	83 ec 08             	sub    esp,0x8
c00259f6:	6a 01                	push   0x1
c00259f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259fb:	e8 04 ff ff ff       	call   c0025904 <IOAPIC::read(int)>
c0025a00:	83 c4 10             	add    esp,0x10
c0025a03:	c1 f8 10             	sar    eax,0x10
c0025a06:	0f b6 c0             	movzx  eax,al
c0025a09:	8d 50 01             	lea    edx,[eax+0x1]
c0025a0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a0f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025a15:	b8 00 00 00 00       	mov    eax,0x0
c0025a1a:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a1d:	5b                   	pop    ebx
c0025a1e:	5e                   	pop    esi
c0025a1f:	5f                   	pop    edi
c0025a20:	5d                   	pop    ebp
c0025a21:	c3                   	ret    

c0025a22 <IOAPIC::write(int, int)>:
c0025a22:	55                   	push   ebp
c0025a23:	89 e5                	mov    ebp,esp
c0025a25:	83 ec 10             	sub    esp,0x10
c0025a28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a2b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a31:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a37:	0f b6 d0             	movzx  edx,al
c0025a3a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a3d:	89 10                	mov    DWORD PTR [eax],edx
c0025a3f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a42:	8d 50 10             	lea    edx,[eax+0x10]
c0025a45:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025a48:	89 02                	mov    DWORD PTR [edx],eax
c0025a4a:	90                   	nop
c0025a4b:	c9                   	leave  
c0025a4c:	c3                   	ret    
c0025a4d:	90                   	nop

c0025a4e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025a4e:	55                   	push   ebp
c0025a4f:	89 e5                	mov    ebp,esp
c0025a51:	53                   	push   ebx
c0025a52:	83 ec 2c             	sub    esp,0x2c
c0025a55:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a58:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025a5b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025a5e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025a61:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025a64:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025a67:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025a6a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025a6d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025a70:	88 d8                	mov    al,bl
c0025a72:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025a75:	88 c8                	mov    al,cl
c0025a77:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025a7a:	88 d0                	mov    al,dl
c0025a7c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025a7f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025a83:	83 c0 08             	add    eax,0x8
c0025a86:	01 c0                	add    eax,eax
c0025a88:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025a8b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025a8f:	83 c0 08             	add    eax,0x8
c0025a92:	01 c0                	add    eax,eax
c0025a94:	40                   	inc    eax
c0025a95:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025a98:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025a9b:	50                   	push   eax
c0025a9c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a9f:	e8 60 fe ff ff       	call   c0025904 <IOAPIC::read(int)>
c0025aa4:	83 c4 08             	add    esp,0x8
c0025aa7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025aaa:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025ab1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025ab4:	c1 e0 18             	shl    eax,0x18
c0025ab7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025aba:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025abd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025ac0:	52                   	push   edx
c0025ac1:	50                   	push   eax
c0025ac2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ac5:	e8 58 ff ff ff       	call   c0025a22 <IOAPIC::write(int, int)>
c0025aca:	83 c4 0c             	add    esp,0xc
c0025acd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025ad0:	50                   	push   eax
c0025ad1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ad4:	e8 2b fe ff ff       	call   c0025904 <IOAPIC::read(int)>
c0025ad9:	83 c4 08             	add    esp,0x8
c0025adc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025adf:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025ae6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025aed:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025af4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025af8:	74 09                	je     c0025b03 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025afa:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025b01:	eb 07                	jmp    c0025b0a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025b03:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025b0a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025b0e:	74 09                	je     c0025b19 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025b10:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025b17:	eb 07                	jmp    c0025b20 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025b19:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025b20:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025b27:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025b2b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025b2e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025b31:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b34:	52                   	push   edx
c0025b35:	50                   	push   eax
c0025b36:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b39:	e8 e4 fe ff ff       	call   c0025a22 <IOAPIC::write(int, int)>
c0025b3e:	83 c4 0c             	add    esp,0xc
c0025b41:	90                   	nop
c0025b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025b45:	c9                   	leave  
c0025b46:	c3                   	ret    
c0025b47:	90                   	nop

c0025b48 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025b48:	55                   	push   ebp
c0025b49:	89 e5                	mov    ebp,esp
c0025b4b:	57                   	push   edi
c0025b4c:	56                   	push   esi
c0025b4d:	53                   	push   ebx
c0025b4e:	83 ec 2c             	sub    esp,0x2c
c0025b51:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025b54:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025b57:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025b5b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025b5f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025b63:	74 5a                	je     c0025bbf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025b65:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025b69:	7f 44                	jg     c0025baf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025b6b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b6e:	05 a0 d4 02 c0       	add    eax,0xc002d4a0
c0025b73:	8a 00                	mov    al,BYTE PTR [eax]
c0025b75:	0f b6 c0             	movzx  eax,al
c0025b78:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025b7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b7e:	66 8b 84 00 c0 0b 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf440]
c0025b86:	0f b7 c0             	movzx  eax,ax
c0025b89:	83 e0 02             	and    eax,0x2
c0025b8c:	85 c0                	test   eax,eax
c0025b8e:	74 04                	je     c0025b94 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025b90:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025b94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b97:	66 8b 84 00 c0 0b 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf440]
c0025b9f:	0f b7 c0             	movzx  eax,ax
c0025ba2:	83 e0 08             	and    eax,0x8
c0025ba5:	85 c0                	test   eax,eax
c0025ba7:	74 16                	je     c0025bbf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ba9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025bad:	eb 10                	jmp    c0025bbf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025baf:	83 ec 0c             	sub    esp,0xc
c0025bb2:	68 74 cf 02 c0       	push   0xc002cf74
c0025bb7:	e8 bb 48 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c0025bbc:	83 c4 10             	add    esp,0x10
c0025bbf:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025bc3:	a1 c0 25 03 c0       	mov    eax,ds:0xc00325c0
c0025bc8:	83 ec 08             	sub    esp,0x8
c0025bcb:	50                   	push   eax
c0025bcc:	68 ac cf 02 c0       	push   0xc002cfac
c0025bd1:	e8 c6 d1 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0025bd6:	83 c4 10             	add    esp,0x10
c0025bd9:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025be0:	a1 c0 25 03 c0       	mov    eax,ds:0xc00325c0
c0025be5:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025be8:	7d 67                	jge    c0025c51 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025bea:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025bed:	8b 04 85 e0 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcda20]
c0025bf4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025bf7:	83 ec 08             	sub    esp,0x8
c0025bfa:	52                   	push   edx
c0025bfb:	50                   	push   eax
c0025bfc:	e8 d1 fc ff ff       	call   c00258d2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025c01:	83 c4 10             	add    esp,0x10
c0025c04:	84 c0                	test   al,al
c0025c06:	74 44                	je     c0025c4c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025c08:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c0b:	8b 1c 85 e0 25 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcda20]
c0025c12:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025c16:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025c19:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025c1d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c20:	83 c0 20             	add    eax,0x20
c0025c23:	0f b6 f0             	movzx  esi,al
c0025c26:	b8 00 00 00 00       	mov    eax,0x0
c0025c2b:	99                   	cdq    
c0025c2c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025c2f:	0f b6 c9             	movzx  ecx,cl
c0025c32:	83 ec 04             	sub    esp,0x4
c0025c35:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025c38:	57                   	push   edi
c0025c39:	56                   	push   esi
c0025c3a:	52                   	push   edx
c0025c3b:	50                   	push   eax
c0025c3c:	51                   	push   ecx
c0025c3d:	53                   	push   ebx
c0025c3e:	e8 0b fe ff ff       	call   c0025a4e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025c43:	83 c4 20             	add    esp,0x20
c0025c46:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025c4a:	eb 05                	jmp    c0025c51 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025c4c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025c4f:	eb 8f                	jmp    c0025be0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025c51:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025c54:	83 f0 01             	xor    eax,0x1
c0025c57:	84 c0                	test   al,al
c0025c59:	74 10                	je     c0025c6b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025c5b:	83 ec 0c             	sub    esp,0xc
c0025c5e:	68 c3 cf 02 c0       	push   0xc002cfc3
c0025c63:	e8 0f 48 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c0025c68:	83 c4 10             	add    esp,0x10
c0025c6b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025c6f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025c76:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025c7a:	7f 65                	jg     c0025ce1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025c7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c7f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c82:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025c89:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025c8c:	01 ca                	add    edx,ecx
c0025c8e:	83 c2 54             	add    edx,0x54
c0025c91:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025c95:	85 c0                	test   eax,eax
c0025c97:	75 43                	jne    c0025cdc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c9c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c9f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ca6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ca9:	01 ca                	add    edx,ecx
c0025cab:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025cae:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025cb1:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cb8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025cbb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025cc2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025cc5:	01 ca                	add    edx,ecx
c0025cc7:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025ccd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025cd0:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025cd4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cd7:	83 e8 20             	sub    eax,0x20
c0025cda:	eb 1a                	jmp    c0025cf6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025cdc:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025cdf:	eb 95                	jmp    c0025c76 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025ce1:	83 ec 0c             	sub    esp,0xc
c0025ce4:	68 d0 cf 02 c0       	push   0xc002cfd0
c0025ce9:	e8 89 47 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c0025cee:	83 c4 10             	add    esp,0x10
c0025cf1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025cf6:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025cf9:	5b                   	pop    ebx
c0025cfa:	5e                   	pop    esi
c0025cfb:	5f                   	pop    edi
c0025cfc:	5d                   	pop    ebp
c0025cfd:	c3                   	ret    

c0025cfe <PIC::disable()>:
c0025cfe:	55                   	push   ebp
c0025cff:	89 e5                	mov    ebp,esp
c0025d01:	83 ec 10             	sub    esp,0x10
c0025d04:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025d0a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025d0e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d11:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025d15:	ee                   	out    dx,al
c0025d16:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025d1c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025d20:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025d23:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025d27:	ee                   	out    dx,al
c0025d28:	90                   	nop
c0025d29:	c9                   	leave  
c0025d2a:	c3                   	ret    
c0025d2b:	90                   	nop

c0025d2c <PIC::close(int, int, void*)>:
c0025d2c:	55                   	push   ebp
c0025d2d:	89 e5                	mov    ebp,esp
c0025d2f:	83 ec 08             	sub    esp,0x8
c0025d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d35:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d37:	83 c0 3c             	add    eax,0x3c
c0025d3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d3c:	83 ec 0c             	sub    esp,0xc
c0025d3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d42:	ff d0                	call   eax
c0025d44:	83 c4 10             	add    esp,0x10
c0025d47:	b8 00 00 00 00       	mov    eax,0x0
c0025d4c:	c9                   	leave  
c0025d4d:	c3                   	ret    

c0025d4e <PIC::PIC()>:
c0025d4e:	83 ec 0c             	sub    esp,0xc
c0025d51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d55:	83 ec 08             	sub    esp,0x8
c0025d58:	68 7c d0 02 c0       	push   0xc002d07c
c0025d5d:	50                   	push   eax
c0025d5e:	e8 bb ed fe ff       	call   c0014b1e <InterruptController::InterruptController(char const*)>
c0025d63:	83 c4 10             	add    esp,0x10
c0025d66:	ba a8 d0 02 c0       	mov    edx,0xc002d0a8
c0025d6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d6f:	89 10                	mov    DWORD PTR [eax],edx
c0025d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d75:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d7b:	0f b6 d0             	movzx  edx,al
c0025d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d82:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025d89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d8d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d93:	0f b6 d0             	movzx  edx,al
c0025d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d9a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025da3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025da9:	8d 50 01             	lea    edx,[eax+0x1]
c0025dac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025db0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025db6:	0f b6 d0             	movzx  edx,al
c0025db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dbd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025dc1:	83 e1 3f             	and    ecx,0x3f
c0025dc4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dcc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025dd2:	0f b6 d0             	movzx  edx,al
c0025dd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dd9:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025de4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025dea:	0f b6 d0             	movzx  edx,al
c0025ded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025df1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dfa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e00:	8d 50 01             	lea    edx,[eax+0x1]
c0025e03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e07:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025e0d:	0f b6 d0             	movzx  edx,al
c0025e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e14:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025e18:	83 e1 3f             	and    ecx,0x3f
c0025e1b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025e1f:	90                   	nop
c0025e20:	83 c4 0c             	add    esp,0xc
c0025e23:	c3                   	ret    

c0025e24 <PIC::ioWait()>:
c0025e24:	eb 00                	jmp    c0025e26 <PIC::ioWait()+0x2>
c0025e26:	eb 00                	jmp    c0025e28 <PIC::ioWait()+0x4>
c0025e28:	90                   	nop
c0025e29:	c3                   	ret    

c0025e2a <PIC::getIRQReg(int)>:
c0025e2a:	55                   	push   ebp
c0025e2b:	89 e5                	mov    ebp,esp
c0025e2d:	83 ec 10             	sub    esp,0x10
c0025e30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e33:	0f b6 c0             	movzx  eax,al
c0025e36:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025e3c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025e3f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025e42:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025e46:	ee                   	out    dx,al
c0025e47:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e4a:	0f b6 c0             	movzx  eax,al
c0025e4d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025e53:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025e56:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025e59:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025e5d:	ee                   	out    dx,al
c0025e5e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025e64:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025e68:	89 c2                	mov    edx,eax
c0025e6a:	ec                   	in     al,dx
c0025e6b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025e6e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e71:	0f b6 c0             	movzx  eax,al
c0025e74:	c1 e0 08             	shl    eax,0x8
c0025e77:	89 c1                	mov    ecx,eax
c0025e79:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025e7f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025e83:	89 c2                	mov    edx,eax
c0025e85:	ec                   	in     al,dx
c0025e86:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025e89:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e8c:	0f b6 c0             	movzx  eax,al
c0025e8f:	09 c8                	or     eax,ecx
c0025e91:	c9                   	leave  
c0025e92:	c3                   	ret    
c0025e93:	90                   	nop

c0025e94 <PIC::eoi(unsigned char)>:
c0025e94:	55                   	push   ebp
c0025e95:	89 e5                	mov    ebp,esp
c0025e97:	83 ec 14             	sub    esp,0x14
c0025e9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e9d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025ea0:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025ea4:	75 1e                	jne    c0025ec4 <PIC::eoi(unsigned char)+0x30>
c0025ea6:	6a 0b                	push   0xb
c0025ea8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eab:	e8 7a ff ff ff       	call   c0025e2a <PIC::getIRQReg(int)>
c0025eb0:	83 c4 08             	add    esp,0x8
c0025eb3:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025eb7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025ebb:	25 80 00 00 00       	and    eax,0x80
c0025ec0:	85 c0                	test   eax,eax
c0025ec2:	74 5f                	je     c0025f23 <PIC::eoi(unsigned char)+0x8f>
c0025ec4:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025ec8:	75 2d                	jne    c0025ef7 <PIC::eoi(unsigned char)+0x63>
c0025eca:	6a 0b                	push   0xb
c0025ecc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ecf:	e8 56 ff ff ff       	call   c0025e2a <PIC::getIRQReg(int)>
c0025ed4:	83 c4 08             	add    esp,0x8
c0025ed7:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025edb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ede:	66 85 c0             	test   ax,ax
c0025ee1:	78 14                	js     c0025ef7 <PIC::eoi(unsigned char)+0x63>
c0025ee3:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025ee9:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025eed:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ef0:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025ef4:	ee                   	out    dx,al
c0025ef5:	eb 2d                	jmp    c0025f24 <PIC::eoi(unsigned char)+0x90>
c0025ef7:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025efb:	76 12                	jbe    c0025f0f <PIC::eoi(unsigned char)+0x7b>
c0025efd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f03:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025f07:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f0a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f0e:	ee                   	out    dx,al
c0025f0f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f15:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025f19:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f1c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f20:	ee                   	out    dx,al
c0025f21:	eb 01                	jmp    c0025f24 <PIC::eoi(unsigned char)+0x90>
c0025f23:	90                   	nop
c0025f24:	c9                   	leave  
c0025f25:	c3                   	ret    

c0025f26 <PIC::remap()>:
c0025f26:	55                   	push   ebp
c0025f27:	89 e5                	mov    ebp,esp
c0025f29:	83 ec 48             	sub    esp,0x48
c0025f2c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025f33:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025f3a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025f40:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025f43:	89 c2                	mov    edx,eax
c0025f45:	ec                   	in     al,dx
c0025f46:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025f49:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025f4c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025f4f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025f55:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025f58:	89 c2                	mov    edx,eax
c0025f5a:	ec                   	in     al,dx
c0025f5b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025f5e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025f61:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025f64:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025f6a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025f6e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025f71:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025f74:	ee                   	out    dx,al
c0025f75:	83 ec 0c             	sub    esp,0xc
c0025f78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f7b:	e8 a4 fe ff ff       	call   c0025e24 <PIC::ioWait()>
c0025f80:	83 c4 10             	add    esp,0x10
c0025f83:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025f89:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025f8d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025f90:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025f93:	ee                   	out    dx,al
c0025f94:	83 ec 0c             	sub    esp,0xc
c0025f97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f9a:	e8 85 fe ff ff       	call   c0025e24 <PIC::ioWait()>
c0025f9f:	83 c4 10             	add    esp,0x10
c0025fa2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025fa5:	0f b6 c0             	movzx  eax,al
c0025fa8:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025fae:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025fb1:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025fb4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025fb7:	ee                   	out    dx,al
c0025fb8:	83 ec 0c             	sub    esp,0xc
c0025fbb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fbe:	e8 61 fe ff ff       	call   c0025e24 <PIC::ioWait()>
c0025fc3:	83 c4 10             	add    esp,0x10
c0025fc6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025fc9:	0f b6 c0             	movzx  eax,al
c0025fcc:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025fd2:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025fd5:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025fd8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025fdb:	ee                   	out    dx,al
c0025fdc:	83 ec 0c             	sub    esp,0xc
c0025fdf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fe2:	e8 3d fe ff ff       	call   c0025e24 <PIC::ioWait()>
c0025fe7:	83 c4 10             	add    esp,0x10
c0025fea:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025ff0:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025ff4:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025ff7:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025ffa:	ee                   	out    dx,al
c0025ffb:	83 ec 0c             	sub    esp,0xc
c0025ffe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026001:	e8 1e fe ff ff       	call   c0025e24 <PIC::ioWait()>
c0026006:	83 c4 10             	add    esp,0x10
c0026009:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002600f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026013:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026016:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026019:	ee                   	out    dx,al
c002601a:	83 ec 0c             	sub    esp,0xc
c002601d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026020:	e8 ff fd ff ff       	call   c0025e24 <PIC::ioWait()>
c0026025:	83 c4 10             	add    esp,0x10
c0026028:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002602e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026032:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026035:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026038:	ee                   	out    dx,al
c0026039:	83 ec 0c             	sub    esp,0xc
c002603c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002603f:	e8 e0 fd ff ff       	call   c0025e24 <PIC::ioWait()>
c0026044:	83 c4 10             	add    esp,0x10
c0026047:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002604d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026051:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026054:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026057:	ee                   	out    dx,al
c0026058:	83 ec 0c             	sub    esp,0xc
c002605b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002605e:	e8 c1 fd ff ff       	call   c0025e24 <PIC::ioWait()>
c0026063:	83 c4 10             	add    esp,0x10
c0026066:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002606a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026070:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026073:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026076:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026079:	ee                   	out    dx,al
c002607a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002607e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026084:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026087:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002608a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002608d:	ee                   	out    dx,al
c002608e:	90                   	nop
c002608f:	c9                   	leave  
c0026090:	c3                   	ret    
c0026091:	90                   	nop

c0026092 <PIC::open(int, int, void*)>:
c0026092:	55                   	push   ebp
c0026093:	89 e5                	mov    ebp,esp
c0026095:	83 ec 18             	sub    esp,0x18
c0026098:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002609e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00260a2:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00260a5:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00260a9:	ee                   	out    dx,al
c00260aa:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00260b0:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00260b4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00260b7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00260bb:	ee                   	out    dx,al
c00260bc:	83 ec 0c             	sub    esp,0xc
c00260bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260c2:	e8 5f fe ff ff       	call   c0025f26 <PIC::remap()>
c00260c7:	83 c4 10             	add    esp,0x10
c00260ca:	b8 00 00 00 00       	mov    eax,0x0
c00260cf:	c9                   	leave  
c00260d0:	c3                   	ret    
c00260d1:	90                   	nop

c00260d2 <APICTimer::close(int, int, void*)>:
c00260d2:	b8 00 00 00 00       	mov    eax,0x0
c00260d7:	c3                   	ret    

c00260d8 <apicTimerHandler(regs*, void*)>:
c00260d8:	83 ec 0c             	sub    esp,0xc
c00260db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260df:	8b 00                	mov    eax,DWORD PTR [eax]
c00260e1:	99                   	cdq    
c00260e2:	52                   	push   edx
c00260e3:	50                   	push   eax
c00260e4:	6a 00                	push   0x0
c00260e6:	68 00 ca 9a 3b       	push   0x3b9aca00
c00260eb:	e8 8c 07 00 00       	call   c002687c <__udivdi3>
c00260f0:	83 c4 10             	add    esp,0x10
c00260f3:	83 ec 08             	sub    esp,0x8
c00260f6:	52                   	push   edx
c00260f7:	50                   	push   eax
c00260f8:	e8 a2 0a ff ff       	call   c0016b9f <timerHandler(unsigned long long)>
c00260fd:	83 c4 10             	add    esp,0x10
c0026100:	90                   	nop
c0026101:	83 c4 0c             	add    esp,0xc
c0026104:	c3                   	ret    
c0026105:	90                   	nop

c0026106 <APICTimer::write(int)>:
c0026106:	53                   	push   ebx
c0026107:	83 ec 28             	sub    esp,0x28
c002610a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002610e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026112:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026118:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c002611d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026123:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026129:	83 ec 0c             	sub    esp,0xc
c002612c:	50                   	push   eax
c002612d:	e8 de f4 ff ff       	call   c0025610 <APIC::getBase()>
c0026132:	83 c4 10             	add    esp,0x10
c0026135:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026139:	a1 d0 e8 02 c0       	mov    eax,ds:0xc002e8d0
c002613e:	8b 15 d4 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e8d4
c0026144:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026148:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002614c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026150:	05 e0 03 00 00       	add    eax,0x3e0
c0026155:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002615b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002615f:	05 80 03 00 00       	add    eax,0x380
c0026164:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002616a:	fb                   	sti    
c002616b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002616f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026173:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026178:	83 d2 00             	adc    edx,0x0
c002617b:	89 c1                	mov    ecx,eax
c002617d:	89 d3                	mov    ebx,edx
c002617f:	a1 d0 e8 02 c0       	mov    eax,ds:0xc002e8d0
c0026184:	8b 15 d4 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e8d4
c002618a:	39 c8                	cmp    eax,ecx
c002618c:	89 d0                	mov    eax,edx
c002618e:	19 d8                	sbb    eax,ebx
c0026190:	73 02                	jae    c0026194 <APICTimer::write(int)+0x8e>
c0026192:	eb d7                	jmp    c002616b <APICTimer::write(int)+0x65>
c0026194:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026198:	05 20 03 00 00       	add    eax,0x320
c002619d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00261a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261a7:	05 90 03 00 00       	add    eax,0x390
c00261ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00261ae:	f7 d0                	not    eax
c00261b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00261b4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00261b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00261bc:	ba 00 00 00 00       	mov    edx,0x0
c00261c1:	f7 f3                	div    ebx
c00261c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00261c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00261cb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00261d1:	0d 00 00 02 00       	or     eax,0x20000
c00261d6:	89 c2                	mov    edx,eax
c00261d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261dc:	05 20 03 00 00       	add    eax,0x320
c00261e1:	89 10                	mov    DWORD PTR [eax],edx
c00261e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261e7:	05 e0 03 00 00       	add    eax,0x3e0
c00261ec:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00261f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261f6:	05 80 03 00 00       	add    eax,0x380
c00261fb:	89 c2                	mov    edx,eax
c00261fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026201:	89 02                	mov    DWORD PTR [edx],eax
c0026203:	90                   	nop
c0026204:	83 c4 28             	add    esp,0x28
c0026207:	5b                   	pop    ebx
c0026208:	c3                   	ret    
c0026209:	90                   	nop

c002620a <APICTimer::open(int, int, void*)>:
c002620a:	57                   	push   edi
c002620b:	56                   	push   esi
c002620c:	53                   	push   ebx
c002620d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026211:	8b 00                	mov    eax,DWORD PTR [eax]
c0026213:	83 c0 24             	add    eax,0x24
c0026216:	8b 00                	mov    eax,DWORD PTR [eax]
c0026218:	83 ec 08             	sub    esp,0x8
c002621b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002621f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026223:	ff d0                	call   eax
c0026225:	83 c4 10             	add    esp,0x10
c0026228:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c002622d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026233:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026239:	83 ec 0c             	sub    esp,0xc
c002623c:	50                   	push   eax
c002623d:	e8 ce f3 ff ff       	call   c0025610 <APIC::getBase()>
c0026242:	83 c4 10             	add    esp,0x10
c0026245:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002624b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002624f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026255:	0f b6 f8             	movzx  edi,al
c0026258:	89 d0                	mov    eax,edx
c002625a:	ba 00 00 00 00       	mov    edx,0x0
c002625f:	89 c1                	mov    ecx,eax
c0026261:	80 e5 ff             	and    ch,0xff
c0026264:	89 cb                	mov    ebx,ecx
c0026266:	0f b6 f2             	movzx  esi,dl
c0026269:	89 d8                	mov    eax,ebx
c002626b:	89 f2                	mov    edx,esi
c002626d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026271:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026274:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026278:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002627c:	83 e0 00             	and    eax,0x0
c002627f:	09 d0                	or     eax,edx
c0026281:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026289:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002628f:	8d 50 01             	lea    edx,[eax+0x1]
c0026292:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026296:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002629c:	0f b6 d0             	movzx  edx,al
c002629f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a3:	83 c2 08             	add    edx,0x8
c00262a6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00262aa:	0f b6 c9             	movzx  ecx,cl
c00262ad:	81 c9 00 00 01 00    	or     ecx,0x10000
c00262b3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00262b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00262bf:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00262c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00262cd:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00262d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00262d7:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00262dd:	83 ec 0c             	sub    esp,0xc
c00262e0:	51                   	push   ecx
c00262e1:	6a 01                	push   0x1
c00262e3:	68 d8 60 02 c0       	push   0xc00260d8
c00262e8:	52                   	push   edx
c00262e9:	50                   	push   eax
c00262ea:	e8 57 de fe ff       	call   c0014146 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00262ef:	83 c4 20             	add    esp,0x20
c00262f2:	89 c2                	mov    edx,eax
c00262f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262f8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00262fe:	b8 00 00 00 00       	mov    eax,0x0
c0026303:	5b                   	pop    ebx
c0026304:	5e                   	pop    esi
c0026305:	5f                   	pop    edi
c0026306:	c3                   	ret    
c0026307:	90                   	nop

c0026308 <APICTimer::APICTimer()>:
c0026308:	83 ec 0c             	sub    esp,0xc
c002630b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002630f:	83 ec 08             	sub    esp,0x8
c0026312:	68 e8 d0 02 c0       	push   0xc002d0e8
c0026317:	50                   	push   eax
c0026318:	e8 f3 07 ff ff       	call   c0016b10 <Timer::Timer(char const*)>
c002631d:	83 c4 10             	add    esp,0x10
c0026320:	ba fc d0 02 c0       	mov    edx,0xc002d0fc
c0026325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026329:	89 10                	mov    DWORD PTR [eax],edx
c002632b:	90                   	nop
c002632c:	83 c4 0c             	add    esp,0xc
c002632f:	c3                   	ret    

c0026330 <PIT::write(int)>:
c0026330:	83 ec 10             	sub    esp,0x10
c0026333:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026337:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002633b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026341:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026345:	a3 04 26 03 c0       	mov    ds:0xc0032604,eax
c002634a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002634f:	99                   	cdq    
c0026350:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026354:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026358:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002635f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026364:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026368:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002636d:	ee                   	out    dx,al
c002636e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026372:	0f b6 c0             	movzx  eax,al
c0026375:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002637c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026380:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026384:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026389:	ee                   	out    dx,al
c002638a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002638e:	c1 f8 08             	sar    eax,0x8
c0026391:	0f b6 c0             	movzx  eax,al
c0026394:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002639b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002639f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00263a3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00263a8:	ee                   	out    dx,al
c00263a9:	90                   	nop
c00263aa:	83 c4 10             	add    esp,0x10
c00263ad:	c3                   	ret    

c00263ae <pitHandler(regs*, void*)>:
c00263ae:	83 ec 0c             	sub    esp,0xc
c00263b1:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c00263b6:	99                   	cdq    
c00263b7:	52                   	push   edx
c00263b8:	50                   	push   eax
c00263b9:	6a 00                	push   0x0
c00263bb:	68 00 ca 9a 3b       	push   0x3b9aca00
c00263c0:	e8 b7 04 00 00       	call   c002687c <__udivdi3>
c00263c5:	83 c4 10             	add    esp,0x10
c00263c8:	83 ec 08             	sub    esp,0x8
c00263cb:	52                   	push   edx
c00263cc:	50                   	push   eax
c00263cd:	e8 cd 07 ff ff       	call   c0016b9f <timerHandler(unsigned long long)>
c00263d2:	83 c4 10             	add    esp,0x10
c00263d5:	90                   	nop
c00263d6:	83 c4 0c             	add    esp,0xc
c00263d9:	c3                   	ret    

c00263da <PIT::open(int, int, void*)>:
c00263da:	83 ec 0c             	sub    esp,0xc
c00263dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00263e3:	83 c0 24             	add    eax,0x24
c00263e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00263e8:	83 ec 08             	sub    esp,0x8
c00263eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263f3:	ff d0                	call   eax
c00263f5:	83 c4 10             	add    esp,0x10
c00263f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263fc:	83 ec 0c             	sub    esp,0xc
c00263ff:	6a 00                	push   0x0
c0026401:	6a 01                	push   0x1
c0026403:	68 ae 63 02 c0       	push   0xc00263ae
c0026408:	6a 00                	push   0x0
c002640a:	50                   	push   eax
c002640b:	e8 36 dd fe ff       	call   c0014146 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026410:	83 c4 20             	add    esp,0x20
c0026413:	89 c2                	mov    edx,eax
c0026415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026419:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002641f:	b8 00 00 00 00       	mov    eax,0x0
c0026424:	83 c4 0c             	add    esp,0xc
c0026427:	c3                   	ret    

c0026428 <PIT::close(int, int, void*)>:
c0026428:	83 ec 0c             	sub    esp,0xc
c002642b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002642f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002643d:	6a 01                	push   0x1
c002643f:	68 ae 63 02 c0       	push   0xc00263ae
c0026444:	6a 00                	push   0x0
c0026446:	50                   	push   eax
c0026447:	e8 38 dd fe ff       	call   c0014184 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002644c:	83 c4 10             	add    esp,0x10
c002644f:	b8 00 00 00 00       	mov    eax,0x0
c0026454:	83 c4 0c             	add    esp,0xc
c0026457:	c3                   	ret    

c0026458 <PIT::PIT()>:
c0026458:	83 ec 0c             	sub    esp,0xc
c002645b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002645f:	83 ec 08             	sub    esp,0x8
c0026462:	68 24 d1 02 c0       	push   0xc002d124
c0026467:	50                   	push   eax
c0026468:	e8 a3 06 ff ff       	call   c0016b10 <Timer::Timer(char const*)>
c002646d:	83 c4 10             	add    esp,0x10
c0026470:	ba 4c d1 02 c0       	mov    edx,0xc002d14c
c0026475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026479:	89 10                	mov    DWORD PTR [eax],edx
c002647b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002647f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026485:	0f b6 d0             	movzx  edx,al
c0026488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002648c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026497:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002649d:	0f b6 d0             	movzx  edx,al
c00264a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264a4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00264a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264ad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00264b3:	8d 50 01             	lea    edx,[eax+0x1]
c00264b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264ba:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00264c0:	0f b6 d0             	movzx  edx,al
c00264c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264c7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00264cb:	83 e1 3f             	and    ecx,0x3f
c00264ce:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00264d2:	90                   	nop
c00264d3:	83 c4 0c             	add    esp,0xc
c00264d6:	c3                   	ret    
c00264d7:	66 90                	xchg   ax,ax
c00264d9:	66 90                	xchg   ax,ax
c00264db:	66 90                	xchg   ax,ax
c00264dd:	66 90                	xchg   ax,ax
c00264df:	90                   	nop

c00264e0 <avxDetect>:
c00264e0:	b8 00 00 00 00       	mov    eax,0x0
c00264e5:	c3                   	ret    

c00264e6 <avxSave>:
c00264e6:	c3                   	ret    

c00264e7 <avxLoad>:
c00264e7:	c3                   	ret    

c00264e8 <avxInit>:
c00264e8:	c3                   	ret    

c00264e9 <avxClose>:
c00264e9:	c3                   	ret    

c00264ea <wouldSheSayYes>:
c00264ea:	c3                   	ret    
c00264eb:	49                   	dec    ecx
c00264ec:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00264f0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00264f4:	75 20                	jne    c0026516 <sseDetect.noSSE+0x1>
c00264f6:	4e                   	dec    esi
c00264f7:	79 61                	jns    c002655a <x87Detect+0x14>
c00264f9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00264fe:	66 90                	xchg   ax,ax

c0026500 <absolutelyNoChanceInHell>:
c0026500:	b8 01 00 00 00       	mov    eax,0x1
c0026505:	0f a2                	cpuid  
c0026507:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002650d:	74 06                	je     c0026515 <sseDetect.noSSE>
c002650f:	b8 01 00 00 00       	mov    eax,0x1
c0026514:	c3                   	ret    

c0026515 <sseDetect.noSSE>:
c0026515:	31 c0                	xor    eax,eax
c0026517:	c3                   	ret    

c0026518 <sseSave>:
c0026518:	0f ae 44 24 08       	fxsave [esp+0x8]
c002651d:	c3                   	ret    

c002651e <sseLoad>:
c002651e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026523:	c3                   	ret    

c0026524 <sseInit>:
c0026524:	e8 43 00 00 00       	call   c002656c <x87Init>
c0026529:	0f 20 e0             	mov    eax,cr4
c002652c:	66 0d 00 06          	or     ax,0x600
c0026530:	0f 22 e0             	mov    cr4,eax
c0026533:	c3                   	ret    

c0026534 <sseClose>:
c0026534:	c3                   	ret    
c0026535:	66 90                	xchg   ax,ax
c0026537:	66 90                	xchg   ax,ax
c0026539:	66 90                	xchg   ax,ax
c002653b:	66 90                	xchg   ax,ax
c002653d:	66 90                	xchg   ax,ax
c002653f:	90                   	nop

c0026540 <value_37F>:
c0026540:	7f 03                	jg     c0026545 <value_37A+0x1>

c0026542 <value_37E>:
c0026542:	7e 03                	jle    c0026547 <x87Detect+0x1>

c0026544 <value_37A>:
c0026544:	7a 03                	jp     c0026549 <x87Detect+0x3>

c0026546 <x87Detect>:
c0026546:	b8 01 00 00 00       	mov    eax,0x1
c002654b:	0f a2                	cpuid  
c002654d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026553:	74 06                	je     c002655b <x87Detect.nox87>
c0026555:	b8 01 00 00 00       	mov    eax,0x1
c002655a:	c3                   	ret    

c002655b <x87Detect.nox87>:
c002655b:	b8 00 00 00 00       	mov    eax,0x0
c0026560:	c3                   	ret    

c0026561 <x87Save>:
c0026561:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026566:	c3                   	ret    

c0026567 <x87Load>:
c0026567:	dd 64 24 08          	frstor [esp+0x8]
c002656b:	c3                   	ret    

c002656c <x87Init>:
c002656c:	9b db e3             	finit  
c002656f:	0f 20 c0             	mov    eax,cr0
c0026572:	66 25 fb ff          	and    ax,0xfffb
c0026576:	66 0d 22 00          	or     ax,0x22
c002657a:	0f 22 c0             	mov    cr0,eax
c002657d:	0f 06                	clts   
c002657f:	d9 2d 44 65 02 c0    	fldcw  WORD PTR ds:0xc0026544
c0026585:	c3                   	ret    

c0026586 <x87Close>:
c0026586:	c3                   	ret    
c0026587:	90                   	nop

c0026588 <__do_global_ctors_aux>:
c0026588:	a1 cc 90 02 c0       	mov    eax,ds:0xc00290cc
c002658d:	83 f8 ff             	cmp    eax,0xffffffff
c0026590:	74 1a                	je     c00265ac <__do_global_ctors_aux+0x24>
c0026592:	55                   	push   ebp
c0026593:	89 e5                	mov    ebp,esp
c0026595:	53                   	push   ebx
c0026596:	52                   	push   edx
c0026597:	bb cc 90 02 c0       	mov    ebx,0xc00290cc
c002659c:	ff d0                	call   eax
c002659e:	83 eb 04             	sub    ebx,0x4
c00265a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00265a3:	83 f8 ff             	cmp    eax,0xffffffff
c00265a6:	75 f4                	jne    c002659c <__do_global_ctors_aux+0x14>
c00265a8:	58                   	pop    eax
c00265a9:	5b                   	pop    ebx
c00265aa:	5d                   	pop    ebp
c00265ab:	c3                   	ret    
c00265ac:	c3                   	ret    
c00265ad:	66 90                	xchg   ax,ax
c00265af:	90                   	nop

c00265b0 <__divdi3>:
c00265b0:	55                   	push   ebp
c00265b1:	57                   	push   edi
c00265b2:	56                   	push   esi
c00265b3:	53                   	push   ebx
c00265b4:	83 ec 1c             	sub    esp,0x1c
c00265b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00265bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00265bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00265c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00265c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00265ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00265ce:	85 db                	test   ebx,ebx
c00265d0:	0f 88 8e 00 00 00    	js     c0026664 <__divdi3+0xb4>
c00265d6:	89 dd                	mov    ebp,ebx
c00265d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00265e0:	89 d3                	mov    ebx,edx
c00265e2:	85 d2                	test   edx,edx
c00265e4:	79 0d                	jns    c00265f3 <__divdi3+0x43>
c00265e6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00265ea:	f7 d8                	neg    eax
c00265ec:	83 d2 00             	adc    edx,0x0
c00265ef:	f7 da                	neg    edx
c00265f1:	89 d3                	mov    ebx,edx
c00265f3:	89 c7                	mov    edi,eax
c00265f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00265f8:	85 db                	test   ebx,ebx
c00265fa:	75 48                	jne    c0026644 <__divdi3+0x94>
c00265fc:	39 ef                	cmp    edi,ebp
c00265fe:	76 24                	jbe    c0026624 <__divdi3+0x74>
c0026600:	89 ea                	mov    edx,ebp
c0026602:	f7 f7                	div    edi
c0026604:	89 c1                	mov    ecx,eax
c0026606:	31 f6                	xor    esi,esi
c0026608:	89 c8                	mov    eax,ecx
c002660a:	89 f2                	mov    edx,esi
c002660c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026610:	85 c9                	test   ecx,ecx
c0026612:	74 07                	je     c002661b <__divdi3+0x6b>
c0026614:	f7 d8                	neg    eax
c0026616:	83 d2 00             	adc    edx,0x0
c0026619:	f7 da                	neg    edx
c002661b:	83 c4 1c             	add    esp,0x1c
c002661e:	5b                   	pop    ebx
c002661f:	5e                   	pop    esi
c0026620:	5f                   	pop    edi
c0026621:	5d                   	pop    ebp
c0026622:	c3                   	ret    
c0026623:	90                   	nop
c0026624:	85 ff                	test   edi,edi
c0026626:	75 0b                	jne    c0026633 <__divdi3+0x83>
c0026628:	b8 01 00 00 00       	mov    eax,0x1
c002662d:	31 d2                	xor    edx,edx
c002662f:	f7 f3                	div    ebx
c0026631:	89 c7                	mov    edi,eax
c0026633:	31 d2                	xor    edx,edx
c0026635:	89 e8                	mov    eax,ebp
c0026637:	f7 f7                	div    edi
c0026639:	89 c6                	mov    esi,eax
c002663b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002663e:	f7 f7                	div    edi
c0026640:	89 c1                	mov    ecx,eax
c0026642:	eb c4                	jmp    c0026608 <__divdi3+0x58>
c0026644:	39 eb                	cmp    ebx,ebp
c0026646:	77 3c                	ja     c0026684 <__divdi3+0xd4>
c0026648:	0f bd f3             	bsr    esi,ebx
c002664b:	83 f6 1f             	xor    esi,0x1f
c002664e:	75 40                	jne    c0026690 <__divdi3+0xe0>
c0026650:	39 eb                	cmp    ebx,ebp
c0026652:	72 09                	jb     c002665d <__divdi3+0xad>
c0026654:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026657:	0f 87 97 00 00 00    	ja     c00266f4 <__divdi3+0x144>
c002665d:	b9 01 00 00 00       	mov    ecx,0x1
c0026662:	eb a4                	jmp    c0026608 <__divdi3+0x58>
c0026664:	f7 d9                	neg    ecx
c0026666:	83 d3 00             	adc    ebx,0x0
c0026669:	f7 db                	neg    ebx
c002666b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002666e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026672:	89 dd                	mov    ebp,ebx
c0026674:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002667c:	e9 5f ff ff ff       	jmp    c00265e0 <__divdi3+0x30>
c0026681:	8d 76 00             	lea    esi,[esi+0x0]
c0026684:	31 f6                	xor    esi,esi
c0026686:	31 c9                	xor    ecx,ecx
c0026688:	e9 7b ff ff ff       	jmp    c0026608 <__divdi3+0x58>
c002668d:	8d 76 00             	lea    esi,[esi+0x0]
c0026690:	b8 20 00 00 00       	mov    eax,0x20
c0026695:	29 f0                	sub    eax,esi
c0026697:	89 f1                	mov    ecx,esi
c0026699:	d3 e3                	shl    ebx,cl
c002669b:	89 fa                	mov    edx,edi
c002669d:	88 c1                	mov    cl,al
c002669f:	d3 ea                	shr    edx,cl
c00266a1:	09 da                	or     edx,ebx
c00266a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00266a7:	89 f1                	mov    ecx,esi
c00266a9:	d3 e7                	shl    edi,cl
c00266ab:	89 eb                	mov    ebx,ebp
c00266ad:	88 c1                	mov    cl,al
c00266af:	d3 eb                	shr    ebx,cl
c00266b1:	89 f1                	mov    ecx,esi
c00266b3:	d3 e5                	shl    ebp,cl
c00266b5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00266b8:	88 c1                	mov    cl,al
c00266ba:	d3 ea                	shr    edx,cl
c00266bc:	09 d5                	or     ebp,edx
c00266be:	89 e8                	mov    eax,ebp
c00266c0:	89 da                	mov    edx,ebx
c00266c2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00266c6:	89 d3                	mov    ebx,edx
c00266c8:	89 c5                	mov    ebp,eax
c00266ca:	f7 e7                	mul    edi
c00266cc:	39 d3                	cmp    ebx,edx
c00266ce:	72 18                	jb     c00266e8 <__divdi3+0x138>
c00266d0:	74 0a                	je     c00266dc <__divdi3+0x12c>
c00266d2:	89 e9                	mov    ecx,ebp
c00266d4:	31 f6                	xor    esi,esi
c00266d6:	e9 2d ff ff ff       	jmp    c0026608 <__divdi3+0x58>
c00266db:	90                   	nop
c00266dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00266df:	89 f1                	mov    ecx,esi
c00266e1:	d3 e7                	shl    edi,cl
c00266e3:	39 c7                	cmp    edi,eax
c00266e5:	73 eb                	jae    c00266d2 <__divdi3+0x122>
c00266e7:	90                   	nop
c00266e8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00266eb:	31 f6                	xor    esi,esi
c00266ed:	e9 16 ff ff ff       	jmp    c0026608 <__divdi3+0x58>
c00266f2:	66 90                	xchg   ax,ax
c00266f4:	31 c9                	xor    ecx,ecx
c00266f6:	e9 0d ff ff ff       	jmp    c0026608 <__divdi3+0x58>
c00266fb:	90                   	nop

c00266fc <__moddi3>:
c00266fc:	55                   	push   ebp
c00266fd:	57                   	push   edi
c00266fe:	56                   	push   esi
c00266ff:	53                   	push   ebx
c0026700:	83 ec 2c             	sub    esp,0x2c
c0026703:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026707:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002670b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002670f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026713:	85 db                	test   ebx,ebx
c0026715:	0f 88 85 00 00 00    	js     c00267a0 <__moddi3+0xa4>
c002671b:	89 de                	mov    esi,ebx
c002671d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026725:	89 d7                	mov    edi,edx
c0026727:	85 d2                	test   edx,edx
c0026729:	79 09                	jns    c0026734 <__moddi3+0x38>
c002672b:	f7 d8                	neg    eax
c002672d:	83 d2 00             	adc    edx,0x0
c0026730:	f7 da                	neg    edx
c0026732:	89 d7                	mov    edi,edx
c0026734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026738:	89 cd                	mov    ebp,ecx
c002673a:	85 ff                	test   edi,edi
c002673c:	75 52                	jne    c0026790 <__moddi3+0x94>
c002673e:	89 c3                	mov    ebx,eax
c0026740:	39 f0                	cmp    eax,esi
c0026742:	76 24                	jbe    c0026768 <__moddi3+0x6c>
c0026744:	89 c8                	mov    eax,ecx
c0026746:	89 f2                	mov    edx,esi
c0026748:	f7 f3                	div    ebx
c002674a:	89 d6                	mov    esi,edx
c002674c:	89 f0                	mov    eax,esi
c002674e:	31 d2                	xor    edx,edx
c0026750:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026754:	85 c9                	test   ecx,ecx
c0026756:	74 07                	je     c002675f <__moddi3+0x63>
c0026758:	f7 d8                	neg    eax
c002675a:	83 d2 00             	adc    edx,0x0
c002675d:	f7 da                	neg    edx
c002675f:	83 c4 2c             	add    esp,0x2c
c0026762:	5b                   	pop    ebx
c0026763:	5e                   	pop    esi
c0026764:	5f                   	pop    edi
c0026765:	5d                   	pop    ebp
c0026766:	c3                   	ret    
c0026767:	90                   	nop
c0026768:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002676c:	85 db                	test   ebx,ebx
c002676e:	75 0d                	jne    c002677d <__moddi3+0x81>
c0026770:	b8 01 00 00 00       	mov    eax,0x1
c0026775:	31 d2                	xor    edx,edx
c0026777:	f7 f7                	div    edi
c0026779:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002677d:	89 f0                	mov    eax,esi
c002677f:	31 d2                	xor    edx,edx
c0026781:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026785:	f7 f7                	div    edi
c0026787:	89 e8                	mov    eax,ebp
c0026789:	f7 f7                	div    edi
c002678b:	89 d6                	mov    esi,edx
c002678d:	eb bd                	jmp    c002674c <__moddi3+0x50>
c002678f:	90                   	nop
c0026790:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026794:	39 f7                	cmp    edi,esi
c0026796:	76 20                	jbe    c00267b8 <__moddi3+0xbc>
c0026798:	89 c8                	mov    eax,ecx
c002679a:	89 f2                	mov    edx,esi
c002679c:	eb b2                	jmp    c0026750 <__moddi3+0x54>
c002679e:	66 90                	xchg   ax,ax
c00267a0:	f7 d9                	neg    ecx
c00267a2:	83 d3 00             	adc    ebx,0x0
c00267a5:	f7 db                	neg    ebx
c00267a7:	89 de                	mov    esi,ebx
c00267a9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00267b1:	e9 6f ff ff ff       	jmp    c0026725 <__moddi3+0x29>
c00267b6:	66 90                	xchg   ax,ax
c00267b8:	0f bd c7             	bsr    eax,edi
c00267bb:	83 f0 1f             	xor    eax,0x1f
c00267be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00267c2:	75 24                	jne    c00267e8 <__moddi3+0xec>
c00267c4:	39 f7                	cmp    edi,esi
c00267c6:	72 06                	jb     c00267ce <__moddi3+0xd2>
c00267c8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00267cc:	77 0c                	ja     c00267da <__moddi3+0xde>
c00267ce:	89 e9                	mov    ecx,ebp
c00267d0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00267d4:	19 fe                	sbb    esi,edi
c00267d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00267da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00267de:	89 f2                	mov    edx,esi
c00267e0:	e9 6b ff ff ff       	jmp    c0026750 <__moddi3+0x54>
c00267e5:	8d 76 00             	lea    esi,[esi+0x0]
c00267e8:	b8 20 00 00 00       	mov    eax,0x20
c00267ed:	89 c2                	mov    edx,eax
c00267ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00267f3:	29 da                	sub    edx,ebx
c00267f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00267f9:	88 d9                	mov    cl,bl
c00267fb:	d3 e7                	shl    edi,cl
c00267fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026801:	88 d1                	mov    cl,dl
c0026803:	d3 e8                	shr    eax,cl
c0026805:	09 c7                	or     edi,eax
c0026807:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002680b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002680f:	89 d8                	mov    eax,ebx
c0026811:	88 d9                	mov    cl,bl
c0026813:	d3 e7                	shl    edi,cl
c0026815:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026819:	89 f3                	mov    ebx,esi
c002681b:	88 d1                	mov    cl,dl
c002681d:	d3 eb                	shr    ebx,cl
c002681f:	89 c7                	mov    edi,eax
c0026821:	88 c1                	mov    cl,al
c0026823:	d3 e6                	shl    esi,cl
c0026825:	89 e8                	mov    eax,ebp
c0026827:	88 d1                	mov    cl,dl
c0026829:	d3 e8                	shr    eax,cl
c002682b:	09 f0                	or     eax,esi
c002682d:	89 f9                	mov    ecx,edi
c002682f:	d3 e5                	shl    ebp,cl
c0026831:	89 da                	mov    edx,ebx
c0026833:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026837:	89 d3                	mov    ebx,edx
c0026839:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002683d:	89 c6                	mov    esi,eax
c002683f:	89 d1                	mov    ecx,edx
c0026841:	39 d3                	cmp    ebx,edx
c0026843:	72 27                	jb     c002686c <__moddi3+0x170>
c0026845:	74 21                	je     c0026868 <__moddi3+0x16c>
c0026847:	29 f5                	sub    ebp,esi
c0026849:	19 cb                	sbb    ebx,ecx
c002684b:	89 de                	mov    esi,ebx
c002684d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026851:	d3 e6                	shl    esi,cl
c0026853:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026857:	89 f9                	mov    ecx,edi
c0026859:	d3 ed                	shr    ebp,cl
c002685b:	09 ee                	or     esi,ebp
c002685d:	89 f0                	mov    eax,esi
c002685f:	d3 eb                	shr    ebx,cl
c0026861:	89 da                	mov    edx,ebx
c0026863:	e9 e8 fe ff ff       	jmp    c0026750 <__moddi3+0x54>
c0026868:	39 c5                	cmp    ebp,eax
c002686a:	73 db                	jae    c0026847 <__moddi3+0x14b>
c002686c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026870:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026874:	89 d1                	mov    ecx,edx
c0026876:	89 c6                	mov    esi,eax
c0026878:	eb cd                	jmp    c0026847 <__moddi3+0x14b>
c002687a:	66 90                	xchg   ax,ax

c002687c <__udivdi3>:
c002687c:	55                   	push   ebp
c002687d:	57                   	push   edi
c002687e:	56                   	push   esi
c002687f:	53                   	push   ebx
c0026880:	83 ec 1c             	sub    esp,0x1c
c0026883:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026887:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002688b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002688f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026893:	85 d2                	test   edx,edx
c0026895:	75 41                	jne    c00268d8 <__udivdi3+0x5c>
c0026897:	39 f7                	cmp    edi,esi
c0026899:	76 15                	jbe    c00268b0 <__udivdi3+0x34>
c002689b:	89 e8                	mov    eax,ebp
c002689d:	89 f2                	mov    edx,esi
c002689f:	f7 f7                	div    edi
c00268a1:	31 db                	xor    ebx,ebx
c00268a3:	89 da                	mov    edx,ebx
c00268a5:	83 c4 1c             	add    esp,0x1c
c00268a8:	5b                   	pop    ebx
c00268a9:	5e                   	pop    esi
c00268aa:	5f                   	pop    edi
c00268ab:	5d                   	pop    ebp
c00268ac:	c3                   	ret    
c00268ad:	8d 76 00             	lea    esi,[esi+0x0]
c00268b0:	89 f9                	mov    ecx,edi
c00268b2:	85 ff                	test   edi,edi
c00268b4:	75 0b                	jne    c00268c1 <__udivdi3+0x45>
c00268b6:	b8 01 00 00 00       	mov    eax,0x1
c00268bb:	31 d2                	xor    edx,edx
c00268bd:	f7 f7                	div    edi
c00268bf:	89 c1                	mov    ecx,eax
c00268c1:	31 d2                	xor    edx,edx
c00268c3:	89 f0                	mov    eax,esi
c00268c5:	f7 f1                	div    ecx
c00268c7:	89 c3                	mov    ebx,eax
c00268c9:	89 e8                	mov    eax,ebp
c00268cb:	f7 f1                	div    ecx
c00268cd:	89 da                	mov    edx,ebx
c00268cf:	83 c4 1c             	add    esp,0x1c
c00268d2:	5b                   	pop    ebx
c00268d3:	5e                   	pop    esi
c00268d4:	5f                   	pop    edi
c00268d5:	5d                   	pop    ebp
c00268d6:	c3                   	ret    
c00268d7:	90                   	nop
c00268d8:	39 f2                	cmp    edx,esi
c00268da:	77 1c                	ja     c00268f8 <__udivdi3+0x7c>
c00268dc:	0f bd da             	bsr    ebx,edx
c00268df:	83 f3 1f             	xor    ebx,0x1f
c00268e2:	75 24                	jne    c0026908 <__udivdi3+0x8c>
c00268e4:	39 f2                	cmp    edx,esi
c00268e6:	72 08                	jb     c00268f0 <__udivdi3+0x74>
c00268e8:	39 ef                	cmp    edi,ebp
c00268ea:	0f 87 84 00 00 00    	ja     c0026974 <__udivdi3+0xf8>
c00268f0:	b8 01 00 00 00       	mov    eax,0x1
c00268f5:	eb ac                	jmp    c00268a3 <__udivdi3+0x27>
c00268f7:	90                   	nop
c00268f8:	31 db                	xor    ebx,ebx
c00268fa:	31 c0                	xor    eax,eax
c00268fc:	89 da                	mov    edx,ebx
c00268fe:	83 c4 1c             	add    esp,0x1c
c0026901:	5b                   	pop    ebx
c0026902:	5e                   	pop    esi
c0026903:	5f                   	pop    edi
c0026904:	5d                   	pop    ebp
c0026905:	c3                   	ret    
c0026906:	66 90                	xchg   ax,ax
c0026908:	b8 20 00 00 00       	mov    eax,0x20
c002690d:	29 d8                	sub    eax,ebx
c002690f:	88 d9                	mov    cl,bl
c0026911:	d3 e2                	shl    edx,cl
c0026913:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026917:	89 fa                	mov    edx,edi
c0026919:	88 c1                	mov    cl,al
c002691b:	d3 ea                	shr    edx,cl
c002691d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026921:	09 d1                	or     ecx,edx
c0026923:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026927:	88 d9                	mov    cl,bl
c0026929:	d3 e7                	shl    edi,cl
c002692b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002692f:	89 f7                	mov    edi,esi
c0026931:	88 c1                	mov    cl,al
c0026933:	d3 ef                	shr    edi,cl
c0026935:	88 d9                	mov    cl,bl
c0026937:	d3 e6                	shl    esi,cl
c0026939:	89 ea                	mov    edx,ebp
c002693b:	88 c1                	mov    cl,al
c002693d:	d3 ea                	shr    edx,cl
c002693f:	09 d6                	or     esi,edx
c0026941:	89 f0                	mov    eax,esi
c0026943:	89 fa                	mov    edx,edi
c0026945:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026949:	89 d7                	mov    edi,edx
c002694b:	89 c6                	mov    esi,eax
c002694d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026951:	39 d7                	cmp    edi,edx
c0026953:	72 13                	jb     c0026968 <__udivdi3+0xec>
c0026955:	74 09                	je     c0026960 <__udivdi3+0xe4>
c0026957:	89 f0                	mov    eax,esi
c0026959:	31 db                	xor    ebx,ebx
c002695b:	e9 43 ff ff ff       	jmp    c00268a3 <__udivdi3+0x27>
c0026960:	88 d9                	mov    cl,bl
c0026962:	d3 e5                	shl    ebp,cl
c0026964:	39 c5                	cmp    ebp,eax
c0026966:	73 ef                	jae    c0026957 <__udivdi3+0xdb>
c0026968:	8d 46 ff             	lea    eax,[esi-0x1]
c002696b:	31 db                	xor    ebx,ebx
c002696d:	e9 31 ff ff ff       	jmp    c00268a3 <__udivdi3+0x27>
c0026972:	66 90                	xchg   ax,ax
c0026974:	31 c0                	xor    eax,eax
c0026976:	e9 28 ff ff ff       	jmp    c00268a3 <__udivdi3+0x27>
c002697b:	90                   	nop

c002697c <__umoddi3>:
c002697c:	55                   	push   ebp
c002697d:	57                   	push   edi
c002697e:	56                   	push   esi
c002697f:	53                   	push   ebx
c0026980:	83 ec 1c             	sub    esp,0x1c
c0026983:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026987:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002698b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002698f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026993:	89 da                	mov    edx,ebx
c0026995:	85 c0                	test   eax,eax
c0026997:	75 37                	jne    c00269d0 <__umoddi3+0x54>
c0026999:	39 df                	cmp    edi,ebx
c002699b:	76 13                	jbe    c00269b0 <__umoddi3+0x34>
c002699d:	89 f0                	mov    eax,esi
c002699f:	f7 f7                	div    edi
c00269a1:	89 d0                	mov    eax,edx
c00269a3:	31 d2                	xor    edx,edx
c00269a5:	83 c4 1c             	add    esp,0x1c
c00269a8:	5b                   	pop    ebx
c00269a9:	5e                   	pop    esi
c00269aa:	5f                   	pop    edi
c00269ab:	5d                   	pop    ebp
c00269ac:	c3                   	ret    
c00269ad:	8d 76 00             	lea    esi,[esi+0x0]
c00269b0:	89 fd                	mov    ebp,edi
c00269b2:	85 ff                	test   edi,edi
c00269b4:	75 0b                	jne    c00269c1 <__umoddi3+0x45>
c00269b6:	b8 01 00 00 00       	mov    eax,0x1
c00269bb:	31 d2                	xor    edx,edx
c00269bd:	f7 f7                	div    edi
c00269bf:	89 c5                	mov    ebp,eax
c00269c1:	89 d8                	mov    eax,ebx
c00269c3:	31 d2                	xor    edx,edx
c00269c5:	f7 f5                	div    ebp
c00269c7:	89 f0                	mov    eax,esi
c00269c9:	f7 f5                	div    ebp
c00269cb:	89 d0                	mov    eax,edx
c00269cd:	eb d4                	jmp    c00269a3 <__umoddi3+0x27>
c00269cf:	90                   	nop
c00269d0:	89 f1                	mov    ecx,esi
c00269d2:	39 d8                	cmp    eax,ebx
c00269d4:	76 0a                	jbe    c00269e0 <__umoddi3+0x64>
c00269d6:	89 f0                	mov    eax,esi
c00269d8:	83 c4 1c             	add    esp,0x1c
c00269db:	5b                   	pop    ebx
c00269dc:	5e                   	pop    esi
c00269dd:	5f                   	pop    edi
c00269de:	5d                   	pop    ebp
c00269df:	c3                   	ret    
c00269e0:	0f bd e8             	bsr    ebp,eax
c00269e3:	83 f5 1f             	xor    ebp,0x1f
c00269e6:	75 1c                	jne    c0026a04 <__umoddi3+0x88>
c00269e8:	39 d8                	cmp    eax,ebx
c00269ea:	72 04                	jb     c00269f0 <__umoddi3+0x74>
c00269ec:	39 f7                	cmp    edi,esi
c00269ee:	77 08                	ja     c00269f8 <__umoddi3+0x7c>
c00269f0:	89 da                	mov    edx,ebx
c00269f2:	29 fe                	sub    esi,edi
c00269f4:	19 c2                	sbb    edx,eax
c00269f6:	89 f1                	mov    ecx,esi
c00269f8:	89 c8                	mov    eax,ecx
c00269fa:	83 c4 1c             	add    esp,0x1c
c00269fd:	5b                   	pop    ebx
c00269fe:	5e                   	pop    esi
c00269ff:	5f                   	pop    edi
c0026a00:	5d                   	pop    ebp
c0026a01:	c3                   	ret    
c0026a02:	66 90                	xchg   ax,ax
c0026a04:	ba 20 00 00 00       	mov    edx,0x20
c0026a09:	29 ea                	sub    edx,ebp
c0026a0b:	89 e9                	mov    ecx,ebp
c0026a0d:	d3 e0                	shl    eax,cl
c0026a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026a13:	89 f8                	mov    eax,edi
c0026a15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026a19:	88 d1                	mov    cl,dl
c0026a1b:	d3 e8                	shr    eax,cl
c0026a1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a21:	09 c1                	or     ecx,eax
c0026a23:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a27:	89 e9                	mov    ecx,ebp
c0026a29:	d3 e7                	shl    edi,cl
c0026a2b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a2f:	89 d8                	mov    eax,ebx
c0026a31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026a35:	88 d1                	mov    cl,dl
c0026a37:	d3 e8                	shr    eax,cl
c0026a39:	89 c7                	mov    edi,eax
c0026a3b:	89 e9                	mov    ecx,ebp
c0026a3d:	d3 e3                	shl    ebx,cl
c0026a3f:	89 f0                	mov    eax,esi
c0026a41:	88 d1                	mov    cl,dl
c0026a43:	d3 e8                	shr    eax,cl
c0026a45:	09 d8                	or     eax,ebx
c0026a47:	89 e9                	mov    ecx,ebp
c0026a49:	d3 e6                	shl    esi,cl
c0026a4b:	89 f3                	mov    ebx,esi
c0026a4d:	89 fa                	mov    edx,edi
c0026a4f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a53:	89 d1                	mov    ecx,edx
c0026a55:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a59:	89 c6                	mov    esi,eax
c0026a5b:	89 d7                	mov    edi,edx
c0026a5d:	39 d1                	cmp    ecx,edx
c0026a5f:	72 27                	jb     c0026a88 <__umoddi3+0x10c>
c0026a61:	74 21                	je     c0026a84 <__umoddi3+0x108>
c0026a63:	89 ca                	mov    edx,ecx
c0026a65:	29 f3                	sub    ebx,esi
c0026a67:	19 fa                	sbb    edx,edi
c0026a69:	89 d0                	mov    eax,edx
c0026a6b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026a6f:	d3 e0                	shl    eax,cl
c0026a71:	89 e9                	mov    ecx,ebp
c0026a73:	d3 eb                	shr    ebx,cl
c0026a75:	09 d8                	or     eax,ebx
c0026a77:	d3 ea                	shr    edx,cl
c0026a79:	83 c4 1c             	add    esp,0x1c
c0026a7c:	5b                   	pop    ebx
c0026a7d:	5e                   	pop    esi
c0026a7e:	5f                   	pop    edi
c0026a7f:	5d                   	pop    ebp
c0026a80:	c3                   	ret    
c0026a81:	8d 76 00             	lea    esi,[esi+0x0]
c0026a84:	39 c3                	cmp    ebx,eax
c0026a86:	73 db                	jae    c0026a63 <__umoddi3+0xe7>
c0026a88:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026a8c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026a90:	89 d7                	mov    edi,edx
c0026a92:	89 c6                	mov    esi,eax
c0026a94:	eb cd                	jmp    c0026a63 <__umoddi3+0xe7>

c0026a96 <__addsf3>:
c0026a96:	55                   	push   ebp
c0026a97:	89 e5                	mov    ebp,esp
c0026a99:	57                   	push   edi
c0026a9a:	56                   	push   esi
c0026a9b:	53                   	push   ebx
c0026a9c:	83 ec 08             	sub    esp,0x8
c0026a9f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026aa2:	89 fa                	mov    edx,edi
c0026aa4:	89 f8                	mov    eax,edi
c0026aa6:	c1 f8 17             	sar    eax,0x17
c0026aa9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026aac:	c1 e2 08             	shl    edx,0x8
c0026aaf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026ab5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026ab8:	89 de                	mov    esi,ebx
c0026aba:	c1 fe 17             	sar    esi,0x17
c0026abd:	c1 e3 08             	shl    ebx,0x8
c0026ac0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026ac6:	31 f0                	xor    eax,esi
c0026ac8:	0f 88 3b 01 00 00    	js     c0026c09 <__addsf3+0x173>
c0026ace:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026ad1:	29 f1                	sub    ecx,esi
c0026ad3:	85 c9                	test   ecx,ecx
c0026ad5:	7e 54                	jle    c0026b2b <__addsf3+0x95>
c0026ad7:	89 f0                	mov    eax,esi
c0026ad9:	84 c0                	test   al,al
c0026adb:	75 10                	jne    c0026aed <__addsf3+0x57>
c0026add:	85 db                	test   ebx,ebx
c0026adf:	0f 84 aa 02 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026ae5:	49                   	dec    ecx
c0026ae6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026ae9:	74 38                	je     c0026b23 <__addsf3+0x8d>
c0026aeb:	eb 13                	jmp    c0026b00 <__addsf3+0x6a>
c0026aed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026af0:	f7 d0                	not    eax
c0026af2:	84 c0                	test   al,al
c0026af4:	0f 84 95 02 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026afa:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026b00:	83 f9 1f             	cmp    ecx,0x1f
c0026b03:	0f 8f 86 02 00 00    	jg     c0026d8f <__addsf3+0x2f9>
c0026b09:	89 de                	mov    esi,ebx
c0026b0b:	d3 ee                	shr    esi,cl
c0026b0d:	b8 20 00 00 00       	mov    eax,0x20
c0026b12:	29 c8                	sub    eax,ecx
c0026b14:	89 c1                	mov    ecx,eax
c0026b16:	d3 e3                	shl    ebx,cl
c0026b18:	31 c0                	xor    eax,eax
c0026b1a:	85 db                	test   ebx,ebx
c0026b1c:	0f 95 c0             	setne  al
c0026b1f:	09 f0                	or     eax,esi
c0026b21:	01 d0                	add    eax,edx
c0026b23:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b26:	e9 b6 00 00 00       	jmp    c0026be1 <__addsf3+0x14b>
c0026b2b:	74 5c                	je     c0026b89 <__addsf3+0xf3>
c0026b2d:	89 f1                	mov    ecx,esi
c0026b2f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026b32:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b35:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026b39:	75 14                	jne    c0026b4f <__addsf3+0xb9>
c0026b3b:	85 d2                	test   edx,edx
c0026b3d:	0f 84 4c 02 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026b43:	49                   	dec    ecx
c0026b44:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026b47:	0f 84 94 00 00 00    	je     c0026be1 <__addsf3+0x14b>
c0026b4d:	eb 12                	jmp    c0026b61 <__addsf3+0xcb>
c0026b4f:	89 f0                	mov    eax,esi
c0026b51:	f7 d0                	not    eax
c0026b53:	84 c0                	test   al,al
c0026b55:	0f 84 34 02 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026b5b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b61:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b64:	83 f9 1f             	cmp    ecx,0x1f
c0026b67:	0f 8f 22 02 00 00    	jg     c0026d8f <__addsf3+0x2f9>
c0026b6d:	89 d7                	mov    edi,edx
c0026b6f:	d3 ef                	shr    edi,cl
c0026b71:	b8 20 00 00 00       	mov    eax,0x20
c0026b76:	29 c8                	sub    eax,ecx
c0026b78:	89 c1                	mov    ecx,eax
c0026b7a:	d3 e2                	shl    edx,cl
c0026b7c:	31 c0                	xor    eax,eax
c0026b7e:	85 d2                	test   edx,edx
c0026b80:	0f 95 c0             	setne  al
c0026b83:	09 f8                	or     eax,edi
c0026b85:	01 d8                	add    eax,ebx
c0026b87:	eb 58                	jmp    c0026be1 <__addsf3+0x14b>
c0026b89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b8c:	8d 70 01             	lea    esi,[eax+0x1]
c0026b8f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026b95:	75 32                	jne    c0026bc9 <__addsf3+0x133>
c0026b97:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026b9b:	75 1f                	jne    c0026bbc <__addsf3+0x126>
c0026b9d:	85 d2                	test   edx,edx
c0026b9f:	0f 84 e0 01 00 00    	je     c0026d85 <__addsf3+0x2ef>
c0026ba5:	85 db                	test   ebx,ebx
c0026ba7:	0f 84 e2 01 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026bad:	89 d0                	mov    eax,edx
c0026baf:	01 d8                	add    eax,ebx
c0026bb1:	0f 89 a9 01 00 00    	jns    c0026d60 <__addsf3+0x2ca>
c0026bb7:	e9 9d 01 00 00       	jmp    c0026d59 <__addsf3+0x2c3>
c0026bbc:	85 d2                	test   edx,edx
c0026bbe:	0f 85 cb 01 00 00    	jne    c0026d8f <__addsf3+0x2f9>
c0026bc4:	e9 bc 01 00 00       	jmp    c0026d85 <__addsf3+0x2ef>
c0026bc9:	31 c0                	xor    eax,eax
c0026bcb:	89 f1                	mov    ecx,esi
c0026bcd:	f7 d1                	not    ecx
c0026bcf:	84 c9                	test   cl,cl
c0026bd1:	0f 84 90 01 00 00    	je     c0026d67 <__addsf3+0x2d1>
c0026bd7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026bda:	d1 e8                	shr    eax,1
c0026bdc:	e9 86 01 00 00       	jmp    c0026d67 <__addsf3+0x2d1>
c0026be1:	85 c0                	test   eax,eax
c0026be3:	0f 89 7e 01 00 00    	jns    c0026d67 <__addsf3+0x2d1>
c0026be9:	46                   	inc    esi
c0026bea:	89 f2                	mov    edx,esi
c0026bec:	f7 d2                	not    edx
c0026bee:	84 d2                	test   dl,dl
c0026bf0:	0f 84 6f 01 00 00    	je     c0026d65 <__addsf3+0x2cf>
c0026bf6:	89 c2                	mov    edx,eax
c0026bf8:	83 e2 01             	and    edx,0x1
c0026bfb:	d1 e8                	shr    eax,1
c0026bfd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026c02:	09 d0                	or     eax,edx
c0026c04:	e9 5e 01 00 00       	jmp    c0026d67 <__addsf3+0x2d1>
c0026c09:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026c0d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026c10:	89 f0                	mov    eax,esi
c0026c12:	0f b6 c0             	movzx  eax,al
c0026c15:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026c18:	29 c1                	sub    ecx,eax
c0026c1a:	85 c9                	test   ecx,ecx
c0026c1c:	7e 55                	jle    c0026c73 <__addsf3+0x1dd>
c0026c1e:	85 c0                	test   eax,eax
c0026c20:	75 11                	jne    c0026c33 <__addsf3+0x19d>
c0026c22:	85 db                	test   ebx,ebx
c0026c24:	0f 84 65 01 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026c2a:	49                   	dec    ecx
c0026c2b:	75 19                	jne    c0026c46 <__addsf3+0x1b0>
c0026c2d:	89 d0                	mov    eax,edx
c0026c2f:	29 d8                	sub    eax,ebx
c0026c31:	eb 38                	jmp    c0026c6b <__addsf3+0x1d5>
c0026c33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c36:	f7 d0                	not    eax
c0026c38:	84 c0                	test   al,al
c0026c3a:	0f 84 4f 01 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026c40:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c46:	83 f9 1f             	cmp    ecx,0x1f
c0026c49:	0f 8f 40 01 00 00    	jg     c0026d8f <__addsf3+0x2f9>
c0026c4f:	89 de                	mov    esi,ebx
c0026c51:	d3 ee                	shr    esi,cl
c0026c53:	b8 20 00 00 00       	mov    eax,0x20
c0026c58:	29 c8                	sub    eax,ecx
c0026c5a:	89 c1                	mov    ecx,eax
c0026c5c:	d3 e3                	shl    ebx,cl
c0026c5e:	31 c0                	xor    eax,eax
c0026c60:	85 db                	test   ebx,ebx
c0026c62:	0f 95 c0             	setne  al
c0026c65:	09 f0                	or     eax,esi
c0026c67:	29 c2                	sub    edx,eax
c0026c69:	89 d0                	mov    eax,edx
c0026c6b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c6e:	e9 af 00 00 00       	jmp    c0026d22 <__addsf3+0x28c>
c0026c73:	74 5c                	je     c0026cd1 <__addsf3+0x23b>
c0026c75:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026c78:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c7b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026c7f:	75 14                	jne    c0026c95 <__addsf3+0x1ff>
c0026c81:	85 d2                	test   edx,edx
c0026c83:	0f 84 06 01 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026c89:	48                   	dec    eax
c0026c8a:	75 1b                	jne    c0026ca7 <__addsf3+0x211>
c0026c8c:	89 d8                	mov    eax,ebx
c0026c8e:	29 d0                	sub    eax,edx
c0026c90:	e9 8d 00 00 00       	jmp    c0026d22 <__addsf3+0x28c>
c0026c95:	89 f1                	mov    ecx,esi
c0026c97:	f7 d1                	not    ecx
c0026c99:	84 c9                	test   cl,cl
c0026c9b:	0f 84 ee 00 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026ca1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ca7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026caa:	83 f8 1f             	cmp    eax,0x1f
c0026cad:	0f 8f dc 00 00 00    	jg     c0026d8f <__addsf3+0x2f9>
c0026cb3:	89 d7                	mov    edi,edx
c0026cb5:	88 c1                	mov    cl,al
c0026cb7:	d3 ef                	shr    edi,cl
c0026cb9:	b9 20 00 00 00       	mov    ecx,0x20
c0026cbe:	29 c1                	sub    ecx,eax
c0026cc0:	d3 e2                	shl    edx,cl
c0026cc2:	31 c0                	xor    eax,eax
c0026cc4:	85 d2                	test   edx,edx
c0026cc6:	0f 95 c0             	setne  al
c0026cc9:	09 f8                	or     eax,edi
c0026ccb:	29 c3                	sub    ebx,eax
c0026ccd:	89 d8                	mov    eax,ebx
c0026ccf:	eb 51                	jmp    c0026d22 <__addsf3+0x28c>
c0026cd1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cd4:	40                   	inc    eax
c0026cd5:	a8 fe                	test   al,0xfe
c0026cd7:	75 3d                	jne    c0026d16 <__addsf3+0x280>
c0026cd9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026cdd:	0f 85 a7 00 00 00    	jne    c0026d8a <__addsf3+0x2f4>
c0026ce3:	85 d2                	test   edx,edx
c0026ce5:	75 12                	jne    c0026cf9 <__addsf3+0x263>
c0026ce7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cea:	85 db                	test   ebx,ebx
c0026cec:	0f 85 9d 00 00 00    	jne    c0026d8f <__addsf3+0x2f9>
c0026cf2:	31 ff                	xor    edi,edi
c0026cf4:	e9 96 00 00 00       	jmp    c0026d8f <__addsf3+0x2f9>
c0026cf9:	85 db                	test   ebx,ebx
c0026cfb:	0f 84 8e 00 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026d01:	89 d0                	mov    eax,edx
c0026d03:	29 d8                	sub    eax,ebx
c0026d05:	79 06                	jns    c0026d0d <__addsf3+0x277>
c0026d07:	89 d8                	mov    eax,ebx
c0026d09:	29 d0                	sub    eax,edx
c0026d0b:	eb 5a                	jmp    c0026d67 <__addsf3+0x2d1>
c0026d0d:	bf 00 00 00 00       	mov    edi,0x0
c0026d12:	74 7b                	je     c0026d8f <__addsf3+0x2f9>
c0026d14:	eb 4a                	jmp    c0026d60 <__addsf3+0x2ca>
c0026d16:	89 d0                	mov    eax,edx
c0026d18:	29 d8                	sub    eax,ebx
c0026d1a:	79 12                	jns    c0026d2e <__addsf3+0x298>
c0026d1c:	89 d8                	mov    eax,ebx
c0026d1e:	29 d0                	sub    eax,edx
c0026d20:	eb 09                	jmp    c0026d2b <__addsf3+0x295>
c0026d22:	85 c0                	test   eax,eax
c0026d24:	79 41                	jns    c0026d67 <__addsf3+0x2d1>
c0026d26:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026d2b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026d2e:	31 f6                	xor    esi,esi
c0026d30:	85 c0                	test   eax,eax
c0026d32:	74 33                	je     c0026d67 <__addsf3+0x2d1>
c0026d34:	0f bd c8             	bsr    ecx,eax
c0026d37:	83 f1 1f             	xor    ecx,0x1f
c0026d3a:	d3 e0                	shl    eax,cl
c0026d3c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026d40:	39 ca                	cmp    edx,ecx
c0026d42:	7f 10                	jg     c0026d54 <__addsf3+0x2be>
c0026d44:	29 d1                	sub    ecx,edx
c0026d46:	41                   	inc    ecx
c0026d47:	d3 e8                	shr    eax,cl
c0026d49:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d4c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026d52:	eb 13                	jmp    c0026d67 <__addsf3+0x2d1>
c0026d54:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d57:	29 ce                	sub    esi,ecx
c0026d59:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026d5e:	eb 07                	jmp    c0026d67 <__addsf3+0x2d1>
c0026d60:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d63:	eb 02                	jmp    c0026d67 <__addsf3+0x2d1>
c0026d65:	31 c0                	xor    eax,eax
c0026d67:	89 c2                	mov    edx,eax
c0026d69:	c1 ea 08             	shr    edx,0x8
c0026d6c:	a8 7f                	test   al,0x7f
c0026d6e:	0f 95 c1             	setne  cl
c0026d71:	09 d1                	or     ecx,edx
c0026d73:	83 e1 01             	and    ecx,0x1
c0026d76:	c1 e8 07             	shr    eax,0x7
c0026d79:	21 c8                	and    eax,ecx
c0026d7b:	c1 e6 17             	shl    esi,0x17
c0026d7e:	09 d6                	or     esi,edx
c0026d80:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026d83:	eb 0a                	jmp    c0026d8f <__addsf3+0x2f9>
c0026d85:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d88:	eb 05                	jmp    c0026d8f <__addsf3+0x2f9>
c0026d8a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026d8f:	89 f8                	mov    eax,edi
c0026d91:	5a                   	pop    edx
c0026d92:	59                   	pop    ecx
c0026d93:	5b                   	pop    ebx
c0026d94:	5e                   	pop    esi
c0026d95:	5f                   	pop    edi
c0026d96:	5d                   	pop    ebp
c0026d97:	c3                   	ret    

c0026d98 <__subsf3>:
c0026d98:	55                   	push   ebp
c0026d99:	89 e5                	mov    ebp,esp
c0026d9b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d9e:	05 00 00 00 80       	add    eax,0x80000000
c0026da3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026da6:	5d                   	pop    ebp
c0026da7:	e9 ea fc ff ff       	jmp    c0026a96 <__addsf3>

c0026dac <__negsf2>:
c0026dac:	55                   	push   ebp
c0026dad:	89 e5                	mov    ebp,esp
c0026daf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026db2:	05 00 00 00 80       	add    eax,0x80000000
c0026db7:	5d                   	pop    ebp
c0026db8:	c3                   	ret    

c0026db9 <__mulsf3>:
c0026db9:	55                   	push   ebp
c0026dba:	89 e5                	mov    ebp,esp
c0026dbc:	57                   	push   edi
c0026dbd:	56                   	push   esi
c0026dbe:	53                   	push   ebx
c0026dbf:	83 ec 1c             	sub    esp,0x1c
c0026dc2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026dc5:	89 f0                	mov    eax,esi
c0026dc7:	89 f1                	mov    ecx,esi
c0026dc9:	c1 f9 17             	sar    ecx,0x17
c0026dcc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026dcf:	c1 e0 08             	shl    eax,0x8
c0026dd2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026dd7:	89 c1                	mov    ecx,eax
c0026dd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ddc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026ddf:	89 c7                	mov    edi,eax
c0026de1:	c1 ff 17             	sar    edi,0x17
c0026de4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026de8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026deb:	89 f8                	mov    eax,edi
c0026ded:	0f b6 c0             	movzx  eax,al
c0026df0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026df3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026df7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026dfa:	42                   	inc    edx
c0026dfb:	80 e2 fe             	and    dl,0xfe
c0026dfe:	75 7b                	jne    c0026e7b <__mulsf3+0xc2>
c0026e00:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e04:	74 54                	je     c0026e5a <__mulsf3+0xa1>
c0026e06:	85 c9                	test   ecx,ecx
c0026e08:	0f 85 64 01 00 00    	jne    c0026f72 <__mulsf3+0x1b9>
c0026e0e:	8d 57 01             	lea    edx,[edi+0x1]
c0026e11:	80 e2 fe             	and    dl,0xfe
c0026e14:	75 1f                	jne    c0026e35 <__mulsf3+0x7c>
c0026e16:	85 c0                	test   eax,eax
c0026e18:	b8 00 00 00 00       	mov    eax,0x0
c0026e1d:	74 29                	je     c0026e48 <__mulsf3+0x8f>
c0026e1f:	53                   	push   ebx
c0026e20:	53                   	push   ebx
c0026e21:	50                   	push   eax
c0026e22:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e25:	e8 96 05 00 00       	call   c00273c0 <__nesf2>
c0026e2a:	83 c4 10             	add    esp,0x10
c0026e2d:	85 c0                	test   eax,eax
c0026e2f:	0f 85 3a 01 00 00    	jne    c0026f6f <__mulsf3+0x1b6>
c0026e35:	85 ff                	test   edi,edi
c0026e37:	0f 89 35 01 00 00    	jns    c0026f72 <__mulsf3+0x1b9>
c0026e3d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026e43:	e9 2a 01 00 00       	jmp    c0026f72 <__mulsf3+0x1b9>
c0026e48:	51                   	push   ecx
c0026e49:	51                   	push   ecx
c0026e4a:	50                   	push   eax
c0026e4b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e4e:	e8 6d 05 00 00       	call   c00273c0 <__nesf2>
c0026e53:	83 c4 10             	add    esp,0x10
c0026e56:	85 c0                	test   eax,eax
c0026e58:	eb 15                	jmp    c0026e6f <__mulsf3+0xb6>
c0026e5a:	85 c9                	test   ecx,ecx
c0026e5c:	74 0b                	je     c0026e69 <__mulsf3+0xb0>
c0026e5e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026e61:	01 c9                	add    ecx,ecx
c0026e63:	78 16                	js     c0026e7b <__mulsf3+0xc2>
c0026e65:	89 d3                	mov    ebx,edx
c0026e67:	eb f5                	jmp    c0026e5e <__mulsf3+0xa5>
c0026e69:	89 f8                	mov    eax,edi
c0026e6b:	f7 d0                	not    eax
c0026e6d:	84 c0                	test   al,al
c0026e6f:	75 c4                	jne    c0026e35 <__mulsf3+0x7c>
c0026e71:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026e76:	e9 f7 00 00 00       	jmp    c0026f72 <__mulsf3+0x1b9>
c0026e7b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026e7e:	c1 e6 08             	shl    esi,0x8
c0026e81:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026e87:	8d 57 01             	lea    edx,[edi+0x1]
c0026e8a:	80 e2 fe             	and    dl,0xfe
c0026e8d:	75 63                	jne    c0026ef2 <__mulsf3+0x139>
c0026e8f:	85 c0                	test   eax,eax
c0026e91:	74 2f                	je     c0026ec2 <__mulsf3+0x109>
c0026e93:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026e97:	0f 89 d2 00 00 00    	jns    c0026f6f <__mulsf3+0x1b6>
c0026e9d:	52                   	push   edx
c0026e9e:	52                   	push   edx
c0026e9f:	6a 00                	push   0x0
c0026ea1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ea4:	e8 dc 04 00 00       	call   c0027385 <__eqsf2>
c0026ea9:	83 c4 10             	add    esp,0x10
c0026eac:	85 c0                	test   eax,eax
c0026eae:	0f 85 bb 00 00 00    	jne    c0026f6f <__mulsf3+0x1b6>
c0026eb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026eb7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026ebd:	e9 b0 00 00 00       	jmp    c0026f72 <__mulsf3+0x1b9>
c0026ec2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026ec5:	50                   	push   eax
c0026ec6:	50                   	push   eax
c0026ec7:	6a 00                	push   0x0
c0026ec9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ecc:	e8 b4 04 00 00       	call   c0027385 <__eqsf2>
c0026ed1:	83 c4 10             	add    esp,0x10
c0026ed4:	85 c0                	test   eax,eax
c0026ed6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026ed9:	75 0c                	jne    c0026ee7 <__mulsf3+0x12e>
c0026edb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026edf:	0f 89 8a 00 00 00    	jns    c0026f6f <__mulsf3+0x1b6>
c0026ee5:	eb cd                	jmp    c0026eb4 <__mulsf3+0xfb>
c0026ee7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026eea:	01 f6                	add    esi,esi
c0026eec:	78 04                	js     c0026ef2 <__mulsf3+0x139>
c0026eee:	89 c3                	mov    ebx,eax
c0026ef0:	eb f5                	jmp    c0026ee7 <__mulsf3+0x12e>
c0026ef2:	89 c8                	mov    eax,ecx
c0026ef4:	0d 00 00 00 80       	or     eax,0x80000000
c0026ef9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026eff:	f7 e6                	mul    esi
c0026f01:	85 c0                	test   eax,eax
c0026f03:	0f 95 c0             	setne  al
c0026f06:	0f b6 c0             	movzx  eax,al
c0026f09:	09 c2                	or     edx,eax
c0026f0b:	78 03                	js     c0026f10 <__mulsf3+0x157>
c0026f0d:	01 d2                	add    edx,edx
c0026f0f:	4b                   	dec    ebx
c0026f10:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026f16:	7f 22                	jg     c0026f3a <__mulsf3+0x181>
c0026f18:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026f1e:	85 db                	test   ebx,ebx
c0026f20:	7f 23                	jg     c0026f45 <__mulsf3+0x18c>
c0026f22:	83 fb e9             	cmp    ebx,0xffffffe9
c0026f25:	7c 1a                	jl     c0026f41 <__mulsf3+0x188>
c0026f27:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f2d:	b9 01 00 00 00       	mov    ecx,0x1
c0026f32:	29 d9                	sub    ecx,ebx
c0026f34:	d3 ea                	shr    edx,cl
c0026f36:	31 db                	xor    ebx,ebx
c0026f38:	eb 0b                	jmp    c0026f45 <__mulsf3+0x18c>
c0026f3a:	bb ff 00 00 00       	mov    ebx,0xff
c0026f3f:	eb 02                	jmp    c0026f43 <__mulsf3+0x18a>
c0026f41:	31 db                	xor    ebx,ebx
c0026f43:	31 d2                	xor    edx,edx
c0026f45:	89 d0                	mov    eax,edx
c0026f47:	c1 e8 08             	shr    eax,0x8
c0026f4a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026f4d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026f53:	09 fb                	or     ebx,edi
c0026f55:	c1 e3 17             	shl    ebx,0x17
c0026f58:	09 c3                	or     ebx,eax
c0026f5a:	f6 c2 7f             	test   dl,0x7f
c0026f5d:	0f 95 c1             	setne  cl
c0026f60:	09 c8                	or     eax,ecx
c0026f62:	83 e0 01             	and    eax,0x1
c0026f65:	c1 ea 07             	shr    edx,0x7
c0026f68:	21 c2                	and    edx,eax
c0026f6a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026f6d:	eb 03                	jmp    c0026f72 <__mulsf3+0x1b9>
c0026f6f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026f72:	89 f0                	mov    eax,esi
c0026f74:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026f77:	5b                   	pop    ebx
c0026f78:	5e                   	pop    esi
c0026f79:	5f                   	pop    edi
c0026f7a:	5d                   	pop    ebp
c0026f7b:	c3                   	ret    

c0026f7c <__divsf3>:
c0026f7c:	55                   	push   ebp
c0026f7d:	89 e5                	mov    ebp,esp
c0026f7f:	57                   	push   edi
c0026f80:	56                   	push   esi
c0026f81:	53                   	push   ebx
c0026f82:	83 ec 1c             	sub    esp,0x1c
c0026f85:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026f88:	89 d8                	mov    eax,ebx
c0026f8a:	89 d9                	mov    ecx,ebx
c0026f8c:	c1 f9 17             	sar    ecx,0x17
c0026f8f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f92:	c1 e0 08             	shl    eax,0x8
c0026f95:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f9a:	89 c1                	mov    ecx,eax
c0026f9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f9f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026fa2:	89 c7                	mov    edi,eax
c0026fa4:	c1 ff 17             	sar    edi,0x17
c0026fa7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026fab:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026fae:	89 f8                	mov    eax,edi
c0026fb0:	0f b6 c0             	movzx  eax,al
c0026fb3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026fb6:	29 c6                	sub    esi,eax
c0026fb8:	83 c6 7f             	add    esi,0x7f
c0026fbb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026fbe:	42                   	inc    edx
c0026fbf:	80 e2 fe             	and    dl,0xfe
c0026fc2:	0f 85 9c 00 00 00    	jne    c0027064 <__divsf3+0xe8>
c0026fc8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026fcc:	74 33                	je     c0027001 <__divsf3+0x85>
c0026fce:	85 c9                	test   ecx,ecx
c0026fd0:	0f 85 c7 01 00 00    	jne    c002719d <__divsf3+0x221>
c0026fd6:	8d 57 01             	lea    edx,[edi+0x1]
c0026fd9:	80 e2 fe             	and    dl,0xfe
c0026fdc:	75 2f                	jne    c002700d <__divsf3+0x91>
c0026fde:	85 c0                	test   eax,eax
c0026fe0:	74 2b                	je     c002700d <__divsf3+0x91>
c0026fe2:	51                   	push   ecx
c0026fe3:	51                   	push   ecx
c0026fe4:	6a 00                	push   0x0
c0026fe6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fe9:	e8 d2 03 00 00       	call   c00273c0 <__nesf2>
c0026fee:	83 c4 10             	add    esp,0x10
c0026ff1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026ff4:	85 c0                	test   eax,eax
c0026ff6:	0f 85 a1 01 00 00    	jne    c002719d <__divsf3+0x221>
c0026ffc:	e9 92 01 00 00       	jmp    c0027193 <__divsf3+0x217>
c0027001:	85 c9                	test   ecx,ecx
c0027003:	75 1b                	jne    c0027020 <__divsf3+0xa4>
c0027005:	8d 57 01             	lea    edx,[edi+0x1]
c0027008:	80 e2 fe             	and    dl,0xfe
c002700b:	74 1e                	je     c002702b <__divsf3+0xaf>
c002700d:	85 ff                	test   edi,edi
c002700f:	0f 89 88 01 00 00    	jns    c002719d <__divsf3+0x221>
c0027015:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002701b:	e9 7d 01 00 00       	jmp    c002719d <__divsf3+0x221>
c0027020:	8d 56 ff             	lea    edx,[esi-0x1]
c0027023:	01 c9                	add    ecx,ecx
c0027025:	78 3d                	js     c0027064 <__divsf3+0xe8>
c0027027:	89 d6                	mov    esi,edx
c0027029:	eb f5                	jmp    c0027020 <__divsf3+0xa4>
c002702b:	85 c0                	test   eax,eax
c002702d:	b8 00 00 00 00       	mov    eax,0x0
c0027032:	74 18                	je     c002704c <__divsf3+0xd0>
c0027034:	52                   	push   edx
c0027035:	52                   	push   edx
c0027036:	50                   	push   eax
c0027037:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002703a:	e8 81 03 00 00       	call   c00273c0 <__nesf2>
c002703f:	83 c4 10             	add    esp,0x10
c0027042:	85 c0                	test   eax,eax
c0027044:	0f 85 50 01 00 00    	jne    c002719a <__divsf3+0x21e>
c002704a:	eb c1                	jmp    c002700d <__divsf3+0x91>
c002704c:	56                   	push   esi
c002704d:	56                   	push   esi
c002704e:	50                   	push   eax
c002704f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027052:	e8 69 03 00 00       	call   c00273c0 <__nesf2>
c0027057:	83 c4 10             	add    esp,0x10
c002705a:	85 c0                	test   eax,eax
c002705c:	0f 84 31 01 00 00    	je     c0027193 <__divsf3+0x217>
c0027062:	eb a9                	jmp    c002700d <__divsf3+0x91>
c0027064:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027067:	c1 e3 08             	shl    ebx,0x8
c002706a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027070:	8d 57 01             	lea    edx,[edi+0x1]
c0027073:	80 e2 fe             	and    dl,0xfe
c0027076:	75 71                	jne    c00270e9 <__divsf3+0x16d>
c0027078:	85 c0                	test   eax,eax
c002707a:	ba 00 00 00 00       	mov    edx,0x0
c002707f:	74 2f                	je     c00270b0 <__divsf3+0x134>
c0027081:	51                   	push   ecx
c0027082:	51                   	push   ecx
c0027083:	52                   	push   edx
c0027084:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027087:	e8 f9 02 00 00       	call   c0027385 <__eqsf2>
c002708c:	83 c4 10             	add    esp,0x10
c002708f:	85 c0                	test   eax,eax
c0027091:	0f 85 03 01 00 00    	jne    c002719a <__divsf3+0x21e>
c0027097:	31 d2                	xor    edx,edx
c0027099:	89 d3                	mov    ebx,edx
c002709b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002709e:	31 f8                	xor    eax,edi
c00270a0:	0f 89 f7 00 00 00    	jns    c002719d <__divsf3+0x221>
c00270a6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00270ab:	e9 ed 00 00 00       	jmp    c002719d <__divsf3+0x221>
c00270b0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00270b3:	50                   	push   eax
c00270b4:	50                   	push   eax
c00270b5:	52                   	push   edx
c00270b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270b9:	e8 c7 02 00 00       	call   c0027385 <__eqsf2>
c00270be:	83 c4 10             	add    esp,0x10
c00270c1:	85 c0                	test   eax,eax
c00270c3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00270c6:	75 16                	jne    c00270de <__divsf3+0x162>
c00270c8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00270cb:	31 fb                	xor    ebx,edi
c00270cd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00270d3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00270d9:	e9 bf 00 00 00       	jmp    c002719d <__divsf3+0x221>
c00270de:	8d 46 01             	lea    eax,[esi+0x1]
c00270e1:	01 db                	add    ebx,ebx
c00270e3:	78 04                	js     c00270e9 <__divsf3+0x16d>
c00270e5:	89 c6                	mov    esi,eax
c00270e7:	eb f5                	jmp    c00270de <__divsf3+0x162>
c00270e9:	89 c8                	mov    eax,ecx
c00270eb:	0d 00 00 00 80       	or     eax,0x80000000
c00270f0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00270f6:	31 d2                	xor    edx,edx
c00270f8:	39 d8                	cmp    eax,ebx
c00270fa:	72 07                	jb     c0027103 <__divsf3+0x187>
c00270fc:	29 d8                	sub    eax,ebx
c00270fe:	ba 01 00 00 00       	mov    edx,0x1
c0027103:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002710a:	01 d2                	add    edx,edx
c002710c:	89 c1                	mov    ecx,eax
c002710e:	01 c0                	add    eax,eax
c0027110:	85 c9                	test   ecx,ecx
c0027112:	78 04                	js     c0027118 <__divsf3+0x19c>
c0027114:	39 c3                	cmp    ebx,eax
c0027116:	77 05                	ja     c002711d <__divsf3+0x1a1>
c0027118:	29 d8                	sub    eax,ebx
c002711a:	83 ca 01             	or     edx,0x1
c002711d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027120:	75 e8                	jne    c002710a <__divsf3+0x18e>
c0027122:	85 c0                	test   eax,eax
c0027124:	0f 95 c0             	setne  al
c0027127:	0f b6 c0             	movzx  eax,al
c002712a:	c1 e2 06             	shl    edx,0x6
c002712d:	09 c2                	or     edx,eax
c002712f:	78 03                	js     c0027134 <__divsf3+0x1b8>
c0027131:	01 d2                	add    edx,edx
c0027133:	4e                   	dec    esi
c0027134:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002713a:	7f 22                	jg     c002715e <__divsf3+0x1e2>
c002713c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027142:	85 f6                	test   esi,esi
c0027144:	7f 23                	jg     c0027169 <__divsf3+0x1ed>
c0027146:	83 fe e9             	cmp    esi,0xffffffe9
c0027149:	7c 1a                	jl     c0027165 <__divsf3+0x1e9>
c002714b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027151:	b9 01 00 00 00       	mov    ecx,0x1
c0027156:	29 f1                	sub    ecx,esi
c0027158:	d3 ea                	shr    edx,cl
c002715a:	31 f6                	xor    esi,esi
c002715c:	eb 0b                	jmp    c0027169 <__divsf3+0x1ed>
c002715e:	be ff 00 00 00       	mov    esi,0xff
c0027163:	eb 02                	jmp    c0027167 <__divsf3+0x1eb>
c0027165:	31 f6                	xor    esi,esi
c0027167:	31 d2                	xor    edx,edx
c0027169:	89 d0                	mov    eax,edx
c002716b:	c1 e8 08             	shr    eax,0x8
c002716e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027171:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027177:	09 fe                	or     esi,edi
c0027179:	c1 e6 17             	shl    esi,0x17
c002717c:	09 c6                	or     esi,eax
c002717e:	f6 c2 7f             	test   dl,0x7f
c0027181:	0f 95 c1             	setne  cl
c0027184:	09 c8                	or     eax,ecx
c0027186:	83 e0 01             	and    eax,0x1
c0027189:	c1 ea 07             	shr    edx,0x7
c002718c:	21 c2                	and    edx,eax
c002718e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027191:	eb 0a                	jmp    c002719d <__divsf3+0x221>
c0027193:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027198:	eb 03                	jmp    c002719d <__divsf3+0x221>
c002719a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002719d:	89 d8                	mov    eax,ebx
c002719f:	8d 65 f4             	lea    esp,[ebp-0xc]
c00271a2:	5b                   	pop    ebx
c00271a3:	5e                   	pop    esi
c00271a4:	5f                   	pop    edi
c00271a5:	5d                   	pop    ebp
c00271a6:	c3                   	ret    

c00271a7 <__floatsisf>:
c00271a7:	55                   	push   ebp
c00271a8:	89 e5                	mov    ebp,esp
c00271aa:	53                   	push   ebx
c00271ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00271ae:	85 d2                	test   edx,edx
c00271b0:	7e 2b                	jle    c00271dd <__floatsisf+0x36>
c00271b2:	0f bd ca             	bsr    ecx,edx
c00271b5:	83 f1 1f             	xor    ecx,0x1f
c00271b8:	d3 e2                	shl    edx,cl
c00271ba:	89 d0                	mov    eax,edx
c00271bc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00271c1:	89 c3                	mov    ebx,eax
c00271c3:	c1 eb 08             	shr    ebx,0x8
c00271c6:	80 e2 7f             	and    dl,0x7f
c00271c9:	0f 95 c2             	setne  dl
c00271cc:	09 da                	or     edx,ebx
c00271ce:	83 e2 01             	and    edx,0x1
c00271d1:	c1 e8 07             	shr    eax,0x7
c00271d4:	21 c2                	and    edx,eax
c00271d6:	b8 9e 00 00 00       	mov    eax,0x9e
c00271db:	eb 32                	jmp    c002720f <__floatsisf+0x68>
c00271dd:	b8 00 00 00 00       	mov    eax,0x0
c00271e2:	74 34                	je     c0027218 <__floatsisf+0x71>
c00271e4:	f7 da                	neg    edx
c00271e6:	0f bd ca             	bsr    ecx,edx
c00271e9:	83 f1 1f             	xor    ecx,0x1f
c00271ec:	d3 e2                	shl    edx,cl
c00271ee:	89 d0                	mov    eax,edx
c00271f0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00271f5:	89 c3                	mov    ebx,eax
c00271f7:	c1 eb 08             	shr    ebx,0x8
c00271fa:	80 e2 7f             	and    dl,0x7f
c00271fd:	0f 95 c2             	setne  dl
c0027200:	09 da                	or     edx,ebx
c0027202:	83 e2 01             	and    edx,0x1
c0027205:	c1 e8 07             	shr    eax,0x7
c0027208:	21 c2                	and    edx,eax
c002720a:	b8 9e 01 00 00       	mov    eax,0x19e
c002720f:	29 c8                	sub    eax,ecx
c0027211:	c1 e0 17             	shl    eax,0x17
c0027214:	09 d8                	or     eax,ebx
c0027216:	01 d0                	add    eax,edx
c0027218:	5b                   	pop    ebx
c0027219:	5d                   	pop    ebp
c002721a:	c3                   	ret    

c002721b <__floatunsisf>:
c002721b:	55                   	push   ebp
c002721c:	89 e5                	mov    ebp,esp
c002721e:	53                   	push   ebx
c002721f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027222:	31 c0                	xor    eax,eax
c0027224:	85 d2                	test   edx,edx
c0027226:	74 32                	je     c002725a <__floatunsisf+0x3f>
c0027228:	0f bd ca             	bsr    ecx,edx
c002722b:	83 f1 1f             	xor    ecx,0x1f
c002722e:	d3 e2                	shl    edx,cl
c0027230:	89 d0                	mov    eax,edx
c0027232:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027237:	89 c3                	mov    ebx,eax
c0027239:	c1 eb 08             	shr    ebx,0x8
c002723c:	80 e2 7f             	and    dl,0x7f
c002723f:	0f 95 c2             	setne  dl
c0027242:	09 da                	or     edx,ebx
c0027244:	83 e2 01             	and    edx,0x1
c0027247:	c1 e8 07             	shr    eax,0x7
c002724a:	21 c2                	and    edx,eax
c002724c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027251:	29 c8                	sub    eax,ecx
c0027253:	c1 e0 17             	shl    eax,0x17
c0027256:	09 d8                	or     eax,ebx
c0027258:	01 d0                	add    eax,edx
c002725a:	5b                   	pop    ebx
c002725b:	5d                   	pop    ebp
c002725c:	c3                   	ret    

c002725d <__fixsfsi>:
c002725d:	55                   	push   ebp
c002725e:	89 e5                	mov    ebp,esp
c0027260:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027263:	89 d1                	mov    ecx,edx
c0027265:	c1 e1 08             	shl    ecx,0x8
c0027268:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002726e:	c1 fa 17             	sar    edx,0x17
c0027271:	78 1c                	js     c002728f <__fixsfsi+0x32>
c0027273:	83 ea 7f             	sub    edx,0x7f
c0027276:	31 c0                	xor    eax,eax
c0027278:	83 fa 1e             	cmp    edx,0x1e
c002727b:	77 40                	ja     c00272bd <__fixsfsi+0x60>
c002727d:	89 c8                	mov    eax,ecx
c002727f:	0d 00 00 00 80       	or     eax,0x80000000
c0027284:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027289:	29 d1                	sub    ecx,edx
c002728b:	d3 e8                	shr    eax,cl
c002728d:	eb 2e                	jmp    c00272bd <__fixsfsi+0x60>
c002728f:	31 c0                	xor    eax,eax
c0027291:	81 c2 81 00 00 00    	add    edx,0x81
c0027297:	78 24                	js     c00272bd <__fixsfsi+0x60>
c0027299:	83 fa 1e             	cmp    edx,0x1e
c002729c:	7e 09                	jle    c00272a7 <__fixsfsi+0x4a>
c002729e:	83 fa 1f             	cmp    edx,0x1f
c00272a1:	75 18                	jne    c00272bb <__fixsfsi+0x5e>
c00272a3:	85 c9                	test   ecx,ecx
c00272a5:	75 14                	jne    c00272bb <__fixsfsi+0x5e>
c00272a7:	89 c8                	mov    eax,ecx
c00272a9:	0d 00 00 00 80       	or     eax,0x80000000
c00272ae:	b9 1f 00 00 00       	mov    ecx,0x1f
c00272b3:	29 d1                	sub    ecx,edx
c00272b5:	d3 e8                	shr    eax,cl
c00272b7:	f7 d8                	neg    eax
c00272b9:	eb 02                	jmp    c00272bd <__fixsfsi+0x60>
c00272bb:	31 c0                	xor    eax,eax
c00272bd:	5d                   	pop    ebp
c00272be:	c3                   	ret    

c00272bf <__fixunssfsi>:
c00272bf:	55                   	push   ebp
c00272c0:	89 e5                	mov    ebp,esp
c00272c2:	53                   	push   ebx
c00272c3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272c6:	89 d3                	mov    ebx,edx
c00272c8:	c1 fb 17             	sar    ebx,0x17
c00272cb:	83 eb 7f             	sub    ebx,0x7f
c00272ce:	31 c0                	xor    eax,eax
c00272d0:	83 fb 1f             	cmp    ebx,0x1f
c00272d3:	77 18                	ja     c00272ed <__fixunssfsi+0x2e>
c00272d5:	89 d0                	mov    eax,edx
c00272d7:	c1 e0 08             	shl    eax,0x8
c00272da:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00272df:	0d 00 00 00 80       	or     eax,0x80000000
c00272e4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00272e9:	29 d9                	sub    ecx,ebx
c00272eb:	d3 e8                	shr    eax,cl
c00272ed:	5b                   	pop    ebx
c00272ee:	5d                   	pop    ebp
c00272ef:	c3                   	ret    

c00272f0 <__cmpsf2>:
c00272f0:	55                   	push   ebp
c00272f1:	89 e5                	mov    ebp,esp
c00272f3:	57                   	push   edi
c00272f4:	56                   	push   esi
c00272f5:	53                   	push   ebx
c00272f6:	83 ec 24             	sub    esp,0x24
c00272f9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00272ff:	e8 4f 10 00 00       	call   c0028353 <__truncdfsf2>
c0027304:	5a                   	pop    edx
c0027305:	59                   	pop    ecx
c0027306:	89 c3                	mov    ebx,eax
c0027308:	c1 e8 17             	shr    eax,0x17
c002730b:	0f b6 f0             	movzx  esi,al
c002730e:	89 d8                	mov    eax,ebx
c0027310:	c1 e8 1f             	shr    eax,0x1f
c0027313:	31 c6                	xor    esi,eax
c0027315:	c1 e3 08             	shl    ebx,0x8
c0027318:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002731b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002731e:	e8 30 10 00 00       	call   c0028353 <__truncdfsf2>
c0027323:	83 c4 10             	add    esp,0x10
c0027326:	89 c1                	mov    ecx,eax
c0027328:	c1 e9 17             	shr    ecx,0x17
c002732b:	0f b6 c9             	movzx  ecx,cl
c002732e:	89 c7                	mov    edi,eax
c0027330:	c1 ef 1f             	shr    edi,0x1f
c0027333:	89 ca                	mov    edx,ecx
c0027335:	31 fa                	xor    edx,edi
c0027337:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002733a:	c1 e0 08             	shl    eax,0x8
c002733d:	89 c2                	mov    edx,eax
c002733f:	89 d8                	mov    eax,ebx
c0027341:	09 d0                	or     eax,edx
c0027343:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027348:	09 f0                	or     eax,esi
c002734a:	75 08                	jne    c0027354 <__cmpsf2+0x64>
c002734c:	31 c0                	xor    eax,eax
c002734e:	39 f9                	cmp    ecx,edi
c0027350:	75 0c                	jne    c002735e <__cmpsf2+0x6e>
c0027352:	eb 29                	jmp    c002737d <__cmpsf2+0x8d>
c0027354:	b8 01 00 00 00       	mov    eax,0x1
c0027359:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002735c:	7f 1f                	jg     c002737d <__cmpsf2+0x8d>
c002735e:	83 c8 ff             	or     eax,0xffffffff
c0027361:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027364:	7c 17                	jl     c002737d <__cmpsf2+0x8d>
c0027366:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002736c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027372:	b8 01 00 00 00       	mov    eax,0x1
c0027377:	39 d3                	cmp    ebx,edx
c0027379:	77 02                	ja     c002737d <__cmpsf2+0x8d>
c002737b:	19 c0                	sbb    eax,eax
c002737d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027380:	5b                   	pop    ebx
c0027381:	5e                   	pop    esi
c0027382:	5f                   	pop    edi
c0027383:	5d                   	pop    ebp
c0027384:	c3                   	ret    

c0027385 <__eqsf2>:
c0027385:	55                   	push   ebp
c0027386:	89 e5                	mov    ebp,esp
c0027388:	83 ec 24             	sub    esp,0x24
c002738b:	6a 01                	push   0x1
c002738d:	83 ec 0c             	sub    esp,0xc
c0027390:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027393:	e8 df 10 00 00       	call   c0028477 <__extendsfdf2>
c0027398:	83 c4 10             	add    esp,0x10
c002739b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002739e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273a1:	52                   	push   edx
c00273a2:	50                   	push   eax
c00273a3:	50                   	push   eax
c00273a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273a7:	e8 cb 10 00 00       	call   c0028477 <__extendsfdf2>
c00273ac:	59                   	pop    ecx
c00273ad:	59                   	pop    ecx
c00273ae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273b1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273b4:	52                   	push   edx
c00273b5:	50                   	push   eax
c00273b6:	e8 35 ff ff ff       	call   c00272f0 <__cmpsf2>
c00273bb:	83 c4 20             	add    esp,0x20
c00273be:	c9                   	leave  
c00273bf:	c3                   	ret    

c00273c0 <__nesf2>:
c00273c0:	eb c3                	jmp    c0027385 <__eqsf2>

c00273c2 <__gtsf2>:
c00273c2:	55                   	push   ebp
c00273c3:	89 e5                	mov    ebp,esp
c00273c5:	83 ec 24             	sub    esp,0x24
c00273c8:	6a ff                	push   0xffffffff
c00273ca:	83 ec 0c             	sub    esp,0xc
c00273cd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273d0:	e8 a2 10 00 00       	call   c0028477 <__extendsfdf2>
c00273d5:	83 c4 10             	add    esp,0x10
c00273d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273db:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273de:	52                   	push   edx
c00273df:	50                   	push   eax
c00273e0:	50                   	push   eax
c00273e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273e4:	e8 8e 10 00 00       	call   c0028477 <__extendsfdf2>
c00273e9:	59                   	pop    ecx
c00273ea:	59                   	pop    ecx
c00273eb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273ee:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273f1:	52                   	push   edx
c00273f2:	50                   	push   eax
c00273f3:	e8 f8 fe ff ff       	call   c00272f0 <__cmpsf2>
c00273f8:	83 c4 20             	add    esp,0x20
c00273fb:	c9                   	leave  
c00273fc:	c3                   	ret    

c00273fd <__gesf2>:
c00273fd:	eb c3                	jmp    c00273c2 <__gtsf2>

c00273ff <__ltsf2>:
c00273ff:	eb 84                	jmp    c0027385 <__eqsf2>

c0027401 <__lesf2>:
c0027401:	eb 82                	jmp    c0027385 <__eqsf2>

c0027403 <__adddf3>:
c0027403:	55                   	push   ebp
c0027404:	89 e5                	mov    ebp,esp
c0027406:	57                   	push   edi
c0027407:	56                   	push   esi
c0027408:	53                   	push   ebx
c0027409:	83 ec 24             	sub    esp,0x24
c002740c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002740f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027412:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027415:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027418:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002741b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002741e:	89 c8                	mov    eax,ecx
c0027420:	89 ce                	mov    esi,ecx
c0027422:	c1 fe 14             	sar    esi,0x14
c0027425:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027428:	89 fb                	mov    ebx,edi
c002742a:	89 fa                	mov    edx,edi
c002742c:	c1 e2 0b             	shl    edx,0xb
c002742f:	c1 e0 0b             	shl    eax,0xb
c0027432:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027437:	c1 eb 15             	shr    ebx,0x15
c002743a:	09 d8                	or     eax,ebx
c002743c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002743f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027442:	c1 fe 14             	sar    esi,0x14
c0027445:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027448:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002744b:	89 f3                	mov    ebx,esi
c002744d:	c1 e3 0b             	shl    ebx,0xb
c0027450:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027453:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027456:	c1 e3 0b             	shl    ebx,0xb
c0027459:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002745f:	c1 ee 15             	shr    esi,0x15
c0027462:	09 f3                	or     ebx,esi
c0027464:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027467:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002746a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002746d:	0f 88 5f 02 00 00    	js     c00276d2 <__adddf3+0x2cf>
c0027473:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027476:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027479:	85 db                	test   ebx,ebx
c002747b:	0f 8e c7 00 00 00    	jle    c0027548 <__adddf3+0x145>
c0027481:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027488:	75 1a                	jne    c00274a4 <__adddf3+0xa1>
c002748a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002748d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027490:	0f 84 b2 05 00 00    	je     c0027a48 <__adddf3+0x645>
c0027496:	4b                   	dec    ebx
c0027497:	75 23                	jne    c00274bc <__adddf3+0xb9>
c0027499:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002749c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002749f:	e9 99 00 00 00       	jmp    c002753d <__adddf3+0x13a>
c00274a4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00274a7:	f7 d6                	not    esi
c00274a9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00274af:	0f 84 93 05 00 00    	je     c0027a48 <__adddf3+0x645>
c00274b5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00274bc:	83 fb 1f             	cmp    ebx,0x1f
c00274bf:	7e 42                	jle    c0027503 <__adddf3+0x100>
c00274c1:	83 fb 3f             	cmp    ebx,0x3f
c00274c4:	0f 8f 7e 05 00 00    	jg     c0027a48 <__adddf3+0x645>
c00274ca:	83 e3 1f             	and    ebx,0x1f
c00274cd:	89 d9                	mov    ecx,ebx
c00274cf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00274d2:	d3 ef                	shr    edi,cl
c00274d4:	31 db                	xor    ebx,ebx
c00274d6:	85 c9                	test   ecx,ecx
c00274d8:	74 15                	je     c00274ef <__adddf3+0xec>
c00274da:	be 20 00 00 00       	mov    esi,0x20
c00274df:	29 ce                	sub    esi,ecx
c00274e1:	89 f1                	mov    ecx,esi
c00274e3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274e6:	d3 e6                	shl    esi,cl
c00274e8:	31 db                	xor    ebx,ebx
c00274ea:	85 f6                	test   esi,esi
c00274ec:	0f 95 c3             	setne  bl
c00274ef:	31 c9                	xor    ecx,ecx
c00274f1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00274f5:	0f 95 c1             	setne  cl
c00274f8:	09 cf                	or     edi,ecx
c00274fa:	09 fb                	or     ebx,edi
c00274fc:	01 da                	add    edx,ebx
c00274fe:	83 d0 00             	adc    eax,0x0
c0027501:	eb 3a                	jmp    c002753d <__adddf3+0x13a>
c0027503:	bf 20 00 00 00       	mov    edi,0x20
c0027508:	29 df                	sub    edi,ebx
c002750a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002750d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027510:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027513:	d3 e6                	shl    esi,cl
c0027515:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027518:	88 d9                	mov    cl,bl
c002751a:	d3 ef                	shr    edi,cl
c002751c:	09 fe                	or     esi,edi
c002751e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027521:	88 d9                	mov    cl,bl
c0027523:	d3 ef                	shr    edi,cl
c0027525:	89 fb                	mov    ebx,edi
c0027527:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002752a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002752d:	d3 e7                	shl    edi,cl
c002752f:	85 ff                	test   edi,edi
c0027531:	0f 95 c1             	setne  cl
c0027534:	0f b6 c9             	movzx  ecx,cl
c0027537:	09 ce                	or     esi,ecx
c0027539:	01 f2                	add    edx,esi
c002753b:	11 d8                	adc    eax,ebx
c002753d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027540:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027543:	e9 52 01 00 00       	jmp    c002769a <__adddf3+0x297>
c0027548:	0f 84 d5 00 00 00    	je     c0027623 <__adddf3+0x220>
c002754e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027551:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027554:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027557:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002755a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027561:	75 20                	jne    c0027583 <__adddf3+0x180>
c0027563:	89 d6                	mov    esi,edx
c0027565:	09 c6                	or     esi,eax
c0027567:	0f 84 db 04 00 00    	je     c0027a48 <__adddf3+0x645>
c002756d:	4b                   	dec    ebx
c002756e:	75 29                	jne    c0027599 <__adddf3+0x196>
c0027570:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027573:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027576:	01 d1                	add    ecx,edx
c0027578:	11 c6                	adc    esi,eax
c002757a:	89 f0                	mov    eax,esi
c002757c:	89 ca                	mov    edx,ecx
c002757e:	e9 17 01 00 00       	jmp    c002769a <__adddf3+0x297>
c0027583:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027586:	f7 d6                	not    esi
c0027588:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002758e:	0f 84 b4 04 00 00    	je     c0027a48 <__adddf3+0x645>
c0027594:	0d 00 00 00 80       	or     eax,0x80000000
c0027599:	83 fb 1f             	cmp    ebx,0x1f
c002759c:	7e 48                	jle    c00275e6 <__adddf3+0x1e3>
c002759e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00275a1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00275a4:	83 fb 3f             	cmp    ebx,0x3f
c00275a7:	0f 8f 9b 04 00 00    	jg     c0027a48 <__adddf3+0x645>
c00275ad:	83 e3 1f             	and    ebx,0x1f
c00275b0:	89 d9                	mov    ecx,ebx
c00275b2:	89 c7                	mov    edi,eax
c00275b4:	d3 ef                	shr    edi,cl
c00275b6:	31 db                	xor    ebx,ebx
c00275b8:	85 c9                	test   ecx,ecx
c00275ba:	74 12                	je     c00275ce <__adddf3+0x1cb>
c00275bc:	be 20 00 00 00       	mov    esi,0x20
c00275c1:	29 ce                	sub    esi,ecx
c00275c3:	89 f1                	mov    ecx,esi
c00275c5:	d3 e0                	shl    eax,cl
c00275c7:	31 db                	xor    ebx,ebx
c00275c9:	85 c0                	test   eax,eax
c00275cb:	0f 95 c3             	setne  bl
c00275ce:	31 c0                	xor    eax,eax
c00275d0:	85 d2                	test   edx,edx
c00275d2:	0f 95 c0             	setne  al
c00275d5:	09 c7                	or     edi,eax
c00275d7:	09 fb                	or     ebx,edi
c00275d9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275dc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00275df:	01 da                	add    edx,ebx
c00275e1:	83 d6 00             	adc    esi,0x0
c00275e4:	eb 39                	jmp    c002761f <__adddf3+0x21c>
c00275e6:	be 20 00 00 00       	mov    esi,0x20
c00275eb:	29 de                	sub    esi,ebx
c00275ed:	89 c7                	mov    edi,eax
c00275ef:	89 f1                	mov    ecx,esi
c00275f1:	d3 e7                	shl    edi,cl
c00275f3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00275f6:	89 d7                	mov    edi,edx
c00275f8:	88 d9                	mov    cl,bl
c00275fa:	d3 ef                	shr    edi,cl
c00275fc:	89 f9                	mov    ecx,edi
c00275fe:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027601:	09 cf                	or     edi,ecx
c0027603:	88 d9                	mov    cl,bl
c0027605:	d3 e8                	shr    eax,cl
c0027607:	89 f1                	mov    ecx,esi
c0027609:	d3 e2                	shl    edx,cl
c002760b:	85 d2                	test   edx,edx
c002760d:	0f 95 c2             	setne  dl
c0027610:	0f b6 d2             	movzx  edx,dl
c0027613:	09 d7                	or     edi,edx
c0027615:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027618:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002761b:	01 fa                	add    edx,edi
c002761d:	11 c6                	adc    esi,eax
c002761f:	89 f0                	mov    eax,esi
c0027621:	eb 77                	jmp    c002769a <__adddf3+0x297>
c0027623:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027626:	46                   	inc    esi
c0027627:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002762a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027630:	75 41                	jne    c0027673 <__adddf3+0x270>
c0027632:	89 d3                	mov    ebx,edx
c0027634:	09 c3                	or     ebx,eax
c0027636:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002763d:	75 27                	jne    c0027666 <__adddf3+0x263>
c002763f:	85 db                	test   ebx,ebx
c0027641:	0f 84 fb 03 00 00    	je     c0027a42 <__adddf3+0x63f>
c0027647:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002764a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002764d:	0f 84 f5 03 00 00    	je     c0027a48 <__adddf3+0x645>
c0027653:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027656:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027659:	85 c0                	test   eax,eax
c002765b:	0f 89 91 03 00 00    	jns    c00279f2 <__adddf3+0x5ef>
c0027661:	e9 85 03 00 00       	jmp    c00279eb <__adddf3+0x5e8>
c0027666:	85 db                	test   ebx,ebx
c0027668:	0f 85 da 03 00 00    	jne    c0027a48 <__adddf3+0x645>
c002766e:	e9 cf 03 00 00       	jmp    c0027a42 <__adddf3+0x63f>
c0027673:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027676:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027679:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002767c:	f7 d1                	not    ecx
c002767e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027684:	0f 84 70 03 00 00    	je     c00279fa <__adddf3+0x5f7>
c002768a:	d1 ea                	shr    edx,1
c002768c:	89 c1                	mov    ecx,eax
c002768e:	c1 e1 1f             	shl    ecx,0x1f
c0027691:	09 ca                	or     edx,ecx
c0027693:	d1 e8                	shr    eax,1
c0027695:	e9 6f 03 00 00       	jmp    c0027a09 <__adddf3+0x606>
c002769a:	85 c0                	test   eax,eax
c002769c:	0f 89 67 03 00 00    	jns    c0027a09 <__adddf3+0x606>
c00276a2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00276a5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00276a8:	f7 d1                	not    ecx
c00276aa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00276b0:	0f 84 44 03 00 00    	je     c00279fa <__adddf3+0x5f7>
c00276b6:	89 d1                	mov    ecx,edx
c00276b8:	d1 e9                	shr    ecx,1
c00276ba:	83 e2 01             	and    edx,0x1
c00276bd:	09 ca                	or     edx,ecx
c00276bf:	89 c1                	mov    ecx,eax
c00276c1:	c1 e1 1f             	shl    ecx,0x1f
c00276c4:	09 ca                	or     edx,ecx
c00276c6:	d1 e8                	shr    eax,1
c00276c8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00276cd:	e9 37 03 00 00       	jmp    c0027a09 <__adddf3+0x606>
c00276d2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276d5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276db:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00276de:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00276e1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00276e7:	29 de                	sub    esi,ebx
c00276e9:	85 f6                	test   esi,esi
c00276eb:	0f 8e bd 00 00 00    	jle    c00277ae <__adddf3+0x3ab>
c00276f1:	85 db                	test   ebx,ebx
c00276f3:	75 17                	jne    c002770c <__adddf3+0x309>
c00276f5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00276f8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00276fb:	0f 84 47 03 00 00    	je     c0027a48 <__adddf3+0x645>
c0027701:	4e                   	dec    esi
c0027702:	75 20                	jne    c0027724 <__adddf3+0x321>
c0027704:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027707:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002770a:	eb 5b                	jmp    c0027767 <__adddf3+0x364>
c002770c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002770f:	f7 d3                	not    ebx
c0027711:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027717:	0f 84 2b 03 00 00    	je     c0027a48 <__adddf3+0x645>
c002771d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027724:	83 fe 1f             	cmp    esi,0x1f
c0027727:	7e 49                	jle    c0027772 <__adddf3+0x36f>
c0027729:	83 fe 3f             	cmp    esi,0x3f
c002772c:	0f 8f 16 03 00 00    	jg     c0027a48 <__adddf3+0x645>
c0027732:	83 e6 1f             	and    esi,0x1f
c0027735:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027738:	89 f1                	mov    ecx,esi
c002773a:	d3 ef                	shr    edi,cl
c002773c:	31 db                	xor    ebx,ebx
c002773e:	85 f6                	test   esi,esi
c0027740:	74 13                	je     c0027755 <__adddf3+0x352>
c0027742:	b9 20 00 00 00       	mov    ecx,0x20
c0027747:	29 f1                	sub    ecx,esi
c0027749:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002774c:	d3 e6                	shl    esi,cl
c002774e:	31 db                	xor    ebx,ebx
c0027750:	85 f6                	test   esi,esi
c0027752:	0f 95 c3             	setne  bl
c0027755:	31 c9                	xor    ecx,ecx
c0027757:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002775b:	0f 95 c1             	setne  cl
c002775e:	09 cf                	or     edi,ecx
c0027760:	09 fb                	or     ebx,edi
c0027762:	29 da                	sub    edx,ebx
c0027764:	83 d8 00             	sbb    eax,0x0
c0027767:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002776a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002776d:	e9 aa 01 00 00       	jmp    c002791c <__adddf3+0x519>
c0027772:	bf 20 00 00 00       	mov    edi,0x20
c0027777:	29 f7                	sub    edi,esi
c0027779:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002777c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002777f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027782:	d3 e3                	shl    ebx,cl
c0027784:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027787:	89 f1                	mov    ecx,esi
c0027789:	d3 ef                	shr    edi,cl
c002778b:	09 fb                	or     ebx,edi
c002778d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027790:	89 f1                	mov    ecx,esi
c0027792:	d3 ef                	shr    edi,cl
c0027794:	89 fe                	mov    esi,edi
c0027796:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027799:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002779c:	d3 e7                	shl    edi,cl
c002779e:	85 ff                	test   edi,edi
c00277a0:	0f 95 c1             	setne  cl
c00277a3:	0f b6 c9             	movzx  ecx,cl
c00277a6:	09 cb                	or     ebx,ecx
c00277a8:	29 da                	sub    edx,ebx
c00277aa:	19 f0                	sbb    eax,esi
c00277ac:	eb b9                	jmp    c0027767 <__adddf3+0x364>
c00277ae:	0f 84 cd 00 00 00    	je     c0027881 <__adddf3+0x47e>
c00277b4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00277b7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277ba:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277bd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00277c1:	75 1b                	jne    c00277de <__adddf3+0x3db>
c00277c3:	89 d6                	mov    esi,edx
c00277c5:	09 c6                	or     esi,eax
c00277c7:	0f 84 7b 02 00 00    	je     c0027a48 <__adddf3+0x645>
c00277cd:	4b                   	dec    ebx
c00277ce:	75 24                	jne    c00277f4 <__adddf3+0x3f1>
c00277d0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277d3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00277d6:	29 d1                	sub    ecx,edx
c00277d8:	19 c6                	sbb    esi,eax
c00277da:	89 ca                	mov    edx,ecx
c00277dc:	eb 61                	jmp    c002783f <__adddf3+0x43c>
c00277de:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00277e1:	f7 d6                	not    esi
c00277e3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277e9:	0f 84 59 02 00 00    	je     c0027a48 <__adddf3+0x645>
c00277ef:	0d 00 00 00 80       	or     eax,0x80000000
c00277f4:	83 fb 1f             	cmp    ebx,0x1f
c00277f7:	7e 4d                	jle    c0027846 <__adddf3+0x443>
c00277f9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277fc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277ff:	83 fb 3f             	cmp    ebx,0x3f
c0027802:	0f 8f 40 02 00 00    	jg     c0027a48 <__adddf3+0x645>
c0027808:	83 e3 1f             	and    ebx,0x1f
c002780b:	89 d9                	mov    ecx,ebx
c002780d:	89 c7                	mov    edi,eax
c002780f:	d3 ef                	shr    edi,cl
c0027811:	31 db                	xor    ebx,ebx
c0027813:	85 c9                	test   ecx,ecx
c0027815:	74 12                	je     c0027829 <__adddf3+0x426>
c0027817:	be 20 00 00 00       	mov    esi,0x20
c002781c:	29 ce                	sub    esi,ecx
c002781e:	89 f1                	mov    ecx,esi
c0027820:	d3 e0                	shl    eax,cl
c0027822:	31 db                	xor    ebx,ebx
c0027824:	85 c0                	test   eax,eax
c0027826:	0f 95 c3             	setne  bl
c0027829:	31 c0                	xor    eax,eax
c002782b:	85 d2                	test   edx,edx
c002782d:	0f 95 c0             	setne  al
c0027830:	09 c7                	or     edi,eax
c0027832:	09 fb                	or     ebx,edi
c0027834:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027837:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002783a:	29 da                	sub    edx,ebx
c002783c:	83 de 00             	sbb    esi,0x0
c002783f:	89 f0                	mov    eax,esi
c0027841:	e9 d6 00 00 00       	jmp    c002791c <__adddf3+0x519>
c0027846:	be 20 00 00 00       	mov    esi,0x20
c002784b:	29 de                	sub    esi,ebx
c002784d:	89 c7                	mov    edi,eax
c002784f:	89 f1                	mov    ecx,esi
c0027851:	d3 e7                	shl    edi,cl
c0027853:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027856:	89 d7                	mov    edi,edx
c0027858:	88 d9                	mov    cl,bl
c002785a:	d3 ef                	shr    edi,cl
c002785c:	89 f9                	mov    ecx,edi
c002785e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027861:	09 cf                	or     edi,ecx
c0027863:	88 d9                	mov    cl,bl
c0027865:	d3 e8                	shr    eax,cl
c0027867:	89 f1                	mov    ecx,esi
c0027869:	d3 e2                	shl    edx,cl
c002786b:	85 d2                	test   edx,edx
c002786d:	0f 95 c2             	setne  dl
c0027870:	0f b6 d2             	movzx  edx,dl
c0027873:	09 d7                	or     edi,edx
c0027875:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027878:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002787b:	29 fa                	sub    edx,edi
c002787d:	19 c6                	sbb    esi,eax
c002787f:	eb be                	jmp    c002783f <__adddf3+0x43c>
c0027881:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027884:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027887:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002788d:	75 6a                	jne    c00278f9 <__adddf3+0x4f6>
c002788f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027893:	75 58                	jne    c00278ed <__adddf3+0x4ea>
c0027895:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027898:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002789b:	89 d6                	mov    esi,edx
c002789d:	09 c6                	or     esi,eax
c002789f:	75 17                	jne    c00278b8 <__adddf3+0x4b5>
c00278a1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278a4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278a7:	85 db                	test   ebx,ebx
c00278a9:	0f 85 99 01 00 00    	jne    c0027a48 <__adddf3+0x645>
c00278af:	31 ff                	xor    edi,edi
c00278b1:	31 c9                	xor    ecx,ecx
c00278b3:	e9 90 01 00 00       	jmp    c0027a48 <__adddf3+0x645>
c00278b8:	85 db                	test   ebx,ebx
c00278ba:	0f 84 88 01 00 00    	je     c0027a48 <__adddf3+0x645>
c00278c0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00278c3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00278c6:	85 c0                	test   eax,eax
c00278c8:	79 10                	jns    c00278da <__adddf3+0x4d7>
c00278ca:	31 c9                	xor    ecx,ecx
c00278cc:	f7 da                	neg    edx
c00278ce:	0f 95 c1             	setne  cl
c00278d1:	01 c8                	add    eax,ecx
c00278d3:	f7 d8                	neg    eax
c00278d5:	e9 2f 01 00 00       	jmp    c0027a09 <__adddf3+0x606>
c00278da:	31 ff                	xor    edi,edi
c00278dc:	31 c9                	xor    ecx,ecx
c00278de:	89 c3                	mov    ebx,eax
c00278e0:	09 d3                	or     ebx,edx
c00278e2:	0f 84 60 01 00 00    	je     c0027a48 <__adddf3+0x645>
c00278e8:	e9 05 01 00 00       	jmp    c00279f2 <__adddf3+0x5ef>
c00278ed:	31 ff                	xor    edi,edi
c00278ef:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00278f4:	e9 4f 01 00 00       	jmp    c0027a48 <__adddf3+0x645>
c00278f9:	89 c1                	mov    ecx,eax
c00278fb:	89 d0                	mov    eax,edx
c00278fd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027900:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027903:	89 ca                	mov    edx,ecx
c0027905:	85 c9                	test   ecx,ecx
c0027907:	79 2c                	jns    c0027935 <__adddf3+0x532>
c0027909:	31 c9                	xor    ecx,ecx
c002790b:	f7 d8                	neg    eax
c002790d:	0f 95 c1             	setne  cl
c0027910:	01 ca                	add    edx,ecx
c0027912:	f7 da                	neg    edx
c0027914:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027917:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002791a:	eb 19                	jmp    c0027935 <__adddf3+0x532>
c002791c:	85 c0                	test   eax,eax
c002791e:	0f 89 e5 00 00 00    	jns    c0027a09 <__adddf3+0x606>
c0027924:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027929:	89 c1                	mov    ecx,eax
c002792b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002792e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027931:	89 d0                	mov    eax,edx
c0027933:	89 ca                	mov    edx,ecx
c0027935:	85 d2                	test   edx,edx
c0027937:	74 59                	je     c0027992 <__adddf3+0x58f>
c0027939:	0f bd da             	bsr    ebx,edx
c002793c:	83 f3 1f             	xor    ebx,0x1f
c002793f:	88 d9                	mov    cl,bl
c0027941:	d3 e2                	shl    edx,cl
c0027943:	bf 20 00 00 00       	mov    edi,0x20
c0027948:	89 f9                	mov    ecx,edi
c002794a:	29 d9                	sub    ecx,ebx
c002794c:	89 c6                	mov    esi,eax
c002794e:	d3 ee                	shr    esi,cl
c0027950:	09 d6                	or     esi,edx
c0027952:	88 d9                	mov    cl,bl
c0027954:	d3 e0                	shl    eax,cl
c0027956:	89 c2                	mov    edx,eax
c0027958:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002795b:	25 ff 07 00 00       	and    eax,0x7ff
c0027960:	39 d8                	cmp    eax,ebx
c0027962:	7f 22                	jg     c0027986 <__adddf3+0x583>
c0027964:	29 c3                	sub    ebx,eax
c0027966:	43                   	inc    ebx
c0027967:	88 d9                	mov    cl,bl
c0027969:	d3 ea                	shr    edx,cl
c002796b:	29 df                	sub    edi,ebx
c002796d:	89 f9                	mov    ecx,edi
c002796f:	89 f0                	mov    eax,esi
c0027971:	d3 e0                	shl    eax,cl
c0027973:	09 c2                	or     edx,eax
c0027975:	89 f0                	mov    eax,esi
c0027977:	88 d9                	mov    cl,bl
c0027979:	d3 e8                	shr    eax,cl
c002797b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002797e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027984:	eb 6f                	jmp    c00279f5 <__adddf3+0x5f2>
c0027986:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027989:	29 d8                	sub    eax,ebx
c002798b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002798e:	89 f0                	mov    eax,esi
c0027990:	eb 59                	jmp    c00279eb <__adddf3+0x5e8>
c0027992:	85 c0                	test   eax,eax
c0027994:	74 6a                	je     c0027a00 <__adddf3+0x5fd>
c0027996:	0f bd c8             	bsr    ecx,eax
c0027999:	83 f1 1f             	xor    ecx,0x1f
c002799c:	d3 e0                	shl    eax,cl
c002799e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00279a1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00279a7:	83 c1 20             	add    ecx,0x20
c00279aa:	39 cb                	cmp    ebx,ecx
c00279ac:	7f 35                	jg     c00279e3 <__adddf3+0x5e0>
c00279ae:	29 d9                	sub    ecx,ebx
c00279b0:	8d 71 01             	lea    esi,[ecx+0x1]
c00279b3:	83 fe 1f             	cmp    esi,0x1f
c00279b6:	7e 09                	jle    c00279c1 <__adddf3+0x5be>
c00279b8:	83 e9 1f             	sub    ecx,0x1f
c00279bb:	d3 e8                	shr    eax,cl
c00279bd:	89 c3                	mov    ebx,eax
c00279bf:	eb 11                	jmp    c00279d2 <__adddf3+0x5cf>
c00279c1:	b9 20 00 00 00       	mov    ecx,0x20
c00279c6:	29 f1                	sub    ecx,esi
c00279c8:	89 c3                	mov    ebx,eax
c00279ca:	d3 e3                	shl    ebx,cl
c00279cc:	89 f1                	mov    ecx,esi
c00279ce:	d3 e8                	shr    eax,cl
c00279d0:	89 c2                	mov    edx,eax
c00279d2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279d5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00279da:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279dd:	89 d0                	mov    eax,edx
c00279df:	89 da                	mov    edx,ebx
c00279e1:	eb 26                	jmp    c0027a09 <__adddf3+0x606>
c00279e3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279e6:	29 cf                	sub    edi,ecx
c00279e8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279eb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00279f0:	eb 17                	jmp    c0027a09 <__adddf3+0x606>
c00279f2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279f5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279f8:	eb 0f                	jmp    c0027a09 <__adddf3+0x606>
c00279fa:	31 d2                	xor    edx,edx
c00279fc:	31 c0                	xor    eax,eax
c00279fe:	eb 09                	jmp    c0027a09 <__adddf3+0x606>
c0027a00:	89 c2                	mov    edx,eax
c0027a02:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027a09:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a0c:	c1 e1 14             	shl    ecx,0x14
c0027a0f:	89 c3                	mov    ebx,eax
c0027a11:	c1 eb 0b             	shr    ebx,0xb
c0027a14:	09 d9                	or     ecx,ebx
c0027a16:	89 d3                	mov    ebx,edx
c0027a18:	c1 eb 0b             	shr    ebx,0xb
c0027a1b:	c1 e0 15             	shl    eax,0x15
c0027a1e:	09 d8                	or     eax,ebx
c0027a20:	89 c7                	mov    edi,eax
c0027a22:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027a28:	0f 95 c0             	setne  al
c0027a2b:	89 c6                	mov    esi,eax
c0027a2d:	09 f3                	or     ebx,esi
c0027a2f:	83 e3 01             	and    ebx,0x1
c0027a32:	c1 ea 0a             	shr    edx,0xa
c0027a35:	21 da                	and    edx,ebx
c0027a37:	89 f8                	mov    eax,edi
c0027a39:	01 d0                	add    eax,edx
c0027a3b:	83 d1 00             	adc    ecx,0x0
c0027a3e:	89 c7                	mov    edi,eax
c0027a40:	eb 06                	jmp    c0027a48 <__adddf3+0x645>
c0027a42:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a45:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a48:	89 f8                	mov    eax,edi
c0027a4a:	89 ca                	mov    edx,ecx
c0027a4c:	83 c4 24             	add    esp,0x24
c0027a4f:	5b                   	pop    ebx
c0027a50:	5e                   	pop    esi
c0027a51:	5f                   	pop    edi
c0027a52:	5d                   	pop    ebp
c0027a53:	c3                   	ret    

c0027a54 <__subdf3>:
c0027a54:	55                   	push   ebp
c0027a55:	89 e5                	mov    ebp,esp
c0027a57:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027a5a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027a5d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027a63:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027a66:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027a69:	5d                   	pop    ebp
c0027a6a:	e9 94 f9 ff ff       	jmp    c0027403 <__adddf3>

c0027a6f <__negdf2>:
c0027a6f:	55                   	push   ebp
c0027a70:	89 e5                	mov    ebp,esp
c0027a72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027a75:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027a78:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027a7e:	5d                   	pop    ebp
c0027a7f:	c3                   	ret    

c0027a80 <__muldf3>:
c0027a80:	55                   	push   ebp
c0027a81:	89 e5                	mov    ebp,esp
c0027a83:	57                   	push   edi
c0027a84:	56                   	push   esi
c0027a85:	53                   	push   ebx
c0027a86:	83 ec 24             	sub    esp,0x24
c0027a89:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027a8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027a8f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a92:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027a95:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027a98:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027a9b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a9e:	89 c8                	mov    eax,ecx
c0027aa0:	c1 f8 14             	sar    eax,0x14
c0027aa3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027aa6:	89 f8                	mov    eax,edi
c0027aa8:	89 fb                	mov    ebx,edi
c0027aaa:	c1 e3 0b             	shl    ebx,0xb
c0027aad:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027ab0:	c1 e1 0b             	shl    ecx,0xb
c0027ab3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027ab9:	c1 e8 15             	shr    eax,0x15
c0027abc:	09 c1                	or     ecx,eax
c0027abe:	89 d6                	mov    esi,edx
c0027ac0:	89 d0                	mov    eax,edx
c0027ac2:	c1 f8 14             	sar    eax,0x14
c0027ac5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027ac8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027acb:	89 c3                	mov    ebx,eax
c0027acd:	c1 e3 0b             	shl    ebx,0xb
c0027ad0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027ad3:	c1 e6 0b             	shl    esi,0xb
c0027ad6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027adc:	c1 e8 15             	shr    eax,0x15
c0027adf:	09 c6                	or     esi,eax
c0027ae1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ae4:	25 ff 07 00 00       	and    eax,0x7ff
c0027ae9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027aec:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027aef:	25 ff 07 00 00       	and    eax,0x7ff
c0027af4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027af7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027afa:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027afd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027b04:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b07:	40                   	inc    eax
c0027b08:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b0d:	0f 85 8d 00 00 00    	jne    c0027ba0 <__muldf3+0x120>
c0027b13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b16:	09 c8                	or     eax,ecx
c0027b18:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027b1c:	74 44                	je     c0027b62 <__muldf3+0xe2>
c0027b1e:	85 c0                	test   eax,eax
c0027b20:	0f 85 31 02 00 00    	jne    c0027d57 <__muldf3+0x2d7>
c0027b26:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b29:	40                   	inc    eax
c0027b2a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b2f:	75 13                	jne    c0027b44 <__muldf3+0xc4>
c0027b31:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027b34:	09 f1                	or     ecx,esi
c0027b36:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027b3a:	74 22                	je     c0027b5e <__muldf3+0xde>
c0027b3c:	85 c9                	test   ecx,ecx
c0027b3e:	0f 85 0d 02 00 00    	jne    c0027d51 <__muldf3+0x2d1>
c0027b44:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027b48:	0f 89 09 02 00 00    	jns    c0027d57 <__muldf3+0x2d7>
c0027b4e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b51:	05 00 00 00 80       	add    eax,0x80000000
c0027b56:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b59:	e9 f9 01 00 00       	jmp    c0027d57 <__muldf3+0x2d7>
c0027b5e:	85 c9                	test   ecx,ecx
c0027b60:	eb 2e                	jmp    c0027b90 <__muldf3+0x110>
c0027b62:	85 c0                	test   eax,eax
c0027b64:	74 20                	je     c0027b86 <__muldf3+0x106>
c0027b66:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027b69:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b6c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b6f:	c1 ef 1f             	shr    edi,0x1f
c0027b72:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027b75:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027b78:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027b7b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b7e:	09 f9                	or     ecx,edi
c0027b80:	78 1e                	js     c0027ba0 <__muldf3+0x120>
c0027b82:	89 c3                	mov    ebx,eax
c0027b84:	eb e0                	jmp    c0027b66 <__muldf3+0xe6>
c0027b86:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b89:	f7 d0                	not    eax
c0027b8b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027b90:	75 b2                	jne    c0027b44 <__muldf3+0xc4>
c0027b92:	31 ff                	xor    edi,edi
c0027b94:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027b9b:	e9 b7 01 00 00       	jmp    c0027d57 <__muldf3+0x2d7>
c0027ba0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ba3:	40                   	inc    eax
c0027ba4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ba9:	75 57                	jne    c0027c02 <__muldf3+0x182>
c0027bab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027bae:	09 f0                	or     eax,esi
c0027bb0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027bb4:	74 23                	je     c0027bd9 <__muldf3+0x159>
c0027bb6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027bba:	0f 89 91 01 00 00    	jns    c0027d51 <__muldf3+0x2d1>
c0027bc0:	85 c0                	test   eax,eax
c0027bc2:	0f 85 89 01 00 00    	jne    c0027d51 <__muldf3+0x2d1>
c0027bc8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027bcb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027bd1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bd4:	e9 7e 01 00 00       	jmp    c0027d57 <__muldf3+0x2d7>
c0027bd9:	85 c0                	test   eax,eax
c0027bdb:	75 0c                	jne    c0027be9 <__muldf3+0x169>
c0027bdd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027be1:	0f 89 6a 01 00 00    	jns    c0027d51 <__muldf3+0x2d1>
c0027be7:	eb df                	jmp    c0027bc8 <__muldf3+0x148>
c0027be9:	01 f6                	add    esi,esi
c0027beb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027bee:	c1 ea 1f             	shr    edx,0x1f
c0027bf1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027bf4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027bf7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027bfa:	09 d6                	or     esi,edx
c0027bfc:	78 04                	js     c0027c02 <__muldf3+0x182>
c0027bfe:	89 c3                	mov    ebx,eax
c0027c00:	eb e7                	jmp    c0027be9 <__muldf3+0x169>
c0027c02:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027c08:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027c0e:	89 c8                	mov    eax,ecx
c0027c10:	f7 e6                	mul    esi
c0027c12:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027c15:	89 c7                	mov    edi,eax
c0027c17:	89 c8                	mov    eax,ecx
c0027c19:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027c1c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027c1f:	89 c1                	mov    ecx,eax
c0027c21:	89 f0                	mov    eax,esi
c0027c23:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027c26:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027c29:	89 c6                	mov    esi,eax
c0027c2b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c2e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027c31:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027c34:	31 c0                	xor    eax,eax
c0027c36:	01 f1                	add    ecx,esi
c0027c38:	0f 92 c0             	setb   al
c0027c3b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027c3e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027c41:	83 d6 00             	adc    esi,0x0
c0027c44:	01 c7                	add    edi,eax
c0027c46:	83 d6 00             	adc    esi,0x0
c0027c49:	01 ca                	add    edx,ecx
c0027c4b:	0f 92 c1             	setb   cl
c0027c4e:	0f b6 c9             	movzx  ecx,cl
c0027c51:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027c54:	83 d6 00             	adc    esi,0x0
c0027c57:	01 cf                	add    edi,ecx
c0027c59:	83 d6 00             	adc    esi,0x0
c0027c5c:	31 c9                	xor    ecx,ecx
c0027c5e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027c61:	0f 95 c1             	setne  cl
c0027c64:	09 cf                	or     edi,ecx
c0027c66:	85 f6                	test   esi,esi
c0027c68:	78 0c                	js     c0027c76 <__muldf3+0x1f6>
c0027c6a:	01 f6                	add    esi,esi
c0027c6c:	89 f8                	mov    eax,edi
c0027c6e:	c1 e8 1f             	shr    eax,0x1f
c0027c71:	09 c6                	or     esi,eax
c0027c73:	01 ff                	add    edi,edi
c0027c75:	4b                   	dec    ebx
c0027c76:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027c7c:	0f 8f 85 00 00 00    	jg     c0027d07 <__muldf3+0x287>
c0027c82:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027c88:	85 db                	test   ebx,ebx
c0027c8a:	0f 8f 84 00 00 00    	jg     c0027d14 <__muldf3+0x294>
c0027c90:	83 fb cc             	cmp    ebx,0xffffffcc
c0027c93:	7c 79                	jl     c0027d0e <__muldf3+0x28e>
c0027c95:	ba 01 00 00 00       	mov    edx,0x1
c0027c9a:	29 da                	sub    edx,ebx
c0027c9c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ca2:	83 fa 1f             	cmp    edx,0x1f
c0027ca5:	7e 30                	jle    c0027cd7 <__muldf3+0x257>
c0027ca7:	83 fa 20             	cmp    edx,0x20
c0027caa:	75 0b                	jne    c0027cb7 <__muldf3+0x237>
c0027cac:	31 c0                	xor    eax,eax
c0027cae:	85 ff                	test   edi,edi
c0027cb0:	0f 95 c0             	setne  al
c0027cb3:	89 c7                	mov    edi,eax
c0027cb5:	eb 1a                	jmp    c0027cd1 <__muldf3+0x251>
c0027cb7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027cba:	89 f0                	mov    eax,esi
c0027cbc:	d3 e0                	shl    eax,cl
c0027cbe:	09 f8                	or     eax,edi
c0027cc0:	0f 95 c0             	setne  al
c0027cc3:	0f b6 c0             	movzx  eax,al
c0027cc6:	89 c7                	mov    edi,eax
c0027cc8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027ccd:	29 d9                	sub    ecx,ebx
c0027ccf:	d3 ee                	shr    esi,cl
c0027cd1:	09 f7                	or     edi,esi
c0027cd3:	31 db                	xor    ebx,ebx
c0027cd5:	eb 3b                	jmp    c0027d12 <__muldf3+0x292>
c0027cd7:	83 c3 1f             	add    ebx,0x1f
c0027cda:	89 f0                	mov    eax,esi
c0027cdc:	88 d9                	mov    cl,bl
c0027cde:	d3 e0                	shl    eax,cl
c0027ce0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ce3:	89 f8                	mov    eax,edi
c0027ce5:	88 d1                	mov    cl,dl
c0027ce7:	d3 e8                	shr    eax,cl
c0027ce9:	89 c1                	mov    ecx,eax
c0027ceb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027cee:	09 c8                	or     eax,ecx
c0027cf0:	88 d9                	mov    cl,bl
c0027cf2:	d3 e7                	shl    edi,cl
c0027cf4:	31 db                	xor    ebx,ebx
c0027cf6:	85 ff                	test   edi,edi
c0027cf8:	0f 95 c3             	setne  bl
c0027cfb:	89 df                	mov    edi,ebx
c0027cfd:	09 c7                	or     edi,eax
c0027cff:	88 d1                	mov    cl,dl
c0027d01:	d3 ee                	shr    esi,cl
c0027d03:	31 db                	xor    ebx,ebx
c0027d05:	eb 0d                	jmp    c0027d14 <__muldf3+0x294>
c0027d07:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027d0c:	eb 02                	jmp    c0027d10 <__muldf3+0x290>
c0027d0e:	31 db                	xor    ebx,ebx
c0027d10:	31 ff                	xor    edi,edi
c0027d12:	31 f6                	xor    esi,esi
c0027d14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d17:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027d1a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027d1f:	09 c3                	or     ebx,eax
c0027d21:	c1 e3 14             	shl    ebx,0x14
c0027d24:	89 f0                	mov    eax,esi
c0027d26:	c1 e8 0b             	shr    eax,0xb
c0027d29:	09 c3                	or     ebx,eax
c0027d2b:	89 f8                	mov    eax,edi
c0027d2d:	c1 e8 0b             	shr    eax,0xb
c0027d30:	c1 e6 15             	shl    esi,0x15
c0027d33:	09 c6                	or     esi,eax
c0027d35:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027d3b:	0f 95 c1             	setne  cl
c0027d3e:	09 c8                	or     eax,ecx
c0027d40:	83 e0 01             	and    eax,0x1
c0027d43:	c1 ef 0a             	shr    edi,0xa
c0027d46:	21 c7                	and    edi,eax
c0027d48:	01 f7                	add    edi,esi
c0027d4a:	83 d3 00             	adc    ebx,0x0
c0027d4d:	89 da                	mov    edx,ebx
c0027d4f:	eb 03                	jmp    c0027d54 <__muldf3+0x2d4>
c0027d51:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d54:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027d57:	89 f8                	mov    eax,edi
c0027d59:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027d5c:	83 c4 24             	add    esp,0x24
c0027d5f:	5b                   	pop    ebx
c0027d60:	5e                   	pop    esi
c0027d61:	5f                   	pop    edi
c0027d62:	5d                   	pop    ebp
c0027d63:	c3                   	ret    

c0027d64 <__divdf3>:
c0027d64:	55                   	push   ebp
c0027d65:	89 e5                	mov    ebp,esp
c0027d67:	57                   	push   edi
c0027d68:	56                   	push   esi
c0027d69:	53                   	push   ebx
c0027d6a:	83 ec 2c             	sub    esp,0x2c
c0027d6d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d70:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d73:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d76:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027d79:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027d7c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027d7f:	89 ce                	mov    esi,ecx
c0027d81:	89 c8                	mov    eax,ecx
c0027d83:	c1 f8 14             	sar    eax,0x14
c0027d86:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d89:	89 f8                	mov    eax,edi
c0027d8b:	89 fb                	mov    ebx,edi
c0027d8d:	c1 e3 0b             	shl    ebx,0xb
c0027d90:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027d93:	c1 e6 0b             	shl    esi,0xb
c0027d96:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027d9c:	c1 e8 15             	shr    eax,0x15
c0027d9f:	09 c6                	or     esi,eax
c0027da1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027da4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027da7:	89 c2                	mov    edx,eax
c0027da9:	c1 fa 14             	sar    edx,0x14
c0027dac:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027daf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027db2:	89 de                	mov    esi,ebx
c0027db4:	c1 e6 0b             	shl    esi,0xb
c0027db7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027dba:	c1 e0 0b             	shl    eax,0xb
c0027dbd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027dc2:	c1 eb 15             	shr    ebx,0x15
c0027dc5:	09 d8                	or     eax,ebx
c0027dc7:	89 c2                	mov    edx,eax
c0027dc9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027dcc:	25 ff 07 00 00       	and    eax,0x7ff
c0027dd1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027dd4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027dd7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ddd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027de0:	29 d8                	sub    eax,ebx
c0027de2:	05 ff 03 00 00       	add    eax,0x3ff
c0027de7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027dea:	46                   	inc    esi
c0027deb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027df1:	0f 85 a5 00 00 00    	jne    c0027e9c <__divdf3+0x138>
c0027df7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027dfa:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027dfd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027e01:	74 2a                	je     c0027e2d <__divdf3+0xc9>
c0027e03:	85 f6                	test   esi,esi
c0027e05:	0f 85 cc 02 00 00    	jne    c00280d7 <__divdf3+0x373>
c0027e0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e0e:	40                   	inc    eax
c0027e0f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e14:	75 26                	jne    c0027e3c <__divdf3+0xd8>
c0027e16:	85 db                	test   ebx,ebx
c0027e18:	74 22                	je     c0027e3c <__divdf3+0xd8>
c0027e1a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027e1d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027e20:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e23:	09 d0                	or     eax,edx
c0027e25:	0f 85 ac 02 00 00    	jne    c00280d7 <__divdf3+0x373>
c0027e2b:	eb 63                	jmp    c0027e90 <__divdf3+0x12c>
c0027e2d:	85 f6                	test   esi,esi
c0027e2f:	75 22                	jne    c0027e53 <__divdf3+0xef>
c0027e31:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e34:	40                   	inc    eax
c0027e35:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e3a:	74 36                	je     c0027e72 <__divdf3+0x10e>
c0027e3c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027e40:	0f 89 91 02 00 00    	jns    c00280d7 <__divdf3+0x373>
c0027e46:	89 f8                	mov    eax,edi
c0027e48:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027e4e:	e9 80 02 00 00       	jmp    c00280d3 <__divdf3+0x36f>
c0027e53:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e56:	01 f6                	add    esi,esi
c0027e58:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027e5b:	c1 ef 1f             	shr    edi,0x1f
c0027e5e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e61:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027e64:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027e67:	09 f7                	or     edi,esi
c0027e69:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027e6c:	78 2e                	js     c0027e9c <__divdf3+0x138>
c0027e6e:	89 c8                	mov    eax,ecx
c0027e70:	eb e1                	jmp    c0027e53 <__divdf3+0xef>
c0027e72:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e75:	09 d0                	or     eax,edx
c0027e77:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027e7b:	74 0f                	je     c0027e8c <__divdf3+0x128>
c0027e7d:	85 c0                	test   eax,eax
c0027e7f:	74 bb                	je     c0027e3c <__divdf3+0xd8>
c0027e81:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027e84:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027e87:	e9 4b 02 00 00       	jmp    c00280d7 <__divdf3+0x373>
c0027e8c:	85 c0                	test   eax,eax
c0027e8e:	75 ac                	jne    c0027e3c <__divdf3+0xd8>
c0027e90:	31 ff                	xor    edi,edi
c0027e92:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027e97:	e9 3b 02 00 00       	jmp    c00280d7 <__divdf3+0x373>
c0027e9c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e9f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027ea2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027ea8:	75 6b                	jne    c0027f15 <__divdf3+0x1b1>
c0027eaa:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ead:	09 d6                	or     esi,edx
c0027eaf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027eb3:	74 28                	je     c0027edd <__divdf3+0x179>
c0027eb5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027eb8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ebb:	85 f6                	test   esi,esi
c0027ebd:	0f 85 14 02 00 00    	jne    c00280d7 <__divdf3+0x373>
c0027ec3:	31 ff                	xor    edi,edi
c0027ec5:	31 c9                	xor    ecx,ecx
c0027ec7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027eca:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027ecd:	0f 89 04 02 00 00    	jns    c00280d7 <__divdf3+0x373>
c0027ed3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027ed8:	e9 fa 01 00 00       	jmp    c00280d7 <__divdf3+0x373>
c0027edd:	85 f6                	test   esi,esi
c0027edf:	75 1b                	jne    c0027efc <__divdf3+0x198>
c0027ee1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ee4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027ee7:	25 00 00 00 80       	and    eax,0x80000000
c0027eec:	31 c9                	xor    ecx,ecx
c0027eee:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027ef3:	89 cf                	mov    edi,ecx
c0027ef5:	89 c1                	mov    ecx,eax
c0027ef7:	e9 db 01 00 00       	jmp    c00280d7 <__divdf3+0x373>
c0027efc:	01 d2                	add    edx,edx
c0027efe:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027f01:	c1 eb 1f             	shr    ebx,0x1f
c0027f04:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f07:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027f0a:	8d 48 01             	lea    ecx,[eax+0x1]
c0027f0d:	09 da                	or     edx,ebx
c0027f0f:	78 04                	js     c0027f15 <__divdf3+0x1b1>
c0027f11:	89 c8                	mov    eax,ecx
c0027f13:	eb e7                	jmp    c0027efc <__divdf3+0x198>
c0027f15:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f18:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027f1e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027f24:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027f27:	39 d6                	cmp    esi,edx
c0027f29:	77 0d                	ja     c0027f38 <__divdf3+0x1d4>
c0027f2b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027f2e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027f31:	72 1b                	jb     c0027f4e <__divdf3+0x1ea>
c0027f33:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027f36:	75 16                	jne    c0027f4e <__divdf3+0x1ea>
c0027f38:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027f3b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027f3e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027f41:	83 de 00             	sbb    esi,0x0
c0027f44:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027f47:	ba 01 00 00 00       	mov    edx,0x1
c0027f4c:	eb 02                	jmp    c0027f50 <__divdf3+0x1ec>
c0027f4e:	31 d2                	xor    edx,edx
c0027f50:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027f57:	31 ff                	xor    edi,edi
c0027f59:	01 ff                	add    edi,edi
c0027f5b:	89 d1                	mov    ecx,edx
c0027f5d:	c1 e9 1f             	shr    ecx,0x1f
c0027f60:	09 cf                	or     edi,ecx
c0027f62:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027f65:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027f68:	89 da                	mov    edx,ebx
c0027f6a:	89 f3                	mov    ebx,esi
c0027f6c:	8d 34 36             	lea    esi,[esi+esi*1]
c0027f6f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f72:	c1 e9 1f             	shr    ecx,0x1f
c0027f75:	09 ce                	or     esi,ecx
c0027f77:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f7a:	01 c9                	add    ecx,ecx
c0027f7c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027f7f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027f82:	85 db                	test   ebx,ebx
c0027f84:	78 29                	js     c0027faf <__divdf3+0x24b>
c0027f86:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027f89:	72 07                	jb     c0027f92 <__divdf3+0x22e>
c0027f8b:	75 3c                	jne    c0027fc9 <__divdf3+0x265>
c0027f8d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027f90:	77 37                	ja     c0027fc9 <__divdf3+0x265>
c0027f92:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027f95:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027f98:	31 d2                	xor    edx,edx
c0027f9a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027f9d:	0f 97 c2             	seta   dl
c0027fa0:	29 d6                	sub    esi,edx
c0027fa2:	89 d9                	mov    ecx,ebx
c0027fa4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027fa7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027faa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027fad:	eb 17                	jmp    c0027fc6 <__divdf3+0x262>
c0027faf:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027fb2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fb5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027fb8:	0f 97 c1             	seta   cl
c0027fbb:	0f b6 c9             	movzx  ecx,cl
c0027fbe:	29 ce                	sub    esi,ecx
c0027fc0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027fc3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027fc6:	83 ca 01             	or     edx,0x1
c0027fc9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027fcc:	75 8b                	jne    c0027f59 <__divdf3+0x1f5>
c0027fce:	c1 e7 09             	shl    edi,0x9
c0027fd1:	89 d1                	mov    ecx,edx
c0027fd3:	c1 e9 17             	shr    ecx,0x17
c0027fd6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fd9:	09 f3                	or     ebx,esi
c0027fdb:	0f 95 c3             	setne  bl
c0027fde:	0f b6 db             	movzx  ebx,bl
c0027fe1:	c1 e2 09             	shl    edx,0x9
c0027fe4:	09 d3                	or     ebx,edx
c0027fe6:	89 ca                	mov    edx,ecx
c0027fe8:	09 fa                	or     edx,edi
c0027fea:	78 0c                	js     c0027ff8 <__divdf3+0x294>
c0027fec:	01 d2                	add    edx,edx
c0027fee:	89 d9                	mov    ecx,ebx
c0027ff0:	c1 e9 1f             	shr    ecx,0x1f
c0027ff3:	09 ca                	or     edx,ecx
c0027ff5:	01 db                	add    ebx,ebx
c0027ff7:	48                   	dec    eax
c0027ff8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027ffd:	0f 8f 83 00 00 00    	jg     c0028086 <__divdf3+0x322>
c0028003:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028009:	85 c0                	test   eax,eax
c002800b:	0f 8f 82 00 00 00    	jg     c0028093 <__divdf3+0x32f>
c0028011:	83 f8 cc             	cmp    eax,0xffffffcc
c0028014:	7c 77                	jl     c002808d <__divdf3+0x329>
c0028016:	be 01 00 00 00       	mov    esi,0x1
c002801b:	29 c6                	sub    esi,eax
c002801d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028023:	83 fe 1f             	cmp    esi,0x1f
c0028026:	7e 2f                	jle    c0028057 <__divdf3+0x2f3>
c0028028:	83 fe 20             	cmp    esi,0x20
c002802b:	75 0a                	jne    c0028037 <__divdf3+0x2d3>
c002802d:	85 db                	test   ebx,ebx
c002802f:	0f 95 c3             	setne  bl
c0028032:	0f b6 db             	movzx  ebx,bl
c0028035:	eb 1a                	jmp    c0028051 <__divdf3+0x2ed>
c0028037:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002803a:	89 d7                	mov    edi,edx
c002803c:	d3 e7                	shl    edi,cl
c002803e:	89 f9                	mov    ecx,edi
c0028040:	09 d9                	or     ecx,ebx
c0028042:	0f 95 c3             	setne  bl
c0028045:	0f b6 db             	movzx  ebx,bl
c0028048:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002804d:	29 c1                	sub    ecx,eax
c002804f:	d3 ea                	shr    edx,cl
c0028051:	09 d3                	or     ebx,edx
c0028053:	31 c0                	xor    eax,eax
c0028055:	eb 3a                	jmp    c0028091 <__divdf3+0x32d>
c0028057:	83 c0 1f             	add    eax,0x1f
c002805a:	89 d7                	mov    edi,edx
c002805c:	88 c1                	mov    cl,al
c002805e:	d3 e7                	shl    edi,cl
c0028060:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028063:	89 df                	mov    edi,ebx
c0028065:	89 f1                	mov    ecx,esi
c0028067:	d3 ef                	shr    edi,cl
c0028069:	89 f9                	mov    ecx,edi
c002806b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002806e:	09 cf                	or     edi,ecx
c0028070:	88 c1                	mov    cl,al
c0028072:	d3 e3                	shl    ebx,cl
c0028074:	85 db                	test   ebx,ebx
c0028076:	0f 95 c3             	setne  bl
c0028079:	0f b6 db             	movzx  ebx,bl
c002807c:	09 fb                	or     ebx,edi
c002807e:	89 f1                	mov    ecx,esi
c0028080:	d3 ea                	shr    edx,cl
c0028082:	31 c0                	xor    eax,eax
c0028084:	eb 0d                	jmp    c0028093 <__divdf3+0x32f>
c0028086:	b8 ff 07 00 00       	mov    eax,0x7ff
c002808b:	eb 02                	jmp    c002808f <__divdf3+0x32b>
c002808d:	31 c0                	xor    eax,eax
c002808f:	31 db                	xor    ebx,ebx
c0028091:	31 d2                	xor    edx,edx
c0028093:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028096:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028099:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002809f:	09 c8                	or     eax,ecx
c00280a1:	c1 e0 14             	shl    eax,0x14
c00280a4:	89 d1                	mov    ecx,edx
c00280a6:	c1 e9 0b             	shr    ecx,0xb
c00280a9:	09 c8                	or     eax,ecx
c00280ab:	89 c6                	mov    esi,eax
c00280ad:	89 d9                	mov    ecx,ebx
c00280af:	c1 e9 0b             	shr    ecx,0xb
c00280b2:	c1 e2 15             	shl    edx,0x15
c00280b5:	09 ca                	or     edx,ecx
c00280b7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00280bd:	0f 95 c0             	setne  al
c00280c0:	09 c1                	or     ecx,eax
c00280c2:	83 e1 01             	and    ecx,0x1
c00280c5:	c1 eb 0a             	shr    ebx,0xa
c00280c8:	21 cb                	and    ebx,ecx
c00280ca:	01 d3                	add    ebx,edx
c00280cc:	89 d8                	mov    eax,ebx
c00280ce:	83 d6 00             	adc    esi,0x0
c00280d1:	89 f2                	mov    edx,esi
c00280d3:	89 c7                	mov    edi,eax
c00280d5:	89 d1                	mov    ecx,edx
c00280d7:	89 f8                	mov    eax,edi
c00280d9:	89 ca                	mov    edx,ecx
c00280db:	83 c4 2c             	add    esp,0x2c
c00280de:	5b                   	pop    ebx
c00280df:	5e                   	pop    esi
c00280e0:	5f                   	pop    edi
c00280e1:	5d                   	pop    ebp
c00280e2:	c3                   	ret    

c00280e3 <__floatsidf>:
c00280e3:	55                   	push   ebp
c00280e4:	89 e5                	mov    ebp,esp
c00280e6:	56                   	push   esi
c00280e7:	53                   	push   ebx
c00280e8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00280eb:	85 db                	test   ebx,ebx
c00280ed:	7e 15                	jle    c0028104 <__floatsidf+0x21>
c00280ef:	0f bd cb             	bsr    ecx,ebx
c00280f2:	83 f1 1f             	xor    ecx,0x1f
c00280f5:	d3 e3                	shl    ebx,cl
c00280f7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00280fd:	b8 1e 04 00 00       	mov    eax,0x41e
c0028102:	eb 21                	jmp    c0028125 <__floatsidf+0x42>
c0028104:	b8 00 00 00 00       	mov    eax,0x0
c0028109:	ba 00 00 00 00       	mov    edx,0x0
c002810e:	74 2a                	je     c002813a <__floatsidf+0x57>
c0028110:	f7 db                	neg    ebx
c0028112:	0f bd cb             	bsr    ecx,ebx
c0028115:	83 f1 1f             	xor    ecx,0x1f
c0028118:	d3 e3                	shl    ebx,cl
c002811a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028120:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028125:	29 c8                	sub    eax,ecx
c0028127:	c1 e0 14             	shl    eax,0x14
c002812a:	89 c1                	mov    ecx,eax
c002812c:	89 de                	mov    esi,ebx
c002812e:	c1 ee 0b             	shr    esi,0xb
c0028131:	09 f1                	or     ecx,esi
c0028133:	89 ca                	mov    edx,ecx
c0028135:	c1 e3 15             	shl    ebx,0x15
c0028138:	89 d8                	mov    eax,ebx
c002813a:	5b                   	pop    ebx
c002813b:	5e                   	pop    esi
c002813c:	5d                   	pop    ebp
c002813d:	c3                   	ret    

c002813e <__floatunsidf>:
c002813e:	55                   	push   ebp
c002813f:	89 e5                	mov    ebp,esp
c0028141:	56                   	push   esi
c0028142:	53                   	push   ebx
c0028143:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028146:	85 db                	test   ebx,ebx
c0028148:	74 2a                	je     c0028174 <__floatunsidf+0x36>
c002814a:	0f bd cb             	bsr    ecx,ebx
c002814d:	83 f1 1f             	xor    ecx,0x1f
c0028150:	d3 e3                	shl    ebx,cl
c0028152:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028158:	b8 1e 04 00 00       	mov    eax,0x41e
c002815d:	29 c8                	sub    eax,ecx
c002815f:	c1 e0 14             	shl    eax,0x14
c0028162:	89 c1                	mov    ecx,eax
c0028164:	89 de                	mov    esi,ebx
c0028166:	c1 ee 0b             	shr    esi,0xb
c0028169:	09 f1                	or     ecx,esi
c002816b:	89 ca                	mov    edx,ecx
c002816d:	c1 e3 15             	shl    ebx,0x15
c0028170:	89 d8                	mov    eax,ebx
c0028172:	eb 04                	jmp    c0028178 <__floatunsidf+0x3a>
c0028174:	31 c0                	xor    eax,eax
c0028176:	31 d2                	xor    edx,edx
c0028178:	5b                   	pop    ebx
c0028179:	5e                   	pop    esi
c002817a:	5d                   	pop    ebp
c002817b:	c3                   	ret    

c002817c <__fixdfsi>:
c002817c:	55                   	push   ebp
c002817d:	89 e5                	mov    ebp,esp
c002817f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028182:	89 d1                	mov    ecx,edx
c0028184:	c1 e1 0b             	shl    ecx,0xb
c0028187:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002818d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028190:	c1 e8 15             	shr    eax,0x15
c0028193:	09 c1                	or     ecx,eax
c0028195:	c1 fa 14             	sar    edx,0x14
c0028198:	78 1f                	js     c00281b9 <__fixdfsi+0x3d>
c002819a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00281a0:	31 c0                	xor    eax,eax
c00281a2:	83 fa 1e             	cmp    edx,0x1e
c00281a5:	77 40                	ja     c00281e7 <__fixdfsi+0x6b>
c00281a7:	89 c8                	mov    eax,ecx
c00281a9:	0d 00 00 00 80       	or     eax,0x80000000
c00281ae:	b9 1f 00 00 00       	mov    ecx,0x1f
c00281b3:	29 d1                	sub    ecx,edx
c00281b5:	d3 e8                	shr    eax,cl
c00281b7:	eb 2e                	jmp    c00281e7 <__fixdfsi+0x6b>
c00281b9:	31 c0                	xor    eax,eax
c00281bb:	81 c2 01 04 00 00    	add    edx,0x401
c00281c1:	78 24                	js     c00281e7 <__fixdfsi+0x6b>
c00281c3:	83 fa 1e             	cmp    edx,0x1e
c00281c6:	7e 09                	jle    c00281d1 <__fixdfsi+0x55>
c00281c8:	83 fa 1f             	cmp    edx,0x1f
c00281cb:	75 18                	jne    c00281e5 <__fixdfsi+0x69>
c00281cd:	85 c9                	test   ecx,ecx
c00281cf:	75 14                	jne    c00281e5 <__fixdfsi+0x69>
c00281d1:	89 c8                	mov    eax,ecx
c00281d3:	0d 00 00 00 80       	or     eax,0x80000000
c00281d8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00281dd:	29 d1                	sub    ecx,edx
c00281df:	d3 e8                	shr    eax,cl
c00281e1:	f7 d8                	neg    eax
c00281e3:	eb 02                	jmp    c00281e7 <__fixdfsi+0x6b>
c00281e5:	31 c0                	xor    eax,eax
c00281e7:	5d                   	pop    ebp
c00281e8:	c3                   	ret    

c00281e9 <__fixunsdfsi>:
c00281e9:	55                   	push   ebp
c00281ea:	89 e5                	mov    ebp,esp
c00281ec:	53                   	push   ebx
c00281ed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00281f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00281f3:	89 d3                	mov    ebx,edx
c00281f5:	c1 fb 14             	sar    ebx,0x14
c00281f8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00281fe:	31 c0                	xor    eax,eax
c0028200:	83 fb 1f             	cmp    ebx,0x1f
c0028203:	77 1d                	ja     c0028222 <__fixunsdfsi+0x39>
c0028205:	89 d0                	mov    eax,edx
c0028207:	c1 e0 0b             	shl    eax,0xb
c002820a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002820f:	c1 e9 15             	shr    ecx,0x15
c0028212:	09 c8                	or     eax,ecx
c0028214:	0d 00 00 00 80       	or     eax,0x80000000
c0028219:	b9 1f 00 00 00       	mov    ecx,0x1f
c002821e:	29 d9                	sub    ecx,ebx
c0028220:	d3 e8                	shr    eax,cl
c0028222:	5b                   	pop    ebx
c0028223:	5d                   	pop    ebp
c0028224:	c3                   	ret    

c0028225 <__cmpdf2>:
c0028225:	55                   	push   ebp
c0028226:	89 e5                	mov    ebp,esp
c0028228:	57                   	push   edi
c0028229:	56                   	push   esi
c002822a:	53                   	push   ebx
c002822b:	83 ec 0c             	sub    esp,0xc
c002822e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028231:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028234:	89 ca                	mov    edx,ecx
c0028236:	c1 ea 14             	shr    edx,0x14
c0028239:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002823f:	89 cb                	mov    ebx,ecx
c0028241:	c1 fb 1f             	sar    ebx,0x1f
c0028244:	31 da                	xor    edx,ebx
c0028246:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028249:	89 df                	mov    edi,ebx
c002824b:	c1 e7 0b             	shl    edi,0xb
c002824e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028251:	c1 e1 0b             	shl    ecx,0xb
c0028254:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002825a:	c1 eb 15             	shr    ebx,0x15
c002825d:	09 d9                	or     ecx,ebx
c002825f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028262:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028265:	89 ce                	mov    esi,ecx
c0028267:	c1 ee 14             	shr    esi,0x14
c002826a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028270:	89 cb                	mov    ebx,ecx
c0028272:	c1 fb 1f             	sar    ebx,0x1f
c0028275:	31 de                	xor    esi,ebx
c0028277:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002827a:	89 df                	mov    edi,ebx
c002827c:	c1 e7 0b             	shl    edi,0xb
c002827f:	c1 e1 0b             	shl    ecx,0xb
c0028282:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028288:	c1 eb 15             	shr    ebx,0x15
c002828b:	09 d9                	or     ecx,ebx
c002828d:	89 d3                	mov    ebx,edx
c002828f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028295:	43                   	inc    ebx
c0028296:	83 fb 01             	cmp    ebx,0x1
c0028299:	77 08                	ja     c00282a3 <__cmpdf2+0x7e>
c002829b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002829e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00282a1:	75 68                	jne    c002830b <__cmpdf2+0xe6>
c00282a3:	89 f3                	mov    ebx,esi
c00282a5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00282ab:	43                   	inc    ebx
c00282ac:	83 fb 01             	cmp    ebx,0x1
c00282af:	77 06                	ja     c00282b7 <__cmpdf2+0x92>
c00282b1:	89 fb                	mov    ebx,edi
c00282b3:	09 cb                	or     ebx,ecx
c00282b5:	75 54                	jne    c002830b <__cmpdf2+0xe6>
c00282b7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00282ba:	09 f8                	or     eax,edi
c00282bc:	09 c8                	or     eax,ecx
c00282be:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00282c1:	75 12                	jne    c00282d5 <__cmpdf2+0xb0>
c00282c3:	8d 42 01             	lea    eax,[edx+0x1]
c00282c6:	83 f8 01             	cmp    eax,0x1
c00282c9:	77 0a                	ja     c00282d5 <__cmpdf2+0xb0>
c00282cb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00282ce:	31 c0                	xor    eax,eax
c00282d0:	83 fb 01             	cmp    ebx,0x1
c00282d3:	76 36                	jbe    c002830b <__cmpdf2+0xe6>
c00282d5:	b8 01 00 00 00       	mov    eax,0x1
c00282da:	39 f2                	cmp    edx,esi
c00282dc:	7f 2d                	jg     c002830b <__cmpdf2+0xe6>
c00282de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00282e3:	7c 26                	jl     c002830b <__cmpdf2+0xe6>
c00282e5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00282e8:	77 07                	ja     c00282f1 <__cmpdf2+0xcc>
c00282ea:	72 16                	jb     c0028302 <__cmpdf2+0xdd>
c00282ec:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00282ef:	76 0a                	jbe    c00282fb <__cmpdf2+0xd6>
c00282f1:	89 d0                	mov    eax,edx
c00282f3:	c1 f8 1f             	sar    eax,0x1f
c00282f6:	83 c8 01             	or     eax,0x1
c00282f9:	eb 10                	jmp    c002830b <__cmpdf2+0xe6>
c00282fb:	b8 00 00 00 00       	mov    eax,0x0
c0028300:	73 09                	jae    c002830b <__cmpdf2+0xe6>
c0028302:	89 d0                	mov    eax,edx
c0028304:	c1 f8 1f             	sar    eax,0x1f
c0028307:	83 e0 02             	and    eax,0x2
c002830a:	48                   	dec    eax
c002830b:	83 c4 0c             	add    esp,0xc
c002830e:	5b                   	pop    ebx
c002830f:	5e                   	pop    esi
c0028310:	5f                   	pop    edi
c0028311:	5d                   	pop    ebp
c0028312:	c3                   	ret    

c0028313 <__eqdf2>:
c0028313:	55                   	push   ebp
c0028314:	89 e5                	mov    ebp,esp
c0028316:	50                   	push   eax
c0028317:	6a 01                	push   0x1
c0028319:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002831c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002831f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028322:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028325:	e8 fb fe ff ff       	call   c0028225 <__cmpdf2>
c002832a:	83 c4 18             	add    esp,0x18
c002832d:	c9                   	leave  
c002832e:	c3                   	ret    

c002832f <__nedf2>:
c002832f:	eb e2                	jmp    c0028313 <__eqdf2>

c0028331 <__gtdf2>:
c0028331:	55                   	push   ebp
c0028332:	89 e5                	mov    ebp,esp
c0028334:	50                   	push   eax
c0028335:	6a ff                	push   0xffffffff
c0028337:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002833a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002833d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028340:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028343:	e8 dd fe ff ff       	call   c0028225 <__cmpdf2>
c0028348:	83 c4 18             	add    esp,0x18
c002834b:	c9                   	leave  
c002834c:	c3                   	ret    

c002834d <__gedf2>:
c002834d:	eb e2                	jmp    c0028331 <__gtdf2>

c002834f <__ltdf2>:
c002834f:	eb c2                	jmp    c0028313 <__eqdf2>

c0028351 <__ledf2>:
c0028351:	eb c0                	jmp    c0028313 <__eqdf2>

c0028353 <__truncdfsf2>:
c0028353:	55                   	push   ebp
c0028354:	89 e5                	mov    ebp,esp
c0028356:	57                   	push   edi
c0028357:	56                   	push   esi
c0028358:	53                   	push   ebx
c0028359:	83 ec 0c             	sub    esp,0xc
c002835c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002835f:	89 d1                	mov    ecx,edx
c0028361:	c1 f9 14             	sar    ecx,0x14
c0028364:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028367:	89 df                	mov    edi,ebx
c0028369:	c1 e7 0b             	shl    edi,0xb
c002836c:	89 d0                	mov    eax,edx
c002836e:	c1 e0 0b             	shl    eax,0xb
c0028371:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028376:	c1 eb 15             	shr    ebx,0x15
c0028379:	09 d8                	or     eax,ebx
c002837b:	89 cb                	mov    ebx,ecx
c002837d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028383:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028389:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002838f:	0f 86 9e 00 00 00    	jbe    c0028433 <__truncdfsf2+0xe0>
c0028395:	85 db                	test   ebx,ebx
c0028397:	75 0a                	jne    c00283a3 <__truncdfsf2+0x50>
c0028399:	c1 fa 17             	sar    edx,0x17
c002839c:	30 d2                	xor    dl,dl
c002839e:	e9 84 00 00 00       	jmp    c0028427 <__truncdfsf2+0xd4>
c00283a3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00283a9:	83 fe 83             	cmp    esi,0xffffff83
c00283ac:	7d 4b                	jge    c00283f9 <__truncdfsf2+0xa6>
c00283ae:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00283b3:	29 f1                	sub    ecx,esi
c00283b5:	83 f9 1f             	cmp    ecx,0x1f
c00283b8:	7f 6b                	jg     c0028425 <__truncdfsf2+0xd2>
c00283ba:	0d 00 00 00 80       	or     eax,0x80000000
c00283bf:	89 c3                	mov    ebx,eax
c00283c1:	d3 eb                	shr    ebx,cl
c00283c3:	be 01 00 00 00       	mov    esi,0x1
c00283c8:	d3 e6                	shl    esi,cl
c00283ca:	4e                   	dec    esi
c00283cb:	21 f0                	and    eax,esi
c00283cd:	09 f8                	or     eax,edi
c00283cf:	0f 95 c0             	setne  al
c00283d2:	0f b6 c0             	movzx  eax,al
c00283d5:	09 c3                	or     ebx,eax
c00283d7:	89 d9                	mov    ecx,ebx
c00283d9:	c1 e9 08             	shr    ecx,0x8
c00283dc:	f6 c3 7f             	test   bl,0x7f
c00283df:	0f 95 c0             	setne  al
c00283e2:	09 c8                	or     eax,ecx
c00283e4:	83 e0 01             	and    eax,0x1
c00283e7:	c1 eb 07             	shr    ebx,0x7
c00283ea:	21 c3                	and    ebx,eax
c00283ec:	81 e2 00 00 00 80    	and    edx,0x80000000
c00283f2:	09 d1                	or     ecx,edx
c00283f4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00283f7:	eb 76                	jmp    c002846f <__truncdfsf2+0x11c>
c00283f9:	83 c6 80             	add    esi,0xffffff80
c00283fc:	7e 1d                	jle    c002841b <__truncdfsf2+0xc8>
c00283fe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028404:	75 0b                	jne    c0028411 <__truncdfsf2+0xbe>
c0028406:	09 f8                	or     eax,edi
c0028408:	74 09                	je     c0028413 <__truncdfsf2+0xc0>
c002840a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002840f:	eb 02                	jmp    c0028413 <__truncdfsf2+0xc0>
c0028411:	31 c0                	xor    eax,eax
c0028413:	c1 fa 17             	sar    edx,0x17
c0028416:	80 ca ff             	or     dl,0xff
c0028419:	eb 0e                	jmp    c0028429 <__truncdfsf2+0xd6>
c002841b:	c1 fa 1f             	sar    edx,0x1f
c002841e:	c1 e2 08             	shl    edx,0x8
c0028421:	09 ca                	or     edx,ecx
c0028423:	eb 04                	jmp    c0028429 <__truncdfsf2+0xd6>
c0028425:	31 d2                	xor    edx,edx
c0028427:	31 c0                	xor    eax,eax
c0028429:	c1 e2 17             	shl    edx,0x17
c002842c:	c1 e8 08             	shr    eax,0x8
c002842f:	09 d0                	or     eax,edx
c0028431:	eb 3c                	jmp    c002846f <__truncdfsf2+0x11c>
c0028433:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028439:	89 ca                	mov    edx,ecx
c002843b:	c1 fa 0b             	sar    edx,0xb
c002843e:	c1 e2 08             	shl    edx,0x8
c0028441:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028444:	31 db                	xor    ebx,ebx
c0028446:	85 ff                	test   edi,edi
c0028448:	0f 95 c3             	setne  bl
c002844b:	09 d8                	or     eax,ebx
c002844d:	89 c3                	mov    ebx,eax
c002844f:	c1 eb 08             	shr    ebx,0x8
c0028452:	a8 7f                	test   al,0x7f
c0028454:	0f 95 c2             	setne  dl
c0028457:	89 d6                	mov    esi,edx
c0028459:	09 de                	or     esi,ebx
c002845b:	83 e6 01             	and    esi,0x1
c002845e:	c1 e8 07             	shr    eax,0x7
c0028461:	21 f0                	and    eax,esi
c0028463:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028466:	09 ca                	or     edx,ecx
c0028468:	c1 e2 17             	shl    edx,0x17
c002846b:	09 da                	or     edx,ebx
c002846d:	01 d0                	add    eax,edx
c002846f:	83 c4 0c             	add    esp,0xc
c0028472:	5b                   	pop    ebx
c0028473:	5e                   	pop    esi
c0028474:	5f                   	pop    edi
c0028475:	5d                   	pop    ebp
c0028476:	c3                   	ret    

c0028477 <__extendsfdf2>:
c0028477:	55                   	push   ebp
c0028478:	89 e5                	mov    ebp,esp
c002847a:	57                   	push   edi
c002847b:	56                   	push   esi
c002847c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002847f:	89 d1                	mov    ecx,edx
c0028481:	c1 f9 17             	sar    ecx,0x17
c0028484:	c1 e2 08             	shl    edx,0x8
c0028487:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002848d:	89 c8                	mov    eax,ecx
c002848f:	80 e4 f8             	and    ah,0xf8
c0028492:	8d 71 01             	lea    esi,[ecx+0x1]
c0028495:	81 e6 fe 00 00 00    	and    esi,0xfe
c002849b:	75 27                	jne    c00284c4 <__extendsfdf2+0x4d>
c002849d:	81 e1 ff 00 00 00    	and    ecx,0xff
c00284a3:	75 18                	jne    c00284bd <__extendsfdf2+0x46>
c00284a5:	85 d2                	test   edx,edx
c00284a7:	74 20                	je     c00284c9 <__extendsfdf2+0x52>
c00284a9:	41                   	inc    ecx
c00284aa:	01 d2                	add    edx,edx
c00284ac:	79 fb                	jns    c00284a9 <__extendsfdf2+0x32>
c00284ae:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00284b4:	29 c8                	sub    eax,ecx
c00284b6:	05 81 03 00 00       	add    eax,0x381
c00284bb:	eb 0c                	jmp    c00284c9 <__extendsfdf2+0x52>
c00284bd:	05 00 07 00 00       	add    eax,0x700
c00284c2:	eb 05                	jmp    c00284c9 <__extendsfdf2+0x52>
c00284c4:	05 80 03 00 00       	add    eax,0x380
c00284c9:	c1 e0 14             	shl    eax,0x14
c00284cc:	89 c1                	mov    ecx,eax
c00284ce:	89 d0                	mov    eax,edx
c00284d0:	c1 e8 0b             	shr    eax,0xb
c00284d3:	09 c1                	or     ecx,eax
c00284d5:	c1 e2 15             	shl    edx,0x15
c00284d8:	89 d0                	mov    eax,edx
c00284da:	89 ca                	mov    edx,ecx
c00284dc:	5e                   	pop    esi
c00284dd:	5f                   	pop    edi
c00284de:	5d                   	pop    ebp
c00284df:	c3                   	ret    

c00284e0 <fabs>:
c00284e0:	83 ec 0c             	sub    esp,0xc
c00284e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00284ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00284ee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00284f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00284f7:	dd 04 24             	fld    QWORD PTR [esp]
c00284fa:	83 c4 0c             	add    esp,0xc
c00284fd:	c3                   	ret    
c00284fe:	66 90                	xchg   ax,ax

c0028500 <lrint>:
c0028500:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028504:	83 ec 04             	sub    esp,0x4
c0028507:	db 1c 24             	fistp  DWORD PTR [esp]
c002850a:	58                   	pop    eax
c002850b:	c3                   	ret    

c002850c <lrintf>:
c002850c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028510:	83 ec 04             	sub    esp,0x4
c0028513:	db 1c 24             	fistp  DWORD PTR [esp]
c0028516:	58                   	pop    eax
c0028517:	c3                   	ret    

Disassembly of section .init:

c0028518 <_init>:
c0028518:	55                   	push   ebp
c0028519:	89 e5                	mov    ebp,esp
c002851b:	e8 f8 7b fd ff       	call   c0000118 <frame_dummy>
c0028520:	e8 63 e0 ff ff       	call   c0026588 <__do_global_ctors_aux>
c0028525:	5d                   	pop    ebp
c0028526:	c3                   	ret    

Disassembly of section .fini:

c0028527 <_fini>:
c0028527:	55                   	push   ebp
c0028528:	89 e5                	mov    ebp,esp
c002852a:	e8 79 7b fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002852f:	5d                   	pop    ebp
c0028530:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028532 <Computer::~Computer()>:
c0028532:	83 ec 0c             	sub    esp,0xc
c0028535:	ba 68 a0 02 c0       	mov    edx,0xc002a068
c002853a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002853e:	89 10                	mov    DWORD PTR [eax],edx
c0028540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028544:	83 ec 0c             	sub    esp,0xc
c0028547:	50                   	push   eax
c0028548:	e8 47 bb fe ff       	call   c0014094 <Device::~Device()>
c002854d:	83 c4 10             	add    esp,0x10
c0028550:	90                   	nop
c0028551:	83 c4 0c             	add    esp,0xc
c0028554:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028556 <Computer::~Computer()>:
c0028556:	83 ec 0c             	sub    esp,0xc
c0028559:	83 ec 0c             	sub    esp,0xc
c002855c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028560:	e8 cd ff ff ff       	call   c0028532 <Computer::~Computer()>
c0028565:	83 c4 10             	add    esp,0x10
c0028568:	83 ec 08             	sub    esp,0x8
c002856b:	68 ec 01 00 00       	push   0x1ec
c0028570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028574:	e8 43 a7 fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0028579:	83 c4 10             	add    esp,0x10
c002857c:	83 c4 0c             	add    esp,0xc
c002857f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028580 <idleCommon()>:
c0028580:	83 ec 0c             	sub    esp,0xc
c0028583:	e8 e9 56 ff ff       	call   c001dc71 <lockScheduler()>
c0028588:	e8 1f 5a ff ff       	call   c001dfac <schedule()>
c002858d:	83 c4 0c             	add    esp,0xc
c0028590:	e9 de 56 ff ff       	jmp    c001dc73 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028596 <LinkedList<UnixFile>::~LinkedList()>:
c0028596:	90                   	nop
c0028597:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028598 <LinkedList<UnixFile>::LinkedList()>:
c0028598:	83 ec 0c             	sub    esp,0xc
c002859b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002859f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285db:	83 ec 0c             	sub    esp,0xc
c00285de:	68 26 a3 02 c0       	push   0xc002a326
c00285e3:	e8 b4 a7 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00285e8:	83 c4 10             	add    esp,0x10
c00285eb:	90                   	nop
c00285ec:	83 c4 0c             	add    esp,0xc
c00285ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00285f0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00285f0:	83 ec 0c             	sub    esp,0xc
c00285f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00285f8:	75 10                	jne    c002860a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00285fa:	83 ec 0c             	sub    esp,0xc
c00285fd:	68 40 a3 02 c0       	push   0xc002a340
c0028602:	e8 70 1e ff ff       	call   c001a477 <Krnl::panic(char const*)>
c0028607:	83 c4 10             	add    esp,0x10
c002860a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002860e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028610:	85 c0                	test   eax,eax
c0028612:	74 34                	je     c0028648 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028618:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002861b:	85 c0                	test   eax,eax
c002861d:	74 29                	je     c0028648 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002861f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028623:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028626:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002862a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002862d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028631:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028635:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002863c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002863f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028646:	eb 65                	jmp    c00286ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002864c:	8b 00                	mov    eax,DWORD PTR [eax]
c002864e:	85 c0                	test   eax,eax
c0028650:	75 4b                	jne    c002869d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028656:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028659:	85 c0                	test   eax,eax
c002865b:	75 40                	jne    c002869d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002865d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028665:	89 10                	mov    DWORD PTR [eax],edx
c0028667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002866b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002866f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028676:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028679:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028684:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028687:	85 c0                	test   eax,eax
c0028689:	74 22                	je     c00286ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002868b:	83 ec 0c             	sub    esp,0xc
c002868e:	68 62 a3 02 c0       	push   0xc002a362
c0028693:	e8 df 1d ff ff       	call   c001a477 <Krnl::panic(char const*)>
c0028698:	83 c4 10             	add    esp,0x10
c002869b:	eb 10                	jmp    c00286ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002869d:	83 ec 0c             	sub    esp,0xc
c00286a0:	68 6c a3 02 c0       	push   0xc002a36c
c00286a5:	e8 cd 1d ff ff       	call   c001a477 <Krnl::panic(char const*)>
c00286aa:	83 c4 10             	add    esp,0x10
c00286ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286b4:	8d 50 01             	lea    edx,[eax+0x1]
c00286b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00286be:	90                   	nop
c00286bf:	83 c4 0c             	add    esp,0xc
c00286c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00286c4 <LinkedList<UnixFile>::getFirstElement()>:
c00286c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00286ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00286cc <LinkedList<UnixFile>::removeFirst()>:
c00286cc:	83 ec 0c             	sub    esp,0xc
c00286cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00286d5:	85 c0                	test   eax,eax
c00286d7:	75 12                	jne    c00286eb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00286d9:	83 ec 0c             	sub    esp,0xc
c00286dc:	68 78 a3 02 c0       	push   0xc002a378
c00286e1:	e8 91 1d ff ff       	call   c001a477 <Krnl::panic(char const*)>
c00286e6:	83 c4 10             	add    esp,0x10
c00286e9:	eb 7e                	jmp    c0028769 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00286eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286f5:	85 c0                	test   eax,eax
c00286f7:	74 10                	je     c0028709 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00286f9:	83 ec 0c             	sub    esp,0xc
c00286fc:	68 c3 a3 02 c0       	push   0xc002a3c3
c0028701:	e8 71 1d ff ff       	call   c001a477 <Krnl::panic(char const*)>
c0028706:	83 c4 10             	add    esp,0x10
c0028709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870d:	8b 00                	mov    eax,DWORD PTR [eax]
c002870f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028712:	85 c0                	test   eax,eax
c0028714:	75 33                	jne    c0028749 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028724:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002872b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028732:	83 f8 01             	cmp    eax,0x1
c0028735:	74 21                	je     c0028758 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028737:	83 ec 0c             	sub    esp,0xc
c002873a:	68 9c a3 02 c0       	push   0xc002a39c
c002873f:	e8 33 1d ff ff       	call   c001a477 <Krnl::panic(char const*)>
c0028744:	83 c4 10             	add    esp,0x10
c0028747:	eb 0f                	jmp    c0028758 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874d:	8b 00                	mov    eax,DWORD PTR [eax]
c002874f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028756:	89 10                	mov    DWORD PTR [eax],edx
c0028758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002875f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028766:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028769:	83 c4 0c             	add    esp,0xc
c002876c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002876e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002876e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028772:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028775:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028776 <DriverlessDevice::~DriverlessDevice()>:
c0028776:	ba c4 aa 02 c0       	mov    edx,0xc002aac4
c002877b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002877f:	89 10                	mov    DWORD PTR [eax],edx
c0028781:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028785:	50                   	push   eax
c0028786:	e8 09 b9 fe ff       	call   c0014094 <Device::~Device()>
c002878b:	83 c4 04             	add    esp,0x4
c002878e:	90                   	nop
c002878f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028790 <DriverlessDevice::~DriverlessDevice()>:
c0028790:	83 ec 0c             	sub    esp,0xc
c0028793:	83 ec 0c             	sub    esp,0xc
c0028796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002879a:	e8 d7 ff ff ff       	call   c0028776 <DriverlessDevice::~DriverlessDevice()>
c002879f:	83 c4 10             	add    esp,0x10
c00287a2:	83 ec 08             	sub    esp,0x8
c00287a5:	68 58 01 00 00       	push   0x158
c00287aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287ae:	e8 09 a5 fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c00287b3:	83 c4 10             	add    esp,0x10
c00287b6:	83 c4 0c             	add    esp,0xc
c00287b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00287ba <LinkedList<Device>::addElement(Device*)>:
c00287ba:	83 ec 0c             	sub    esp,0xc
c00287bd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00287c2:	75 10                	jne    c00287d4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00287c4:	83 ec 0c             	sub    esp,0xc
c00287c7:	68 40 a3 02 c0       	push   0xc002a340
c00287cc:	e8 a6 1c ff ff       	call   c001a477 <Krnl::panic(char const*)>
c00287d1:	83 c4 10             	add    esp,0x10
c00287d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00287da:	85 c0                	test   eax,eax
c00287dc:	74 3a                	je     c0028818 <LinkedList<Device>::addElement(Device*)+0x5e>
c00287de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287e5:	85 c0                	test   eax,eax
c00287e7:	74 2f                	je     c0028818 <LinkedList<Device>::addElement(Device*)+0x5e>
c00287e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287f4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00287fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028802:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028809:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002880c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028816:	eb 68                	jmp    c0028880 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881c:	8b 00                	mov    eax,DWORD PTR [eax]
c002881e:	85 c0                	test   eax,eax
c0028820:	75 4e                	jne    c0028870 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028826:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028829:	85 c0                	test   eax,eax
c002882b:	75 43                	jne    c0028870 <LinkedList<Device>::addElement(Device*)+0xb6>
c002882d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028831:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028835:	89 10                	mov    DWORD PTR [eax],edx
c0028837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002883f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028846:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028849:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028857:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002885a:	85 c0                	test   eax,eax
c002885c:	74 22                	je     c0028880 <LinkedList<Device>::addElement(Device*)+0xc6>
c002885e:	83 ec 0c             	sub    esp,0xc
c0028861:	68 62 a3 02 c0       	push   0xc002a362
c0028866:	e8 0c 1c ff ff       	call   c001a477 <Krnl::panic(char const*)>
c002886b:	83 c4 10             	add    esp,0x10
c002886e:	eb 10                	jmp    c0028880 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028870:	83 ec 0c             	sub    esp,0xc
c0028873:	68 6c a3 02 c0       	push   0xc002a36c
c0028878:	e8 fa 1b ff ff       	call   c001a477 <Krnl::panic(char const*)>
c002887d:	83 c4 10             	add    esp,0x10
c0028880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028884:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028887:	8d 50 01             	lea    edx,[eax+0x1]
c002888a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028891:	90                   	nop
c0028892:	83 c4 0c             	add    esp,0xc
c0028895:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028896 <LinkedList<Device>::LinkedList()>:
c0028896:	83 ec 0c             	sub    esp,0xc
c0028899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288d9:	83 ec 0c             	sub    esp,0xc
c00288dc:	68 26 a3 02 c0       	push   0xc002a326
c00288e1:	e8 b6 a4 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c00288e6:	83 c4 10             	add    esp,0x10
c00288e9:	90                   	nop
c00288ea:	83 c4 0c             	add    esp,0xc
c00288ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00288ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00288f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00288f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00288fc:	85 c0                	test   eax,eax
c00288fe:	75 0e                	jne    c002890e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028904:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028907:	85 c0                	test   eax,eax
c0028909:	75 03                	jne    c002890e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002890b:	b0 01                	mov    al,0x1
c002890d:	c3                   	ret    
c002890e:	b0 00                	mov    al,0x0
c0028910:	90                   	nop
c0028911:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028912 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028912:	83 ec 0c             	sub    esp,0xc
c0028915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028919:	8b 00                	mov    eax,DWORD PTR [eax]
c002891b:	85 c0                	test   eax,eax
c002891d:	75 15                	jne    c0028934 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002891f:	83 ec 0c             	sub    esp,0xc
c0028922:	68 78 a3 02 c0       	push   0xc002a378
c0028927:	e8 4b 1b ff ff       	call   c001a477 <Krnl::panic(char const*)>
c002892c:	83 c4 10             	add    esp,0x10
c002892f:	e9 88 00 00 00       	jmp    c00289bc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028938:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002893b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002893e:	85 c0                	test   eax,eax
c0028940:	0f 95 c0             	setne  al
c0028943:	84 c0                	test   al,al
c0028945:	74 10                	je     c0028957 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028947:	83 ec 0c             	sub    esp,0xc
c002894a:	68 c3 a3 02 c0       	push   0xc002a3c3
c002894f:	e8 23 1b ff ff       	call   c001a477 <Krnl::panic(char const*)>
c0028954:	83 c4 10             	add    esp,0x10
c0028957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895b:	8b 00                	mov    eax,DWORD PTR [eax]
c002895d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028960:	85 c0                	test   eax,eax
c0028962:	0f 94 c0             	sete   al
c0028965:	84 c0                	test   al,al
c0028967:	74 33                	je     c002899c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028977:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002897e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028982:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028985:	83 f8 01             	cmp    eax,0x1
c0028988:	74 21                	je     c00289ab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002898a:	83 ec 0c             	sub    esp,0xc
c002898d:	68 9c a3 02 c0       	push   0xc002a39c
c0028992:	e8 e0 1a ff ff       	call   c001a477 <Krnl::panic(char const*)>
c0028997:	83 c4 10             	add    esp,0x10
c002899a:	eb 0f                	jmp    c00289ab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002899c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00289a2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00289a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a9:	89 10                	mov    DWORD PTR [eax],edx
c00289ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289b2:	8d 50 ff             	lea    edx,[eax-0x1]
c00289b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289bc:	83 c4 0c             	add    esp,0xc
c00289bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00289c0:	83 ec 0c             	sub    esp,0xc
c00289c3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00289c8:	75 10                	jne    c00289da <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00289ca:	83 ec 0c             	sub    esp,0xc
c00289cd:	68 40 a3 02 c0       	push   0xc002a340
c00289d2:	e8 a0 1a ff ff       	call   c001a477 <Krnl::panic(char const*)>
c00289d7:	83 c4 10             	add    esp,0x10
c00289da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289de:	8b 00                	mov    eax,DWORD PTR [eax]
c00289e0:	85 c0                	test   eax,eax
c00289e2:	74 34                	je     c0028a18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00289e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289eb:	85 c0                	test   eax,eax
c00289ed:	74 29                	je     c0028a18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00289ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289fa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00289fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a0f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a16:	eb 65                	jmp    c0028a7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a1e:	85 c0                	test   eax,eax
c0028a20:	75 4b                	jne    c0028a6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a29:	85 c0                	test   eax,eax
c0028a2b:	75 40                	jne    c0028a6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a35:	89 10                	mov    DWORD PTR [eax],edx
c0028a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a49:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a57:	85 c0                	test   eax,eax
c0028a59:	74 22                	je     c0028a7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a5b:	83 ec 0c             	sub    esp,0xc
c0028a5e:	68 62 a3 02 c0       	push   0xc002a362
c0028a63:	e8 0f 1a ff ff       	call   c001a477 <Krnl::panic(char const*)>
c0028a68:	83 c4 10             	add    esp,0x10
c0028a6b:	eb 10                	jmp    c0028a7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a6d:	83 ec 0c             	sub    esp,0xc
c0028a70:	68 6c a3 02 c0       	push   0xc002a36c
c0028a75:	e8 fd 19 ff ff       	call   c001a477 <Krnl::panic(char const*)>
c0028a7a:	83 c4 10             	add    esp,0x10
c0028a7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a84:	8d 50 01             	lea    edx,[eax+0x1]
c0028a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a8e:	90                   	nop
c0028a8f:	83 c4 0c             	add    esp,0xc
c0028a92:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028a94 <ACPI::~ACPI()>:
c0028a94:	83 ec 0c             	sub    esp,0xc
c0028a97:	ba 2c b4 02 c0       	mov    edx,0xc002b42c
c0028a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa0:	89 10                	mov    DWORD PTR [eax],edx
c0028aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa6:	83 ec 0c             	sub    esp,0xc
c0028aa9:	50                   	push   eax
c0028aaa:	e8 e5 b5 fe ff       	call   c0014094 <Device::~Device()>
c0028aaf:	83 c4 10             	add    esp,0x10
c0028ab2:	90                   	nop
c0028ab3:	83 c4 0c             	add    esp,0xc
c0028ab6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028ab8 <ACPI::~ACPI()>:
c0028ab8:	83 ec 0c             	sub    esp,0xc
c0028abb:	83 ec 0c             	sub    esp,0xc
c0028abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ac2:	e8 cd ff ff ff       	call   c0028a94 <ACPI::~ACPI()>
c0028ac7:	83 c4 10             	add    esp,0x10
c0028aca:	83 ec 08             	sub    esp,0x8
c0028acd:	68 68 12 00 00       	push   0x1268
c0028ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ad6:	e8 e1 a1 fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0028adb:	83 c4 10             	add    esp,0x10
c0028ade:	83 c4 0c             	add    esp,0xc
c0028ae1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028ae2 <CPU::~CPU()>:
c0028ae2:	83 ec 0c             	sub    esp,0xc
c0028ae5:	ba 1c b8 02 c0       	mov    edx,0xc002b81c
c0028aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aee:	89 10                	mov    DWORD PTR [eax],edx
c0028af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af4:	83 ec 0c             	sub    esp,0xc
c0028af7:	50                   	push   eax
c0028af8:	e8 97 b5 fe ff       	call   c0014094 <Device::~Device()>
c0028afd:	83 c4 10             	add    esp,0x10
c0028b00:	90                   	nop
c0028b01:	83 c4 0c             	add    esp,0xc
c0028b04:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028b06 <CPU::~CPU()>:
c0028b06:	83 ec 0c             	sub    esp,0xc
c0028b09:	83 ec 0c             	sub    esp,0xc
c0028b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b10:	e8 cd ff ff ff       	call   c0028ae2 <CPU::~CPU()>
c0028b15:	83 c4 10             	add    esp,0x10
c0028b18:	83 ec 08             	sub    esp,0x8
c0028b1b:	68 98 11 00 00       	push   0x1198
c0028b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b24:	e8 93 a1 fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0028b29:	83 c4 10             	add    esp,0x10
c0028b2c:	83 c4 0c             	add    esp,0xc
c0028b2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028b30 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028b30:	90                   	nop
c0028b31:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028b32 <ThreadControlBlock::ThreadControlBlock()>:
c0028b32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b36:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b41:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b4c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028b53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b57:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b62:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b6a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028b6e:	90                   	nop
c0028b6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028b70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028b70:	83 ec 0c             	sub    esp,0xc
c0028b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b77:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028bb3:	83 ec 0c             	sub    esp,0xc
c0028bb6:	68 26 a3 02 c0       	push   0xc002a326
c0028bbb:	e8 dc a1 fe ff       	call   c0012d9c <Dbg::kprintf(char const*, ...)>
c0028bc0:	83 c4 10             	add    esp,0x10
c0028bc3:	90                   	nop
c0028bc4:	83 c4 0c             	add    esp,0xc
c0028bc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028bc8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028bc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028bcc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028bcf:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028bd0 <Vm::_FPUState::_FPUState()>:
c0028bd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bd4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028bdb:	90                   	nop
c0028bdc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028bde <PCI::~PCI()>:
c0028bde:	83 ec 0c             	sub    esp,0xc
c0028be1:	ba a8 c8 02 c0       	mov    edx,0xc002c8a8
c0028be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bea:	89 10                	mov    DWORD PTR [eax],edx
c0028bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf0:	83 ec 0c             	sub    esp,0xc
c0028bf3:	50                   	push   eax
c0028bf4:	e8 73 ae fe ff       	call   c0013a6c <Bus::~Bus()>
c0028bf9:	83 c4 10             	add    esp,0x10
c0028bfc:	90                   	nop
c0028bfd:	83 c4 0c             	add    esp,0xc
c0028c00:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028c02 <PCI::~PCI()>:
c0028c02:	83 ec 0c             	sub    esp,0xc
c0028c05:	83 ec 0c             	sub    esp,0xc
c0028c08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c0c:	e8 cd ff ff ff       	call   c0028bde <PCI::~PCI()>
c0028c11:	83 c4 10             	add    esp,0x10
c0028c14:	83 ec 08             	sub    esp,0x8
c0028c17:	68 58 01 00 00       	push   0x158
c0028c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c20:	e8 97 a0 fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0028c25:	83 c4 10             	add    esp,0x10
c0028c28:	83 c4 0c             	add    esp,0xc
c0028c2b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028c2c <IDE::~IDE()>:
c0028c2c:	83 ec 0c             	sub    esp,0xc
c0028c2f:	ba 0c cb 02 c0       	mov    edx,0xc002cb0c
c0028c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c38:	89 10                	mov    DWORD PTR [eax],edx
c0028c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3e:	83 ec 0c             	sub    esp,0xc
c0028c41:	50                   	push   eax
c0028c42:	e8 3d b9 fe ff       	call   c0014584 <HardDiskController::~HardDiskController()>
c0028c47:	83 c4 10             	add    esp,0x10
c0028c4a:	90                   	nop
c0028c4b:	83 c4 0c             	add    esp,0xc
c0028c4e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028c50 <IDE::~IDE()>:
c0028c50:	83 ec 0c             	sub    esp,0xc
c0028c53:	83 ec 0c             	sub    esp,0xc
c0028c56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c5a:	e8 cd ff ff ff       	call   c0028c2c <IDE::~IDE()>
c0028c5f:	83 c4 10             	add    esp,0x10
c0028c62:	83 ec 08             	sub    esp,0x8
c0028c65:	68 70 02 00 00       	push   0x270
c0028c6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c6e:	e8 49 a0 fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0028c73:	83 c4 10             	add    esp,0x10
c0028c76:	83 c4 0c             	add    esp,0xc
c0028c79:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028c7a <SATABus::~SATABus()>:
c0028c7a:	83 ec 0c             	sub    esp,0xc
c0028c7d:	ba ec cb 02 c0       	mov    edx,0xc002cbec
c0028c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c86:	89 10                	mov    DWORD PTR [eax],edx
c0028c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c8c:	83 ec 0c             	sub    esp,0xc
c0028c8f:	50                   	push   eax
c0028c90:	e8 ef b8 fe ff       	call   c0014584 <HardDiskController::~HardDiskController()>
c0028c95:	83 c4 10             	add    esp,0x10
c0028c98:	90                   	nop
c0028c99:	83 c4 0c             	add    esp,0xc
c0028c9c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028c9e <SATABus::~SATABus()>:
c0028c9e:	83 ec 0c             	sub    esp,0xc
c0028ca1:	83 ec 0c             	sub    esp,0xc
c0028ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca8:	e8 cd ff ff ff       	call   c0028c7a <SATABus::~SATABus()>
c0028cad:	83 c4 10             	add    esp,0x10
c0028cb0:	83 ec 08             	sub    esp,0x8
c0028cb3:	68 64 01 00 00       	push   0x164
c0028cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cbc:	e8 fb 9f fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0028cc1:	83 c4 10             	add    esp,0x10
c0028cc4:	83 c4 0c             	add    esp,0xc
c0028cc7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028cc8 <ATA::~ATA()>:
c0028cc8:	83 ec 0c             	sub    esp,0xc
c0028ccb:	ba 38 cc 02 c0       	mov    edx,0xc002cc38
c0028cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd4:	89 10                	mov    DWORD PTR [eax],edx
c0028cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cda:	83 ec 0c             	sub    esp,0xc
c0028cdd:	50                   	push   eax
c0028cde:	e8 93 b9 fe ff       	call   c0014676 <PhysicalDisk::~PhysicalDisk()>
c0028ce3:	83 c4 10             	add    esp,0x10
c0028ce6:	90                   	nop
c0028ce7:	83 c4 0c             	add    esp,0xc
c0028cea:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028cec <ATA::~ATA()>:
c0028cec:	83 ec 0c             	sub    esp,0xc
c0028cef:	83 ec 0c             	sub    esp,0xc
c0028cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cf6:	e8 cd ff ff ff       	call   c0028cc8 <ATA::~ATA()>
c0028cfb:	83 c4 10             	add    esp,0x10
c0028cfe:	83 ec 08             	sub    esp,0x8
c0028d01:	68 7c 01 00 00       	push   0x17c
c0028d06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d0a:	e8 ad 9f fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0028d0f:	83 c4 10             	add    esp,0x10
c0028d12:	83 c4 0c             	add    esp,0xc
c0028d15:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028d16 <ATAPI::~ATAPI()>:
c0028d16:	83 ec 0c             	sub    esp,0xc
c0028d19:	ba 70 cc 02 c0       	mov    edx,0xc002cc70
c0028d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d22:	89 10                	mov    DWORD PTR [eax],edx
c0028d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d28:	83 ec 0c             	sub    esp,0xc
c0028d2b:	50                   	push   eax
c0028d2c:	e8 45 b9 fe ff       	call   c0014676 <PhysicalDisk::~PhysicalDisk()>
c0028d31:	83 c4 10             	add    esp,0x10
c0028d34:	90                   	nop
c0028d35:	83 c4 0c             	add    esp,0xc
c0028d38:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028d3a <ATAPI::~ATAPI()>:
c0028d3a:	83 ec 0c             	sub    esp,0xc
c0028d3d:	83 ec 0c             	sub    esp,0xc
c0028d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d44:	e8 cd ff ff ff       	call   c0028d16 <ATAPI::~ATAPI()>
c0028d49:	83 c4 10             	add    esp,0x10
c0028d4c:	83 ec 08             	sub    esp,0x8
c0028d4f:	68 80 01 00 00       	push   0x180
c0028d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d58:	e8 5f 9f fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0028d5d:	83 c4 10             	add    esp,0x10
c0028d60:	83 c4 0c             	add    esp,0xc
c0028d63:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028d64 <SATA::~SATA()>:
c0028d64:	83 ec 0c             	sub    esp,0xc
c0028d67:	ba 24 cd 02 c0       	mov    edx,0xc002cd24
c0028d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d70:	89 10                	mov    DWORD PTR [eax],edx
c0028d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d76:	83 ec 0c             	sub    esp,0xc
c0028d79:	50                   	push   eax
c0028d7a:	e8 f7 b8 fe ff       	call   c0014676 <PhysicalDisk::~PhysicalDisk()>
c0028d7f:	83 c4 10             	add    esp,0x10
c0028d82:	90                   	nop
c0028d83:	83 c4 0c             	add    esp,0xc
c0028d86:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028d88 <SATA::~SATA()>:
c0028d88:	83 ec 0c             	sub    esp,0xc
c0028d8b:	83 ec 0c             	sub    esp,0xc
c0028d8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d92:	e8 cd ff ff ff       	call   c0028d64 <SATA::~SATA()>
c0028d97:	83 c4 10             	add    esp,0x10
c0028d9a:	83 ec 08             	sub    esp,0x8
c0028d9d:	68 7c 01 00 00       	push   0x17c
c0028da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028da6:	e8 11 9f fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0028dab:	83 c4 10             	add    esp,0x10
c0028dae:	83 c4 0c             	add    esp,0xc
c0028db1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028db2 <SATAPI::~SATAPI()>:
c0028db2:	83 ec 0c             	sub    esp,0xc
c0028db5:	ba 00 ce 02 c0       	mov    edx,0xc002ce00
c0028dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dbe:	89 10                	mov    DWORD PTR [eax],edx
c0028dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc4:	83 ec 0c             	sub    esp,0xc
c0028dc7:	50                   	push   eax
c0028dc8:	e8 a9 b8 fe ff       	call   c0014676 <PhysicalDisk::~PhysicalDisk()>
c0028dcd:	83 c4 10             	add    esp,0x10
c0028dd0:	90                   	nop
c0028dd1:	83 c4 0c             	add    esp,0xc
c0028dd4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028dd6 <SATAPI::~SATAPI()>:
c0028dd6:	83 ec 0c             	sub    esp,0xc
c0028dd9:	83 ec 0c             	sub    esp,0xc
c0028ddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028de0:	e8 cd ff ff ff       	call   c0028db2 <SATAPI::~SATAPI()>
c0028de5:	83 c4 10             	add    esp,0x10
c0028de8:	83 ec 08             	sub    esp,0x8
c0028deb:	68 80 01 00 00       	push   0x180
c0028df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028df4:	e8 c3 9e fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0028df9:	83 c4 10             	add    esp,0x10
c0028dfc:	83 c4 0c             	add    esp,0xc
c0028dff:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028e00 <AVX::~AVX()>:
c0028e00:	83 ec 0c             	sub    esp,0xc
c0028e03:	ba 40 ce 02 c0       	mov    edx,0xc002ce40
c0028e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e0c:	89 10                	mov    DWORD PTR [eax],edx
c0028e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e12:	83 ec 0c             	sub    esp,0xc
c0028e15:	50                   	push   eax
c0028e16:	e8 df b8 fe ff       	call   c00146fa <FPU::~FPU()>
c0028e1b:	83 c4 10             	add    esp,0x10
c0028e1e:	90                   	nop
c0028e1f:	83 c4 0c             	add    esp,0xc
c0028e22:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028e24 <AVX::~AVX()>:
c0028e24:	83 ec 0c             	sub    esp,0xc
c0028e27:	83 ec 0c             	sub    esp,0xc
c0028e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e2e:	e8 cd ff ff ff       	call   c0028e00 <AVX::~AVX()>
c0028e33:	83 c4 10             	add    esp,0x10
c0028e36:	83 ec 08             	sub    esp,0x8
c0028e39:	68 58 01 00 00       	push   0x158
c0028e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e42:	e8 75 9e fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0028e47:	83 c4 10             	add    esp,0x10
c0028e4a:	83 c4 0c             	add    esp,0xc
c0028e4d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028e4e <MMX::~MMX()>:
c0028e4e:	83 ec 0c             	sub    esp,0xc
c0028e51:	ba 80 ce 02 c0       	mov    edx,0xc002ce80
c0028e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e5a:	89 10                	mov    DWORD PTR [eax],edx
c0028e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e60:	83 ec 0c             	sub    esp,0xc
c0028e63:	50                   	push   eax
c0028e64:	e8 91 b8 fe ff       	call   c00146fa <FPU::~FPU()>
c0028e69:	83 c4 10             	add    esp,0x10
c0028e6c:	90                   	nop
c0028e6d:	83 c4 0c             	add    esp,0xc
c0028e70:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028e72 <MMX::~MMX()>:
c0028e72:	83 ec 0c             	sub    esp,0xc
c0028e75:	83 ec 0c             	sub    esp,0xc
c0028e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e7c:	e8 cd ff ff ff       	call   c0028e4e <MMX::~MMX()>
c0028e81:	83 c4 10             	add    esp,0x10
c0028e84:	83 ec 08             	sub    esp,0x8
c0028e87:	68 58 01 00 00       	push   0x158
c0028e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e90:	e8 27 9e fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0028e95:	83 c4 10             	add    esp,0x10
c0028e98:	83 c4 0c             	add    esp,0xc
c0028e9b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028e9c <SSE::~SSE()>:
c0028e9c:	83 ec 0c             	sub    esp,0xc
c0028e9f:	ba c0 ce 02 c0       	mov    edx,0xc002cec0
c0028ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea8:	89 10                	mov    DWORD PTR [eax],edx
c0028eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eae:	83 ec 0c             	sub    esp,0xc
c0028eb1:	50                   	push   eax
c0028eb2:	e8 43 b8 fe ff       	call   c00146fa <FPU::~FPU()>
c0028eb7:	83 c4 10             	add    esp,0x10
c0028eba:	90                   	nop
c0028ebb:	83 c4 0c             	add    esp,0xc
c0028ebe:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028ec0 <SSE::~SSE()>:
c0028ec0:	83 ec 0c             	sub    esp,0xc
c0028ec3:	83 ec 0c             	sub    esp,0xc
c0028ec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eca:	e8 cd ff ff ff       	call   c0028e9c <SSE::~SSE()>
c0028ecf:	83 c4 10             	add    esp,0x10
c0028ed2:	83 ec 08             	sub    esp,0x8
c0028ed5:	68 58 01 00 00       	push   0x158
c0028eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ede:	e8 d9 9d fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0028ee3:	83 c4 10             	add    esp,0x10
c0028ee6:	83 c4 0c             	add    esp,0xc
c0028ee9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028eea <x87::~x87()>:
c0028eea:	83 ec 0c             	sub    esp,0xc
c0028eed:	ba 00 cf 02 c0       	mov    edx,0xc002cf00
c0028ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef6:	89 10                	mov    DWORD PTR [eax],edx
c0028ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efc:	83 ec 0c             	sub    esp,0xc
c0028eff:	50                   	push   eax
c0028f00:	e8 f5 b7 fe ff       	call   c00146fa <FPU::~FPU()>
c0028f05:	83 c4 10             	add    esp,0x10
c0028f08:	90                   	nop
c0028f09:	83 c4 0c             	add    esp,0xc
c0028f0c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028f0e <x87::~x87()>:
c0028f0e:	83 ec 0c             	sub    esp,0xc
c0028f11:	83 ec 0c             	sub    esp,0xc
c0028f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f18:	e8 cd ff ff ff       	call   c0028eea <x87::~x87()>
c0028f1d:	83 c4 10             	add    esp,0x10
c0028f20:	83 ec 08             	sub    esp,0x8
c0028f23:	68 58 01 00 00       	push   0x158
c0028f28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f2c:	e8 8b 9d fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0028f31:	83 c4 10             	add    esp,0x10
c0028f34:	83 c4 0c             	add    esp,0xc
c0028f37:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028f38 <IOAPIC::~IOAPIC()>:
c0028f38:	83 ec 0c             	sub    esp,0xc
c0028f3b:	ba 58 d0 02 c0       	mov    edx,0xc002d058
c0028f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f44:	89 10                	mov    DWORD PTR [eax],edx
c0028f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4a:	83 ec 0c             	sub    esp,0xc
c0028f4d:	50                   	push   eax
c0028f4e:	e8 41 b1 fe ff       	call   c0014094 <Device::~Device()>
c0028f53:	83 c4 10             	add    esp,0x10
c0028f56:	90                   	nop
c0028f57:	83 c4 0c             	add    esp,0xc
c0028f5a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028f5c <IOAPIC::~IOAPIC()>:
c0028f5c:	83 ec 0c             	sub    esp,0xc
c0028f5f:	83 ec 0c             	sub    esp,0xc
c0028f62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f66:	e8 cd ff ff ff       	call   c0028f38 <IOAPIC::~IOAPIC()>
c0028f6b:	83 c4 10             	add    esp,0x10
c0028f6e:	83 ec 08             	sub    esp,0x8
c0028f71:	68 68 01 00 00       	push   0x168
c0028f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f7a:	e8 3d 9d fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0028f7f:	83 c4 10             	add    esp,0x10
c0028f82:	83 c4 0c             	add    esp,0xc
c0028f85:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028f86 <APIC::~APIC()>:
c0028f86:	83 ec 0c             	sub    esp,0xc
c0028f89:	ba 10 d0 02 c0       	mov    edx,0xc002d010
c0028f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f92:	89 10                	mov    DWORD PTR [eax],edx
c0028f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f98:	83 ec 0c             	sub    esp,0xc
c0028f9b:	50                   	push   eax
c0028f9c:	e8 23 bc fe ff       	call   c0014bc4 <InterruptController::~InterruptController()>
c0028fa1:	83 c4 10             	add    esp,0x10
c0028fa4:	90                   	nop
c0028fa5:	83 c4 0c             	add    esp,0xc
c0028fa8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028faa <APIC::~APIC()>:
c0028faa:	83 ec 0c             	sub    esp,0xc
c0028fad:	83 ec 0c             	sub    esp,0xc
c0028fb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb4:	e8 cd ff ff ff       	call   c0028f86 <APIC::~APIC()>
c0028fb9:	83 c4 10             	add    esp,0x10
c0028fbc:	83 ec 08             	sub    esp,0x8
c0028fbf:	68 58 21 00 00       	push   0x2158
c0028fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fc8:	e8 ef 9c fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0028fcd:	83 c4 10             	add    esp,0x10
c0028fd0:	83 c4 0c             	add    esp,0xc
c0028fd3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028fd4 <PIC::~PIC()>:
c0028fd4:	83 ec 0c             	sub    esp,0xc
c0028fd7:	ba a8 d0 02 c0       	mov    edx,0xc002d0a8
c0028fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe0:	89 10                	mov    DWORD PTR [eax],edx
c0028fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe6:	83 ec 0c             	sub    esp,0xc
c0028fe9:	50                   	push   eax
c0028fea:	e8 d5 bb fe ff       	call   c0014bc4 <InterruptController::~InterruptController()>
c0028fef:	83 c4 10             	add    esp,0x10
c0028ff2:	90                   	nop
c0028ff3:	83 c4 0c             	add    esp,0xc
c0028ff6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028ff8 <PIC::~PIC()>:
c0028ff8:	83 ec 0c             	sub    esp,0xc
c0028ffb:	83 ec 0c             	sub    esp,0xc
c0028ffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029002:	e8 cd ff ff ff       	call   c0028fd4 <PIC::~PIC()>
c0029007:	83 c4 10             	add    esp,0x10
c002900a:	83 ec 08             	sub    esp,0x8
c002900d:	68 58 21 00 00       	push   0x2158
c0029012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029016:	e8 a1 9c fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c002901b:	83 c4 10             	add    esp,0x10
c002901e:	83 c4 0c             	add    esp,0xc
c0029021:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029022 <APICTimer::~APICTimer()>:
c0029022:	83 ec 0c             	sub    esp,0xc
c0029025:	ba fc d0 02 c0       	mov    edx,0xc002d0fc
c002902a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902e:	89 10                	mov    DWORD PTR [eax],edx
c0029030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029034:	83 ec 0c             	sub    esp,0xc
c0029037:	50                   	push   eax
c0029038:	e8 09 db fe ff       	call   c0016b46 <Timer::~Timer()>
c002903d:	83 c4 10             	add    esp,0x10
c0029040:	90                   	nop
c0029041:	83 c4 0c             	add    esp,0xc
c0029044:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029046 <APICTimer::~APICTimer()>:
c0029046:	83 ec 0c             	sub    esp,0xc
c0029049:	83 ec 0c             	sub    esp,0xc
c002904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029050:	e8 cd ff ff ff       	call   c0029022 <APICTimer::~APICTimer()>
c0029055:	83 c4 10             	add    esp,0x10
c0029058:	83 ec 08             	sub    esp,0x8
c002905b:	68 60 01 00 00       	push   0x160
c0029060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029064:	e8 53 9c fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c0029069:	83 c4 10             	add    esp,0x10
c002906c:	83 c4 0c             	add    esp,0xc
c002906f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029070 <PIT::~PIT()>:
c0029070:	83 ec 0c             	sub    esp,0xc
c0029073:	ba 4c d1 02 c0       	mov    edx,0xc002d14c
c0029078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907c:	89 10                	mov    DWORD PTR [eax],edx
c002907e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029082:	83 ec 0c             	sub    esp,0xc
c0029085:	50                   	push   eax
c0029086:	e8 bb da fe ff       	call   c0016b46 <Timer::~Timer()>
c002908b:	83 c4 10             	add    esp,0x10
c002908e:	90                   	nop
c002908f:	83 c4 0c             	add    esp,0xc
c0029092:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029094 <PIT::~PIT()>:
c0029094:	83 ec 0c             	sub    esp,0xc
c0029097:	83 ec 0c             	sub    esp,0xc
c002909a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002909e:	e8 cd ff ff ff       	call   c0029070 <PIT::~PIT()>
c00290a3:	83 c4 10             	add    esp,0x10
c00290a6:	83 ec 08             	sub    esp,0x8
c00290a9:	68 5c 01 00 00       	push   0x15c
c00290ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290b2:	e8 05 9c fe ff       	call   c0012cbc <operator delete(void*, unsigned long)>
c00290b7:	83 c4 10             	add    esp,0x10
c00290ba:	83 c4 0c             	add    esp,0xc
c00290bd:	c3                   	ret    
