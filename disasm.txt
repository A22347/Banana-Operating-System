
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 69 9a 00 00       	call   c0009a89 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 29 11 02 00       	call   c002114e <_init>
c0000025:	c3                   	ret    
c0000026:	bb d2 1d 02 c0       	mov    ebx,0xc0021dd2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb e0 1d 02 c0    	cmp    ebx,0xc0021de0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 5e 02 c0       	mov    eax,0xc0025e38
c0000049:	3d 38 5e 02 c0       	cmp    eax,0xc0025e38
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 5e 02 c0       	push   0xc0025e38
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 5e 02 c0       	mov    eax,0xc0025e38
c0000075:	2d 38 5e 02 c0       	sub    eax,0xc0025e38
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 5e 02 c0       	push   0xc0025e38
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c0 5f 02 c0 00 	cmp    BYTE PTR ds:0xc0025fc0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb e8 1d 02 c0       	mov    ebx,0xc0021de8
c00000bb:	81 eb e4 1d 02 c0    	sub    ebx,0xc0021de4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be e4 1d 02 c0       	mov    esi,0xc0021de4
c00000ca:	a1 c4 5f 02 c0       	mov    eax,ds:0xc0025fc4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 c4 5f 02 c0       	mov    ds:0xc0025fc4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 c4 5f 02 c0       	mov    eax,ds:0xc0025fc4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 5e 02 c0       	push   0xc0025e38
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c0 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025fc0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 c8 5f 02 c0       	push   0xc0025fc8
c000012c:	68 38 5e 02 c0       	push   0xc0025e38
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 dc 74 01 00       	call   c00177b4 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 f0 c4 00 00       	call   c000c7e0 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 ba 74 01 00       	call   c00177b4 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 83 79 01 00       	call   c0017c9c <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 c6 7f 01 00       	call   c00182e8 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 10 64 02 c0 	lgdtd  ds:0xc0026410
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 7e e2 00 00       	call   c000e795 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 e0 5f 02 c0       	mov    ds:0xc0025fe0,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 e0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fe0,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d e0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fe0
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 00 1e 02 c0 02 	test   BYTE PTR [edx-0x3ffde200],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 00 1e 02 c0 01 	test   BYTE PTR [edx-0x3ffde200],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 00 1e 02 c0 08 	test   BYTE PTR [edx-0x3ffde200],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 00 1e 02 c0 04 	test   BYTE PTR [ebx-0x3ffde200],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 00 1e 02 c0 01 	test   BYTE PTR [edx-0x3ffde200],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d 00 60 02 c0    	mov    ecx,DWORD PTR ds:0xc0026000
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d 00 60 02 c0    	mov    DWORD PTR ds:0xc0026000,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 04 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9ffc]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 04 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9ffc],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d 00 60 02 c0    	mov    DWORD PTR ds:0xc0026000,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 2c 60 02 c0    	cmp    DWORD PTR ds:0xc002602c,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d 3c 60 02 c0    	mov    ecx,DWORD PTR ds:0xc002603c
c0000d6c:	c7 42 0c 34 60 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026034
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 3c 60 02 c0    	mov    DWORD PTR ds:0xc002603c,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 2c 60 02 c0    	mov    DWORD PTR ds:0xc002602c,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 00 60 02 c0 02 	test   BYTE PTR ds:0xc0026000,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 00 60 02 c0       	mov    eax,0xc0026000
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 3f 8a 00 00       	call   c000988c <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 81 89 00 00       	call   c000988c <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 6b 89 00 00       	call   c000988c <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 47 89 00 00       	call   c000988c <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d 00 60 02 c0    	mov    edi,DWORD PTR ds:0xc0026000
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 00 60 02 c0       	mov    eax,0xc0026000
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 04 60 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9ffc]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 04 60 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9ffc],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 34 60 02 c0 	lea    edx,[eax*8-0x3ffd9fcc]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 00 60 02 c0       	mov    eax,0xc0026000
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d 40 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026040
c00010ee:	81 fb 34 60 02 c0    	cmp    ebx,0xc0026034
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d 34 60 02 c0       	cmp    eax,0xc0026034
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d 30 60 02 c0    	cmp    DWORD PTR ds:0xc0026030,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 3c 60 02 c0       	mov    ds:0xc002603c,eax
c000112a:	a3 40 60 02 c0       	mov    ds:0xc0026040,eax
c000112f:	a3 30 60 02 c0       	mov    ds:0xc0026030,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 34 60 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026034
c000113d:	c7 40 0c 34 60 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026034
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 40 60 02 c0       	mov    ds:0xc0026040,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 34 60 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026034
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 f8 5f 02 c0 	lea    ebp,[edx*4-0x3ffda008]
c000118e:	8b 14 95 00 60 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda000]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 00 60 02 c0 	lea    ecx,[edx*4-0x3ffda000]
c00011a9:	8b 14 95 00 60 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda000]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd 34 63 02 c0 	or     DWORD PTR [edi*4-0x3ffd9ccc],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 34 60 02 c0 	lea    eax,[eax*8-0x3ffd9fcc]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d 3c 60 02 c0    	mov    DWORD PTR ds:0xc002603c,ecx
c0001263:	89 0d 40 60 02 c0    	mov    DWORD PTR ds:0xc0026040,ecx
c0001269:	c7 41 08 34 60 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026034
c0001270:	c7 41 0c 34 60 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026034
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd 2c 60 02 c0 	lea    edx,[ecx*8-0x3ffd9fd4]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d 34 63 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9ccc]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d 34 63 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9ccc]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 2c 60 02 c0 	lea    edx,[eax*4-0x3ffd9fd4]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d 34 63 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9ccc],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d 3c 60 02 c0    	mov    DWORD PTR ds:0xc002603c,edi
c0001336:	89 3d 40 60 02 c0    	mov    DWORD PTR ds:0xc0026040,edi
c000133c:	c7 47 08 34 60 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026034
c0001343:	c7 47 0c 34 60 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026034
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d 30 60 02 c0    	mov    DWORD PTR ds:0xc0026030,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 2c 60 02 c0       	mov    eax,ds:0xc002602c
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d 2c 60 02 c0    	mov    DWORD PTR ds:0xc002602c,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba 00 60 02 c0       	mov    edx,0xc0026000
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d 00 60 02 c0 00 	cmp    DWORD PTR ds:0xc0026000,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 00 60 02 c0       	mov    eax,0xc0026000
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d 54 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026354
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 54 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026354,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d 54 63 02 c0    	mov    DWORD PTR ds:0xc0026354,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 2c 60 02 c0    	cmp    DWORD PTR ds:0xc002602c,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d 2c 60 02 c0    	mov    DWORD PTR ds:0xc002602c,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d 00 60 02 c0 00 	cmp    DWORD PTR ds:0xc0026000,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 00 60 02 c0       	mov    eax,0xc0026000
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 5c 63 02 c0    	push   DWORD PTR ds:0xc002635c
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 00 60 02 c0 00 	cmp    DWORD PTR ds:0xc0026000,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 00 60 02 c0       	mov    eax,0xc0026000
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 5c 63 02 c0       	mov    eax,ds:0xc002635c
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 00 60 02 c0       	mov    eax,0xc0026000
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d 2c 60 02 c0 00 	cmp    DWORD PTR ds:0xc002602c,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 00 60 02 c0       	mov    eax,0xc0026000
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 2c 60 02 c0       	mov    eax,ds:0xc002602c
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 04 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9ffc]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 34 60 02 c0       	mov    eax,0xc0026034
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d 2c 63 02 c0       	cmp    eax,0xc002632c
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 68 63 02 c0       	mov    eax,ds:0xc0026368
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 50 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026350
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 64 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026364
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 74 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026374
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 00 60 02 c0       	mov    eax,0xc0026000
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 04 1f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde0fc]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 00 60 02 c0       	mov    eax,ds:0xc0026000
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 00 60 02 c0       	mov    ds:0xc0026000,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d 44 63 02 c0    	mov    DWORD PTR ds:0xc0026344,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d 48 63 02 c0    	mov    DWORD PTR ds:0xc0026348,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d 4c 63 02 c0    	mov    DWORD PTR ds:0xc002634c,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 54 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026354,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 60 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd85a0]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 c6 94 01 00       	jmp    c001afec <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 60 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd85a0]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 f8 94 01 00       	jmp    c001b034 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 60 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd85a0]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 21 95 01 00       	jmp    c001b07c <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 f6 f0 01 00       	call   c0020f34 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 20 20 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffddfe0]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 20 20 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffddfe0]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba 20 1f 02 c0       	mov    edx,0xc0021f20
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba 40 20 02 c0       	mov    edx,0xc0022040
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 24 4b 02 c0       	mov    edx,0xc0024b24
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba 4c 20 02 c0       	mov    edx,0xc002204c
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba 30 20 02 c0       	mov    edx,0xc0022030
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 a0 63 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd9c60]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 80 63 02 c0    	mov    ax,ds:0xc0026380
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 80 63 02 c0    	mov    ds:0xc0026380,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 f3 de 01 00       	call   c0020f34 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 52 20 02 c0       	mov    eax,0xc0022052
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad a0 1f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffde060]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 5b 20 02 c0       	mov    eax,0xc002205b
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 20 20 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffddfe0]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 be c8 01 00       	call   c0020f34 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba 30 20 02 c0       	mov    edx,0xc0022030
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba 20 1f 02 c0       	mov    edx,0xc0021f20
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba 30 1f 02 c0       	mov    edx,0xc0021f30
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 a0 63 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9c60]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 a0 63 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9c60],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 85 b2 01 00       	call   c0020f34 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 6b b2 01 00       	call   c0020f34 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 77 1f 02 c0       	mov    eax,0xc0021f77
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 70 1f 02 c0       	mov    eax,0xc0021f70
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 04 9e 01 00       	call   c0020f34 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 a0 63 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9c60]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be 60 1f 02 c0       	mov    esi,0xc0021f60
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 78 97 01 00       	call   c0020f34 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba 40 20 02 c0       	mov    edx,0xc0022040
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba 40 1f 02 c0       	mov    edx,0xc0021f40
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba 50 1f 02 c0       	mov    edx,0xc0021f50
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba 62 20 02 c0       	mov    edx,0xc0022062
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba 6e 20 02 c0       	mov    edx,0xc002206e
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba 82 20 02 c0       	mov    edx,0xc0022082
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 f0 13 00 00       	call   c00099c3 <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 e8 13 00 00       	call   c00099d3 <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c a0 23 02 c0 	mov    DWORD PTR [esp+0xc],0xc00223a0
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 a0 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc00223a0
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 a0 21 02 c0       	mov    eax,0xc00221a0
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 e0 20 02 c0       	mov    eax,0xc00220e0
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 a0 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddf60]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 4a 11 00 00       	jmp    c00099c3 <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 65 11 00 00       	jmp    c00099e3 <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000888b:	48                   	dec    eax
c000888c:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00088a2:	48                   	dec    eax
c00088a3:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00088b3:	ff 05 c4 78 02 c0    	inc    DWORD PTR ds:0xc00278c4
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00088c2:	48                   	dec    eax
c00088c3:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d c0 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278c0,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c00088dd:	e8 26 f6 00 00       	call   c0017f08 <schedule()>
c00088e2:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00088e7:	48                   	dec    eax
c00088e8:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 30 65 02 c0       	mov    eax,ds:0xc0026530
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 a0 24 02 c0       	push   0xc00224a0
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 08 64 02 c0       	mov    eax,0xc0026408
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 a9 24 02 c0       	push   0xc00224a9
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 34 0f 02 c0       	mov    eax,0xc0020f34
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 b3 24 02 c0       	push   0xc00224b3
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 68 0c 02 c0       	mov    eax,0xc0020c68
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 bc 24 02 c0       	push   0xc00224bc
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 34 10 02 c0       	mov    eax,0xc0021034
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 c6 24 02 c0       	push   0xc00224c6
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 b4 0d 02 c0       	mov    eax,0xc0020db4
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 cf 24 02 c0       	push   0xc00224cf
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 0c 64 02 c0       	mov    eax,0xc002640c
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 dc 24 02 c0       	push   0xc00224dc
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 0d 64 02 c0       	mov    eax,0xc002640d
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 ff 55 00 00       	call   c000e044 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 e9 24 02 c0       	push   0xc00224e9
c0008a75:	e8 a3 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 00 25 02 c0 	mov    DWORD PTR [esp],0xc0022500
c0008a82:	e8 96 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 30 0f 00 00       	call   c00099c3 <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0008aa2:	68 19 25 02 c0       	push   0xc0022519
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 35 f0 00 00       	call   c0017ae4 <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 bd 93 00 c0       	push   0xc00093bd
c0008abe:	53                   	push   ebx
c0008abf:	e8 28 f2 00 00       	call   c0017cec <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 30 87 01 c0       	push   0xc0018730
c0008acd:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0008ad3:	e8 14 f2 00 00       	call   c0017cec <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 a8 78 02 c0       	mov    ds:0xc00278a8,eax
c0008ae0:	68 c0 26 02 c0       	push   0xc00226c0
c0008ae5:	c6 05 0d 64 02 c0 01 	mov    BYTE PTR ds:0xc002640d,0x1
c0008aec:	e8 2c 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008af1:	e8 15 00 01 00       	call   c0018b0b <Vm::initialise8086()>
c0008af6:	e8 0f 43 00 00       	call   c000ce0a <Fs::initVFS()>
c0008afb:	c7 04 24 26 25 02 c0 	mov    DWORD PTR [esp],0xc0022526
c0008b02:	e8 16 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b07:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 c0 26 02 c0       	push   0xc00226c0
c0008b26:	e8 f2 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 22 d8 00 00       	call   c0016352 <Sys::loadSyscalls()>
c0008b30:	e8 f7 b6 00 00       	call   c001422c <Krnl::loadSystemEnv()>
c0008b35:	83 c4 0c             	add    esp,0xc
c0008b38:	6a 3a                	push   0x3a
c0008b3a:	68 40 25 02 c0       	push   0xc0022540
c0008b3f:	68 49 25 02 c0       	push   0xc0022549
c0008b44:	e8 cc c5 00 00       	call   c0015115 <Reg::readIntWithDefault(char*, char*, int)>
c0008b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b4c:	e8 ab 4d 00 00       	call   c000d8fc <User::loadClockSettings(int)>
c0008b51:	c7 04 24 e4 26 02 c0 	mov    DWORD PTR [esp],0xc00226e4
c0008b58:	e8 c0 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b5d:	58                   	pop    eax
c0008b5e:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c0008b63:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b69:	e8 96 54 00 00       	call   c000e004 <Device::loadDriversForAll()>
c0008b6e:	c7 04 24 51 25 02 c0 	mov    DWORD PTR [esp],0xc0022551
c0008b75:	e8 a3 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b7a:	e8 15 b2 00 00       	call   c0013d94 <Krnl::startCPUs()>
c0008b7f:	c7 04 24 6b 25 02 c0 	mov    DWORD PTR [esp],0xc002256b
c0008b86:	e8 92 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b8b:	5a                   	pop    edx
c0008b8c:	8b 1d 08 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026408
c0008b92:	59                   	pop    ecx
c0008b93:	6a 01                	push   0x1
c0008b95:	68 7c 25 02 c0       	push   0xc002257c
c0008b9a:	e8 83 e9 00 00       	call   c0017522 <Thr::loadDLL(char const*, bool)>
c0008b9f:	5a                   	pop    edx
c0008ba0:	59                   	pop    ecx
c0008ba1:	53                   	push   ebx
c0008ba2:	50                   	push   eax
c0008ba3:	e8 ab eb 00 00       	call   c0017753 <Thr::executeDLL(unsigned long, void*)>
c0008ba8:	83 c4 10             	add    esp,0x10
c0008bab:	83 ec 0c             	sub    esp,0xc
c0008bae:	6a 02                	push   0x2
c0008bb0:	e8 4b f5 00 00       	call   c0018100 <blockTask(TaskState)>
c0008bb5:	83 c4 10             	add    esp,0x10
c0008bb8:	eb f1                	jmp    c0008bab <Krnl::firstTask()+0x13f>

c0008bba <Computer::Computer()>:
c0008bba:	83 ec 0c             	sub    esp,0xc
c0008bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc1:	83 ec 08             	sub    esp,0x8
c0008bc4:	68 98 25 02 c0       	push   0xc0022598
c0008bc9:	50                   	push   eax
c0008bca:	e8 ef 54 00 00       	call   c000e0be <Device::Device(char const*)>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	ba 94 27 02 c0       	mov    edx,0xc0022794
c0008bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdb:	89 10                	mov    DWORD PTR [eax],edx
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bef:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c03:	83 ca 04             	or     edx,0x4
c0008c06:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c16:	0f b6 d0             	movzx  edx,al
c0008c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2e:	0f b6 d0             	movzx  edx,al
c0008c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c35:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	8d 50 01             	lea    edx,[eax+0x1]
c0008c47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c51:	0f b6 d0             	movzx  edx,al
c0008c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5c:	83 e1 3f             	and    ecx,0x3f
c0008c5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6d:	0f b6 d0             	movzx  edx,al
c0008c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c74:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c85:	0f b6 d0             	movzx  edx,al
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca8:	0f b6 d0             	movzx  edx,al
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb3:	83 e1 3f             	and    ecx,0x3f
c0008cb6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc4:	0f b6 d0             	movzx  edx,al
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cdc:	0f b6 d0             	movzx  edx,al
c0008cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cff:	0f b6 d0             	movzx  edx,al
c0008d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d06:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d0a:	83 e1 3f             	and    ecx,0x3f
c0008d0d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d11:	90                   	nop
c0008d12:	83 c4 0c             	add    esp,0xc
c0008d15:	c3                   	ret    

c0008d16 <Computer::setBootMessage(char const*)>:
c0008d16:	c3                   	ret    
c0008d17:	90                   	nop

c0008d18 <Computer::detectFeatures()>:
c0008d18:	55                   	push   ebp
c0008d19:	57                   	push   edi
c0008d1a:	56                   	push   esi
c0008d1b:	53                   	push   ebx
c0008d1c:	83 ec 1c             	sub    esp,0x1c
c0008d1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d23:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2d:	e8 e7 74 ff ff       	call   c0000219 <detectCPUID>
c0008d32:	85 c0                	test   eax,eax
c0008d34:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3a:	0f 95 c2             	setne  dl
c0008d3d:	83 e0 fd             	and    eax,0xfffffffd
c0008d40:	d1 e2                	shl    edx,1
c0008d42:	09 d0                	or     eax,edx
c0008d44:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d4a:	a8 02                	test   al,0x2
c0008d4c:	75 46                	jne    c0008d94 <Computer::detectFeatures()+0x7c>
c0008d4e:	f6 05 21 64 02 c0 04 	test   BYTE PTR ds:0xc0026421,0x4
c0008d55:	74 07                	je     c0008d5e <Computer::detectFeatures()+0x46>
c0008d57:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5e:	e8 93 7e 01 00       	call   c0020bf6 <x87Detect>
c0008d63:	83 e0 01             	and    eax,0x1
c0008d66:	c1 e0 04             	shl    eax,0x4
c0008d69:	88 c2                	mov    dl,al
c0008d6b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d71:	83 e0 ef             	and    eax,0xffffffef
c0008d74:	09 d0                	or     eax,edx
c0008d76:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7c:	a8 10                	test   al,0x10
c0008d7e:	0f 85 2a 01 00 00    	jne    c0008eae <Computer::detectFeatures()+0x196>
c0008d84:	84 c0                	test   al,al
c0008d86:	0f 88 45 01 00 00    	js     c0008ed1 <Computer::detectFeatures()+0x1b9>
c0008d8c:	83 c4 1c             	add    esp,0x1c
c0008d8f:	5b                   	pop    ebx
c0008d90:	5e                   	pop    esi
c0008d91:	5f                   	pop    edi
c0008d92:	5d                   	pop    ebp
c0008d93:	c3                   	ret    
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	6a 20                	push   0x20
c0008d99:	e8 f8 9e 00 00       	call   c0012c96 <CPU::cpuidCheckEDX(unsigned int)>
c0008d9e:	83 e0 01             	and    eax,0x1
c0008da1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dae:	83 e0 f7             	and    eax,0xfffffff7
c0008db1:	09 d0                	or     eax,edx
c0008db3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc0:	e8 d1 9e 00 00       	call   c0012c96 <CPU::cpuidCheckEDX(unsigned int)>
c0008dc5:	83 e0 01             	and    eax,0x1
c0008dc8:	88 c2                	mov    dl,al
c0008dca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd0:	83 e0 fe             	and    eax,0xfffffffe
c0008dd3:	09 d0                	or     eax,edx
c0008dd5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ddb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de2:	e8 af 9e 00 00       	call   c0012c96 <CPU::cpuidCheckEDX(unsigned int)>
c0008de7:	c1 e0 07             	shl    eax,0x7
c0008dea:	88 c2                	mov    dl,al
c0008dec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df2:	83 e0 7f             	and    eax,0x7f
c0008df5:	09 d0                	or     eax,edx
c0008df7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e04:	e8 8d 9e 00 00       	call   c0012c96 <CPU::cpuidCheckEDX(unsigned int)>
c0008e09:	83 c4 10             	add    esp,0x10
c0008e0c:	83 e0 01             	and    eax,0x1
c0008e0f:	c1 e0 05             	shl    eax,0x5
c0008e12:	88 c2                	mov    dl,al
c0008e14:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e1a:	83 e0 df             	and    eax,0xffffffdf
c0008e1d:	09 d0                	or     eax,edx
c0008e1f:	f7 05 20 64 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026420,0x401
c0008e29:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2f:	0f 84 c2 00 00 00    	je     c0008ef7 <Computer::detectFeatures()+0x1df>
c0008e35:	83 e0 fe             	and    eax,0xfffffffe
c0008e38:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e44:	88 c2                	mov    dl,al
c0008e46:	83 e2 09             	and    edx,0x9
c0008e49:	fe ca                	dec    dl
c0008e4b:	75 09                	jne    c0008e56 <Computer::detectFeatures()+0x13e>
c0008e4d:	83 e0 fe             	and    eax,0xfffffffe
c0008e50:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5d:	50                   	push   eax
c0008e5e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e62:	55                   	push   ebp
c0008e63:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e67:	57                   	push   edi
c0008e68:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6c:	56                   	push   esi
c0008e6d:	68 00 00 00 80       	push   0x80000000
c0008e72:	e8 9b 9d 00 00       	call   c0012c12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e77:	83 c4 20             	add    esp,0x20
c0008e7a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e85:	0f 86 c3 fe ff ff    	jbe    c0008d4e <Computer::detectFeatures()+0x36>
c0008e8b:	83 ec 0c             	sub    esp,0xc
c0008e8e:	50                   	push   eax
c0008e8f:	55                   	push   ebp
c0008e90:	57                   	push   edi
c0008e91:	56                   	push   esi
c0008e92:	68 01 00 00 80       	push   0x80000001
c0008e97:	e8 76 9d 00 00       	call   c0012c12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea6:	83 c4 20             	add    esp,0x20
c0008ea9:	e9 a0 fe ff ff       	jmp    c0008d4e <Computer::detectFeatures()+0x36>
c0008eae:	e8 fd 7c 01 00       	call   c0020bb0 <absolutelyNoChanceInHell>
c0008eb3:	88 c2                	mov    dl,al
c0008eb5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ebb:	c1 e2 07             	shl    edx,0x7
c0008ebe:	83 e0 7f             	and    eax,0x7f
c0008ec1:	09 d0                	or     eax,edx
c0008ec3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec9:	84 c0                	test   al,al
c0008ecb:	0f 89 bb fe ff ff    	jns    c0008d8c <Computer::detectFeatures()+0x74>
c0008ed1:	e8 ba 7c 01 00       	call   c0020b90 <avxDetect>
c0008ed6:	83 e0 01             	and    eax,0x1
c0008ed9:	c1 e0 05             	shl    eax,0x5
c0008edc:	88 c2                	mov    dl,al
c0008ede:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee4:	83 e0 df             	and    eax,0xffffffdf
c0008ee7:	09 d0                	or     eax,edx
c0008ee9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eef:	83 c4 1c             	add    esp,0x1c
c0008ef2:	5b                   	pop    ebx
c0008ef3:	5e                   	pop    esi
c0008ef4:	5f                   	pop    edi
c0008ef5:	5d                   	pop    ebp
c0008ef6:	c3                   	ret    
c0008ef7:	83 ec 0c             	sub    esp,0xc
c0008efa:	68 00 02 00 00       	push   0x200
c0008eff:	e8 92 9d 00 00       	call   c0012c96 <CPU::cpuidCheckEDX(unsigned int)>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	83 e0 01             	and    eax,0x1
c0008f0a:	88 c2                	mov    dl,al
c0008f0c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f12:	83 e0 fe             	and    eax,0xfffffffe
c0008f15:	09 d0                	or     eax,edx
c0008f17:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1d:	e9 1c ff ff ff       	jmp    c0008e3e <Computer::detectFeatures()+0x126>

c0008f22 <Computer::displayFeatures()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Computer::rdmsr(unsigned int)>:
c0008f24:	83 ec 0c             	sub    esp,0xc
c0008f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f32:	74 0a                	je     c0008f3e <Computer::rdmsr(unsigned int)+0x1a>
c0008f34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f38:	0f 32                	rdmsr  
c0008f3a:	83 c4 0c             	add    esp,0xc
c0008f3d:	c3                   	ret    
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	68 a1 25 02 c0       	push   0xc00225a1
c0008f46:	e8 ea b3 00 00       	call   c0014335 <Krnl::panic(char const*)>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	eb e4                	jmp    c0008f34 <Computer::rdmsr(unsigned int)+0x10>

c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f50:	57                   	push   edi
c0008f51:	56                   	push   esi
c0008f52:	52                   	push   edx
c0008f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f5f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f66:	74 0e                	je     c0008f76 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f6c:	89 f0                	mov    eax,esi
c0008f6e:	89 fa                	mov    edx,edi
c0008f70:	0f 30                	wrmsr  
c0008f72:	58                   	pop    eax
c0008f73:	5e                   	pop    esi
c0008f74:	5f                   	pop    edi
c0008f75:	c3                   	ret    
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	68 a7 25 02 c0       	push   0xc00225a7
c0008f7e:	e8 b2 b3 00 00       	call   c0014335 <Krnl::panic(char const*)>
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	eb e0                	jmp    c0008f68 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f88 <Computer::nmiEnabled()>:
c0008f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f8c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008f92:	c3                   	ret    
c0008f93:	90                   	nop

c0008f94 <Computer::readCMOS(unsigned char)>:
c0008f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f98:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f9f:	19 c0                	sbb    eax,eax
c0008fa1:	83 e0 80             	and    eax,0xffffff80
c0008fa4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008fa8:	e6 70                	out    0x70,al
c0008faa:	e4 71                	in     al,0x71
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Computer::enableNMI(bool)>:
c0008fae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008fb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fb6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008fbc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008fc4:	eb ce                	jmp    c0008f94 <Computer::readCMOS(unsigned char)>

c0008fc6 <Computer::open(int, int, void*)>:
c0008fc6:	56                   	push   esi
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 10             	sub    esp,0x10
c0008fcb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008fcf:	68 04 27 02 c0       	push   0xc0022704
c0008fd4:	e8 44 0a 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008fd9:	58                   	pop    eax
c0008fda:	f6 05 20 64 02 c0 04 	test   BYTE PTR ds:0xc0026420,0x4
c0008fe1:	5a                   	pop    edx
c0008fe2:	0f 94 05 e0 57 02 c0 	sete   BYTE PTR ds:0xc00257e0
c0008fe9:	68 58 01 00 00       	push   0x158
c0008fee:	68 ad 25 02 c0       	push   0xc00225ad
c0008ff3:	e8 7b 3a 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0008ff8:	59                   	pop    ecx
c0008ff9:	5e                   	pop    esi
c0008ffa:	68 14 01 00 00       	push   0x114
c0008fff:	68 c3 25 02 c0       	push   0xc00225c3
c0009004:	e8 6a 3a 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0009009:	58                   	pop    eax
c000900a:	5a                   	pop    edx
c000900b:	6a 14                	push   0x14
c000900d:	68 d7 25 02 c0       	push   0xc00225d7
c0009012:	e8 5c 3a 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0009017:	59                   	pop    ecx
c0009018:	5e                   	pop    esi
c0009019:	68 1f 07 00 00       	push   0x71f
c000901e:	68 ea 25 02 c0       	push   0xc00225ea
c0009023:	e8 4b 3a 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0009028:	58                   	pop    eax
c0009029:	5a                   	pop    edx
c000902a:	6a 5f                	push   0x5f
c000902c:	68 01 26 02 c0       	push   0xc0022601
c0009031:	e8 3d 3a 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0009036:	c7 04 24 17 26 02 c0 	mov    DWORD PTR [esp],0xc0022617
c000903d:	e8 31 3a 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0009042:	c7 04 24 29 26 02 c0 	mov    DWORD PTR [esp],0xc0022629
c0009049:	e8 cf 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000904e:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009055:	e8 69 09 00 00       	call   c00099c3 <malloc>
c000905a:	89 c6                	mov    esi,eax
c000905c:	89 04 24             	mov    DWORD PTR [esp],eax
c000905f:	e8 a4 8d 00 00       	call   c0011e08 <ACPI::ACPI()>
c0009064:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000906a:	c7 04 24 43 26 02 c0 	mov    DWORD PTR [esp],0xc0022643
c0009071:	e8 a7 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009076:	59                   	pop    ecx
c0009077:	5e                   	pop    esi
c0009078:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000907e:	53                   	push   ebx
c000907f:	e8 36 4e 00 00       	call   c000deba <Device::addChild(Device*)>
c0009084:	c7 04 24 28 27 02 c0 	mov    DWORD PTR [esp],0xc0022728
c000908b:	e8 8d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009093:	e8 80 fc ff ff       	call   c0008d18 <Computer::detectFeatures()>
c0009098:	c7 04 24 48 27 02 c0 	mov    DWORD PTR [esp],0xc0022748
c000909f:	e8 79 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090a4:	c7 04 24 5d 26 02 c0 	mov    DWORD PTR [esp],0xc002265d
c00090ab:	e8 6d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090b0:	58                   	pop    eax
c00090b1:	5a                   	pop    edx
c00090b2:	6a 01                	push   0x1
c00090b4:	53                   	push   ebx
c00090b5:	e8 f4 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c00090ba:	c7 04 24 51 25 02 c0 	mov    DWORD PTR [esp],0xc0022551
c00090c1:	e8 57 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090c6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00090cd:	e8 f1 08 00 00       	call   c00099c3 <malloc>
c00090d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090d5:	89 c6                	mov    esi,eax
c00090d7:	e8 72 9c 00 00       	call   c0012d4e <CPU::CPU()>
c00090dc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00090e2:	59                   	pop    ecx
c00090e3:	58                   	pop    eax
c00090e4:	56                   	push   esi
c00090e5:	53                   	push   ebx
c00090e6:	e8 cf 4d 00 00       	call   c000deba <Device::addChild(Device*)>
c00090eb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00090f7:	6a 00                	push   0x0
c00090f9:	6a 00                	push   0x0
c00090fb:	50                   	push   eax
c00090fc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00090ff:	83 c4 14             	add    esp,0x14
c0009102:	68 68 27 02 c0       	push   0xc0022768
c0009107:	e8 11 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000910c:	e8 45 53 00 00       	call   c000e456 <setupFPU()>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1f                	je     c000913d <Computer::open(int, int, void*)+0x177>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	50                   	push   eax
c0009122:	53                   	push   ebx
c0009123:	e8 92 4d 00 00       	call   c000deba <Device::addChild(Device*)>
c0009128:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000912e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009130:	6a 00                	push   0x0
c0009132:	6a 00                	push   0x0
c0009134:	6a 00                	push   0x0
c0009136:	50                   	push   eax
c0009137:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000913a:	83 c4 20             	add    esp,0x20
c000913d:	83 ec 0c             	sub    esp,0xc
c0009140:	68 6e 26 02 c0       	push   0xc002266e
c0009145:	e8 d3 08 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000914a:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c0009151:	e8 aa ec 00 00       	call   c0017e00 <setupMultitasking(void (*)())>
c0009156:	83 c4 14             	add    esp,0x14
c0009159:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000915e:	5b                   	pop    ebx
c000915f:	5e                   	pop    esi
c0009160:	c3                   	ret    
c0009161:	90                   	nop

c0009162 <Computer::disableNMI()>:
c0009162:	6a 00                	push   0x0
c0009164:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009168:	e8 41 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c000916d:	58                   	pop    eax
c000916e:	5a                   	pop    edx
c000916f:	c3                   	ret    

c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009174:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000917b:	19 c0                	sbb    eax,eax
c000917d:	83 e0 80             	and    eax,0xffffff80
c0009180:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009184:	e6 70                	out    0x70,al
c0009186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000918a:	e6 71                	out    0x71,al
c000918c:	c3                   	ret    
c000918d:	90                   	nop

c000918e <Computer::handleNMI()>:
c000918e:	56                   	push   esi
c000918f:	53                   	push   ebx
c0009190:	83 ec 10             	sub    esp,0x10
c0009193:	e4 92                	in     al,0x92
c0009195:	89 c6                	mov    esi,eax
c0009197:	e4 61                	in     al,0x61
c0009199:	68 89 26 02 c0       	push   0xc0022689
c000919e:	88 c3                	mov    bl,al
c00091a0:	e8 ce 38 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	83 e6 10             	and    esi,0x10
c00091ab:	75 0d                	jne    c00091ba <Computer::handleNMI()+0x2c>
c00091ad:	f6 c3 40             	test   bl,0x40
c00091b0:	75 1d                	jne    c00091cf <Computer::handleNMI()+0x41>
c00091b2:	84 db                	test   bl,bl
c00091b4:	78 2d                	js     c00091e3 <Computer::handleNMI()+0x55>
c00091b6:	58                   	pop    eax
c00091b7:	5b                   	pop    ebx
c00091b8:	5e                   	pop    esi
c00091b9:	c3                   	ret    
c00091ba:	83 ec 0c             	sub    esp,0xc
c00091bd:	68 9a 26 02 c0       	push   0xc002269a
c00091c2:	e8 6e b1 00 00       	call   c0014335 <Krnl::panic(char const*)>
c00091c7:	83 c4 10             	add    esp,0x10
c00091ca:	f6 c3 40             	test   bl,0x40
c00091cd:	74 e3                	je     c00091b2 <Computer::handleNMI()+0x24>
c00091cf:	83 ec 0c             	sub    esp,0xc
c00091d2:	68 a7 26 02 c0       	push   0xc00226a7
c00091d7:	e8 59 b1 00 00       	call   c0014335 <Krnl::panic(char const*)>
c00091dc:	83 c4 10             	add    esp,0x10
c00091df:	84 db                	test   bl,bl
c00091e1:	79 d3                	jns    c00091b6 <Computer::handleNMI()+0x28>
c00091e3:	c7 44 24 10 b1 26 02 c0 	mov    DWORD PTR [esp+0x10],0xc00226b1
c00091eb:	5a                   	pop    edx
c00091ec:	5b                   	pop    ebx
c00091ed:	5e                   	pop    esi
c00091ee:	e9 42 b1 00 00       	jmp    c0014335 <Krnl::panic(char const*)>
c00091f3:	90                   	nop

c00091f4 <Computer::setDiskActivityLight(int, bool)>:
c00091f4:	56                   	push   esi
c00091f5:	53                   	push   ebx
c00091f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00091fa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091ff:	77 1b                	ja     c000921c <Computer::setDiskActivityLight(int, bool)+0x28>
c0009201:	e4 92                	in     al,0x92
c0009203:	bb 40 00 00 00       	mov    ebx,0x40
c0009208:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000920c:	89 da                	mov    edx,ebx
c000920e:	d3 e2                	shl    edx,cl
c0009210:	89 f1                	mov    ecx,esi
c0009212:	f7 d2                	not    edx
c0009214:	d3 e3                	shl    ebx,cl
c0009216:	21 d0                	and    eax,edx
c0009218:	09 d8                	or     eax,ebx
c000921a:	e6 92                	out    0x92,al
c000921c:	5b                   	pop    ebx
c000921d:	5e                   	pop    esi
c000921e:	c3                   	ret    
c000921f:	90                   	nop

c0009220 <GDTEntry::setBase(unsigned int)>:
c0009220:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009224:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009228:	89 c1                	mov    ecx,eax
c000922a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000922e:	c1 e9 10             	shr    ecx,0x10
c0009231:	c1 e8 18             	shr    eax,0x18
c0009234:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009237:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000923a:	c3                   	ret    
c000923b:	90                   	nop

c000923c <GDTEntry::setLimit(unsigned int)>:
c000923c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009244:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009247:	66 89 01             	mov    WORD PTR [ecx],ax
c000924a:	83 e2 f0             	and    edx,0xfffffff0
c000924d:	c1 e8 10             	shr    eax,0x10
c0009250:	83 e0 0f             	and    eax,0xf
c0009253:	09 d0                	or     eax,edx
c0009255:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009258:	c3                   	ret    
c0009259:	90                   	nop

c000925a <GDT::GDT()>:
c000925a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000925e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926e:	90                   	nop
c000926f:	c3                   	ret    

c0009270 <GDT::addEntry(GDTEntry)>:
c0009270:	53                   	push   ebx
c0009271:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009275:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009279:	8b 02                	mov    eax,DWORD PTR [edx]
c000927b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000927f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009283:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009287:	8d 48 01             	lea    ecx,[eax+0x1]
c000928a:	c1 e0 03             	shl    eax,0x3
c000928d:	89 0a                	mov    DWORD PTR [edx],ecx
c000928f:	5b                   	pop    ebx
c0009290:	c3                   	ret    
c0009291:	90                   	nop

c0009292 <GDT::getNumberOfEntries()>:
c0009292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009296:	8b 00                	mov    eax,DWORD PTR [eax]
c0009298:	c3                   	ret    
c0009299:	90                   	nop

c000929a <GDT::flush()>:
c000929a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000929e:	8b 10                	mov    edx,DWORD PTR [eax]
c00092a0:	83 c0 04             	add    eax,0x4
c00092a3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092aa:	a3 12 64 02 c0       	mov    ds:0xc0026412,eax
c00092af:	66 89 15 10 64 02 c0 	mov    WORD PTR ds:0xc0026410,dx
c00092b6:	e9 ca 70 ff ff       	jmp    c0000385 <loadGDT>
c00092bb:	90                   	nop

c00092bc <GDT::setup()>:
c00092bc:	55                   	push   ebp
c00092bd:	57                   	push   edi
c00092be:	56                   	push   esi
c00092bf:	53                   	push   ebx
c00092c0:	83 ec 3c             	sub    esp,0x3c
c00092c3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00092c7:	6a 00                	push   0x0
c00092c9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00092cd:	53                   	push   ebx
c00092ce:	e8 4d ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092d3:	6a 00                	push   0x0
c00092d5:	53                   	push   ebx
c00092d6:	e8 61 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092db:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c00092e3:	6a 00                	push   0x0
c00092e5:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00092e9:	53                   	push   ebx
c00092ea:	e8 31 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092ef:	68 ff ff ff 00       	push   0xffffff
c00092f4:	53                   	push   ebx
c00092f5:	e8 42 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00092fe:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009303:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009308:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000930c:	83 c4 20             	add    esp,0x20
c000930f:	6a 00                	push   0x0
c0009311:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0009315:	53                   	push   ebx
c0009316:	e8 05 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000931b:	68 ff ff ff 00       	push   0xffffff
c0009320:	53                   	push   ebx
c0009321:	e8 16 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c0009326:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000932a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000932e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009332:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009336:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000933a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000933f:	0d 00 92 c0 00       	or     eax,0xc09200
c0009344:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009348:	89 d8                	mov    eax,ebx
c000934a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000934e:	80 cc 60             	or     ah,0x60
c0009351:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009355:	83 c4 0c             	add    esp,0xc
c0009358:	89 f8                	mov    eax,edi
c000935a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000935e:	80 cc 60             	or     ah,0x60
c0009361:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009365:	89 c7                	mov    edi,eax
c0009367:	55                   	push   ebp
c0009368:	e8 03 ff ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000936d:	83 c4 0c             	add    esp,0xc
c0009370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009378:	55                   	push   ebp
c0009379:	e8 f2 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009385:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009389:	55                   	push   ebp
c000938a:	e8 e1 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000938f:	83 c4 0c             	add    esp,0xc
c0009392:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009396:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000939a:	53                   	push   ebx
c000939b:	51                   	push   ecx
c000939c:	55                   	push   ebp
c000939d:	e8 ce fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093a2:	83 c4 0c             	add    esp,0xc
c00093a5:	57                   	push   edi
c00093a6:	56                   	push   esi
c00093a7:	55                   	push   ebp
c00093a8:	e8 c3 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093b0:	e8 e5 fe ff ff       	call   c000929a <GDT::flush()>
c00093b5:	83 c4 4c             	add    esp,0x4c
c00093b8:	5b                   	pop    ebx
c00093b9:	5e                   	pop    esi
c00093ba:	5f                   	pop    edi
c00093bb:	5d                   	pop    ebp
c00093bc:	c3                   	ret    

c00093bd <idleFunction(void*)>:
c00093bd:	53                   	push   ebx
c00093be:	83 ec 08             	sub    esp,0x8
c00093c1:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00093c6:	48                   	dec    eax
c00093c7:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00093cc:	75 01                	jne    c00093cf <idleFunction(void*)+0x12>
c00093ce:	fb                   	sti    
c00093cf:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c00093d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00093da:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c00093e1:	74 3c                	je     c000941f <idleFunction(void*)+0x62>
c00093e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00093ea:	74 33                	je     c000941f <idleFunction(void*)+0x62>
c00093ec:	31 db                	xor    ebx,ebx
c00093ee:	52                   	push   edx
c00093ef:	52                   	push   edx
c00093f0:	68 e1 00 00 00       	push   0xe1
c00093f5:	50                   	push   eax
c00093f6:	e8 29 fb ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00093fb:	53                   	push   ebx
c00093fc:	83 e0 02             	and    eax,0x2
c00093ff:	50                   	push   eax
c0009400:	68 e1 00 00 00       	push   0xe1
c0009405:	ff 35 08 64 02 c0    	push   DWORD PTR ds:0xc0026408
c000940b:	e8 40 fb ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0009410:	83 c4 20             	add    esp,0x20
c0009413:	e8 9c 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009418:	e8 99 7d 01 00       	call   c00211b6 <idleCommon()>
c000941d:	eb f4                	jmp    c0009413 <idleFunction(void*)+0x56>
c000941f:	fb                   	sti    
c0009420:	f4                   	hlt    
c0009421:	e8 90 7d 01 00       	call   c00211b6 <idleCommon()>
c0009426:	eb f7                	jmp    c000941f <idleFunction(void*)+0x62>

c0009428 <IDTEntry::IDTEntry(bool)>:
c0009428:	83 ec 04             	sub    esp,0x4
c000942b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000942f:	88 04 24             	mov    BYTE PTR [esp],al
c0009432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009436:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000943c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009440:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009448:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000944b:	83 e2 f0             	and    edx,0xfffffff0
c000944e:	83 ca 0e             	or     edx,0xe
c0009451:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009458:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000945b:	83 e2 ef             	and    edx,0xffffffef
c000945e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009461:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009465:	74 05                	je     c000946c <IDTEntry::IDTEntry(bool)+0x44>
c0009467:	b2 03                	mov    dl,0x3
c0009469:	eb 05                	jmp    c0009470 <IDTEntry::IDTEntry(bool)+0x48>
c000946b:	90                   	nop
c000946c:	b2 00                	mov    dl,0x0
c000946e:	66 90                	xchg   ax,ax
c0009470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009474:	83 e2 03             	and    edx,0x3
c0009477:	88 d1                	mov    cl,dl
c0009479:	c1 e1 05             	shl    ecx,0x5
c000947c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000947f:	83 e2 9f             	and    edx,0xffffff9f
c0009482:	09 ca                	or     edx,ecx
c0009484:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000948e:	83 ca 80             	or     edx,0xffffff80
c0009491:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009494:	90                   	nop
c0009495:	83 c4 04             	add    esp,0x4
c0009498:	c3                   	ret    
c0009499:	90                   	nop

c000949a <IDTEntry::setOffset(unsigned int)>:
c000949a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000949e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a2:	66 89 02             	mov    WORD PTR [edx],ax
c00094a5:	c1 e8 10             	shr    eax,0x10
c00094a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094ac:	c3                   	ret    
c00094ad:	90                   	nop
c00094ae:	66 90                	xchg   ax,ax

c00094b0 <IDT::IDT()>:
c00094b0:	90                   	nop
c00094b1:	c3                   	ret    

c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b6:	83 c0 30             	add    eax,0x30
c00094b9:	c3                   	ret    

c00094ba <IDT::addEntry(IDTEntry, int)>:
c00094ba:	53                   	push   ebx
c00094bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00094ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00094d2:	5b                   	pop    ebx
c00094d3:	c3                   	ret    

c00094d4 <IDT::addEntry(int, void (*)(), bool)>:
c00094d4:	53                   	push   ebx
c00094d5:	83 ec 10             	sub    esp,0x10
c00094d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00094dd:	50                   	push   eax
c00094de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00094e2:	53                   	push   ebx
c00094e3:	e8 40 ff ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c00094e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00094ec:	53                   	push   ebx
c00094ed:	e8 a8 ff ff ff       	call   c000949a <IDTEntry::setOffset(unsigned int)>
c00094f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00094f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009502:	e8 b3 ff ff ff       	call   c00094ba <IDT::addEntry(IDTEntry, int)>
c0009507:	83 c4 30             	add    esp,0x30
c000950a:	5b                   	pop    ebx
c000950b:	c3                   	ret    

c000950c <IDT::flush()>:
c000950c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009510:	66 c7 05 18 64 02 c0 ff 07 	mov    WORD PTR ds:0xc0026418,0x7ff
c0009519:	a3 1a 64 02 c0       	mov    ds:0xc002641a,eax
c000951e:	0f 01 1d 18 64 02 c0 	lidtd  ds:0xc0026418
c0009525:	c3                   	ret    

c0009526 <IDT::setup()>:
c0009526:	57                   	push   edi
c0009527:	56                   	push   esi
c0009528:	53                   	push   ebx
c0009529:	83 ec 10             	sub    esp,0x10
c000952c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009530:	6a 00                	push   0x0
c0009532:	68 a5 03 00 c0       	push   0xc00003a5
c0009537:	6a 00                	push   0x0
c0009539:	53                   	push   ebx
c000953a:	e8 95 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000953f:	6a 00                	push   0x0
c0009541:	68 b5 03 00 c0       	push   0xc00003b5
c0009546:	6a 01                	push   0x1
c0009548:	53                   	push   ebx
c0009549:	e8 86 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000954e:	83 c4 20             	add    esp,0x20
c0009551:	6a 00                	push   0x0
c0009553:	68 bf 03 00 c0       	push   0xc00003bf
c0009558:	6a 02                	push   0x2
c000955a:	53                   	push   ebx
c000955b:	e8 74 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009560:	6a 00                	push   0x0
c0009562:	68 c9 03 00 c0       	push   0xc00003c9
c0009567:	6a 03                	push   0x3
c0009569:	53                   	push   ebx
c000956a:	e8 65 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000956f:	83 c4 20             	add    esp,0x20
c0009572:	6a 00                	push   0x0
c0009574:	68 d3 03 00 c0       	push   0xc00003d3
c0009579:	6a 04                	push   0x4
c000957b:	53                   	push   ebx
c000957c:	e8 53 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009581:	6a 00                	push   0x0
c0009583:	68 dd 03 00 c0       	push   0xc00003dd
c0009588:	6a 05                	push   0x5
c000958a:	53                   	push   ebx
c000958b:	e8 44 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009590:	83 c4 20             	add    esp,0x20
c0009593:	6a 00                	push   0x0
c0009595:	68 e7 03 00 c0       	push   0xc00003e7
c000959a:	6a 06                	push   0x6
c000959c:	53                   	push   ebx
c000959d:	e8 32 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095a2:	6a 00                	push   0x0
c00095a4:	68 f1 03 00 c0       	push   0xc00003f1
c00095a9:	6a 07                	push   0x7
c00095ab:	53                   	push   ebx
c00095ac:	e8 23 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095b1:	83 c4 20             	add    esp,0x20
c00095b4:	6a 00                	push   0x0
c00095b6:	68 fb 03 00 c0       	push   0xc00003fb
c00095bb:	6a 08                	push   0x8
c00095bd:	53                   	push   ebx
c00095be:	e8 11 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095c3:	6a 00                	push   0x0
c00095c5:	68 03 04 00 c0       	push   0xc0000403
c00095ca:	6a 09                	push   0x9
c00095cc:	53                   	push   ebx
c00095cd:	e8 02 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095d2:	83 c4 20             	add    esp,0x20
c00095d5:	6a 00                	push   0x0
c00095d7:	68 0d 04 00 c0       	push   0xc000040d
c00095dc:	6a 0a                	push   0xa
c00095de:	53                   	push   ebx
c00095df:	e8 f0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095e4:	6a 00                	push   0x0
c00095e6:	68 15 04 00 c0       	push   0xc0000415
c00095eb:	6a 0b                	push   0xb
c00095ed:	53                   	push   ebx
c00095ee:	e8 e1 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095f3:	83 c4 20             	add    esp,0x20
c00095f6:	6a 00                	push   0x0
c00095f8:	68 1d 04 00 c0       	push   0xc000041d
c00095fd:	6a 0c                	push   0xc
c00095ff:	53                   	push   ebx
c0009600:	e8 cf fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009605:	6a 00                	push   0x0
c0009607:	68 25 04 00 c0       	push   0xc0000425
c000960c:	6a 0d                	push   0xd
c000960e:	53                   	push   ebx
c000960f:	e8 c0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009614:	83 c4 20             	add    esp,0x20
c0009617:	6a 00                	push   0x0
c0009619:	68 2d 04 00 c0       	push   0xc000042d
c000961e:	6a 0e                	push   0xe
c0009620:	53                   	push   ebx
c0009621:	e8 ae fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009626:	6a 00                	push   0x0
c0009628:	68 35 04 00 c0       	push   0xc0000435
c000962d:	6a 0f                	push   0xf
c000962f:	53                   	push   ebx
c0009630:	e8 9f fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009635:	83 c4 20             	add    esp,0x20
c0009638:	6a 00                	push   0x0
c000963a:	68 3f 04 00 c0       	push   0xc000043f
c000963f:	6a 10                	push   0x10
c0009641:	53                   	push   ebx
c0009642:	e8 8d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009647:	6a 00                	push   0x0
c0009649:	68 49 04 00 c0       	push   0xc0000449
c000964e:	6a 11                	push   0x11
c0009650:	53                   	push   ebx
c0009651:	e8 7e fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009656:	83 c4 20             	add    esp,0x20
c0009659:	6a 00                	push   0x0
c000965b:	68 53 04 00 c0       	push   0xc0000453
c0009660:	6a 12                	push   0x12
c0009662:	53                   	push   ebx
c0009663:	e8 6c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009668:	6a 01                	push   0x1
c000966a:	68 ed 04 00 c0       	push   0xc00004ed
c000966f:	6a 60                	push   0x60
c0009671:	53                   	push   ebx
c0009672:	e8 5d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009677:	83 c4 20             	add    esp,0x20
c000967a:	6a 00                	push   0x0
c000967c:	68 f4 04 00 c0       	push   0xc00004f4
c0009681:	6a 20                	push   0x20
c0009683:	53                   	push   ebx
c0009684:	e8 4b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009689:	6a 00                	push   0x0
c000968b:	68 df 04 00 c0       	push   0xc00004df
c0009690:	6a 21                	push   0x21
c0009692:	53                   	push   ebx
c0009693:	e8 3c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009698:	83 c4 20             	add    esp,0x20
c000969b:	6a 00                	push   0x0
c000969d:	68 e6 04 00 c0       	push   0xc00004e6
c00096a2:	6a 22                	push   0x22
c00096a4:	53                   	push   ebx
c00096a5:	e8 2a fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096aa:	6a 00                	push   0x0
c00096ac:	68 5d 04 00 c0       	push   0xc000045d
c00096b1:	6a 23                	push   0x23
c00096b3:	53                   	push   ebx
c00096b4:	e8 1b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	68 67 04 00 c0       	push   0xc0000467
c00096c3:	6a 24                	push   0x24
c00096c5:	53                   	push   ebx
c00096c6:	e8 09 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096cb:	6a 00                	push   0x0
c00096cd:	68 71 04 00 c0       	push   0xc0000471
c00096d2:	6a 25                	push   0x25
c00096d4:	53                   	push   ebx
c00096d5:	e8 fa fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096da:	83 c4 20             	add    esp,0x20
c00096dd:	6a 00                	push   0x0
c00096df:	68 7b 04 00 c0       	push   0xc000047b
c00096e4:	6a 26                	push   0x26
c00096e6:	53                   	push   ebx
c00096e7:	e8 e8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096ec:	6a 00                	push   0x0
c00096ee:	68 85 04 00 c0       	push   0xc0000485
c00096f3:	6a 27                	push   0x27
c00096f5:	53                   	push   ebx
c00096f6:	e8 d9 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096fb:	83 c4 20             	add    esp,0x20
c00096fe:	6a 00                	push   0x0
c0009700:	68 8f 04 00 c0       	push   0xc000048f
c0009705:	6a 28                	push   0x28
c0009707:	53                   	push   ebx
c0009708:	e8 c7 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000970d:	6a 00                	push   0x0
c000970f:	68 99 04 00 c0       	push   0xc0000499
c0009714:	6a 29                	push   0x29
c0009716:	53                   	push   ebx
c0009717:	e8 b8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000971c:	83 c4 20             	add    esp,0x20
c000971f:	6a 00                	push   0x0
c0009721:	68 a3 04 00 c0       	push   0xc00004a3
c0009726:	6a 2a                	push   0x2a
c0009728:	53                   	push   ebx
c0009729:	e8 a6 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000972e:	6a 00                	push   0x0
c0009730:	68 ad 04 00 c0       	push   0xc00004ad
c0009735:	6a 2b                	push   0x2b
c0009737:	53                   	push   ebx
c0009738:	e8 97 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000973d:	83 c4 20             	add    esp,0x20
c0009740:	6a 00                	push   0x0
c0009742:	68 b7 04 00 c0       	push   0xc00004b7
c0009747:	6a 2c                	push   0x2c
c0009749:	53                   	push   ebx
c000974a:	e8 85 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000974f:	6a 00                	push   0x0
c0009751:	68 c1 04 00 c0       	push   0xc00004c1
c0009756:	6a 2d                	push   0x2d
c0009758:	53                   	push   ebx
c0009759:	e8 76 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000975e:	83 c4 20             	add    esp,0x20
c0009761:	6a 00                	push   0x0
c0009763:	68 cb 04 00 c0       	push   0xc00004cb
c0009768:	6a 2e                	push   0x2e
c000976a:	53                   	push   ebx
c000976b:	e8 64 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009770:	6a 00                	push   0x0
c0009772:	68 d5 04 00 c0       	push   0xc00004d5
c0009777:	6a 2f                	push   0x2f
c0009779:	53                   	push   ebx
c000977a:	e8 55 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000977f:	83 c4 20             	add    esp,0x20
c0009782:	6a 00                	push   0x0
c0009784:	68 2b 05 00 c0       	push   0xc000052b
c0009789:	6a 30                	push   0x30
c000978b:	53                   	push   ebx
c000978c:	e8 43 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009791:	6a 00                	push   0x0
c0009793:	68 35 05 00 c0       	push   0xc0000535
c0009798:	6a 31                	push   0x31
c000979a:	53                   	push   ebx
c000979b:	e8 34 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097a0:	83 c4 20             	add    esp,0x20
c00097a3:	6a 00                	push   0x0
c00097a5:	68 3f 05 00 c0       	push   0xc000053f
c00097aa:	6a 32                	push   0x32
c00097ac:	53                   	push   ebx
c00097ad:	e8 22 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097b2:	6a 00                	push   0x0
c00097b4:	68 49 05 00 c0       	push   0xc0000549
c00097b9:	6a 33                	push   0x33
c00097bb:	53                   	push   ebx
c00097bc:	e8 13 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097c1:	83 c4 20             	add    esp,0x20
c00097c4:	6a 00                	push   0x0
c00097c6:	68 53 05 00 c0       	push   0xc0000553
c00097cb:	6a 34                	push   0x34
c00097cd:	53                   	push   ebx
c00097ce:	e8 01 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097d3:	6a 00                	push   0x0
c00097d5:	68 5d 05 00 c0       	push   0xc000055d
c00097da:	6a 35                	push   0x35
c00097dc:	53                   	push   ebx
c00097dd:	e8 f2 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097e2:	83 c4 20             	add    esp,0x20
c00097e5:	6a 00                	push   0x0
c00097e7:	68 67 05 00 c0       	push   0xc0000567
c00097ec:	6a 36                	push   0x36
c00097ee:	53                   	push   ebx
c00097ef:	e8 e0 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097f4:	6a 00                	push   0x0
c00097f6:	68 71 05 00 c0       	push   0xc0000571
c00097fb:	6a 37                	push   0x37
c00097fd:	53                   	push   ebx
c00097fe:	e8 d1 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009803:	83 c4 1c             	add    esp,0x1c
c0009806:	6a 03                	push   0x3
c0009808:	6a 02                	push   0x2
c000980a:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c0009810:	e8 35 26 00 00       	call   c000be4a <VAS::allocatePages(int, int)>
c0009815:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000981c:	89 c6                	mov    esi,eax
c000981e:	e8 a0 01 00 00       	call   c00099c3 <malloc>
c0009823:	81 c6 00 20 00 00    	add    esi,0x2000
c0009829:	89 04 24             	mov    DWORD PTR [esp],eax
c000982c:	89 c7                	mov    edi,eax
c000982e:	e8 b1 17 00 00       	call   c000afe4 <TSS::TSS()>
c0009833:	83 c4 0c             	add    esp,0xc
c0009836:	68 fb 03 00 c0       	push   0xc00003fb
c000983b:	56                   	push   esi
c000983c:	57                   	push   edi
c000983d:	e8 e6 17 00 00       	call   c000b028 <TSS::setup(unsigned long, unsigned long)>
c0009842:	89 c6                	mov    esi,eax
c0009844:	58                   	pop    eax
c0009845:	5a                   	pop    edx
c0009846:	6a 00                	push   0x0
c0009848:	8d 44 24 14          	lea    eax,[esp+0x14]
c000984c:	50                   	push   eax
c000984d:	e8 d6 fb ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c0009852:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009856:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000985b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009862:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009868:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000986c:	80 ce 05             	or     dh,0x5
c000986f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009872:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009876:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000987a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000987d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009880:	e8 87 fc ff ff       	call   c000950c <IDT::flush()>
c0009885:	83 c4 20             	add    esp,0x20
c0009888:	5b                   	pop    ebx
c0009889:	5e                   	pop    esi
c000988a:	5f                   	pop    edi
c000988b:	c3                   	ret    

c000988c <sbrk>:
c000988c:	55                   	push   ebp
c000988d:	57                   	push   edi
c000988e:	56                   	push   esi
c000988f:	53                   	push   ebx
c0009890:	83 ec 24             	sub    esp,0x24
c0009893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009897:	53                   	push   ebx
c0009898:	68 b8 27 02 c0       	push   0xc00227b8
c000989d:	e8 d1 31 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c00098a2:	83 c4 10             	add    esp,0x10
c00098a5:	85 db                	test   ebx,ebx
c00098a7:	74 5f                	je     c0009908 <sbrk+0x7c>
c00098a9:	78 64                	js     c000990f <sbrk+0x83>
c00098ab:	a1 6c 56 02 c0       	mov    eax,ds:0xc002566c
c00098b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098b4:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c00098ba:	89 dd                	mov    ebp,ebx
c00098bc:	78 69                	js     c0009927 <sbrk+0x9b>
c00098be:	c1 fd 0c             	sar    ebp,0xc
c00098c1:	bb 00 00 00 00       	mov    ebx,0x0
c00098c6:	8b 35 30 65 02 c0    	mov    esi,DWORD PTR ds:0xc0026530
c00098cc:	8b 3d 6c 56 02 c0    	mov    edi,DWORD PTR ds:0xc002566c
c00098d2:	e8 fa 04 00 00       	call   c0009dd1 <Phys::allocatePage()>
c00098d7:	68 01 04 00 00       	push   0x401
c00098dc:	57                   	push   edi
c00098dd:	50                   	push   eax
c00098de:	56                   	push   esi
c00098df:	e8 64 24 00 00       	call   c000bd48 <VAS::mapPage(unsigned long, unsigned long, int)>
c00098e4:	81 05 6c 56 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002566c,0x1000
c00098ee:	43                   	inc    ebx
c00098ef:	83 c4 10             	add    esp,0x10
c00098f2:	39 dd                	cmp    ebp,ebx
c00098f4:	75 d0                	jne    c00098c6 <sbrk+0x3a>
c00098f6:	0f 20 d8             	mov    eax,cr3
c00098f9:	0f 22 d8             	mov    cr3,eax
c00098fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009900:	83 c4 1c             	add    esp,0x1c
c0009903:	5b                   	pop    ebx
c0009904:	5e                   	pop    esi
c0009905:	5f                   	pop    edi
c0009906:	5d                   	pop    ebp
c0009907:	c3                   	ret    
c0009908:	a1 6c 56 02 c0       	mov    eax,ds:0xc002566c
c000990d:	eb f1                	jmp    c0009900 <sbrk+0x74>
c000990f:	83 ec 08             	sub    esp,0x8
c0009912:	53                   	push   ebx
c0009913:	68 e4 27 02 c0       	push   0xc00227e4
c0009918:	e8 56 31 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009925:	eb d9                	jmp    c0009900 <sbrk+0x74>
c0009927:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c000992d:	eb 8f                	jmp    c00098be <sbrk+0x32>

c000992f <mmap>:
c000992f:	83 ec 18             	sub    esp,0x18
c0009932:	68 d6 27 02 c0       	push   0xc00227d6
c0009937:	e8 f9 a9 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000993c:	b8 00 00 00 00       	mov    eax,0x0
c0009941:	83 c4 1c             	add    esp,0x1c
c0009944:	c3                   	ret    

c0009945 <munmap>:
c0009945:	83 ec 18             	sub    esp,0x18
c0009948:	68 db 27 02 c0       	push   0xc00227db
c000994d:	e8 e3 a9 00 00       	call   c0014335 <Krnl::panic(char const*)>
c0009952:	b8 00 00 00 00       	mov    eax,0x0
c0009957:	83 c4 1c             	add    esp,0x1c
c000995a:	c3                   	ret    

c000995b <liballoc_lock()>:
c000995b:	fa                   	cli    
c000995c:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0009962:	b8 00 00 00 00       	mov    eax,0x0
c0009967:	c3                   	ret    

c0009968 <liballoc_unlock()>:
c0009968:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000996d:	48                   	dec    eax
c000996e:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0009973:	75 01                	jne    c0009976 <liballoc_unlock()+0xe>
c0009975:	fb                   	sti    
c0009976:	b8 00 00 00 00       	mov    eax,0x0
c000997b:	c3                   	ret    

c000997c <liballoc_alloc(int)>:
c000997c:	83 ec 10             	sub    esp,0x10
c000997f:	6a 01                	push   0x1
c0009981:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009985:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c000998b:	e8 ba 24 00 00       	call   c000be4a <VAS::allocatePages(int, int)>
c0009990:	83 c4 1c             	add    esp,0x1c
c0009993:	c3                   	ret    

c0009994 <liballoc_free(void*, int)>:
c0009994:	83 ec 14             	sub    esp,0x14
c0009997:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000999b:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c00099a1:	e8 4e 21 00 00       	call   c000baf4 <VAS::freeAllocatedPages(unsigned long)>
c00099a6:	b8 00 00 00 00       	mov    eax,0x0
c00099ab:	83 c4 1c             	add    esp,0x1c
c00099ae:	c3                   	ret    

c00099af <realloc>:
c00099af:	83 ec 14             	sub    esp,0x14
c00099b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ba:	e8 a1 7b ff ff       	call   c0001560 <dlrealloc>
c00099bf:	83 c4 1c             	add    esp,0x1c
c00099c2:	c3                   	ret    

c00099c3 <malloc>:
c00099c3:	83 ec 18             	sub    esp,0x18
c00099c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ca:	e8 54 76 ff ff       	call   c0001023 <dlmalloc>
c00099cf:	83 c4 1c             	add    esp,0x1c
c00099d2:	c3                   	ret    

c00099d3 <free>:
c00099d3:	83 ec 18             	sub    esp,0x18
c00099d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099da:	e8 e9 72 ff ff       	call   c0000cc8 <dlfree>
c00099df:	83 c4 1c             	add    esp,0x1c
c00099e2:	c3                   	ret    

c00099e3 <rfree>:
c00099e3:	83 ec 18             	sub    esp,0x18
c00099e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ea:	e8 d9 72 ff ff       	call   c0000cc8 <dlfree>
c00099ef:	83 c4 1c             	add    esp,0x1c
c00099f2:	c3                   	ret    

c00099f3 <calloc>:
c00099f3:	56                   	push   esi
c00099f4:	53                   	push   ebx
c00099f5:	83 ec 10             	sub    esp,0x10
c00099f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00099fc:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a01:	53                   	push   ebx
c0009a02:	e8 bc ff ff ff       	call   c00099c3 <malloc>
c0009a07:	89 c6                	mov    esi,eax
c0009a09:	83 c4 0c             	add    esp,0xc
c0009a0c:	53                   	push   ebx
c0009a0d:	6a 00                	push   0x0
c0009a0f:	50                   	push   eax
c0009a10:	e8 6f 6c ff ff       	call   c0000684 <memset>
c0009a15:	89 f0                	mov    eax,esi
c0009a17:	83 c4 14             	add    esp,0x14
c0009a1a:	5b                   	pop    ebx
c0009a1b:	5e                   	pop    esi
c0009a1c:	c3                   	ret    

c0009a1d <Krnl::setBootMessage(char const*)>:
c0009a1d:	57                   	push   edi
c0009a1e:	56                   	push   esi
c0009a1f:	53                   	push   ebx
c0009a20:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a26:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a2d:	68 9e 00 00 00       	push   0x9e
c0009a32:	6a 00                	push   0x0
c0009a34:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a38:	56                   	push   esi
c0009a39:	e8 46 6c ff ff       	call   c0000684 <memset>
c0009a3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a41:	e8 5a 6c ff ff       	call   c00006a0 <strlen>
c0009a46:	ba 50 00 00 00       	mov    edx,0x50
c0009a4b:	83 c4 10             	add    esp,0x10
c0009a4e:	29 c2                	sub    edx,eax
c0009a50:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009a54:	d1 ea                	shr    edx,1
c0009a56:	84 c0                	test   al,al
c0009a58:	74 19                	je     c0009a73 <Krnl::setBootMessage(char const*)+0x56>
c0009a5a:	01 d2                	add    edx,edx
c0009a5c:	43                   	inc    ebx
c0009a5d:	01 f2                	add    edx,esi
c0009a5f:	80 cc 0f             	or     ah,0xf
c0009a62:	83 c2 02             	add    edx,0x2
c0009a65:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009a69:	43                   	inc    ebx
c0009a6a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009a6f:	84 c0                	test   al,al
c0009a71:	75 ec                	jne    c0009a5f <Krnl::setBootMessage(char const*)+0x42>
c0009a73:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009a78:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009a7f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009a85:	5b                   	pop    ebx
c0009a86:	5e                   	pop    esi
c0009a87:	5f                   	pop    edi
c0009a88:	c3                   	ret    

c0009a89 <kernel_main>:
c0009a89:	57                   	push   edi
c0009a8a:	bf f9 03 00 00       	mov    edi,0x3f9
c0009a8f:	56                   	push   esi
c0009a90:	89 fa                	mov    edx,edi
c0009a92:	53                   	push   ebx
c0009a93:	31 f6                	xor    esi,esi
c0009a95:	83 ec 2c             	sub    esp,0x2c
c0009a98:	89 f0                	mov    eax,esi
c0009a9a:	ee                   	out    dx,al
c0009a9b:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009aa0:	b0 80                	mov    al,0x80
c0009aa2:	89 da                	mov    edx,ebx
c0009aa4:	ee                   	out    dx,al
c0009aa5:	b1 03                	mov    cl,0x3
c0009aa7:	ba f8 03 00 00       	mov    edx,0x3f8
c0009aac:	88 c8                	mov    al,cl
c0009aae:	ee                   	out    dx,al
c0009aaf:	89 f0                	mov    eax,esi
c0009ab1:	89 fa                	mov    edx,edi
c0009ab3:	ee                   	out    dx,al
c0009ab4:	88 c8                	mov    al,cl
c0009ab6:	89 da                	mov    edx,ebx
c0009ab8:	ee                   	out    dx,al
c0009ab9:	b0 c7                	mov    al,0xc7
c0009abb:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ac0:	ee                   	out    dx,al
c0009ac1:	b0 0b                	mov    al,0xb
c0009ac3:	ba fc 03 00 00       	mov    edx,0x3fc
c0009ac8:	ee                   	out    dx,al
c0009ac9:	68 14 28 02 c0       	push   0xc0022814
c0009ace:	e8 a0 2f 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0009ad3:	e8 0c 0a 00 00       	call   c000a4e4 <installVgaTextImplementation()>
c0009ad8:	0f b6 05 80 56 02 c0 	movzx  eax,BYTE PTR ds:0xc0025680
c0009adf:	83 c4 10             	add    esp,0x10
c0009ae2:	84 c0                	test   al,al
c0009ae4:	74 6c                	je     c0009b52 <kernel_main+0xc9>
c0009ae6:	31 db                	xor    ebx,ebx
c0009ae8:	bf 0a 00 00 00       	mov    edi,0xa
c0009aed:	be 05 00 00 00       	mov    esi,0x5
c0009af2:	31 c9                	xor    ecx,ecx
c0009af4:	eb 2a                	jmp    c0009b20 <kernel_main+0x97>
c0009af6:	3c 0d                	cmp    al,0xd
c0009af8:	74 1a                	je     c0009b14 <kernel_main+0x8b>
c0009afa:	3c 0a                	cmp    al,0xa
c0009afc:	74 40                	je     c0009b3e <kernel_main+0xb5>
c0009afe:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b01:	80 cc 0e             	or     ah,0xe
c0009b04:	c1 e2 04             	shl    edx,0x4
c0009b07:	01 ca                	add    edx,ecx
c0009b09:	41                   	inc    ecx
c0009b0a:	01 fa                	add    edx,edi
c0009b0c:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b14:	43                   	inc    ebx
c0009b15:	0f b6 83 80 56 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda980]
c0009b1c:	84 c0                	test   al,al
c0009b1e:	74 32                	je     c0009b52 <kernel_main+0xc9>
c0009b20:	80 b9 b6 56 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffda94a],0xdb
c0009b27:	75 cd                	jne    c0009af6 <kernel_main+0x6d>
c0009b29:	0f b6 91 b5 56 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffda94b]
c0009b30:	83 e2 fe             	and    edx,0xfffffffe
c0009b33:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009b39:	75 bb                	jne    c0009af6 <kernel_main+0x6d>
c0009b3b:	47                   	inc    edi
c0009b3c:	eb b8                	jmp    c0009af6 <kernel_main+0x6d>
c0009b3e:	43                   	inc    ebx
c0009b3f:	46                   	inc    esi
c0009b40:	31 c9                	xor    ecx,ecx
c0009b42:	0f b6 83 80 56 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda980]
c0009b49:	bf 0a 00 00 00       	mov    edi,0xa
c0009b4e:	84 c0                	test   al,al
c0009b50:	75 ce                	jne    c0009b20 <kernel_main+0x97>
c0009b52:	83 ec 0c             	sub    esp,0xc
c0009b55:	68 2c 28 02 c0       	push   0xc002282c
c0009b5a:	e8 be fe ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009b5f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009b64:	a3 20 64 02 c0       	mov    ds:0xc0026420,eax
c0009b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0009b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b7b:	e8 d0 03 00 00       	call   c0009f50 <Phys::physicalMemorySetup(unsigned int)>
c0009b80:	e8 db 1c 00 00       	call   c000b860 <Virt::virtualMemorySetup()>
c0009b85:	58                   	pop    eax
c0009b86:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0009b8a:	53                   	push   ebx
c0009b8b:	e8 8c 1d 00 00       	call   c000b91c <VAS::VAS()>
c0009b90:	89 1d 30 65 02 c0    	mov    DWORD PTR ds:0xc0026530,ebx
c0009b96:	e8 85 64 ff ff       	call   c0000020 <callGlobalConstructors>
c0009b9b:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0009ba2:	e8 1c fe ff ff       	call   c00099c3 <malloc>
c0009ba7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009baa:	89 c6                	mov    esi,eax
c0009bac:	e8 09 f0 ff ff       	call   c0008bba <Computer::Computer()>
c0009bb1:	6a 00                	push   0x0
c0009bb3:	89 35 08 64 02 c0    	mov    DWORD PTR ds:0xc0026408,esi
c0009bb9:	6a 00                	push   0x0
c0009bbb:	6a 00                	push   0x0
c0009bbd:	56                   	push   esi
c0009bbe:	e8 03 f4 ff ff       	call   c0008fc6 <Computer::open(int, int, void*)>
c0009bc3:	83 c4 14             	add    esp,0x14
c0009bc6:	53                   	push   ebx
c0009bc7:	e8 00 20 00 00       	call   c000bbcc <VAS::~VAS()>
c0009bcc:	83 c4 30             	add    esp,0x30
c0009bcf:	5b                   	pop    ebx
c0009bd0:	5e                   	pop    esi
c0009bd1:	5f                   	pop    edi
c0009bd2:	c3                   	ret    

c0009bd3 <Phys::allocateDMA(unsigned long)>:
c0009bd3:	55                   	push   ebp
c0009bd4:	31 ed                	xor    ebp,ebp
c0009bd6:	57                   	push   edi
c0009bd7:	56                   	push   esi
c0009bd8:	53                   	push   ebx
c0009bd9:	31 db                	xor    ebx,ebx
c0009bdb:	83 ec 28             	sub    esp,0x28
c0009bde:	68 4b 28 02 c0       	push   0xc002284b
c0009be3:	e8 8b 2e 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0009be8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009bec:	83 c4 10             	add    esp,0x10
c0009bef:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0009bf5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009bfd:	c1 ef 0c             	shr    edi,0xc
c0009c00:	31 c0                	xor    eax,eax
c0009c02:	eb 19                	jmp    c0009c1d <Phys::allocateDMA(unsigned long)+0x4a>
c0009c04:	85 c0                	test   eax,eax
c0009c06:	75 06                	jne    c0009c0e <Phys::allocateDMA(unsigned long)+0x3b>
c0009c08:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009c0c:	89 dd                	mov    ebp,ebx
c0009c0e:	8d 70 01             	lea    esi,[eax+0x1]
c0009c11:	39 f7                	cmp    edi,esi
c0009c13:	74 23                	je     c0009c38 <Phys::allocateDMA(unsigned long)+0x65>
c0009c15:	89 f0                	mov    eax,esi
c0009c17:	43                   	inc    ebx
c0009c18:	83 fb 0f             	cmp    ebx,0xf
c0009c1b:	7f 11                	jg     c0009c2e <Phys::allocateDMA(unsigned long)+0x5b>
c0009c1d:	80 bb 3c 64 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9bc4],0x0
c0009c24:	74 de                	je     c0009c04 <Phys::allocateDMA(unsigned long)+0x31>
c0009c26:	31 c0                	xor    eax,eax
c0009c28:	43                   	inc    ebx
c0009c29:	83 fb 0f             	cmp    ebx,0xf
c0009c2c:	7e ef                	jle    c0009c1d <Phys::allocateDMA(unsigned long)+0x4a>
c0009c2e:	31 c0                	xor    eax,eax
c0009c30:	83 c4 1c             	add    esp,0x1c
c0009c33:	5b                   	pop    ebx
c0009c34:	5e                   	pop    esi
c0009c35:	5f                   	pop    edi
c0009c36:	5d                   	pop    ebp
c0009c37:	c3                   	ret    
c0009c38:	89 e9                	mov    ecx,ebp
c0009c3a:	c1 f9 04             	sar    ecx,0x4
c0009c3d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009c41:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009c45:	89 ca                	mov    edx,ecx
c0009c47:	4a                   	dec    edx
c0009c48:	79 03                	jns    c0009c4d <Phys::allocateDMA(unsigned long)+0x7a>
c0009c4a:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009c4d:	c1 fa 04             	sar    edx,0x4
c0009c50:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009c54:	74 08                	je     c0009c5e <Phys::allocateDMA(unsigned long)+0x8b>
c0009c56:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009c5a:	31 c0                	xor    eax,eax
c0009c5c:	eb ca                	jmp    c0009c28 <Phys::allocateDMA(unsigned long)+0x55>
c0009c5e:	85 f6                	test   esi,esi
c0009c60:	74 15                	je     c0009c77 <Phys::allocateDMA(unsigned long)+0xa4>
c0009c62:	8d 95 3c 64 02 c0    	lea    edx,[ebp-0x3ffd9bc4]
c0009c68:	8d 84 05 3d 64 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9bc3]
c0009c6f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009c72:	42                   	inc    edx
c0009c73:	39 d0                	cmp    eax,edx
c0009c75:	75 f8                	jne    c0009c6f <Phys::allocateDMA(unsigned long)+0x9c>
c0009c77:	83 ec 0c             	sub    esp,0xc
c0009c7a:	01 3d 34 64 02 c0    	add    DWORD PTR ds:0xc0026434,edi
c0009c80:	68 64 28 02 c0       	push   0xc0022864
c0009c85:	e8 e9 2d 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0009c8a:	83 c4 10             	add    esp,0x10
c0009c8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c91:	85 c0                	test   eax,eax
c0009c93:	74 17                	je     c0009cac <Phys::allocateDMA(unsigned long)+0xd9>
c0009c95:	83 ec 0c             	sub    esp,0xc
c0009c98:	68 7b 28 02 c0       	push   0xc002287b
c0009c9d:	e8 93 a6 00 00       	call   c0014335 <Krnl::panic(char const*)>
c0009ca2:	83 c4 10             	add    esp,0x10
c0009ca5:	89 f0                	mov    eax,esi
c0009ca7:	e9 6b ff ff ff       	jmp    c0009c17 <Phys::allocateDMA(unsigned long)+0x44>
c0009cac:	c1 e5 0c             	shl    ebp,0xc
c0009caf:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009cb5:	e9 76 ff ff ff       	jmp    c0009c30 <Phys::allocateDMA(unsigned long)+0x5d>

c0009cba <Phys::freeDMA(unsigned long, unsigned long)>:
c0009cba:	83 ec 18             	sub    esp,0x18
c0009cbd:	68 8f 28 02 c0       	push   0xc002288f
c0009cc2:	e8 ac 2d 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0009cc7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009ccb:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009cd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cd5:	c1 ea 0c             	shr    edx,0xc
c0009cd8:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009cdd:	29 15 34 64 02 c0    	sub    DWORD PTR ds:0xc0026434,edx
c0009ce3:	c1 e8 0c             	shr    eax,0xc
c0009ce6:	83 c4 10             	add    esp,0x10
c0009ce9:	85 d2                	test   edx,edx
c0009ceb:	74 0f                	je     c0009cfc <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009ced:	05 3c 64 02 c0       	add    eax,0xc002643c
c0009cf2:	01 c2                	add    edx,eax
c0009cf4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009cf7:	40                   	inc    eax
c0009cf8:	39 d0                	cmp    eax,edx
c0009cfa:	75 f8                	jne    c0009cf4 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009cfc:	83 c4 0c             	add    esp,0xc
c0009cff:	c3                   	ret    

c0009d00 <Phys::setPageState(unsigned long, bool)>:
c0009d00:	56                   	push   esi
c0009d01:	ba 01 00 00 00       	mov    edx,0x1
c0009d06:	53                   	push   ebx
c0009d07:	8b 35 c4 57 02 c0    	mov    esi,DWORD PTR ds:0xc00257c4
c0009d0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d11:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009d15:	89 c8                	mov    eax,ecx
c0009d17:	83 e1 07             	and    ecx,0x7
c0009d1a:	c1 e8 03             	shr    eax,0x3
c0009d1d:	d3 e3                	shl    ebx,cl
c0009d1f:	01 c6                	add    esi,eax
c0009d21:	d3 e2                	shl    edx,cl
c0009d23:	f7 d2                	not    edx
c0009d25:	20 16                	and    BYTE PTR [esi],dl
c0009d27:	03 05 c4 57 02 c0    	add    eax,DWORD PTR ds:0xc00257c4
c0009d2d:	08 18                	or     BYTE PTR [eax],bl
c0009d2f:	5b                   	pop    ebx
c0009d30:	5e                   	pop    esi
c0009d31:	c3                   	ret    

c0009d32 <Phys::getPageState(unsigned long)>:
c0009d32:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009d36:	8b 15 c4 57 02 c0    	mov    edx,DWORD PTR ds:0xc00257c4
c0009d3c:	89 c8                	mov    eax,ecx
c0009d3e:	83 e1 07             	and    ecx,0x7
c0009d41:	c1 e8 03             	shr    eax,0x3
c0009d44:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009d48:	d3 f8                	sar    eax,cl
c0009d4a:	83 e0 01             	and    eax,0x1
c0009d4d:	c3                   	ret    

c0009d4e <Phys::freePage(unsigned long)>:
c0009d4e:	53                   	push   ebx
c0009d4f:	83 ec 10             	sub    esp,0x10
c0009d52:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009d56:	53                   	push   ebx
c0009d57:	68 a5 28 02 c0       	push   0xc00228a5
c0009d5c:	e8 12 2d 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0009d61:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c0009d67:	83 c4 10             	add    esp,0x10
c0009d6a:	3d ff ff 00 00       	cmp    eax,0xffff
c0009d6f:	76 3d                	jbe    c0009dae <Phys::freePage(unsigned long)+0x60>
c0009d71:	83 ec 0c             	sub    esp,0xc
c0009d74:	c1 eb 0c             	shr    ebx,0xc
c0009d77:	53                   	push   ebx
c0009d78:	e8 b5 ff ff ff       	call   c0009d32 <Phys::getPageState(unsigned long)>
c0009d7d:	83 c4 10             	add    esp,0x10
c0009d80:	84 c0                	test   al,al
c0009d82:	74 19                	je     c0009d9d <Phys::freePage(unsigned long)+0x4f>
c0009d84:	83 ec 08             	sub    esp,0x8
c0009d87:	ff 0d 34 64 02 c0    	dec    DWORD PTR ds:0xc0026434
c0009d8d:	6a 00                	push   0x0
c0009d8f:	53                   	push   ebx
c0009d90:	e8 6b ff ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	83 c4 08             	add    esp,0x8
c0009d9b:	5b                   	pop    ebx
c0009d9c:	c3                   	ret    
c0009d9d:	c7 44 24 10 cf 28 02 c0 	mov    DWORD PTR [esp+0x10],0xc00228cf
c0009da5:	83 c4 08             	add    esp,0x8
c0009da8:	5b                   	pop    ebx
c0009da9:	e9 87 a5 00 00       	jmp    c0014335 <Krnl::panic(char const*)>
c0009dae:	83 ec 08             	sub    esp,0x8
c0009db1:	53                   	push   ebx
c0009db2:	68 b8 28 02 c0       	push   0xc00228b8
c0009db7:	e8 b7 2c 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0009dbc:	58                   	pop    eax
c0009dbd:	5a                   	pop    edx
c0009dbe:	68 00 10 00 00       	push   0x1000
c0009dc3:	53                   	push   ebx
c0009dc4:	e8 f1 fe ff ff       	call   c0009cba <Phys::freeDMA(unsigned long, unsigned long)>
c0009dc9:	83 c4 10             	add    esp,0x10
c0009dcc:	83 c4 08             	add    esp,0x8
c0009dcf:	5b                   	pop    ebx
c0009dd0:	c3                   	ret    

c0009dd1 <Phys::allocatePage()>:
c0009dd1:	56                   	push   esi
c0009dd2:	53                   	push   ebx
c0009dd3:	83 ec 14             	sub    esp,0x14
c0009dd6:	8b 35 28 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026428
c0009ddc:	89 f3                	mov    ebx,esi
c0009dde:	eb 0a                	jmp    c0009dea <Phys::allocatePage()+0x19>
c0009de0:	89 1d 28 64 02 c0    	mov    DWORD PTR ds:0xc0026428,ebx
c0009de6:	39 de                	cmp    esi,ebx
c0009de8:	74 24                	je     c0009e0e <Phys::allocatePage()+0x3d>
c0009dea:	53                   	push   ebx
c0009deb:	e8 42 ff ff ff       	call   c0009d32 <Phys::getPageState(unsigned long)>
c0009df0:	5a                   	pop    edx
c0009df1:	84 c0                	test   al,al
c0009df3:	74 69                	je     c0009e5e <Phys::allocatePage()+0x8d>
c0009df5:	43                   	inc    ebx
c0009df6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009dfc:	75 e2                	jne    c0009de0 <Phys::allocatePage()+0xf>
c0009dfe:	31 db                	xor    ebx,ebx
c0009e00:	c7 05 28 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026428,0x0
c0009e0a:	39 de                	cmp    esi,ebx
c0009e0c:	75 dc                	jne    c0009dea <Phys::allocatePage()+0x19>
c0009e0e:	83 ec 0c             	sub    esp,0xc
c0009e11:	80 35 4c 64 02 c0 01 	xor    BYTE PTR ds:0xc002644c,0x1
c0009e18:	68 48 29 02 c0       	push   0xc0022948
c0009e1d:	e8 51 2c 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0009e22:	58                   	pop    eax
c0009e23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009e28:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e2b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0009e31:	e8 cc 28 00 00       	call   c000c702 <VAS::scanForEviction()>
c0009e36:	83 c4 10             	add    esp,0x10
c0009e39:	85 c0                	test   eax,eax
c0009e3b:	75 62                	jne    c0009e9f <Phys::allocatePage()+0xce>
c0009e3d:	83 ec 0c             	sub    esp,0xc
c0009e40:	68 6c 29 02 c0       	push   0xc002296c
c0009e45:	e8 eb a4 00 00       	call   c0014335 <Krnl::panic(char const*)>
c0009e4a:	83 c4 10             	add    esp,0x10
c0009e4d:	8b 1d 28 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026428
c0009e53:	53                   	push   ebx
c0009e54:	e8 d9 fe ff ff       	call   c0009d32 <Phys::getPageState(unsigned long)>
c0009e59:	5a                   	pop    edx
c0009e5a:	84 c0                	test   al,al
c0009e5c:	75 97                	jne    c0009df5 <Phys::allocatePage()+0x24>
c0009e5e:	6a 01                	push   0x1
c0009e60:	53                   	push   ebx
c0009e61:	e8 9a fe ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c0009e66:	5a                   	pop    edx
c0009e67:	a1 34 64 02 c0       	mov    eax,ds:0xc0026434
c0009e6c:	59                   	pop    ecx
c0009e6d:	40                   	inc    eax
c0009e6e:	8b 15 28 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026428
c0009e74:	a3 34 64 02 c0       	mov    ds:0xc0026434,eax
c0009e79:	c1 e2 0c             	shl    edx,0xc
c0009e7c:	52                   	push   edx
c0009e7d:	ff 35 38 64 02 c0    	push   DWORD PTR ds:0xc0026438
c0009e83:	50                   	push   eax
c0009e84:	68 e5 28 02 c0       	push   0xc00228e5
c0009e89:	e8 e5 2b 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0009e8e:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0009e93:	83 c4 10             	add    esp,0x10
c0009e96:	c1 e0 0c             	shl    eax,0xc
c0009e99:	83 c4 14             	add    esp,0x14
c0009e9c:	5b                   	pop    ebx
c0009e9d:	5e                   	pop    esi
c0009e9e:	c3                   	ret    
c0009e9f:	83 ec 08             	sub    esp,0x8
c0009ea2:	89 c2                	mov    edx,eax
c0009ea4:	6a 01                	push   0x1
c0009ea6:	c1 ea 0c             	shr    edx,0xc
c0009ea9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ead:	52                   	push   edx
c0009eae:	e8 4d fe ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c0009eb3:	83 c4 10             	add    esp,0x10
c0009eb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009eba:	eb dd                	jmp    c0009e99 <Phys::allocatePage()+0xc8>

c0009ebc <Phys::allocateContiguousPages(int)>:
c0009ebc:	57                   	push   edi
c0009ebd:	56                   	push   esi
c0009ebe:	53                   	push   ebx
c0009ebf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009ec3:	fa                   	cli    
c0009ec4:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0009eca:	31 db                	xor    ebx,ebx
c0009ecc:	85 db                	test   ebx,ebx
c0009ece:	75 11                	jne    c0009ee1 <Phys::allocateContiguousPages(int)+0x25>
c0009ed0:	e8 fc fe ff ff       	call   c0009dd1 <Phys::allocatePage()>
c0009ed5:	83 fe 01             	cmp    esi,0x1
c0009ed8:	89 c7                	mov    edi,eax
c0009eda:	74 21                	je     c0009efd <Phys::allocateContiguousPages(int)+0x41>
c0009edc:	bb 01 00 00 00       	mov    ebx,0x1
c0009ee1:	e8 eb fe ff ff       	call   c0009dd1 <Phys::allocatePage()>
c0009ee6:	89 da                	mov    edx,ebx
c0009ee8:	c1 e2 0c             	shl    edx,0xc
c0009eeb:	01 fa                	add    edx,edi
c0009eed:	39 c2                	cmp    edx,eax
c0009eef:	74 20                	je     c0009f11 <Phys::allocateContiguousPages(int)+0x55>
c0009ef1:	bb 01 00 00 00       	mov    ebx,0x1
c0009ef6:	89 c7                	mov    edi,eax
c0009ef8:	83 fe 01             	cmp    esi,0x1
c0009efb:	75 e4                	jne    c0009ee1 <Phys::allocateContiguousPages(int)+0x25>
c0009efd:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0009f02:	48                   	dec    eax
c0009f03:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0009f08:	75 01                	jne    c0009f0b <Phys::allocateContiguousPages(int)+0x4f>
c0009f0a:	fb                   	sti    
c0009f0b:	89 f8                	mov    eax,edi
c0009f0d:	5b                   	pop    ebx
c0009f0e:	5e                   	pop    esi
c0009f0f:	5f                   	pop    edi
c0009f10:	c3                   	ret    
c0009f11:	43                   	inc    ebx
c0009f12:	39 f3                	cmp    ebx,esi
c0009f14:	75 b6                	jne    c0009ecc <Phys::allocateContiguousPages(int)+0x10>
c0009f16:	eb e5                	jmp    c0009efd <Phys::allocateContiguousPages(int)+0x41>

c0009f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009f18:	56                   	push   esi
c0009f19:	53                   	push   ebx
c0009f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009f1e:	39 1d 2c 64 02 c0    	cmp    DWORD PTR ds:0xc002642c,ebx
c0009f24:	73 06                	jae    c0009f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009f26:	89 1d 2c 64 02 c0    	mov    DWORD PTR ds:0xc002642c,ebx
c0009f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f30:	c1 eb 0c             	shr    ebx,0xc
c0009f33:	c1 e8 0c             	shr    eax,0xc
c0009f36:	39 d8                	cmp    eax,ebx
c0009f38:	73 13                	jae    c0009f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009f3a:	6a 00                	push   0x0
c0009f3c:	8d 70 01             	lea    esi,[eax+0x1]
c0009f3f:	50                   	push   eax
c0009f40:	e8 bb fd ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c0009f45:	5a                   	pop    edx
c0009f46:	89 f0                	mov    eax,esi
c0009f48:	59                   	pop    ecx
c0009f49:	39 f3                	cmp    ebx,esi
c0009f4b:	75 ed                	jne    c0009f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009f4d:	5b                   	pop    ebx
c0009f4e:	5e                   	pop    esi
c0009f4f:	c3                   	ret    

c0009f50 <Phys::physicalMemorySetup(unsigned int)>:
c0009f50:	55                   	push   ebp
c0009f51:	57                   	push   edi
c0009f52:	56                   	push   esi
c0009f53:	53                   	push   ebx
c0009f54:	31 db                	xor    ebx,ebx
c0009f56:	83 ec 40             	sub    esp,0x40
c0009f59:	6a 10                	push   0x10
c0009f5b:	6a 00                	push   0x0
c0009f5d:	68 3c 64 02 c0       	push   0xc002643c
c0009f62:	e8 1d 67 ff ff       	call   c0000684 <memset>
c0009f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f70:	05 00 10 00 00       	add    eax,0x1000
c0009f75:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009f79:	5a                   	pop    edx
c0009f7a:	59                   	pop    ecx
c0009f7b:	50                   	push   eax
c0009f7c:	68 03 29 02 c0       	push   0xc0022903
c0009f81:	e8 ed 2a 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0009f86:	83 c4 10             	add    esp,0x10
c0009f89:	83 ec 08             	sub    esp,0x8
c0009f8c:	6a 01                	push   0x1
c0009f8e:	53                   	push   ebx
c0009f8f:	43                   	inc    ebx
c0009f90:	e8 6b fd ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c0009f95:	83 c4 10             	add    esp,0x10
c0009f98:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009f9e:	75 e9                	jne    c0009f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0009fa0:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0009fa7:	66 85 c0             	test   ax,ax
c0009faa:	0f 84 8e 01 00 00    	je     c000a13e <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c0009fb0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fb4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009fbc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009fc0:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0009fc5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fc9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009fd1:	eb 15                	jmp    c0009fe8 <Phys::physicalMemorySetup(unsigned int)+0x98>
c0009fd3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009fd7:	83 c3 18             	add    ebx,0x18
c0009fda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009fde:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009fe2:	0f 84 66 01 00 00    	je     c000a14e <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0009fe8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009feb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0009fee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0009ff1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff9:	8b 33                	mov    esi,DWORD PTR [ebx]
c0009ffb:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0009ffe:	01 f0                	add    eax,esi
c000a000:	55                   	push   ebp
c000a001:	11 fa                	adc    edx,edi
c000a003:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a007:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a00b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a00f:	56                   	push   esi
c000a010:	68 9c 29 02 c0       	push   0xc002299c
c000a015:	e8 59 2a 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000a01a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a01e:	83 c4 10             	add    esp,0x10
c000a021:	09 f8                	or     eax,edi
c000a023:	0f 85 25 01 00 00    	jne    c000a14e <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a029:	4d                   	dec    ebp
c000a02a:	75 a7                	jne    c0009fd3 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a02c:	ba 00 00 08 00       	mov    edx,0x80000
c000a031:	89 c1                	mov    ecx,eax
c000a033:	39 f2                	cmp    edx,esi
c000a035:	19 f9                	sbb    ecx,edi
c000a037:	0f 82 a7 00 00 00    	jb     c000a0e4 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a03d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a041:	89 c1                	mov    ecx,eax
c000a043:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a047:	0f 83 97 00 00 00    	jae    c000a0e4 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a04d:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a052:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a056:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a05a:	39 fa                	cmp    edx,edi
c000a05c:	19 e8                	sbb    eax,ebp
c000a05e:	0f 82 63 01 00 00    	jb     c000a1c7 <Phys::physicalMemorySetup(unsigned int)+0x277>
c000a064:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a068:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a06c:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a072:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a077:	83 d5 ff             	adc    ebp,0xffffffff
c000a07a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a07e:	31 c0                	xor    eax,eax
c000a080:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a084:	39 fa                	cmp    edx,edi
c000a086:	89 c1                	mov    ecx,eax
c000a088:	19 e9                	sbb    ecx,ebp
c000a08a:	0f 83 43 ff ff ff    	jae    c0009fd3 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a090:	be 00 00 08 00       	mov    esi,0x80000
c000a095:	57                   	push   edi
c000a096:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a09a:	57                   	push   edi
c000a09b:	56                   	push   esi
c000a09c:	68 c0 29 02 c0       	push   0xc00229c0
c000a0a1:	e8 cd 29 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000a0a6:	5d                   	pop    ebp
c000a0a7:	58                   	pop    eax
c000a0a8:	57                   	push   edi
c000a0a9:	56                   	push   esi
c000a0aa:	e8 69 fe ff ff       	call   c0009f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a0af:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a0b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a0b7:	83 c4 0c             	add    esp,0xc
c000a0ba:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a0be:	03 05 38 64 02 c0    	add    eax,DWORD PTR ds:0xc0026438
c000a0c4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a0cb:	a3 38 64 02 c0       	mov    ds:0xc0026438,eax
c000a0d0:	52                   	push   edx
c000a0d1:	50                   	push   eax
c000a0d2:	68 29 29 02 c0       	push   0xc0022929
c000a0d7:	e8 97 29 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000a0dc:	83 c4 10             	add    esp,0x10
c000a0df:	e9 ef fe ff ff       	jmp    c0009fd3 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0e4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a0e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a0ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a0f0:	39 ea                	cmp    edx,ebp
c000a0f2:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a0f6:	0f 82 d7 fe ff ff    	jb     c0009fd3 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0fc:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a101:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a105:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a109:	0f 83 c4 fe ff ff    	jae    c0009fd3 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a10f:	39 ee                	cmp    esi,ebp
c000a111:	89 f8                	mov    eax,edi
c000a113:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a117:	0f 83 78 ff ff ff    	jae    c000a095 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a11d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a121:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a125:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a129:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a12d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a131:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a135:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a139:	e9 57 ff ff ff       	jmp    c000a095 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a13e:	83 ec 0c             	sub    esp,0xc
c000a141:	68 1b 29 02 c0       	push   0xc002291b
c000a146:	e8 ea a1 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000a14b:	83 c4 10             	add    esp,0x10
c000a14e:	bb 40 01 00 00       	mov    ebx,0x140
c000a153:	83 ec 08             	sub    esp,0x8
c000a156:	6a 00                	push   0x0
c000a158:	53                   	push   ebx
c000a159:	43                   	inc    ebx
c000a15a:	e8 a1 fb ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c000a15f:	ff 05 38 64 02 c0    	inc    DWORD PTR ds:0xc0026438
c000a165:	83 c4 10             	add    esp,0x10
c000a168:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000a16e:	75 e3                	jne    c000a153 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000a170:	83 ec 08             	sub    esp,0x8
c000a173:	6a 00                	push   0x0
c000a175:	6a 05                	push   0x5
c000a177:	e8 84 fb ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c000a17c:	58                   	pop    eax
c000a17d:	5a                   	pop    edx
c000a17e:	6a 00                	push   0x0
c000a180:	6a 06                	push   0x6
c000a182:	e8 79 fb ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c000a187:	59                   	pop    ecx
c000a188:	5b                   	pop    ebx
c000a189:	bb 60 00 00 00       	mov    ebx,0x60
c000a18e:	6a 00                	push   0x0
c000a190:	6a 07                	push   0x7
c000a192:	e8 69 fb ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c000a197:	83 05 38 64 02 c0 03 	add    DWORD PTR ds:0xc0026438,0x3
c000a19e:	83 c4 10             	add    esp,0x10
c000a1a1:	83 ec 08             	sub    esp,0x8
c000a1a4:	6a 00                	push   0x0
c000a1a6:	53                   	push   ebx
c000a1a7:	43                   	inc    ebx
c000a1a8:	e8 53 fb ff ff       	call   c0009d00 <Phys::setPageState(unsigned long, bool)>
c000a1ad:	83 c4 10             	add    esp,0x10
c000a1b0:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a1b6:	75 e9                	jne    c000a1a1 <Phys::physicalMemorySetup(unsigned int)+0x251>
c000a1b8:	83 05 38 64 02 c0 20 	add    DWORD PTR ds:0xc0026438,0x20
c000a1bf:	83 c4 3c             	add    esp,0x3c
c000a1c2:	5b                   	pop    ebx
c000a1c3:	5e                   	pop    esi
c000a1c4:	5f                   	pop    edi
c000a1c5:	5d                   	pop    ebp
c000a1c6:	c3                   	ret    
c000a1c7:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a1cf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a1d7:	e9 88 fe ff ff       	jmp    c000a064 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a1dc <Pipe::isAtty()>:
c000a1dc:	31 c0                	xor    eax,eax
c000a1de:	c3                   	ret    
c000a1df:	90                   	nop

c000a1e0 <Pipe::~Pipe()>:
c000a1e0:	83 ec 0c             	sub    esp,0xc
c000a1e3:	ba 2c 2a 02 c0       	mov    edx,0xc0022a2c
c000a1e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ec:	89 10                	mov    DWORD PTR [eax],edx
c000a1ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1f2:	83 ec 0c             	sub    esp,0xc
c000a1f5:	50                   	push   eax
c000a1f6:	e8 45 12 00 00       	call   c000b440 <UnixFile::~UnixFile()>
c000a1fb:	83 c4 10             	add    esp,0x10
c000a1fe:	90                   	nop
c000a1ff:	83 c4 0c             	add    esp,0xc
c000a202:	c3                   	ret    
c000a203:	90                   	nop

c000a204 <Pipe::~Pipe()>:
c000a204:	83 ec 0c             	sub    esp,0xc
c000a207:	83 ec 0c             	sub    esp,0xc
c000a20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20e:	e8 cd ff ff ff       	call   c000a1e0 <Pipe::~Pipe()>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	83 ec 08             	sub    esp,0x8
c000a219:	6a 20                	push   0x20
c000a21b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a21f:	e8 6e 27 00 00       	call   c000c992 <operator delete(void*, unsigned long)>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 c4 0c             	add    esp,0xc
c000a22a:	c3                   	ret    
c000a22b:	90                   	nop

c000a22c <Pipe::read(unsigned long long, void*, int*)>:
c000a22c:	55                   	push   ebp
c000a22d:	57                   	push   edi
c000a22e:	56                   	push   esi
c000a22f:	53                   	push   ebx
c000a230:	83 ec 1c             	sub    esp,0x1c
c000a233:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a237:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a23b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a23f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a242:	89 c8                	mov    eax,ecx
c000a244:	99                   	cdq    
c000a245:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a249:	74 24                	je     c000a26f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a24b:	39 f9                	cmp    ecx,edi
c000a24d:	89 d1                	mov    ecx,edx
c000a24f:	19 f1                	sbb    ecx,esi
c000a251:	73 1c                	jae    c000a26f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a253:	fa                   	cli    
c000a254:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c000a25a:	e8 a9 dc 00 00       	call   c0017f08 <schedule()>
c000a25f:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000a264:	48                   	dec    eax
c000a265:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000a26a:	75 d3                	jne    c000a23f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a26c:	fb                   	sti    
c000a26d:	eb d0                	jmp    c000a23f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a26f:	39 f8                	cmp    eax,edi
c000a271:	89 d1                	mov    ecx,edx
c000a273:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a276:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a27a:	19 f1                	sbb    ecx,esi
c000a27c:	73 07                	jae    c000a285 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a27e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a281:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a285:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a288:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a28b:	29 f7                	sub    edi,esi
c000a28d:	89 f8                	mov    eax,edi
c000a28f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a293:	99                   	cdq    
c000a294:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a297:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a29b:	19 d0                	sbb    eax,edx
c000a29d:	73 07                	jae    c000a2a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a29f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a2a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a2a9:	89 ea                	mov    edx,ebp
c000a2ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a2af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a2b4:	74 0d                	je     c000a2c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a2b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a2b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a2bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a2c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a2c3:	85 d2                	test   edx,edx
c000a2c5:	74 11                	je     c000a2d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a2c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a2ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a2d2:	89 d1                	mov    ecx,edx
c000a2d4:	89 c7                	mov    edi,eax
c000a2d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a2d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a2de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a2e1:	99                   	cdq    
c000a2e2:	89 f7                	mov    edi,esi
c000a2e4:	03 04 24             	add    eax,DWORD PTR [esp]
c000a2e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a2eb:	c1 ff 1f             	sar    edi,0x1f
c000a2ee:	57                   	push   edi
c000a2ef:	56                   	push   esi
c000a2f0:	52                   	push   edx
c000a2f1:	50                   	push   eax
c000a2f2:	e8 3d 6d 01 00       	call   c0021034 <__umoddi3>
c000a2f7:	83 c4 10             	add    esp,0x10
c000a2fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a2fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a302:	75 10                	jne    c000a314 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a304:	83 ec 0c             	sub    esp,0xc
c000a307:	68 e9 29 02 c0       	push   0xc00229e9
c000a30c:	e8 24 a0 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000a311:	83 c4 10             	add    esp,0x10
c000a314:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a318:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a31b:	89 10                	mov    DWORD PTR [eax],edx
c000a31d:	83 c4 1c             	add    esp,0x1c
c000a320:	31 c0                	xor    eax,eax
c000a322:	5b                   	pop    ebx
c000a323:	5e                   	pop    esi
c000a324:	5f                   	pop    edi
c000a325:	5d                   	pop    ebp
c000a326:	c3                   	ret    
c000a327:	90                   	nop

c000a328 <Pipe::write(unsigned long long, void*, int*)>:
c000a328:	55                   	push   ebp
c000a329:	57                   	push   edi
c000a32a:	56                   	push   esi
c000a32b:	53                   	push   ebx
c000a32c:	83 ec 1c             	sub    esp,0x1c
c000a32f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a333:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a337:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a33a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a33e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a341:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a345:	89 d8                	mov    eax,ebx
c000a347:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a34a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a34e:	89 d6                	mov    esi,edx
c000a350:	89 d7                	mov    edi,edx
c000a352:	c1 ff 1f             	sar    edi,0x1f
c000a355:	03 34 24             	add    esi,DWORD PTR [esp]
c000a358:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a35c:	c1 f8 1f             	sar    eax,0x1f
c000a35f:	39 f3                	cmp    ebx,esi
c000a361:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a365:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a369:	19 f8                	sbb    eax,edi
c000a36b:	b8 01 00 00 00       	mov    eax,0x1
c000a370:	72 6e                	jb     c000a3e0 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a372:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a375:	01 d0                	add    eax,edx
c000a377:	99                   	cdq    
c000a378:	f7 fb                	idiv   ebx
c000a37a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a37e:	29 d3                	sub    ebx,edx
c000a380:	89 d7                	mov    edi,edx
c000a382:	89 de                	mov    esi,ebx
c000a384:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a387:	c1 fb 1f             	sar    ebx,0x1f
c000a38a:	39 f2                	cmp    edx,esi
c000a38c:	19 d8                	sbb    eax,ebx
c000a38e:	b8 00 00 00 00       	mov    eax,0x0
c000a393:	72 04                	jb     c000a399 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a395:	89 d0                	mov    eax,edx
c000a397:	29 f0                	sub    eax,esi
c000a399:	89 d3                	mov    ebx,edx
c000a39b:	29 c3                	sub    ebx,eax
c000a39d:	74 0b                	je     c000a3aa <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a39f:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a3a2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a3a6:	89 d9                	mov    ecx,ebx
c000a3a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a3aa:	85 c0                	test   eax,eax
c000a3ac:	74 0d                	je     c000a3bb <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a3ae:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a3b2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a3b5:	89 de                	mov    esi,ebx
c000a3b7:	89 c1                	mov    ecx,eax
c000a3b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a3bb:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a3be:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a3c3:	75 10                	jne    c000a3d5 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a3c5:	83 ec 0c             	sub    esp,0xc
c000a3c8:	68 05 2a 02 c0       	push   0xc0022a05
c000a3cd:	e8 63 9f 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000a3d2:	83 c4 10             	add    esp,0x10
c000a3d5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a3d9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a3dc:	89 08                	mov    DWORD PTR [eax],ecx
c000a3de:	31 c0                	xor    eax,eax
c000a3e0:	83 c4 1c             	add    esp,0x1c
c000a3e3:	5b                   	pop    ebx
c000a3e4:	5e                   	pop    esi
c000a3e5:	5f                   	pop    edi
c000a3e6:	5d                   	pop    ebp
c000a3e7:	c3                   	ret    

c000a3e8 <Pipe::Pipe(int)>:
c000a3e8:	83 ec 0c             	sub    esp,0xc
c000a3eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3ef:	83 ec 08             	sub    esp,0x8
c000a3f2:	6a 00                	push   0x0
c000a3f4:	50                   	push   eax
c000a3f5:	e8 64 0e 00 00       	call   c000b25e <UnixFile::UnixFile(int)>
c000a3fa:	83 c4 10             	add    esp,0x10
c000a3fd:	ba 2c 2a 02 c0       	mov    edx,0xc0022a2c
c000a402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a406:	89 10                	mov    DWORD PTR [eax],edx
c000a408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a40c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a410:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a417:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a41e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a422:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a429:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a42d:	83 ec 0c             	sub    esp,0xc
c000a430:	50                   	push   eax
c000a431:	e8 8d f5 ff ff       	call   c00099c3 <malloc>
c000a436:	83 c4 10             	add    esp,0x10
c000a439:	89 c2                	mov    edx,eax
c000a43b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a43f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a446:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a44a:	90                   	nop
c000a44b:	83 c4 0c             	add    esp,0xc
c000a44e:	c3                   	ret    
c000a44f:	90                   	nop

c000a450 <VgaText::isAtty()>:
c000a450:	b0 01                	mov    al,0x1
c000a452:	c3                   	ret    
c000a453:	90                   	nop

c000a454 <VgaText::~VgaText()>:
c000a454:	83 ec 0c             	sub    esp,0xc
c000a457:	ba b4 2a 02 c0       	mov    edx,0xc0022ab4
c000a45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a460:	89 10                	mov    DWORD PTR [eax],edx
c000a462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a466:	83 ec 0c             	sub    esp,0xc
c000a469:	50                   	push   eax
c000a46a:	e8 d1 0f 00 00       	call   c000b440 <UnixFile::~UnixFile()>
c000a46f:	83 c4 10             	add    esp,0x10
c000a472:	90                   	nop
c000a473:	83 c4 0c             	add    esp,0xc
c000a476:	c3                   	ret    
c000a477:	90                   	nop

c000a478 <VgaText::~VgaText()>:
c000a478:	83 ec 0c             	sub    esp,0xc
c000a47b:	83 ec 0c             	sub    esp,0xc
c000a47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a482:	e8 cd ff ff ff       	call   c000a454 <VgaText::~VgaText()>
c000a487:	83 c4 10             	add    esp,0x10
c000a48a:	83 ec 08             	sub    esp,0x8
c000a48d:	68 c4 02 00 00       	push   0x2c4
c000a492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a496:	e8 f7 24 00 00       	call   c000c992 <operator delete(void*, unsigned long)>
c000a49b:	83 c4 10             	add    esp,0x10
c000a49e:	83 c4 0c             	add    esp,0xc
c000a4a1:	c3                   	ret    

c000a4a2 <VgaText::read(unsigned long long, void*, int*)>:
c000a4a2:	83 ec 10             	sub    esp,0x10
c000a4a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4b1:	e8 4c 58 00 00       	call   c000fd02 <readKeyboard(VgaText*, char*, unsigned long)>
c000a4b6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a4ba:	89 02                	mov    DWORD PTR [edx],eax
c000a4bc:	31 c0                	xor    eax,eax
c000a4be:	83 c4 1c             	add    esp,0x1c
c000a4c1:	c3                   	ret    

c000a4c2 <setTerminalScrollLock(bool)>:
c000a4c2:	c3                   	ret    

c000a4c3 <addToTerminalCycle(VgaText*)>:
c000a4c3:	8b 15 80 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026480
c000a4c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a4cd:	85 d2                	test   edx,edx
c000a4cf:	75 09                	jne    c000a4da <addToTerminalCycle(VgaText*)+0x17>
c000a4d1:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a4d4:	a3 80 64 02 c0       	mov    ds:0xc0026480,eax
c000a4d9:	c3                   	ret    
c000a4da:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a4dd:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a4e0:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a4e3:	c3                   	ret    

c000a4e4 <installVgaTextImplementation()>:
c000a4e4:	83 ec 10             	sub    esp,0x10
c000a4e7:	6a 20                	push   0x20
c000a4e9:	6a 00                	push   0x0
c000a4eb:	68 60 64 02 c0       	push   0xc0026460
c000a4f0:	e8 8f 61 ff ff       	call   c0000684 <memset>
c000a4f5:	83 c4 1c             	add    esp,0x1c
c000a4f8:	c3                   	ret    

c000a4f9 <scrollTerminalScrollLock(int)>:
c000a4f9:	c3                   	ret    

c000a4fa <VgaText::updateTitle()>:
c000a4fa:	53                   	push   ebx
c000a4fb:	31 c0                	xor    eax,eax
c000a4fd:	83 ec 58             	sub    esp,0x58
c000a500:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a504:	89 e1                	mov    ecx,esp
c000a506:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a50a:	40                   	inc    eax
c000a50b:	83 f8 50             	cmp    eax,0x50
c000a50e:	75 f6                	jne    c000a506 <VgaText::updateTitle()+0xc>
c000a510:	31 c0                	xor    eax,eax
c000a512:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a519:	84 db                	test   bl,bl
c000a51b:	74 06                	je     c000a523 <VgaText::updateTitle()+0x29>
c000a51d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a520:	40                   	inc    eax
c000a521:	eb ef                	jmp    c000a512 <VgaText::updateTitle()+0x18>
c000a523:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a526:	85 c0                	test   eax,eax
c000a528:	74 09                	je     c000a533 <VgaText::updateTitle()+0x39>
c000a52a:	53                   	push   ebx
c000a52b:	53                   	push   ebx
c000a52c:	51                   	push   ecx
c000a52d:	52                   	push   edx
c000a52e:	ff d0                	call   eax
c000a530:	83 c4 10             	add    esp,0x10
c000a533:	83 c4 58             	add    esp,0x58
c000a536:	5b                   	pop    ebx
c000a537:	c3                   	ret    

c000a538 <VgaText::load()>:
c000a538:	53                   	push   ebx
c000a539:	31 c0                	xor    eax,eax
c000a53b:	83 ec 58             	sub    esp,0x58
c000a53e:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a542:	89 e2                	mov    edx,esp
c000a544:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a548:	40                   	inc    eax
c000a549:	83 f8 50             	cmp    eax,0x50
c000a54c:	75 f6                	jne    c000a544 <VgaText::load()+0xc>
c000a54e:	31 c0                	xor    eax,eax
c000a550:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a557:	84 c9                	test   cl,cl
c000a559:	74 06                	je     c000a561 <VgaText::load()+0x29>
c000a55b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a55e:	40                   	inc    eax
c000a55f:	eb ef                	jmp    c000a550 <VgaText::load()+0x18>
c000a561:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a564:	85 c0                	test   eax,eax
c000a566:	74 09                	je     c000a571 <VgaText::load()+0x39>
c000a568:	51                   	push   ecx
c000a569:	51                   	push   ecx
c000a56a:	52                   	push   edx
c000a56b:	53                   	push   ebx
c000a56c:	ff d0                	call   eax
c000a56e:	83 c4 10             	add    esp,0x10
c000a571:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a574:	85 c0                	test   eax,eax
c000a576:	74 09                	je     c000a581 <VgaText::load()+0x49>
c000a578:	83 ec 0c             	sub    esp,0xc
c000a57b:	53                   	push   ebx
c000a57c:	ff d0                	call   eax
c000a57e:	83 c4 10             	add    esp,0x10
c000a581:	83 c4 58             	add    esp,0x58
c000a584:	5b                   	pop    ebx
c000a585:	c3                   	ret    

c000a586 <VgaText::updateCursor()>:
c000a586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a58a:	39 05 84 64 02 c0    	cmp    DWORD PTR ds:0xc0026484,eax
c000a590:	75 09                	jne    c000a59b <VgaText::updateCursor()+0x15>
c000a592:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a595:	85 c0                	test   eax,eax
c000a597:	74 02                	je     c000a59b <VgaText::updateCursor()+0x15>
c000a599:	ff e0                	jmp    eax
c000a59b:	c3                   	ret    

c000a59c <VgaText::doANSI_SGR(int)>:
c000a59c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a5a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5a4:	85 d2                	test   edx,edx
c000a5a6:	75 0b                	jne    c000a5b3 <VgaText::doANSI_SGR(int)+0x17>
c000a5a8:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a5ab:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a5ae:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a5b1:	eb 59                	jmp    c000a60c <VgaText::doANSI_SGR(int)+0x70>
c000a5b3:	83 fa 07             	cmp    edx,0x7
c000a5b6:	75 0b                	jne    c000a5c3 <VgaText::doANSI_SGR(int)+0x27>
c000a5b8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a5bb:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a5be:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a5c1:	eb 49                	jmp    c000a60c <VgaText::doANSI_SGR(int)+0x70>
c000a5c3:	83 fa 1b             	cmp    edx,0x1b
c000a5c6:	74 e0                	je     c000a5a8 <VgaText::doANSI_SGR(int)+0xc>
c000a5c8:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a5cb:	83 f9 07             	cmp    ecx,0x7
c000a5ce:	77 09                	ja     c000a5d9 <VgaText::doANSI_SGR(int)+0x3d>
c000a5d0:	8b 14 8d 00 58 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda800]
c000a5d7:	eb 20                	jmp    c000a5f9 <VgaText::doANSI_SGR(int)+0x5d>
c000a5d9:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a5dc:	83 f9 07             	cmp    ecx,0x7
c000a5df:	77 09                	ja     c000a5ea <VgaText::doANSI_SGR(int)+0x4e>
c000a5e1:	8b 14 8d 00 58 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda800]
c000a5e8:	eb 22                	jmp    c000a60c <VgaText::doANSI_SGR(int)+0x70>
c000a5ea:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a5ed:	83 f9 07             	cmp    ecx,0x7
c000a5f0:	77 0b                	ja     c000a5fd <VgaText::doANSI_SGR(int)+0x61>
c000a5f2:	8b 14 95 b8 56 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda948]
c000a5f9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a5fc:	c3                   	ret    
c000a5fd:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a600:	83 f9 07             	cmp    ecx,0x7
c000a603:	77 0a                	ja     c000a60f <VgaText::doANSI_SGR(int)+0x73>
c000a605:	8b 14 95 90 56 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda970]
c000a60c:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a60f:	c3                   	ret    

c000a610 <VgaText::setDefaultBgColour(VgaColour)>:
c000a610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a614:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a618:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a61b:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a61e:	c3                   	ret    
c000a61f:	90                   	nop

c000a620 <VgaText::setDefaultFgColour(VgaColour)>:
c000a620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a624:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a628:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a62b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a62e:	c3                   	ret    
c000a62f:	90                   	nop

c000a630 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a630:	53                   	push   ebx
c000a631:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a635:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a639:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a63d:	51                   	push   ecx
c000a63e:	e8 cd ff ff ff       	call   c000a610 <VgaText::setDefaultBgColour(VgaColour)>
c000a643:	58                   	pop    eax
c000a644:	5a                   	pop    edx
c000a645:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a649:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a64d:	5b                   	pop    ebx
c000a64e:	eb d0                	jmp    c000a620 <VgaText::setDefaultFgColour(VgaColour)>

c000a650 <VgaText::setTitleTextColour(VgaColour)>:
c000a650:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a654:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a658:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a65b:	e9 9a fe ff ff       	jmp    c000a4fa <VgaText::updateTitle()>

c000a660 <VgaText::setTitleColour(VgaColour)>:
c000a660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a664:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a668:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a66b:	e9 8a fe ff ff       	jmp    c000a4fa <VgaText::updateTitle()>

c000a670 <VgaText::setTitle(char*)>:
c000a670:	53                   	push   ebx
c000a671:	83 ec 10             	sub    esp,0x10
c000a674:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a67c:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a682:	50                   	push   eax
c000a683:	e8 b8 60 ff ff       	call   c0000740 <strcpy>
c000a688:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a68c:	83 c4 18             	add    esp,0x18
c000a68f:	5b                   	pop    ebx
c000a690:	e9 65 fe ff ff       	jmp    c000a4fa <VgaText::updateTitle()>
c000a695:	90                   	nop

c000a696 <VgaText::combineColours(unsigned char, unsigned char)>:
c000a696:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a69a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a69f:	83 e0 0f             	and    eax,0xf
c000a6a2:	c1 e2 04             	shl    edx,0x4
c000a6a5:	09 d0                	or     eax,edx
c000a6a7:	c3                   	ret    

c000a6a8 <VgaText::scrollScreen()>:
c000a6a8:	55                   	push   ebp
c000a6a9:	b9 01 00 00 00       	mov    ecx,0x1
c000a6ae:	57                   	push   edi
c000a6af:	56                   	push   esi
c000a6b0:	53                   	push   ebx
c000a6b1:	83 ec 0c             	sub    esp,0xc
c000a6b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a6b8:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a6be:	31 ff                	xor    edi,edi
c000a6c0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a6c3:	83 f9 17             	cmp    ecx,0x17
c000a6c6:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a6c9:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a6d0:	75 27                	jne    c000a6f9 <VgaText::scrollScreen()+0x51>
c000a6d2:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a6d5:	01 f5                	add    ebp,esi
c000a6d7:	f7 c7 01 00 00 00    	test   edi,0x1
c000a6dd:	74 16                	je     c000a6f5 <VgaText::scrollScreen()+0x4d>
c000a6df:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a6e3:	50                   	push   eax
c000a6e4:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a6e8:	50                   	push   eax
c000a6e9:	e8 a8 ff ff ff       	call   c000a696 <VgaText::combineColours(unsigned char, unsigned char)>
c000a6ee:	5a                   	pop    edx
c000a6ef:	5a                   	pop    edx
c000a6f0:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a6f3:	eb 04                	jmp    c000a6f9 <VgaText::scrollScreen()+0x51>
c000a6f5:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a6f9:	47                   	inc    edi
c000a6fa:	46                   	inc    esi
c000a6fb:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a701:	75 bd                	jne    c000a6c0 <VgaText::scrollScreen()+0x18>
c000a703:	41                   	inc    ecx
c000a704:	83 f9 18             	cmp    ecx,0x18
c000a707:	75 af                	jne    c000a6b8 <VgaText::scrollScreen()+0x10>
c000a709:	39 1d 84 64 02 c0    	cmp    DWORD PTR ds:0xc0026484,ebx
c000a70f:	75 1b                	jne    c000a72c <VgaText::scrollScreen()+0x84>
c000a711:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a715:	74 05                	je     c000a71c <VgaText::scrollScreen()+0x74>
c000a717:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a71a:	eb 10                	jmp    c000a72c <VgaText::scrollScreen()+0x84>
c000a71c:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000a71f:	85 c0                	test   eax,eax
c000a721:	74 09                	je     c000a72c <VgaText::scrollScreen()+0x84>
c000a723:	83 ec 0c             	sub    esp,0xc
c000a726:	53                   	push   ebx
c000a727:	ff d0                	call   eax
c000a729:	83 c4 10             	add    esp,0x10
c000a72c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a730:	83 c4 0c             	add    esp,0xc
c000a733:	5b                   	pop    ebx
c000a734:	5e                   	pop    esi
c000a735:	5f                   	pop    edi
c000a736:	5d                   	pop    ebp
c000a737:	e9 4a fe ff ff       	jmp    c000a586 <VgaText::updateCursor()>

c000a73c <VgaText::combineCharAndColour(char, unsigned char)>:
c000a73c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a741:	c1 e0 08             	shl    eax,0x8
c000a744:	89 c2                	mov    edx,eax
c000a746:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a74b:	09 d0                	or     eax,edx
c000a74d:	c3                   	ret    

c000a74e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a74e:	56                   	push   esi
c000a74f:	53                   	push   ebx
c000a750:	51                   	push   ecx
c000a751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a755:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a75a:	50                   	push   eax
c000a75b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a760:	50                   	push   eax
c000a761:	e8 30 ff ff ff       	call   c000a696 <VgaText::combineColours(unsigned char, unsigned char)>
c000a766:	5b                   	pop    ebx
c000a767:	0f b6 c0             	movzx  eax,al
c000a76a:	5e                   	pop    esi
c000a76b:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000a770:	50                   	push   eax
c000a771:	53                   	push   ebx
c000a772:	e8 c5 ff ff ff       	call   c000a73c <VgaText::combineCharAndColour(char, unsigned char)>
c000a777:	5a                   	pop    edx
c000a778:	5e                   	pop    esi
c000a779:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000a77c:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000a782:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000a786:	0f b7 d2             	movzx  edx,dx
c000a789:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000a78d:	39 0d 84 64 02 c0    	cmp    DWORD PTR ds:0xc0026484,ecx
c000a793:	75 10                	jne    c000a7a5 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a795:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000a798:	85 c0                	test   eax,eax
c000a79a:	74 09                	je     c000a7a5 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a79c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a7a0:	5a                   	pop    edx
c000a7a1:	5b                   	pop    ebx
c000a7a2:	5e                   	pop    esi
c000a7a3:	ff e0                	jmp    eax
c000a7a5:	58                   	pop    eax
c000a7a6:	5b                   	pop    ebx
c000a7a7:	5e                   	pop    esi
c000a7a8:	c3                   	ret    
c000a7a9:	90                   	nop

c000a7aa <VgaText::getCursorX()>:
c000a7aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7ae:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a7b1:	c3                   	ret    

c000a7b2 <VgaText::getCursorY()>:
c000a7b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7b6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a7b9:	c3                   	ret    

c000a7ba <VgaText::setCursor(int, int)>:
c000a7ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7c2:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a7c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a7c9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a7cc:	e9 b5 fd ff ff       	jmp    c000a586 <VgaText::updateCursor()>

c000a7d1 <setActiveTerminal(VgaText*)>:
c000a7d1:	53                   	push   ebx
c000a7d2:	83 ec 08             	sub    esp,0x8
c000a7d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a7d9:	85 db                	test   ebx,ebx
c000a7db:	75 11                	jne    c000a7ee <setActiveTerminal(VgaText*)+0x1d>
c000a7dd:	c7 44 24 10 40 2a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022a40
c000a7e5:	83 c4 08             	add    esp,0x8
c000a7e8:	5b                   	pop    ebx
c000a7e9:	e9 47 9b 00 00       	jmp    c0014335 <Krnl::panic(char const*)>
c000a7ee:	a1 84 64 02 c0       	mov    eax,ds:0xc0026484
c000a7f3:	85 c0                	test   eax,eax
c000a7f5:	74 0c                	je     c000a803 <setActiveTerminal(VgaText*)+0x32>
c000a7f7:	83 ec 0c             	sub    esp,0xc
c000a7fa:	50                   	push   eax
c000a7fb:	e8 86 fd ff ff       	call   c000a586 <VgaText::updateCursor()>
c000a800:	83 c4 10             	add    esp,0x10
c000a803:	89 1d 84 64 02 c0    	mov    DWORD PTR ds:0xc0026484,ebx
c000a809:	51                   	push   ecx
c000a80a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a80d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a810:	53                   	push   ebx
c000a811:	e8 a4 ff ff ff       	call   c000a7ba <VgaText::setCursor(int, int)>
c000a816:	83 c4 10             	add    esp,0x10
c000a819:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a81d:	75 07                	jne    c000a826 <setActiveTerminal(VgaText*)+0x55>
c000a81f:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000a826:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a82a:	83 c4 08             	add    esp,0x8
c000a82d:	5b                   	pop    ebx
c000a82e:	e9 05 fd ff ff       	jmp    c000a538 <VgaText::load()>

c000a833 <doTerminalCycle()>:
c000a833:	83 ec 18             	sub    esp,0x18
c000a836:	a1 80 64 02 c0       	mov    eax,ds:0xc0026480
c000a83b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000a83e:	50                   	push   eax
c000a83f:	a3 80 64 02 c0       	mov    ds:0xc0026480,eax
c000a844:	e8 88 ff ff ff       	call   c000a7d1 <setActiveTerminal(VgaText*)>
c000a849:	83 c4 1c             	add    esp,0x1c
c000a84c:	c3                   	ret    
c000a84d:	90                   	nop

c000a84e <VgaText::setCursorX(int)>:
c000a84e:	83 ec 10             	sub    esp,0x10
c000a851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a855:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a85c:	50                   	push   eax
c000a85d:	e8 58 ff ff ff       	call   c000a7ba <VgaText::setCursor(int, int)>
c000a862:	83 c4 1c             	add    esp,0x1c
c000a865:	c3                   	ret    

c000a866 <VgaText::setCursorY(int)>:
c000a866:	83 ec 10             	sub    esp,0x10
c000a869:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a86d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a871:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a874:	50                   	push   eax
c000a875:	e8 40 ff ff ff       	call   c000a7ba <VgaText::setCursor(int, int)>
c000a87a:	83 c4 1c             	add    esp,0x1c
c000a87d:	c3                   	ret    

c000a87e <VgaText::incrementCursor(bool)>:
c000a87e:	56                   	push   esi
c000a87f:	53                   	push   ebx
c000a880:	51                   	push   ecx
c000a881:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a885:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a889:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a88c:	40                   	inc    eax
c000a88d:	83 f8 50             	cmp    eax,0x50
c000a890:	74 05                	je     c000a897 <VgaText::incrementCursor(bool)+0x19>
c000a892:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a895:	eb 24                	jmp    c000a8bb <VgaText::incrementCursor(bool)+0x3d>
c000a897:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a89a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a8a1:	8d 50 01             	lea    edx,[eax+0x1]
c000a8a4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a8a7:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a8aa:	75 0f                	jne    c000a8bb <VgaText::incrementCursor(bool)+0x3d>
c000a8ac:	83 ec 0c             	sub    esp,0xc
c000a8af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a8b2:	53                   	push   ebx
c000a8b3:	e8 f0 fd ff ff       	call   c000a6a8 <VgaText::scrollScreen()>
c000a8b8:	83 c4 10             	add    esp,0x10
c000a8bb:	89 f0                	mov    eax,esi
c000a8bd:	84 c0                	test   al,al
c000a8bf:	74 0c                	je     c000a8cd <VgaText::incrementCursor(bool)+0x4f>
c000a8c1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a8c5:	5a                   	pop    edx
c000a8c6:	5b                   	pop    ebx
c000a8c7:	5e                   	pop    esi
c000a8c8:	e9 b9 fc ff ff       	jmp    c000a586 <VgaText::updateCursor()>
c000a8cd:	58                   	pop    eax
c000a8ce:	5b                   	pop    ebx
c000a8cf:	5e                   	pop    esi
c000a8d0:	c3                   	ret    
c000a8d1:	90                   	nop

c000a8d2 <VgaText::decrementCursor(bool)>:
c000a8d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a8da:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a8dd:	85 c0                	test   eax,eax
c000a8df:	74 04                	je     c000a8e5 <VgaText::decrementCursor(bool)+0x13>
c000a8e1:	48                   	dec    eax
c000a8e2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a8e5:	84 c9                	test   cl,cl
c000a8e7:	74 09                	je     c000a8f2 <VgaText::decrementCursor(bool)+0x20>
c000a8e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8ed:	e9 94 fc ff ff       	jmp    c000a586 <VgaText::updateCursor()>
c000a8f2:	c3                   	ret    
c000a8f3:	90                   	nop

c000a8f4 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a8f4:	53                   	push   ebx
c000a8f5:	83 ec 08             	sub    esp,0x8
c000a8f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a8fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a900:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a904:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a908:	3c 07                	cmp    al,0x7
c000a90a:	75 2a                	jne    c000a936 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000a90c:	a1 38 65 02 c0       	mov    eax,ds:0xc0026538
c000a911:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a919:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000a921:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000a929:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a92d:	83 c4 08             	add    esp,0x8
c000a930:	5b                   	pop    ebx
c000a931:	e9 58 2f 00 00       	jmp    c000d88e <Buzzer::beep(int, int, bool)>
c000a936:	3c 0d                	cmp    al,0xd
c000a938:	75 09                	jne    c000a943 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000a93a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a941:	eb 2c                	jmp    c000a96f <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a943:	3c 0a                	cmp    al,0xa
c000a945:	75 31                	jne    c000a978 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000a947:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a94a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a951:	8d 50 01             	lea    edx,[eax+0x1]
c000a954:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a957:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a95a:	75 0f                	jne    c000a96b <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000a95c:	83 ec 0c             	sub    esp,0xc
c000a95f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a962:	53                   	push   ebx
c000a963:	e8 40 fd ff ff       	call   c000a6a8 <VgaText::scrollScreen()>
c000a968:	83 c4 10             	add    esp,0x10
c000a96b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a96f:	83 c4 08             	add    esp,0x8
c000a972:	5b                   	pop    ebx
c000a973:	e9 0e fc ff ff       	jmp    c000a586 <VgaText::updateCursor()>
c000a978:	3c 08                	cmp    al,0x8
c000a97a:	75 25                	jne    c000a9a1 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000a97c:	50                   	push   eax
c000a97d:	50                   	push   eax
c000a97e:	6a 01                	push   0x1
c000a980:	53                   	push   ebx
c000a981:	e8 4c ff ff ff       	call   c000a8d2 <VgaText::decrementCursor(bool)>
c000a986:	5a                   	pop    edx
c000a987:	59                   	pop    ecx
c000a988:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a98b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a98e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a991:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a994:	6a 20                	push   0x20
c000a996:	53                   	push   ebx
c000a997:	e8 b2 fd ff ff       	call   c000a74e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a99c:	83 c4 28             	add    esp,0x28
c000a99f:	5b                   	pop    ebx
c000a9a0:	c3                   	ret    
c000a9a1:	83 ec 08             	sub    esp,0x8
c000a9a4:	0f be c0             	movsx  eax,al
c000a9a7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a9aa:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a9ad:	51                   	push   ecx
c000a9ae:	52                   	push   edx
c000a9af:	50                   	push   eax
c000a9b0:	53                   	push   ebx
c000a9b1:	e8 98 fd ff ff       	call   c000a74e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a9b6:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000a9ba:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000a9c2:	83 c4 28             	add    esp,0x28
c000a9c5:	5b                   	pop    ebx
c000a9c6:	e9 b3 fe ff ff       	jmp    c000a87e <VgaText::incrementCursor(bool)>
c000a9cb:	90                   	nop

c000a9cc <VgaText::doUpdate()>:
c000a9cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9d0:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000a9d3:	85 c0                	test   eax,eax
c000a9d5:	74 02                	je     c000a9d9 <VgaText::doUpdate()+0xd>
c000a9d7:	ff e0                	jmp    eax
c000a9d9:	c3                   	ret    

c000a9da <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000a9da:	55                   	push   ebp
c000a9db:	31 ed                	xor    ebp,ebp
c000a9dd:	57                   	push   edi
c000a9de:	56                   	push   esi
c000a9df:	53                   	push   ebx
c000a9e0:	83 ec 1c             	sub    esp,0x1c
c000a9e3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a9e7:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000a9ec:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000a9f3:	50                   	push   eax
c000a9f4:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000a9f9:	50                   	push   eax
c000a9fa:	e8 97 fc ff ff       	call   c000a696 <VgaText::combineColours(unsigned char, unsigned char)>
c000a9ff:	59                   	pop    ecx
c000aa00:	0f b6 c0             	movzx  eax,al
c000aa03:	5e                   	pop    esi
c000aa04:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa09:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000aa0d:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa14:	0f b7 f6             	movzx  esi,si
c000aa17:	01 f6                	add    esi,esi
c000aa19:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa1c:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000aa1f:	84 c0                	test   al,al
c000aa21:	0f 84 fd 00 00 00    	je     c000ab24 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000aa27:	3c 0d                	cmp    al,0xd
c000aa29:	75 0c                	jne    c000aa37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000aa2b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aa32:	e9 e7 00 00 00       	jmp    c000ab1e <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aa37:	3c 0a                	cmp    al,0xa
c000aa39:	75 47                	jne    c000aa82 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000aa3b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000aa3e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aa45:	8d 48 01             	lea    ecx,[eax+0x1]
c000aa48:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000aa4b:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000aa4e:	75 0f                	jne    c000aa5f <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000aa50:	83 ec 0c             	sub    esp,0xc
c000aa53:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000aa56:	53                   	push   ebx
c000aa57:	e8 4c fc ff ff       	call   c000a6a8 <VgaText::scrollScreen()>
c000aa5c:	83 c4 10             	add    esp,0x10
c000aa5f:	83 ec 0c             	sub    esp,0xc
c000aa62:	31 ed                	xor    ebp,ebp
c000aa64:	53                   	push   ebx
c000aa65:	e8 1c fb ff ff       	call   c000a586 <VgaText::updateCursor()>
c000aa6a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa6f:	83 c4 10             	add    esp,0x10
c000aa72:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa75:	0f b7 f6             	movzx  esi,si
c000aa78:	01 f6                	add    esi,esi
c000aa7a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa7d:	e9 9c 00 00 00       	jmp    c000ab1e <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aa82:	3c 08                	cmp    al,0x8
c000aa84:	75 35                	jne    c000aabb <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000aa86:	56                   	push   esi
c000aa87:	56                   	push   esi
c000aa88:	6a 01                	push   0x1
c000aa8a:	53                   	push   ebx
c000aa8b:	e8 42 fe ff ff       	call   c000a8d2 <VgaText::decrementCursor(bool)>
c000aa90:	58                   	pop    eax
c000aa91:	5a                   	pop    edx
c000aa92:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa95:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa98:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aa9b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aa9e:	6a 20                	push   0x20
c000aaa0:	53                   	push   ebx
c000aaa1:	e8 a8 fc ff ff       	call   c000a74e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aaa6:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aaab:	83 c4 20             	add    esp,0x20
c000aaae:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aab1:	0f b7 f6             	movzx  esi,si
c000aab4:	01 f6                	add    esi,esi
c000aab6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aab9:	eb 63                	jmp    c000ab1e <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aabb:	51                   	push   ecx
c000aabc:	51                   	push   ecx
c000aabd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aac1:	50                   	push   eax
c000aac2:	e8 75 fc ff ff       	call   c000a73c <VgaText::combineCharAndColour(char, unsigned char)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	66 89 06             	mov    WORD PTR [esi],ax
c000aacd:	39 1d 84 64 02 c0    	cmp    DWORD PTR ds:0xc0026484,ebx
c000aad3:	75 21                	jne    c000aaf6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000aad5:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000aad8:	85 c0                	test   eax,eax
c000aada:	74 1a                	je     c000aaf6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000aadc:	52                   	push   edx
c000aadd:	52                   	push   edx
c000aade:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aae1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aae4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aae8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aaec:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000aaef:	51                   	push   ecx
c000aaf0:	53                   	push   ebx
c000aaf1:	ff d0                	call   eax
c000aaf3:	83 c4 20             	add    esp,0x20
c000aaf6:	83 c6 02             	add    esi,0x2
c000aaf9:	50                   	push   eax
c000aafa:	50                   	push   eax
c000aafb:	6a 00                	push   0x0
c000aafd:	53                   	push   ebx
c000aafe:	e8 7b fd ff ff       	call   c000a87e <VgaText::incrementCursor(bool)>
c000ab03:	83 c4 10             	add    esp,0x10
c000ab06:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000ab0a:	75 0d                	jne    c000ab19 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000ab0c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ab11:	0f b7 f6             	movzx  esi,si
c000ab14:	01 f6                	add    esi,esi
c000ab16:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ab19:	bd 01 00 00 00       	mov    ebp,0x1
c000ab1e:	47                   	inc    edi
c000ab1f:	e9 f8 fe ff ff       	jmp    c000aa1c <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ab24:	83 ec 0c             	sub    esp,0xc
c000ab27:	53                   	push   ebx
c000ab28:	e8 59 fa ff ff       	call   c000a586 <VgaText::updateCursor()>
c000ab2d:	83 c4 10             	add    esp,0x10
c000ab30:	89 e8                	mov    eax,ebp
c000ab32:	84 c0                	test   al,al
c000ab34:	74 0c                	je     c000ab42 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000ab36:	83 ec 0c             	sub    esp,0xc
c000ab39:	53                   	push   ebx
c000ab3a:	e8 8d fe ff ff       	call   c000a9cc <VgaText::doUpdate()>
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ab49:	83 c4 1c             	add    esp,0x1c
c000ab4c:	5b                   	pop    ebx
c000ab4d:	5e                   	pop    esi
c000ab4e:	5f                   	pop    edi
c000ab4f:	5d                   	pop    ebp
c000ab50:	c3                   	ret    
c000ab51:	90                   	nop

c000ab52 <VgaText::clearScreen()>:
c000ab52:	57                   	push   edi
c000ab53:	56                   	push   esi
c000ab54:	31 f6                	xor    esi,esi
c000ab56:	53                   	push   ebx
c000ab57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab5b:	52                   	push   edx
c000ab5c:	6a 00                	push   0x0
c000ab5e:	6a 00                	push   0x0
c000ab60:	53                   	push   ebx
c000ab61:	e8 54 fc ff ff       	call   c000a7ba <VgaText::setCursor(int, int)>
c000ab66:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ab6d:	83 c4 10             	add    esp,0x10
c000ab70:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000ab73:	7e 20                	jle    c000ab95 <VgaText::clearScreen()+0x43>
c000ab75:	31 ff                	xor    edi,edi
c000ab77:	50                   	push   eax
c000ab78:	50                   	push   eax
c000ab79:	56                   	push   esi
c000ab7a:	57                   	push   edi
c000ab7b:	47                   	inc    edi
c000ab7c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ab7f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ab82:	6a 20                	push   0x20
c000ab84:	53                   	push   ebx
c000ab85:	e8 c4 fb ff ff       	call   c000a74e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ab8a:	83 c4 20             	add    esp,0x20
c000ab8d:	83 ff 50             	cmp    edi,0x50
c000ab90:	75 e5                	jne    c000ab77 <VgaText::clearScreen()+0x25>
c000ab92:	46                   	inc    esi
c000ab93:	eb db                	jmp    c000ab70 <VgaText::clearScreen()+0x1e>
c000ab95:	83 ec 0c             	sub    esp,0xc
c000ab98:	53                   	push   ebx
c000ab99:	e8 2e fe ff ff       	call   c000a9cc <VgaText::doUpdate()>
c000ab9e:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000aba5:	83 c4 10             	add    esp,0x10
c000aba8:	5b                   	pop    ebx
c000aba9:	5e                   	pop    esi
c000abaa:	5f                   	pop    edi
c000abab:	c3                   	ret    

c000abac <VgaText::putchar(char)>:
c000abac:	56                   	push   esi
c000abad:	53                   	push   ebx
c000abae:	83 ec 14             	sub    esp,0x14
c000abb1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abb5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000abb9:	3c 5b                	cmp    al,0x5b
c000abbb:	75 18                	jne    c000abd5 <VgaText::putchar(char)+0x29>
c000abbd:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000abc1:	74 1f                	je     c000abe2 <VgaText::putchar(char)+0x36>
c000abc3:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000abc9:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000abd0:	e9 bd 00 00 00       	jmp    c000ac92 <VgaText::putchar(char)+0xe6>
c000abd5:	3c 1b                	cmp    al,0x1b
c000abd7:	75 09                	jne    c000abe2 <VgaText::putchar(char)+0x36>
c000abd9:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000abdd:	e9 b0 00 00 00       	jmp    c000ac92 <VgaText::putchar(char)+0xe6>
c000abe2:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000abe5:	84 c9                	test   cl,cl
c000abe7:	0f 84 92 00 00 00    	je     c000ac7f <VgaText::putchar(char)+0xd3>
c000abed:	8d 50 c0             	lea    edx,[eax-0x40]
c000abf0:	80 fa 3e             	cmp    dl,0x3e
c000abf3:	77 76                	ja     c000ac6b <VgaText::putchar(char)+0xbf>
c000abf5:	3c 6d                	cmp    al,0x6d
c000abf7:	75 47                	jne    c000ac40 <VgaText::putchar(char)+0x94>
c000abf9:	31 f6                	xor    esi,esi
c000abfb:	31 d2                	xor    edx,edx
c000abfd:	31 c0                	xor    eax,eax
c000abff:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000ac02:	7e 2d                	jle    c000ac31 <VgaText::putchar(char)+0x85>
c000ac04:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000ac09:	80 fa 3b             	cmp    dl,0x3b
c000ac0c:	75 17                	jne    c000ac25 <VgaText::putchar(char)+0x79>
c000ac0e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000ac12:	50                   	push   eax
c000ac13:	53                   	push   ebx
c000ac14:	e8 83 f9 ff ff       	call   c000a59c <VgaText::doANSI_SGR(int)>
c000ac19:	59                   	pop    ecx
c000ac1a:	31 d2                	xor    edx,edx
c000ac1c:	58                   	pop    eax
c000ac1d:	31 c0                	xor    eax,eax
c000ac1f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000ac23:	eb 09                	jmp    c000ac2e <VgaText::putchar(char)+0x82>
c000ac25:	6b c0 0a             	imul   eax,eax,0xa
c000ac28:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000ac2c:	88 ca                	mov    dl,cl
c000ac2e:	46                   	inc    esi
c000ac2f:	eb ce                	jmp    c000abff <VgaText::putchar(char)+0x53>
c000ac31:	84 d2                	test   dl,dl
c000ac33:	74 2e                	je     c000ac63 <VgaText::putchar(char)+0xb7>
c000ac35:	50                   	push   eax
c000ac36:	53                   	push   ebx
c000ac37:	e8 60 f9 ff ff       	call   c000a59c <VgaText::doANSI_SGR(int)>
c000ac3c:	58                   	pop    eax
c000ac3d:	5a                   	pop    edx
c000ac3e:	eb 23                	jmp    c000ac63 <VgaText::putchar(char)+0xb7>
c000ac40:	3c 4a                	cmp    al,0x4a
c000ac42:	75 1f                	jne    c000ac63 <VgaText::putchar(char)+0xb7>
c000ac44:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000ac48:	75 19                	jne    c000ac63 <VgaText::putchar(char)+0xb7>
c000ac4a:	83 ec 0c             	sub    esp,0xc
c000ac4d:	53                   	push   ebx
c000ac4e:	e8 ff fe ff ff       	call   c000ab52 <VgaText::clearScreen()>
c000ac53:	83 c4 0c             	add    esp,0xc
c000ac56:	6a 00                	push   0x0
c000ac58:	6a 00                	push   0x0
c000ac5a:	53                   	push   ebx
c000ac5b:	e8 5a fb ff ff       	call   c000a7ba <VgaText::setCursor(int, int)>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000ac69:	eb 27                	jmp    c000ac92 <VgaText::putchar(char)+0xe6>
c000ac6b:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000ac6e:	83 fa 0e             	cmp    edx,0xe
c000ac71:	7f 1f                	jg     c000ac92 <VgaText::putchar(char)+0xe6>
c000ac73:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ac76:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000ac79:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000ac7d:	eb 13                	jmp    c000ac92 <VgaText::putchar(char)+0xe6>
c000ac7f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ac82:	0f be c0             	movsx  eax,al
c000ac85:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ac88:	50                   	push   eax
c000ac89:	53                   	push   ebx
c000ac8a:	e8 65 fc ff ff       	call   c000a8f4 <VgaText::putchar(char, VgaColour, VgaColour)>
c000ac8f:	83 c4 10             	add    esp,0x10
c000ac92:	83 c4 14             	add    esp,0x14
c000ac95:	5b                   	pop    ebx
c000ac96:	5e                   	pop    esi
c000ac97:	c3                   	ret    

c000ac98 <VgaText::putx(unsigned int)>:
c000ac98:	57                   	push   edi
c000ac99:	b9 11 00 00 00       	mov    ecx,0x11
c000ac9e:	56                   	push   esi
c000ac9f:	be 4e 2a 02 c0       	mov    esi,0xc0022a4e
c000aca4:	53                   	push   ebx
c000aca5:	83 ec 20             	sub    esp,0x20
c000aca8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000acac:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000acb0:	fc                   	cld    
c000acb1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000acb3:	be 08 00 00 00       	mov    esi,0x8
c000acb8:	50                   	push   eax
c000acb9:	50                   	push   eax
c000acba:	89 d8                	mov    eax,ebx
c000acbc:	c1 e3 04             	shl    ebx,0x4
c000acbf:	c1 e8 1c             	shr    eax,0x1c
c000acc2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000acc7:	50                   	push   eax
c000acc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000accc:	e8 db fe ff ff       	call   c000abac <VgaText::putchar(char)>
c000acd1:	83 c4 10             	add    esp,0x10
c000acd4:	4e                   	dec    esi
c000acd5:	75 e1                	jne    c000acb8 <VgaText::putx(unsigned int)+0x20>
c000acd7:	83 c4 20             	add    esp,0x20
c000acda:	5b                   	pop    ebx
c000acdb:	5e                   	pop    esi
c000acdc:	5f                   	pop    edi
c000acdd:	c3                   	ret    

c000acde <VgaText::puts(char const*)>:
c000acde:	53                   	push   ebx
c000acdf:	83 ec 08             	sub    esp,0x8
c000ace2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ace6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ace9:	84 c0                	test   al,al
c000aceb:	74 12                	je     c000acff <VgaText::puts(char const*)+0x21>
c000aced:	43                   	inc    ebx
c000acee:	51                   	push   ecx
c000acef:	51                   	push   ecx
c000acf0:	50                   	push   eax
c000acf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acf5:	e8 b2 fe ff ff       	call   c000abac <VgaText::putchar(char)>
c000acfa:	83 c4 10             	add    esp,0x10
c000acfd:	eb e7                	jmp    c000ace6 <VgaText::puts(char const*)+0x8>
c000acff:	83 c4 08             	add    esp,0x8
c000ad02:	5b                   	pop    ebx
c000ad03:	c3                   	ret    

c000ad04 <VgaText::VgaText(char const*)>:
c000ad04:	57                   	push   edi
c000ad05:	56                   	push   esi
c000ad06:	53                   	push   ebx
c000ad07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad0b:	83 ec 08             	sub    esp,0x8
c000ad0e:	6a 00                	push   0x0
c000ad10:	50                   	push   eax
c000ad11:	e8 48 05 00 00       	call   c000b25e <UnixFile::UnixFile(int)>
c000ad16:	83 c4 10             	add    esp,0x10
c000ad19:	ba b4 2a 02 c0       	mov    edx,0xc0022ab4
c000ad1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad22:	89 10                	mov    DWORD PTR [eax],edx
c000ad24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad28:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000ad2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad33:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000ad3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad3e:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000ad42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad46:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000ad4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad4e:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000ad55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad59:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000ad60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad64:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000ad6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad6f:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000ad76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad7a:	8d 50 60             	lea    edx,[eax+0x60]
c000ad7d:	bb 60 64 02 c0       	mov    ebx,0xc0026460
c000ad82:	b8 08 00 00 00       	mov    eax,0x8
c000ad87:	fc                   	cld    
c000ad88:	89 d7                	mov    edi,edx
c000ad8a:	89 de                	mov    esi,ebx
c000ad8c:	89 c1                	mov    ecx,eax
c000ad8e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ad90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad94:	05 82 00 00 00       	add    eax,0x82
c000ad99:	83 ec 08             	sub    esp,0x8
c000ad9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ada0:	50                   	push   eax
c000ada1:	e8 9a 59 ff ff       	call   c0000740 <strcpy>
c000ada6:	83 c4 10             	add    esp,0x10
c000ada9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adad:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000adb4:	83 ec 0c             	sub    esp,0xc
c000adb7:	6a 01                	push   0x1
c000adb9:	e8 e3 08 00 00       	call   c000b6a1 <Virt::allocateKernelVirtualPages(int)>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 c2                	mov    edx,eax
c000adc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000adca:	8b 1d 30 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026530
c000add0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000add7:	89 c6                	mov    esi,eax
c000add9:	e8 f3 ef ff ff       	call   c0009dd1 <Phys::allocatePage()>
c000adde:	68 05 0c 00 00       	push   0xc05
c000ade3:	56                   	push   esi
c000ade4:	50                   	push   eax
c000ade5:	53                   	push   ebx
c000ade6:	e8 5d 0f 00 00       	call   c000bd48 <VAS::mapPage(unsigned long, unsigned long, int)>
c000adeb:	83 c4 10             	add    esp,0x10
c000adee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000adf5:	83 ec 04             	sub    esp,0x4
c000adf8:	68 00 0f 00 00       	push   0xf00
c000adfd:	6a 00                	push   0x0
c000adff:	50                   	push   eax
c000ae00:	e8 7f 58 ff ff       	call   c0000684 <memset>
c000ae05:	83 c4 10             	add    esp,0x10
c000ae08:	83 ec 04             	sub    esp,0x4
c000ae0b:	6a 00                	push   0x0
c000ae0d:	6a 07                	push   0x7
c000ae0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae13:	e8 18 f8 ff ff       	call   c000a630 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000ae18:	83 c4 10             	add    esp,0x10
c000ae1b:	83 ec 04             	sub    esp,0x4
c000ae1e:	6a 00                	push   0x0
c000ae20:	6a 00                	push   0x0
c000ae22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae26:	e8 8f f9 ff ff       	call   c000a7ba <VgaText::setCursor(int, int)>
c000ae2b:	83 c4 10             	add    esp,0x10
c000ae2e:	83 ec 0c             	sub    esp,0xc
c000ae31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae35:	e8 18 fd ff ff       	call   c000ab52 <VgaText::clearScreen()>
c000ae3a:	83 c4 10             	add    esp,0x10
c000ae3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae41:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000ae45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae49:	05 02 01 00 00       	add    eax,0x102
c000ae4e:	83 ec 04             	sub    esp,0x4
c000ae51:	68 96 00 00 00       	push   0x96
c000ae56:	6a 00                	push   0x0
c000ae58:	50                   	push   eax
c000ae59:	e8 26 58 ff ff       	call   c0000684 <memset>
c000ae5e:	83 c4 10             	add    esp,0x10
c000ae61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae65:	05 98 01 00 00       	add    eax,0x198
c000ae6a:	83 ec 04             	sub    esp,0x4
c000ae6d:	68 2c 01 00 00       	push   0x12c
c000ae72:	6a 00                	push   0x0
c000ae74:	50                   	push   eax
c000ae75:	e8 0a 58 ff ff       	call   c0000684 <memset>
c000ae7a:	83 c4 10             	add    esp,0x10
c000ae7d:	90                   	nop
c000ae7e:	5b                   	pop    ebx
c000ae7f:	5e                   	pop    esi
c000ae80:	5f                   	pop    edi
c000ae81:	c3                   	ret    

c000ae82 <VgaText::receiveKey(unsigned char)>:
c000ae82:	55                   	push   ebp
c000ae83:	57                   	push   edi
c000ae84:	56                   	push   esi
c000ae85:	53                   	push   ebx
c000ae86:	83 ec 1c             	sub    esp,0x1c
c000ae89:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ae8d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ae91:	84 db                	test   bl,bl
c000ae93:	0f 84 c9 00 00 00    	je     c000af62 <VgaText::receiveKey(unsigned char)+0xe0>
c000ae99:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000ae9f:	80 fb 08             	cmp    bl,0x8
c000aea2:	75 2c                	jne    c000aed0 <VgaText::receiveKey(unsigned char)+0x4e>
c000aea4:	83 ec 0c             	sub    esp,0xc
c000aea7:	57                   	push   edi
c000aea8:	e8 f3 57 ff ff       	call   c00006a0 <strlen>
c000aead:	83 c4 10             	add    esp,0x10
c000aeb0:	85 c0                	test   eax,eax
c000aeb2:	74 41                	je     c000aef5 <VgaText::receiveKey(unsigned char)+0x73>
c000aeb4:	50                   	push   eax
c000aeb5:	50                   	push   eax
c000aeb6:	6a 08                	push   0x8
c000aeb8:	56                   	push   esi
c000aeb9:	e8 ee fc ff ff       	call   c000abac <VgaText::putchar(char)>
c000aebe:	89 3c 24             	mov    DWORD PTR [esp],edi
c000aec1:	e8 da 57 ff ff       	call   c00006a0 <strlen>
c000aec6:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000aece:	eb 22                	jmp    c000aef2 <VgaText::receiveKey(unsigned char)+0x70>
c000aed0:	0f be c3             	movsx  eax,bl
c000aed3:	52                   	push   edx
c000aed4:	52                   	push   edx
c000aed5:	50                   	push   eax
c000aed6:	56                   	push   esi
c000aed7:	e8 d0 fc ff ff       	call   c000abac <VgaText::putchar(char)>
c000aedc:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000aee0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aee5:	59                   	pop    ecx
c000aee6:	5d                   	pop    ebp
c000aee7:	8d 44 24 16          	lea    eax,[esp+0x16]
c000aeeb:	50                   	push   eax
c000aeec:	57                   	push   edi
c000aeed:	e8 8e 59 ff ff       	call   c0000880 <strcat>
c000aef2:	83 c4 10             	add    esp,0x10
c000aef5:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000aefc:	75 05                	jne    c000af03 <VgaText::receiveKey(unsigned char)+0x81>
c000aefe:	80 fb 0a             	cmp    bl,0xa
c000af01:	75 53                	jne    c000af56 <VgaText::receiveKey(unsigned char)+0xd4>
c000af03:	83 ec 0c             	sub    esp,0xc
c000af06:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000af0c:	53                   	push   ebx
c000af0d:	e8 8e 57 ff ff       	call   c00006a0 <strlen>
c000af12:	89 3c 24             	mov    DWORD PTR [esp],edi
c000af15:	89 c5                	mov    ebp,eax
c000af17:	e8 84 57 ff ff       	call   c00006a0 <strlen>
c000af1c:	83 c4 10             	add    esp,0x10
c000af1f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000af23:	3d 2c 01 00 00       	cmp    eax,0x12c
c000af28:	76 10                	jbe    c000af3a <VgaText::receiveKey(unsigned char)+0xb8>
c000af2a:	83 ec 0c             	sub    esp,0xc
c000af2d:	68 5f 2a 02 c0       	push   0xc0022a5f
c000af32:	e8 fe 93 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000af37:	83 c4 10             	add    esp,0x10
c000af3a:	50                   	push   eax
c000af3b:	50                   	push   eax
c000af3c:	57                   	push   edi
c000af3d:	53                   	push   ebx
c000af3e:	e8 3d 59 ff ff       	call   c0000880 <strcat>
c000af43:	83 c4 0c             	add    esp,0xc
c000af46:	68 96 00 00 00       	push   0x96
c000af4b:	6a 00                	push   0x0
c000af4d:	57                   	push   edi
c000af4e:	e8 31 57 ff ff       	call   c0000684 <memset>
c000af53:	83 c4 10             	add    esp,0x10
c000af56:	83 ec 0c             	sub    esp,0xc
c000af59:	56                   	push   esi
c000af5a:	e8 6d fa ff ff       	call   c000a9cc <VgaText::doUpdate()>
c000af5f:	83 c4 10             	add    esp,0x10
c000af62:	83 c4 1c             	add    esp,0x1c
c000af65:	5b                   	pop    ebx
c000af66:	5e                   	pop    esi
c000af67:	5f                   	pop    edi
c000af68:	5d                   	pop    ebp
c000af69:	c3                   	ret    

c000af6a <VgaText::write(unsigned long long, void*, int*)>:
c000af6a:	55                   	push   ebp
c000af6b:	57                   	push   edi
c000af6c:	56                   	push   esi
c000af6d:	53                   	push   ebx
c000af6e:	83 ec 0c             	sub    esp,0xc
c000af71:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000af75:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000af79:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000af7d:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000af84:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000af87:	39 eb                	cmp    ebx,ebp
c000af89:	74 13                	je     c000af9e <VgaText::write(unsigned long long, void*, int*)+0x34>
c000af8b:	43                   	inc    ebx
c000af8c:	50                   	push   eax
c000af8d:	50                   	push   eax
c000af8e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000af92:	50                   	push   eax
c000af93:	56                   	push   esi
c000af94:	e8 13 fc ff ff       	call   c000abac <VgaText::putchar(char)>
c000af99:	83 c4 10             	add    esp,0x10
c000af9c:	eb e9                	jmp    c000af87 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000af9e:	83 ec 0c             	sub    esp,0xc
c000afa1:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000afa8:	56                   	push   esi
c000afa9:	e8 1e fa ff ff       	call   c000a9cc <VgaText::doUpdate()>
c000afae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000afb2:	89 38                	mov    DWORD PTR [eax],edi
c000afb4:	83 c4 1c             	add    esp,0x1c
c000afb7:	31 c0                	xor    eax,eax
c000afb9:	5b                   	pop    ebx
c000afba:	5e                   	pop    esi
c000afbb:	5f                   	pop    edi
c000afbc:	5d                   	pop    ebp
c000afbd:	c3                   	ret    

c000afbe <newTerminal(char*)>:
c000afbe:	83 ec 28             	sub    esp,0x28
c000afc1:	68 c4 02 00 00       	push   0x2c4
c000afc6:	e8 f8 e9 ff ff       	call   c00099c3 <malloc>
c000afcb:	5a                   	pop    edx
c000afcc:	59                   	pop    ecx
c000afcd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000afd1:	50                   	push   eax
c000afd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000afd6:	e8 29 fd ff ff       	call   c000ad04 <VgaText::VgaText(char const*)>
c000afdb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000afdf:	83 c4 2c             	add    esp,0x2c
c000afe2:	c3                   	ret    
c000afe3:	90                   	nop

c000afe4 <TSS::TSS()>:
c000afe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000afe8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000afef:	90                   	nop
c000aff0:	c3                   	ret    
c000aff1:	90                   	nop
c000aff2:	66 90                	xchg   ax,ax

c000aff4 <TSS::setESP(unsigned long)>:
c000aff4:	55                   	push   ebp
c000aff5:	89 e5                	mov    ebp,esp
c000aff7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000affa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000affd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b000:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b003:	90                   	nop
c000b004:	5d                   	pop    ebp
c000b005:	c3                   	ret    
c000b006:	66 90                	xchg   ax,ax

c000b008 <TSS::flush()>:
c000b008:	55                   	push   ebp
c000b009:	89 e5                	mov    ebp,esp
c000b00b:	83 ec 10             	sub    esp,0x10
c000b00e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b011:	8b 00                	mov    eax,DWORD PTR [eax]
c000b013:	83 c8 03             	or     eax,0x3
c000b016:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b01a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b01e:	66 89 d0             	mov    ax,dx
c000b021:	0f 00 d8             	ltr    ax
c000b024:	90                   	nop
c000b025:	c9                   	leave  
c000b026:	c3                   	ret    
c000b027:	90                   	nop

c000b028 <TSS::setup(unsigned long, unsigned long)>:
c000b028:	55                   	push   ebp
c000b029:	89 e5                	mov    ebp,esp
c000b02b:	83 ec 18             	sub    esp,0x18
c000b02e:	83 ec 0c             	sub    esp,0xc
c000b031:	6a 68                	push   0x68
c000b033:	e8 8b e9 ff ff       	call   c00099c3 <malloc>
c000b038:	83 c4 10             	add    esp,0x10
c000b03b:	89 c2                	mov    edx,eax
c000b03d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b040:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b043:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b046:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b049:	83 ec 04             	sub    esp,0x4
c000b04c:	6a 68                	push   0x68
c000b04e:	6a 00                	push   0x0
c000b050:	50                   	push   eax
c000b051:	e8 2e 56 ff ff       	call   c0000684 <memset>
c000b056:	83 c4 10             	add    esp,0x10
c000b059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b05c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b05f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b068:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b06b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b074:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b077:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b07a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b07d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b080:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b083:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b08c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b08f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b098:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b09b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b0a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0a7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b0ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0b3:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b0b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0bf:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b0c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0cb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b0ce:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b0d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0d7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b0da:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b0dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0e3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b0ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0f0:	0f 20 da             	mov    edx,cr3
c000b0f3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b0f6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b0f9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b0fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b102:	83 ec 08             	sub    esp,0x8
c000b105:	50                   	push   eax
c000b106:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b109:	50                   	push   eax
c000b10a:	e8 11 e1 ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000b10f:	83 c4 10             	add    esp,0x10
c000b112:	83 ec 08             	sub    esp,0x8
c000b115:	6a 68                	push   0x68
c000b117:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b11a:	50                   	push   eax
c000b11b:	e8 1c e1 ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c000b120:	83 c4 10             	add    esp,0x10
c000b123:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b127:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b12a:	83 e0 0f             	and    eax,0xf
c000b12d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b130:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b133:	83 c8 40             	or     eax,0x40
c000b136:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b139:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000b13e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b144:	05 78 01 00 00       	add    eax,0x178
c000b149:	83 ec 04             	sub    esp,0x4
c000b14c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b14f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b152:	50                   	push   eax
c000b153:	e8 18 e1 ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000b158:	83 c4 10             	add    esp,0x10
c000b15b:	89 c2                	mov    edx,eax
c000b15d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b160:	89 10                	mov    DWORD PTR [eax],edx
c000b162:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000b167:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b16d:	05 78 01 00 00       	add    eax,0x178
c000b172:	83 ec 0c             	sub    esp,0xc
c000b175:	50                   	push   eax
c000b176:	e8 1f e1 ff ff       	call   c000929a <GDT::flush()>
c000b17b:	83 c4 10             	add    esp,0x10
c000b17e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b181:	8b 00                	mov    eax,DWORD PTR [eax]
c000b183:	c9                   	leave  
c000b184:	c3                   	ret    
c000b185:	90                   	nop

c000b186 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b18a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b18e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b191:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b196:	75 08                	jne    c000b1a0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b198:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b19e:	eb 38                	jmp    c000b1d8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b1a0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b1a5:	75 17                	jne    c000b1be <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b1a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b1af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b1b5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b1b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b1bb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b1be:	89 c1                	mov    ecx,eax
c000b1c0:	83 e1 fd             	and    ecx,0xfffffffd
c000b1c3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b1c9:	74 cd                	je     c000b198 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b1cb:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b1d0:	83 e0 ef             	and    eax,0xffffffef
c000b1d3:	83 f8 08             	cmp    eax,0x8
c000b1d6:	76 c0                	jbe    c000b198 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b1d8:	31 c0                	xor    eax,eax
c000b1da:	c3                   	ret    
c000b1db:	90                   	nop

c000b1dc <ReservedFilename::isAtty()>:
c000b1dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b1e3:	31 c0                	xor    eax,eax
c000b1e5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b1eb:	74 09                	je     c000b1f6 <ReservedFilename::isAtty()+0x1a>
c000b1ed:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b1f3:	0f 94 c0             	sete   al
c000b1f6:	c3                   	ret    
c000b1f7:	90                   	nop

c000b1f8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b1f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b200:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b203:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b207:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b20c:	75 08                	jne    c000b216 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b20e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b214:	eb 3d                	jmp    c000b253 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b216:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b21b:	75 17                	jne    c000b234 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b21d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b222:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b225:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b22b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b22d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b231:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b234:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b239:	75 04                	jne    c000b23f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b23b:	89 0a                	mov    DWORD PTR [edx],ecx
c000b23d:	eb 14                	jmp    c000b253 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b23f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b244:	74 c8                	je     c000b20e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b246:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b24b:	83 e0 ef             	and    eax,0xffffffef
c000b24e:	83 f8 08             	cmp    eax,0x8
c000b251:	76 bb                	jbe    c000b20e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b253:	31 c0                	xor    eax,eax
c000b255:	c3                   	ret    

c000b256 <UnixFile::getFileDescriptor()>:
c000b256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b25a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b25d:	c3                   	ret    

c000b25e <UnixFile::UnixFile(int)>:
c000b25e:	53                   	push   ebx
c000b25f:	83 ec 28             	sub    esp,0x28
c000b262:	ba 7c 2b 02 c0       	mov    edx,0xc0022b7c
c000b267:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b26b:	89 10                	mov    DWORD PTR [eax],edx
c000b26d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b275:	0f 8f 8c 01 00 00    	jg     c000b407 <UnixFile::UnixFile(int)+0x1a9>
c000b27b:	a1 40 58 02 c0       	mov    eax,ds:0xc0025840
c000b280:	8d 50 01             	lea    edx,[eax+0x1]
c000b283:	89 15 40 58 02 c0    	mov    DWORD PTR ds:0xc0025840,edx
c000b289:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b28d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b290:	83 ec 08             	sub    esp,0x8
c000b293:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b297:	68 18 65 02 c0       	push   0xc0026518
c000b29c:	e8 7b 5f 01 00       	call   c002121c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b2a1:	83 c4 10             	add    esp,0x10
c000b2a4:	a0 14 65 02 c0       	mov    al,ds:0xc0026514
c000b2a9:	83 f0 01             	xor    eax,0x1
c000b2ac:	84 c0                	test   al,al
c000b2ae:	0f 84 54 01 00 00    	je     c000b408 <UnixFile::UnixFile(int)+0x1aa>
c000b2b4:	c6 05 14 65 02 c0 01 	mov    BYTE PTR ds:0xc0026514,0x1
c000b2bb:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b2c3:	83 ec 0c             	sub    esp,0xc
c000b2c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2ca:	e8 f4 e6 ff ff       	call   c00099c3 <malloc>
c000b2cf:	83 c4 10             	add    esp,0x10
c000b2d2:	89 c3                	mov    ebx,eax
c000b2d4:	83 ec 08             	sub    esp,0x8
c000b2d7:	68 03 ff ff 0f       	push   0xfffff03
c000b2dc:	53                   	push   ebx
c000b2dd:	e8 2c 01 00 00       	call   c000b40e <ReservedFilename::ReservedFilename(int)>
c000b2e2:	83 c4 10             	add    esp,0x10
c000b2e5:	89 1d 0c 65 02 c0    	mov    DWORD PTR ds:0xc002650c,ebx
c000b2eb:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b2f3:	83 ec 0c             	sub    esp,0xc
c000b2f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2fa:	e8 c4 e6 ff ff       	call   c00099c3 <malloc>
c000b2ff:	83 c4 10             	add    esp,0x10
c000b302:	89 c3                	mov    ebx,eax
c000b304:	83 ec 08             	sub    esp,0x8
c000b307:	68 01 ff ff 0f       	push   0xfffff01
c000b30c:	53                   	push   ebx
c000b30d:	e8 fc 00 00 00       	call   c000b40e <ReservedFilename::ReservedFilename(int)>
c000b312:	83 c4 10             	add    esp,0x10
c000b315:	89 1d 10 65 02 c0    	mov    DWORD PTR ds:0xc0026510,ebx
c000b31b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b323:	83 ec 0c             	sub    esp,0xc
c000b326:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b32a:	e8 94 e6 ff ff       	call   c00099c3 <malloc>
c000b32f:	83 c4 10             	add    esp,0x10
c000b332:	89 c3                	mov    ebx,eax
c000b334:	83 ec 08             	sub    esp,0x8
c000b337:	68 00 ff ff 0f       	push   0xfffff00
c000b33c:	53                   	push   ebx
c000b33d:	e8 cc 00 00 00       	call   c000b40e <ReservedFilename::ReservedFilename(int)>
c000b342:	83 c4 10             	add    esp,0x10
c000b345:	89 1d 04 65 02 c0    	mov    DWORD PTR ds:0xc0026504,ebx
c000b34b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b353:	83 ec 0c             	sub    esp,0xc
c000b356:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b35a:	e8 64 e6 ff ff       	call   c00099c3 <malloc>
c000b35f:	83 c4 10             	add    esp,0x10
c000b362:	89 c3                	mov    ebx,eax
c000b364:	83 ec 08             	sub    esp,0x8
c000b367:	68 02 ff ff 0f       	push   0xfffff02
c000b36c:	53                   	push   ebx
c000b36d:	e8 9c 00 00 00       	call   c000b40e <ReservedFilename::ReservedFilename(int)>
c000b372:	83 c4 10             	add    esp,0x10
c000b375:	89 1d 08 65 02 c0    	mov    DWORD PTR ds:0xc0026508,ebx
c000b37b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b383:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b388:	7f 7e                	jg     c000b408 <UnixFile::UnixFile(int)+0x1aa>
c000b38a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b392:	83 ec 0c             	sub    esp,0xc
c000b395:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b399:	e8 25 e6 ff ff       	call   c00099c3 <malloc>
c000b39e:	83 c4 10             	add    esp,0x10
c000b3a1:	89 c3                	mov    ebx,eax
c000b3a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3a7:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b3ac:	83 ec 08             	sub    esp,0x8
c000b3af:	50                   	push   eax
c000b3b0:	53                   	push   ebx
c000b3b1:	e8 58 00 00 00       	call   c000b40e <ReservedFilename::ReservedFilename(int)>
c000b3b6:	83 c4 10             	add    esp,0x10
c000b3b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3bd:	89 1c 85 e0 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9b20],ebx
c000b3c4:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b3cc:	83 ec 0c             	sub    esp,0xc
c000b3cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d3:	e8 eb e5 ff ff       	call   c00099c3 <malloc>
c000b3d8:	83 c4 10             	add    esp,0x10
c000b3db:	89 c3                	mov    ebx,eax
c000b3dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3e1:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b3e6:	83 ec 08             	sub    esp,0x8
c000b3e9:	50                   	push   eax
c000b3ea:	53                   	push   ebx
c000b3eb:	e8 1e 00 00 00       	call   c000b40e <ReservedFilename::ReservedFilename(int)>
c000b3f0:	83 c4 10             	add    esp,0x10
c000b3f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3f7:	89 1c 85 a0 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9b60],ebx
c000b3fe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b402:	e9 7c ff ff ff       	jmp    c000b383 <UnixFile::UnixFile(int)+0x125>
c000b407:	90                   	nop
c000b408:	83 c4 28             	add    esp,0x28
c000b40b:	5b                   	pop    ebx
c000b40c:	c3                   	ret    
c000b40d:	90                   	nop

c000b40e <ReservedFilename::ReservedFilename(int)>:
c000b40e:	83 ec 0c             	sub    esp,0xc
c000b411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b415:	83 ec 08             	sub    esp,0x8
c000b418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41c:	50                   	push   eax
c000b41d:	e8 3c fe ff ff       	call   c000b25e <UnixFile::UnixFile(int)>
c000b422:	83 c4 10             	add    esp,0x10
c000b425:	ba 98 2b 02 c0       	mov    edx,0xc0022b98
c000b42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42e:	89 10                	mov    DWORD PTR [eax],edx
c000b430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b434:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b438:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b43b:	90                   	nop
c000b43c:	83 c4 0c             	add    esp,0xc
c000b43f:	c3                   	ret    

c000b440 <UnixFile::~UnixFile()>:
c000b440:	83 ec 1c             	sub    esp,0x1c
c000b443:	ba 7c 2b 02 c0       	mov    edx,0xc0022b7c
c000b448:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b44c:	89 10                	mov    DWORD PTR [eax],edx
c000b44e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b452:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b455:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b45a:	7f 73                	jg     c000b4cf <UnixFile::~UnixFile()+0x8f>
c000b45c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b464:	83 ec 0c             	sub    esp,0xc
c000b467:	68 18 65 02 c0       	push   0xc0026518
c000b46c:	e8 7f 5e 01 00       	call   c00212f0 <LinkedList<UnixFile>::getFirstElement()>
c000b471:	83 c4 10             	add    esp,0x10
c000b474:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b478:	83 ec 0c             	sub    esp,0xc
c000b47b:	68 18 65 02 c0       	push   0xc0026518
c000b480:	e8 73 5e 01 00       	call   c00212f8 <LinkedList<UnixFile>::removeFirst()>
c000b485:	83 c4 10             	add    esp,0x10
c000b488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b48c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b490:	74 40                	je     c000b4d2 <UnixFile::~UnixFile()+0x92>
c000b492:	83 ec 08             	sub    esp,0x8
c000b495:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b499:	68 18 65 02 c0       	push   0xc0026518
c000b49e:	e8 79 5d 01 00       	call   c002121c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b4a3:	83 c4 10             	add    esp,0x10
c000b4a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b4aa:	8d 50 01             	lea    edx,[eax+0x1]
c000b4ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4b1:	3d 88 13 00 00       	cmp    eax,0x1388
c000b4b6:	0f 94 c0             	sete   al
c000b4b9:	84 c0                	test   al,al
c000b4bb:	74 a7                	je     c000b464 <UnixFile::~UnixFile()+0x24>
c000b4bd:	83 ec 0c             	sub    esp,0xc
c000b4c0:	68 54 2b 02 c0       	push   0xc0022b54
c000b4c5:	e8 6b 8e 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000b4ca:	83 c4 10             	add    esp,0x10
c000b4cd:	eb 95                	jmp    c000b464 <UnixFile::~UnixFile()+0x24>
c000b4cf:	90                   	nop
c000b4d0:	eb 01                	jmp    c000b4d3 <UnixFile::~UnixFile()+0x93>
c000b4d2:	90                   	nop
c000b4d3:	90                   	nop
c000b4d4:	83 c4 1c             	add    esp,0x1c
c000b4d7:	c3                   	ret    

c000b4d8 <UnixFile::~UnixFile()>:
c000b4d8:	83 ec 0c             	sub    esp,0xc
c000b4db:	83 ec 0c             	sub    esp,0xc
c000b4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e2:	e8 59 ff ff ff       	call   c000b440 <UnixFile::~UnixFile()>
c000b4e7:	83 c4 10             	add    esp,0x10
c000b4ea:	83 ec 08             	sub    esp,0x8
c000b4ed:	6a 0c                	push   0xc
c000b4ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4f3:	e8 9a 14 00 00       	call   c000c992 <operator delete(void*, unsigned long)>
c000b4f8:	83 c4 10             	add    esp,0x10
c000b4fb:	83 c4 0c             	add    esp,0xc
c000b4fe:	c3                   	ret    
c000b4ff:	90                   	nop

c000b500 <ReservedFilename::~ReservedFilename()>:
c000b500:	83 ec 0c             	sub    esp,0xc
c000b503:	ba 98 2b 02 c0       	mov    edx,0xc0022b98
c000b508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b50c:	89 10                	mov    DWORD PTR [eax],edx
c000b50e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b512:	83 ec 0c             	sub    esp,0xc
c000b515:	50                   	push   eax
c000b516:	e8 25 ff ff ff       	call   c000b440 <UnixFile::~UnixFile()>
c000b51b:	83 c4 10             	add    esp,0x10
c000b51e:	90                   	nop
c000b51f:	83 c4 0c             	add    esp,0xc
c000b522:	c3                   	ret    
c000b523:	90                   	nop

c000b524 <ReservedFilename::~ReservedFilename()>:
c000b524:	83 ec 0c             	sub    esp,0xc
c000b527:	83 ec 0c             	sub    esp,0xc
c000b52a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52e:	e8 cd ff ff ff       	call   c000b500 <ReservedFilename::~ReservedFilename()>
c000b533:	83 c4 10             	add    esp,0x10
c000b536:	83 ec 08             	sub    esp,0x8
c000b539:	6a 0c                	push   0xc
c000b53b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b53f:	e8 4e 14 00 00       	call   c000c992 <operator delete(void*, unsigned long)>
c000b544:	83 c4 10             	add    esp,0x10
c000b547:	83 c4 0c             	add    esp,0xc
c000b54a:	c3                   	ret    

c000b54b <getFromFileDescriptor(int)>:
c000b54b:	53                   	push   ebx
c000b54c:	83 ec 08             	sub    esp,0x8
c000b54f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b553:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b559:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b55f:	7f 2c                	jg     c000b58d <getFromFileDescriptor(int)+0x42>
c000b561:	83 ec 0c             	sub    esp,0xc
c000b564:	68 18 65 02 c0       	push   0xc0026518
c000b569:	e8 82 5d 01 00       	call   c00212f0 <LinkedList<UnixFile>::getFirstElement()>
c000b56e:	83 c4 10             	add    esp,0x10
c000b571:	85 c0                	test   eax,eax
c000b573:	75 04                	jne    c000b579 <getFromFileDescriptor(int)+0x2e>
c000b575:	31 c0                	xor    eax,eax
c000b577:	eb 6e                	jmp    c000b5e7 <getFromFileDescriptor(int)+0x9c>
c000b579:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b57c:	74 69                	je     c000b5e7 <getFromFileDescriptor(int)+0x9c>
c000b57e:	52                   	push   edx
c000b57f:	52                   	push   edx
c000b580:	50                   	push   eax
c000b581:	68 18 65 02 c0       	push   0xc0026518
c000b586:	e8 0f 5e 01 00       	call   c002139a <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b58b:	eb e1                	jmp    c000b56e <getFromFileDescriptor(int)+0x23>
c000b58d:	a1 0c 65 02 c0       	mov    eax,ds:0xc002650c
c000b592:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b598:	74 4d                	je     c000b5e7 <getFromFileDescriptor(int)+0x9c>
c000b59a:	a1 10 65 02 c0       	mov    eax,ds:0xc0026510
c000b59f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b5a5:	74 40                	je     c000b5e7 <getFromFileDescriptor(int)+0x9c>
c000b5a7:	a1 08 65 02 c0       	mov    eax,ds:0xc0026508
c000b5ac:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b5b2:	74 33                	je     c000b5e7 <getFromFileDescriptor(int)+0x9c>
c000b5b4:	a1 04 65 02 c0       	mov    eax,ds:0xc0026504
c000b5b9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b5bf:	74 26                	je     c000b5e7 <getFromFileDescriptor(int)+0x9c>
c000b5c1:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b5c7:	83 f8 08             	cmp    eax,0x8
c000b5ca:	77 09                	ja     c000b5d5 <getFromFileDescriptor(int)+0x8a>
c000b5cc:	8b 04 85 e0 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9b20]
c000b5d3:	eb 12                	jmp    c000b5e7 <getFromFileDescriptor(int)+0x9c>
c000b5d5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b5db:	83 fb 08             	cmp    ebx,0x8
c000b5de:	77 95                	ja     c000b575 <getFromFileDescriptor(int)+0x2a>
c000b5e0:	8b 04 9d a0 64 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9b60]
c000b5e7:	83 c4 08             	add    esp,0x8
c000b5ea:	5b                   	pop    ebx
c000b5eb:	c3                   	ret    

c000b5ec <__static_initialization_and_destruction_0(int, int)>:
c000b5ec:	83 ec 0c             	sub    esp,0xc
c000b5ef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b5f4:	75 34                	jne    c000b62a <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b5f6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b5fe:	75 2a                	jne    c000b62a <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b600:	83 ec 0c             	sub    esp,0xc
c000b603:	68 18 65 02 c0       	push   0xc0026518
c000b608:	e8 cd 5b 01 00       	call   c00211da <LinkedList<UnixFile>::LinkedList()>
c000b60d:	83 c4 10             	add    esp,0x10
c000b610:	83 ec 04             	sub    esp,0x4
c000b613:	68 68 56 02 c0       	push   0xc0025668
c000b618:	68 18 65 02 c0       	push   0xc0026518
c000b61d:	68 d8 11 02 c0       	push   0xc00211d8
c000b622:	e8 e5 12 00 00       	call   c000c90c <__cxa_atexit>
c000b627:	83 c4 10             	add    esp,0x10
c000b62a:	90                   	nop
c000b62b:	83 c4 0c             	add    esp,0xc
c000b62e:	c3                   	ret    

c000b62f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b62f:	83 ec 0c             	sub    esp,0xc
c000b632:	83 ec 08             	sub    esp,0x8
c000b635:	68 ff ff 00 00       	push   0xffff
c000b63a:	6a 01                	push   0x1
c000b63c:	e8 ab ff ff ff       	call   c000b5ec <__static_initialization_and_destruction_0(int, int)>
c000b641:	83 c4 10             	add    esp,0x10
c000b644:	83 c4 0c             	add    esp,0xc
c000b647:	c3                   	ret    

c000b648 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b648:	53                   	push   ebx
c000b649:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b64d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b651:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b657:	89 c8                	mov    eax,ecx
c000b659:	d1 e8                	shr    eax,1
c000b65b:	03 05 48 58 02 c0    	add    eax,DWORD PTR ds:0xc0025848
c000b661:	83 e1 01             	and    ecx,0x1
c000b664:	8a 10                	mov    dl,BYTE PTR [eax]
c000b666:	75 09                	jne    c000b671 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b668:	83 e2 f0             	and    edx,0xfffffff0
c000b66b:	09 da                	or     edx,ebx
c000b66d:	88 10                	mov    BYTE PTR [eax],dl
c000b66f:	5b                   	pop    ebx
c000b670:	c3                   	ret    
c000b671:	c1 e3 04             	shl    ebx,0x4
c000b674:	83 e2 0f             	and    edx,0xf
c000b677:	09 da                	or     edx,ebx
c000b679:	88 10                	mov    BYTE PTR [eax],dl
c000b67b:	5b                   	pop    ebx
c000b67c:	c3                   	ret    

c000b67d <Virt::getPageState(unsigned long)>:
c000b67d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b681:	8b 0d 48 58 02 c0    	mov    ecx,DWORD PTR ds:0xc0025848
c000b687:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b68d:	89 d0                	mov    eax,edx
c000b68f:	d1 e8                	shr    eax,1
c000b691:	83 e2 01             	and    edx,0x1
c000b694:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b697:	75 04                	jne    c000b69d <Virt::getPageState(unsigned long)+0x20>
c000b699:	83 e0 0f             	and    eax,0xf
c000b69c:	c3                   	ret    
c000b69d:	c0 e8 04             	shr    al,0x4
c000b6a0:	c3                   	ret    

c000b6a1 <Virt::allocateKernelVirtualPages(int)>:
c000b6a1:	55                   	push   ebp
c000b6a2:	31 ed                	xor    ebp,ebp
c000b6a4:	57                   	push   edi
c000b6a5:	56                   	push   esi
c000b6a6:	53                   	push   ebx
c000b6a7:	31 db                	xor    ebx,ebx
c000b6a9:	83 ec 1c             	sub    esp,0x1c
c000b6ac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b6b0:	8b 3d 44 58 02 c0    	mov    edi,DWORD PTR ds:0xc0025844
c000b6b6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b6bb:	57                   	push   edi
c000b6bc:	e8 bc ff ff ff       	call   c000b67d <Virt::getPageState(unsigned long)>
c000b6c1:	5a                   	pop    edx
c000b6c2:	84 c0                	test   al,al
c000b6c4:	75 3a                	jne    c000b700 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b6c6:	85 db                	test   ebx,ebx
c000b6c8:	75 02                	jne    c000b6cc <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b6ca:	89 fd                	mov    ebp,edi
c000b6cc:	43                   	inc    ebx
c000b6cd:	39 f3                	cmp    ebx,esi
c000b6cf:	74 5a                	je     c000b72b <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b6d1:	47                   	inc    edi
c000b6d2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b6d8:	76 31                	jbe    c000b70b <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b6da:	c7 05 44 58 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0025844,0xc8000
c000b6e4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b6e9:	75 28                	jne    c000b713 <Virt::allocateKernelVirtualPages(int)+0x72>
c000b6eb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b6f0:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b6f5:	57                   	push   edi
c000b6f6:	e8 82 ff ff ff       	call   c000b67d <Virt::getPageState(unsigned long)>
c000b6fb:	5a                   	pop    edx
c000b6fc:	84 c0                	test   al,al
c000b6fe:	74 c6                	je     c000b6c6 <Virt::allocateKernelVirtualPages(int)+0x25>
c000b700:	31 db                	xor    ebx,ebx
c000b702:	47                   	inc    edi
c000b703:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b709:	77 cf                	ja     c000b6da <Virt::allocateKernelVirtualPages(int)+0x39>
c000b70b:	89 3d 44 58 02 c0    	mov    DWORD PTR ds:0xc0025844,edi
c000b711:	eb a8                	jmp    c000b6bb <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b713:	83 ec 0c             	sub    esp,0xc
c000b716:	68 ac 2b 02 c0       	push   0xc0022bac
c000b71b:	e8 15 8c 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000b720:	8b 3d 44 58 02 c0    	mov    edi,DWORD PTR ds:0xc0025844
c000b726:	83 c4 10             	add    esp,0x10
c000b729:	eb 90                	jmp    c000b6bb <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b72b:	89 2d 44 58 02 c0    	mov    DWORD PTR ds:0xc0025844,ebp
c000b731:	4b                   	dec    ebx
c000b732:	74 5f                	je     c000b793 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b734:	85 f6                	test   esi,esi
c000b736:	74 3d                	je     c000b775 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b738:	89 e8                	mov    eax,ebp
c000b73a:	31 db                	xor    ebx,ebx
c000b73c:	8d 7e ff             	lea    edi,[esi-0x1]
c000b73f:	eb 14                	jmp    c000b755 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b741:	6a 01                	push   0x1
c000b743:	43                   	inc    ebx
c000b744:	50                   	push   eax
c000b745:	e8 fe fe ff ff       	call   c000b648 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b74a:	58                   	pop    eax
c000b74b:	39 f3                	cmp    ebx,esi
c000b74d:	5a                   	pop    edx
c000b74e:	74 25                	je     c000b775 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b750:	a1 44 58 02 c0       	mov    eax,ds:0xc0025844
c000b755:	8d 50 01             	lea    edx,[eax+0x1]
c000b758:	85 db                	test   ebx,ebx
c000b75a:	89 15 44 58 02 c0    	mov    DWORD PTR ds:0xc0025844,edx
c000b760:	74 20                	je     c000b782 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b762:	39 df                	cmp    edi,ebx
c000b764:	75 db                	jne    c000b741 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b766:	6a 03                	push   0x3
c000b768:	43                   	inc    ebx
c000b769:	50                   	push   eax
c000b76a:	e8 d9 fe ff ff       	call   c000b648 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b76f:	59                   	pop    ecx
c000b770:	39 f3                	cmp    ebx,esi
c000b772:	58                   	pop    eax
c000b773:	75 db                	jne    c000b750 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b775:	83 c4 1c             	add    esp,0x1c
c000b778:	89 e8                	mov    eax,ebp
c000b77a:	5b                   	pop    ebx
c000b77b:	c1 e0 0c             	shl    eax,0xc
c000b77e:	5e                   	pop    esi
c000b77f:	5f                   	pop    edi
c000b780:	5d                   	pop    ebp
c000b781:	c3                   	ret    
c000b782:	6a 02                	push   0x2
c000b784:	bb 01 00 00 00       	mov    ebx,0x1
c000b789:	50                   	push   eax
c000b78a:	e8 b9 fe ff ff       	call   c000b648 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b78f:	58                   	pop    eax
c000b790:	5a                   	pop    edx
c000b791:	eb bd                	jmp    c000b750 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b793:	6a 04                	push   0x4
c000b795:	8d 45 01             	lea    eax,[ebp+0x1]
c000b798:	55                   	push   ebp
c000b799:	a3 44 58 02 c0       	mov    ds:0xc0025844,eax
c000b79e:	e8 a5 fe ff ff       	call   c000b648 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7a3:	59                   	pop    ecx
c000b7a4:	89 e8                	mov    eax,ebp
c000b7a6:	5b                   	pop    ebx
c000b7a7:	c1 e0 0c             	shl    eax,0xc
c000b7aa:	83 c4 1c             	add    esp,0x1c
c000b7ad:	5b                   	pop    ebx
c000b7ae:	5e                   	pop    esi
c000b7af:	5f                   	pop    edi
c000b7b0:	5d                   	pop    ebp
c000b7b1:	c3                   	ret    

c000b7b2 <Virt::freeSwapfilePage(unsigned long)>:
c000b7b2:	53                   	push   ebx
c000b7b3:	8b 15 2c 65 02 c0    	mov    edx,DWORD PTR ds:0xc002652c
c000b7b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b7bd:	b8 01 00 00 00       	mov    eax,0x1
c000b7c2:	89 cb                	mov    ebx,ecx
c000b7c4:	d3 e0                	shl    eax,cl
c000b7c6:	c1 eb 05             	shr    ebx,0x5
c000b7c9:	f7 d0                	not    eax
c000b7cb:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b7ce:	5b                   	pop    ebx
c000b7cf:	c3                   	ret    

c000b7d0 <Virt::swapIDToSector(unsigned long)>:
c000b7d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d4:	0f af 05 4c 58 02 c0 	imul   eax,DWORD PTR ds:0xc002584c
c000b7db:	03 05 54 58 02 c0    	add    eax,DWORD PTR ds:0xc0025854
c000b7e1:	c3                   	ret    

c000b7e2 <Virt::allocateSwapfilePage()>:
c000b7e2:	55                   	push   ebp
c000b7e3:	31 d2                	xor    edx,edx
c000b7e5:	57                   	push   edi
c000b7e6:	56                   	push   esi
c000b7e7:	53                   	push   ebx
c000b7e8:	83 ec 0c             	sub    esp,0xc
c000b7eb:	8b 0d 4c 58 02 c0    	mov    ecx,DWORD PTR ds:0xc002584c
c000b7f1:	a1 50 58 02 c0       	mov    eax,ds:0xc0025850
c000b7f6:	f7 f1                	div    ecx
c000b7f8:	39 0d 50 58 02 c0    	cmp    DWORD PTR ds:0xc0025850,ecx
c000b7fe:	72 2d                	jb     c000b82d <Virt::allocateSwapfilePage()+0x4b>
c000b800:	8b 35 2c 65 02 c0    	mov    esi,DWORD PTR ds:0xc002652c
c000b806:	8b 16                	mov    edx,DWORD PTR [esi]
c000b808:	f6 c2 01             	test   dl,0x1
c000b80b:	74 3c                	je     c000b849 <Virt::allocateSwapfilePage()+0x67>
c000b80d:	31 c9                	xor    ecx,ecx
c000b80f:	bf 01 00 00 00       	mov    edi,0x1
c000b814:	eb 12                	jmp    c000b828 <Virt::allocateSwapfilePage()+0x46>
c000b816:	89 fd                	mov    ebp,edi
c000b818:	89 ca                	mov    edx,ecx
c000b81a:	d3 e5                	shl    ebp,cl
c000b81c:	c1 ea 05             	shr    edx,0x5
c000b81f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b822:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b824:	85 ea                	test   edx,ebp
c000b826:	74 2a                	je     c000b852 <Virt::allocateSwapfilePage()+0x70>
c000b828:	41                   	inc    ecx
c000b829:	39 c8                	cmp    eax,ecx
c000b82b:	77 e9                	ja     c000b816 <Virt::allocateSwapfilePage()+0x34>
c000b82d:	83 ec 0c             	sub    esp,0xc
c000b830:	68 64 2d 02 c0       	push   0xc0022d64
c000b835:	e8 fb 8a 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000b83a:	83 c4 10             	add    esp,0x10
c000b83d:	31 c9                	xor    ecx,ecx
c000b83f:	83 c4 0c             	add    esp,0xc
c000b842:	89 c8                	mov    eax,ecx
c000b844:	5b                   	pop    ebx
c000b845:	5e                   	pop    esi
c000b846:	5f                   	pop    edi
c000b847:	5d                   	pop    ebp
c000b848:	c3                   	ret    
c000b849:	89 f3                	mov    ebx,esi
c000b84b:	bd 01 00 00 00       	mov    ebp,0x1
c000b850:	31 c9                	xor    ecx,ecx
c000b852:	09 ea                	or     edx,ebp
c000b854:	89 c8                	mov    eax,ecx
c000b856:	89 13                	mov    DWORD PTR [ebx],edx
c000b858:	83 c4 0c             	add    esp,0xc
c000b85b:	5b                   	pop    ebx
c000b85c:	5e                   	pop    esi
c000b85d:	5f                   	pop    edi
c000b85e:	5d                   	pop    ebp
c000b85f:	c3                   	ret    

c000b860 <Virt::virtualMemorySetup()>:
c000b860:	53                   	push   ebx
c000b861:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b866:	6a 0f                	push   0xf
c000b868:	53                   	push   ebx
c000b869:	43                   	inc    ebx
c000b86a:	e8 d9 fd ff ff       	call   c000b648 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b86f:	58                   	pop    eax
c000b870:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b876:	5a                   	pop    edx
c000b877:	75 ed                	jne    c000b866 <Virt::virtualMemorySetup()+0x6>
c000b879:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b87e:	6a 00                	push   0x0
c000b880:	53                   	push   ebx
c000b881:	43                   	inc    ebx
c000b882:	e8 c1 fd ff ff       	call   c000b648 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b887:	59                   	pop    ecx
c000b888:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b88e:	58                   	pop    eax
c000b88f:	75 ed                	jne    c000b87e <Virt::virtualMemorySetup()+0x1e>
c000b891:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b896:	6a 0f                	push   0xf
c000b898:	53                   	push   ebx
c000b899:	43                   	inc    ebx
c000b89a:	e8 a9 fd ff ff       	call   c000b648 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b89f:	58                   	pop    eax
c000b8a0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b8a6:	5a                   	pop    edx
c000b8a7:	75 ed                	jne    c000b896 <Virt::virtualMemorySetup()+0x36>
c000b8a9:	5b                   	pop    ebx
c000b8aa:	c3                   	ret    

c000b8ab <Virt::setupPageSwapping(int)>:
c000b8ab:	53                   	push   ebx
c000b8ac:	83 ec 0c             	sub    esp,0xc
c000b8af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b8b3:	a1 c8 69 02 c0       	mov    eax,ds:0xc00269c8
c000b8b8:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b8be:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8c0:	53                   	push   ebx
c000b8c1:	c1 e3 0b             	shl    ebx,0xb
c000b8c4:	68 7b 2d 02 c0       	push   0xc0022d7b
c000b8c9:	50                   	push   eax
c000b8ca:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b8cd:	89 1d 50 58 02 c0    	mov    DWORD PTR ds:0xc0025850,ebx
c000b8d3:	c6 05 58 58 02 c0 43 	mov    BYTE PTR ds:0xc0025858,0x43
c000b8da:	c1 eb 08             	shr    ebx,0x8
c000b8dd:	a3 54 58 02 c0       	mov    ds:0xc0025854,eax
c000b8e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b8e5:	c7 05 4c 58 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002584c,0x8
c000b8ef:	e8 cf e0 ff ff       	call   c00099c3 <malloc>
c000b8f4:	83 c4 0c             	add    esp,0xc
c000b8f7:	89 c1                	mov    ecx,eax
c000b8f9:	a3 2c 65 02 c0       	mov    ds:0xc002652c,eax
c000b8fe:	31 d2                	xor    edx,edx
c000b900:	a1 50 58 02 c0       	mov    eax,ds:0xc0025850
c000b905:	f7 35 4c 58 02 c0    	div    DWORD PTR ds:0xc002584c
c000b90b:	c1 e8 05             	shr    eax,0x5
c000b90e:	50                   	push   eax
c000b90f:	6a 00                	push   0x0
c000b911:	51                   	push   ecx
c000b912:	e8 6d 4d ff ff       	call   c0000684 <memset>
c000b917:	83 c4 18             	add    esp,0x18
c000b91a:	5b                   	pop    ebx
c000b91b:	c3                   	ret    

c000b91c <VAS::VAS()>:
c000b91c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b920:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b927:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b92b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b936:	a3 30 65 02 c0       	mov    ds:0xc0026530,eax
c000b93b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b93f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000b943:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b947:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000b94a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b94e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000b955:	90                   	nop
c000b956:	c3                   	ret    
c000b957:	90                   	nop

c000b958 <VAS::VAS(VAS*)>:
c000b958:	83 ec 0c             	sub    esp,0xc
c000b95b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b95f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b96a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b971:	83 ec 0c             	sub    esp,0xc
c000b974:	68 cc 2b 02 c0       	push   0xc0022bcc
c000b979:	e8 b7 89 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000b97e:	83 c4 10             	add    esp,0x10
c000b981:	90                   	nop
c000b982:	83 c4 0c             	add    esp,0xc
c000b985:	c3                   	ret    

c000b986 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000b986:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b98a:	89 c2                	mov    edx,eax
c000b98c:	c1 e8 0a             	shr    eax,0xa
c000b98f:	c1 ea 16             	shr    edx,0x16
c000b992:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b997:	19 c9                	sbb    ecx,ecx
c000b999:	c1 e2 0c             	shl    edx,0xc
c000b99c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000b9a2:	25 fc 0f 00 00       	and    eax,0xffc
c000b9a7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000b9ae:	01 d0                	add    eax,edx
c000b9b0:	c3                   	ret    
c000b9b1:	90                   	nop

c000b9b2 <VAS::getPageTableEntry(unsigned long)>:
c000b9b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b9b6:	89 ca                	mov    edx,ecx
c000b9b8:	c1 e9 0a             	shr    ecx,0xa
c000b9bb:	c1 ea 16             	shr    edx,0x16
c000b9be:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000b9c4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000b9ca:	c1 e0 0c             	shl    eax,0xc
c000b9cd:	8d 04 08             	lea    eax,[eax+ecx*1]
c000b9d0:	c3                   	ret    

c000b9d1 <Virt::freeKernelVirtualPages(unsigned long)>:
c000b9d1:	57                   	push   edi
c000b9d2:	56                   	push   esi
c000b9d3:	be 01 00 00 00       	mov    esi,0x1
c000b9d8:	53                   	push   ebx
c000b9d9:	83 ec 10             	sub    esp,0x10
c000b9dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b9e0:	c1 eb 0c             	shr    ebx,0xc
c000b9e3:	eb 3f                	jmp    c000ba24 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000b9e5:	83 ec 08             	sub    esp,0x8
c000b9e8:	57                   	push   edi
c000b9e9:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c000b9ef:	e8 be ff ff ff       	call   c000b9b2 <VAS::getPageTableEntry(unsigned long)>
c000b9f4:	83 c4 10             	add    esp,0x10
c000b9f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9f9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b9fd:	f6 c4 04             	test   ah,0x4
c000ba00:	75 5f                	jne    c000ba61 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000ba02:	80 fa 04             	cmp    dl,0x4
c000ba05:	74 78                	je     c000ba7f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000ba07:	80 fa 02             	cmp    dl,0x2
c000ba0a:	0f 84 88 00 00 00    	je     c000ba98 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000ba10:	80 fa 03             	cmp    dl,0x3
c000ba13:	0f 84 ad 00 00 00    	je     c000bac6 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000ba19:	fe ca                	dec    dl
c000ba1b:	0f 84 92 00 00 00    	je     c000bab3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000ba21:	43                   	inc    ebx
c000ba22:	31 f6                	xor    esi,esi
c000ba24:	53                   	push   ebx
c000ba25:	89 df                	mov    edi,ebx
c000ba27:	e8 51 fc ff ff       	call   c000b67d <Virt::getPageState(unsigned long)>
c000ba2c:	c1 e7 0c             	shl    edi,0xc
c000ba2f:	59                   	pop    ecx
c000ba30:	84 c0                	test   al,al
c000ba32:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ba36:	75 ad                	jne    c000b9e5 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000ba38:	83 ec 0c             	sub    esp,0xc
c000ba3b:	68 92 2d 02 c0       	push   0xc0022d92
c000ba40:	e8 f0 88 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000ba45:	58                   	pop    eax
c000ba46:	5a                   	pop    edx
c000ba47:	57                   	push   edi
c000ba48:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c000ba4e:	e8 5f ff ff ff       	call   c000b9b2 <VAS::getPageTableEntry(unsigned long)>
c000ba53:	83 c4 10             	add    esp,0x10
c000ba56:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba58:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba5c:	f6 c4 04             	test   ah,0x4
c000ba5f:	74 c0                	je     c000ba21 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000ba61:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000ba65:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ba6a:	83 ec 0c             	sub    esp,0xc
c000ba6d:	50                   	push   eax
c000ba6e:	e8 db e2 ff ff       	call   c0009d4e <Phys::freePage(unsigned long)>
c000ba73:	83 c4 10             	add    esp,0x10
c000ba76:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba7a:	80 fa 04             	cmp    dl,0x4
c000ba7d:	75 88                	jne    c000ba07 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000ba7f:	89 f0                	mov    eax,esi
c000ba81:	84 c0                	test   al,al
c000ba83:	75 47                	jne    c000bacc <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000ba85:	c7 44 24 20 f0 2b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022bf0
c000ba8d:	83 c4 10             	add    esp,0x10
c000ba90:	5b                   	pop    ebx
c000ba91:	5e                   	pop    esi
c000ba92:	5f                   	pop    edi
c000ba93:	e9 9d 88 00 00       	jmp    c0014335 <Krnl::panic(char const*)>
c000ba98:	89 f0                	mov    eax,esi
c000ba9a:	84 c0                	test   al,al
c000ba9c:	75 15                	jne    c000bab3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000ba9e:	83 ec 0c             	sub    esp,0xc
c000baa1:	68 ae 2d 02 c0       	push   0xc0022dae
c000baa6:	e8 8a 88 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000baab:	83 c4 10             	add    esp,0x10
c000baae:	e9 6e ff ff ff       	jmp    c000ba21 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bab3:	83 ec 08             	sub    esp,0x8
c000bab6:	6a 00                	push   0x0
c000bab8:	53                   	push   ebx
c000bab9:	e8 8a fb ff ff       	call   c000b648 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000babe:	83 c4 10             	add    esp,0x10
c000bac1:	e9 5b ff ff ff       	jmp    c000ba21 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bac6:	89 f0                	mov    eax,esi
c000bac8:	84 c0                	test   al,al
c000baca:	75 15                	jne    c000bae1 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000bacc:	83 ec 08             	sub    esp,0x8
c000bacf:	6a 00                	push   0x0
c000bad1:	53                   	push   ebx
c000bad2:	e8 71 fb ff ff       	call   c000b648 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bad7:	83 c4 10             	add    esp,0x10
c000bada:	83 c4 10             	add    esp,0x10
c000badd:	5b                   	pop    ebx
c000bade:	5e                   	pop    esi
c000badf:	5f                   	pop    edi
c000bae0:	c3                   	ret    
c000bae1:	c7 44 24 20 ca 2d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022dca
c000bae9:	83 c4 10             	add    esp,0x10
c000baec:	5b                   	pop    ebx
c000baed:	5e                   	pop    esi
c000baee:	5f                   	pop    edi
c000baef:	e9 41 88 00 00       	jmp    c0014335 <Krnl::panic(char const*)>

c000baf4 <VAS::freeAllocatedPages(unsigned long)>:
c000baf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baf8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bafc:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000bb00:	74 09                	je     c000bb0b <VAS::freeAllocatedPages(unsigned long)+0x17>
c000bb02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bb06:	e9 c6 fe ff ff       	jmp    c000b9d1 <Virt::freeKernelVirtualPages(unsigned long)>
c000bb0b:	c7 44 24 04 14 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022c14
c000bb13:	e9 5b 0f 00 00       	jmp    c000ca73 <Dbg::kprintf(char const*, ...)>

c000bb18 <VAS::virtualToPhysical(unsigned long)>:
c000bb18:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bb1c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bb20:	e8 8d fe ff ff       	call   c000b9b2 <VAS::getPageTableEntry(unsigned long)>
c000bb25:	5a                   	pop    edx
c000bb26:	8b 00                	mov    eax,DWORD PTR [eax]
c000bb28:	59                   	pop    ecx
c000bb29:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb2e:	c3                   	ret    
c000bb2f:	90                   	nop

c000bb30 <VAS::reflagRange(unsigned long, int, int, int)>:
c000bb30:	55                   	push   ebp
c000bb31:	57                   	push   edi
c000bb32:	56                   	push   esi
c000bb33:	53                   	push   ebx
c000bb34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb38:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000bb3c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb40:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bb44:	85 db                	test   ebx,ebx
c000bb46:	7e 22                	jle    c000bb6a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000bb48:	c1 e3 0c             	shl    ebx,0xc
c000bb4b:	01 f3                	add    ebx,esi
c000bb4d:	56                   	push   esi
c000bb4e:	81 c6 00 10 00 00    	add    esi,0x1000
c000bb54:	55                   	push   ebp
c000bb55:	e8 58 fe ff ff       	call   c000b9b2 <VAS::getPageTableEntry(unsigned long)>
c000bb5a:	5a                   	pop    edx
c000bb5b:	59                   	pop    ecx
c000bb5c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bb5e:	21 f9                	and    ecx,edi
c000bb60:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000bb64:	39 f3                	cmp    ebx,esi
c000bb66:	89 08                	mov    DWORD PTR [eax],ecx
c000bb68:	75 e3                	jne    c000bb4d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bb6a:	5b                   	pop    ebx
c000bb6b:	5e                   	pop    esi
c000bb6c:	5f                   	pop    edi
c000bb6d:	5d                   	pop    ebp
c000bb6e:	c3                   	ret    
c000bb6f:	90                   	nop

c000bb70 <VAS::setToWriteCombining(unsigned long, int)>:
c000bb70:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000bb75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bb7b:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000bb82:	75 01                	jne    c000bb85 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bb84:	c3                   	ret    
c000bb85:	68 80 00 00 00       	push   0x80
c000bb8a:	6a ff                	push   0xffffffff
c000bb8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb98:	e8 93 ff ff ff       	call   c000bb30 <VAS::reflagRange(unsigned long, int, int, int)>
c000bb9d:	83 c4 14             	add    esp,0x14
c000bba0:	c3                   	ret    
c000bba1:	90                   	nop

c000bba2 <VAS::mapOtherVASIn(bool, VAS*)>:
c000bba2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bba7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbab:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bbae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbb2:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bbb5:	19 c0                	sbb    eax,eax
c000bbb7:	83 ca 03             	or     edx,0x3
c000bbba:	83 e0 fc             	and    eax,0xfffffffc
c000bbbd:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000bbc4:	0f 20 d8             	mov    eax,cr3
c000bbc7:	0f 22 d8             	mov    cr3,eax
c000bbca:	c3                   	ret    
c000bbcb:	90                   	nop

c000bbcc <VAS::~VAS()>:
c000bbcc:	83 ec 2c             	sub    esp,0x2c
c000bbcf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bbd7:	fa                   	cli    
c000bbd8:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000bbdd:	40                   	inc    eax
c000bbde:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000bbe3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bbe8:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bbed:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bbf3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bbf7:	6a 01                	push   0x1
c000bbf9:	50                   	push   eax
c000bbfa:	e8 a3 ff ff ff       	call   c000bba2 <VAS::mapOtherVASIn(bool, VAS*)>
c000bbff:	83 c4 0c             	add    esp,0xc
c000bc02:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bc0a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bc12:	0f 8f d4 00 00 00    	jg     c000bcec <VAS::~VAS()+0x120>
c000bc18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bc23:	c1 e2 02             	shl    edx,0x2
c000bc26:	01 d0                	add    eax,edx
c000bc28:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc32:	83 e0 01             	and    eax,0x1
c000bc35:	0f 84 a8 00 00 00    	je     c000bce3 <VAS::~VAS()+0x117>
c000bc3b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bc43:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bc4b:	7f 72                	jg     c000bcbf <VAS::~VAS()+0xf3>
c000bc4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bc51:	c1 e0 0a             	shl    eax,0xa
c000bc54:	89 c2                	mov    edx,eax
c000bc56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bc5a:	01 d0                	add    eax,edx
c000bc5c:	c1 e0 0c             	shl    eax,0xc
c000bc5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc63:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bc68:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc6a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc6d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bc73:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bc77:	6a 01                	push   0x1
c000bc79:	50                   	push   eax
c000bc7a:	e8 07 fd ff ff       	call   c000b986 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bc7f:	83 c4 0c             	add    esp,0xc
c000bc82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc8a:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bc90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc94:	25 01 04 00 00       	and    eax,0x401
c000bc99:	3d 01 04 00 00       	cmp    eax,0x401
c000bc9e:	75 19                	jne    c000bcb9 <VAS::~VAS()+0xed>
c000bca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bca4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bca9:	83 ec 0c             	sub    esp,0xc
c000bcac:	50                   	push   eax
c000bcad:	e8 9c e0 ff ff       	call   c0009d4e <Phys::freePage(unsigned long)>
c000bcb2:	83 c4 10             	add    esp,0x10
c000bcb5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bcb9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bcbd:	eb 84                	jmp    c000bc43 <VAS::~VAS()+0x77>
c000bcbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc3:	25 00 04 00 00       	and    eax,0x400
c000bcc8:	74 19                	je     c000bce3 <VAS::~VAS()+0x117>
c000bcca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcce:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bcd3:	83 ec 0c             	sub    esp,0xc
c000bcd6:	50                   	push   eax
c000bcd7:	e8 72 e0 ff ff       	call   c0009d4e <Phys::freePage(unsigned long)>
c000bcdc:	83 c4 10             	add    esp,0x10
c000bcdf:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bce3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bce7:	e9 1e ff ff ff       	jmp    c000bc0a <VAS::~VAS()+0x3e>
c000bcec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bcf3:	83 ec 0c             	sub    esp,0xc
c000bcf6:	50                   	push   eax
c000bcf7:	e8 d5 fc ff ff       	call   c000b9d1 <Virt::freeKernelVirtualPages(unsigned long)>
c000bcfc:	83 c4 10             	add    esp,0x10
c000bcff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd03:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bd06:	83 ec 0c             	sub    esp,0xc
c000bd09:	50                   	push   eax
c000bd0a:	e8 3f e0 ff ff       	call   c0009d4e <Phys::freePage(unsigned long)>
c000bd0f:	83 c4 10             	add    esp,0x10
c000bd12:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bd1a:	c1 e0 02             	shl    eax,0x2
c000bd1d:	83 ec 08             	sub    esp,0x8
c000bd20:	50                   	push   eax
c000bd21:	68 38 2c 02 c0       	push   0xc0022c38
c000bd26:	e8 48 0d 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000bd2b:	83 c4 10             	add    esp,0x10
c000bd2e:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000bd33:	48                   	dec    eax
c000bd34:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000bd39:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000bd3e:	85 c0                	test   eax,eax
c000bd40:	75 01                	jne    c000bd43 <VAS::~VAS()+0x177>
c000bd42:	fb                   	sti    
c000bd43:	90                   	nop
c000bd44:	83 c4 2c             	add    esp,0x2c
c000bd47:	c3                   	ret    

c000bd48 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000bd48:	55                   	push   ebp
c000bd49:	57                   	push   edi
c000bd4a:	56                   	push   esi
c000bd4b:	53                   	push   ebx
c000bd4c:	83 ec 1c             	sub    esp,0x1c
c000bd4f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bd53:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bd57:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000bd5d:	77 08                	ja     c000bd67 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000bd5f:	0f 20 d8             	mov    eax,cr3
c000bd62:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000bd65:	75 47                	jne    c000bdae <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000bd67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd6b:	09 d8                	or     eax,ebx
c000bd6d:	a9 ff 0f 00 00       	test   eax,0xfff
c000bd72:	75 57                	jne    c000bdcb <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000bd74:	89 de                	mov    esi,ebx
c000bd76:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bd79:	c1 ee 16             	shr    esi,0x16
c000bd7c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000bd83:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000bd87:	74 54                	je     c000bddd <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000bd89:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd8d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000bd93:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000bd97:	c1 e6 0c             	shl    esi,0xc
c000bd9a:	c1 eb 0a             	shr    ebx,0xa
c000bd9d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000bda3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000bda6:	83 c4 1c             	add    esp,0x1c
c000bda9:	5b                   	pop    ebx
c000bdaa:	5e                   	pop    esi
c000bdab:	5f                   	pop    edi
c000bdac:	5d                   	pop    ebp
c000bdad:	c3                   	ret    
c000bdae:	83 ec 0c             	sub    esp,0xc
c000bdb1:	68 58 2c 02 c0       	push   0xc0022c58
c000bdb6:	e8 b8 0c 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000bdbb:	83 c4 10             	add    esp,0x10
c000bdbe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdc2:	09 d8                	or     eax,ebx
c000bdc4:	a9 ff 0f 00 00       	test   eax,0xfff
c000bdc9:	74 a9                	je     c000bd74 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000bdcb:	83 ec 0c             	sub    esp,0xc
c000bdce:	68 c0 2c 02 c0       	push   0xc0022cc0
c000bdd3:	e8 5d 85 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000bdd8:	83 c4 10             	add    esp,0x10
c000bddb:	eb 97                	jmp    c000bd74 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000bddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bde1:	e8 eb df ff ff       	call   c0009dd1 <Phys::allocatePage()>
c000bde6:	83 ec 0c             	sub    esp,0xc
c000bde9:	89 c5                	mov    ebp,eax
c000bdeb:	8b 0d 30 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026530
c000bdf1:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000bdf5:	6a 01                	push   0x1
c000bdf7:	e8 a5 f8 ff ff       	call   c000b6a1 <Virt::allocateKernelVirtualPages(int)>
c000bdfc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000be03:	6a 01                	push   0x1
c000be05:	50                   	push   eax
c000be06:	55                   	push   ebp
c000be07:	81 cd 07 04 00 00    	or     ebp,0x407
c000be0d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000be11:	51                   	push   ecx
c000be12:	e8 27 02 00 00       	call   c000c03e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000be17:	83 c4 1c             	add    esp,0x1c
c000be1a:	68 00 10 00 00       	push   0x1000
c000be1f:	6a 00                	push   0x0
c000be21:	50                   	push   eax
c000be22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be26:	e8 59 48 ff ff       	call   c0000684 <memset>
c000be2b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000be2f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000be32:	e8 9a fb ff ff       	call   c000b9d1 <Virt::freeKernelVirtualPages(unsigned long)>
c000be37:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be3b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000be3e:	83 c4 10             	add    esp,0x10
c000be41:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000be44:	e9 40 ff ff ff       	jmp    c000bd89 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000be49:	90                   	nop

c000be4a <VAS::allocatePages(int, int)>:
c000be4a:	55                   	push   ebp
c000be4b:	57                   	push   edi
c000be4c:	56                   	push   esi
c000be4d:	53                   	push   ebx
c000be4e:	83 ec 1c             	sub    esp,0x1c
c000be51:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000be55:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000be5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000be60:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be66:	83 e0 01             	and    eax,0x1
c000be69:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000be6d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000be71:	0f 85 cc 00 00 00    	jne    c000bf43 <VAS::allocatePages(int, int)+0xf9>
c000be77:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000be7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be7e:	85 c0                	test   eax,eax
c000be80:	0f 84 a1 00 00 00    	je     c000bf27 <VAS::allocatePages(int, int)+0xdd>
c000be86:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000be8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be8e:	c1 e6 0c             	shl    esi,0xc
c000be91:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000be95:	85 c0                	test   eax,eax
c000be97:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000be9a:	7e 33                	jle    c000becf <VAS::allocatePages(int, int)+0x85>
c000be9c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bea0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bea4:	81 cd 00 04 00 00    	or     ebp,0x400
c000beaa:	e8 22 df ff ff       	call   c0009dd1 <Phys::allocatePage()>
c000beaf:	55                   	push   ebp
c000beb0:	53                   	push   ebx
c000beb1:	50                   	push   eax
c000beb2:	57                   	push   edi
c000beb3:	e8 90 fe ff ff       	call   c000bd48 <VAS::mapPage(unsigned long, unsigned long, int)>
c000beb8:	83 c4 10             	add    esp,0x10
c000bebb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bec0:	74 03                	je     c000bec5 <VAS::allocatePages(int, int)+0x7b>
c000bec2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bec5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000becb:	39 de                	cmp    esi,ebx
c000becd:	75 db                	jne    c000beaa <VAS::allocatePages(int, int)+0x60>
c000becf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bed4:	75 12                	jne    c000bee8 <VAS::allocatePages(int, int)+0x9e>
c000bed6:	0f 20 d8             	mov    eax,cr3
c000bed9:	0f 22 d8             	mov    cr3,eax
c000bedc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bee0:	83 c4 1c             	add    esp,0x1c
c000bee3:	5b                   	pop    ebx
c000bee4:	5e                   	pop    esi
c000bee5:	5f                   	pop    edi
c000bee6:	5d                   	pop    ebp
c000bee7:	c3                   	ret    
c000bee8:	c1 ee 0a             	shr    esi,0xa
c000beeb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000beef:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000bef5:	c1 eb 0a             	shr    ebx,0xa
c000bef8:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000befe:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf04:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf0a:	39 c3                	cmp    ebx,eax
c000bf0c:	77 ce                	ja     c000bedc <VAS::allocatePages(int, int)+0x92>
c000bf0e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf11:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf17:	39 d8                	cmp    eax,ebx
c000bf19:	73 f3                	jae    c000bf0e <VAS::allocatePages(int, int)+0xc4>
c000bf1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf1f:	83 c4 1c             	add    esp,0x1c
c000bf22:	5b                   	pop    ebx
c000bf23:	5e                   	pop    esi
c000bf24:	5f                   	pop    edi
c000bf25:	5d                   	pop    ebp
c000bf26:	c3                   	ret    
c000bf27:	83 ec 0c             	sub    esp,0xc
c000bf2a:	68 e4 2c 02 c0       	push   0xc0022ce4
c000bf2f:	e8 01 84 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000bf34:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bf37:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf3b:	83 c4 10             	add    esp,0x10
c000bf3e:	e9 43 ff ff ff       	jmp    c000be86 <VAS::allocatePages(int, int)+0x3c>
c000bf43:	83 ec 0c             	sub    esp,0xc
c000bf46:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000bf4a:	e8 52 f7 ff ff       	call   c000b6a1 <Virt::allocateKernelVirtualPages(int)>
c000bf4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf53:	83 c4 10             	add    esp,0x10
c000bf56:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bf5b:	0f 87 9b 00 00 00    	ja     c000bffc <VAS::allocatePages(int, int)+0x1b2>
c000bf61:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bf65:	85 d2                	test   edx,edx
c000bf67:	7e 3c                	jle    c000bfa5 <VAS::allocatePages(int, int)+0x15b>
c000bf69:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bf6d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bf71:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bf75:	c1 e5 0c             	shl    ebp,0xc
c000bf78:	81 ce 00 04 00 00    	or     esi,0x400
c000bf7e:	01 dd                	add    ebp,ebx
c000bf80:	e8 4c de ff ff       	call   c0009dd1 <Phys::allocatePage()>
c000bf85:	56                   	push   esi
c000bf86:	53                   	push   ebx
c000bf87:	50                   	push   eax
c000bf88:	57                   	push   edi
c000bf89:	e8 ba fd ff ff       	call   c000bd48 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bf8e:	83 c4 10             	add    esp,0x10
c000bf91:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf96:	74 03                	je     c000bf9b <VAS::allocatePages(int, int)+0x151>
c000bf98:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf9b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bfa1:	39 dd                	cmp    ebp,ebx
c000bfa3:	75 db                	jne    c000bf80 <VAS::allocatePages(int, int)+0x136>
c000bfa5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bfaa:	0f 84 26 ff ff ff    	je     c000bed6 <VAS::allocatePages(int, int)+0x8c>
c000bfb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bfb4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bfb8:	89 d3                	mov    ebx,edx
c000bfba:	c1 e0 0c             	shl    eax,0xc
c000bfbd:	c1 eb 0a             	shr    ebx,0xa
c000bfc0:	01 d0                	add    eax,edx
c000bfc2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bfc8:	c1 e8 0a             	shr    eax,0xa
c000bfcb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bfd1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bfd6:	2d 00 00 40 00       	sub    eax,0x400000
c000bfdb:	39 c3                	cmp    ebx,eax
c000bfdd:	0f 87 f9 fe ff ff    	ja     c000bedc <VAS::allocatePages(int, int)+0x92>
c000bfe3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bfe6:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bfec:	39 d8                	cmp    eax,ebx
c000bfee:	73 f3                	jae    c000bfe3 <VAS::allocatePages(int, int)+0x199>
c000bff0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bff4:	83 c4 1c             	add    esp,0x1c
c000bff7:	5b                   	pop    ebx
c000bff8:	5e                   	pop    esi
c000bff9:	5f                   	pop    edi
c000bffa:	5d                   	pop    ebp
c000bffb:	c3                   	ret    
c000bffc:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000c001:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c007:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c00e:	0f 84 4d ff ff ff    	je     c000bf61 <VAS::allocatePages(int, int)+0x117>
c000c014:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c01c:	e9 40 ff ff ff       	jmp    c000bf61 <VAS::allocatePages(int, int)+0x117>
c000c021:	90                   	nop

c000c022 <VAS::setCPUSpecific(unsigned long)>:
c000c022:	83 ec 0c             	sub    esp,0xc
c000c025:	6a 05                	push   0x5
c000c027:	68 00 00 40 c2       	push   0xc2400000
c000c02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c034:	e8 0f fd ff ff       	call   c000bd48 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c039:	83 c4 1c             	add    esp,0x1c
c000c03c:	c3                   	ret    
c000c03d:	90                   	nop

c000c03e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c03e:	55                   	push   ebp
c000c03f:	57                   	push   edi
c000c040:	56                   	push   esi
c000c041:	53                   	push   ebx
c000c042:	83 ec 1c             	sub    esp,0x1c
c000c045:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000c04a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c04e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c054:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c058:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c05e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c062:	83 e0 01             	and    eax,0x1
c000c065:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c069:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c06d:	85 c0                	test   eax,eax
c000c06f:	7e 39                	jle    c000c0aa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c071:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c075:	89 f3                	mov    ebx,esi
c000c077:	c1 e0 0c             	shl    eax,0xc
c000c07a:	01 f0                	add    eax,esi
c000c07c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c080:	55                   	push   ebp
c000c081:	53                   	push   ebx
c000c082:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c086:	29 f0                	sub    eax,esi
c000c088:	01 d8                	add    eax,ebx
c000c08a:	50                   	push   eax
c000c08b:	57                   	push   edi
c000c08c:	e8 b7 fc ff ff       	call   c000bd48 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c091:	83 c4 10             	add    esp,0x10
c000c094:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c099:	74 03                	je     c000c09e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c09b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c09e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c0a4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c0a8:	75 d6                	jne    c000c080 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c0aa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c0af:	75 10                	jne    c000c0c1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c0b1:	0f 20 d8             	mov    eax,cr3
c000c0b4:	0f 22 d8             	mov    cr3,eax
c000c0b7:	83 c4 1c             	add    esp,0x1c
c000c0ba:	89 f0                	mov    eax,esi
c000c0bc:	5b                   	pop    ebx
c000c0bd:	5e                   	pop    esi
c000c0be:	5f                   	pop    edi
c000c0bf:	5d                   	pop    ebp
c000c0c0:	c3                   	ret    
c000c0c1:	89 f3                	mov    ebx,esi
c000c0c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0c7:	c1 eb 0a             	shr    ebx,0xa
c000c0ca:	c1 e0 0c             	shl    eax,0xc
c000c0cd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c0d3:	01 f0                	add    eax,esi
c000c0d5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c0db:	c1 e8 0a             	shr    eax,0xa
c000c0de:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c0e3:	2d 00 00 40 00       	sub    eax,0x400000
c000c0e8:	39 c3                	cmp    ebx,eax
c000c0ea:	77 cb                	ja     c000c0b7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c0ec:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c0ef:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c0f5:	39 d8                	cmp    eax,ebx
c000c0f7:	73 f3                	jae    c000c0ec <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c0f9:	83 c4 1c             	add    esp,0x1c
c000c0fc:	89 f0                	mov    eax,esi
c000c0fe:	5b                   	pop    ebx
c000c0ff:	5e                   	pop    esi
c000c100:	5f                   	pop    edi
c000c101:	5d                   	pop    ebp
c000c102:	c3                   	ret    
c000c103:	90                   	nop

c000c104 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c104:	55                   	push   ebp
c000c105:	57                   	push   edi
c000c106:	56                   	push   esi
c000c107:	53                   	push   ebx
c000c108:	83 ec 1c             	sub    esp,0x1c
c000c10b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c10f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c113:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c117:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c11b:	a9 ff 0f 00 00       	test   eax,0xfff
c000c120:	75 4a                	jne    c000c16c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c122:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c126:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c129:	c1 eb 16             	shr    ebx,0x16
c000c12c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c133:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c137:	74 4d                	je     c000c186 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c139:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c13d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c141:	c1 e8 0a             	shr    eax,0xa
c000c144:	80 fa 01             	cmp    dl,0x1
c000c147:	19 d2                	sbb    edx,edx
c000c149:	c1 e3 0c             	shl    ebx,0xc
c000c14c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c150:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c156:	25 fc 0f 00 00       	and    eax,0xffc
c000c15b:	01 d8                	add    eax,ebx
c000c15d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c164:	83 c4 1c             	add    esp,0x1c
c000c167:	5b                   	pop    ebx
c000c168:	5e                   	pop    esi
c000c169:	5f                   	pop    edi
c000c16a:	5d                   	pop    ebp
c000c16b:	c3                   	ret    
c000c16c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c170:	83 ec 0c             	sub    esp,0xc
c000c173:	68 10 2d 02 c0       	push   0xc0022d10
c000c178:	e8 b8 81 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000c17d:	83 c4 10             	add    esp,0x10
c000c180:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c184:	eb 9c                	jmp    c000c122 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c186:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c18a:	e8 42 dc ff ff       	call   c0009dd1 <Phys::allocatePage()>
c000c18f:	83 ec 0c             	sub    esp,0xc
c000c192:	89 c5                	mov    ebp,eax
c000c194:	8b 0d 30 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026530
c000c19a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c19e:	6a 01                	push   0x1
c000c1a0:	e8 fc f4 ff ff       	call   c000b6a1 <Virt::allocateKernelVirtualPages(int)>
c000c1a5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c1ac:	6a 01                	push   0x1
c000c1ae:	50                   	push   eax
c000c1af:	55                   	push   ebp
c000c1b0:	81 cd 07 04 00 00    	or     ebp,0x407
c000c1b6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c1ba:	51                   	push   ecx
c000c1bb:	e8 7e fe ff ff       	call   c000c03e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c1c0:	83 c4 1c             	add    esp,0x1c
c000c1c3:	68 00 10 00 00       	push   0x1000
c000c1c8:	6a 00                	push   0x0
c000c1ca:	50                   	push   eax
c000c1cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1cf:	e8 b0 44 ff ff       	call   c0000684 <memset>
c000c1d4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c1d8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c1db:	e8 f1 f7 ff ff       	call   c000b9d1 <Virt::freeKernelVirtualPages(unsigned long)>
c000c1e0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c1e3:	83 c4 10             	add    esp,0x10
c000c1e6:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c1e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1ed:	e9 47 ff ff ff       	jmp    c000c139 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c1f2 <VAS::VAS(bool)>:
c000c1f2:	53                   	push   ebx
c000c1f3:	83 ec 28             	sub    esp,0x28
c000c1f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c1fa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c1fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c202:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c209:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c20d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c214:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c218:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c21c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c21f:	e8 ad db ff ff       	call   c0009dd1 <Phys::allocatePage()>
c000c224:	89 c2                	mov    edx,eax
c000c226:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c22a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c22d:	8b 1d 30 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026530
c000c233:	83 ec 0c             	sub    esp,0xc
c000c236:	6a 01                	push   0x1
c000c238:	e8 64 f4 ff ff       	call   c000b6a1 <Virt::allocateKernelVirtualPages(int)>
c000c23d:	83 c4 10             	add    esp,0x10
c000c240:	89 c2                	mov    edx,eax
c000c242:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c246:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c249:	83 ec 0c             	sub    esp,0xc
c000c24c:	6a 03                	push   0x3
c000c24e:	6a 01                	push   0x1
c000c250:	52                   	push   edx
c000c251:	50                   	push   eax
c000c252:	53                   	push   ebx
c000c253:	e8 e6 fd ff ff       	call   c000c03e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c258:	83 c4 20             	add    esp,0x20
c000c25b:	89 c2                	mov    edx,eax
c000c25d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c261:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c264:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c26c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c274:	7f 1c                	jg     c000c292 <VAS::VAS(bool)+0xa0>
c000c276:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c27a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c27d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c281:	c1 e2 02             	shl    edx,0x2
c000c284:	01 d0                	add    eax,edx
c000c286:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c28c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c290:	eb da                	jmp    c000c26c <VAS::VAS(bool)+0x7a>
c000c292:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c29a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c2a2:	7f 7a                	jg     c000c31e <VAS::VAS(bool)+0x12c>
c000c2a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2a8:	2d 00 02 00 00       	sub    eax,0x200
c000c2ad:	c1 e0 0c             	shl    eax,0xc
c000c2b0:	83 c8 03             	or     eax,0x3
c000c2b3:	89 c2                	mov    edx,eax
c000c2b5:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000c2ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c2c0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c2c6:	83 e0 10             	and    eax,0x10
c000c2c9:	84 c0                	test   al,al
c000c2cb:	74 07                	je     c000c2d4 <VAS::VAS(bool)+0xe2>
c000c2cd:	b8 00 01 00 00       	mov    eax,0x100
c000c2d2:	eb 05                	jmp    c000c2d9 <VAS::VAS(bool)+0xe7>
c000c2d4:	b8 00 00 00 00       	mov    eax,0x0
c000c2d9:	09 d0                	or     eax,edx
c000c2db:	89 c1                	mov    ecx,eax
c000c2dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2e1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c2e8:	c1 e2 02             	shl    edx,0x2
c000c2eb:	01 d0                	add    eax,edx
c000c2ed:	89 ca                	mov    edx,ecx
c000c2ef:	89 10                	mov    DWORD PTR [eax],edx
c000c2f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2f5:	2d 40 03 00 00       	sub    eax,0x340
c000c2fa:	83 f8 7f             	cmp    eax,0x7f
c000c2fd:	77 16                	ja     c000c315 <VAS::VAS(bool)+0x123>
c000c2ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c303:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c306:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c30a:	c1 e2 02             	shl    edx,0x2
c000c30d:	01 d0                	add    eax,edx
c000c30f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c315:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c319:	e9 7c ff ff ff       	jmp    c000c29a <VAS::VAS(bool)+0xa8>
c000c31e:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000c323:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c329:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c32f:	83 e0 10             	and    eax,0x10
c000c332:	84 c0                	test   al,al
c000c334:	74 07                	je     c000c33d <VAS::VAS(bool)+0x14b>
c000c336:	b8 03 41 00 00       	mov    eax,0x4103
c000c33b:	eb 05                	jmp    c000c342 <VAS::VAS(bool)+0x150>
c000c33d:	b8 03 40 00 00       	mov    eax,0x4003
c000c342:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c346:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c349:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c34f:	89 02                	mov    DWORD PTR [edx],eax
c000c351:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000c356:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c35c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c362:	83 ec 08             	sub    esp,0x8
c000c365:	50                   	push   eax
c000c366:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c36a:	e8 b3 fc ff ff       	call   c000c022 <VAS::setCPUSpecific(unsigned long)>
c000c36f:	83 c4 10             	add    esp,0x10
c000c372:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c376:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c379:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000c37e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c384:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c38a:	83 e0 10             	and    eax,0x10
c000c38d:	84 c0                	test   al,al
c000c38f:	74 07                	je     c000c398 <VAS::VAS(bool)+0x1a6>
c000c391:	b8 00 01 00 00       	mov    eax,0x100
c000c396:	eb 05                	jmp    c000c39d <VAS::VAS(bool)+0x1ab>
c000c398:	b8 00 00 00 00       	mov    eax,0x0
c000c39d:	09 c2                	or     edx,eax
c000c39f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c3a6:	05 fc 0f 00 00       	add    eax,0xffc
c000c3ab:	83 ca 03             	or     edx,0x3
c000c3ae:	89 10                	mov    DWORD PTR [eax],edx
c000c3b0:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000c3b5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3bb:	83 ec 0c             	sub    esp,0xc
c000c3be:	50                   	push   eax
c000c3bf:	e8 f6 1d 00 00       	call   c000e1ba <Device::getName()>
c000c3c4:	83 c4 10             	add    esp,0x10
c000c3c7:	83 ec 08             	sub    esp,0x8
c000c3ca:	68 e4 2d 02 c0       	push   0xc0022de4
c000c3cf:	50                   	push   eax
c000c3d0:	e8 f7 43 ff ff       	call   c00007cc <strcmp>
c000c3d5:	83 c4 10             	add    esp,0x10
c000c3d8:	85 c0                	test   eax,eax
c000c3da:	0f 94 c0             	sete   al
c000c3dd:	84 c0                	test   al,al
c000c3df:	0f 84 87 00 00 00    	je     c000c46c <VAS::VAS(bool)+0x27a>
c000c3e5:	fa                   	cli    
c000c3e6:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000c3eb:	40                   	inc    eax
c000c3ec:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000c3f1:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000c3f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3fc:	05 7c 09 00 00       	add    eax,0x97c
c000c401:	83 ec 0c             	sub    esp,0xc
c000c404:	50                   	push   eax
c000c405:	e8 a8 d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c40a:	83 c4 10             	add    esp,0x10
c000c40d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c412:	89 c3                	mov    ebx,eax
c000c414:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000c419:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c41f:	05 7c 09 00 00       	add    eax,0x97c
c000c424:	83 ec 0c             	sub    esp,0xc
c000c427:	50                   	push   eax
c000c428:	e8 85 d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c42d:	83 c4 10             	add    esp,0x10
c000c430:	83 ec 08             	sub    esp,0x8
c000c433:	50                   	push   eax
c000c434:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c438:	e8 75 f5 ff ff       	call   c000b9b2 <VAS::getPageTableEntry(unsigned long)>
c000c43d:	83 c4 10             	add    esp,0x10
c000c440:	8b 00                	mov    eax,DWORD PTR [eax]
c000c442:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c447:	6a 11                	push   0x11
c000c449:	53                   	push   ebx
c000c44a:	50                   	push   eax
c000c44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c44f:	e8 f4 f8 ff ff       	call   c000bd48 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c454:	83 c4 10             	add    esp,0x10
c000c457:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000c45c:	48                   	dec    eax
c000c45d:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000c462:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000c467:	85 c0                	test   eax,eax
c000c469:	75 01                	jne    c000c46c <VAS::VAS(bool)+0x27a>
c000c46b:	fb                   	sti    
c000c46c:	90                   	nop
c000c46d:	83 c4 28             	add    esp,0x28
c000c470:	5b                   	pop    ebx
c000c471:	c3                   	ret    

c000c472 <VAS::evict(unsigned long)>:
c000c472:	55                   	push   ebp
c000c473:	57                   	push   edi
c000c474:	56                   	push   esi
c000c475:	53                   	push   ebx
c000c476:	83 ec 28             	sub    esp,0x28
c000c479:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c47d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c481:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c485:	68 f2 2d 02 c0       	push   0xc0022df2
c000c48a:	e8 e4 05 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c48f:	e8 4e f3 ff ff       	call   c000b7e2 <Virt::allocateSwapfilePage()>
c000c494:	5a                   	pop    edx
c000c495:	89 c7                	mov    edi,eax
c000c497:	59                   	pop    ecx
c000c498:	50                   	push   eax
c000c499:	68 0f 2e 02 c0       	push   0xc0022e0f
c000c49e:	e8 d0 05 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c4a3:	83 c4 10             	add    esp,0x10
c000c4a6:	8b 1d 4c 58 02 c0    	mov    ebx,DWORD PTR ds:0xc002584c
c000c4ac:	85 db                	test   ebx,ebx
c000c4ae:	7e 3d                	jle    c000c4ed <VAS::evict(unsigned long)+0x7b>
c000c4b0:	89 ee                	mov    esi,ebp
c000c4b2:	31 db                	xor    ebx,ebx
c000c4b4:	83 ec 0c             	sub    esp,0xc
c000c4b7:	57                   	push   edi
c000c4b8:	e8 13 f3 ff ff       	call   c000b7d0 <Virt::swapIDToSector(unsigned long)>
c000c4bd:	89 34 24             	mov    DWORD PTR [esp],esi
c000c4c0:	01 d8                	add    eax,ebx
c000c4c2:	6a 01                	push   0x1
c000c4c4:	31 d2                	xor    edx,edx
c000c4c6:	43                   	inc    ebx
c000c4c7:	52                   	push   edx
c000c4c8:	81 c6 00 02 00 00    	add    esi,0x200
c000c4ce:	50                   	push   eax
c000c4cf:	0f be 05 58 58 02 c0 	movsx  eax,BYTE PTR ds:0xc0025858
c000c4d6:	ff 34 85 bc 68 02 c0 	push   DWORD PTR [eax*4-0x3ffd9744]
c000c4dd:	e8 1a 3d 00 00       	call   c00101fc <LogicalDisk::write(unsigned long long, int, void*)>
c000c4e2:	83 c4 20             	add    esp,0x20
c000c4e5:	39 1d 4c 58 02 c0    	cmp    DWORD PTR ds:0xc002584c,ebx
c000c4eb:	7f c7                	jg     c000c4b4 <VAS::evict(unsigned long)+0x42>
c000c4ed:	83 ec 08             	sub    esp,0x8
c000c4f0:	c1 e7 0b             	shl    edi,0xb
c000c4f3:	55                   	push   ebp
c000c4f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c4f8:	e8 b5 f4 ff ff       	call   c000b9b2 <VAS::getPageTableEntry(unsigned long)>
c000c4fd:	5a                   	pop    edx
c000c4fe:	89 c6                	mov    esi,eax
c000c500:	59                   	pop    ecx
c000c501:	ff 30                	push   DWORD PTR [eax]
c000c503:	68 1f 2e 02 c0       	push   0xc0022e1f
c000c508:	e8 66 05 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c50d:	8b 16                	mov    edx,DWORD PTR [esi]
c000c50f:	89 d3                	mov    ebx,edx
c000c511:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c517:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c51d:	09 d7                	or     edi,edx
c000c51f:	89 3e                	mov    DWORD PTR [esi],edi
c000c521:	5e                   	pop    esi
c000c522:	58                   	pop    eax
c000c523:	57                   	push   edi
c000c524:	68 38 2e 02 c0       	push   0xc0022e38
c000c529:	e8 45 05 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c52e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c531:	ff 05 28 65 02 c0    	inc    DWORD PTR ds:0xc0026528
c000c537:	e8 12 d8 ff ff       	call   c0009d4e <Phys::freePage(unsigned long)>
c000c53c:	0f 20 d8             	mov    eax,cr3
c000c53f:	0f 22 d8             	mov    cr3,eax
c000c542:	ff 35 28 65 02 c0    	push   DWORD PTR ds:0xc0026528
c000c548:	55                   	push   ebp
c000c549:	53                   	push   ebx
c000c54a:	68 34 2d 02 c0       	push   0xc0022d34
c000c54f:	e8 1f 05 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c554:	a1 24 65 02 c0       	mov    eax,ds:0xc0026524
c000c559:	c7 44 24 50 51 2e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022e51
c000c561:	8d 50 01             	lea    edx,[eax+0x1]
c000c564:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c568:	89 15 24 65 02 c0    	mov    DWORD PTR ds:0xc0026524,edx
c000c56e:	83 c4 3c             	add    esp,0x3c
c000c571:	5b                   	pop    ebx
c000c572:	5e                   	pop    esi
c000c573:	5f                   	pop    edi
c000c574:	5d                   	pop    ebp
c000c575:	e9 f9 04 00 00       	jmp    c000ca73 <Dbg::kprintf(char const*, ...)>

c000c57a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c57a:	55                   	push   ebp
c000c57b:	57                   	push   edi
c000c57c:	56                   	push   esi
c000c57d:	53                   	push   ebx
c000c57e:	83 ec 24             	sub    esp,0x24
c000c581:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c585:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c589:	68 62 2e 02 c0       	push   0xc0022e62
c000c58e:	e8 e0 04 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c593:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000c597:	58                   	pop    eax
c000c598:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000c59e:	5a                   	pop    edx
c000c59f:	57                   	push   edi
c000c5a0:	53                   	push   ebx
c000c5a1:	e8 0c f4 ff ff       	call   c000b9b2 <VAS::getPageTableEntry(unsigned long)>
c000c5a6:	59                   	pop    ecx
c000c5a7:	5e                   	pop    esi
c000c5a8:	89 c6                	mov    esi,eax
c000c5aa:	ff 30                	push   DWORD PTR [eax]
c000c5ac:	68 75 2e 02 c0       	push   0xc0022e75
c000c5b1:	e8 bd 04 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c5b6:	83 c4 10             	add    esp,0x10
c000c5b9:	85 ff                	test   edi,edi
c000c5bb:	74 0a                	je     c000c5c7 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c000c5bd:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000c5bf:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c5c5:	74 0a                	je     c000c5d1 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c000c5c7:	83 c4 1c             	add    esp,0x1c
c000c5ca:	31 c0                	xor    eax,eax
c000c5cc:	5b                   	pop    ebx
c000c5cd:	5e                   	pop    esi
c000c5ce:	5f                   	pop    edi
c000c5cf:	5d                   	pop    ebp
c000c5d0:	c3                   	ret    
c000c5d1:	83 ec 08             	sub    esp,0x8
c000c5d4:	c1 ed 0b             	shr    ebp,0xb
c000c5d7:	55                   	push   ebp
c000c5d8:	68 83 2e 02 c0       	push   0xc0022e83
c000c5dd:	e8 91 04 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c5e2:	e8 ea d7 ff ff       	call   c0009dd1 <Phys::allocatePage()>
c000c5e7:	59                   	pop    ecx
c000c5e8:	5a                   	pop    edx
c000c5e9:	50                   	push   eax
c000c5ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5ee:	68 8e 2e 02 c0       	push   0xc0022e8e
c000c5f3:	e8 7b 04 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c5f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c5fc:	8b 16                	mov    edx,DWORD PTR [esi]
c000c5fe:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c604:	09 d0                	or     eax,edx
c000c606:	0d 01 08 00 00       	or     eax,0x801
c000c60b:	89 06                	mov    DWORD PTR [esi],eax
c000c60d:	59                   	pop    ecx
c000c60e:	5e                   	pop    esi
c000c60f:	50                   	push   eax
c000c610:	68 a3 2e 02 c0       	push   0xc0022ea3
c000c615:	e8 59 04 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c61a:	0f 20 d8             	mov    eax,cr3
c000c61d:	83 c4 0c             	add    esp,0xc
c000c620:	53                   	push   ebx
c000c621:	50                   	push   eax
c000c622:	68 bb 2e 02 c0       	push   0xc0022ebb
c000c627:	e8 47 04 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c62c:	c7 04 24 d3 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ed3
c000c633:	e8 3b 04 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c638:	83 c4 10             	add    esp,0x10
c000c63b:	a1 4c 58 02 c0       	mov    eax,ds:0xc002584c
c000c640:	85 c0                	test   eax,eax
c000c642:	7e 3d                	jle    c000c681 <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c000c644:	89 fe                	mov    esi,edi
c000c646:	31 db                	xor    ebx,ebx
c000c648:	83 ec 0c             	sub    esp,0xc
c000c64b:	55                   	push   ebp
c000c64c:	e8 7f f1 ff ff       	call   c000b7d0 <Virt::swapIDToSector(unsigned long)>
c000c651:	89 34 24             	mov    DWORD PTR [esp],esi
c000c654:	01 d8                	add    eax,ebx
c000c656:	6a 01                	push   0x1
c000c658:	31 d2                	xor    edx,edx
c000c65a:	43                   	inc    ebx
c000c65b:	52                   	push   edx
c000c65c:	81 c6 00 02 00 00    	add    esi,0x200
c000c662:	50                   	push   eax
c000c663:	0f be 05 58 58 02 c0 	movsx  eax,BYTE PTR ds:0xc0025858
c000c66a:	ff 34 85 bc 68 02 c0 	push   DWORD PTR [eax*4-0x3ffd9744]
c000c671:	e8 1a 3b 00 00       	call   c0010190 <LogicalDisk::read(unsigned long long, int, void*)>
c000c676:	83 c4 20             	add    esp,0x20
c000c679:	39 1d 4c 58 02 c0    	cmp    DWORD PTR ds:0xc002584c,ebx
c000c67f:	7f c7                	jg     c000c648 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c000c681:	a1 28 65 02 c0       	mov    eax,ds:0xc0026528
c000c686:	48                   	dec    eax
c000c687:	52                   	push   edx
c000c688:	a3 28 65 02 c0       	mov    ds:0xc0026528,eax
c000c68d:	50                   	push   eax
c000c68e:	57                   	push   edi
c000c68f:	68 e3 2e 02 c0       	push   0xc0022ee3
c000c694:	e8 da 03 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c699:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c69c:	e8 11 f1 ff ff       	call   c000b7b2 <Virt::freeSwapfilePage(unsigned long)>
c000c6a1:	c7 04 24 f8 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ef8
c000c6a8:	e8 c6 03 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c6ad:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000c6b2:	83 c4 10             	add    esp,0x10
c000c6b5:	48                   	dec    eax
c000c6b6:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000c6bb:	85 c0                	test   eax,eax
c000c6bd:	75 01                	jne    c000c6c0 <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c000c6bf:	fb                   	sti    
c000c6c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c6c4:	25 ff 0f 00 00       	and    eax,0xfff
c000c6c9:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c6ce:	77 20                	ja     c000c6f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c000c6d0:	0f 20 d8             	mov    eax,cr3
c000c6d3:	0f 22 d8             	mov    cr3,eax
c000c6d6:	83 ec 0c             	sub    esp,0xc
c000c6d9:	68 1e 2f 02 c0       	push   0xc0022f1e
c000c6de:	e8 90 03 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c6e3:	83 c4 10             	add    esp,0x10
c000c6e6:	b0 01                	mov    al,0x1
c000c6e8:	83 c4 1c             	add    esp,0x1c
c000c6eb:	5b                   	pop    ebx
c000c6ec:	5e                   	pop    esi
c000c6ed:	5f                   	pop    edi
c000c6ee:	5d                   	pop    ebp
c000c6ef:	c3                   	ret    
c000c6f0:	83 ec 0c             	sub    esp,0xc
c000c6f3:	68 0e 2f 02 c0       	push   0xc0022f0e
c000c6f8:	e8 76 03 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c6fd:	83 c4 10             	add    esp,0x10
c000c700:	eb ce                	jmp    c000c6d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c000c702 <VAS::scanForEviction()>:
c000c702:	57                   	push   edi
c000c703:	31 ff                	xor    edi,edi
c000c705:	56                   	push   esi
c000c706:	53                   	push   ebx
c000c707:	83 ec 10             	sub    esp,0x10
c000c70a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c70e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c711:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c717:	75 0e                	jne    c000c727 <VAS::scanForEviction()+0x25>
c000c719:	89 da                	mov    edx,ebx
c000c71b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c71e:	c1 ea 16             	shr    edx,0x16
c000c721:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c725:	74 4e                	je     c000c775 <VAS::scanForEviction()+0x73>
c000c727:	53                   	push   ebx
c000c728:	56                   	push   esi
c000c729:	e8 84 f2 ff ff       	call   c000b9b2 <VAS::getPageTableEntry(unsigned long)>
c000c72e:	5a                   	pop    edx
c000c72f:	8b 10                	mov    edx,DWORD PTR [eax]
c000c731:	59                   	pop    ecx
c000c732:	89 d1                	mov    ecx,edx
c000c734:	81 e1 01 08 00 00    	and    ecx,0x801
c000c73a:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c740:	74 3e                	je     c000c780 <VAS::scanForEviction()+0x7e>
c000c742:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c748:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c74e:	76 2b                	jbe    c000c77b <VAS::scanForEviction()+0x79>
c000c750:	47                   	inc    edi
c000c751:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c758:	83 ff 03             	cmp    edi,0x3
c000c75b:	74 32                	je     c000c78f <VAS::scanForEviction()+0x8d>
c000c75d:	31 db                	xor    ebx,ebx
c000c75f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c765:	75 c0                	jne    c000c727 <VAS::scanForEviction()+0x25>
c000c767:	89 da                	mov    edx,ebx
c000c769:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c76c:	c1 ea 16             	shr    edx,0x16
c000c76f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c773:	75 b2                	jne    c000c727 <VAS::scanForEviction()+0x25>
c000c775:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c77b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c77e:	eb 91                	jmp    c000c711 <VAS::scanForEviction()+0xf>
c000c780:	f6 c2 20             	test   dl,0x20
c000c783:	74 13                	je     c000c798 <VAS::scanForEviction()+0x96>
c000c785:	83 e2 df             	and    edx,0xffffffdf
c000c788:	89 10                	mov    DWORD PTR [eax],edx
c000c78a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c78d:	eb b3                	jmp    c000c742 <VAS::scanForEviction()+0x40>
c000c78f:	83 c4 10             	add    esp,0x10
c000c792:	31 c0                	xor    eax,eax
c000c794:	5b                   	pop    ebx
c000c795:	5e                   	pop    esi
c000c796:	5f                   	pop    edi
c000c797:	c3                   	ret    
c000c798:	83 ec 08             	sub    esp,0x8
c000c79b:	89 d0                	mov    eax,edx
c000c79d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c7a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c7a6:	53                   	push   ebx
c000c7a7:	68 2c 2f 02 c0       	push   0xc0022f2c
c000c7ac:	e8 c2 02 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c7b1:	58                   	pop    eax
c000c7b2:	5a                   	pop    edx
c000c7b3:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c7b6:	56                   	push   esi
c000c7b7:	e8 b6 fc ff ff       	call   c000c472 <VAS::evict(unsigned long)>
c000c7bc:	59                   	pop    ecx
c000c7bd:	5b                   	pop    ebx
c000c7be:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c7c1:	68 40 2f 02 c0       	push   0xc0022f40
c000c7c6:	e8 a8 02 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c7cb:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c7d2:	83 c4 10             	add    esp,0x10
c000c7d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c7d9:	83 c4 10             	add    esp,0x10
c000c7dc:	5b                   	pop    ebx
c000c7dd:	5e                   	pop    esi
c000c7de:	5f                   	pop    edi
c000c7df:	c3                   	ret    

c000c7e0 <mapVASFirstTime>:
c000c7e0:	55                   	push   ebp
c000c7e1:	57                   	push   edi
c000c7e2:	56                   	push   esi
c000c7e3:	53                   	push   ebx
c000c7e4:	83 ec 0c             	sub    esp,0xc
c000c7e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c7ec:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c7ef:	4a                   	dec    edx
c000c7f0:	0f 84 fe 00 00 00    	je     c000c8f4 <mapVASFirstTime+0x114>
c000c7f6:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c7f9:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000c7fc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c801:	c1 e5 15             	shl    ebp,0x15
c000c804:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c809:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000c80f:	29 eb                	sub    ebx,ebp
c000c811:	29 ef                	sub    edi,ebp
c000c813:	83 ec 08             	sub    esp,0x8
c000c816:	53                   	push   ebx
c000c817:	68 6c 2f 02 c0       	push   0xc0022f6c
c000c81c:	e8 52 02 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c821:	e8 ab d5 ff ff       	call   c0009dd1 <Phys::allocatePage()>
c000c826:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c82d:	6a 01                	push   0x1
c000c82f:	53                   	push   ebx
c000c830:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c836:	50                   	push   eax
c000c837:	56                   	push   esi
c000c838:	e8 01 f8 ff ff       	call   c000c03e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c83d:	83 c4 20             	add    esp,0x20
c000c840:	39 fb                	cmp    ebx,edi
c000c842:	75 cf                	jne    c000c813 <mapVASFirstTime+0x33>
c000c844:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c849:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c84e:	29 eb                	sub    ebx,ebp
c000c850:	29 ef                	sub    edi,ebp
c000c852:	83 ec 08             	sub    esp,0x8
c000c855:	53                   	push   ebx
c000c856:	68 88 2f 02 c0       	push   0xc0022f88
c000c85b:	e8 13 02 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c860:	58                   	pop    eax
c000c861:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c865:	5a                   	pop    edx
c000c866:	19 c0                	sbb    eax,eax
c000c868:	83 e0 04             	and    eax,0x4
c000c86b:	05 03 04 00 00       	add    eax,0x403
c000c870:	50                   	push   eax
c000c871:	68 ad 2e 02 c0       	push   0xc0022ead
c000c876:	e8 f8 01 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c87b:	e8 51 d5 ff ff       	call   c0009dd1 <Phys::allocatePage()>
c000c880:	59                   	pop    ecx
c000c881:	89 c5                	mov    ebp,eax
c000c883:	58                   	pop    eax
c000c884:	55                   	push   ebp
c000c885:	68 9c 2f 02 c0       	push   0xc0022f9c
c000c88a:	e8 e4 01 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c88f:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c893:	19 d2                	sbb    edx,edx
c000c895:	83 e2 04             	and    edx,0x4
c000c898:	81 c2 03 04 00 00    	add    edx,0x403
c000c89e:	89 14 24             	mov    DWORD PTR [esp],edx
c000c8a1:	6a 01                	push   0x1
c000c8a3:	53                   	push   ebx
c000c8a4:	55                   	push   ebp
c000c8a5:	56                   	push   esi
c000c8a6:	e8 93 f7 ff ff       	call   c000c03e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c8ab:	83 c4 18             	add    esp,0x18
c000c8ae:	53                   	push   ebx
c000c8af:	56                   	push   esi
c000c8b0:	e8 fd f0 ff ff       	call   c000b9b2 <VAS::getPageTableEntry(unsigned long)>
c000c8b5:	5a                   	pop    edx
c000c8b6:	59                   	pop    ecx
c000c8b7:	ff 30                	push   DWORD PTR [eax]
c000c8b9:	68 b8 2f 02 c0       	push   0xc0022fb8
c000c8be:	e8 b0 01 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c8c3:	0f 20 d8             	mov    eax,cr3
c000c8c6:	83 c4 0c             	add    esp,0xc
c000c8c9:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c8cf:	56                   	push   esi
c000c8d0:	50                   	push   eax
c000c8d1:	68 bb 2e 02 c0       	push   0xc0022ebb
c000c8d6:	e8 98 01 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c8db:	83 c4 10             	add    esp,0x10
c000c8de:	39 df                	cmp    edi,ebx
c000c8e0:	0f 85 6c ff ff ff    	jne    c000c852 <mapVASFirstTime+0x72>
c000c8e6:	0f 20 d8             	mov    eax,cr3
c000c8e9:	0f 22 d8             	mov    cr3,eax
c000c8ec:	83 c4 0c             	add    esp,0xc
c000c8ef:	5b                   	pop    ebx
c000c8f0:	5e                   	pop    esi
c000c8f1:	5f                   	pop    edi
c000c8f2:	5d                   	pop    ebp
c000c8f3:	c3                   	ret    
c000c8f4:	83 ec 0c             	sub    esp,0xc
c000c8f7:	68 53 2f 02 c0       	push   0xc0022f53
c000c8fc:	e8 72 01 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	83 c4 0c             	add    esp,0xc
c000c907:	5b                   	pop    ebx
c000c908:	5e                   	pop    esi
c000c909:	5f                   	pop    edi
c000c90a:	5d                   	pop    ebp
c000c90b:	c3                   	ret    

c000c90c <__cxa_atexit>:
c000c90c:	31 c0                	xor    eax,eax
c000c90e:	c3                   	ret    

c000c90f <__cxa_finalize>:
c000c90f:	c3                   	ret    

c000c910 <__stack_chk_fail>:
c000c910:	55                   	push   ebp
c000c911:	89 e5                	mov    ebp,esp
c000c913:	83 ec 14             	sub    esp,0x14
c000c916:	68 c3 2f 02 c0       	push   0xc0022fc3
c000c91b:	e8 53 01 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c920:	58                   	pop    eax
c000c921:	5a                   	pop    edx
c000c922:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c925:	68 13 30 02 c0       	push   0xc0023013
c000c92a:	e8 44 01 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c92f:	59                   	pop    ecx
c000c930:	58                   	pop    eax
c000c931:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c934:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c937:	68 13 30 02 c0       	push   0xc0023013
c000c93c:	e8 32 01 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c941:	5a                   	pop    edx
c000c942:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c945:	59                   	pop    ecx
c000c946:	8b 00                	mov    eax,DWORD PTR [eax]
c000c948:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c94b:	68 13 30 02 c0       	push   0xc0023013
c000c950:	e8 1e 01 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c955:	5a                   	pop    edx
c000c956:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c959:	59                   	pop    ecx
c000c95a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c95c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c95e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c961:	68 13 30 02 c0       	push   0xc0023013
c000c966:	e8 08 01 00 00       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000c96b:	c7 04 24 1b 30 02 c0 	mov    DWORD PTR [esp],0xc002301b
c000c972:	e8 be 79 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000c977:	83 c4 10             	add    esp,0x10
c000c97a:	c9                   	leave  
c000c97b:	c3                   	ret    

c000c97c <__cxa_pure_virtual>:
c000c97c:	83 ec 18             	sub    esp,0x18
c000c97f:	68 33 30 02 c0       	push   0xc0023033
c000c984:	e8 ac 79 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000c989:	83 c4 1c             	add    esp,0x1c
c000c98c:	c3                   	ret    

c000c98d <operator new[](unsigned long)>:
c000c98d:	e9 31 d0 ff ff       	jmp    c00099c3 <malloc>

c000c992 <operator delete(void*, unsigned long)>:
c000c992:	e9 4c d0 ff ff       	jmp    c00099e3 <rfree>

c000c997 <operator delete[](void*)>:
c000c997:	e9 47 d0 ff ff       	jmp    c00099e3 <rfree>

c000c99c <operator delete[](void*, unsigned long)>:
c000c99c:	e9 42 d0 ff ff       	jmp    c00099e3 <rfree>

c000c9a1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000c9a1:	55                   	push   ebp
c000c9a2:	b9 11 00 00 00       	mov    ecx,0x11
c000c9a7:	57                   	push   edi
c000c9a8:	56                   	push   esi
c000c9a9:	be 4e 2a 02 c0       	mov    esi,0xc0022a4e
c000c9ae:	53                   	push   ebx
c000c9af:	83 ec 20             	sub    esp,0x20
c000c9b2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c9b6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c9ba:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000c9be:	fc                   	cld    
c000c9bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9c1:	89 ee                	mov    esi,ebp
c000c9c3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c9c7:	eb 02                	jmp    c000c9cb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000c9c9:	89 c6                	mov    esi,eax
c000c9cb:	31 d2                	xor    edx,edx
c000c9cd:	41                   	inc    ecx
c000c9ce:	89 f0                	mov    eax,esi
c000c9d0:	f7 f3                	div    ebx
c000c9d2:	39 de                	cmp    esi,ebx
c000c9d4:	73 f3                	jae    c000c9c9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000c9d6:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000c9d9:	eb 02                	jmp    c000c9dd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000c9db:	89 c5                	mov    ebp,eax
c000c9dd:	31 d2                	xor    edx,edx
c000c9df:	49                   	dec    ecx
c000c9e0:	89 e8                	mov    eax,ebp
c000c9e2:	f7 f3                	div    ebx
c000c9e4:	39 dd                	cmp    ebp,ebx
c000c9e6:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000c9ea:	88 11                	mov    BYTE PTR [ecx],dl
c000c9ec:	73 ed                	jae    c000c9db <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000c9ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9f2:	83 c4 20             	add    esp,0x20
c000c9f5:	5b                   	pop    ebx
c000c9f6:	5e                   	pop    esi
c000c9f7:	5f                   	pop    edi
c000c9f8:	5d                   	pop    ebp
c000c9f9:	c3                   	ret    

c000c9fa <Dbg::logc(char)>:
c000c9fa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c9fe:	f6 05 20 64 02 c0 10 	test   BYTE PTR ds:0xc0026420,0x10
c000ca05:	75 12                	jne    c000ca19 <Dbg::logc(char)+0x1f>
c000ca07:	ba fd 03 00 00       	mov    edx,0x3fd
c000ca0c:	ec                   	in     al,dx
c000ca0d:	a8 20                	test   al,0x20
c000ca0f:	74 fb                	je     c000ca0c <Dbg::logc(char)+0x12>
c000ca11:	ba f8 03 00 00       	mov    edx,0x3f8
c000ca16:	88 c8                	mov    al,cl
c000ca18:	ee                   	out    dx,al
c000ca19:	c3                   	ret    

c000ca1a <Dbg::logs(char*)>:
c000ca1a:	53                   	push   ebx
c000ca1b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ca1f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca22:	84 c0                	test   al,al
c000ca24:	74 0f                	je     c000ca35 <Dbg::logs(char*)+0x1b>
c000ca26:	50                   	push   eax
c000ca27:	43                   	inc    ebx
c000ca28:	e8 cd ff ff ff       	call   c000c9fa <Dbg::logc(char)>
c000ca2d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca30:	5a                   	pop    edx
c000ca31:	84 c0                	test   al,al
c000ca33:	75 f1                	jne    c000ca26 <Dbg::logs(char*)+0xc>
c000ca35:	5b                   	pop    ebx
c000ca36:	c3                   	ret    

c000ca37 <Dbg::logWriteInt(unsigned int)>:
c000ca37:	83 ec 10             	sub    esp,0x10
c000ca3a:	6a 0a                	push   0xa
c000ca3c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ca40:	50                   	push   eax
c000ca41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca45:	e8 57 ff ff ff       	call   c000c9a1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ca4a:	50                   	push   eax
c000ca4b:	e8 ca ff ff ff       	call   c000ca1a <Dbg::logs(char*)>
c000ca50:	83 c4 20             	add    esp,0x20
c000ca53:	c3                   	ret    

c000ca54 <Dbg::logWriteIntBase(unsigned int, int)>:
c000ca54:	83 ec 10             	sub    esp,0x10
c000ca57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca5b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ca5f:	50                   	push   eax
c000ca60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca64:	e8 38 ff ff ff       	call   c000c9a1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ca69:	50                   	push   eax
c000ca6a:	e8 ab ff ff ff       	call   c000ca1a <Dbg::logs(char*)>
c000ca6f:	83 c4 20             	add    esp,0x20
c000ca72:	c3                   	ret    

c000ca73 <Dbg::kprintf(char const*, ...)>:
c000ca73:	55                   	push   ebp
c000ca74:	57                   	push   edi
c000ca75:	56                   	push   esi
c000ca76:	53                   	push   ebx
c000ca77:	83 ec 0c             	sub    esp,0xc
c000ca7a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ca7e:	f6 05 20 64 02 c0 10 	test   BYTE PTR ds:0xc0026420,0x10
c000ca85:	74 08                	je     c000ca8f <Dbg::kprintf(char const*, ...)+0x1c>
c000ca87:	83 c4 0c             	add    esp,0xc
c000ca8a:	5b                   	pop    ebx
c000ca8b:	5e                   	pop    esi
c000ca8c:	5f                   	pop    edi
c000ca8d:	5d                   	pop    ebp
c000ca8e:	c3                   	ret    
c000ca8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ca93:	31 db                	xor    ebx,ebx
c000ca95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca99:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ca9c:	84 c0                	test   al,al
c000ca9e:	74 e7                	je     c000ca87 <Dbg::kprintf(char const*, ...)+0x14>
c000caa0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000caa3:	3c 25                	cmp    al,0x25
c000caa5:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000caa8:	75 44                	jne    c000caee <Dbg::kprintf(char const*, ...)+0x7b>
c000caaa:	83 c3 02             	add    ebx,0x2
c000caad:	8a 07                	mov    al,BYTE PTR [edi]
c000caaf:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cab2:	83 e8 25             	sub    eax,0x25
c000cab5:	3c 53                	cmp    al,0x53
c000cab7:	0f 87 c9 00 00 00    	ja     c000cb86 <Dbg::kprintf(char const*, ...)+0x113>
c000cabd:	0f b6 c0             	movzx  eax,al
c000cac0:	ff 24 85 48 30 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcfb8]
c000cac7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cacb:	89 c8                	mov    eax,ecx
c000cacd:	83 c1 04             	add    ecx,0x4
c000cad0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cad4:	ff 30                	push   DWORD PTR [eax]
c000cad6:	e8 5c ff ff ff       	call   c000ca37 <Dbg::logWriteInt(unsigned int)>
c000cadb:	5f                   	pop    edi
c000cadc:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cae0:	84 c0                	test   al,al
c000cae2:	74 a3                	je     c000ca87 <Dbg::kprintf(char const*, ...)+0x14>
c000cae4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cae7:	3c 25                	cmp    al,0x25
c000cae9:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000caec:	74 bc                	je     c000caaa <Dbg::kprintf(char const*, ...)+0x37>
c000caee:	50                   	push   eax
c000caef:	89 eb                	mov    ebx,ebp
c000caf1:	e8 04 ff ff ff       	call   c000c9fa <Dbg::logc(char)>
c000caf6:	89 fd                	mov    ebp,edi
c000caf8:	58                   	pop    eax
c000caf9:	eb e1                	jmp    c000cadc <Dbg::kprintf(char const*, ...)+0x69>
c000cafb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000caff:	89 c8                	mov    eax,ecx
c000cb01:	83 c1 04             	add    ecx,0x4
c000cb04:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb08:	ff 30                	push   DWORD PTR [eax]
c000cb0a:	e8 0b ff ff ff       	call   c000ca1a <Dbg::logs(char*)>
c000cb0f:	58                   	pop    eax
c000cb10:	eb ca                	jmp    c000cadc <Dbg::kprintf(char const*, ...)+0x69>
c000cb12:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb16:	89 d0                	mov    eax,edx
c000cb18:	83 c2 04             	add    edx,0x4
c000cb1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb1f:	ff 30                	push   DWORD PTR [eax]
c000cb21:	e8 11 ff ff ff       	call   c000ca37 <Dbg::logWriteInt(unsigned int)>
c000cb26:	58                   	pop    eax
c000cb27:	eb b3                	jmp    c000cadc <Dbg::kprintf(char const*, ...)+0x69>
c000cb29:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb2d:	89 d0                	mov    eax,edx
c000cb2f:	83 c2 04             	add    edx,0x4
c000cb32:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cb35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb39:	50                   	push   eax
c000cb3a:	e8 bb fe ff ff       	call   c000c9fa <Dbg::logc(char)>
c000cb3f:	58                   	pop    eax
c000cb40:	eb 9a                	jmp    c000cadc <Dbg::kprintf(char const*, ...)+0x69>
c000cb42:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb46:	89 c8                	mov    eax,ecx
c000cb48:	83 c1 04             	add    ecx,0x4
c000cb4b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb4f:	6a 10                	push   0x10
c000cb51:	ff 30                	push   DWORD PTR [eax]
c000cb53:	e8 fc fe ff ff       	call   c000ca54 <Dbg::logWriteIntBase(unsigned int, int)>
c000cb58:	59                   	pop    ecx
c000cb59:	5f                   	pop    edi
c000cb5a:	eb 80                	jmp    c000cadc <Dbg::kprintf(char const*, ...)+0x69>
c000cb5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb60:	89 d0                	mov    eax,edx
c000cb62:	83 c2 08             	add    edx,0x8
c000cb65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb69:	6a 10                	push   0x10
c000cb6b:	ff 30                	push   DWORD PTR [eax]
c000cb6d:	e8 e2 fe ff ff       	call   c000ca54 <Dbg::logWriteIntBase(unsigned int, int)>
c000cb72:	58                   	pop    eax
c000cb73:	5a                   	pop    edx
c000cb74:	e9 63 ff ff ff       	jmp    c000cadc <Dbg::kprintf(char const*, ...)+0x69>
c000cb79:	6a 25                	push   0x25
c000cb7b:	e8 7a fe ff ff       	call   c000c9fa <Dbg::logc(char)>
c000cb80:	58                   	pop    eax
c000cb81:	e9 56 ff ff ff       	jmp    c000cadc <Dbg::kprintf(char const*, ...)+0x69>
c000cb86:	6a 25                	push   0x25
c000cb88:	e8 6d fe ff ff       	call   c000c9fa <Dbg::logc(char)>
c000cb8d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cb90:	50                   	push   eax
c000cb91:	e8 64 fe ff ff       	call   c000c9fa <Dbg::logc(char)>
c000cb96:	5a                   	pop    edx
c000cb97:	59                   	pop    ecx
c000cb98:	e9 3f ff ff ff       	jmp    c000cadc <Dbg::kprintf(char const*, ...)+0x69>
c000cb9d:	90                   	nop

c000cb9e <File::read(unsigned long long, void*, int*)>:
c000cb9e:	53                   	push   ebx
c000cb9f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cba3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cba7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cbae:	3c 19                	cmp    al,0x19
c000cbb0:	77 35                	ja     c000cbe7 <File::read(unsigned long long, void*, int*)+0x49>
c000cbb2:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c000cbb9:	85 c0                	test   eax,eax
c000cbbb:	74 2a                	je     c000cbe7 <File::read(unsigned long long, void*, int*)+0x49>
c000cbbd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cbc3:	85 c0                	test   eax,eax
c000cbc5:	74 20                	je     c000cbe7 <File::read(unsigned long long, void*, int*)+0x49>
c000cbc7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cbcb:	74 21                	je     c000cbee <File::read(unsigned long long, void*, int*)+0x50>
c000cbcd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cbcf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cbd3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cbd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cbdd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cbe1:	5b                   	pop    ebx
c000cbe2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000cbe5:	ff e0                	jmp    eax
c000cbe7:	b8 0b 00 00 00       	mov    eax,0xb
c000cbec:	eb 05                	jmp    c000cbf3 <File::read(unsigned long long, void*, int*)+0x55>
c000cbee:	b8 05 00 00 00       	mov    eax,0x5
c000cbf3:	5b                   	pop    ebx
c000cbf4:	c3                   	ret    
c000cbf5:	90                   	nop

c000cbf6 <File::write(unsigned long long, void*, int*)>:
c000cbf6:	53                   	push   ebx
c000cbf7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbfb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cbff:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cc06:	3c 19                	cmp    al,0x19
c000cc08:	77 35                	ja     c000cc3f <File::write(unsigned long long, void*, int*)+0x49>
c000cc0a:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c000cc11:	85 c0                	test   eax,eax
c000cc13:	74 2a                	je     c000cc3f <File::write(unsigned long long, void*, int*)+0x49>
c000cc15:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc1b:	85 c0                	test   eax,eax
c000cc1d:	74 20                	je     c000cc3f <File::write(unsigned long long, void*, int*)+0x49>
c000cc1f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc23:	74 21                	je     c000cc46 <File::write(unsigned long long, void*, int*)+0x50>
c000cc25:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc27:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc2b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc39:	5b                   	pop    ebx
c000cc3a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cc3d:	ff e0                	jmp    eax
c000cc3f:	b8 0b 00 00 00       	mov    eax,0xb
c000cc44:	eb 05                	jmp    c000cc4b <File::write(unsigned long long, void*, int*)+0x55>
c000cc46:	b8 05 00 00 00       	mov    eax,0x5
c000cc4b:	5b                   	pop    ebx
c000cc4c:	c3                   	ret    
c000cc4d:	90                   	nop

c000cc4e <Directory::read(unsigned long long, void*, int*)>:
c000cc4e:	53                   	push   ebx
c000cc4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc53:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cc57:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cc5e:	3c 19                	cmp    al,0x19
c000cc60:	77 35                	ja     c000cc97 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc62:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c000cc69:	85 c0                	test   eax,eax
c000cc6b:	74 2a                	je     c000cc97 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc6d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc73:	85 c0                	test   eax,eax
c000cc75:	74 20                	je     c000cc97 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc77:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc7b:	74 21                	je     c000cc9e <Directory::read(unsigned long long, void*, int*)+0x50>
c000cc7d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc7f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc83:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc91:	5b                   	pop    ebx
c000cc92:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cc95:	ff e0                	jmp    eax
c000cc97:	b8 0b 00 00 00       	mov    eax,0xb
c000cc9c:	eb 05                	jmp    c000cca3 <Directory::read(unsigned long long, void*, int*)+0x55>
c000cc9e:	b8 05 00 00 00       	mov    eax,0x5
c000cca3:	5b                   	pop    ebx
c000cca4:	c3                   	ret    
c000cca5:	90                   	nop

c000cca6 <Directory::write(unsigned long long, void*, int*)>:
c000cca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccaa:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ccb1:	b8 0b 00 00 00       	mov    eax,0xb
c000ccb6:	80 fa 19             	cmp    dl,0x19
c000ccb9:	77 18                	ja     c000ccd3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ccbb:	8b 14 95 c0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9640]
c000ccc2:	85 d2                	test   edx,edx
c000ccc4:	74 0d                	je     c000ccd3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ccc6:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cccd:	19 c0                	sbb    eax,eax
c000cccf:	83 e0 0a             	and    eax,0xa
c000ccd2:	40                   	inc    eax
c000ccd3:	c3                   	ret    

c000ccd4 <File::isAtty()>:
c000ccd4:	31 c0                	xor    eax,eax
c000ccd6:	c3                   	ret    
c000ccd7:	90                   	nop

c000ccd8 <Directory::isAtty()>:
c000ccd8:	31 c0                	xor    eax,eax
c000ccda:	c3                   	ret    
c000ccdb:	90                   	nop

c000ccdc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ccdc:	b8 0a 00 00 00       	mov    eax,0xa
c000cce1:	c3                   	ret    

c000cce2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cce2:	b8 0a 00 00 00       	mov    eax,0xa
c000cce7:	c3                   	ret    

c000cce8 <Filesystem::allocateSwapfile(char const*, int)>:
c000cce8:	31 c0                	xor    eax,eax
c000ccea:	31 d2                	xor    edx,edx
c000ccec:	c3                   	ret    
c000cced:	90                   	nop

c000ccee <File::~File()>:
c000ccee:	83 ec 0c             	sub    esp,0xc
c000ccf1:	ba 08 32 02 c0       	mov    edx,0xc0023208
c000ccf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccfa:	89 10                	mov    DWORD PTR [eax],edx
c000ccfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd00:	83 ec 0c             	sub    esp,0xc
c000cd03:	50                   	push   eax
c000cd04:	e8 37 e7 ff ff       	call   c000b440 <UnixFile::~UnixFile()>
c000cd09:	83 c4 10             	add    esp,0x10
c000cd0c:	90                   	nop
c000cd0d:	83 c4 0c             	add    esp,0xc
c000cd10:	c3                   	ret    
c000cd11:	90                   	nop

c000cd12 <File::~File()>:
c000cd12:	83 ec 0c             	sub    esp,0xc
c000cd15:	83 ec 0c             	sub    esp,0xc
c000cd18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd1c:	e8 cd ff ff ff       	call   c000ccee <File::~File()>
c000cd21:	83 c4 10             	add    esp,0x10
c000cd24:	83 ec 08             	sub    esp,0x8
c000cd27:	68 14 01 00 00       	push   0x114
c000cd2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd30:	e8 5d fc ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c000cd35:	83 c4 10             	add    esp,0x10
c000cd38:	83 c4 0c             	add    esp,0xc
c000cd3b:	c3                   	ret    

c000cd3c <Directory::~Directory()>:
c000cd3c:	83 ec 0c             	sub    esp,0xc
c000cd3f:	ba 24 32 02 c0       	mov    edx,0xc0023224
c000cd44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd48:	89 10                	mov    DWORD PTR [eax],edx
c000cd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd4e:	83 ec 0c             	sub    esp,0xc
c000cd51:	50                   	push   eax
c000cd52:	e8 e9 e6 ff ff       	call   c000b440 <UnixFile::~UnixFile()>
c000cd57:	83 c4 10             	add    esp,0x10
c000cd5a:	90                   	nop
c000cd5b:	83 c4 0c             	add    esp,0xc
c000cd5e:	c3                   	ret    
c000cd5f:	90                   	nop

c000cd60 <Directory::~Directory()>:
c000cd60:	83 ec 0c             	sub    esp,0xc
c000cd63:	83 ec 0c             	sub    esp,0xc
c000cd66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd6a:	e8 cd ff ff ff       	call   c000cd3c <Directory::~Directory()>
c000cd6f:	83 c4 10             	add    esp,0x10
c000cd72:	83 ec 08             	sub    esp,0x8
c000cd75:	68 14 01 00 00       	push   0x114
c000cd7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd7e:	e8 0f fc ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c000cd83:	83 c4 10             	add    esp,0x10
c000cd86:	83 c4 0c             	add    esp,0xc
c000cd89:	c3                   	ret    

c000cd8a <Filesystem::Filesystem()>:
c000cd8a:	ba a0 31 02 c0       	mov    edx,0xc00231a0
c000cd8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd93:	89 10                	mov    DWORD PTR [eax],edx
c000cd95:	8b 15 34 65 02 c0    	mov    edx,DWORD PTR ds:0xc0026534
c000cd9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd9f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000cda2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cda6:	a3 34 65 02 c0       	mov    ds:0xc0026534,eax
c000cdab:	90                   	nop
c000cdac:	c3                   	ret    
c000cdad:	90                   	nop

c000cdae <Filesystem::~Filesystem()>:
c000cdae:	ba a0 31 02 c0       	mov    edx,0xc00231a0
c000cdb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdb7:	89 10                	mov    DWORD PTR [eax],edx
c000cdb9:	90                   	nop
c000cdba:	c3                   	ret    
c000cdbb:	90                   	nop

c000cdbc <Filesystem::~Filesystem()>:
c000cdbc:	83 ec 0c             	sub    esp,0xc
c000cdbf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cdc3:	e8 e6 ff ff ff       	call   c000cdae <Filesystem::~Filesystem()>
c000cdc8:	83 c4 04             	add    esp,0x4
c000cdcb:	83 ec 08             	sub    esp,0x8
c000cdce:	6a 08                	push   0x8
c000cdd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd4:	e8 b9 fb ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c000cdd9:	83 c4 10             	add    esp,0x10
c000cddc:	83 c4 0c             	add    esp,0xc
c000cddf:	c3                   	ret    

c000cde0 <Fs::getcwd(Process*, char*, int)>:
c000cde0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cde4:	31 c0                	xor    eax,eax
c000cde6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cde9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cded:	7d 15                	jge    c000ce04 <Fs::getcwd(Process*, char*, int)+0x24>
c000cdef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cdf3:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000cdfa:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cdfd:	84 c9                	test   cl,cl
c000cdff:	74 06                	je     c000ce07 <Fs::getcwd(Process*, char*, int)+0x27>
c000ce01:	40                   	inc    eax
c000ce02:	eb e2                	jmp    c000cde6 <Fs::getcwd(Process*, char*, int)+0x6>
c000ce04:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ce07:	31 c0                	xor    eax,eax
c000ce09:	c3                   	ret    

c000ce0a <Fs::initVFS()>:
c000ce0a:	83 ec 18             	sub    esp,0x18
c000ce0d:	6a 08                	push   0x8
c000ce0f:	e8 af cb ff ff       	call   c00099c3 <malloc>
c000ce14:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce17:	e8 70 e3 00 00       	call   c001b18c <FAT::FAT()>
c000ce1c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ce23:	e8 9b cb ff ff       	call   c00099c3 <malloc>
c000ce28:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce2b:	e8 ba f5 00 00       	call   c001c3ea <ISO9660::ISO9660()>
c000ce30:	83 c4 1c             	add    esp,0x1c
c000ce33:	c3                   	ret    

c000ce34 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ce34:	55                   	push   ebp
c000ce35:	57                   	push   edi
c000ce36:	56                   	push   esi
c000ce37:	53                   	push   ebx
c000ce38:	81 ec 10 04 00 00    	sub    esp,0x410
c000ce3e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ce45:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ce4c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ce53:	68 00 04 00 00       	push   0x400
c000ce58:	6a 00                	push   0x0
c000ce5a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ce5e:	56                   	push   esi
c000ce5f:	e8 20 38 ff ff       	call   c0000684 <memset>
c000ce64:	83 c4 10             	add    esp,0x10
c000ce67:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ce6b:	75 0b                	jne    c000ce78 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ce6d:	50                   	push   eax
c000ce6e:	50                   	push   eax
c000ce6f:	57                   	push   edi
c000ce70:	56                   	push   esi
c000ce71:	e8 ca 38 ff ff       	call   c0000740 <strcpy>
c000ce76:	eb 41                	jmp    c000ceb9 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000ce78:	8a 07                	mov    al,BYTE PTR [edi]
c000ce7a:	3c 5c                	cmp    al,0x5c
c000ce7c:	74 04                	je     c000ce82 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ce7e:	3c 2f                	cmp    al,0x2f
c000ce80:	75 18                	jne    c000ce9a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000ce82:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ce85:	3c 60                	cmp    al,0x60
c000ce87:	7e 03                	jle    c000ce8c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000ce89:	83 e8 20             	sub    eax,0x20
c000ce8c:	88 04 24             	mov    BYTE PTR [esp],al
c000ce8f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ce96:	50                   	push   eax
c000ce97:	50                   	push   eax
c000ce98:	eb 18                	jmp    c000ceb2 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000ce9a:	50                   	push   eax
c000ce9b:	50                   	push   eax
c000ce9c:	55                   	push   ebp
c000ce9d:	56                   	push   esi
c000ce9e:	e8 9d 38 ff ff       	call   c0000740 <strcpy>
c000cea3:	5a                   	pop    edx
c000cea4:	59                   	pop    ecx
c000cea5:	68 3a 48 02 c0       	push   0xc002483a
c000ceaa:	56                   	push   esi
c000ceab:	e8 d0 39 ff ff       	call   c0000880 <strcat>
c000ceb0:	5d                   	pop    ebp
c000ceb1:	58                   	pop    eax
c000ceb2:	57                   	push   edi
c000ceb3:	56                   	push   esi
c000ceb4:	e8 c7 39 ff ff       	call   c0000880 <strcat>
c000ceb9:	83 c4 10             	add    esp,0x10
c000cebc:	8a 04 24             	mov    al,BYTE PTR [esp]
c000cebf:	3c 60                	cmp    al,0x60
c000cec1:	7e 03                	jle    c000cec6 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000cec3:	83 e8 20             	sub    eax,0x20
c000cec6:	88 04 24             	mov    BYTE PTR [esp],al
c000cec9:	88 03                	mov    BYTE PTR [ebx],al
c000cecb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ced2:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000ced8:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000cedc:	bf 03 00 00 00       	mov    edi,0x3
c000cee1:	b8 03 00 00 00       	mov    eax,0x3
c000cee6:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000cee9:	84 d2                	test   dl,dl
c000ceeb:	0f 84 91 00 00 00    	je     c000cf82 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000cef1:	8d 4f 01             	lea    ecx,[edi+0x1]
c000cef4:	80 fa 5c             	cmp    dl,0x5c
c000cef7:	74 05                	je     c000cefe <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000cef9:	80 fa 2f             	cmp    dl,0x2f
c000cefc:	75 12                	jne    c000cf10 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cefe:	89 c5                	mov    ebp,eax
c000cf00:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cf05:	74 09                	je     c000cf10 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cf07:	40                   	inc    eax
c000cf08:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000cf0c:	89 cf                	mov    edi,ecx
c000cf0e:	eb d6                	jmp    c000cee6 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000cf10:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000cf15:	75 5b                	jne    c000cf72 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf17:	80 fa 2e             	cmp    dl,0x2e
c000cf1a:	75 56                	jne    c000cf72 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf1c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000cf20:	74 19                	je     c000cf3b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000cf22:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf27:	74 53                	je     c000cf7c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf29:	89 f9                	mov    ecx,edi
c000cf2b:	41                   	inc    ecx
c000cf2c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf2f:	80 fa 2f             	cmp    dl,0x2f
c000cf32:	74 f7                	je     c000cf2b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cf34:	80 fa 5c             	cmp    dl,0x5c
c000cf37:	74 f2                	je     c000cf2b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cf39:	eb d1                	jmp    c000cf0c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf3b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf40:	74 3a                	je     c000cf7c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf42:	83 f8 03             	cmp    eax,0x3
c000cf45:	74 c5                	je     c000cf0c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf47:	41                   	inc    ecx
c000cf48:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf4b:	80 fa 2f             	cmp    dl,0x2f
c000cf4e:	74 f7                	je     c000cf47 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf50:	80 fa 5c             	cmp    dl,0x5c
c000cf53:	74 f2                	je     c000cf47 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf55:	48                   	dec    eax
c000cf56:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cf5a:	75 06                	jne    c000cf62 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cf5c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf60:	eb f3                	jmp    c000cf55 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000cf62:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cf66:	74 07                	je     c000cf6f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000cf68:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf6c:	48                   	dec    eax
c000cf6d:	eb f3                	jmp    c000cf62 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cf6f:	40                   	inc    eax
c000cf70:	eb 9a                	jmp    c000cf0c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf72:	80 fa 2f             	cmp    dl,0x2f
c000cf75:	74 95                	je     c000cf0c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf77:	80 fa 5c             	cmp    dl,0x5c
c000cf7a:	74 90                	je     c000cf0c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf7c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000cf7f:	40                   	inc    eax
c000cf80:	eb 8a                	jmp    c000cf0c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf82:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf86:	83 ec 0c             	sub    esp,0xc
c000cf89:	53                   	push   ebx
c000cf8a:	e8 11 37 ff ff       	call   c00006a0 <strlen>
c000cf8f:	83 c4 10             	add    esp,0x10
c000cf92:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000cf97:	75 26                	jne    c000cfbf <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000cf99:	83 ec 0c             	sub    esp,0xc
c000cf9c:	53                   	push   ebx
c000cf9d:	e8 fe 36 ff ff       	call   c00006a0 <strlen>
c000cfa2:	83 c4 10             	add    esp,0x10
c000cfa5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000cfaa:	74 26                	je     c000cfd2 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000cfac:	83 ec 0c             	sub    esp,0xc
c000cfaf:	53                   	push   ebx
c000cfb0:	e8 eb 36 ff ff       	call   c00006a0 <strlen>
c000cfb5:	83 c4 10             	add    esp,0x10
c000cfb8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000cfbd:	eb c7                	jmp    c000cf86 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000cfbf:	83 ec 0c             	sub    esp,0xc
c000cfc2:	53                   	push   ebx
c000cfc3:	e8 d8 36 ff ff       	call   c00006a0 <strlen>
c000cfc8:	83 c4 10             	add    esp,0x10
c000cfcb:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cfd0:	74 c7                	je     c000cf99 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000cfd2:	81 c4 0c 04 00 00    	add    esp,0x40c
c000cfd8:	5b                   	pop    ebx
c000cfd9:	5e                   	pop    esi
c000cfda:	5f                   	pop    edi
c000cfdb:	5d                   	pop    ebp
c000cfdc:	c3                   	ret    
c000cfdd:	90                   	nop

c000cfde <File::File(char const*, Process*)>:
c000cfde:	83 ec 0c             	sub    esp,0xc
c000cfe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfe5:	83 ec 08             	sub    esp,0x8
c000cfe8:	6a 00                	push   0x0
c000cfea:	50                   	push   eax
c000cfeb:	e8 6e e2 ff ff       	call   c000b25e <UnixFile::UnixFile(int)>
c000cff0:	83 c4 10             	add    esp,0x10
c000cff3:	ba 08 32 02 c0       	mov    edx,0xc0023208
c000cff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cffc:	89 10                	mov    DWORD PTR [eax],edx
c000cffe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d002:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d00c:	83 c0 0d             	add    eax,0xd
c000d00f:	83 ec 04             	sub    esp,0x4
c000d012:	52                   	push   edx
c000d013:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d017:	50                   	push   eax
c000d018:	e8 17 fe ff ff       	call   c000ce34 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d01d:	83 c4 10             	add    esp,0x10
c000d020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d024:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d027:	8d 50 bf             	lea    edx,[eax-0x41]
c000d02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d02e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d038:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d03c:	90                   	nop
c000d03d:	83 c4 0c             	add    esp,0xc
c000d040:	c3                   	ret    
c000d041:	90                   	nop

c000d042 <File::open(FileOpenMode)>:
c000d042:	53                   	push   ebx
c000d043:	b8 0b 00 00 00       	mov    eax,0xb
c000d048:	83 ec 08             	sub    esp,0x8
c000d04b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d04f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d056:	80 fa 19             	cmp    dl,0x19
c000d059:	77 40                	ja     c000d09b <File::open(FileOpenMode)+0x59>
c000d05b:	8b 14 95 c0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9640]
c000d062:	85 d2                	test   edx,edx
c000d064:	74 35                	je     c000d09b <File::open(FileOpenMode)+0x59>
c000d066:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d06c:	85 d2                	test   edx,edx
c000d06e:	74 2b                	je     c000d09b <File::open(FileOpenMode)+0x59>
c000d070:	b8 06 00 00 00       	mov    eax,0x6
c000d075:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d079:	75 20                	jne    c000d09b <File::open(FileOpenMode)+0x59>
c000d07b:	8b 02                	mov    eax,DWORD PTR [edx]
c000d07d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d083:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d087:	51                   	push   ecx
c000d088:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d08b:	51                   	push   ecx
c000d08c:	52                   	push   edx
c000d08d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d090:	83 c4 10             	add    esp,0x10
c000d093:	85 c0                	test   eax,eax
c000d095:	75 04                	jne    c000d09b <File::open(FileOpenMode)+0x59>
c000d097:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d09b:	83 c4 08             	add    esp,0x8
c000d09e:	5b                   	pop    ebx
c000d09f:	c3                   	ret    

c000d0a0 <File::close()>:
c000d0a0:	53                   	push   ebx
c000d0a1:	b8 0b 00 00 00       	mov    eax,0xb
c000d0a6:	83 ec 08             	sub    esp,0x8
c000d0a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d0ad:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d0b4:	80 fa 19             	cmp    dl,0x19
c000d0b7:	77 41                	ja     c000d0fa <File::close()+0x5a>
c000d0b9:	8b 1c 95 c0 69 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9640]
c000d0c0:	85 db                	test   ebx,ebx
c000d0c2:	74 36                	je     c000d0fa <File::close()+0x5a>
c000d0c4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d0cb:	74 2d                	je     c000d0fa <File::close()+0x5a>
c000d0cd:	b8 05 00 00 00       	mov    eax,0x5
c000d0d2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d0d6:	74 22                	je     c000d0fa <File::close()+0x5a>
c000d0d8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d0dc:	8b 04 95 c0 69 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9640]
c000d0e3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d0e9:	53                   	push   ebx
c000d0ea:	53                   	push   ebx
c000d0eb:	8b 10                	mov    edx,DWORD PTR [eax]
c000d0ed:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d0f3:	50                   	push   eax
c000d0f4:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d0f7:	83 c4 10             	add    esp,0x10
c000d0fa:	83 c4 08             	add    esp,0x8
c000d0fd:	5b                   	pop    ebx
c000d0fe:	c3                   	ret    
c000d0ff:	90                   	nop

c000d100 <File::seek(unsigned long long)>:
c000d100:	56                   	push   esi
c000d101:	53                   	push   ebx
c000d102:	b8 0b 00 00 00       	mov    eax,0xb
c000d107:	51                   	push   ecx
c000d108:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d10c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d110:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d117:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d11b:	80 fa 19             	cmp    dl,0x19
c000d11e:	77 31                	ja     c000d151 <File::seek(unsigned long long)+0x51>
c000d120:	8b 14 95 c0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9640]
c000d127:	85 d2                	test   edx,edx
c000d129:	74 26                	je     c000d151 <File::seek(unsigned long long)+0x51>
c000d12b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d131:	85 d2                	test   edx,edx
c000d133:	74 1c                	je     c000d151 <File::seek(unsigned long long)+0x51>
c000d135:	b8 05 00 00 00       	mov    eax,0x5
c000d13a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d13e:	74 11                	je     c000d151 <File::seek(unsigned long long)+0x51>
c000d140:	8b 02                	mov    eax,DWORD PTR [edx]
c000d142:	53                   	push   ebx
c000d143:	51                   	push   ecx
c000d144:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d14a:	52                   	push   edx
c000d14b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d14e:	83 c4 10             	add    esp,0x10
c000d151:	5a                   	pop    edx
c000d152:	5b                   	pop    ebx
c000d153:	5e                   	pop    esi
c000d154:	c3                   	ret    
c000d155:	90                   	nop

c000d156 <File::tell(unsigned long long*)>:
c000d156:	83 ec 0c             	sub    esp,0xc
c000d159:	b8 0b 00 00 00       	mov    eax,0xb
c000d15e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d162:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d169:	80 fa 19             	cmp    dl,0x19
c000d16c:	77 34                	ja     c000d1a2 <File::tell(unsigned long long*)+0x4c>
c000d16e:	8b 14 95 c0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9640]
c000d175:	85 d2                	test   edx,edx
c000d177:	74 29                	je     c000d1a2 <File::tell(unsigned long long*)+0x4c>
c000d179:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d17f:	85 d2                	test   edx,edx
c000d181:	74 1f                	je     c000d1a2 <File::tell(unsigned long long*)+0x4c>
c000d183:	b8 05 00 00 00       	mov    eax,0x5
c000d188:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d18c:	74 14                	je     c000d1a2 <File::tell(unsigned long long*)+0x4c>
c000d18e:	50                   	push   eax
c000d18f:	8b 02                	mov    eax,DWORD PTR [edx]
c000d191:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d195:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d19b:	52                   	push   edx
c000d19c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d19f:	83 c4 10             	add    esp,0x10
c000d1a2:	83 c4 0c             	add    esp,0xc
c000d1a5:	c3                   	ret    

c000d1a6 <File::rewind()>:
c000d1a6:	83 ec 10             	sub    esp,0x10
c000d1a9:	6a 00                	push   0x0
c000d1ab:	6a 00                	push   0x0
c000d1ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1b1:	e8 4a ff ff ff       	call   c000d100 <File::seek(unsigned long long)>
c000d1b6:	83 c4 1c             	add    esp,0x1c
c000d1b9:	c3                   	ret    

c000d1ba <File::unlink()>:
c000d1ba:	83 ec 0c             	sub    esp,0xc
c000d1bd:	b8 0b 00 00 00       	mov    eax,0xb
c000d1c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d1c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d1cd:	80 f9 19             	cmp    cl,0x19
c000d1d0:	77 2f                	ja     c000d201 <File::unlink()+0x47>
c000d1d2:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d1d9:	85 c9                	test   ecx,ecx
c000d1db:	74 24                	je     c000d201 <File::unlink()+0x47>
c000d1dd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d1e3:	85 c9                	test   ecx,ecx
c000d1e5:	74 1a                	je     c000d201 <File::unlink()+0x47>
c000d1e7:	b8 06 00 00 00       	mov    eax,0x6
c000d1ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1f0:	75 0f                	jne    c000d201 <File::unlink()+0x47>
c000d1f2:	83 c2 0d             	add    edx,0xd
c000d1f5:	50                   	push   eax
c000d1f6:	50                   	push   eax
c000d1f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d1f9:	52                   	push   edx
c000d1fa:	51                   	push   ecx
c000d1fb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d1fe:	83 c4 10             	add    esp,0x10
c000d201:	83 c4 0c             	add    esp,0xc
c000d204:	c3                   	ret    
c000d205:	90                   	nop

c000d206 <File::rename(char const*)>:
c000d206:	83 ec 0c             	sub    esp,0xc
c000d209:	b8 0b 00 00 00       	mov    eax,0xb
c000d20e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d212:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d219:	80 f9 19             	cmp    cl,0x19
c000d21c:	77 32                	ja     c000d250 <File::rename(char const*)+0x4a>
c000d21e:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d225:	85 c9                	test   ecx,ecx
c000d227:	74 27                	je     c000d250 <File::rename(char const*)+0x4a>
c000d229:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d22f:	85 c9                	test   ecx,ecx
c000d231:	74 1d                	je     c000d250 <File::rename(char const*)+0x4a>
c000d233:	b8 06 00 00 00       	mov    eax,0x6
c000d238:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d23c:	75 12                	jne    c000d250 <File::rename(char const*)+0x4a>
c000d23e:	83 c2 0d             	add    edx,0xd
c000d241:	50                   	push   eax
c000d242:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d244:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d248:	52                   	push   edx
c000d249:	51                   	push   ecx
c000d24a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d24d:	83 c4 10             	add    esp,0x10
c000d250:	83 c4 0c             	add    esp,0xc
c000d253:	c3                   	ret    

c000d254 <File::chfatattr(unsigned char, unsigned char)>:
c000d254:	57                   	push   edi
c000d255:	b8 0b 00 00 00       	mov    eax,0xb
c000d25a:	56                   	push   esi
c000d25b:	53                   	push   ebx
c000d25c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d260:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d264:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d26b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d26f:	80 f9 19             	cmp    cl,0x19
c000d272:	77 37                	ja     c000d2ab <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d274:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d27b:	85 c9                	test   ecx,ecx
c000d27d:	74 2c                	je     c000d2ab <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d27f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d285:	85 c9                	test   ecx,ecx
c000d287:	74 22                	je     c000d2ab <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d289:	b8 06 00 00 00       	mov    eax,0x6
c000d28e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d292:	75 17                	jne    c000d2ab <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d294:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d296:	89 f0                	mov    eax,esi
c000d298:	83 c2 0d             	add    edx,0xd
c000d29b:	0f b6 f0             	movzx  esi,al
c000d29e:	0f b6 db             	movzx  ebx,bl
c000d2a1:	56                   	push   esi
c000d2a2:	53                   	push   ebx
c000d2a3:	52                   	push   edx
c000d2a4:	51                   	push   ecx
c000d2a5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d2a8:	83 c4 10             	add    esp,0x10
c000d2ab:	5b                   	pop    ebx
c000d2ac:	5e                   	pop    esi
c000d2ad:	5f                   	pop    edi
c000d2ae:	c3                   	ret    
c000d2af:	90                   	nop

c000d2b0 <File::exists()>:
c000d2b0:	83 ec 0c             	sub    esp,0xc
c000d2b3:	31 c0                	xor    eax,eax
c000d2b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2b9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2c0:	80 f9 19             	cmp    cl,0x19
c000d2c3:	77 24                	ja     c000d2e9 <File::exists()+0x39>
c000d2c5:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d2cc:	85 c9                	test   ecx,ecx
c000d2ce:	74 19                	je     c000d2e9 <File::exists()+0x39>
c000d2d0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d2d6:	85 c9                	test   ecx,ecx
c000d2d8:	74 0f                	je     c000d2e9 <File::exists()+0x39>
c000d2da:	83 c2 0d             	add    edx,0xd
c000d2dd:	50                   	push   eax
c000d2de:	50                   	push   eax
c000d2df:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d2e1:	52                   	push   edx
c000d2e2:	51                   	push   ecx
c000d2e3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d2e6:	83 c4 10             	add    esp,0x10
c000d2e9:	83 c4 0c             	add    esp,0xc
c000d2ec:	c3                   	ret    
c000d2ed:	90                   	nop

c000d2ee <File::stat(unsigned long long*, bool*)>:
c000d2ee:	56                   	push   esi
c000d2ef:	53                   	push   ebx
c000d2f0:	50                   	push   eax
c000d2f1:	b8 0b 00 00 00       	mov    eax,0xb
c000d2f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2fa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d2fe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d305:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d309:	80 f9 19             	cmp    cl,0x19
c000d30c:	77 3d                	ja     c000d34b <File::stat(unsigned long long*, bool*)+0x5d>
c000d30e:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d315:	85 c9                	test   ecx,ecx
c000d317:	74 32                	je     c000d34b <File::stat(unsigned long long*, bool*)+0x5d>
c000d319:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d31f:	85 c9                	test   ecx,ecx
c000d321:	74 28                	je     c000d34b <File::stat(unsigned long long*, bool*)+0x5d>
c000d323:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d325:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d329:	74 13                	je     c000d33e <File::stat(unsigned long long*, bool*)+0x50>
c000d32b:	83 ec 04             	sub    esp,0x4
c000d32e:	56                   	push   esi
c000d32f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d335:	51                   	push   ecx
c000d336:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d339:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d33c:	eb 0a                	jmp    c000d348 <File::stat(unsigned long long*, bool*)+0x5a>
c000d33e:	53                   	push   ebx
c000d33f:	83 c2 0d             	add    edx,0xd
c000d342:	56                   	push   esi
c000d343:	52                   	push   edx
c000d344:	51                   	push   ecx
c000d345:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d348:	83 c4 10             	add    esp,0x10
c000d34b:	5a                   	pop    edx
c000d34c:	5b                   	pop    ebx
c000d34d:	5e                   	pop    esi
c000d34e:	c3                   	ret    

c000d34f <Fs::setcwd(Process*, char*)>:
c000d34f:	55                   	push   ebp
c000d350:	57                   	push   edi
c000d351:	56                   	push   esi
c000d352:	53                   	push   ebx
c000d353:	81 ec 20 02 00 00    	sub    esp,0x220
c000d359:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d360:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d366:	57                   	push   edi
c000d367:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d36e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d372:	56                   	push   esi
c000d373:	e8 bc fa ff ff       	call   c000ce34 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d378:	89 34 24             	mov    DWORD PTR [esp],esi
c000d37b:	e8 20 33 ff ff       	call   c00006a0 <strlen>
c000d380:	83 c4 10             	add    esp,0x10
c000d383:	83 f8 02             	cmp    eax,0x2
c000d386:	77 17                	ja     c000d39f <Fs::setcwd(Process*, char*)+0x50>
c000d388:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d38d:	83 e8 41             	sub    eax,0x41
c000d390:	83 f8 19             	cmp    eax,0x19
c000d393:	76 24                	jbe    c000d3b9 <Fs::setcwd(Process*, char*)+0x6a>
c000d395:	b8 03 00 00 00       	mov    eax,0x3
c000d39a:	e9 e0 00 00 00       	jmp    c000d47f <Fs::setcwd(Process*, char*)+0x130>
c000d39f:	83 ec 0c             	sub    esp,0xc
c000d3a2:	56                   	push   esi
c000d3a3:	e8 f8 32 ff ff       	call   c00006a0 <strlen>
c000d3a8:	83 c4 10             	add    esp,0x10
c000d3ab:	83 f8 03             	cmp    eax,0x3
c000d3ae:	75 34                	jne    c000d3e4 <Fs::setcwd(Process*, char*)+0x95>
c000d3b0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d3b5:	75 2d                	jne    c000d3e4 <Fs::setcwd(Process*, char*)+0x95>
c000d3b7:	eb cf                	jmp    c000d388 <Fs::setcwd(Process*, char*)+0x39>
c000d3b9:	8b 14 85 c0 69 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9640]
c000d3c0:	b8 05 00 00 00       	mov    eax,0x5
c000d3c5:	85 d2                	test   edx,edx
c000d3c7:	0f 84 b2 00 00 00    	je     c000d47f <Fs::setcwd(Process*, char*)+0x130>
c000d3cd:	b8 06 00 00 00       	mov    eax,0x6
c000d3d2:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d3d9:	0f 85 92 00 00 00    	jne    c000d471 <Fs::setcwd(Process*, char*)+0x122>
c000d3df:	e9 9b 00 00 00       	jmp    c000d47f <Fs::setcwd(Process*, char*)+0x130>
c000d3e4:	83 ec 0c             	sub    esp,0xc
c000d3e7:	68 14 01 00 00       	push   0x114
c000d3ec:	e8 d2 c5 ff ff       	call   c00099c3 <malloc>
c000d3f1:	83 c4 0c             	add    esp,0xc
c000d3f4:	89 c3                	mov    ebx,eax
c000d3f6:	55                   	push   ebp
c000d3f7:	56                   	push   esi
c000d3f8:	50                   	push   eax
c000d3f9:	e8 e0 fb ff ff       	call   c000cfde <File::File(char const*, Process*)>
c000d3fe:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d403:	83 c4 0c             	add    esp,0xc
c000d406:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d40a:	50                   	push   eax
c000d40b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d40f:	50                   	push   eax
c000d410:	53                   	push   ebx
c000d411:	e8 d8 fe ff ff       	call   c000d2ee <File::stat(unsigned long long*, bool*)>
c000d416:	83 c4 10             	add    esp,0x10
c000d419:	83 f8 02             	cmp    eax,0x2
c000d41c:	74 04                	je     c000d422 <Fs::setcwd(Process*, char*)+0xd3>
c000d41e:	85 c0                	test   eax,eax
c000d420:	74 1c                	je     c000d43e <Fs::setcwd(Process*, char*)+0xef>
c000d422:	b8 01 00 00 00       	mov    eax,0x1
c000d427:	85 db                	test   ebx,ebx
c000d429:	74 54                	je     c000d47f <Fs::setcwd(Process*, char*)+0x130>
c000d42b:	83 ec 0c             	sub    esp,0xc
c000d42e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d430:	53                   	push   ebx
c000d431:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d434:	83 c4 10             	add    esp,0x10
c000d437:	b8 01 00 00 00       	mov    eax,0x1
c000d43c:	eb 41                	jmp    c000d47f <Fs::setcwd(Process*, char*)+0x130>
c000d43e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d443:	75 1c                	jne    c000d461 <Fs::setcwd(Process*, char*)+0x112>
c000d445:	b8 02 00 00 00       	mov    eax,0x2
c000d44a:	85 db                	test   ebx,ebx
c000d44c:	74 31                	je     c000d47f <Fs::setcwd(Process*, char*)+0x130>
c000d44e:	83 ec 0c             	sub    esp,0xc
c000d451:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d453:	53                   	push   ebx
c000d454:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d457:	83 c4 10             	add    esp,0x10
c000d45a:	b8 02 00 00 00       	mov    eax,0x2
c000d45f:	eb 1e                	jmp    c000d47f <Fs::setcwd(Process*, char*)+0x130>
c000d461:	85 db                	test   ebx,ebx
c000d463:	74 0c                	je     c000d471 <Fs::setcwd(Process*, char*)+0x122>
c000d465:	83 ec 0c             	sub    esp,0xc
c000d468:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d46a:	53                   	push   ebx
c000d46b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d46e:	83 c4 10             	add    esp,0x10
c000d471:	50                   	push   eax
c000d472:	50                   	push   eax
c000d473:	56                   	push   esi
c000d474:	57                   	push   edi
c000d475:	e8 c6 32 ff ff       	call   c0000740 <strcpy>
c000d47a:	83 c4 10             	add    esp,0x10
c000d47d:	31 c0                	xor    eax,eax
c000d47f:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d485:	5b                   	pop    ebx
c000d486:	5e                   	pop    esi
c000d487:	5f                   	pop    edi
c000d488:	5d                   	pop    ebp
c000d489:	c3                   	ret    

c000d48a <Directory::Directory(char const*, Process*)>:
c000d48a:	83 ec 0c             	sub    esp,0xc
c000d48d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d491:	83 ec 08             	sub    esp,0x8
c000d494:	6a 00                	push   0x0
c000d496:	50                   	push   eax
c000d497:	e8 c2 dd ff ff       	call   c000b25e <UnixFile::UnixFile(int)>
c000d49c:	83 c4 10             	add    esp,0x10
c000d49f:	ba 24 32 02 c0       	mov    edx,0xc0023224
c000d4a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4a8:	89 10                	mov    DWORD PTR [eax],edx
c000d4aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d4ae:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d4b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b8:	83 c0 0d             	add    eax,0xd
c000d4bb:	83 ec 04             	sub    esp,0x4
c000d4be:	52                   	push   edx
c000d4bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4c3:	50                   	push   eax
c000d4c4:	e8 6b f9 ff ff       	call   c000ce34 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d4c9:	83 c4 10             	add    esp,0x10
c000d4cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4d0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d4d3:	8d 50 bf             	lea    edx,[eax-0x41]
c000d4d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4da:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4e4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d4e8:	90                   	nop
c000d4e9:	83 c4 0c             	add    esp,0xc
c000d4ec:	c3                   	ret    
c000d4ed:	90                   	nop

c000d4ee <Directory::open()>:
c000d4ee:	53                   	push   ebx
c000d4ef:	b8 0b 00 00 00       	mov    eax,0xb
c000d4f4:	83 ec 08             	sub    esp,0x8
c000d4f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4fb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d502:	80 fa 19             	cmp    dl,0x19
c000d505:	77 3d                	ja     c000d544 <Directory::open()+0x56>
c000d507:	8b 14 95 c0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9640]
c000d50e:	85 d2                	test   edx,edx
c000d510:	74 32                	je     c000d544 <Directory::open()+0x56>
c000d512:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d518:	85 d2                	test   edx,edx
c000d51a:	74 28                	je     c000d544 <Directory::open()+0x56>
c000d51c:	b8 06 00 00 00       	mov    eax,0x6
c000d521:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d525:	75 1d                	jne    c000d544 <Directory::open()+0x56>
c000d527:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d52d:	50                   	push   eax
c000d52e:	8b 02                	mov    eax,DWORD PTR [edx]
c000d530:	51                   	push   ecx
c000d531:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d534:	51                   	push   ecx
c000d535:	52                   	push   edx
c000d536:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d539:	83 c4 10             	add    esp,0x10
c000d53c:	85 c0                	test   eax,eax
c000d53e:	75 04                	jne    c000d544 <Directory::open()+0x56>
c000d540:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d544:	83 c4 08             	add    esp,0x8
c000d547:	5b                   	pop    ebx
c000d548:	c3                   	ret    
c000d549:	90                   	nop

c000d54a <Directory::close()>:
c000d54a:	53                   	push   ebx
c000d54b:	b8 0b 00 00 00       	mov    eax,0xb
c000d550:	83 ec 08             	sub    esp,0x8
c000d553:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d557:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d55e:	80 fa 19             	cmp    dl,0x19
c000d561:	77 41                	ja     c000d5a4 <Directory::close()+0x5a>
c000d563:	8b 1c 95 c0 69 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9640]
c000d56a:	85 db                	test   ebx,ebx
c000d56c:	74 36                	je     c000d5a4 <Directory::close()+0x5a>
c000d56e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d575:	74 2d                	je     c000d5a4 <Directory::close()+0x5a>
c000d577:	b8 05 00 00 00       	mov    eax,0x5
c000d57c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d580:	74 22                	je     c000d5a4 <Directory::close()+0x5a>
c000d582:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d586:	8b 04 95 c0 69 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9640]
c000d58d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d593:	53                   	push   ebx
c000d594:	53                   	push   ebx
c000d595:	8b 10                	mov    edx,DWORD PTR [eax]
c000d597:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d59d:	50                   	push   eax
c000d59e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d5a1:	83 c4 10             	add    esp,0x10
c000d5a4:	83 c4 08             	add    esp,0x8
c000d5a7:	5b                   	pop    ebx
c000d5a8:	c3                   	ret    
c000d5a9:	90                   	nop

c000d5aa <Directory::unlink()>:
c000d5aa:	83 ec 0c             	sub    esp,0xc
c000d5ad:	b8 0b 00 00 00       	mov    eax,0xb
c000d5b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5b6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5bd:	80 f9 19             	cmp    cl,0x19
c000d5c0:	77 2f                	ja     c000d5f1 <Directory::unlink()+0x47>
c000d5c2:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d5c9:	85 c9                	test   ecx,ecx
c000d5cb:	74 24                	je     c000d5f1 <Directory::unlink()+0x47>
c000d5cd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5d3:	85 c9                	test   ecx,ecx
c000d5d5:	74 1a                	je     c000d5f1 <Directory::unlink()+0x47>
c000d5d7:	b8 06 00 00 00       	mov    eax,0x6
c000d5dc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d5e0:	75 0f                	jne    c000d5f1 <Directory::unlink()+0x47>
c000d5e2:	83 c2 0d             	add    edx,0xd
c000d5e5:	50                   	push   eax
c000d5e6:	50                   	push   eax
c000d5e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5e9:	52                   	push   edx
c000d5ea:	51                   	push   ecx
c000d5eb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d5ee:	83 c4 10             	add    esp,0x10
c000d5f1:	83 c4 0c             	add    esp,0xc
c000d5f4:	c3                   	ret    
c000d5f5:	90                   	nop

c000d5f6 <Directory::rename(char const*)>:
c000d5f6:	83 ec 0c             	sub    esp,0xc
c000d5f9:	b8 0b 00 00 00       	mov    eax,0xb
c000d5fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d602:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d609:	80 f9 19             	cmp    cl,0x19
c000d60c:	77 32                	ja     c000d640 <Directory::rename(char const*)+0x4a>
c000d60e:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d615:	85 c9                	test   ecx,ecx
c000d617:	74 27                	je     c000d640 <Directory::rename(char const*)+0x4a>
c000d619:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d61f:	85 c9                	test   ecx,ecx
c000d621:	74 1d                	je     c000d640 <Directory::rename(char const*)+0x4a>
c000d623:	b8 06 00 00 00       	mov    eax,0x6
c000d628:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d62c:	75 12                	jne    c000d640 <Directory::rename(char const*)+0x4a>
c000d62e:	83 c2 0d             	add    edx,0xd
c000d631:	50                   	push   eax
c000d632:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d634:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d638:	52                   	push   edx
c000d639:	51                   	push   ecx
c000d63a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d63d:	83 c4 10             	add    esp,0x10
c000d640:	83 c4 0c             	add    esp,0xc
c000d643:	c3                   	ret    

c000d644 <Directory::exists()>:
c000d644:	83 ec 0c             	sub    esp,0xc
c000d647:	31 c0                	xor    eax,eax
c000d649:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d64d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d654:	80 f9 19             	cmp    cl,0x19
c000d657:	77 24                	ja     c000d67d <Directory::exists()+0x39>
c000d659:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d660:	85 c9                	test   ecx,ecx
c000d662:	74 19                	je     c000d67d <Directory::exists()+0x39>
c000d664:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d66a:	85 c9                	test   ecx,ecx
c000d66c:	74 0f                	je     c000d67d <Directory::exists()+0x39>
c000d66e:	83 c2 0d             	add    edx,0xd
c000d671:	50                   	push   eax
c000d672:	50                   	push   eax
c000d673:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d675:	52                   	push   edx
c000d676:	51                   	push   ecx
c000d677:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d67a:	83 c4 10             	add    esp,0x10
c000d67d:	83 c4 0c             	add    esp,0xc
c000d680:	c3                   	ret    
c000d681:	90                   	nop

c000d682 <Directory::read(dirent*)>:
c000d682:	83 ec 1c             	sub    esp,0x1c
c000d685:	b8 0b 00 00 00       	mov    eax,0xb
c000d68a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d68e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d695:	80 fa 19             	cmp    dl,0x19
c000d698:	77 30                	ja     c000d6ca <Directory::read(dirent*)+0x48>
c000d69a:	8b 14 95 c0 69 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9640]
c000d6a1:	85 d2                	test   edx,edx
c000d6a3:	74 25                	je     c000d6ca <Directory::read(dirent*)+0x48>
c000d6a5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d6ac:	74 1c                	je     c000d6ca <Directory::read(dirent*)+0x48>
c000d6ae:	83 ec 0c             	sub    esp,0xc
c000d6b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6b3:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d6b7:	52                   	push   edx
c000d6b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6bc:	6a 00                	push   0x0
c000d6be:	68 10 01 00 00       	push   0x110
c000d6c3:	51                   	push   ecx
c000d6c4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d6c7:	83 c4 20             	add    esp,0x20
c000d6ca:	83 c4 1c             	add    esp,0x1c
c000d6cd:	c3                   	ret    

c000d6ce <Directory::create()>:
c000d6ce:	83 ec 0c             	sub    esp,0xc
c000d6d1:	b8 0b 00 00 00       	mov    eax,0xb
c000d6d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d6da:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d6e1:	80 f9 19             	cmp    cl,0x19
c000d6e4:	77 2f                	ja     c000d715 <Directory::create()+0x47>
c000d6e6:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c000d6ed:	85 c9                	test   ecx,ecx
c000d6ef:	74 24                	je     c000d715 <Directory::create()+0x47>
c000d6f1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d6f7:	85 c9                	test   ecx,ecx
c000d6f9:	74 1a                	je     c000d715 <Directory::create()+0x47>
c000d6fb:	b8 06 00 00 00       	mov    eax,0x6
c000d700:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d704:	75 0f                	jne    c000d715 <Directory::create()+0x47>
c000d706:	83 c2 0d             	add    edx,0xd
c000d709:	50                   	push   eax
c000d70a:	50                   	push   eax
c000d70b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d70d:	52                   	push   edx
c000d70e:	51                   	push   ecx
c000d70f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d712:	83 c4 10             	add    esp,0x10
c000d715:	83 c4 0c             	add    esp,0xc
c000d718:	c3                   	ret    
c000d719:	90                   	nop

c000d71a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d71a:	b8 0a 00 00 00       	mov    eax,0xa
c000d71f:	c3                   	ret    

c000d720 <Bus::Bus(char const*)>:
c000d720:	83 ec 0c             	sub    esp,0xc
c000d723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d727:	83 ec 08             	sub    esp,0x8
c000d72a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d72e:	50                   	push   eax
c000d72f:	e8 8a 09 00 00       	call   c000e0be <Device::Device(char const*)>
c000d734:	83 c4 10             	add    esp,0x10
c000d737:	ba 40 32 02 c0       	mov    edx,0xc0023240
c000d73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d740:	89 10                	mov    DWORD PTR [eax],edx
c000d742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d746:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d750:	90                   	nop
c000d751:	83 c4 0c             	add    esp,0xc
c000d754:	c3                   	ret    
c000d755:	90                   	nop
c000d756:	66 90                	xchg   ax,ax

c000d758 <Bus::~Bus()>:
c000d758:	83 ec 0c             	sub    esp,0xc
c000d75b:	ba 40 32 02 c0       	mov    edx,0xc0023240
c000d760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d764:	89 10                	mov    DWORD PTR [eax],edx
c000d766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76a:	83 ec 0c             	sub    esp,0xc
c000d76d:	50                   	push   eax
c000d76e:	e8 15 06 00 00       	call   c000dd88 <Device::~Device()>
c000d773:	83 c4 10             	add    esp,0x10
c000d776:	90                   	nop
c000d777:	83 c4 0c             	add    esp,0xc
c000d77a:	c3                   	ret    
c000d77b:	90                   	nop

c000d77c <Bus::~Bus()>:
c000d77c:	83 ec 0c             	sub    esp,0xc
c000d77f:	83 ec 0c             	sub    esp,0xc
c000d782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d786:	e8 cd ff ff ff       	call   c000d758 <Bus::~Bus()>
c000d78b:	83 c4 10             	add    esp,0x10
c000d78e:	83 ec 08             	sub    esp,0x8
c000d791:	68 58 01 00 00       	push   0x158
c000d796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79a:	e8 f3 f1 ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c000d79f:	83 c4 10             	add    esp,0x10
c000d7a2:	83 c4 0c             	add    esp,0xc
c000d7a5:	c3                   	ret    
c000d7a6:	66 90                	xchg   ax,ax

c000d7a8 <Buzzer::Buzzer(char const*)>:
c000d7a8:	83 ec 0c             	sub    esp,0xc
c000d7ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7af:	83 ec 08             	sub    esp,0x8
c000d7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7b6:	50                   	push   eax
c000d7b7:	e8 02 09 00 00       	call   c000e0be <Device::Device(char const*)>
c000d7bc:	83 c4 10             	add    esp,0x10
c000d7bf:	ba 6c 32 02 c0       	mov    edx,0xc002326c
c000d7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c8:	89 10                	mov    DWORD PTR [eax],edx
c000d7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ce:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000d7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7dc:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000d7e6:	90                   	nop
c000d7e7:	83 c4 0c             	add    esp,0xc
c000d7ea:	c3                   	ret    
c000d7eb:	90                   	nop

c000d7ec <Buzzer::~Buzzer()>:
c000d7ec:	83 ec 0c             	sub    esp,0xc
c000d7ef:	ba 6c 32 02 c0       	mov    edx,0xc002326c
c000d7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f8:	89 10                	mov    DWORD PTR [eax],edx
c000d7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fe:	83 ec 0c             	sub    esp,0xc
c000d801:	50                   	push   eax
c000d802:	e8 81 05 00 00       	call   c000dd88 <Device::~Device()>
c000d807:	83 c4 10             	add    esp,0x10
c000d80a:	90                   	nop
c000d80b:	83 c4 0c             	add    esp,0xc
c000d80e:	c3                   	ret    
c000d80f:	90                   	nop

c000d810 <Buzzer::~Buzzer()>:
c000d810:	83 ec 0c             	sub    esp,0xc
c000d813:	83 ec 0c             	sub    esp,0xc
c000d816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81a:	e8 cd ff ff ff       	call   c000d7ec <Buzzer::~Buzzer()>
c000d81f:	83 c4 10             	add    esp,0x10
c000d822:	83 ec 08             	sub    esp,0x8
c000d825:	68 5c 01 00 00       	push   0x15c
c000d82a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d82e:	e8 5f f1 ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c000d833:	83 c4 10             	add    esp,0x10
c000d836:	83 c4 0c             	add    esp,0xc
c000d839:	c3                   	ret    

c000d83a <Buzzer::stop()>:
c000d83a:	83 ec 14             	sub    esp,0x14
c000d83d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d841:	8b 10                	mov    edx,DWORD PTR [eax]
c000d843:	6a 00                	push   0x0
c000d845:	50                   	push   eax
c000d846:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d849:	83 c4 1c             	add    esp,0x1c
c000d84c:	c3                   	ret    

c000d84d <beepThread(void*)>:
c000d84d:	53                   	push   ebx
c000d84e:	83 ec 08             	sub    esp,0x8
c000d851:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000d856:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d85a:	48                   	dec    eax
c000d85b:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000d860:	75 02                	jne    c000d864 <beepThread(void*)+0x17>
c000d862:	fb                   	sti    
c000d863:	90                   	nop
c000d864:	83 ec 0c             	sub    esp,0xc
c000d867:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000d86e:	50                   	push   eax
c000d86f:	e8 8c a9 00 00       	call   c0018200 <milliTenthSleep(unsigned int)>
c000d874:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d877:	e8 be ff ff ff       	call   c000d83a <Buzzer::stop()>
c000d87c:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d884:	83 c4 18             	add    esp,0x18
c000d887:	5b                   	pop    ebx
c000d888:	e9 73 a8 00 00       	jmp    c0018100 <blockTask(TaskState)>
c000d88d:	90                   	nop

c000d88e <Buzzer::beep(int, int, bool)>:
c000d88e:	57                   	push   edi
c000d88f:	56                   	push   esi
c000d890:	53                   	push   ebx
c000d891:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d895:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d899:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d89d:	50                   	push   eax
c000d89e:	50                   	push   eax
c000d89f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8a5:	53                   	push   ebx
c000d8a6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d8a9:	83 c4 10             	add    esp,0x10
c000d8ac:	89 f8                	mov    eax,edi
c000d8ae:	84 c0                	test   al,al
c000d8b0:	74 1e                	je     c000d8d0 <Buzzer::beep(int, int, bool)+0x42>
c000d8b2:	83 ec 0c             	sub    esp,0xc
c000d8b5:	6b f6 0a             	imul   esi,esi,0xa
c000d8b8:	56                   	push   esi
c000d8b9:	e8 42 a9 00 00       	call   c0018200 <milliTenthSleep(unsigned int)>
c000d8be:	83 c4 10             	add    esp,0x10
c000d8c1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d8c5:	5b                   	pop    ebx
c000d8c6:	5e                   	pop    esi
c000d8c7:	5f                   	pop    edi
c000d8c8:	e9 6d ff ff ff       	jmp    c000d83a <Buzzer::stop()>
c000d8cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d8d0:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000d8d6:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000d8db:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000d8e3:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d8e7:	c7 44 24 14 4d d8 00 c0 	mov    DWORD PTR [esp+0x14],0xc000d84d
c000d8ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d8f3:	5b                   	pop    ebx
c000d8f4:	5e                   	pop    esi
c000d8f5:	5f                   	pop    edi
c000d8f6:	e9 f1 a3 00 00       	jmp    c0017cec <Process::createThread(void (*)(void*), void*, int)>
c000d8fb:	90                   	nop

c000d8fc <User::loadClockSettings(int)>:
c000d8fc:	53                   	push   ebx
c000d8fd:	83 ec 14             	sub    esp,0x14
c000d900:	68 14 01 00 00       	push   0x114
c000d905:	e8 b9 c0 ff ff       	call   c00099c3 <malloc>
c000d90a:	83 c4 0c             	add    esp,0xc
c000d90d:	89 c3                	mov    ebx,eax
c000d90f:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c000d915:	68 94 32 02 c0       	push   0xc0023294
c000d91a:	50                   	push   eax
c000d91b:	e8 be f6 ff ff       	call   c000cfde <File::File(char const*, Process*)>
c000d920:	58                   	pop    eax
c000d921:	5a                   	pop    edx
c000d922:	6a 01                	push   0x1
c000d924:	53                   	push   ebx
c000d925:	e8 18 f7 ff ff       	call   c000d042 <File::open(FileOpenMode)>
c000d92a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d92d:	e8 6e f7 ff ff       	call   c000d0a0 <File::close()>
c000d932:	83 c4 10             	add    esp,0x10
c000d935:	85 db                	test   ebx,ebx
c000d937:	74 0f                	je     c000d948 <User::loadClockSettings(int)+0x4c>
c000d939:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d93b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d93f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d942:	83 c4 08             	add    esp,0x8
c000d945:	5b                   	pop    ebx
c000d946:	ff e0                	jmp    eax
c000d948:	83 c4 08             	add    esp,0x8
c000d94b:	5b                   	pop    ebx
c000d94c:	c3                   	ret    
c000d94d:	90                   	nop

c000d94e <Clock::Clock(char const*)>:
c000d94e:	83 ec 0c             	sub    esp,0xc
c000d951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d955:	83 ec 08             	sub    esp,0x8
c000d958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d95c:	50                   	push   eax
c000d95d:	e8 5c 07 00 00       	call   c000e0be <Device::Device(char const*)>
c000d962:	83 c4 10             	add    esp,0x10
c000d965:	ba bc 32 02 c0       	mov    edx,0xc00232bc
c000d96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d96e:	89 10                	mov    DWORD PTR [eax],edx
c000d970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d974:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000d97e:	90                   	nop
c000d97f:	83 c4 0c             	add    esp,0xc
c000d982:	c3                   	ret    
c000d983:	90                   	nop

c000d984 <Clock::~Clock()>:
c000d984:	83 ec 0c             	sub    esp,0xc
c000d987:	ba bc 32 02 c0       	mov    edx,0xc00232bc
c000d98c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d990:	89 10                	mov    DWORD PTR [eax],edx
c000d992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d996:	83 ec 0c             	sub    esp,0xc
c000d999:	50                   	push   eax
c000d99a:	e8 e9 03 00 00       	call   c000dd88 <Device::~Device()>
c000d99f:	83 c4 10             	add    esp,0x10
c000d9a2:	90                   	nop
c000d9a3:	83 c4 0c             	add    esp,0xc
c000d9a6:	c3                   	ret    
c000d9a7:	90                   	nop

c000d9a8 <Clock::~Clock()>:
c000d9a8:	83 ec 0c             	sub    esp,0xc
c000d9ab:	83 ec 0c             	sub    esp,0xc
c000d9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b2:	e8 cd ff ff ff       	call   c000d984 <Clock::~Clock()>
c000d9b7:	83 c4 10             	add    esp,0x10
c000d9ba:	83 ec 08             	sub    esp,0x8
c000d9bd:	68 58 01 00 00       	push   0x158
c000d9c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9c6:	e8 c7 ef ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	83 c4 0c             	add    esp,0xc
c000d9d1:	c3                   	ret    

c000d9d2 <Clock::timeInSecondsLocal()>:
c000d9d2:	53                   	push   ebx
c000d9d3:	83 ec 14             	sub    esp,0x14
c000d9d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d9da:	8b 10                	mov    edx,DWORD PTR [eax]
c000d9dc:	50                   	push   eax
c000d9dd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d9e0:	0f b6 0d 3c 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc002653c
c000d9e7:	03 0d 40 65 02 c0    	add    ecx,DWORD PTR ds:0xc0026540
c000d9ed:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d9f3:	89 cb                	mov    ebx,ecx
c000d9f5:	c1 fb 1f             	sar    ebx,0x1f
c000d9f8:	01 c8                	add    eax,ecx
c000d9fa:	11 da                	adc    edx,ebx
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	31 c9                	xor    ecx,ecx
c000da01:	80 3d 3d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002653d,0x0
c000da08:	74 05                	je     c000da0f <Clock::timeInSecondsLocal()+0x3d>
c000da0a:	b9 08 07 00 00       	mov    ecx,0x708
c000da0f:	31 db                	xor    ebx,ebx
c000da11:	01 c8                	add    eax,ecx
c000da13:	11 da                	adc    edx,ebx
c000da15:	83 c4 08             	add    esp,0x8
c000da18:	5b                   	pop    ebx
c000da19:	c3                   	ret    

c000da1a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000da1a:	57                   	push   edi
c000da1b:	56                   	push   esi
c000da1c:	53                   	push   ebx
c000da1d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000da21:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000da25:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da27:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000da2b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000da2e:	0f b6 05 3c 65 02 c0 	movzx  eax,BYTE PTR ds:0xc002653c
c000da35:	03 05 40 65 02 c0    	add    eax,DWORD PTR ds:0xc0026540
c000da3b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000da41:	99                   	cdq    
c000da42:	29 c6                	sub    esi,eax
c000da44:	19 d7                	sbb    edi,edx
c000da46:	89 f0                	mov    eax,esi
c000da48:	89 fa                	mov    edx,edi
c000da4a:	31 f6                	xor    esi,esi
c000da4c:	80 3d 3d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002653d,0x0
c000da53:	74 05                	je     c000da5a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000da55:	be 08 07 00 00       	mov    esi,0x708
c000da5a:	31 ff                	xor    edi,edi
c000da5c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000da60:	29 f0                	sub    eax,esi
c000da62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da66:	19 fa                	sbb    edx,edi
c000da68:	89 d8                	mov    eax,ebx
c000da6a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da6e:	5b                   	pop    ebx
c000da6f:	5e                   	pop    esi
c000da70:	5f                   	pop    edi
c000da71:	ff e0                	jmp    eax

c000da73 <datetimeToSeconds(datetime_t)>:
c000da73:	55                   	push   ebp
c000da74:	57                   	push   edi
c000da75:	56                   	push   esi
c000da76:	53                   	push   ebx
c000da77:	83 ec 14             	sub    esp,0x14
c000da7a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da7e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000da82:	89 d3                	mov    ebx,edx
c000da84:	0f b6 c6             	movzx  eax,dh
c000da87:	c1 eb 10             	shr    ebx,0x10
c000da8a:	48                   	dec    eax
c000da8b:	66 81 eb 6c 07       	sub    bx,0x76c
c000da90:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000da94:	0f b6 f5             	movzx  esi,ch
c000da97:	89 cf                	mov    edi,ecx
c000da99:	6b f6 3c             	imul   esi,esi,0x3c
c000da9c:	c1 ef 10             	shr    edi,0x10
c000da9f:	0f b6 c9             	movzx  ecx,cl
c000daa2:	89 f8                	mov    eax,edi
c000daa4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000daaa:	0f b6 f8             	movzx  edi,al
c000daad:	0f b6 d2             	movzx  edx,dl
c000dab0:	01 fe                	add    esi,edi
c000dab2:	01 f1                	add    ecx,esi
c000dab4:	0f b7 f3             	movzx  esi,bx
c000dab7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dabb:	c1 f9 1f             	sar    ecx,0x1f
c000dabe:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000dac3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dac7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000dacc:	8b 0c 8d 00 33 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd00]
c000dad3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000dad7:	76 29                	jbe    c000db02 <datetimeToSeconds(datetime_t)+0x8f>
c000dad9:	f6 c3 03             	test   bl,0x3
c000dadc:	75 24                	jne    c000db02 <datetimeToSeconds(datetime_t)+0x8f>
c000dade:	31 d2                	xor    edx,edx
c000dae0:	bf 64 00 00 00       	mov    edi,0x64
c000dae5:	89 d8                	mov    eax,ebx
c000dae7:	66 f7 f7             	div    di
c000daea:	66 85 d2             	test   dx,dx
c000daed:	75 12                	jne    c000db01 <datetimeToSeconds(datetime_t)+0x8e>
c000daef:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000daf5:	bf 90 01 00 00       	mov    edi,0x190
c000dafa:	99                   	cdq    
c000dafb:	f7 ff                	idiv   edi
c000dafd:	85 d2                	test   edx,edx
c000daff:	75 01                	jne    c000db02 <datetimeToSeconds(datetime_t)+0x8f>
c000db01:	41                   	inc    ecx
c000db02:	66 83 fb 46          	cmp    bx,0x46
c000db06:	76 45                	jbe    c000db4d <datetimeToSeconds(datetime_t)+0xda>
c000db08:	bb 46 00 00 00       	mov    ebx,0x46
c000db0d:	bf 64 00 00 00       	mov    edi,0x64
c000db12:	bd 90 01 00 00       	mov    ebp,0x190
c000db17:	b8 6d 01 00 00       	mov    eax,0x16d
c000db1c:	f6 c3 03             	test   bl,0x3
c000db1f:	75 23                	jne    c000db44 <datetimeToSeconds(datetime_t)+0xd1>
c000db21:	89 d8                	mov    eax,ebx
c000db23:	99                   	cdq    
c000db24:	f7 ff                	idiv   edi
c000db26:	b8 6e 01 00 00       	mov    eax,0x16e
c000db2b:	85 d2                	test   edx,edx
c000db2d:	75 15                	jne    c000db44 <datetimeToSeconds(datetime_t)+0xd1>
c000db2f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000db35:	99                   	cdq    
c000db36:	f7 fd                	idiv   ebp
c000db38:	83 fa 01             	cmp    edx,0x1
c000db3b:	19 c0                	sbb    eax,eax
c000db3d:	f7 d0                	not    eax
c000db3f:	05 6e 01 00 00       	add    eax,0x16e
c000db44:	01 c1                	add    ecx,eax
c000db46:	43                   	inc    ebx
c000db47:	39 f3                	cmp    ebx,esi
c000db49:	7c cc                	jl     c000db17 <datetimeToSeconds(datetime_t)+0xa4>
c000db4b:	eb 35                	jmp    c000db82 <datetimeToSeconds(datetime_t)+0x10f>
c000db4d:	74 33                	je     c000db82 <datetimeToSeconds(datetime_t)+0x10f>
c000db4f:	b8 45 00 00 00       	mov    eax,0x45
c000db54:	89 c2                	mov    edx,eax
c000db56:	83 e2 03             	and    edx,0x3
c000db59:	39 f0                	cmp    eax,esi
c000db5b:	7e 0f                	jle    c000db6c <datetimeToSeconds(datetime_t)+0xf9>
c000db5d:	83 fa 01             	cmp    edx,0x1
c000db60:	19 d2                	sbb    edx,edx
c000db62:	48                   	dec    eax
c000db63:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000db6a:	eb e8                	jmp    c000db54 <datetimeToSeconds(datetime_t)+0xe1>
c000db6c:	b8 6d 01 00 00       	mov    eax,0x16d
c000db71:	85 d2                	test   edx,edx
c000db73:	75 0b                	jne    c000db80 <datetimeToSeconds(datetime_t)+0x10d>
c000db75:	66 83 fb 01          	cmp    bx,0x1
c000db79:	19 c0                	sbb    eax,eax
c000db7b:	05 6e 01 00 00       	add    eax,0x16e
c000db80:	29 c1                	sub    ecx,eax
c000db82:	b8 80 51 01 00       	mov    eax,0x15180
c000db87:	f7 e9                	imul   ecx
c000db89:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db8d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000db91:	83 c4 14             	add    esp,0x14
c000db94:	5b                   	pop    ebx
c000db95:	5e                   	pop    esi
c000db96:	5f                   	pop    edi
c000db97:	5d                   	pop    ebp
c000db98:	c3                   	ret    
c000db99:	90                   	nop

c000db9a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000db9a:	57                   	push   edi
c000db9b:	56                   	push   esi
c000db9c:	53                   	push   ebx
c000db9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dba1:	8b 06                	mov    eax,DWORD PTR [esi]
c000dba3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000dba6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbae:	e8 c0 fe ff ff       	call   c000da73 <datetimeToSeconds(datetime_t)>
c000dbb3:	59                   	pop    ecx
c000dbb4:	0f b6 0d 3c 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc002653c
c000dbbb:	5b                   	pop    ebx
c000dbbc:	03 0d 40 65 02 c0    	add    ecx,DWORD PTR ds:0xc0026540
c000dbc2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dbc8:	89 cb                	mov    ebx,ecx
c000dbca:	c1 fb 1f             	sar    ebx,0x1f
c000dbcd:	29 c8                	sub    eax,ecx
c000dbcf:	19 da                	sbb    edx,ebx
c000dbd1:	31 c9                	xor    ecx,ecx
c000dbd3:	80 3d 3d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002653d,0x0
c000dbda:	74 05                	je     c000dbe1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000dbdc:	b9 08 07 00 00       	mov    ecx,0x708
c000dbe1:	31 db                	xor    ebx,ebx
c000dbe3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000dbe7:	29 c8                	sub    eax,ecx
c000dbe9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dbed:	19 da                	sbb    edx,ebx
c000dbef:	89 f8                	mov    eax,edi
c000dbf1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dbf5:	5b                   	pop    ebx
c000dbf6:	5e                   	pop    esi
c000dbf7:	5f                   	pop    edi
c000dbf8:	ff e0                	jmp    eax

c000dbfa <secondsToDatetime(unsigned long long)>:
c000dbfa:	55                   	push   ebp
c000dbfb:	57                   	push   edi
c000dbfc:	56                   	push   esi
c000dbfd:	53                   	push   ebx
c000dbfe:	83 ec 1c             	sub    esp,0x1c
c000dc01:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dc05:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dc09:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dc0d:	6a 00                	push   0x0
c000dc0f:	68 80 51 01 00       	push   0x15180
c000dc14:	55                   	push   ebp
c000dc15:	57                   	push   edi
c000dc16:	e8 19 33 01 00       	call   c0020f34 <__udivdi3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dc24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc28:	6a 00                	push   0x0
c000dc2a:	68 80 51 01 00       	push   0x15180
c000dc2f:	55                   	push   ebp
c000dc30:	57                   	push   edi
c000dc31:	bf 10 0e 00 00       	mov    edi,0xe10
c000dc36:	e8 f9 33 01 00       	call   c0021034 <__umoddi3>
c000dc3b:	83 c4 10             	add    esp,0x10
c000dc3e:	99                   	cdq    
c000dc3f:	f7 ff                	idiv   edi
c000dc41:	bf 3c 00 00 00       	mov    edi,0x3c
c000dc46:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dc49:	89 d0                	mov    eax,edx
c000dc4b:	99                   	cdq    
c000dc4c:	f7 ff                	idiv   edi
c000dc4e:	85 db                	test   ebx,ebx
c000dc50:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000dc53:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000dc56:	79 11                	jns    c000dc69 <secondsToDatetime(unsigned long long)+0x6f>
c000dc58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc5c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dc62:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dc67:	eb 07                	jmp    c000dc70 <secondsToDatetime(unsigned long long)+0x76>
c000dc69:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dc6e:	89 d8                	mov    eax,ebx
c000dc70:	bf b4 05 00 00       	mov    edi,0x5b4
c000dc75:	99                   	cdq    
c000dc76:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000dc7b:	f7 f9                	idiv   ecx
c000dc7d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000dc82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc86:	31 d2                	xor    edx,edx
c000dc88:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000dc90:	01 c3                	add    ebx,eax
c000dc92:	89 d8                	mov    eax,ebx
c000dc94:	f7 f1                	div    ecx
c000dc96:	31 d2                	xor    edx,edx
c000dc98:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000dc9b:	89 d8                	mov    eax,ebx
c000dc9d:	f7 f7                	div    edi
c000dc9f:	31 d2                	xor    edx,edx
c000dca1:	29 c1                	sub    ecx,eax
c000dca3:	89 d8                	mov    eax,ebx
c000dca5:	f7 f5                	div    ebp
c000dca7:	bd 6d 01 00 00       	mov    ebp,0x16d
c000dcac:	29 c1                	sub    ecx,eax
c000dcae:	31 d2                	xor    edx,edx
c000dcb0:	89 c8                	mov    eax,ecx
c000dcb2:	f7 f5                	div    ebp
c000dcb4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000dcb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dcbd:	31 d2                	xor    edx,edx
c000dcbf:	89 c8                	mov    eax,ecx
c000dcc1:	f7 f5                	div    ebp
c000dcc3:	31 d2                	xor    edx,edx
c000dcc5:	01 c3                	add    ebx,eax
c000dcc7:	89 c8                	mov    eax,ecx
c000dcc9:	f7 f7                	div    edi
c000dccb:	bf 99 00 00 00       	mov    edi,0x99
c000dcd0:	29 c3                	sub    ebx,eax
c000dcd2:	31 d2                	xor    edx,edx
c000dcd4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000dcdc:	29 c3                	sub    ebx,eax
c000dcde:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dce1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000dce4:	bb 05 00 00 00       	mov    ebx,0x5
c000dce9:	83 c1 02             	add    ecx,0x2
c000dcec:	89 c8                	mov    eax,ecx
c000dcee:	f7 f7                	div    edi
c000dcf0:	31 d2                	xor    edx,edx
c000dcf2:	89 c7                	mov    edi,eax
c000dcf4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000dcfa:	83 c0 02             	add    eax,0x2
c000dcfd:	f7 f3                	div    ebx
c000dcff:	89 eb                	mov    ebx,ebp
c000dd01:	29 c3                	sub    ebx,eax
c000dd03:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000dd09:	88 1e                	mov    BYTE PTR [esi],bl
c000dd0b:	19 c0                	sbb    eax,eax
c000dd0d:	31 d2                	xor    edx,edx
c000dd0f:	83 e0 0c             	and    eax,0xc
c000dd12:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000dd16:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000dd1e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dd22:	83 f9 01             	cmp    ecx,0x1
c000dd25:	0f 96 c2             	setbe  dl
c000dd28:	41                   	inc    ecx
c000dd29:	01 d0                	add    eax,edx
c000dd2b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000dd2e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000dd32:	83 c4 1c             	add    esp,0x1c
c000dd35:	89 f0                	mov    eax,esi
c000dd37:	5b                   	pop    ebx
c000dd38:	5e                   	pop    esi
c000dd39:	5f                   	pop    edi
c000dd3a:	5d                   	pop    ebp
c000dd3b:	c2 04 00             	ret    0x4

c000dd3e <Clock::timeInDatetimeLocal()>:
c000dd3e:	53                   	push   ebx
c000dd3f:	83 ec 14             	sub    esp,0x14
c000dd42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dd46:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dd4a:	e8 83 fc ff ff       	call   c000d9d2 <Clock::timeInSecondsLocal()>
c000dd4f:	83 c4 0c             	add    esp,0xc
c000dd52:	52                   	push   edx
c000dd53:	50                   	push   eax
c000dd54:	53                   	push   ebx
c000dd55:	e8 a0 fe ff ff       	call   c000dbfa <secondsToDatetime(unsigned long long)>
c000dd5a:	89 d8                	mov    eax,ebx
c000dd5c:	83 c4 14             	add    esp,0x14
c000dd5f:	5b                   	pop    ebx
c000dd60:	c2 04 00             	ret    0x4
c000dd63:	90                   	nop

c000dd64 <Device::hibernate()>:
c000dd64:	c3                   	ret    
c000dd65:	90                   	nop

c000dd66 <Device::wake()>:
c000dd66:	c3                   	ret    
c000dd67:	90                   	nop

c000dd68 <Device::detect()>:
c000dd68:	c3                   	ret    
c000dd69:	90                   	nop

c000dd6a <Device::disableLegacy()>:
c000dd6a:	c3                   	ret    
c000dd6b:	90                   	nop

c000dd6c <Device::powerSaving(PowerSavingLevel)>:
c000dd6c:	c3                   	ret    
c000dd6d:	90                   	nop

c000dd6e <DriverlessDevice::close(int, int, void*)>:
c000dd6e:	31 c0                	xor    eax,eax
c000dd70:	c3                   	ret    
c000dd71:	90                   	nop

c000dd72 <DriverlessDevice::detect()>:
c000dd72:	c3                   	ret    
c000dd73:	90                   	nop

c000dd74 <DriverlessDevice::open(int, int, void*)>:
c000dd74:	83 ec 18             	sub    esp,0x18
c000dd77:	68 30 33 02 c0       	push   0xc0023330
c000dd7c:	e8 b4 65 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000dd81:	83 c8 ff             	or     eax,0xffffffff
c000dd84:	83 c4 1c             	add    esp,0x1c
c000dd87:	c3                   	ret    

c000dd88 <Device::~Device()>:
c000dd88:	ba 90 33 02 c0       	mov    edx,0xc0023390
c000dd8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd91:	89 10                	mov    DWORD PTR [eax],edx
c000dd93:	90                   	nop
c000dd94:	c3                   	ret    
c000dd95:	90                   	nop

c000dd96 <Device::~Device()>:
c000dd96:	83 ec 0c             	sub    esp,0xc
c000dd99:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd9d:	e8 e6 ff ff ff       	call   c000dd88 <Device::~Device()>
c000dda2:	83 c4 04             	add    esp,0x4
c000dda5:	83 ec 08             	sub    esp,0x8
c000dda8:	68 58 01 00 00       	push   0x158
c000ddad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddb1:	e8 dc eb ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c000ddb6:	83 c4 10             	add    esp,0x10
c000ddb9:	83 c4 0c             	add    esp,0xc
c000ddbc:	c3                   	ret    
c000ddbd:	90                   	nop

c000ddbe <Device::findAndLoadDriver()>:
c000ddbe:	c7 44 24 04 4e 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc002334e
c000ddc6:	e9 a8 ec ff ff       	jmp    c000ca73 <Dbg::kprintf(char const*, ...)>
c000ddcb:	90                   	nop

c000ddcc <Device::preOpenPCI(PCIDeviceInfo)>:
c000ddcc:	57                   	push   edi
c000ddcd:	b9 09 00 00 00       	mov    ecx,0x9
c000ddd2:	56                   	push   esi
c000ddd3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ddd7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000dddb:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000dde5:	81 c7 18 01 00 00    	add    edi,0x118
c000ddeb:	fc                   	cld    
c000ddec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ddee:	5e                   	pop    esi
c000ddef:	5f                   	pop    edi
c000ddf0:	c3                   	ret    
c000ddf1:	90                   	nop

c000ddf2 <Device::preOpenACPI(void*, char*, char*)>:
c000ddf2:	57                   	push   edi
c000ddf3:	b9 1e 00 00 00       	mov    ecx,0x1e
c000ddf8:	56                   	push   esi
c000ddf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddfd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de01:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000de0b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000de11:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000de17:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000de1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de1d:	b9 0e 00 00 00       	mov    ecx,0xe
c000de22:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000de28:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000de2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de2e:	5e                   	pop    esi
c000de2f:	5f                   	pop    edi
c000de30:	c3                   	ret    
c000de31:	90                   	nop

c000de32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000de32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de36:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000de3b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000de42:	75 0b                	jne    c000de4f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000de44:	8b 00                	mov    eax,DWORD PTR [eax]
c000de46:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de4a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000de4d:	eb 1e                	jmp    c000de6d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000de4f:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000de54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000de5a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000de60:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de62:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000de6a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000de6d:	ff e0                	jmp    eax
c000de6f:	90                   	nop

c000de70 <Device::getParent()>:
c000de70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de74:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000de7a:	c3                   	ret    
c000de7b:	90                   	nop

c000de7c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000de7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de80:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000de85:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000de8c:	75 0b                	jne    c000de99 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000de8e:	8b 00                	mov    eax,DWORD PTR [eax]
c000de90:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de94:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de97:	eb 1e                	jmp    c000deb7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000de99:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000de9e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dea4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000deaa:	8b 08                	mov    ecx,DWORD PTR [eax]
c000deac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000deb0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000deb4:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000deb7:	ff e0                	jmp    eax
c000deb9:	90                   	nop

c000deba <Device::addChild(Device*)>:
c000deba:	53                   	push   ebx
c000debb:	83 ec 08             	sub    esp,0x8
c000debe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dec2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dec6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000decc:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ded2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ded4:	85 d2                	test   edx,edx
c000ded6:	74 04                	je     c000dedc <Device::addChild(Device*)+0x22>
c000ded8:	89 d3                	mov    ebx,edx
c000deda:	eb f6                	jmp    c000ded2 <Device::addChild(Device*)+0x18>
c000dedc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000dedf:	83 ec 0c             	sub    esp,0xc
c000dee2:	6a 08                	push   0x8
c000dee4:	e8 da ba ff ff       	call   c00099c3 <malloc>
c000dee9:	89 03                	mov    DWORD PTR [ebx],eax
c000deeb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000def1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000def8:	83 c4 18             	add    esp,0x18
c000defb:	5b                   	pop    ebx
c000defc:	c3                   	ret    
c000defd:	90                   	nop

c000defe <Device::removeAllChildren()>:
c000defe:	56                   	push   esi
c000deff:	53                   	push   ebx
c000df00:	52                   	push   edx
c000df01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df05:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000df0b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df0e:	74 17                	je     c000df27 <Device::removeAllChildren()+0x29>
c000df10:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df13:	85 c0                	test   eax,eax
c000df15:	74 0c                	je     c000df23 <Device::removeAllChildren()+0x25>
c000df17:	83 ec 0c             	sub    esp,0xc
c000df1a:	8b 10                	mov    edx,DWORD PTR [eax]
c000df1c:	50                   	push   eax
c000df1d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000df20:	83 c4 10             	add    esp,0x10
c000df23:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df25:	eb e4                	jmp    c000df0b <Device::removeAllChildren()+0xd>
c000df27:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000df33:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000df40:	58                   	pop    eax
c000df41:	5b                   	pop    ebx
c000df42:	5e                   	pop    esi
c000df43:	c3                   	ret    

c000df44 <Device::hibernateAll()>:
c000df44:	53                   	push   ebx
c000df45:	83 ec 14             	sub    esp,0x14
c000df48:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df4e:	53                   	push   ebx
c000df4f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000df52:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df58:	83 c4 10             	add    esp,0x10
c000df5b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df5e:	74 0f                	je     c000df6f <Device::hibernateAll()+0x2b>
c000df60:	83 ec 0c             	sub    esp,0xc
c000df63:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df66:	e8 d9 ff ff ff       	call   c000df44 <Device::hibernateAll()>
c000df6b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df6d:	eb e9                	jmp    c000df58 <Device::hibernateAll()+0x14>
c000df6f:	83 c4 08             	add    esp,0x8
c000df72:	5b                   	pop    ebx
c000df73:	c3                   	ret    

c000df74 <Device::wakeAll()>:
c000df74:	53                   	push   ebx
c000df75:	83 ec 14             	sub    esp,0x14
c000df78:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df7e:	53                   	push   ebx
c000df7f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000df82:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df88:	83 c4 10             	add    esp,0x10
c000df8b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df8e:	74 0f                	je     c000df9f <Device::wakeAll()+0x2b>
c000df90:	83 ec 0c             	sub    esp,0xc
c000df93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df96:	e8 d9 ff ff ff       	call   c000df74 <Device::wakeAll()>
c000df9b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df9d:	eb e9                	jmp    c000df88 <Device::wakeAll()+0x14>
c000df9f:	83 c4 08             	add    esp,0x8
c000dfa2:	5b                   	pop    ebx
c000dfa3:	c3                   	ret    

c000dfa4 <Device::detectAll()>:
c000dfa4:	53                   	push   ebx
c000dfa5:	83 ec 14             	sub    esp,0x14
c000dfa8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfac:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfae:	53                   	push   ebx
c000dfaf:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000dfb2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfb8:	83 c4 10             	add    esp,0x10
c000dfbb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfbe:	74 0f                	je     c000dfcf <Device::detectAll()+0x2b>
c000dfc0:	83 ec 0c             	sub    esp,0xc
c000dfc3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfc6:	e8 d9 ff ff ff       	call   c000dfa4 <Device::detectAll()>
c000dfcb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfcd:	eb e9                	jmp    c000dfb8 <Device::detectAll()+0x14>
c000dfcf:	83 c4 08             	add    esp,0x8
c000dfd2:	5b                   	pop    ebx
c000dfd3:	c3                   	ret    

c000dfd4 <Device::disableLegacyAll()>:
c000dfd4:	53                   	push   ebx
c000dfd5:	83 ec 14             	sub    esp,0x14
c000dfd8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfde:	53                   	push   ebx
c000dfdf:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000dfe2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfe8:	83 c4 10             	add    esp,0x10
c000dfeb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfee:	74 0f                	je     c000dfff <Device::disableLegacyAll()+0x2b>
c000dff0:	83 ec 0c             	sub    esp,0xc
c000dff3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dff6:	e8 d9 ff ff ff       	call   c000dfd4 <Device::disableLegacyAll()>
c000dffb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dffd:	eb e9                	jmp    c000dfe8 <Device::disableLegacyAll()+0x14>
c000dfff:	83 c4 08             	add    esp,0x8
c000e002:	5b                   	pop    ebx
c000e003:	c3                   	ret    

c000e004 <Device::loadDriversForAll()>:
c000e004:	53                   	push   ebx
c000e005:	83 ec 08             	sub    esp,0x8
c000e008:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e00c:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e013:	75 0c                	jne    c000e021 <Device::loadDriversForAll()+0x1d>
c000e015:	83 ec 0c             	sub    esp,0xc
c000e018:	53                   	push   ebx
c000e019:	e8 a0 fd ff ff       	call   c000ddbe <Device::findAndLoadDriver()>
c000e01e:	83 c4 10             	add    esp,0x10
c000e021:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e027:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e02a:	74 12                	je     c000e03e <Device::loadDriversForAll()+0x3a>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e032:	e8 cd ff ff ff       	call   c000e004 <Device::loadDriversForAll()>
c000e037:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e039:	83 c4 10             	add    esp,0x10
c000e03c:	eb e9                	jmp    c000e027 <Device::loadDriversForAll()+0x23>
c000e03e:	83 c4 08             	add    esp,0x8
c000e041:	5b                   	pop    ebx
c000e042:	c3                   	ret    
c000e043:	90                   	nop

c000e044 <Device::closeAll()>:
c000e044:	53                   	push   ebx
c000e045:	83 ec 08             	sub    esp,0x8
c000e048:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e04c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e04e:	6a 00                	push   0x0
c000e050:	6a 00                	push   0x0
c000e052:	6a 00                	push   0x0
c000e054:	53                   	push   ebx
c000e055:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e058:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e05e:	83 c4 10             	add    esp,0x10
c000e061:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e064:	74 0f                	je     c000e075 <Device::closeAll()+0x31>
c000e066:	83 ec 0c             	sub    esp,0xc
c000e069:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e06c:	e8 d3 ff ff ff       	call   c000e044 <Device::closeAll()>
c000e071:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e073:	eb e9                	jmp    c000e05e <Device::closeAll()+0x1a>
c000e075:	83 c4 08             	add    esp,0x8
c000e078:	5b                   	pop    ebx
c000e079:	c3                   	ret    

c000e07a <Device::powerSavingAll(PowerSavingLevel)>:
c000e07a:	56                   	push   esi
c000e07b:	53                   	push   ebx
c000e07c:	83 ec 0c             	sub    esp,0xc
c000e07f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e083:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e087:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e089:	56                   	push   esi
c000e08a:	53                   	push   ebx
c000e08b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e08e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e094:	83 c4 10             	add    esp,0x10
c000e097:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e09a:	74 0f                	je     c000e0ab <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e09c:	52                   	push   edx
c000e09d:	52                   	push   edx
c000e09e:	56                   	push   esi
c000e09f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0a2:	e8 d3 ff ff ff       	call   c000e07a <Device::powerSavingAll(PowerSavingLevel)>
c000e0a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e0a9:	eb e9                	jmp    c000e094 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e0ab:	58                   	pop    eax
c000e0ac:	5b                   	pop    ebx
c000e0ad:	5e                   	pop    esi
c000e0ae:	c3                   	ret    
c000e0af:	90                   	nop

c000e0b0 <Device::setName(char const*)>:
c000e0b0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e0b8:	e9 83 26 ff ff       	jmp    c0000740 <strcpy>
c000e0bd:	90                   	nop

c000e0be <Device::Device(char const*)>:
c000e0be:	83 ec 1c             	sub    esp,0x1c
c000e0c1:	ba 90 33 02 c0       	mov    edx,0xc0023390
c000e0c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0ca:	89 10                	mov    DWORD PTR [eax],edx
c000e0cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0d0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e0da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0de:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e0e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0ec:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e0f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0fa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e104:	83 ec 08             	sub    esp,0x8
c000e107:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e10b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e10f:	e8 9c ff ff ff       	call   c000e0b0 <Device::setName(char const*)>
c000e114:	83 c4 10             	add    esp,0x10
c000e117:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e11f:	83 ec 0c             	sub    esp,0xc
c000e122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e126:	e8 98 b8 ff ff       	call   c00099c3 <malloc>
c000e12b:	83 c4 10             	add    esp,0x10
c000e12e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e134:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e13b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e13f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e149:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e14f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e155:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e159:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e15f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e166:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e16a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e171:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e175:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e17c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e180:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e18a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e18e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e198:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e19c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e1a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1aa:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e1b4:	90                   	nop
c000e1b5:	83 c4 1c             	add    esp,0x1c
c000e1b8:	c3                   	ret    
c000e1b9:	90                   	nop

c000e1ba <Device::getName()>:
c000e1ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1be:	05 d0 00 00 00       	add    eax,0xd0
c000e1c3:	c3                   	ret    

c000e1c4 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e1c4:	83 ec 0c             	sub    esp,0xc
c000e1c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1cb:	83 ec 08             	sub    esp,0x8
c000e1ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d2:	50                   	push   eax
c000e1d3:	e8 e6 fe ff ff       	call   c000e0be <Device::Device(char const*)>
c000e1d8:	83 c4 10             	add    esp,0x10
c000e1db:	ba bc 33 02 c0       	mov    edx,0xc00233bc
c000e1e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1e4:	89 10                	mov    DWORD PTR [eax],edx
c000e1e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1ea:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e1f4:	90                   	nop
c000e1f5:	83 c4 0c             	add    esp,0xc
c000e1f8:	c3                   	ret    
c000e1f9:	90                   	nop

c000e1fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e1fa:	57                   	push   edi
c000e1fb:	56                   	push   esi
c000e1fc:	53                   	push   ebx
c000e1fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e201:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e205:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e209:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e20f:	75 0c                	jne    c000e21d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e211:	52                   	push   edx
c000e212:	52                   	push   edx
c000e213:	53                   	push   ebx
c000e214:	56                   	push   esi
c000e215:	e8 cc 31 01 00       	call   c00213e6 <LinkedList<Device>::addElement(Device*)>
c000e21a:	83 c4 10             	add    esp,0x10
c000e21d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e223:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e226:	74 12                	je     c000e23a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e228:	50                   	push   eax
c000e229:	57                   	push   edi
c000e22a:	56                   	push   esi
c000e22b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e22e:	e8 c7 ff ff ff       	call   c000e1fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e233:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e235:	83 c4 10             	add    esp,0x10
c000e238:	eb e9                	jmp    c000e223 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e23a:	5b                   	pop    ebx
c000e23b:	5e                   	pop    esi
c000e23c:	5f                   	pop    edi
c000e23d:	c3                   	ret    

c000e23e <getDevicesOfType(DeviceType)>:
c000e23e:	53                   	push   ebx
c000e23f:	83 ec 14             	sub    esp,0x14
c000e242:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e246:	53                   	push   ebx
c000e247:	e8 76 32 01 00       	call   c00214c2 <LinkedList<Device>::LinkedList()>
c000e24c:	83 c4 0c             	add    esp,0xc
c000e24f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e253:	53                   	push   ebx
c000e254:	ff 35 08 64 02 c0    	push   DWORD PTR ds:0xc0026408
c000e25a:	e8 9b ff ff ff       	call   c000e1fa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e25f:	89 d8                	mov    eax,ebx
c000e261:	83 c4 18             	add    esp,0x18
c000e264:	5b                   	pop    ebx
c000e265:	c2 04 00             	ret    0x4

c000e268 <HardDiskController::HardDiskController(char const*)>:
c000e268:	83 ec 0c             	sub    esp,0xc
c000e26b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e26f:	83 ec 08             	sub    esp,0x8
c000e272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e276:	50                   	push   eax
c000e277:	e8 42 fe ff ff       	call   c000e0be <Device::Device(char const*)>
c000e27c:	83 c4 10             	add    esp,0x10
c000e27f:	ba e8 33 02 c0       	mov    edx,0xc00233e8
c000e284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e288:	89 10                	mov    DWORD PTR [eax],edx
c000e28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e28e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e298:	90                   	nop
c000e299:	83 c4 0c             	add    esp,0xc
c000e29c:	c3                   	ret    
c000e29d:	90                   	nop
c000e29e:	66 90                	xchg   ax,ax

c000e2a0 <HardDiskController::~HardDiskController()>:
c000e2a0:	83 ec 0c             	sub    esp,0xc
c000e2a3:	ba e8 33 02 c0       	mov    edx,0xc00233e8
c000e2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2ac:	89 10                	mov    DWORD PTR [eax],edx
c000e2ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2b2:	83 ec 0c             	sub    esp,0xc
c000e2b5:	50                   	push   eax
c000e2b6:	e8 cd fa ff ff       	call   c000dd88 <Device::~Device()>
c000e2bb:	83 c4 10             	add    esp,0x10
c000e2be:	90                   	nop
c000e2bf:	83 c4 0c             	add    esp,0xc
c000e2c2:	c3                   	ret    
c000e2c3:	90                   	nop

c000e2c4 <HardDiskController::~HardDiskController()>:
c000e2c4:	83 ec 0c             	sub    esp,0xc
c000e2c7:	83 ec 0c             	sub    esp,0xc
c000e2ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ce:	e8 cd ff ff ff       	call   c000e2a0 <HardDiskController::~HardDiskController()>
c000e2d3:	83 c4 10             	add    esp,0x10
c000e2d6:	83 ec 08             	sub    esp,0x8
c000e2d9:	68 58 01 00 00       	push   0x158
c000e2de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2e2:	e8 ab e6 ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	83 c4 0c             	add    esp,0xc
c000e2ed:	c3                   	ret    

c000e2ee <PhysicalDisk::eject()>:
c000e2ee:	83 c8 ff             	or     eax,0xffffffff
c000e2f1:	c3                   	ret    

c000e2f2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e2f2:	83 ec 0c             	sub    esp,0xc
c000e2f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f9:	83 ec 08             	sub    esp,0x8
c000e2fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e300:	50                   	push   eax
c000e301:	e8 b8 fd ff ff       	call   c000e0be <Device::Device(char const*)>
c000e306:	83 c4 10             	add    esp,0x10
c000e309:	ba 14 34 02 c0       	mov    edx,0xc0023414
c000e30e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e312:	89 10                	mov    DWORD PTR [eax],edx
c000e314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e318:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e31f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e323:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e340:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e354:	90                   	nop
c000e355:	83 c4 0c             	add    esp,0xc
c000e358:	c3                   	ret    
c000e359:	90                   	nop

c000e35a <PhysicalDisk::startCache()>:
c000e35a:	56                   	push   esi
c000e35b:	53                   	push   ebx
c000e35c:	83 ec 10             	sub    esp,0x10
c000e35f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e363:	6a 44                	push   0x44
c000e365:	e8 59 b6 ff ff       	call   c00099c3 <malloc>
c000e36a:	89 c6                	mov    esi,eax
c000e36c:	58                   	pop    eax
c000e36d:	5a                   	pop    edx
c000e36e:	53                   	push   ebx
c000e36f:	56                   	push   esi
c000e370:	e8 2f 26 00 00       	call   c00109a4 <VCache::VCache(PhysicalDisk*)>
c000e375:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e37b:	83 c4 14             	add    esp,0x14
c000e37e:	5b                   	pop    ebx
c000e37f:	5e                   	pop    esi
c000e380:	c3                   	ret    
c000e381:	90                   	nop

c000e382 <PhysicalDisk::~PhysicalDisk()>:
c000e382:	83 ec 0c             	sub    esp,0xc
c000e385:	ba 14 34 02 c0       	mov    edx,0xc0023414
c000e38a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e38e:	89 10                	mov    DWORD PTR [eax],edx
c000e390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e394:	83 ec 0c             	sub    esp,0xc
c000e397:	50                   	push   eax
c000e398:	e8 eb f9 ff ff       	call   c000dd88 <Device::~Device()>
c000e39d:	83 c4 10             	add    esp,0x10
c000e3a0:	90                   	nop
c000e3a1:	83 c4 0c             	add    esp,0xc
c000e3a4:	c3                   	ret    
c000e3a5:	90                   	nop

c000e3a6 <PhysicalDisk::~PhysicalDisk()>:
c000e3a6:	83 ec 0c             	sub    esp,0xc
c000e3a9:	83 ec 0c             	sub    esp,0xc
c000e3ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b0:	e8 cd ff ff ff       	call   c000e382 <PhysicalDisk::~PhysicalDisk()>
c000e3b5:	83 c4 10             	add    esp,0x10
c000e3b8:	83 ec 08             	sub    esp,0x8
c000e3bb:	68 6c 01 00 00       	push   0x16c
c000e3c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3c4:	e8 c9 e5 ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c000e3c9:	83 c4 10             	add    esp,0x10
c000e3cc:	83 c4 0c             	add    esp,0xc
c000e3cf:	c3                   	ret    

c000e3d0 <FPU::FPU(char const*)>:
c000e3d0:	83 ec 0c             	sub    esp,0xc
c000e3d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d7:	83 ec 08             	sub    esp,0x8
c000e3da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3de:	50                   	push   eax
c000e3df:	e8 da fc ff ff       	call   c000e0be <Device::Device(char const*)>
c000e3e4:	83 c4 10             	add    esp,0x10
c000e3e7:	ba 58 34 02 c0       	mov    edx,0xc0023458
c000e3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f0:	89 10                	mov    DWORD PTR [eax],edx
c000e3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e400:	90                   	nop
c000e401:	83 c4 0c             	add    esp,0xc
c000e404:	c3                   	ret    
c000e405:	90                   	nop
c000e406:	66 90                	xchg   ax,ax

c000e408 <FPU::~FPU()>:
c000e408:	83 ec 0c             	sub    esp,0xc
c000e40b:	ba 58 34 02 c0       	mov    edx,0xc0023458
c000e410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e414:	89 10                	mov    DWORD PTR [eax],edx
c000e416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41a:	83 ec 0c             	sub    esp,0xc
c000e41d:	50                   	push   eax
c000e41e:	e8 65 f9 ff ff       	call   c000dd88 <Device::~Device()>
c000e423:	83 c4 10             	add    esp,0x10
c000e426:	90                   	nop
c000e427:	83 c4 0c             	add    esp,0xc
c000e42a:	c3                   	ret    
c000e42b:	90                   	nop

c000e42c <FPU::~FPU()>:
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	83 ec 0c             	sub    esp,0xc
c000e432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e436:	e8 cd ff ff ff       	call   c000e408 <FPU::~FPU()>
c000e43b:	83 c4 10             	add    esp,0x10
c000e43e:	83 ec 08             	sub    esp,0x8
c000e441:	68 58 01 00 00       	push   0x158
c000e446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e44a:	e8 43 e5 ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c000e44f:	83 c4 10             	add    esp,0x10
c000e452:	83 c4 0c             	add    esp,0xc
c000e455:	c3                   	ret    

c000e456 <setupFPU()>:
c000e456:	53                   	push   ebx
c000e457:	83 ec 08             	sub    esp,0x8
c000e45a:	8b 15 08 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026408
c000e460:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e467:	74 1b                	je     c000e484 <setupFPU()+0x2e>
c000e469:	83 ec 0c             	sub    esp,0xc
c000e46c:	68 58 01 00 00       	push   0x158
c000e471:	e8 4d b5 ff ff       	call   c00099c3 <malloc>
c000e476:	89 c3                	mov    ebx,eax
c000e478:	89 04 24             	mov    DWORD PTR [esp],eax
c000e47b:	e8 48 16 01 00       	call   c001fac8 <AVX::AVX()>
c000e480:	eb 62                	jmp    c000e4e4 <setupFPU()+0x8e>
c000e482:	66 90                	xchg   ax,ax
c000e484:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e48a:	84 c0                	test   al,al
c000e48c:	79 1a                	jns    c000e4a8 <setupFPU()+0x52>
c000e48e:	83 ec 0c             	sub    esp,0xc
c000e491:	68 58 01 00 00       	push   0x158
c000e496:	e8 28 b5 ff ff       	call   c00099c3 <malloc>
c000e49b:	89 c3                	mov    ebx,eax
c000e49d:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4a0:	e8 53 17 01 00       	call   c001fbf8 <SSE::SSE()>
c000e4a5:	eb 3d                	jmp    c000e4e4 <setupFPU()+0x8e>
c000e4a7:	90                   	nop
c000e4a8:	a8 20                	test   al,0x20
c000e4aa:	74 1c                	je     c000e4c8 <setupFPU()+0x72>
c000e4ac:	83 ec 0c             	sub    esp,0xc
c000e4af:	68 58 01 00 00       	push   0x158
c000e4b4:	e8 0a b5 ff ff       	call   c00099c3 <malloc>
c000e4b9:	89 c3                	mov    ebx,eax
c000e4bb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4be:	e8 99 16 01 00       	call   c001fb5c <MMX::MMX()>
c000e4c3:	eb 1f                	jmp    c000e4e4 <setupFPU()+0x8e>
c000e4c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e4c8:	a8 10                	test   al,0x10
c000e4ca:	74 20                	je     c000e4ec <setupFPU()+0x96>
c000e4cc:	83 ec 0c             	sub    esp,0xc
c000e4cf:	68 58 01 00 00       	push   0x158
c000e4d4:	e8 ea b4 ff ff       	call   c00099c3 <malloc>
c000e4d9:	89 c3                	mov    ebx,eax
c000e4db:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4de:	e8 a9 17 01 00       	call   c001fc8c <x87::x87()>
c000e4e3:	90                   	nop
c000e4e4:	83 c4 10             	add    esp,0x10
c000e4e7:	eb 27                	jmp    c000e510 <setupFPU()+0xba>
c000e4e9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4ec:	83 e0 ef             	and    eax,0xffffffef
c000e4ef:	83 ec 0c             	sub    esp,0xc
c000e4f2:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e4f8:	68 44 34 02 c0       	push   0xc0023444
c000e4fd:	e8 71 e5 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000e502:	0f 20 c0             	mov    eax,cr0
c000e505:	83 c8 04             	or     eax,0x4
c000e508:	0f 22 c0             	mov    cr0,eax
c000e50b:	31 db                	xor    ebx,ebx
c000e50d:	83 c4 10             	add    esp,0x10
c000e510:	89 d8                	mov    eax,ebx
c000e512:	83 c4 08             	add    esp,0x8
c000e515:	5b                   	pop    ebx
c000e516:	c3                   	ret    
c000e517:	90                   	nop

c000e518 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e518:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e51c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e520:	c1 e0 04             	shl    eax,0x4
c000e523:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e527:	8d 50 10             	lea    edx,[eax+0x10]
c000e52a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e530:	74 08                	je     c000e53a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e532:	83 c0 04             	add    eax,0x4
c000e535:	39 d0                	cmp    eax,edx
c000e537:	75 f1                	jne    c000e52a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e539:	c3                   	ret    
c000e53a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e544:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e54e:	eb e2                	jmp    c000e532 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e550 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e550:	57                   	push   edi
c000e551:	31 c0                	xor    eax,eax
c000e553:	56                   	push   esi
c000e554:	53                   	push   ebx
c000e555:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e559:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e55d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e561:	89 da                	mov    edx,ebx
c000e563:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e567:	c1 e2 04             	shl    edx,0x4
c000e56a:	01 ca                	add    edx,ecx
c000e56c:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e574:	74 16                	je     c000e58c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e576:	40                   	inc    eax
c000e577:	83 f8 04             	cmp    eax,0x4
c000e57a:	75 f0                	jne    c000e56c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e57c:	c7 44 24 10 88 34 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023488
c000e584:	5b                   	pop    ebx
c000e585:	5e                   	pop    esi
c000e586:	5f                   	pop    edi
c000e587:	e9 a9 5d 00 00       	jmp    c0014335 <Krnl::panic(char const*)>
c000e58c:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e58f:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e592:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e598:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e59e:	5b                   	pop    ebx
c000e59f:	5e                   	pop    esi
c000e5a0:	5f                   	pop    edi
c000e5a1:	c3                   	ret    

c000e5a2 <doubleFault(regs*, void*)>:
c000e5a2:	55                   	push   ebp
c000e5a3:	89 e5                	mov    ebp,esp
c000e5a5:	83 ec 08             	sub    esp,0x8
c000e5a8:	83 ec 0c             	sub    esp,0xc
c000e5ab:	68 95 34 02 c0       	push   0xc0023495
c000e5b0:	e8 80 5d 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000e5b5:	83 c4 10             	add    esp,0x10
c000e5b8:	90                   	nop
c000e5b9:	c9                   	leave  
c000e5ba:	c3                   	ret    
c000e5bb:	90                   	nop

c000e5bc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e5bc:	56                   	push   esi
c000e5bd:	53                   	push   ebx
c000e5be:	50                   	push   eax
c000e5bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e5c3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e5c7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e5cc:	75 35                	jne    c000e603 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e5ce:	8d 43 20             	lea    eax,[ebx+0x20]
c000e5d1:	31 d2                	xor    edx,edx
c000e5d3:	89 c1                	mov    ecx,eax
c000e5d5:	c1 e1 04             	shl    ecx,0x4
c000e5d8:	01 f1                	add    ecx,esi
c000e5da:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e5e2:	74 3e                	je     c000e622 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e5e4:	42                   	inc    edx
c000e5e5:	83 fa 04             	cmp    edx,0x4
c000e5e8:	75 f0                	jne    c000e5da <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e5ea:	83 ec 0c             	sub    esp,0xc
c000e5ed:	68 af 34 02 c0       	push   0xc00234af
c000e5f2:	e8 3e 5d 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000e5f7:	83 c4 10             	add    esp,0x10
c000e5fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e5ff:	5a                   	pop    edx
c000e600:	5b                   	pop    ebx
c000e601:	5e                   	pop    esi
c000e602:	c3                   	ret    
c000e603:	83 ec 0c             	sub    esp,0xc
c000e606:	56                   	push   esi
c000e607:	e8 ae fb ff ff       	call   c000e1ba <Device::getName()>
c000e60c:	83 c4 10             	add    esp,0x10
c000e60f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e612:	75 ba                	jne    c000e5ce <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e614:	83 fb 0f             	cmp    ebx,0xf
c000e617:	7f 29                	jg     c000e642 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e619:	0f b6 9b 00 5b 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffda500]
c000e620:	eb ac                	jmp    c000e5ce <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e622:	8d 04 82             	lea    eax,[edx+eax*4]
c000e625:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e629:	8d 04 86             	lea    eax,[esi+eax*4]
c000e62c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e632:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e636:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e63c:	89 d8                	mov    eax,ebx
c000e63e:	5a                   	pop    edx
c000e63f:	5b                   	pop    ebx
c000e640:	5e                   	pop    esi
c000e641:	c3                   	ret    
c000e642:	83 ec 0c             	sub    esp,0xc
c000e645:	68 a2 34 02 c0       	push   0xc00234a2
c000e64a:	e8 e6 5c 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000e64f:	83 c4 10             	add    esp,0x10
c000e652:	e9 77 ff ff ff       	jmp    c000e5ce <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e657:	90                   	nop

c000e658 <InterruptController::clearAllHandlers(int, bool)>:
c000e658:	56                   	push   esi
c000e659:	53                   	push   ebx
c000e65a:	52                   	push   edx
c000e65b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e65f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e663:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e668:	75 61                	jne    c000e6cb <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e66a:	8d 46 20             	lea    eax,[esi+0x20]
c000e66d:	c1 e6 04             	shl    esi,0x4
c000e670:	c1 e0 04             	shl    eax,0x4
c000e673:	01 de                	add    esi,ebx
c000e675:	01 d8                	add    eax,ebx
c000e677:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e681:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e68b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e695:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e69f:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e6a9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e6b3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e6bd:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e6c7:	58                   	pop    eax
c000e6c8:	5b                   	pop    ebx
c000e6c9:	5e                   	pop    esi
c000e6ca:	c3                   	ret    
c000e6cb:	83 ec 0c             	sub    esp,0xc
c000e6ce:	53                   	push   ebx
c000e6cf:	e8 e6 fa ff ff       	call   c000e1ba <Device::getName()>
c000e6d4:	83 c4 10             	add    esp,0x10
c000e6d7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e6da:	75 8e                	jne    c000e66a <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6dc:	83 fe 0f             	cmp    esi,0xf
c000e6df:	7f 09                	jg     c000e6ea <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e6e1:	0f b6 b6 00 5b 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda500]
c000e6e8:	eb 80                	jmp    c000e66a <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6ea:	83 ec 0c             	sub    esp,0xc
c000e6ed:	68 bc 34 02 c0       	push   0xc00234bc
c000e6f2:	e8 3e 5c 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000e6f7:	83 c4 10             	add    esp,0x10
c000e6fa:	e9 6b ff ff ff       	jmp    c000e66a <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6ff:	90                   	nop

c000e700 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e700:	56                   	push   esi
c000e701:	53                   	push   ebx
c000e702:	52                   	push   edx
c000e703:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e707:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e70b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e710:	75 3a                	jne    c000e74c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e712:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e716:	8d 50 20             	lea    edx,[eax+0x20]
c000e719:	c1 e2 04             	shl    edx,0x4
c000e71c:	8d 04 16             	lea    eax,[esi+edx*1]
c000e71f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e723:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e729:	74 0b                	je     c000e736 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e72b:	83 c0 04             	add    eax,0x4
c000e72e:	39 d0                	cmp    eax,edx
c000e730:	75 f1                	jne    c000e723 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e732:	58                   	pop    eax
c000e733:	5b                   	pop    ebx
c000e734:	5e                   	pop    esi
c000e735:	c3                   	ret    
c000e736:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e740:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e74a:	eb df                	jmp    c000e72b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000e74c:	83 ec 0c             	sub    esp,0xc
c000e74f:	56                   	push   esi
c000e750:	e8 65 fa ff ff       	call   c000e1ba <Device::getName()>
c000e755:	83 c4 10             	add    esp,0x10
c000e758:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e75b:	75 b5                	jne    c000e712 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e75d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000e762:	7f 11                	jg     c000e775 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000e764:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e768:	0f b6 80 00 5b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda500]
c000e76f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e773:	eb 9d                	jmp    c000e712 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e775:	83 ec 0c             	sub    esp,0xc
c000e778:	68 c9 34 02 c0       	push   0xc00234c9
c000e77d:	e8 b3 5b 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000e782:	83 c4 10             	add    esp,0x10
c000e785:	eb 8b                	jmp    c000e712 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000e787 <nmiHandler(regs*, void*)>:
c000e787:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000e78c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e790:	e9 f9 a9 ff ff       	jmp    c000918e <Computer::handleNMI()>

c000e795 <int_handler>:
c000e795:	55                   	push   ebp
c000e796:	57                   	push   edi
c000e797:	56                   	push   esi
c000e798:	53                   	push   ebx
c000e799:	83 ec 0c             	sub    esp,0xc
c000e79c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e7a0:	80 3d e4 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ee4,0x0
c000e7a7:	74 0b                	je     c000e7b4 <int_handler+0x1f>
c000e7a9:	fa                   	cli    
c000e7aa:	f4                   	hlt    
c000e7ab:	80 3d e4 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ee4,0x0
c000e7b2:	75 f5                	jne    c000e7a9 <int_handler+0x14>
c000e7b4:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000e7b9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000e7bc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e7c2:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000e7c8:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e7cb:	83 f8 17             	cmp    eax,0x17
c000e7ce:	77 13                	ja     c000e7e3 <int_handler+0x4e>
c000e7d0:	83 ec 08             	sub    esp,0x8
c000e7d3:	8b 17                	mov    edx,DWORD PTR [edi]
c000e7d5:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e7d8:	0f b6 c0             	movzx  eax,al
c000e7db:	50                   	push   eax
c000e7dc:	57                   	push   edi
c000e7dd:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000e7e0:	83 c4 10             	add    esp,0x10
c000e7e3:	83 c3 15             	add    ebx,0x15
c000e7e6:	c1 e3 04             	shl    ebx,0x4
c000e7e9:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000e7ed:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000e7f4:	31 db                	xor    ebx,ebx
c000e7f6:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e7fa:	85 c0                	test   eax,eax
c000e7fc:	74 13                	je     c000e811 <int_handler+0x7c>
c000e7fe:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000e801:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000e805:	74 1c                	je     c000e823 <int_handler+0x8e>
c000e807:	83 ec 08             	sub    esp,0x8
c000e80a:	52                   	push   edx
c000e80b:	56                   	push   esi
c000e80c:	ff d0                	call   eax
c000e80e:	83 c4 10             	add    esp,0x10
c000e811:	43                   	inc    ebx
c000e812:	83 fb 04             	cmp    ebx,0x4
c000e815:	75 df                	jne    c000e7f6 <int_handler+0x61>
c000e817:	83 c4 0c             	add    esp,0xc
c000e81a:	31 c0                	xor    eax,eax
c000e81c:	5b                   	pop    ebx
c000e81d:	31 d2                	xor    edx,edx
c000e81f:	5e                   	pop    esi
c000e820:	5f                   	pop    edi
c000e821:	5d                   	pop    ebp
c000e822:	c3                   	ret    
c000e823:	83 ec 08             	sub    esp,0x8
c000e826:	52                   	push   edx
c000e827:	56                   	push   esi
c000e828:	ff d0                	call   eax
c000e82a:	83 c4 10             	add    esp,0x10
c000e82d:	83 c4 0c             	add    esp,0xc
c000e830:	5b                   	pop    ebx
c000e831:	5e                   	pop    esi
c000e832:	5f                   	pop    edi
c000e833:	5d                   	pop    ebp
c000e834:	c3                   	ret    
c000e835:	90                   	nop

c000e836 <InterruptController::InterruptController(char const*)>:
c000e836:	83 ec 1c             	sub    esp,0x1c
c000e839:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e83d:	83 ec 08             	sub    esp,0x8
c000e840:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e844:	50                   	push   eax
c000e845:	e8 74 f8 ff ff       	call   c000e0be <Device::Device(char const*)>
c000e84a:	83 c4 10             	add    esp,0x10
c000e84d:	ba 80 37 02 c0       	mov    edx,0xc0023780
c000e852:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e856:	89 10                	mov    DWORD PTR [eax],edx
c000e858:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e85c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000e866:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e86e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e876:	7f 5e                	jg     c000e8d6 <InterruptController::InterruptController(char const*)+0xa0>
c000e878:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e880:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e885:	7f 49                	jg     c000e8d0 <InterruptController::InterruptController(char const*)+0x9a>
c000e887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e88b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e88f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e896:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e89a:	01 ca                	add    edx,ecx
c000e89c:	83 c2 54             	add    edx,0x54
c000e89f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e8a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8af:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e8b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e8ba:	01 ca                	add    edx,ecx
c000e8bc:	81 c2 54 04 00 00    	add    edx,0x454
c000e8c2:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e8ca:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000e8ce:	eb b0                	jmp    c000e880 <InterruptController::InterruptController(char const*)+0x4a>
c000e8d0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e8d4:	eb 98                	jmp    c000e86e <InterruptController::InterruptController(char const*)+0x38>
c000e8d6:	90                   	nop
c000e8d7:	83 c4 1c             	add    esp,0x1c
c000e8da:	c3                   	ret    
c000e8db:	90                   	nop

c000e8dc <InterruptController::~InterruptController()>:
c000e8dc:	83 ec 0c             	sub    esp,0xc
c000e8df:	ba 80 37 02 c0       	mov    edx,0xc0023780
c000e8e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e8:	89 10                	mov    DWORD PTR [eax],edx
c000e8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ee:	83 ec 0c             	sub    esp,0xc
c000e8f1:	50                   	push   eax
c000e8f2:	e8 91 f4 ff ff       	call   c000dd88 <Device::~Device()>
c000e8f7:	83 c4 10             	add    esp,0x10
c000e8fa:	90                   	nop
c000e8fb:	83 c4 0c             	add    esp,0xc
c000e8fe:	c3                   	ret    
c000e8ff:	90                   	nop

c000e900 <InterruptController::~InterruptController()>:
c000e900:	83 ec 0c             	sub    esp,0xc
c000e903:	83 ec 0c             	sub    esp,0xc
c000e906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e90a:	e8 cd ff ff ff       	call   c000e8dc <InterruptController::~InterruptController()>
c000e90f:	83 c4 10             	add    esp,0x10
c000e912:	83 ec 08             	sub    esp,0x8
c000e915:	68 58 21 00 00       	push   0x2158
c000e91a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e91e:	e8 6f e0 ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c000e923:	83 c4 10             	add    esp,0x10
c000e926:	83 c4 0c             	add    esp,0xc
c000e929:	c3                   	ret    

c000e92a <displayDebugInfo(regs*)>:
c000e92a:	55                   	push   ebp
c000e92b:	57                   	push   edi
c000e92c:	56                   	push   esi
c000e92d:	53                   	push   ebx
c000e92e:	83 ec 24             	sub    esp,0x24
c000e931:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e935:	0f 20 c2             	mov    edx,cr0
c000e938:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e93c:	0f 20 d7             	mov    edi,cr2
c000e93f:	0f 20 de             	mov    esi,cr3
c000e942:	0f 20 e5             	mov    ebp,cr4
c000e945:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000e948:	68 d6 34 02 c0       	push   0xc00234d6
c000e94d:	e8 21 e1 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000e952:	59                   	pop    ecx
c000e953:	58                   	pop    eax
c000e954:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e957:	68 e1 34 02 c0       	push   0xc00234e1
c000e95c:	e8 12 e1 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000e961:	58                   	pop    eax
c000e962:	5a                   	pop    edx
c000e963:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e966:	68 ec 34 02 c0       	push   0xc00234ec
c000e96b:	e8 03 e1 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000e970:	59                   	pop    ecx
c000e971:	58                   	pop    eax
c000e972:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e975:	68 f7 34 02 c0       	push   0xc00234f7
c000e97a:	e8 f4 e0 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000e97f:	58                   	pop    eax
c000e980:	5a                   	pop    edx
c000e981:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e984:	68 02 35 02 c0       	push   0xc0023502
c000e989:	e8 e5 e0 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000e98e:	59                   	pop    ecx
c000e98f:	58                   	pop    eax
c000e990:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e993:	68 0d 35 02 c0       	push   0xc002350d
c000e998:	e8 d6 e0 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000e99d:	58                   	pop    eax
c000e99e:	5a                   	pop    edx
c000e99f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e9a2:	68 18 35 02 c0       	push   0xc0023518
c000e9a7:	e8 c7 e0 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000e9ac:	59                   	pop    ecx
c000e9ad:	58                   	pop    eax
c000e9ae:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e9b1:	68 23 35 02 c0       	push   0xc0023523
c000e9b6:	e8 b8 e0 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000e9bb:	58                   	pop    eax
c000e9bc:	5a                   	pop    edx
c000e9bd:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000e9c0:	68 2e 35 02 c0       	push   0xc002352e
c000e9c5:	e8 a9 e0 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000e9ca:	59                   	pop    ecx
c000e9cb:	58                   	pop    eax
c000e9cc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000e9cf:	68 3d 35 02 c0       	push   0xc002353d
c000e9d4:	e8 9a e0 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000e9d9:	58                   	pop    eax
c000e9da:	5a                   	pop    edx
c000e9db:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000e9de:	68 48 35 02 c0       	push   0xc0023548
c000e9e3:	e8 8b e0 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000e9e8:	59                   	pop    ecx
c000e9e9:	58                   	pop    eax
c000e9ea:	57                   	push   edi
c000e9eb:	68 53 35 02 c0       	push   0xc0023553
c000e9f0:	e8 7e e0 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000e9f5:	58                   	pop    eax
c000e9f6:	5a                   	pop    edx
c000e9f7:	56                   	push   esi
c000e9f8:	68 5e 35 02 c0       	push   0xc002355e
c000e9fd:	e8 71 e0 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000ea02:	59                   	pop    ecx
c000ea03:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea08:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea0e:	e8 be bd ff ff       	call   c000a7d1 <setActiveTerminal(VgaText*)>
c000ea13:	58                   	pop    eax
c000ea14:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ea17:	5a                   	pop    edx
c000ea18:	c1 e0 05             	shl    eax,0x5
c000ea1b:	05 60 58 02 c0       	add    eax,0xc0025860
c000ea20:	50                   	push   eax
c000ea21:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea26:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea2c:	e8 ad c2 ff ff       	call   c000acde <VgaText::puts(char const*)>
c000ea31:	59                   	pop    ecx
c000ea32:	58                   	pop    eax
c000ea33:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea38:	68 69 35 02 c0       	push   0xc0023569
c000ea3d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea43:	e8 96 c2 ff ff       	call   c000acde <VgaText::puts(char const*)>
c000ea48:	58                   	pop    eax
c000ea49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ea4e:	5a                   	pop    edx
c000ea4f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ea52:	83 c0 0c             	add    eax,0xc
c000ea55:	50                   	push   eax
c000ea56:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea5b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea61:	e8 78 c2 ff ff       	call   c000acde <VgaText::puts(char const*)>
c000ea66:	59                   	pop    ecx
c000ea67:	58                   	pop    eax
c000ea68:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea6d:	68 72 35 02 c0       	push   0xc0023572
c000ea72:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea78:	e8 61 c2 ff ff       	call   c000acde <VgaText::puts(char const*)>
c000ea7d:	58                   	pop    eax
c000ea7e:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea83:	5a                   	pop    edx
c000ea84:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ea87:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea8d:	e8 06 c2 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c000ea92:	59                   	pop    ecx
c000ea93:	58                   	pop    eax
c000ea94:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ea99:	68 7a 35 02 c0       	push   0xc002357a
c000ea9e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eaa4:	e8 35 c2 ff ff       	call   c000acde <VgaText::puts(char const*)>
c000eaa9:	58                   	pop    eax
c000eaaa:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eaaf:	5a                   	pop    edx
c000eab0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000eab3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eab9:	e8 da c1 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c000eabe:	59                   	pop    ecx
c000eabf:	58                   	pop    eax
c000eac0:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eac5:	68 82 35 02 c0       	push   0xc0023582
c000eaca:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ead0:	e8 09 c2 ff ff       	call   c000acde <VgaText::puts(char const*)>
c000ead5:	58                   	pop    eax
c000ead6:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eadb:	5a                   	pop    edx
c000eadc:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000eadf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eae5:	e8 ae c1 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c000eaea:	59                   	pop    ecx
c000eaeb:	58                   	pop    eax
c000eaec:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eaf1:	68 8a 35 02 c0       	push   0xc002358a
c000eaf6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eafc:	e8 dd c1 ff ff       	call   c000acde <VgaText::puts(char const*)>
c000eb01:	58                   	pop    eax
c000eb02:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb07:	5a                   	pop    edx
c000eb08:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000eb0b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb11:	e8 82 c1 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c000eb16:	59                   	pop    ecx
c000eb17:	58                   	pop    eax
c000eb18:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb1d:	68 92 35 02 c0       	push   0xc0023592
c000eb22:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb28:	e8 b1 c1 ff ff       	call   c000acde <VgaText::puts(char const*)>
c000eb2d:	58                   	pop    eax
c000eb2e:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb33:	5a                   	pop    edx
c000eb34:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eb37:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb3d:	e8 56 c1 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c000eb42:	59                   	pop    ecx
c000eb43:	58                   	pop    eax
c000eb44:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb49:	68 9a 35 02 c0       	push   0xc002359a
c000eb4e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb54:	e8 85 c1 ff ff       	call   c000acde <VgaText::puts(char const*)>
c000eb59:	58                   	pop    eax
c000eb5a:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb5f:	5a                   	pop    edx
c000eb60:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000eb63:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb69:	e8 2a c1 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c000eb6e:	59                   	pop    ecx
c000eb6f:	58                   	pop    eax
c000eb70:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb75:	68 a2 35 02 c0       	push   0xc00235a2
c000eb7a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb80:	e8 59 c1 ff ff       	call   c000acde <VgaText::puts(char const*)>
c000eb85:	58                   	pop    eax
c000eb86:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eb8b:	5a                   	pop    edx
c000eb8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eb90:	52                   	push   edx
c000eb91:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb97:	e8 fc c0 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c000eb9c:	59                   	pop    ecx
c000eb9d:	58                   	pop    eax
c000eb9e:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eba3:	68 ab 35 02 c0       	push   0xc00235ab
c000eba8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebae:	e8 2b c1 ff ff       	call   c000acde <VgaText::puts(char const*)>
c000ebb3:	58                   	pop    eax
c000ebb4:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ebb9:	5a                   	pop    edx
c000ebba:	57                   	push   edi
c000ebbb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebc1:	e8 d2 c0 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c000ebc6:	59                   	pop    ecx
c000ebc7:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ebcc:	5f                   	pop    edi
c000ebcd:	68 b3 35 02 c0       	push   0xc00235b3
c000ebd2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebd8:	e8 01 c1 ff ff       	call   c000acde <VgaText::puts(char const*)>
c000ebdd:	58                   	pop    eax
c000ebde:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ebe3:	5a                   	pop    edx
c000ebe4:	56                   	push   esi
c000ebe5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebeb:	e8 a8 c0 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c000ebf0:	59                   	pop    ecx
c000ebf1:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ebf6:	5e                   	pop    esi
c000ebf7:	68 bb 35 02 c0       	push   0xc00235bb
c000ebfc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec02:	e8 d7 c0 ff ff       	call   c000acde <VgaText::puts(char const*)>
c000ec07:	5f                   	pop    edi
c000ec08:	58                   	pop    eax
c000ec09:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec0e:	55                   	push   ebp
c000ec0f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec15:	e8 7e c0 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c000ec1a:	58                   	pop    eax
c000ec1b:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec20:	5a                   	pop    edx
c000ec21:	68 c3 35 02 c0       	push   0xc00235c3
c000ec26:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec2c:	e8 ad c0 ff ff       	call   c000acde <VgaText::puts(char const*)>
c000ec31:	0f 21 c0             	mov    eax,db0
c000ec34:	59                   	pop    ecx
c000ec35:	5e                   	pop    esi
c000ec36:	50                   	push   eax
c000ec37:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec3c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec42:	e8 51 c0 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c000ec47:	5f                   	pop    edi
c000ec48:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec4d:	5d                   	pop    ebp
c000ec4e:	68 cc 35 02 c0       	push   0xc00235cc
c000ec53:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec59:	e8 80 c0 ff ff       	call   c000acde <VgaText::puts(char const*)>
c000ec5e:	0f 21 c8             	mov    eax,db1
c000ec61:	5a                   	pop    edx
c000ec62:	59                   	pop    ecx
c000ec63:	50                   	push   eax
c000ec64:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec69:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec6f:	e8 24 c0 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c000ec74:	5e                   	pop    esi
c000ec75:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec7a:	5f                   	pop    edi
c000ec7b:	68 d4 35 02 c0       	push   0xc00235d4
c000ec80:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec86:	e8 53 c0 ff ff       	call   c000acde <VgaText::puts(char const*)>
c000ec8b:	0f 21 d0             	mov    eax,db2
c000ec8e:	5d                   	pop    ebp
c000ec8f:	5a                   	pop    edx
c000ec90:	50                   	push   eax
c000ec91:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ec96:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec9c:	e8 f7 bf ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c000eca1:	59                   	pop    ecx
c000eca2:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000eca7:	5e                   	pop    esi
c000eca8:	68 dc 35 02 c0       	push   0xc00235dc
c000ecad:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecb3:	e8 26 c0 ff ff       	call   c000acde <VgaText::puts(char const*)>
c000ecb8:	0f 21 d8             	mov    eax,db3
c000ecbb:	5f                   	pop    edi
c000ecbc:	5d                   	pop    ebp
c000ecbd:	50                   	push   eax
c000ecbe:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ecc3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecc9:	e8 ca bf ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c000ecce:	58                   	pop    eax
c000eccf:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ecd4:	5a                   	pop    edx
c000ecd5:	68 e4 35 02 c0       	push   0xc00235e4
c000ecda:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ece0:	e8 f9 bf ff ff       	call   c000acde <VgaText::puts(char const*)>
c000ece5:	0f 21 f0             	mov    eax,db6
c000ece8:	59                   	pop    ecx
c000ece9:	5e                   	pop    esi
c000ecea:	50                   	push   eax
c000eceb:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ecf0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecf6:	e8 9d bf ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c000ecfb:	5f                   	pop    edi
c000ecfc:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ed01:	5d                   	pop    ebp
c000ed02:	68 ec 35 02 c0       	push   0xc00235ec
c000ed07:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed0d:	e8 cc bf ff ff       	call   c000acde <VgaText::puts(char const*)>
c000ed12:	0f 21 f8             	mov    eax,db7
c000ed15:	5a                   	pop    edx
c000ed16:	59                   	pop    ecx
c000ed17:	50                   	push   eax
c000ed18:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ed1d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed23:	e8 70 bf ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c000ed28:	5e                   	pop    esi
c000ed29:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed2c:	e8 a0 87 00 00       	call   c00174d1 <Thr::getDriverNameFromAddress(unsigned long)>
c000ed31:	83 c4 10             	add    esp,0x10
c000ed34:	85 c0                	test   eax,eax
c000ed36:	74 7d                	je     c000edb5 <displayDebugInfo(regs*)+0x48b>
c000ed38:	89 c6                	mov    esi,eax
c000ed3a:	50                   	push   eax
c000ed3b:	50                   	push   eax
c000ed3c:	56                   	push   esi
c000ed3d:	68 f4 35 02 c0       	push   0xc00235f4
c000ed42:	e8 2c dd ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000ed47:	5a                   	pop    edx
c000ed48:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ed4d:	59                   	pop    ecx
c000ed4e:	68 02 36 02 c0       	push   0xc0023602
c000ed53:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed59:	e8 80 bf ff ff       	call   c000acde <VgaText::puts(char const*)>
c000ed5e:	5f                   	pop    edi
c000ed5f:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ed64:	5d                   	pop    ebp
c000ed65:	56                   	push   esi
c000ed66:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed6c:	e8 6d bf ff ff       	call   c000acde <VgaText::puts(char const*)>
c000ed71:	58                   	pop    eax
c000ed72:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ed77:	5a                   	pop    edx
c000ed78:	68 0e 36 02 c0       	push   0xc002360e
c000ed7d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed83:	e8 56 bf ff ff       	call   c000acde <VgaText::puts(char const*)>
c000ed88:	59                   	pop    ecx
c000ed89:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000ed8e:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000ed94:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed97:	e8 6c 87 00 00       	call   c0017508 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000ed9c:	5b                   	pop    ebx
c000ed9d:	5d                   	pop    ebp
c000ed9e:	50                   	push   eax
c000ed9f:	57                   	push   edi
c000eda0:	e8 f3 be ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c000eda5:	58                   	pop    eax
c000eda6:	5a                   	pop    edx
c000eda7:	56                   	push   esi
c000eda8:	68 1a 36 02 c0       	push   0xc002361a
c000edad:	e8 c1 dc ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000edb2:	83 c4 10             	add    esp,0x10
c000edb5:	fa                   	cli    
c000edb6:	f4                   	hlt    
c000edb7:	eb fe                	jmp    c000edb7 <displayDebugInfo(regs*)+0x48d>

c000edb9 <x87EmulHandler(regs*, void*)>:
c000edb9:	83 ec 0c             	sub    esp,0xc
c000edbc:	0f 20 c2             	mov    edx,cr0
c000edbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edc4:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000edc8:	75 4b                	jne    c000ee15 <x87EmulHandler(regs*, void*)+0x5c>
c000edca:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000edcf:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000edd5:	85 c0                	test   eax,eax
c000edd7:	74 05                	je     c000edde <x87EmulHandler(regs*, void*)+0x25>
c000edd9:	83 e2 08             	and    edx,0x8
c000eddc:	75 17                	jne    c000edf5 <x87EmulHandler(regs*, void*)+0x3c>
c000edde:	83 ec 0c             	sub    esp,0xc
c000ede1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ede5:	e8 94 ab 00 00       	call   c001997e <Vm::x87Handler(regs*)>
c000edea:	83 c4 10             	add    esp,0x10
c000eded:	84 c0                	test   al,al
c000edef:	74 24                	je     c000ee15 <x87EmulHandler(regs*, void*)+0x5c>
c000edf1:	83 c4 0c             	add    esp,0xc
c000edf4:	c3                   	ret    
c000edf5:	83 ec 0c             	sub    esp,0xc
c000edf8:	68 40 36 02 c0       	push   0xc0023640
c000edfd:	e8 71 dc ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000ee02:	0f 06                	clts   
c000ee04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee09:	83 c4 10             	add    esp,0x10
c000ee0c:	a3 48 65 02 c0       	mov    ds:0xc0026548,eax
c000ee11:	83 c4 0c             	add    esp,0xc
c000ee14:	c3                   	ret    
c000ee15:	83 ec 0c             	sub    esp,0xc
c000ee18:	68 2a 36 02 c0       	push   0xc002362a
c000ee1d:	e8 51 dc ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000ee22:	5a                   	pop    edx
c000ee23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ee27:	e8 fe fa ff ff       	call   c000e92a <displayDebugInfo(regs*)>

c000ee2c <gpFault(regs*, void*)>:
c000ee2c:	53                   	push   ebx
c000ee2d:	83 ec 14             	sub    esp,0x14
c000ee30:	c7 05 44 65 02 c0 3a 8e 01 c0 	mov    DWORD PTR ds:0xc0026544,0xc0018e3a
c000ee3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee3e:	53                   	push   ebx
c000ee3f:	e8 f6 9f 00 00       	call   c0018e3a <Vm::faultHandler(regs*)>
c000ee44:	83 c4 10             	add    esp,0x10
c000ee47:	84 c0                	test   al,al
c000ee49:	74 05                	je     c000ee50 <gpFault(regs*, void*)+0x24>
c000ee4b:	83 c4 08             	add    esp,0x8
c000ee4e:	5b                   	pop    ebx
c000ee4f:	c3                   	ret    
c000ee50:	83 ec 0c             	sub    esp,0xc
c000ee53:	68 4d 36 02 c0       	push   0xc002364d
c000ee58:	e8 16 dc ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000ee5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee60:	e8 c5 fa ff ff       	call   c000e92a <displayDebugInfo(regs*)>

c000ee65 <pgFault(regs*, void*)>:
c000ee65:	53                   	push   ebx
c000ee66:	83 ec 10             	sub    esp,0x10
c000ee69:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ee6d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ee70:	68 68 36 02 c0       	push   0xc0023668
c000ee75:	e8 f9 db ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000ee7a:	0f 20 d0             	mov    eax,cr2
c000ee7d:	5a                   	pop    edx
c000ee7e:	59                   	pop    ecx
c000ee7f:	50                   	push   eax
c000ee80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee85:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ee88:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000ee8e:	e8 e7 d6 ff ff       	call   c000c57a <VAS::tryLoadBackOffDisk(unsigned long)>
c000ee93:	83 c4 10             	add    esp,0x10
c000ee96:	84 c0                	test   al,al
c000ee98:	74 05                	je     c000ee9f <pgFault(regs*, void*)+0x3a>
c000ee9a:	83 c4 08             	add    esp,0x8
c000ee9d:	5b                   	pop    ebx
c000ee9e:	c3                   	ret    
c000ee9f:	83 ec 0c             	sub    esp,0xc
c000eea2:	68 7d 36 02 c0       	push   0xc002367d
c000eea7:	e8 c7 db ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000eeac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eeaf:	e8 76 fa ff ff       	call   c000e92a <displayDebugInfo(regs*)>

c000eeb4 <otherISRHandler(regs*, void*)>:
c000eeb4:	53                   	push   ebx
c000eeb5:	83 ec 0c             	sub    esp,0xc
c000eeb8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000eebc:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000eebf:	50                   	push   eax
c000eec0:	50                   	push   eax
c000eec1:	68 8a 36 02 c0       	push   0xc002368a
c000eec6:	e8 a8 db ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000eecb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eece:	e8 57 fa ff ff       	call   c000e92a <displayDebugInfo(regs*)>

c000eed3 <opcodeFault(regs*, void*)>:
c000eed3:	55                   	push   ebp
c000eed4:	89 e5                	mov    ebp,esp
c000eed6:	56                   	push   esi
c000eed7:	53                   	push   ebx
c000eed8:	83 ec 30             	sub    esp,0x30
c000eedb:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000eee0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000eee6:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000eeec:	84 c0                	test   al,al
c000eeee:	74 24                	je     c000ef14 <opcodeFault(regs*, void*)+0x41>
c000eef0:	83 ec 0c             	sub    esp,0xc
c000eef3:	68 a8 36 02 c0       	push   0xc00236a8
c000eef8:	e8 76 db ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000eefd:	83 c4 10             	add    esp,0x10
c000ef00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef03:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef06:	8d 50 19             	lea    edx,[eax+0x19]
c000ef09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef0c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef0f:	e9 7b 03 00 00       	jmp    c000f28f <opcodeFault(regs*, void*)+0x3bc>
c000ef14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef17:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef1a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ef1d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000ef21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef24:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef27:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000ef2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef2d:	8a 00                	mov    al,BYTE PTR [eax]
c000ef2f:	3c f0                	cmp    al,0xf0
c000ef31:	75 17                	jne    c000ef4a <opcodeFault(regs*, void*)+0x77>
c000ef33:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef39:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef3c:	8d 50 01             	lea    edx,[eax+0x1]
c000ef3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef42:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef45:	e9 d6 00 00 00       	jmp    c000f020 <opcodeFault(regs*, void*)+0x14d>
c000ef4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef4d:	8a 00                	mov    al,BYTE PTR [eax]
c000ef4f:	3c f2                	cmp    al,0xf2
c000ef51:	74 09                	je     c000ef5c <opcodeFault(regs*, void*)+0x89>
c000ef53:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef56:	8a 00                	mov    al,BYTE PTR [eax]
c000ef58:	3c f3                	cmp    al,0xf3
c000ef5a:	75 1b                	jne    c000ef77 <opcodeFault(regs*, void*)+0xa4>
c000ef5c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef60:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef66:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef69:	8d 50 01             	lea    edx,[eax+0x1]
c000ef6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef6f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef72:	e9 a9 00 00 00       	jmp    c000f020 <opcodeFault(regs*, void*)+0x14d>
c000ef77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef7a:	8a 00                	mov    al,BYTE PTR [eax]
c000ef7c:	3c 66                	cmp    al,0x66
c000ef7e:	75 1b                	jne    c000ef9b <opcodeFault(regs*, void*)+0xc8>
c000ef80:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef84:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef8a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef8d:	8d 50 01             	lea    edx,[eax+0x1]
c000ef90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef93:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef96:	e9 85 00 00 00       	jmp    c000f020 <opcodeFault(regs*, void*)+0x14d>
c000ef9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef9e:	8a 00                	mov    al,BYTE PTR [eax]
c000efa0:	3c 67                	cmp    al,0x67
c000efa2:	75 18                	jne    c000efbc <opcodeFault(regs*, void*)+0xe9>
c000efa4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efa8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efae:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efb1:	8d 50 01             	lea    edx,[eax+0x1]
c000efb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efb7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efba:	eb 64                	jmp    c000f020 <opcodeFault(regs*, void*)+0x14d>
c000efbc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efbf:	8a 00                	mov    al,BYTE PTR [eax]
c000efc1:	3c 2e                	cmp    al,0x2e
c000efc3:	74 09                	je     c000efce <opcodeFault(regs*, void*)+0xfb>
c000efc5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efc8:	8a 00                	mov    al,BYTE PTR [eax]
c000efca:	3c 3e                	cmp    al,0x3e
c000efcc:	75 18                	jne    c000efe6 <opcodeFault(regs*, void*)+0x113>
c000efce:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efd2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efd8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efdb:	8d 50 01             	lea    edx,[eax+0x1]
c000efde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efe1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efe4:	eb 3a                	jmp    c000f020 <opcodeFault(regs*, void*)+0x14d>
c000efe6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efe9:	8a 00                	mov    al,BYTE PTR [eax]
c000efeb:	3c 36                	cmp    al,0x36
c000efed:	74 1b                	je     c000f00a <opcodeFault(regs*, void*)+0x137>
c000efef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eff2:	8a 00                	mov    al,BYTE PTR [eax]
c000eff4:	3c 26                	cmp    al,0x26
c000eff6:	74 12                	je     c000f00a <opcodeFault(regs*, void*)+0x137>
c000eff8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000effb:	8a 00                	mov    al,BYTE PTR [eax]
c000effd:	3c 64                	cmp    al,0x64
c000efff:	74 09                	je     c000f00a <opcodeFault(regs*, void*)+0x137>
c000f001:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f004:	8a 00                	mov    al,BYTE PTR [eax]
c000f006:	3c 65                	cmp    al,0x65
c000f008:	75 16                	jne    c000f020 <opcodeFault(regs*, void*)+0x14d>
c000f00a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f00e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f014:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f017:	8d 50 01             	lea    edx,[eax+0x1]
c000f01a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f01d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f020:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f023:	8a 00                	mov    al,BYTE PTR [eax]
c000f025:	3c 0f                	cmp    al,0xf
c000f027:	0f 85 8d 01 00 00    	jne    c000f1ba <opcodeFault(regs*, void*)+0x2e7>
c000f02d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f030:	40                   	inc    eax
c000f031:	8a 00                	mov    al,BYTE PTR [eax]
c000f033:	3c c7                	cmp    al,0xc7
c000f035:	0f 85 7f 01 00 00    	jne    c000f1ba <opcodeFault(regs*, void*)+0x2e7>
c000f03b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f03e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f041:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f044:	8d 50 01             	lea    edx,[eax+0x1]
c000f047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f04a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f04d:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f050:	50                   	push   eax
c000f051:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f054:	50                   	push   eax
c000f055:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f058:	50                   	push   eax
c000f059:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f05c:	e8 ed 49 00 00       	call   c0013a4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f061:	83 c4 10             	add    esp,0x10
c000f064:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f067:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f06a:	83 f0 01             	xor    eax,0x1
c000f06d:	84 c0                	test   al,al
c000f06f:	0f 84 45 01 00 00    	je     c000f1ba <opcodeFault(regs*, void*)+0x2e7>
c000f075:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f078:	3c 01                	cmp    al,0x1
c000f07a:	0f 85 3a 01 00 00    	jne    c000f1ba <opcodeFault(regs*, void*)+0x2e7>
c000f080:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f083:	83 f0 01             	xor    eax,0x1
c000f086:	84 c0                	test   al,al
c000f088:	0f 84 2c 01 00 00    	je     c000f1ba <opcodeFault(regs*, void*)+0x2e7>
c000f08e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f091:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f094:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f097:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f09e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f0a1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f0a4:	89 c2                	mov    edx,eax
c000f0a6:	b8 00 00 00 00       	mov    eax,0x0
c000f0ab:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f0ae:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f0b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0b4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f0b7:	ba 00 00 00 00       	mov    edx,0x0
c000f0bc:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f0bf:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f0c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0c5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f0c8:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f0cb:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f0d2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f0d5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f0d8:	89 c2                	mov    edx,eax
c000f0da:	b8 00 00 00 00       	mov    eax,0x0
c000f0df:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f0e2:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f0e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0e8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f0eb:	ba 00 00 00 00       	mov    edx,0x0
c000f0f0:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f0f3:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f0f6:	fa                   	cli    
c000f0f7:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f0fc:	40                   	inc    eax
c000f0fd:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000f102:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f105:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f108:	8b 00                	mov    eax,DWORD PTR [eax]
c000f10a:	89 c1                	mov    ecx,eax
c000f10c:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f10f:	89 cb                	mov    ebx,ecx
c000f111:	89 d0                	mov    eax,edx
c000f113:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f116:	89 c6                	mov    esi,eax
c000f118:	89 f0                	mov    eax,esi
c000f11a:	09 d8                	or     eax,ebx
c000f11c:	85 c0                	test   eax,eax
c000f11e:	75 21                	jne    c000f141 <opcodeFault(regs*, void*)+0x26e>
c000f120:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f123:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f126:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f129:	89 01                	mov    DWORD PTR [ecx],eax
c000f12b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f12e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f131:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f134:	83 c8 40             	or     eax,0x40
c000f137:	89 c2                	mov    edx,eax
c000f139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f13c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f13f:	eb 3e                	jmp    c000f17f <opcodeFault(regs*, void*)+0x2ac>
c000f141:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f144:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f147:	8b 00                	mov    eax,DWORD PTR [eax]
c000f149:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f14c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f14f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f152:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f155:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f158:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f15b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f15e:	89 d0                	mov    eax,edx
c000f160:	31 d2                	xor    edx,edx
c000f162:	89 c3                	mov    ebx,eax
c000f164:	89 d6                	mov    esi,edx
c000f166:	89 da                	mov    edx,ebx
c000f168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f16b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f16e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f171:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f174:	83 e0 bf             	and    eax,0xffffffbf
c000f177:	89 c2                	mov    edx,eax
c000f179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f17c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f17f:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f184:	48                   	dec    eax
c000f185:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000f18a:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f18f:	85 c0                	test   eax,eax
c000f191:	75 01                	jne    c000f194 <opcodeFault(regs*, void*)+0x2c1>
c000f193:	fb                   	sti    
c000f194:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f197:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f19a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f19d:	01 c2                	add    edx,eax
c000f19f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f1a5:	83 ec 0c             	sub    esp,0xc
c000f1a8:	68 cb 36 02 c0       	push   0xc00236cb
c000f1ad:	e8 c1 d8 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000f1b2:	83 c4 10             	add    esp,0x10
c000f1b5:	e9 d5 00 00 00       	jmp    c000f28f <opcodeFault(regs*, void*)+0x3bc>
c000f1ba:	83 ec 0c             	sub    esp,0xc
c000f1bd:	68 de 36 02 c0       	push   0xc00236de
c000f1c2:	e8 ac d8 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000f1c7:	83 c4 10             	add    esp,0x10
c000f1ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1cd:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1d6:	c1 e0 04             	shl    eax,0x4
c000f1d9:	01 d0                	add    eax,edx
c000f1db:	83 c0 03             	add    eax,0x3
c000f1de:	8a 00                	mov    al,BYTE PTR [eax]
c000f1e0:	0f b6 d8             	movzx  ebx,al
c000f1e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1e6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1ef:	c1 e0 04             	shl    eax,0x4
c000f1f2:	01 d0                	add    eax,edx
c000f1f4:	83 c0 02             	add    eax,0x2
c000f1f7:	8a 00                	mov    al,BYTE PTR [eax]
c000f1f9:	0f b6 c8             	movzx  ecx,al
c000f1fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1ff:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f202:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f205:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f208:	c1 e0 04             	shl    eax,0x4
c000f20b:	01 d0                	add    eax,edx
c000f20d:	40                   	inc    eax
c000f20e:	8a 00                	mov    al,BYTE PTR [eax]
c000f210:	0f b6 d0             	movzx  edx,al
c000f213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f216:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f219:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f21c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f21f:	c1 e0 04             	shl    eax,0x4
c000f222:	01 f0                	add    eax,esi
c000f224:	8a 00                	mov    al,BYTE PTR [eax]
c000f226:	0f b6 c0             	movzx  eax,al
c000f229:	83 ec 0c             	sub    esp,0xc
c000f22c:	53                   	push   ebx
c000f22d:	51                   	push   ecx
c000f22e:	52                   	push   edx
c000f22f:	50                   	push   eax
c000f230:	68 f0 36 02 c0       	push   0xc00236f0
c000f235:	e8 39 d8 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000f23a:	83 c4 20             	add    esp,0x20
c000f23d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f240:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f243:	83 c0 03             	add    eax,0x3
c000f246:	8a 00                	mov    al,BYTE PTR [eax]
c000f248:	0f b6 d8             	movzx  ebx,al
c000f24b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f24e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f251:	83 c0 02             	add    eax,0x2
c000f254:	8a 00                	mov    al,BYTE PTR [eax]
c000f256:	0f b6 c8             	movzx  ecx,al
c000f259:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f25c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f25f:	40                   	inc    eax
c000f260:	8a 00                	mov    al,BYTE PTR [eax]
c000f262:	0f b6 d0             	movzx  edx,al
c000f265:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f268:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f26b:	8a 00                	mov    al,BYTE PTR [eax]
c000f26d:	0f b6 c0             	movzx  eax,al
c000f270:	83 ec 0c             	sub    esp,0xc
c000f273:	53                   	push   ebx
c000f274:	51                   	push   ecx
c000f275:	52                   	push   edx
c000f276:	50                   	push   eax
c000f277:	68 18 37 02 c0       	push   0xc0023718
c000f27c:	e8 f2 d7 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c000f281:	83 c4 20             	add    esp,0x20
c000f284:	83 ec 0c             	sub    esp,0xc
c000f287:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f28a:	e8 9b f6 ff ff       	call   c000e92a <displayDebugInfo(regs*)>
c000f28f:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f292:	5b                   	pop    ebx
c000f293:	5e                   	pop    esi
c000f294:	5d                   	pop    ebp
c000f295:	c3                   	ret    

c000f296 <displayProgramFault(char const*)>:
c000f296:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f29b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f29e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f2a4:	85 c0                	test   eax,eax
c000f2a6:	74 15                	je     c000f2bd <displayProgramFault(char const*)+0x27>
c000f2a8:	83 ec 0c             	sub    esp,0xc
c000f2ab:	6a 04                	push   0x4
c000f2ad:	6a 0f                	push   0xf
c000f2af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f2b3:	50                   	push   eax
c000f2b4:	e8 21 b7 ff ff       	call   c000a9da <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f2b9:	83 c4 1c             	add    esp,0x1c
c000f2bc:	c3                   	ret    
c000f2bd:	c3                   	ret    

c000f2be <setupInterruptController()>:
c000f2be:	55                   	push   ebp
c000f2bf:	89 e5                	mov    ebp,esp
c000f2c1:	53                   	push   ebx
c000f2c2:	83 ec 24             	sub    esp,0x24
c000f2c5:	b8 00 00 00 00       	mov    eax,0x0
c000f2ca:	85 c0                	test   eax,eax
c000f2cc:	0f 95 c0             	setne  al
c000f2cf:	84 c0                	test   al,al
c000f2d1:	74 5b                	je     c000f32e <setupInterruptController()+0x70>
c000f2d3:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f2da:	83 ec 0c             	sub    esp,0xc
c000f2dd:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f2e0:	e8 de a6 ff ff       	call   c00099c3 <malloc>
c000f2e5:	83 c4 10             	add    esp,0x10
c000f2e8:	89 c3                	mov    ebx,eax
c000f2ea:	83 ec 0c             	sub    esp,0xc
c000f2ed:	53                   	push   ebx
c000f2ee:	e8 d7 0b 01 00       	call   c001feca <APIC::APIC()>
c000f2f3:	83 c4 10             	add    esp,0x10
c000f2f6:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f2f9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f2fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f2ff:	8b 00                	mov    eax,DWORD PTR [eax]
c000f301:	83 c0 08             	add    eax,0x8
c000f304:	8b 00                	mov    eax,DWORD PTR [eax]
c000f306:	6a 00                	push   0x0
c000f308:	6a 00                	push   0x0
c000f30a:	6a 00                	push   0x0
c000f30c:	52                   	push   edx
c000f30d:	ff d0                	call   eax
c000f30f:	83 c4 10             	add    esp,0x10
c000f312:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000f317:	83 ec 08             	sub    esp,0x8
c000f31a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f31d:	50                   	push   eax
c000f31e:	e8 97 eb ff ff       	call   c000deba <Device::addChild(Device*)>
c000f323:	83 c4 10             	add    esp,0x10
c000f326:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f329:	e9 79 03 00 00       	jmp    c000f6a7 <setupInterruptController()+0x3e9>
c000f32e:	a0 20 6d 02 c0       	mov    al,ds:0xc0026d20
c000f333:	84 c0                	test   al,al
c000f335:	75 14                	jne    c000f34b <setupInterruptController()+0x8d>
c000f337:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000f33c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f342:	83 e2 fe             	and    edx,0xfffffffe
c000f345:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f34b:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000f350:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f356:	83 e0 01             	and    eax,0x1
c000f359:	84 c0                	test   al,al
c000f35b:	0f 95 c0             	setne  al
c000f35e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f361:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f368:	83 ec 0c             	sub    esp,0xc
c000f36b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f36e:	e8 50 a6 ff ff       	call   c00099c3 <malloc>
c000f373:	83 c4 10             	add    esp,0x10
c000f376:	89 c3                	mov    ebx,eax
c000f378:	83 ec 0c             	sub    esp,0xc
c000f37b:	53                   	push   ebx
c000f37c:	e8 a1 10 01 00       	call   c0020422 <PIC::PIC()>
c000f381:	83 c4 10             	add    esp,0x10
c000f384:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f387:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f38a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f38d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f38f:	83 c0 08             	add    eax,0x8
c000f392:	8b 00                	mov    eax,DWORD PTR [eax]
c000f394:	6a 00                	push   0x0
c000f396:	6a 00                	push   0x0
c000f398:	6a 00                	push   0x0
c000f39a:	52                   	push   edx
c000f39b:	ff d0                	call   eax
c000f39d:	83 c4 10             	add    esp,0x10
c000f3a0:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f3a4:	74 73                	je     c000f419 <setupInterruptController()+0x15b>
c000f3a6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f3a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3ae:	83 c0 0c             	add    eax,0xc
c000f3b1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3b3:	6a 00                	push   0x0
c000f3b5:	6a 00                	push   0x0
c000f3b7:	6a 00                	push   0x0
c000f3b9:	52                   	push   edx
c000f3ba:	ff d0                	call   eax
c000f3bc:	83 c4 10             	add    esp,0x10
c000f3bf:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f3c3:	74 15                	je     c000f3da <setupInterruptController()+0x11c>
c000f3c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3ca:	83 c0 04             	add    eax,0x4
c000f3cd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3cf:	83 ec 0c             	sub    esp,0xc
c000f3d2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f3d5:	ff d0                	call   eax
c000f3d7:	83 c4 10             	add    esp,0x10
c000f3da:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f3e1:	83 ec 0c             	sub    esp,0xc
c000f3e4:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f3e7:	e8 d7 a5 ff ff       	call   c00099c3 <malloc>
c000f3ec:	83 c4 10             	add    esp,0x10
c000f3ef:	89 c3                	mov    ebx,eax
c000f3f1:	83 ec 0c             	sub    esp,0xc
c000f3f4:	53                   	push   ebx
c000f3f5:	e8 d0 0a 01 00       	call   c001feca <APIC::APIC()>
c000f3fa:	83 c4 10             	add    esp,0x10
c000f3fd:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f400:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f403:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f406:	8b 00                	mov    eax,DWORD PTR [eax]
c000f408:	83 c0 08             	add    eax,0x8
c000f40b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f40d:	6a 00                	push   0x0
c000f40f:	6a 00                	push   0x0
c000f411:	6a 00                	push   0x0
c000f413:	52                   	push   edx
c000f414:	ff d0                	call   eax
c000f416:	83 c4 10             	add    esp,0x10
c000f419:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000f41e:	83 ec 08             	sub    esp,0x8
c000f421:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f424:	50                   	push   eax
c000f425:	e8 90 ea ff ff       	call   c000deba <Device::addChild(Device*)>
c000f42a:	83 c4 10             	add    esp,0x10
c000f42d:	c7 05 48 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026548,0x0
c000f437:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f43a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f43c:	83 c0 24             	add    eax,0x24
c000f43f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f441:	6a 00                	push   0x0
c000f443:	68 b4 ee 00 c0       	push   0xc000eeb4
c000f448:	6a 00                	push   0x0
c000f44a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f44d:	ff d0                	call   eax
c000f44f:	83 c4 10             	add    esp,0x10
c000f452:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f455:	8b 00                	mov    eax,DWORD PTR [eax]
c000f457:	83 c0 24             	add    eax,0x24
c000f45a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f45c:	6a 00                	push   0x0
c000f45e:	68 b4 ee 00 c0       	push   0xc000eeb4
c000f463:	6a 01                	push   0x1
c000f465:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f468:	ff d0                	call   eax
c000f46a:	83 c4 10             	add    esp,0x10
c000f46d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f470:	8b 00                	mov    eax,DWORD PTR [eax]
c000f472:	83 c0 24             	add    eax,0x24
c000f475:	8b 00                	mov    eax,DWORD PTR [eax]
c000f477:	6a 00                	push   0x0
c000f479:	68 87 e7 00 c0       	push   0xc000e787
c000f47e:	6a 02                	push   0x2
c000f480:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f483:	ff d0                	call   eax
c000f485:	83 c4 10             	add    esp,0x10
c000f488:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f48b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f48d:	83 c0 24             	add    eax,0x24
c000f490:	8b 00                	mov    eax,DWORD PTR [eax]
c000f492:	6a 00                	push   0x0
c000f494:	68 b4 ee 00 c0       	push   0xc000eeb4
c000f499:	6a 03                	push   0x3
c000f49b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f49e:	ff d0                	call   eax
c000f4a0:	83 c4 10             	add    esp,0x10
c000f4a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4a6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4a8:	83 c0 24             	add    eax,0x24
c000f4ab:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4ad:	6a 00                	push   0x0
c000f4af:	68 b4 ee 00 c0       	push   0xc000eeb4
c000f4b4:	6a 04                	push   0x4
c000f4b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4b9:	ff d0                	call   eax
c000f4bb:	83 c4 10             	add    esp,0x10
c000f4be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4c3:	83 c0 24             	add    eax,0x24
c000f4c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4c8:	6a 00                	push   0x0
c000f4ca:	68 b4 ee 00 c0       	push   0xc000eeb4
c000f4cf:	6a 05                	push   0x5
c000f4d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4d4:	ff d0                	call   eax
c000f4d6:	83 c4 10             	add    esp,0x10
c000f4d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4de:	83 c0 24             	add    eax,0x24
c000f4e1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4e3:	6a 00                	push   0x0
c000f4e5:	68 d3 ee 00 c0       	push   0xc000eed3
c000f4ea:	6a 06                	push   0x6
c000f4ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4ef:	ff d0                	call   eax
c000f4f1:	83 c4 10             	add    esp,0x10
c000f4f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4f9:	83 c0 24             	add    eax,0x24
c000f4fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4fe:	6a 00                	push   0x0
c000f500:	68 b9 ed 00 c0       	push   0xc000edb9
c000f505:	6a 07                	push   0x7
c000f507:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f50a:	ff d0                	call   eax
c000f50c:	83 c4 10             	add    esp,0x10
c000f50f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f512:	8b 00                	mov    eax,DWORD PTR [eax]
c000f514:	83 c0 24             	add    eax,0x24
c000f517:	8b 00                	mov    eax,DWORD PTR [eax]
c000f519:	6a 00                	push   0x0
c000f51b:	68 a2 e5 00 c0       	push   0xc000e5a2
c000f520:	6a 08                	push   0x8
c000f522:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f525:	ff d0                	call   eax
c000f527:	83 c4 10             	add    esp,0x10
c000f52a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f52d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f52f:	83 c0 24             	add    eax,0x24
c000f532:	8b 00                	mov    eax,DWORD PTR [eax]
c000f534:	6a 00                	push   0x0
c000f536:	68 b4 ee 00 c0       	push   0xc000eeb4
c000f53b:	6a 09                	push   0x9
c000f53d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f540:	ff d0                	call   eax
c000f542:	83 c4 10             	add    esp,0x10
c000f545:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f548:	8b 00                	mov    eax,DWORD PTR [eax]
c000f54a:	83 c0 24             	add    eax,0x24
c000f54d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f54f:	6a 00                	push   0x0
c000f551:	68 b4 ee 00 c0       	push   0xc000eeb4
c000f556:	6a 0a                	push   0xa
c000f558:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f55b:	ff d0                	call   eax
c000f55d:	83 c4 10             	add    esp,0x10
c000f560:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f563:	8b 00                	mov    eax,DWORD PTR [eax]
c000f565:	83 c0 24             	add    eax,0x24
c000f568:	8b 00                	mov    eax,DWORD PTR [eax]
c000f56a:	6a 00                	push   0x0
c000f56c:	68 b4 ee 00 c0       	push   0xc000eeb4
c000f571:	6a 0b                	push   0xb
c000f573:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f576:	ff d0                	call   eax
c000f578:	83 c4 10             	add    esp,0x10
c000f57b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f57e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f580:	83 c0 24             	add    eax,0x24
c000f583:	8b 00                	mov    eax,DWORD PTR [eax]
c000f585:	6a 00                	push   0x0
c000f587:	68 b4 ee 00 c0       	push   0xc000eeb4
c000f58c:	6a 0c                	push   0xc
c000f58e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f591:	ff d0                	call   eax
c000f593:	83 c4 10             	add    esp,0x10
c000f596:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f599:	8b 00                	mov    eax,DWORD PTR [eax]
c000f59b:	83 c0 24             	add    eax,0x24
c000f59e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5a0:	6a 00                	push   0x0
c000f5a2:	68 2c ee 00 c0       	push   0xc000ee2c
c000f5a7:	6a 0d                	push   0xd
c000f5a9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5ac:	ff d0                	call   eax
c000f5ae:	83 c4 10             	add    esp,0x10
c000f5b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5b6:	83 c0 24             	add    eax,0x24
c000f5b9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5bb:	6a 00                	push   0x0
c000f5bd:	68 65 ee 00 c0       	push   0xc000ee65
c000f5c2:	6a 0e                	push   0xe
c000f5c4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5c7:	ff d0                	call   eax
c000f5c9:	83 c4 10             	add    esp,0x10
c000f5cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5cf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5d1:	83 c0 24             	add    eax,0x24
c000f5d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5d6:	6a 00                	push   0x0
c000f5d8:	68 b4 ee 00 c0       	push   0xc000eeb4
c000f5dd:	6a 0f                	push   0xf
c000f5df:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5e2:	ff d0                	call   eax
c000f5e4:	83 c4 10             	add    esp,0x10
c000f5e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ec:	83 c0 24             	add    eax,0x24
c000f5ef:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5f1:	6a 00                	push   0x0
c000f5f3:	68 b4 ee 00 c0       	push   0xc000eeb4
c000f5f8:	6a 10                	push   0x10
c000f5fa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5fd:	ff d0                	call   eax
c000f5ff:	83 c4 10             	add    esp,0x10
c000f602:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f605:	8b 00                	mov    eax,DWORD PTR [eax]
c000f607:	83 c0 24             	add    eax,0x24
c000f60a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f60c:	6a 00                	push   0x0
c000f60e:	68 b4 ee 00 c0       	push   0xc000eeb4
c000f613:	6a 11                	push   0x11
c000f615:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f618:	ff d0                	call   eax
c000f61a:	83 c4 10             	add    esp,0x10
c000f61d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f620:	8b 00                	mov    eax,DWORD PTR [eax]
c000f622:	83 c0 24             	add    eax,0x24
c000f625:	8b 00                	mov    eax,DWORD PTR [eax]
c000f627:	6a 00                	push   0x0
c000f629:	68 b4 ee 00 c0       	push   0xc000eeb4
c000f62e:	6a 12                	push   0x12
c000f630:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f633:	ff d0                	call   eax
c000f635:	83 c4 10             	add    esp,0x10
c000f638:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f63b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f63d:	83 c0 24             	add    eax,0x24
c000f640:	8b 00                	mov    eax,DWORD PTR [eax]
c000f642:	6a 00                	push   0x0
c000f644:	68 b4 ee 00 c0       	push   0xc000eeb4
c000f649:	6a 13                	push   0x13
c000f64b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f64e:	ff d0                	call   eax
c000f650:	83 c4 10             	add    esp,0x10
c000f653:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f656:	8b 00                	mov    eax,DWORD PTR [eax]
c000f658:	83 c0 24             	add    eax,0x24
c000f65b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f65d:	6a 00                	push   0x0
c000f65f:	68 b4 ee 00 c0       	push   0xc000eeb4
c000f664:	6a 14                	push   0x14
c000f666:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f669:	ff d0                	call   eax
c000f66b:	83 c4 10             	add    esp,0x10
c000f66e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f671:	8b 00                	mov    eax,DWORD PTR [eax]
c000f673:	83 c0 24             	add    eax,0x24
c000f676:	8b 00                	mov    eax,DWORD PTR [eax]
c000f678:	6a 00                	push   0x0
c000f67a:	68 b4 ee 00 c0       	push   0xc000eeb4
c000f67f:	6a 1e                	push   0x1e
c000f681:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f684:	ff d0                	call   eax
c000f686:	83 c4 10             	add    esp,0x10
c000f689:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f68c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f68e:	83 c0 24             	add    eax,0x24
c000f691:	8b 00                	mov    eax,DWORD PTR [eax]
c000f693:	6a 00                	push   0x0
c000f695:	68 47 65 01 c0       	push   0xc0016547
c000f69a:	6a 60                	push   0x60
c000f69c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f69f:	ff d0                	call   eax
c000f6a1:	83 c4 10             	add    esp,0x10
c000f6a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6a7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f6aa:	c9                   	leave  
c000f6ab:	c3                   	ret    

c000f6ac <InterruptController::convertLegacyIRQNumber(int)>:
c000f6ac:	55                   	push   ebp
c000f6ad:	89 e5                	mov    ebp,esp
c000f6af:	83 ec 08             	sub    esp,0x8
c000f6b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6b5:	83 ec 0c             	sub    esp,0xc
c000f6b8:	50                   	push   eax
c000f6b9:	e8 fc ea ff ff       	call   c000e1ba <Device::getName()>
c000f6be:	83 c4 10             	add    esp,0x10
c000f6c1:	8a 00                	mov    al,BYTE PTR [eax]
c000f6c3:	3c 41                	cmp    al,0x41
c000f6c5:	0f 94 c0             	sete   al
c000f6c8:	84 c0                	test   al,al
c000f6ca:	74 28                	je     c000f6f4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f6cc:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f6d0:	7f 12                	jg     c000f6e4 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f6d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f6d5:	05 00 5b 02 c0       	add    eax,0xc0025b00
c000f6da:	8a 00                	mov    al,BYTE PTR [eax]
c000f6dc:	0f b6 c0             	movzx  eax,al
c000f6df:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f6e2:	eb 10                	jmp    c000f6f4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f6e4:	83 ec 0c             	sub    esp,0xc
c000f6e7:	68 40 37 02 c0       	push   0xc0023740
c000f6ec:	e8 44 4c 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000f6f1:	83 c4 10             	add    esp,0x10
c000f6f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f6f7:	c9                   	leave  
c000f6f8:	c3                   	ret    
c000f6f9:	90                   	nop

c000f6fa <startGUI(void*)>:
c000f6fa:	55                   	push   ebp
c000f6fb:	89 e5                	mov    ebp,esp
c000f6fd:	53                   	push   ebx
c000f6fe:	83 ec 04             	sub    esp,0x4
c000f701:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f706:	48                   	dec    eax
c000f707:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000f70c:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f711:	85 c0                	test   eax,eax
c000f713:	75 01                	jne    c000f716 <startGUI(void*)+0x1c>
c000f715:	fb                   	sti    
c000f716:	8b 1d 08 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026408
c000f71c:	83 ec 08             	sub    esp,0x8
c000f71f:	6a 01                	push   0x1
c000f721:	68 c0 37 02 c0       	push   0xc00237c0
c000f726:	e8 f7 7d 00 00       	call   c0017522 <Thr::loadDLL(char const*, bool)>
c000f72b:	83 c4 10             	add    esp,0x10
c000f72e:	83 ec 08             	sub    esp,0x8
c000f731:	53                   	push   ebx
c000f732:	50                   	push   eax
c000f733:	e8 1b 80 00 00       	call   c0017753 <Thr::executeDLL(unsigned long, void*)>
c000f738:	83 c4 10             	add    esp,0x10
c000f73b:	8b 1d 08 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026408
c000f741:	83 ec 08             	sub    esp,0x8
c000f744:	6a 01                	push   0x1
c000f746:	68 da 37 02 c0       	push   0xc00237da
c000f74b:	e8 d2 7d 00 00       	call   c0017522 <Thr::loadDLL(char const*, bool)>
c000f750:	83 c4 10             	add    esp,0x10
c000f753:	83 ec 08             	sub    esp,0x8
c000f756:	53                   	push   ebx
c000f757:	50                   	push   eax
c000f758:	e8 f6 7f 00 00       	call   c0017753 <Thr::executeDLL(unsigned long, void*)>
c000f75d:	83 c4 10             	add    esp,0x10
c000f760:	90                   	nop
c000f761:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f764:	c9                   	leave  
c000f765:	c3                   	ret    

c000f766 <startGUIVESA(void*)>:
c000f766:	55                   	push   ebp
c000f767:	89 e5                	mov    ebp,esp
c000f769:	53                   	push   ebx
c000f76a:	83 ec 04             	sub    esp,0x4
c000f76d:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f772:	48                   	dec    eax
c000f773:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000f778:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f77d:	85 c0                	test   eax,eax
c000f77f:	75 01                	jne    c000f782 <startGUIVESA(void*)+0x1c>
c000f781:	fb                   	sti    
c000f782:	8b 1d 08 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026408
c000f788:	83 ec 08             	sub    esp,0x8
c000f78b:	6a 01                	push   0x1
c000f78d:	68 f4 37 02 c0       	push   0xc00237f4
c000f792:	e8 8b 7d 00 00       	call   c0017522 <Thr::loadDLL(char const*, bool)>
c000f797:	83 c4 10             	add    esp,0x10
c000f79a:	83 ec 08             	sub    esp,0x8
c000f79d:	53                   	push   ebx
c000f79e:	50                   	push   eax
c000f79f:	e8 af 7f 00 00       	call   c0017753 <Thr::executeDLL(unsigned long, void*)>
c000f7a4:	83 c4 10             	add    esp,0x10
c000f7a7:	8b 1d 08 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026408
c000f7ad:	83 ec 08             	sub    esp,0x8
c000f7b0:	6a 01                	push   0x1
c000f7b2:	68 da 37 02 c0       	push   0xc00237da
c000f7b7:	e8 66 7d 00 00       	call   c0017522 <Thr::loadDLL(char const*, bool)>
c000f7bc:	83 c4 10             	add    esp,0x10
c000f7bf:	83 ec 08             	sub    esp,0x8
c000f7c2:	53                   	push   ebx
c000f7c3:	50                   	push   eax
c000f7c4:	e8 8a 7f 00 00       	call   c0017753 <Thr::executeDLL(unsigned long, void*)>
c000f7c9:	83 c4 10             	add    esp,0x10
c000f7cc:	90                   	nop
c000f7cd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f7d0:	c9                   	leave  
c000f7d1:	c3                   	ret    

c000f7d2 <sendKeyToTerminal(unsigned char)>:
c000f7d2:	55                   	push   ebp
c000f7d3:	89 e5                	mov    ebp,esp
c000f7d5:	83 ec 28             	sub    esp,0x28
c000f7d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7db:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000f7de:	a1 84 64 02 c0       	mov    eax,ds:0xc0026484
c000f7e3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000f7e7:	83 ec 08             	sub    esp,0x8
c000f7ea:	52                   	push   edx
c000f7eb:	50                   	push   eax
c000f7ec:	e8 91 b6 ff ff       	call   c000ae82 <VgaText::receiveKey(unsigned char)>
c000f7f1:	83 c4 10             	add    esp,0x10
c000f7f4:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000f7f8:	0f 85 8f 00 00 00    	jne    c000f88d <sendKeyToTerminal(unsigned char)+0xbb>
c000f7fe:	fa                   	cli    
c000f7ff:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f804:	40                   	inc    eax
c000f805:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000f80a:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c000f80f:	40                   	inc    eax
c000f810:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c000f815:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c000f81a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f81d:	c7 05 60 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026560,0x0
c000f827:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f82b:	74 1f                	je     c000f84c <sendKeyToTerminal(unsigned char)+0x7a>
c000f82d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f830:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000f833:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f836:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f839:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f83c:	83 ec 0c             	sub    esp,0xc
c000f83f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f842:	e8 7d 8b 00 00       	call   c00183c4 <unblockTask(ThreadControlBlock*)>
c000f847:	83 c4 10             	add    esp,0x10
c000f84a:	eb db                	jmp    c000f827 <sendKeyToTerminal(unsigned char)+0x55>
c000f84c:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c000f851:	48                   	dec    eax
c000f852:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c000f857:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c000f85c:	85 c0                	test   eax,eax
c000f85e:	75 18                	jne    c000f878 <sendKeyToTerminal(unsigned char)+0xa6>
c000f860:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c000f865:	85 c0                	test   eax,eax
c000f867:	74 0f                	je     c000f878 <sendKeyToTerminal(unsigned char)+0xa6>
c000f869:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c000f873:	e8 90 86 00 00       	call   c0017f08 <schedule()>
c000f878:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f87d:	48                   	dec    eax
c000f87e:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000f883:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000f888:	85 c0                	test   eax,eax
c000f88a:	75 01                	jne    c000f88d <sendKeyToTerminal(unsigned char)+0xbb>
c000f88c:	fb                   	sti    
c000f88d:	90                   	nop
c000f88e:	c9                   	leave  
c000f88f:	c3                   	ret    

c000f890 <sendKeyboardToken(KeyboardToken)>:
c000f890:	55                   	push   ebp
c000f891:	89 e5                	mov    ebp,esp
c000f893:	83 ec 18             	sub    esp,0x18
c000f896:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000f899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f89c:	0f b7 c0             	movzx  eax,ax
c000f89f:	83 f2 01             	xor    edx,0x1
c000f8a2:	88 90 80 65 02 c0    	mov    BYTE PTR [eax-0x3ffd9a80],dl
c000f8a8:	a1 68 65 02 c0       	mov    eax,ds:0xc0026568
c000f8ad:	85 c0                	test   eax,eax
c000f8af:	74 24                	je     c000f8d5 <sendKeyboardToken(KeyboardToken)+0x45>
c000f8b1:	8b 0d 68 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026568
c000f8b7:	83 ec 04             	sub    esp,0x4
c000f8ba:	68 80 65 02 c0       	push   0xc0026580
c000f8bf:	83 ec 08             	sub    esp,0x8
c000f8c2:	89 e2                	mov    edx,esp
c000f8c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8c7:	89 02                	mov    DWORD PTR [edx],eax
c000f8c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f8cc:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000f8d0:	ff d1                	call   ecx
c000f8d2:	83 c4 10             	add    esp,0x10
c000f8d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8d8:	66 3d 03 02          	cmp    ax,0x203
c000f8dc:	75 07                	jne    c000f8e5 <sendKeyboardToken(KeyboardToken)+0x55>
c000f8de:	a0 80 66 02 c0       	mov    al,ds:0xc0026680
c000f8e3:	84 c0                	test   al,al
c000f8e5:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f8e9:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000f8ec:	a0 88 69 02 c0       	mov    al,ds:0xc0026988
c000f8f1:	38 c2                	cmp    dl,al
c000f8f3:	74 1c                	je     c000f911 <sendKeyboardToken(KeyboardToken)+0x81>
c000f8f5:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000f8f8:	a2 88 69 02 c0       	mov    ds:0xc0026988,al
c000f8fd:	a0 88 69 02 c0       	mov    al,ds:0xc0026988
c000f902:	0f b6 c0             	movzx  eax,al
c000f905:	83 ec 0c             	sub    esp,0xc
c000f908:	50                   	push   eax
c000f909:	e8 b4 ab ff ff       	call   c000a4c2 <setTerminalScrollLock(bool)>
c000f90e:	83 c4 10             	add    esp,0x10
c000f911:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000f914:	84 c0                	test   al,al
c000f916:	0f 84 ae 00 00 00    	je     c000f9ca <sendKeyboardToken(KeyboardToken)+0x13a>
c000f91c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f91f:	66 3d 10 03          	cmp    ax,0x310
c000f923:	75 06                	jne    c000f92b <sendKeyboardToken(KeyboardToken)+0x9b>
c000f925:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000f92b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f92e:	66 3d 11 03          	cmp    ax,0x311
c000f932:	75 06                	jne    c000f93a <sendKeyboardToken(KeyboardToken)+0xaa>
c000f934:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000f93a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f93d:	66 3d 12 03          	cmp    ax,0x312
c000f941:	75 06                	jne    c000f949 <sendKeyboardToken(KeyboardToken)+0xb9>
c000f943:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000f949:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f94c:	66 3d 13 03          	cmp    ax,0x313
c000f950:	75 06                	jne    c000f958 <sendKeyboardToken(KeyboardToken)+0xc8>
c000f952:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000f958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f95b:	66 3d 14 03          	cmp    ax,0x314
c000f95f:	75 06                	jne    c000f967 <sendKeyboardToken(KeyboardToken)+0xd7>
c000f961:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000f967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f96a:	66 3d 15 03          	cmp    ax,0x315
c000f96e:	75 06                	jne    c000f976 <sendKeyboardToken(KeyboardToken)+0xe6>
c000f970:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000f976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f979:	66 3d 16 03          	cmp    ax,0x316
c000f97d:	75 06                	jne    c000f985 <sendKeyboardToken(KeyboardToken)+0xf5>
c000f97f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000f985:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f988:	66 3d 17 03          	cmp    ax,0x317
c000f98c:	75 06                	jne    c000f994 <sendKeyboardToken(KeyboardToken)+0x104>
c000f98e:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000f994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f997:	66 3d 18 03          	cmp    ax,0x318
c000f99b:	75 06                	jne    c000f9a3 <sendKeyboardToken(KeyboardToken)+0x113>
c000f99d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000f9a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9a6:	66 3d 19 03          	cmp    ax,0x319
c000f9aa:	75 06                	jne    c000f9b2 <sendKeyboardToken(KeyboardToken)+0x122>
c000f9ac:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000f9b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9b5:	66 3d 1a 03          	cmp    ax,0x31a
c000f9b9:	0f 85 c9 00 00 00    	jne    c000fa88 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f9bf:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000f9c5:	e9 be 00 00 00       	jmp    c000fa88 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f9ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9cd:	66 3d 10 03          	cmp    ax,0x310
c000f9d1:	75 0a                	jne    c000f9dd <sendKeyboardToken(KeyboardToken)+0x14d>
c000f9d3:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000f9d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9e0:	66 3d 11 03          	cmp    ax,0x311
c000f9e4:	75 0a                	jne    c000f9f0 <sendKeyboardToken(KeyboardToken)+0x160>
c000f9e6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000f9ec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9f3:	66 3d 12 03          	cmp    ax,0x312
c000f9f7:	75 0a                	jne    c000fa03 <sendKeyboardToken(KeyboardToken)+0x173>
c000f9f9:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000f9ff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa06:	66 3d 13 03          	cmp    ax,0x313
c000fa0a:	75 0a                	jne    c000fa16 <sendKeyboardToken(KeyboardToken)+0x186>
c000fa0c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fa12:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa19:	66 3d 14 03          	cmp    ax,0x314
c000fa1d:	75 0a                	jne    c000fa29 <sendKeyboardToken(KeyboardToken)+0x199>
c000fa1f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fa25:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa2c:	66 3d 15 03          	cmp    ax,0x315
c000fa30:	75 0a                	jne    c000fa3c <sendKeyboardToken(KeyboardToken)+0x1ac>
c000fa32:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fa38:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa3f:	66 3d 16 03          	cmp    ax,0x316
c000fa43:	75 0a                	jne    c000fa4f <sendKeyboardToken(KeyboardToken)+0x1bf>
c000fa45:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fa4b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa52:	66 3d 17 03          	cmp    ax,0x317
c000fa56:	75 0a                	jne    c000fa62 <sendKeyboardToken(KeyboardToken)+0x1d2>
c000fa58:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fa5e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa65:	66 3d 18 03          	cmp    ax,0x318
c000fa69:	75 0a                	jne    c000fa75 <sendKeyboardToken(KeyboardToken)+0x1e5>
c000fa6b:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fa71:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa78:	66 3d 19 03          	cmp    ax,0x319
c000fa7c:	75 0a                	jne    c000fa88 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fa7e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fa84:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa8b:	66 3d 00 02          	cmp    ax,0x200
c000fa8f:	75 2c                	jne    c000fabd <sendKeyboardToken(KeyboardToken)+0x22d>
c000fa91:	a0 80 69 02 c0       	mov    al,ds:0xc0026980
c000fa96:	83 f0 01             	xor    eax,0x1
c000fa99:	84 c0                	test   al,al
c000fa9b:	74 20                	je     c000fabd <sendKeyboardToken(KeyboardToken)+0x22d>
c000fa9d:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000faa2:	6a 01                	push   0x1
c000faa4:	6a 00                	push   0x0
c000faa6:	68 fa f6 00 c0       	push   0xc000f6fa
c000faab:	50                   	push   eax
c000faac:	e8 3b 82 00 00       	call   c0017cec <Process::createThread(void (*)(void*), void*, int)>
c000fab1:	83 c4 10             	add    esp,0x10
c000fab4:	c6 05 80 69 02 c0 01 	mov    BYTE PTR ds:0xc0026980,0x1
c000fabb:	eb 33                	jmp    c000faf0 <sendKeyboardToken(KeyboardToken)+0x260>
c000fabd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fac0:	66 3d 01 02          	cmp    ax,0x201
c000fac4:	75 2a                	jne    c000faf0 <sendKeyboardToken(KeyboardToken)+0x260>
c000fac6:	a0 80 69 02 c0       	mov    al,ds:0xc0026980
c000facb:	83 f0 01             	xor    eax,0x1
c000face:	84 c0                	test   al,al
c000fad0:	74 1e                	je     c000faf0 <sendKeyboardToken(KeyboardToken)+0x260>
c000fad2:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c000fad7:	6a 01                	push   0x1
c000fad9:	6a 00                	push   0x0
c000fadb:	68 66 f7 00 c0       	push   0xc000f766
c000fae0:	50                   	push   eax
c000fae1:	e8 06 82 00 00       	call   c0017cec <Process::createThread(void (*)(void*), void*, int)>
c000fae6:	83 c4 10             	add    esp,0x10
c000fae9:	c6 05 80 69 02 c0 01 	mov    BYTE PTR ds:0xc0026980,0x1
c000faf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faf3:	66 3d 1d 03          	cmp    ax,0x31d
c000faf7:	75 06                	jne    c000faff <sendKeyboardToken(KeyboardToken)+0x26f>
c000faf9:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000faff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb02:	66 3d 1c 03          	cmp    ax,0x31c
c000fb06:	75 06                	jne    c000fb0e <sendKeyboardToken(KeyboardToken)+0x27e>
c000fb08:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fb0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb11:	66 3d 1b 03          	cmp    ax,0x31b
c000fb15:	75 06                	jne    c000fb1d <sendKeyboardToken(KeyboardToken)+0x28d>
c000fb17:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fb1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb20:	66 3d 1e 03          	cmp    ax,0x31e
c000fb24:	75 06                	jne    c000fb2c <sendKeyboardToken(KeyboardToken)+0x29c>
c000fb26:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fb2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb2f:	66 3d 1f 03          	cmp    ax,0x31f
c000fb33:	75 06                	jne    c000fb3b <sendKeyboardToken(KeyboardToken)+0x2ab>
c000fb35:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fb3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb3e:	66 3d 1a 03          	cmp    ax,0x31a
c000fb42:	75 06                	jne    c000fb4a <sendKeyboardToken(KeyboardToken)+0x2ba>
c000fb44:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fb4a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fb4e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fb51:	83 f0 01             	xor    eax,0x1
c000fb54:	84 c0                	test   al,al
c000fb56:	74 77                	je     c000fbcf <sendKeyboardToken(KeyboardToken)+0x33f>
c000fb58:	a0 81 66 02 c0       	mov    al,ds:0xc0026681
c000fb5d:	84 c0                	test   al,al
c000fb5f:	74 41                	je     c000fba2 <sendKeyboardToken(KeyboardToken)+0x312>
c000fb61:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fb65:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fb69:	74 2b                	je     c000fb96 <sendKeyboardToken(KeyboardToken)+0x306>
c000fb6b:	8b 15 84 69 02 c0    	mov    edx,DWORD PTR ds:0xc0026984
c000fb71:	89 d0                	mov    eax,edx
c000fb73:	c1 e0 02             	shl    eax,0x2
c000fb76:	01 d0                	add    eax,edx
c000fb78:	01 c0                	add    eax,eax
c000fb7a:	a3 84 69 02 c0       	mov    ds:0xc0026984,eax
c000fb7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb82:	0f b7 c0             	movzx  eax,ax
c000fb85:	8d 50 d0             	lea    edx,[eax-0x30]
c000fb88:	a1 84 69 02 c0       	mov    eax,ds:0xc0026984
c000fb8d:	01 d0                	add    eax,edx
c000fb8f:	a3 84 69 02 c0       	mov    ds:0xc0026984,eax
c000fb94:	eb 6d                	jmp    c000fc03 <sendKeyboardToken(KeyboardToken)+0x373>
c000fb96:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c000fba0:	eb 61                	jmp    c000fc03 <sendKeyboardToken(KeyboardToken)+0x373>
c000fba2:	a1 84 69 02 c0       	mov    eax,ds:0xc0026984
c000fba7:	85 c0                	test   eax,eax
c000fba9:	74 18                	je     c000fbc3 <sendKeyboardToken(KeyboardToken)+0x333>
c000fbab:	a1 84 69 02 c0       	mov    eax,ds:0xc0026984
c000fbb0:	0f b6 c0             	movzx  eax,al
c000fbb3:	83 ec 0c             	sub    esp,0xc
c000fbb6:	50                   	push   eax
c000fbb7:	e8 16 fc ff ff       	call   c000f7d2 <sendKeyToTerminal(unsigned char)>
c000fbbc:	83 c4 10             	add    esp,0x10
c000fbbf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fbc3:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c000fbcd:	eb 34                	jmp    c000fc03 <sendKeyboardToken(KeyboardToken)+0x373>
c000fbcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbd2:	66 3d 01 01          	cmp    ax,0x101
c000fbd6:	75 2b                	jne    c000fc03 <sendKeyboardToken(KeyboardToken)+0x373>
c000fbd8:	a1 84 69 02 c0       	mov    eax,ds:0xc0026984
c000fbdd:	85 c0                	test   eax,eax
c000fbdf:	74 18                	je     c000fbf9 <sendKeyboardToken(KeyboardToken)+0x369>
c000fbe1:	a1 84 69 02 c0       	mov    eax,ds:0xc0026984
c000fbe6:	0f b6 c0             	movzx  eax,al
c000fbe9:	83 ec 0c             	sub    esp,0xc
c000fbec:	50                   	push   eax
c000fbed:	e8 e0 fb ff ff       	call   c000f7d2 <sendKeyToTerminal(unsigned char)>
c000fbf2:	83 c4 10             	add    esp,0x10
c000fbf5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fbf9:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c000fc03:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fc06:	83 f0 01             	xor    eax,0x1
c000fc09:	84 c0                	test   al,al
c000fc0b:	74 4c                	je     c000fc59 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc0d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc10:	83 f0 01             	xor    eax,0x1
c000fc13:	84 c0                	test   al,al
c000fc15:	74 42                	je     c000fc59 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc17:	a0 80 66 02 c0       	mov    al,ds:0xc0026680
c000fc1c:	83 f0 01             	xor    eax,0x1
c000fc1f:	84 c0                	test   al,al
c000fc21:	74 36                	je     c000fc59 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc26:	66 83 f8 1f          	cmp    ax,0x1f
c000fc2a:	76 09                	jbe    c000fc35 <sendKeyboardToken(KeyboardToken)+0x3a5>
c000fc2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc2f:	66 83 f8 7e          	cmp    ax,0x7e
c000fc33:	76 12                	jbe    c000fc47 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fc35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc38:	66 83 f8 0a          	cmp    ax,0xa
c000fc3c:	74 09                	je     c000fc47 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fc3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc41:	66 83 f8 08          	cmp    ax,0x8
c000fc45:	75 12                	jne    c000fc59 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc4a:	0f b6 c0             	movzx  eax,al
c000fc4d:	83 ec 0c             	sub    esp,0xc
c000fc50:	50                   	push   eax
c000fc51:	e8 7c fb ff ff       	call   c000f7d2 <sendKeyToTerminal(unsigned char)>
c000fc56:	83 c4 10             	add    esp,0x10
c000fc59:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fc5c:	83 f0 01             	xor    eax,0x1
c000fc5f:	84 c0                	test   al,al
c000fc61:	74 4f                	je     c000fcb2 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc63:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc66:	83 f0 01             	xor    eax,0x1
c000fc69:	84 c0                	test   al,al
c000fc6b:	74 45                	je     c000fcb2 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc6d:	a0 80 66 02 c0       	mov    al,ds:0xc0026680
c000fc72:	84 c0                	test   al,al
c000fc74:	74 3c                	je     c000fcb2 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc79:	66 83 f8 3f          	cmp    ax,0x3f
c000fc7d:	76 33                	jbe    c000fcb2 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc82:	66 83 f8 7f          	cmp    ax,0x7f
c000fc86:	77 2a                	ja     c000fcb2 <sendKeyboardToken(KeyboardToken)+0x422>
c000fc88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc8b:	88 c2                	mov    dl,al
c000fc8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc90:	66 83 f8 5f          	cmp    ax,0x5f
c000fc94:	76 04                	jbe    c000fc9a <sendKeyboardToken(KeyboardToken)+0x40a>
c000fc96:	b0 20                	mov    al,0x20
c000fc98:	eb 02                	jmp    c000fc9c <sendKeyboardToken(KeyboardToken)+0x40c>
c000fc9a:	b0 00                	mov    al,0x0
c000fc9c:	29 c2                	sub    edx,eax
c000fc9e:	88 d0                	mov    al,dl
c000fca0:	83 e8 40             	sub    eax,0x40
c000fca3:	0f b6 c0             	movzx  eax,al
c000fca6:	83 ec 0c             	sub    esp,0xc
c000fca9:	50                   	push   eax
c000fcaa:	e8 23 fb ff ff       	call   c000f7d2 <sendKeyToTerminal(unsigned char)>
c000fcaf:	83 c4 10             	add    esp,0x10
c000fcb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcb5:	66 3d 00 03          	cmp    ax,0x300
c000fcb9:	75 0f                	jne    c000fcca <sendKeyboardToken(KeyboardToken)+0x43a>
c000fcbb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fcbe:	83 f0 01             	xor    eax,0x1
c000fcc1:	84 c0                	test   al,al
c000fcc3:	74 05                	je     c000fcca <sendKeyboardToken(KeyboardToken)+0x43a>
c000fcc5:	e8 69 ab ff ff       	call   c000a833 <doTerminalCycle()>
c000fcca:	90                   	nop
c000fccb:	c9                   	leave  
c000fccc:	c3                   	ret    

c000fccd <clearInternalKeybuffer(VgaText*)>:
c000fccd:	55                   	push   ebp
c000fcce:	89 e5                	mov    ebp,esp
c000fcd0:	83 ec 08             	sub    esp,0x8
c000fcd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcd6:	05 98 01 00 00       	add    eax,0x198
c000fcdb:	83 ec 0c             	sub    esp,0xc
c000fcde:	50                   	push   eax
c000fcdf:	e8 bc 09 ff ff       	call   c00006a0 <strlen>
c000fce4:	83 c4 10             	add    esp,0x10
c000fce7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fcea:	81 c2 98 01 00 00    	add    edx,0x198
c000fcf0:	83 ec 04             	sub    esp,0x4
c000fcf3:	50                   	push   eax
c000fcf4:	6a 00                	push   0x0
c000fcf6:	52                   	push   edx
c000fcf7:	e8 88 09 ff ff       	call   c0000684 <memset>
c000fcfc:	83 c4 10             	add    esp,0x10
c000fcff:	90                   	nop
c000fd00:	c9                   	leave  
c000fd01:	c3                   	ret    

c000fd02 <readKeyboard(VgaText*, char*, unsigned long)>:
c000fd02:	55                   	push   ebp
c000fd03:	89 e5                	mov    ebp,esp
c000fd05:	83 ec 18             	sub    esp,0x18
c000fd08:	a1 68 65 02 c0       	mov    eax,ds:0xc0026568
c000fd0d:	85 c0                	test   eax,eax
c000fd0f:	74 2a                	je     c000fd3b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000fd11:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000fd17:	8b 0d 68 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026568
c000fd1d:	83 ec 04             	sub    esp,0x4
c000fd20:	68 80 65 02 c0       	push   0xc0026580
c000fd25:	83 ec 08             	sub    esp,0x8
c000fd28:	89 e2                	mov    edx,esp
c000fd2a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000fd2d:	89 02                	mov    DWORD PTR [edx],eax
c000fd2f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fd32:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fd36:	ff d1                	call   ecx
c000fd38:	83 c4 10             	add    esp,0x10
c000fd3b:	fb                   	sti    
c000fd3c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000fd43:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000fd47:	0f 84 a1 00 00 00    	je     c000fdee <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000fd4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd50:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fd56:	84 c0                	test   al,al
c000fd58:	75 28                	jne    c000fd82 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000fd5a:	fa                   	cli    
c000fd5b:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000fd60:	40                   	inc    eax
c000fd61:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000fd66:	e8 9d 81 00 00       	call   c0017f08 <schedule()>
c000fd6b:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000fd70:	48                   	dec    eax
c000fd71:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c000fd76:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c000fd7b:	85 c0                	test   eax,eax
c000fd7d:	75 ce                	jne    c000fd4d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fd7f:	fb                   	sti    
c000fd80:	eb cb                	jmp    c000fd4d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fd82:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fd85:	8d 50 01             	lea    edx,[eax+0x1]
c000fd88:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000fd8b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd8e:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c000fd94:	88 10                	mov    BYTE PTR [eax],dl
c000fd96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd99:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fd9f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000fda2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fda5:	05 98 01 00 00       	add    eax,0x198
c000fdaa:	83 ec 0c             	sub    esp,0xc
c000fdad:	50                   	push   eax
c000fdae:	e8 ed 08 ff ff       	call   c00006a0 <strlen>
c000fdb3:	83 c4 10             	add    esp,0x10
c000fdb6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fdb9:	81 c2 98 01 00 00    	add    edx,0x198
c000fdbf:	8d 4a 01             	lea    ecx,[edx+0x1]
c000fdc2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fdc5:	81 c2 98 01 00 00    	add    edx,0x198
c000fdcb:	83 ec 04             	sub    esp,0x4
c000fdce:	50                   	push   eax
c000fdcf:	51                   	push   ecx
c000fdd0:	52                   	push   edx
c000fdd1:	e8 e6 07 ff ff       	call   c00005bc <memmove>
c000fdd6:	83 c4 10             	add    esp,0x10
c000fdd9:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000fddc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000fddf:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000fde3:	0f 85 5a ff ff ff    	jne    c000fd43 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000fde9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdec:	eb 03                	jmp    c000fdf1 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000fdee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdf1:	c9                   	leave  
c000fdf2:	c3                   	ret    
c000fdf3:	90                   	nop

c000fdf4 <Keyboard::Keyboard(char const*)>:
c000fdf4:	83 ec 0c             	sub    esp,0xc
c000fdf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdfb:	83 ec 08             	sub    esp,0x8
c000fdfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe02:	50                   	push   eax
c000fe03:	e8 b6 e2 ff ff       	call   c000e0be <Device::Device(char const*)>
c000fe08:	83 c4 10             	add    esp,0x10
c000fe0b:	ba 18 38 02 c0       	mov    edx,0xc0023818
c000fe10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe14:	89 10                	mov    DWORD PTR [eax],edx
c000fe16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe1a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000fe24:	c6 05 64 65 02 c0 01 	mov    BYTE PTR ds:0xc0026564,0x1
c000fe2b:	90                   	nop
c000fe2c:	83 c4 0c             	add    esp,0xc
c000fe2f:	c3                   	ret    

c000fe30 <Keyboard::~Keyboard()>:
c000fe30:	83 ec 0c             	sub    esp,0xc
c000fe33:	ba 18 38 02 c0       	mov    edx,0xc0023818
c000fe38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe3c:	89 10                	mov    DWORD PTR [eax],edx
c000fe3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe42:	83 ec 0c             	sub    esp,0xc
c000fe45:	50                   	push   eax
c000fe46:	e8 3d df ff ff       	call   c000dd88 <Device::~Device()>
c000fe4b:	83 c4 10             	add    esp,0x10
c000fe4e:	90                   	nop
c000fe4f:	83 c4 0c             	add    esp,0xc
c000fe52:	c3                   	ret    
c000fe53:	90                   	nop

c000fe54 <Keyboard::~Keyboard()>:
c000fe54:	83 ec 0c             	sub    esp,0xc
c000fe57:	83 ec 0c             	sub    esp,0xc
c000fe5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe5e:	e8 cd ff ff ff       	call   c000fe30 <Keyboard::~Keyboard()>
c000fe63:	83 c4 10             	add    esp,0x10
c000fe66:	83 ec 08             	sub    esp,0x8
c000fe69:	68 5c 01 00 00       	push   0x15c
c000fe6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe72:	e8 1b cb ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c000fe77:	83 c4 10             	add    esp,0x10
c000fe7a:	83 c4 0c             	add    esp,0xc
c000fe7d:	c3                   	ret    

c000fe7e <LogicalDisk::close(int, int, void*)>:
c000fe7e:	83 c8 ff             	or     eax,0xffffffff
c000fe81:	c3                   	ret    

c000fe82 <LogicalDisk::~LogicalDisk()>:
c000fe82:	83 ec 0c             	sub    esp,0xc
c000fe85:	ba 90 38 02 c0       	mov    edx,0xc0023890
c000fe8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe8e:	89 10                	mov    DWORD PTR [eax],edx
c000fe90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe94:	83 ec 0c             	sub    esp,0xc
c000fe97:	50                   	push   eax
c000fe98:	e8 eb de ff ff       	call   c000dd88 <Device::~Device()>
c000fe9d:	83 c4 10             	add    esp,0x10
c000fea0:	90                   	nop
c000fea1:	83 c4 0c             	add    esp,0xc
c000fea4:	c3                   	ret    
c000fea5:	90                   	nop

c000fea6 <LogicalDisk::~LogicalDisk()>:
c000fea6:	83 ec 0c             	sub    esp,0xc
c000fea9:	83 ec 0c             	sub    esp,0xc
c000feac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feb0:	e8 cd ff ff ff       	call   c000fe82 <LogicalDisk::~LogicalDisk()>
c000feb5:	83 c4 10             	add    esp,0x10
c000feb8:	83 ec 08             	sub    esp,0x8
c000febb:	68 74 01 00 00       	push   0x174
c000fec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fec4:	e8 c9 ca ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c000fec9:	83 c4 10             	add    esp,0x10
c000fecc:	83 c4 0c             	add    esp,0xc
c000fecf:	c3                   	ret    

c000fed0 <LogicalDisk::open(int, int, void*)>:
c000fed0:	83 ec 18             	sub    esp,0x18
c000fed3:	68 44 38 02 c0       	push   0xc0023844
c000fed8:	e8 58 44 00 00       	call   c0014335 <Krnl::panic(char const*)>
c000fedd:	83 c8 ff             	or     eax,0xffffffff
c000fee0:	83 c4 1c             	add    esp,0x1c
c000fee3:	c3                   	ret    

c000fee4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000fee4:	53                   	push   ebx
c000fee5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fee9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000feed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fef1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000fef7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000fefd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ff03:	77 10                	ja     c000ff15 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ff05:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ff0b:	89 d3                	mov    ebx,edx
c000ff0d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ff13:	72 05                	jb     c000ff1a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ff15:	83 c8 ff             	or     eax,0xffffffff
c000ff18:	89 c2                	mov    edx,eax
c000ff1a:	5b                   	pop    ebx
c000ff1b:	c3                   	ret    

c000ff1c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ff1c:	56                   	push   esi
c000ff1d:	83 c8 ff             	or     eax,0xffffffff
c000ff20:	53                   	push   ebx
c000ff21:	89 c2                	mov    edx,eax
c000ff23:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ff27:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ff2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff2f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ff35:	77 27                	ja     c000ff5e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ff37:	89 d8                	mov    eax,ebx
c000ff39:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ff3f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ff45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ff4a:	89 c2                	mov    edx,eax
c000ff4c:	73 10                	jae    c000ff5e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ff4e:	89 c8                	mov    eax,ecx
c000ff50:	89 da                	mov    edx,ebx
c000ff52:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ff58:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ff5e:	5b                   	pop    ebx
c000ff5f:	5e                   	pop    esi
c000ff60:	c3                   	ret    
c000ff61:	90                   	nop

c000ff62 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ff62:	83 ec 1c             	sub    esp,0x1c
c000ff65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ff69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ff79:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff7c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ff80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff88:	83 ec 08             	sub    esp,0x8
c000ff8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff8f:	50                   	push   eax
c000ff90:	e8 29 e1 ff ff       	call   c000e0be <Device::Device(char const*)>
c000ff95:	83 c4 10             	add    esp,0x10
c000ff98:	ba 90 38 02 c0       	mov    edx,0xc0023890
c000ff9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffa1:	89 10                	mov    DWORD PTR [eax],edx
c000ffa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffa7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ffae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffb2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ffb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffbd:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ffc7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ffcb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffcf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffd3:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ffd9:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ffdf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ffe3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ffe6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ffea:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000fff0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000fff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fffa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000fffe:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0010004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010008:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010012:	90                   	nop
c0010013:	83 c4 1c             	add    esp,0x1c
c0010016:	c3                   	ret    
c0010017:	90                   	nop

c0010018 <LogicalDisk::assignDriveLetter()>:
c0010018:	55                   	push   ebp
c0010019:	57                   	push   edi
c001001a:	56                   	push   esi
c001001b:	53                   	push   ebx
c001001c:	83 ec 14             	sub    esp,0x14
c001001f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010023:	8b 3d a0 69 02 c0    	mov    edi,DWORD PTR ds:0xc00269a0
c0010029:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001002f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010033:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0010039:	8b 3d a4 69 02 c0    	mov    edi,DWORD PTR ds:0xc00269a4
c001003f:	3c 01                	cmp    al,0x1
c0010041:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010045:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010049:	19 c0                	sbb    eax,eax
c001004b:	83 e0 02             	and    eax,0x2
c001004e:	83 c0 41             	add    eax,0x41
c0010051:	0f be e8             	movsx  ebp,al
c0010054:	3c 43                	cmp    al,0x43
c0010056:	75 10                	jne    c0010068 <LogicalDisk::assignDriveLetter()+0x50>
c0010058:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001005f:	75 5d                	jne    c00100be <LogicalDisk::assignDriveLetter()+0xa6>
c0010061:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0010066:	75 56                	jne    c00100be <LogicalDisk::assignDriveLetter()+0xa6>
c0010068:	8d 75 bf             	lea    esi,[ebp-0x41]
c001006b:	ba 01 00 00 00       	mov    edx,0x1
c0010070:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010074:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010078:	d3 e2                	shl    edx,cl
c001007a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001007e:	89 d7                	mov    edi,edx
c0010080:	89 d6                	mov    esi,edx
c0010082:	c1 ff 1f             	sar    edi,0x1f
c0010085:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010089:	21 f9                	and    ecx,edi
c001008b:	09 d1                	or     ecx,edx
c001008d:	75 2f                	jne    c00100be <LogicalDisk::assignDriveLetter()+0xa6>
c001008f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010093:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010097:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001009d:	09 f2                	or     edx,esi
c001009f:	89 15 a0 69 02 c0    	mov    DWORD PTR ds:0xc00269a0,edx
c00100a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100a9:	09 fa                	or     edx,edi
c00100ab:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00100af:	89 15 a4 69 02 c0    	mov    DWORD PTR ds:0xc00269a4,edx
c00100b5:	89 1c bd c0 69 02 c0 	mov    DWORD PTR [edi*4-0x3ffd9640],ebx
c00100bc:	eb 08                	jmp    c00100c6 <LogicalDisk::assignDriveLetter()+0xae>
c00100be:	45                   	inc    ebp
c00100bf:	40                   	inc    eax
c00100c0:	3c 5b                	cmp    al,0x5b
c00100c2:	75 90                	jne    c0010054 <LogicalDisk::assignDriveLetter()+0x3c>
c00100c4:	31 c0                	xor    eax,eax
c00100c6:	83 c4 14             	add    esp,0x14
c00100c9:	5b                   	pop    ebx
c00100ca:	5e                   	pop    esi
c00100cb:	5f                   	pop    edi
c00100cc:	5d                   	pop    ebp
c00100cd:	c3                   	ret    

c00100ce <LogicalDisk::mount()>:
c00100ce:	56                   	push   esi
c00100cf:	53                   	push   ebx
c00100d0:	53                   	push   ebx
c00100d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100d5:	8b 1d 34 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026534
c00100db:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00100e5:	85 db                	test   ebx,ebx
c00100e7:	74 27                	je     c0010110 <LogicalDisk::mount()+0x42>
c00100e9:	51                   	push   ecx
c00100ea:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00100f1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00100f3:	83 e8 41             	sub    eax,0x41
c00100f6:	50                   	push   eax
c00100f7:	56                   	push   esi
c00100f8:	53                   	push   ebx
c00100f9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00100fc:	83 c4 10             	add    esp,0x10
c00100ff:	84 c0                	test   al,al
c0010101:	74 08                	je     c001010b <LogicalDisk::mount()+0x3d>
c0010103:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0010109:	eb 07                	jmp    c0010112 <LogicalDisk::mount()+0x44>
c001010b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001010e:	eb d5                	jmp    c00100e5 <LogicalDisk::mount()+0x17>
c0010110:	31 c0                	xor    eax,eax
c0010112:	5a                   	pop    edx
c0010113:	5b                   	pop    ebx
c0010114:	5e                   	pop    esi
c0010115:	c3                   	ret    

c0010116 <LogicalDisk::unmount()>:
c0010116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001011a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010124:	c3                   	ret    
c0010125:	90                   	nop

c0010126 <LogicalDisk::eject()>:
c0010126:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001012a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010130:	8b 10                	mov    edx,DWORD PTR [eax]
c0010132:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010136:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010139:	90                   	nop

c001013a <LogicalDisk::unassignDriveLetter()>:
c001013a:	57                   	push   edi
c001013b:	56                   	push   esi
c001013c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010140:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010147:	84 c9                	test   cl,cl
c0010149:	75 0f                	jne    c001015a <LogicalDisk::unassignDriveLetter()+0x20>
c001014b:	c7 44 24 0c 68 38 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023868
c0010153:	5e                   	pop    esi
c0010154:	5f                   	pop    edi
c0010155:	e9 db 41 00 00       	jmp    c0014335 <Krnl::panic(char const*)>
c001015a:	83 e9 41             	sub    ecx,0x41
c001015d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010164:	b8 01 00 00 00       	mov    eax,0x1
c0010169:	c7 04 8d c0 69 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd9640],0x0
c0010174:	d3 e0                	shl    eax,cl
c0010176:	89 c7                	mov    edi,eax
c0010178:	f7 d0                	not    eax
c001017a:	c1 ff 1f             	sar    edi,0x1f
c001017d:	21 05 a0 69 02 c0    	and    DWORD PTR ds:0xc00269a0,eax
c0010183:	89 fe                	mov    esi,edi
c0010185:	f7 d6                	not    esi
c0010187:	21 35 a4 69 02 c0    	and    DWORD PTR ds:0xc00269a4,esi
c001018d:	5e                   	pop    esi
c001018e:	5f                   	pop    edi
c001018f:	c3                   	ret    

c0010190 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010190:	57                   	push   edi
c0010191:	56                   	push   esi
c0010192:	53                   	push   ebx
c0010193:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010197:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001019b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001019f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101a3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00101a9:	77 41                	ja     c00101ec <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00101ab:	99                   	cdq    
c00101ac:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00101b2:	01 c8                	add    eax,ecx
c00101b4:	11 da                	adc    edx,ebx
c00101b6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00101bc:	19 d7                	sbb    edi,edx
c00101be:	72 33                	jb     c00101f3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00101c0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00101c6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00101cc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00101d0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00101d4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00101da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00101e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00101e4:	5b                   	pop    ebx
c00101e5:	5e                   	pop    esi
c00101e6:	5f                   	pop    edi
c00101e7:	e9 3c 0b 00 00       	jmp    c0010d28 <VCache::read(unsigned long long, int, void*)>
c00101ec:	b8 05 00 00 00       	mov    eax,0x5
c00101f1:	eb 05                	jmp    c00101f8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00101f3:	b8 07 00 00 00       	mov    eax,0x7
c00101f8:	5b                   	pop    ebx
c00101f9:	5e                   	pop    esi
c00101fa:	5f                   	pop    edi
c00101fb:	c3                   	ret    

c00101fc <LogicalDisk::write(unsigned long long, int, void*)>:
c00101fc:	57                   	push   edi
c00101fd:	56                   	push   esi
c00101fe:	53                   	push   ebx
c00101ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010203:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010207:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001020b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001020f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010215:	77 41                	ja     c0010258 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010217:	99                   	cdq    
c0010218:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001021e:	01 c8                	add    eax,ecx
c0010220:	11 da                	adc    edx,ebx
c0010222:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010228:	19 d7                	sbb    edi,edx
c001022a:	72 33                	jb     c001025f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001022c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010232:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010238:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001023c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010240:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010246:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001024c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010250:	5b                   	pop    ebx
c0010251:	5e                   	pop    esi
c0010252:	5f                   	pop    edi
c0010253:	e9 8c 09 00 00       	jmp    c0010be4 <VCache::write(unsigned long long, int, void*)>
c0010258:	b8 05 00 00 00       	mov    eax,0x5
c001025d:	eb 05                	jmp    c0010264 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001025f:	b8 07 00 00 00       	mov    eax,0x7
c0010264:	5b                   	pop    ebx
c0010265:	5e                   	pop    esi
c0010266:	5f                   	pop    edi
c0010267:	c3                   	ret    

c0010268 <Mouse::Mouse(char const*)>:
c0010268:	83 ec 0c             	sub    esp,0xc
c001026b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001026f:	83 ec 08             	sub    esp,0x8
c0010272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010276:	50                   	push   eax
c0010277:	e8 42 de ff ff       	call   c000e0be <Device::Device(char const*)>
c001027c:	83 c4 10             	add    esp,0x10
c001027f:	ba bc 38 02 c0       	mov    edx,0xc00238bc
c0010284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010288:	89 10                	mov    DWORD PTR [eax],edx
c001028a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001028e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010298:	90                   	nop
c0010299:	83 c4 0c             	add    esp,0xc
c001029c:	c3                   	ret    
c001029d:	90                   	nop
c001029e:	66 90                	xchg   ax,ax

c00102a0 <Mouse::~Mouse()>:
c00102a0:	83 ec 0c             	sub    esp,0xc
c00102a3:	ba bc 38 02 c0       	mov    edx,0xc00238bc
c00102a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ac:	89 10                	mov    DWORD PTR [eax],edx
c00102ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b2:	83 ec 0c             	sub    esp,0xc
c00102b5:	50                   	push   eax
c00102b6:	e8 cd da ff ff       	call   c000dd88 <Device::~Device()>
c00102bb:	83 c4 10             	add    esp,0x10
c00102be:	90                   	nop
c00102bf:	83 c4 0c             	add    esp,0xc
c00102c2:	c3                   	ret    
c00102c3:	90                   	nop

c00102c4 <Mouse::~Mouse()>:
c00102c4:	83 ec 0c             	sub    esp,0xc
c00102c7:	83 ec 0c             	sub    esp,0xc
c00102ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ce:	e8 cd ff ff ff       	call   c00102a0 <Mouse::~Mouse()>
c00102d3:	83 c4 10             	add    esp,0x10
c00102d6:	83 ec 08             	sub    esp,0x8
c00102d9:	68 58 01 00 00       	push   0x158
c00102de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102e2:	e8 ab c6 ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c00102e7:	83 c4 10             	add    esp,0x10
c00102ea:	83 c4 0c             	add    esp,0xc
c00102ed:	c3                   	ret    

c00102ee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00102ee:	55                   	push   ebp
c00102ef:	57                   	push   edi
c00102f0:	56                   	push   esi
c00102f1:	53                   	push   ebx
c00102f2:	81 ec 28 01 00 00    	sub    esp,0x128
c00102f8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00102ff:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010306:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001030d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010314:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010318:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001031c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010323:	e8 92 de ff ff       	call   c000e1ba <Device::getName()>
c0010328:	5a                   	pop    edx
c0010329:	59                   	pop    ecx
c001032a:	50                   	push   eax
c001032b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001032f:	55                   	push   ebp
c0010330:	e8 0b 04 ff ff       	call   c0000740 <strcpy>
c0010335:	5b                   	pop    ebx
c0010336:	58                   	pop    eax
c0010337:	68 e0 38 02 c0       	push   0xc00238e0
c001033c:	55                   	push   ebp
c001033d:	e8 3e 05 ff ff       	call   c0000880 <strcat>
c0010342:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010349:	e8 75 96 ff ff       	call   c00099c3 <malloc>
c001034e:	83 c4 0c             	add    esp,0xc
c0010351:	89 c3                	mov    ebx,eax
c0010353:	57                   	push   edi
c0010354:	56                   	push   esi
c0010355:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010359:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001035d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010364:	55                   	push   ebp
c0010365:	50                   	push   eax
c0010366:	e8 f7 fb ff ff       	call   c000ff62 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001036b:	83 c4 14             	add    esp,0x14
c001036e:	53                   	push   ebx
c001036f:	e8 a4 fc ff ff       	call   c0010018 <LogicalDisk::assignDriveLetter()>
c0010374:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010377:	e8 52 fd ff ff       	call   c00100ce <LogicalDisk::mount()>
c001037c:	58                   	pop    eax
c001037d:	5a                   	pop    edx
c001037e:	53                   	push   ebx
c001037f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010386:	e8 2f db ff ff       	call   c000deba <Device::addChild(Device*)>
c001038b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010391:	5b                   	pop    ebx
c0010392:	5e                   	pop    esi
c0010393:	5f                   	pop    edi
c0010394:	5d                   	pop    ebp
c0010395:	c3                   	ret    

c0010396 <createPartitionsForDisk(PhysicalDisk*)>:
c0010396:	55                   	push   ebp
c0010397:	57                   	push   edi
c0010398:	56                   	push   esi
c0010399:	53                   	push   ebx
c001039a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00103a0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00103a7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00103ad:	3d 00 02 00 00       	cmp    eax,0x200
c00103b2:	74 27                	je     c00103db <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00103b4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00103ba:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00103c0:	83 ec 10             	sub    esp,0x10
c00103c3:	0f a4 f7 0a          	shld   edi,esi,0xa
c00103c7:	99                   	cdq    
c00103c8:	c1 e6 0a             	shl    esi,0xa
c00103cb:	52                   	push   edx
c00103cc:	89 fd                	mov    ebp,edi
c00103ce:	50                   	push   eax
c00103cf:	55                   	push   ebp
c00103d0:	56                   	push   esi
c00103d1:	e8 5e 0b 01 00       	call   c0020f34 <__udivdi3>
c00103d6:	e9 b1 00 00 00       	jmp    c001048c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00103db:	83 ec 0c             	sub    esp,0xc
c00103de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103e0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00103e4:	56                   	push   esi
c00103e5:	6a 01                	push   0x1
c00103e7:	6a 00                	push   0x0
c00103e9:	6a 00                	push   0x0
c00103eb:	53                   	push   ebx
c00103ec:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00103ef:	83 c4 20             	add    esp,0x20
c00103f2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00103fa:	75 0a                	jne    c0010406 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00103fc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010404:	74 2c                	je     c0010432 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010406:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001040c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010412:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010418:	83 ec 10             	sub    esp,0x10
c001041b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001041f:	89 f7                	mov    edi,esi
c0010421:	c1 e0 0a             	shl    eax,0xa
c0010424:	c1 ff 1f             	sar    edi,0x1f
c0010427:	57                   	push   edi
c0010428:	56                   	push   esi
c0010429:	52                   	push   edx
c001042a:	50                   	push   eax
c001042b:	e8 04 0b 01 00       	call   c0020f34 <__udivdi3>
c0010430:	eb 5a                	jmp    c001048c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010432:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010439:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010440:	83 e1 7f             	and    ecx,0x7f
c0010443:	83 e0 7f             	and    eax,0x7f
c0010446:	01 c1                	add    ecx,eax
c0010448:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001044f:	83 e0 7f             	and    eax,0x7f
c0010452:	01 c1                	add    ecx,eax
c0010454:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001045b:	83 e0 7f             	and    eax,0x7f
c001045e:	00 c1                	add    cl,al
c0010460:	74 41                	je     c00104a3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010462:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010468:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001046e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010474:	83 ec 10             	sub    esp,0x10
c0010477:	0f a4 c2 0a          	shld   edx,eax,0xa
c001047b:	89 f7                	mov    edi,esi
c001047d:	c1 e0 0a             	shl    eax,0xa
c0010480:	c1 ff 1f             	sar    edi,0x1f
c0010483:	57                   	push   edi
c0010484:	56                   	push   esi
c0010485:	52                   	push   edx
c0010486:	50                   	push   eax
c0010487:	e8 a8 0a 01 00       	call   c0020f34 <__udivdi3>
c001048c:	83 c4 14             	add    esp,0x14
c001048f:	52                   	push   edx
c0010490:	50                   	push   eax
c0010491:	6a 00                	push   0x0
c0010493:	6a 00                	push   0x0
c0010495:	53                   	push   ebx
c0010496:	e8 53 fe ff ff       	call   c00102ee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001049b:	83 c4 20             	add    esp,0x20
c001049e:	e9 79 01 00 00       	jmp    c001061c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00104a3:	89 f0                	mov    eax,esi
c00104a5:	31 f6                	xor    esi,esi
c00104a7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00104ae:	75 02                	jne    c00104b2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00104b0:	89 f1                	mov    ecx,esi
c00104b2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00104b9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00104c0:	c1 e2 08             	shl    edx,0x8
c00104c3:	c1 e7 10             	shl    edi,0x10
c00104c6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00104ce:	09 fa                	or     edx,edi
c00104d0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00104d8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00104df:	83 c0 10             	add    eax,0x10
c00104e2:	09 fa                	or     edx,edi
c00104e4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00104eb:	c1 e7 18             	shl    edi,0x18
c00104ee:	09 fa                	or     edx,edi
c00104f0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00104f7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00104fb:	c1 e7 10             	shl    edi,0x10
c00104fe:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010505:	c1 e2 08             	shl    edx,0x8
c0010508:	09 fa                	or     edx,edi
c001050a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010511:	09 fa                	or     edx,edi
c0010513:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001051a:	c1 e7 18             	shl    edi,0x18
c001051d:	09 fa                	or     edx,edi
c001051f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010523:	46                   	inc    esi
c0010524:	83 fe 04             	cmp    esi,0x4
c0010527:	0f 85 7a ff ff ff    	jne    c00104a7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001052d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010531:	83 f0 01             	xor    eax,0x1
c0010534:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010538:	75 57                	jne    c0010591 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001053a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001053e:	83 f0 01             	xor    eax,0x1
c0010541:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010545:	75 4a                	jne    c0010591 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010547:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001054b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010553:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001055b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010561:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010567:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001056d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010571:	89 f7                	mov    edi,esi
c0010573:	c1 e0 0a             	shl    eax,0xa
c0010576:	c1 ff 1f             	sar    edi,0x1f
c0010579:	57                   	push   edi
c001057a:	56                   	push   esi
c001057b:	52                   	push   edx
c001057c:	50                   	push   eax
c001057d:	e8 b2 09 01 00       	call   c0020f34 <__udivdi3>
c0010582:	83 c4 10             	add    esp,0x10
c0010585:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010589:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001058d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010591:	84 c9                	test   cl,cl
c0010593:	74 53                	je     c00105e8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010595:	0f b6 c9             	movzx  ecx,cl
c0010598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001059c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00105a0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00105a4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00105a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00105ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00105b0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00105b4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00105b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00105c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00105c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105c8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00105cc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00105d0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00105d4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00105d8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00105dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00105e0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00105e4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00105e8:	31 ed                	xor    ebp,ebp
c00105ea:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00105ee:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00105f2:	89 f8                	mov    eax,edi
c00105f4:	09 f0                	or     eax,esi
c00105f6:	74 1e                	je     c0010616 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00105f8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00105fc:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010600:	89 d1                	mov    ecx,edx
c0010602:	09 c1                	or     ecx,eax
c0010604:	74 10                	je     c0010616 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010606:	83 ec 0c             	sub    esp,0xc
c0010609:	57                   	push   edi
c001060a:	56                   	push   esi
c001060b:	52                   	push   edx
c001060c:	50                   	push   eax
c001060d:	53                   	push   ebx
c001060e:	e8 db fc ff ff       	call   c00102ee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010613:	83 c4 20             	add    esp,0x20
c0010616:	45                   	inc    ebp
c0010617:	83 fd 04             	cmp    ebp,0x4
c001061a:	75 ce                	jne    c00105ea <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001061c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010622:	5b                   	pop    ebx
c0010623:	5e                   	pop    esi
c0010624:	5f                   	pop    edi
c0010625:	5d                   	pop    ebp
c0010626:	c3                   	ret    
c0010627:	90                   	nop

c0010628 <Serial::Serial(char const*)>:
c0010628:	83 ec 0c             	sub    esp,0xc
c001062b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001062f:	83 ec 08             	sub    esp,0x8
c0010632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010636:	50                   	push   eax
c0010637:	e8 82 da ff ff       	call   c000e0be <Device::Device(char const*)>
c001063c:	83 c4 10             	add    esp,0x10
c001063f:	ba f4 38 02 c0       	mov    edx,0xc00238f4
c0010644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010648:	89 10                	mov    DWORD PTR [eax],edx
c001064a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001064e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010658:	90                   	nop
c0010659:	83 c4 0c             	add    esp,0xc
c001065c:	c3                   	ret    
c001065d:	90                   	nop
c001065e:	66 90                	xchg   ax,ax

c0010660 <Serial::~Serial()>:
c0010660:	83 ec 0c             	sub    esp,0xc
c0010663:	ba f4 38 02 c0       	mov    edx,0xc00238f4
c0010668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066c:	89 10                	mov    DWORD PTR [eax],edx
c001066e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010672:	83 ec 0c             	sub    esp,0xc
c0010675:	50                   	push   eax
c0010676:	e8 0d d7 ff ff       	call   c000dd88 <Device::~Device()>
c001067b:	83 c4 10             	add    esp,0x10
c001067e:	90                   	nop
c001067f:	83 c4 0c             	add    esp,0xc
c0010682:	c3                   	ret    
c0010683:	90                   	nop

c0010684 <Serial::~Serial()>:
c0010684:	83 ec 0c             	sub    esp,0xc
c0010687:	83 ec 0c             	sub    esp,0xc
c001068a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001068e:	e8 cd ff ff ff       	call   c0010660 <Serial::~Serial()>
c0010693:	83 c4 10             	add    esp,0x10
c0010696:	83 ec 08             	sub    esp,0x8
c0010699:	68 58 01 00 00       	push   0x158
c001069e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106a2:	e8 eb c2 ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c00106a7:	83 c4 10             	add    esp,0x10
c00106aa:	83 c4 0c             	add    esp,0xc
c00106ad:	c3                   	ret    
c00106ae:	66 90                	xchg   ax,ax

c00106b0 <Timer::Timer(char const*)>:
c00106b0:	83 ec 0c             	sub    esp,0xc
c00106b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106b7:	83 ec 08             	sub    esp,0x8
c00106ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106be:	50                   	push   eax
c00106bf:	e8 fa d9 ff ff       	call   c000e0be <Device::Device(char const*)>
c00106c4:	83 c4 10             	add    esp,0x10
c00106c7:	ba 38 39 02 c0       	mov    edx,0xc0023938
c00106cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106d0:	89 10                	mov    DWORD PTR [eax],edx
c00106d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106d6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00106e0:	90                   	nop
c00106e1:	83 c4 0c             	add    esp,0xc
c00106e4:	c3                   	ret    
c00106e5:	90                   	nop
c00106e6:	66 90                	xchg   ax,ax

c00106e8 <Timer::~Timer()>:
c00106e8:	83 ec 0c             	sub    esp,0xc
c00106eb:	ba 38 39 02 c0       	mov    edx,0xc0023938
c00106f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f4:	89 10                	mov    DWORD PTR [eax],edx
c00106f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106fa:	83 ec 0c             	sub    esp,0xc
c00106fd:	50                   	push   eax
c00106fe:	e8 85 d6 ff ff       	call   c000dd88 <Device::~Device()>
c0010703:	83 c4 10             	add    esp,0x10
c0010706:	90                   	nop
c0010707:	83 c4 0c             	add    esp,0xc
c001070a:	c3                   	ret    
c001070b:	90                   	nop

c001070c <Timer::~Timer()>:
c001070c:	83 ec 0c             	sub    esp,0xc
c001070f:	83 ec 0c             	sub    esp,0xc
c0010712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010716:	e8 cd ff ff ff       	call   c00106e8 <Timer::~Timer()>
c001071b:	83 c4 10             	add    esp,0x10
c001071e:	83 ec 08             	sub    esp,0x8
c0010721:	68 5c 01 00 00       	push   0x15c
c0010726:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001072a:	e8 63 c2 ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c001072f:	83 c4 10             	add    esp,0x10
c0010732:	83 c4 0c             	add    esp,0xc
c0010735:	c3                   	ret    

c0010736 <Timer::read()>:
c0010736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001073a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010740:	c3                   	ret    

c0010741 <timerHandler(unsigned int)>:
c0010741:	56                   	push   esi
c0010742:	53                   	push   ebx
c0010743:	51                   	push   ecx
c0010744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010748:	01 05 2c 6a 02 c0    	add    DWORD PTR ds:0xc0026a2c,eax
c001074e:	80 3d 0d 64 02 c0 00 	cmp    BYTE PTR ds:0xc002640d,0x0
c0010755:	0f 84 49 01 00 00    	je     c00108a4 <timerHandler(unsigned int)+0x163>
c001075b:	fa                   	cli    
c001075c:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0010762:	83 ec 0c             	sub    esp,0xc
c0010765:	ff 05 c4 78 02 c0    	inc    DWORD PTR ds:0xc00278c4
c001076b:	68 d8 78 02 c0       	push   0xc00278d8
c0010770:	e8 8f 0d 01 00       	call   c0021504 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010775:	83 c4 10             	add    esp,0x10
c0010778:	84 c0                	test   al,al
c001077a:	0f 85 a0 00 00 00    	jne    c0010820 <timerHandler(unsigned int)+0xdf>
c0010780:	83 ec 0c             	sub    esp,0xc
c0010783:	68 d8 78 02 c0       	push   0xc00278d8
c0010788:	e8 93 0d 01 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001078d:	83 c4 10             	add    esp,0x10
c0010790:	89 c6                	mov    esi,eax
c0010792:	66 90                	xchg   ax,ax
c0010794:	83 ec 0c             	sub    esp,0xc
c0010797:	68 d8 78 02 c0       	push   0xc00278d8
c001079c:	e8 7f 0d 01 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00107a1:	c7 04 24 d8 78 02 c0 	mov    DWORD PTR [esp],0xc00278d8
c00107a8:	89 c3                	mov    ebx,eax
c00107aa:	e8 79 0d 01 00       	call   c0021528 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00107af:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00107b2:	83 c4 10             	add    esp,0x10
c00107b5:	3b 05 2c 6a 02 c0    	cmp    eax,DWORD PTR ds:0xc0026a2c
c00107bb:	77 23                	ja     c00107e0 <timerHandler(unsigned int)+0x9f>
c00107bd:	83 ec 0c             	sub    esp,0xc
c00107c0:	53                   	push   ebx
c00107c1:	e8 fe 7b 00 00       	call   c00183c4 <unblockTask(ThreadControlBlock*)>
c00107c6:	83 c4 10             	add    esp,0x10
c00107c9:	39 de                	cmp    esi,ebx
c00107cb:	75 27                	jne    c00107f4 <timerHandler(unsigned int)+0xb3>
c00107cd:	83 ec 0c             	sub    esp,0xc
c00107d0:	68 d8 78 02 c0       	push   0xc00278d8
c00107d5:	e8 46 0d 01 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00107da:	89 c6                	mov    esi,eax
c00107dc:	eb 12                	jmp    c00107f0 <timerHandler(unsigned int)+0xaf>
c00107de:	66 90                	xchg   ax,ax
c00107e0:	52                   	push   edx
c00107e1:	52                   	push   edx
c00107e2:	53                   	push   ebx
c00107e3:	68 d8 78 02 c0       	push   0xc00278d8
c00107e8:	e8 f3 0d 01 00       	call   c00215e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00107ed:	8d 76 00             	lea    esi,[esi+0x0]
c00107f0:	83 c4 10             	add    esp,0x10
c00107f3:	90                   	nop
c00107f4:	83 ec 0c             	sub    esp,0xc
c00107f7:	68 d8 78 02 c0       	push   0xc00278d8
c00107fc:	e8 03 0d 01 00       	call   c0021504 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010801:	83 c4 10             	add    esp,0x10
c0010804:	84 c0                	test   al,al
c0010806:	75 18                	jne    c0010820 <timerHandler(unsigned int)+0xdf>
c0010808:	83 ec 0c             	sub    esp,0xc
c001080b:	68 d8 78 02 c0       	push   0xc00278d8
c0010810:	e8 0b 0d 01 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010815:	83 c4 10             	add    esp,0x10
c0010818:	39 f0                	cmp    eax,esi
c001081a:	0f 85 74 ff ff ff    	jne    c0010794 <timerHandler(unsigned int)+0x53>
c0010820:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010825:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010829:	74 41                	je     c001086c <timerHandler(unsigned int)+0x12b>
c001082b:	80 3d 0c 64 02 c0 00 	cmp    BYTE PTR ds:0xc002640c,0x0
c0010832:	74 38                	je     c001086c <timerHandler(unsigned int)+0x12b>
c0010834:	fa                   	cli    
c0010835:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c001083b:	a1 2c 6a 02 c0       	mov    eax,ds:0xc0026a2c
c0010840:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010846:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010849:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001084f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010852:	72 08                	jb     c001085c <timerHandler(unsigned int)+0x11b>
c0010854:	e8 af 76 00 00       	call   c0017f08 <schedule()>
c0010859:	8d 76 00             	lea    esi,[esi+0x0]
c001085c:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0010861:	48                   	dec    eax
c0010862:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0010867:	75 03                	jne    c001086c <timerHandler(unsigned int)+0x12b>
c0010869:	fb                   	sti    
c001086a:	66 90                	xchg   ax,ax
c001086c:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c0010871:	48                   	dec    eax
c0010872:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c0010877:	75 1b                	jne    c0010894 <timerHandler(unsigned int)+0x153>
c0010879:	83 3d c0 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278c0,0x0
c0010880:	74 12                	je     c0010894 <timerHandler(unsigned int)+0x153>
c0010882:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c001088c:	e8 77 76 00 00       	call   c0017f08 <schedule()>
c0010891:	8d 76 00             	lea    esi,[esi+0x0]
c0010894:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0010899:	48                   	dec    eax
c001089a:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001089f:	75 03                	jne    c00108a4 <timerHandler(unsigned int)+0x163>
c00108a1:	fb                   	sti    
c00108a2:	66 90                	xchg   ax,ax
c00108a4:	58                   	pop    eax
c00108a5:	5b                   	pop    ebx
c00108a6:	5e                   	pop    esi
c00108a7:	c3                   	ret    

c00108a8 <setupTimer(int)>:
c00108a8:	57                   	push   edi
c00108a9:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c00108ae:	56                   	push   esi
c00108af:	53                   	push   ebx
c00108b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00108b4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00108ba:	83 ec 0c             	sub    esp,0xc
c00108bd:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00108c3:	e8 f2 d8 ff ff       	call   c000e1ba <Device::getName()>
c00108c8:	83 c4 10             	add    esp,0x10
c00108cb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00108ce:	0f 85 94 00 00 00    	jne    c0010968 <setupTimer(int)+0xc0>
c00108d4:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c00108d9:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00108e0:	0f 84 82 00 00 00    	je     c0010968 <setupTimer(int)+0xc0>
c00108e6:	83 ec 0c             	sub    esp,0xc
c00108e9:	68 5c 01 00 00       	push   0x15c
c00108ee:	e8 d0 90 ff ff       	call   c00099c3 <malloc>
c00108f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00108f6:	89 c3                	mov    ebx,eax
c00108f8:	e8 0f 02 01 00       	call   c0020b0c <PIT::PIT()>
c00108fd:	59                   	pop    ecx
c00108fe:	5f                   	pop    edi
c00108ff:	53                   	push   ebx
c0010900:	ff 35 08 64 02 c0    	push   DWORD PTR ds:0xc0026408
c0010906:	e8 af d5 ff ff       	call   c000deba <Device::addChild(Device*)>
c001090b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001090d:	6a 00                	push   0x0
c001090f:	6a 00                	push   0x0
c0010911:	56                   	push   esi
c0010912:	53                   	push   ebx
c0010913:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010916:	83 c4 14             	add    esp,0x14
c0010919:	68 60 01 00 00       	push   0x160
c001091e:	e8 a0 90 ff ff       	call   c00099c3 <malloc>
c0010923:	89 04 24             	mov    DWORD PTR [esp],eax
c0010926:	89 c7                	mov    edi,eax
c0010928:	e8 93 00 01 00       	call   c00209c0 <APICTimer::APICTimer()>
c001092d:	6a 00                	push   0x0
c001092f:	6a 00                	push   0x0
c0010931:	56                   	push   esi
c0010932:	57                   	push   edi
c0010933:	e8 88 ff 00 00       	call   c00208c0 <APICTimer::open(int, int, void*)>
c0010938:	83 c4 20             	add    esp,0x20
c001093b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001093d:	6a 00                	push   0x0
c001093f:	6a 00                	push   0x0
c0010941:	6a 00                	push   0x0
c0010943:	53                   	push   ebx
c0010944:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010947:	58                   	pop    eax
c0010948:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c001094d:	5a                   	pop    edx
c001094e:	57                   	push   edi
c001094f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010955:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001095b:	e8 5a d5 ff ff       	call   c000deba <Device::addChild(Device*)>
c0010960:	83 c4 10             	add    esp,0x10
c0010963:	eb 37                	jmp    c001099c <setupTimer(int)+0xf4>
c0010965:	8d 76 00             	lea    esi,[esi+0x0]
c0010968:	83 ec 0c             	sub    esp,0xc
c001096b:	68 5c 01 00 00       	push   0x15c
c0010970:	e8 4e 90 ff ff       	call   c00099c3 <malloc>
c0010975:	89 04 24             	mov    DWORD PTR [esp],eax
c0010978:	89 c3                	mov    ebx,eax
c001097a:	e8 8d 01 01 00       	call   c0020b0c <PIT::PIT()>
c001097f:	58                   	pop    eax
c0010980:	5a                   	pop    edx
c0010981:	53                   	push   ebx
c0010982:	ff 35 08 64 02 c0    	push   DWORD PTR ds:0xc0026408
c0010988:	e8 2d d5 ff ff       	call   c000deba <Device::addChild(Device*)>
c001098d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001098f:	6a 00                	push   0x0
c0010991:	6a 00                	push   0x0
c0010993:	56                   	push   esi
c0010994:	53                   	push   ebx
c0010995:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010998:	83 c4 20             	add    esp,0x20
c001099b:	90                   	nop
c001099c:	89 d8                	mov    eax,ebx
c001099e:	5b                   	pop    ebx
c001099f:	5e                   	pop    esi
c00109a0:	5f                   	pop    edi
c00109a1:	c3                   	ret    
c00109a2:	66 90                	xchg   ax,ax

c00109a4 <VCache::VCache(PhysicalDisk*)>:
c00109a4:	53                   	push   ebx
c00109a5:	83 ec 18             	sub    esp,0x18
c00109a8:	ba 88 3a 02 c0       	mov    edx,0xc0023a88
c00109ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109b1:	89 10                	mov    DWORD PTR [eax],edx
c00109b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109b7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00109be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109c2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00109c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109cd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00109d4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00109db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109df:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00109e6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00109ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109f1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00109f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109fc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010a00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a04:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010a0b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010a12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a16:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010a1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a1e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010a22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a26:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010a2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a2e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010a35:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010a3d:	83 ec 0c             	sub    esp,0xc
c0010a40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010a44:	e8 7a 8f ff ff       	call   c00099c3 <malloc>
c0010a49:	83 c4 10             	add    esp,0x10
c0010a4c:	89 c3                	mov    ebx,eax
c0010a4e:	83 ec 0c             	sub    esp,0xc
c0010a51:	53                   	push   ebx
c0010a52:	e8 81 72 00 00       	call   c0017cd8 <Mutex::Mutex()>
c0010a57:	83 c4 10             	add    esp,0x10
c0010a5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a5e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010a61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a65:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010a69:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010a6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a70:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010a77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a7b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010a81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a85:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010a88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a8c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010a92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010a98:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010a9c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010a9f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010aa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010aa6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010aaa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010aae:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010ab4:	05 00 01 00 00       	add    eax,0x100
c0010ab9:	c1 e0 04             	shl    eax,0x4
c0010abc:	83 ec 0c             	sub    esp,0xc
c0010abf:	50                   	push   eax
c0010ac0:	e8 fe 8e ff ff       	call   c00099c3 <malloc>
c0010ac5:	83 c4 10             	add    esp,0x10
c0010ac8:	89 c2                	mov    edx,eax
c0010aca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ace:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010ad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ad5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010adc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ae0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010ae4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ae8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010aee:	c1 e0 06             	shl    eax,0x6
c0010af1:	83 ec 0c             	sub    esp,0xc
c0010af4:	50                   	push   eax
c0010af5:	e8 c9 8e ff ff       	call   c00099c3 <malloc>
c0010afa:	83 c4 10             	add    esp,0x10
c0010afd:	89 c2                	mov    edx,eax
c0010aff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b03:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010b06:	90                   	nop
c0010b07:	83 c4 18             	add    esp,0x18
c0010b0a:	5b                   	pop    ebx
c0010b0b:	c3                   	ret    

c0010b0c <VCache::invalidateReadBuffer()>:
c0010b0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b10:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010b16:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010b1a:	c3                   	ret    
c0010b1b:	90                   	nop

c0010b1c <VCache::writeWriteBuffer()>:
c0010b1c:	53                   	push   ebx
c0010b1d:	83 ec 0c             	sub    esp,0xc
c0010b20:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010b24:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010b27:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b2a:	68 60 39 02 c0       	push   0xc0023960
c0010b2f:	e8 3f bf ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0010b34:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010b37:	5a                   	pop    edx
c0010b38:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b3a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010b3d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b40:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010b43:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010b46:	50                   	push   eax
c0010b47:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010b4a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010b51:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010b58:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010b5c:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010b63:	83 c4 28             	add    esp,0x28
c0010b66:	5b                   	pop    ebx
c0010b67:	c3                   	ret    

c0010b68 <VCache::~VCache()>:
c0010b68:	83 ec 0c             	sub    esp,0xc
c0010b6b:	ba 88 3a 02 c0       	mov    edx,0xc0023a88
c0010b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b74:	89 10                	mov    DWORD PTR [eax],edx
c0010b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b7a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010b7d:	84 c0                	test   al,al
c0010b7f:	74 0f                	je     c0010b90 <VCache::~VCache()+0x28>
c0010b81:	83 ec 0c             	sub    esp,0xc
c0010b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b88:	e8 8f ff ff ff       	call   c0010b1c <VCache::writeWriteBuffer()>
c0010b8d:	83 c4 10             	add    esp,0x10
c0010b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b94:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010b97:	83 ec 0c             	sub    esp,0xc
c0010b9a:	50                   	push   eax
c0010b9b:	e8 33 8e ff ff       	call   c00099d3 <free>
c0010ba0:	83 c4 10             	add    esp,0x10
c0010ba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ba7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010baa:	83 ec 0c             	sub    esp,0xc
c0010bad:	50                   	push   eax
c0010bae:	e8 20 8e ff ff       	call   c00099d3 <free>
c0010bb3:	83 c4 10             	add    esp,0x10
c0010bb6:	90                   	nop
c0010bb7:	83 c4 0c             	add    esp,0xc
c0010bba:	c3                   	ret    
c0010bbb:	90                   	nop

c0010bbc <VCache::~VCache()>:
c0010bbc:	83 ec 0c             	sub    esp,0xc
c0010bbf:	83 ec 0c             	sub    esp,0xc
c0010bc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bc6:	e8 9d ff ff ff       	call   c0010b68 <VCache::~VCache()>
c0010bcb:	83 c4 10             	add    esp,0x10
c0010bce:	83 ec 08             	sub    esp,0x8
c0010bd1:	6a 44                	push   0x44
c0010bd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd7:	e8 b6 bd ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c0010bdc:	83 c4 10             	add    esp,0x10
c0010bdf:	83 c4 0c             	add    esp,0xc
c0010be2:	c3                   	ret    
c0010be3:	90                   	nop

c0010be4 <VCache::write(unsigned long long, int, void*)>:
c0010be4:	55                   	push   ebp
c0010be5:	31 c0                	xor    eax,eax
c0010be7:	57                   	push   edi
c0010be8:	56                   	push   esi
c0010be9:	53                   	push   ebx
c0010bea:	83 ec 0c             	sub    esp,0xc
c0010bed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010bf1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010bf5:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
c0010bf9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0010c00:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010c04:	7d 16                	jge    c0010c1c <VCache::write(unsigned long long, int, void*)+0x38>
c0010c06:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010c09:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010c0f:	0f af c8             	imul   ecx,eax
c0010c12:	89 ca                	mov    edx,ecx
c0010c14:	01 f2                	add    edx,esi
c0010c16:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010c18:	40                   	inc    eax
c0010c19:	eb e5                	jmp    c0010c00 <VCache::write(unsigned long long, int, void*)+0x1c>
c0010c1b:	90                   	nop
c0010c1c:	83 ec 0c             	sub    esp,0xc
c0010c1f:	68 84 39 02 c0       	push   0xc0023984
c0010c24:	e8 4a be ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0010c29:	83 c4 10             	add    esp,0x10
c0010c2c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010c30:	74 0e                	je     c0010c40 <VCache::write(unsigned long long, int, void*)+0x5c>
c0010c32:	83 ec 0c             	sub    esp,0xc
c0010c35:	53                   	push   ebx
c0010c36:	e8 d1 fe ff ff       	call   c0010b0c <VCache::invalidateReadBuffer()>
c0010c3b:	83 c4 10             	add    esp,0x10
c0010c3e:	66 90                	xchg   ax,ax
c0010c40:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010c44:	74 66                	je     c0010cac <VCache::write(unsigned long long, int, void*)+0xc8>
c0010c46:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c49:	99                   	cdq    
c0010c4a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010c4d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010c50:	31 f8                	xor    eax,edi
c0010c52:	89 d1                	mov    ecx,edx
c0010c54:	89 ca                	mov    edx,ecx
c0010c56:	31 ea                	xor    edx,ebp
c0010c58:	09 d0                	or     eax,edx
c0010c5a:	75 44                	jne    c0010ca0 <VCache::write(unsigned long long, int, void*)+0xbc>
c0010c5c:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010c61:	75 3d                	jne    c0010ca0 <VCache::write(unsigned long long, int, void*)+0xbc>
c0010c63:	83 ec 0c             	sub    esp,0xc
c0010c66:	68 ab 39 02 c0       	push   0xc00239ab
c0010c6b:	e8 03 be ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0010c70:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010c73:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0010c76:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010c7c:	0f af f9             	imul   edi,ecx
c0010c7f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010c82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c84:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c87:	83 c4 10             	add    esp,0x10
c0010c8a:	40                   	inc    eax
c0010c8b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010c8e:	83 f8 40             	cmp    eax,0x40
c0010c91:	75 7d                	jne    c0010d10 <VCache::write(unsigned long long, int, void*)+0x12c>
c0010c93:	83 ec 0c             	sub    esp,0xc
c0010c96:	53                   	push   ebx
c0010c97:	e8 80 fe ff ff       	call   c0010b1c <VCache::writeWriteBuffer()>
c0010c9c:	eb 42                	jmp    c0010ce0 <VCache::write(unsigned long long, int, void*)+0xfc>
c0010c9e:	66 90                	xchg   ax,ax
c0010ca0:	83 ec 0c             	sub    esp,0xc
c0010ca3:	53                   	push   ebx
c0010ca4:	e8 73 fe ff ff       	call   c0010b1c <VCache::writeWriteBuffer()>
c0010ca9:	83 c4 10             	add    esp,0x10
c0010cac:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0010cb1:	7f 35                	jg     c0010ce8 <VCache::write(unsigned long long, int, void*)+0x104>
c0010cb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010cb7:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0010cba:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010cbd:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c0010cc0:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010cc4:	52                   	push   edx
c0010cc5:	56                   	push   esi
c0010cc6:	6a 01                	push   0x1
c0010cc8:	68 c1 39 02 c0       	push   0xc00239c1
c0010ccd:	e8 a1 bd ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0010cd2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010cd5:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010cd8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010cde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ce0:	83 c4 10             	add    esp,0x10
c0010ce3:	eb 2b                	jmp    c0010d10 <VCache::write(unsigned long long, int, void*)+0x12c>
c0010ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ce8:	50                   	push   eax
c0010ce9:	56                   	push   esi
c0010cea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010cee:	68 e2 39 02 c0       	push   0xc00239e2
c0010cf3:	e8 7b bd ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0010cf8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010cfb:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cfd:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010d04:	55                   	push   ebp
c0010d05:	57                   	push   edi
c0010d06:	50                   	push   eax
c0010d07:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010d0a:	83 c4 20             	add    esp,0x20
c0010d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0010d10:	83 ec 0c             	sub    esp,0xc
c0010d13:	68 ff 39 02 c0       	push   0xc00239ff
c0010d18:	e8 56 bd ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0010d1d:	83 c4 1c             	add    esp,0x1c
c0010d20:	31 c0                	xor    eax,eax
c0010d22:	5b                   	pop    ebx
c0010d23:	5e                   	pop    esi
c0010d24:	5f                   	pop    edi
c0010d25:	5d                   	pop    ebp
c0010d26:	c3                   	ret    
c0010d27:	90                   	nop

c0010d28 <VCache::read(unsigned long long, int, void*)>:
c0010d28:	55                   	push   ebp
c0010d29:	57                   	push   edi
c0010d2a:	56                   	push   esi
c0010d2b:	53                   	push   ebx
c0010d2c:	83 ec 1c             	sub    esp,0x1c
c0010d2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010d33:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010d37:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d3a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d3e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010d42:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010d46:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0010d4a:	31 c0                	xor    eax,eax
c0010d4c:	39 f0                	cmp    eax,esi
c0010d4e:	7d 18                	jge    c0010d68 <VCache::read(unsigned long long, int, void*)+0x40>
c0010d50:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010d53:	8b ba 5c 01 00 00    	mov    edi,DWORD PTR [edx+0x15c]
c0010d59:	0f af f8             	imul   edi,eax
c0010d5c:	89 fa                	mov    edx,edi
c0010d5e:	01 ea                	add    edx,ebp
c0010d60:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010d62:	40                   	inc    eax
c0010d63:	eb e7                	jmp    c0010d4c <VCache::read(unsigned long long, int, void*)+0x24>
c0010d65:	8d 76 00             	lea    esi,[esi+0x0]
c0010d68:	83 ec 0c             	sub    esp,0xc
c0010d6b:	68 1f 3a 02 c0       	push   0xc0023a1f
c0010d70:	e8 fe bc ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0010d75:	83 c4 10             	add    esp,0x10
c0010d78:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010d7c:	74 0e                	je     c0010d8c <VCache::read(unsigned long long, int, void*)+0x64>
c0010d7e:	83 ec 0c             	sub    esp,0xc
c0010d81:	53                   	push   ebx
c0010d82:	e8 95 fd ff ff       	call   c0010b1c <VCache::writeWriteBuffer()>
c0010d87:	83 c4 10             	add    esp,0x10
c0010d8a:	66 90                	xchg   ax,ax
c0010d8c:	83 fe 01             	cmp    esi,0x1
c0010d8f:	75 7b                	jne    c0010e0c <VCache::read(unsigned long long, int, void*)+0xe4>
c0010d91:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d94:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010d9b:	75 6f                	jne    c0010e0c <VCache::read(unsigned long long, int, void*)+0xe4>
c0010d9d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0010da0:	89 d1                	mov    ecx,edx
c0010da2:	f7 d9                	neg    ecx
c0010da4:	89 cf                	mov    edi,ecx
c0010da6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010daa:	c1 ff 1f             	sar    edi,0x1f
c0010dad:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0010db0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010db4:	89 ce                	mov    esi,ecx
c0010db6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010dba:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0010dbe:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010dc2:	89 cf                	mov    edi,ecx
c0010dc4:	74 0a                	je     c0010dd0 <VCache::read(unsigned long long, int, void*)+0xa8>
c0010dc6:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0010dc9:	75 05                	jne    c0010dd0 <VCache::read(unsigned long long, int, void*)+0xa8>
c0010dcb:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0010dce:	74 1c                	je     c0010dec <VCache::read(unsigned long long, int, void*)+0xc4>
c0010dd0:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0010dd4:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0010dd7:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0010dda:	83 ec 0c             	sub    esp,0xc
c0010ddd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0010ddf:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010de2:	52                   	push   edx
c0010de3:	57                   	push   edi
c0010de4:	56                   	push   esi
c0010de5:	50                   	push   eax
c0010de6:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0010de9:	83 c4 20             	add    esp,0x20
c0010dec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010def:	89 ef                	mov    edi,ebp
c0010df1:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010df7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0010dfa:	8d 70 ff             	lea    esi,[eax-0x1]
c0010dfd:	23 34 24             	and    esi,DWORD PTR [esp]
c0010e00:	0f af f1             	imul   esi,ecx
c0010e03:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0010e06:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e08:	eb 32                	jmp    c0010e3c <VCache::read(unsigned long long, int, void*)+0x114>
c0010e0a:	66 90                	xchg   ax,ax
c0010e0c:	83 ec 0c             	sub    esp,0xc
c0010e0f:	53                   	push   ebx
c0010e10:	e8 f7 fc ff ff       	call   c0010b0c <VCache::invalidateReadBuffer()>
c0010e15:	83 c4 0c             	add    esp,0xc
c0010e18:	55                   	push   ebp
c0010e19:	56                   	push   esi
c0010e1a:	68 45 3a 02 c0       	push   0xc0023a45
c0010e1f:	e8 4f bc ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0010e24:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010e27:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e29:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010e2c:	56                   	push   esi
c0010e2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e35:	50                   	push   eax
c0010e36:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0010e39:	83 c4 20             	add    esp,0x20
c0010e3c:	83 ec 0c             	sub    esp,0xc
c0010e3f:	68 61 3a 02 c0       	push   0xc0023a61
c0010e44:	e8 2a bc ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0010e49:	83 c4 2c             	add    esp,0x2c
c0010e4c:	31 c0                	xor    eax,eax
c0010e4e:	5b                   	pop    ebx
c0010e4f:	5e                   	pop    esi
c0010e50:	5f                   	pop    edi
c0010e51:	5d                   	pop    ebp
c0010e52:	c3                   	ret    
c0010e53:	90                   	nop

c0010e54 <Video::putrect(int, int, int, int, unsigned int)>:
c0010e54:	55                   	push   ebp
c0010e55:	57                   	push   edi
c0010e56:	56                   	push   esi
c0010e57:	53                   	push   ebx
c0010e58:	83 ec 1c             	sub    esp,0x1c
c0010e5b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010e5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010e63:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010e67:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010e6b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e73:	01 df                	add    edi,ebx
c0010e75:	39 fb                	cmp    ebx,edi
c0010e77:	7d 1f                	jge    c0010e98 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0010e79:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010e7d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0010e81:	7d 12                	jge    c0010e95 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0010e83:	8b 16                	mov    edx,DWORD PTR [esi]
c0010e85:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010e89:	53                   	push   ebx
c0010e8a:	55                   	push   ebp
c0010e8b:	45                   	inc    ebp
c0010e8c:	56                   	push   esi
c0010e8d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010e90:	83 c4 10             	add    esp,0x10
c0010e93:	eb e8                	jmp    c0010e7d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0010e95:	43                   	inc    ebx
c0010e96:	eb dd                	jmp    c0010e75 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0010e98:	83 c4 1c             	add    esp,0x1c
c0010e9b:	5b                   	pop    ebx
c0010e9c:	5e                   	pop    esi
c0010e9d:	5f                   	pop    edi
c0010e9e:	5d                   	pop    ebp
c0010e9f:	c3                   	ret    

c0010ea0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0010ea0:	55                   	push   ebp
c0010ea1:	57                   	push   edi
c0010ea2:	31 ff                	xor    edi,edi
c0010ea4:	56                   	push   esi
c0010ea5:	53                   	push   ebx
c0010ea6:	83 ec 1c             	sub    esp,0x1c
c0010ea9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0010ead:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010eb1:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0010eb8:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0010ebd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ec1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010ec5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010ec9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0010ecc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010ed0:	01 f9                	add    ecx,edi
c0010ed2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0010ed6:	7d 2f                	jge    c0010f07 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0010ed8:	31 f6                	xor    esi,esi
c0010eda:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010ede:	01 f2                	add    edx,esi
c0010ee0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0010ee4:	7d 1a                	jge    c0010f00 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0010ee6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010ee9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0010eec:	46                   	inc    esi
c0010eed:	51                   	push   ecx
c0010eee:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010ef2:	52                   	push   edx
c0010ef3:	55                   	push   ebp
c0010ef4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010ef7:	83 c4 10             	add    esp,0x10
c0010efa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010efe:	eb da                	jmp    c0010eda <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0010f00:	47                   	inc    edi
c0010f01:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0010f05:	eb c5                	jmp    c0010ecc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0010f07:	83 c4 1c             	add    esp,0x1c
c0010f0a:	5b                   	pop    ebx
c0010f0b:	5e                   	pop    esi
c0010f0c:	5f                   	pop    edi
c0010f0d:	5d                   	pop    ebp
c0010f0e:	c3                   	ret    
c0010f0f:	90                   	nop

c0010f10 <Video::blit(unsigned int*, int, int, int, int)>:
c0010f10:	55                   	push   ebp
c0010f11:	57                   	push   edi
c0010f12:	56                   	push   esi
c0010f13:	53                   	push   ebx
c0010f14:	83 ec 1c             	sub    esp,0x1c
c0010f17:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f1b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f1f:	85 c0                	test   eax,eax
c0010f21:	79 02                	jns    c0010f25 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0010f23:	31 c0                	xor    eax,eax
c0010f25:	c1 e0 02             	shl    eax,0x2
c0010f28:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0010f2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010f34:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0010f38:	39 d8                	cmp    eax,ebx
c0010f3a:	7e 49                	jle    c0010f85 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010f3c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010f42:	7c 41                	jl     c0010f85 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010f44:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010f48:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010f4c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010f50:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0010f54:	39 f9                	cmp    ecx,edi
c0010f56:	7e 22                	jle    c0010f7a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0010f58:	83 c5 04             	add    ebp,0x4
c0010f5b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010f61:	7c 14                	jl     c0010f77 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0010f63:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0010f65:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0010f68:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010f6c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010f70:	56                   	push   esi
c0010f71:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0010f74:	83 c4 10             	add    esp,0x10
c0010f77:	47                   	inc    edi
c0010f78:	eb d2                	jmp    c0010f4c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0010f7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f7e:	43                   	inc    ebx
c0010f7f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010f83:	eb ab                	jmp    c0010f30 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0010f85:	83 c4 1c             	add    esp,0x1c
c0010f88:	5b                   	pop    ebx
c0010f89:	5e                   	pop    esi
c0010f8a:	5f                   	pop    edi
c0010f8b:	5d                   	pop    ebp
c0010f8c:	c3                   	ret    
c0010f8d:	90                   	nop

c0010f8e <Video::clearScreen(unsigned int)>:
c0010f8e:	57                   	push   edi
c0010f8f:	56                   	push   esi
c0010f90:	53                   	push   ebx
c0010f91:	31 db                	xor    ebx,ebx
c0010f93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f97:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010f9d:	7e 1f                	jle    c0010fbe <Video::clearScreen(unsigned int)+0x30>
c0010f9f:	31 ff                	xor    edi,edi
c0010fa1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010fa7:	7e 12                	jle    c0010fbb <Video::clearScreen(unsigned int)+0x2d>
c0010fa9:	8b 06                	mov    eax,DWORD PTR [esi]
c0010fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010faf:	53                   	push   ebx
c0010fb0:	57                   	push   edi
c0010fb1:	47                   	inc    edi
c0010fb2:	56                   	push   esi
c0010fb3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010fb6:	83 c4 10             	add    esp,0x10
c0010fb9:	eb e6                	jmp    c0010fa1 <Video::clearScreen(unsigned int)+0x13>
c0010fbb:	43                   	inc    ebx
c0010fbc:	eb d9                	jmp    c0010f97 <Video::clearScreen(unsigned int)+0x9>
c0010fbe:	5b                   	pop    ebx
c0010fbf:	5e                   	pop    esi
c0010fc0:	5f                   	pop    edi
c0010fc1:	c3                   	ret    

c0010fc2 <Video::putpixel(int, int, unsigned int)>:
c0010fc2:	c7 44 24 04 90 3a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023a90
c0010fca:	e9 66 33 00 00       	jmp    c0014335 <Krnl::panic(char const*)>
c0010fcf:	90                   	nop

c0010fd0 <Video::Video(char const*)>:
c0010fd0:	83 ec 0c             	sub    esp,0xc
c0010fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fd7:	83 ec 08             	sub    esp,0x8
c0010fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fde:	50                   	push   eax
c0010fdf:	e8 da d0 ff ff       	call   c000e0be <Device::Device(char const*)>
c0010fe4:	83 c4 10             	add    esp,0x10
c0010fe7:	ba 00 3b 02 c0       	mov    edx,0xc0023b00
c0010fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff0:	89 10                	mov    DWORD PTR [eax],edx
c0010ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0011000:	90                   	nop
c0011001:	83 c4 0c             	add    esp,0xc
c0011004:	c3                   	ret    
c0011005:	90                   	nop

c0011006 <Video::~Video()>:
c0011006:	83 ec 0c             	sub    esp,0xc
c0011009:	ba 00 3b 02 c0       	mov    edx,0xc0023b00
c001100e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011012:	89 10                	mov    DWORD PTR [eax],edx
c0011014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011018:	83 ec 0c             	sub    esp,0xc
c001101b:	50                   	push   eax
c001101c:	e8 67 cd ff ff       	call   c000dd88 <Device::~Device()>
c0011021:	83 c4 10             	add    esp,0x10
c0011024:	90                   	nop
c0011025:	83 c4 0c             	add    esp,0xc
c0011028:	c3                   	ret    
c0011029:	90                   	nop

c001102a <Video::~Video()>:
c001102a:	83 ec 0c             	sub    esp,0xc
c001102d:	83 ec 0c             	sub    esp,0xc
c0011030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011034:	e8 cd ff ff ff       	call   c0011006 <Video::~Video()>
c0011039:	83 c4 10             	add    esp,0x10
c001103c:	83 ec 08             	sub    esp,0x8
c001103f:	68 64 01 00 00       	push   0x164
c0011044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011048:	e8 45 b9 ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c001104d:	83 c4 10             	add    esp,0x10
c0011050:	83 c4 0c             	add    esp,0xc
c0011053:	c3                   	ret    

c0011054 <Video::isMonochrome()>:
c0011054:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011058:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001105e:	c3                   	ret    
c001105f:	90                   	nop

c0011060 <Video::getWidth()>:
c0011060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011064:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001106a:	c3                   	ret    
c001106b:	90                   	nop

c001106c <Video::getHeight()>:
c001106c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011070:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011076:	c3                   	ret    
c0011077:	90                   	nop

c0011078 <Video::drawCursor(int, int, unsigned char*, int)>:
c0011078:	55                   	push   ebp
c0011079:	57                   	push   edi
c001107a:	56                   	push   esi
c001107b:	53                   	push   ebx
c001107c:	83 ec 2c             	sub    esp,0x2c
c001107f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011083:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011087:	83 f8 01             	cmp    eax,0x1
c001108a:	19 c9                	sbb    ecx,ecx
c001108c:	31 db                	xor    ebx,ebx
c001108e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0011092:	89 cd                	mov    ebp,ecx
c0011094:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001109c:	f7 d5                	not    ebp
c001109e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00110a4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00110a8:	01 d8                	add    eax,ebx
c00110aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110ae:	56                   	push   esi
c00110af:	e8 b8 ff ff ff       	call   c001106c <Video::getHeight()>
c00110b4:	59                   	pop    ecx
c00110b5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00110b9:	7e 70                	jle    c001112b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00110bb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00110bf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00110c3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00110c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00110ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00110ce:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00110d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00110d9:	89 f8                	mov    eax,edi
c00110db:	83 c0 20             	add    eax,0x20
c00110de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110e2:	56                   	push   esi
c00110e3:	e8 78 ff ff ff       	call   c0011060 <Video::getWidth()>
c00110e8:	5a                   	pop    edx
c00110e9:	39 c7                	cmp    edi,eax
c00110eb:	7d 34                	jge    c0011121 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00110ed:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00110f2:	74 05                	je     c00110f9 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00110f4:	8b 06                	mov    eax,DWORD PTR [esi]
c00110f6:	55                   	push   ebp
c00110f7:	eb 0d                	jmp    c0011106 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00110f9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00110fe:	74 12                	je     c0011112 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0011100:	8b 06                	mov    eax,DWORD PTR [esi]
c0011102:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011106:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001110a:	57                   	push   edi
c001110b:	56                   	push   esi
c001110c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001110f:	83 c4 10             	add    esp,0x10
c0011112:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0011116:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001111a:	47                   	inc    edi
c001111b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001111f:	75 c1                	jne    c00110e2 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0011121:	43                   	inc    ebx
c0011122:	83 fb 20             	cmp    ebx,0x20
c0011125:	0f 85 79 ff ff ff    	jne    c00110a4 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001112b:	83 c4 2c             	add    esp,0x2c
c001112e:	5b                   	pop    ebx
c001112f:	5e                   	pop    esi
c0011130:	5f                   	pop    edi
c0011131:	5d                   	pop    ebp
c0011132:	c3                   	ret    
c0011133:	90                   	nop

c0011134 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0011134:	55                   	push   ebp
c0011135:	57                   	push   edi
c0011136:	56                   	push   esi
c0011137:	53                   	push   ebx
c0011138:	83 ec 28             	sub    esp,0x28
c001113b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001113f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011143:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011147:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001114b:	c1 e6 08             	shl    esi,0x8
c001114e:	01 c6                	add    esi,eax
c0011150:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0011154:	c1 e0 08             	shl    eax,0x8
c0011157:	01 d0                	add    eax,edx
c0011159:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001115d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011161:	0f af c6             	imul   eax,esi
c0011164:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001116b:	50                   	push   eax
c001116c:	e8 52 88 ff ff       	call   c00099c3 <malloc>
c0011171:	83 c4 10             	add    esp,0x10
c0011174:	89 c7                	mov    edi,eax
c0011176:	85 c0                	test   eax,eax
c0011178:	75 10                	jne    c001118a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c001117a:	83 ec 0c             	sub    esp,0xc
c001117d:	68 b1 3a 02 c0       	push   0xc0023ab1
c0011182:	e8 ae 31 00 00       	call   c0014335 <Krnl::panic(char const*)>
c0011187:	83 c4 10             	add    esp,0x10
c001118a:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001118d:	ba 12 00 00 00       	mov    edx,0x12
c0011192:	84 c0                	test   al,al
c0011194:	74 11                	je     c00111a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0011196:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c001119a:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001119e:	c1 fa 03             	sar    edx,0x3
c00111a1:	0f af d1             	imul   edx,ecx
c00111a4:	83 c2 12             	add    edx,0x12
c00111a7:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00111ab:	74 04                	je     c00111b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00111ad:	85 f6                	test   esi,esi
c00111af:	75 12                	jne    c00111c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00111b1:	83 ec 0c             	sub    esp,0xc
c00111b4:	68 c1 3a 02 c0       	push   0xc0023ac1
c00111b9:	e8 b5 b8 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c00111be:	e9 b8 00 00 00       	jmp    c001127b <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c00111c3:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c00111c7:	80 f9 02             	cmp    cl,0x2
c00111ca:	0f 85 96 00 00 00    	jne    c0011266 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c00111d0:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00111d5:	75 0e                	jne    c00111e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00111d7:	84 c0                	test   al,al
c00111d9:	75 0a                	jne    c00111e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00111db:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00111de:	83 e8 18             	sub    eax,0x18
c00111e1:	a8 f7                	test   al,0xf7
c00111e3:	74 0a                	je     c00111ef <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c00111e5:	83 ec 0c             	sub    esp,0xc
c00111e8:	68 d6 3a 02 c0       	push   0xc0023ad6
c00111ed:	eb 7f                	jmp    c001126e <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c00111ef:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00111f7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00111ff:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011203:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001120b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001120f:	75 0c                	jne    c001121d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011211:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011216:	c1 e0 18             	shl    eax,0x18
c0011219:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001121d:	45                   	inc    ebp
c001121e:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011223:	c1 e1 10             	shl    ecx,0x10
c0011226:	89 c8                	mov    eax,ecx
c0011228:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c001122d:	c1 e1 08             	shl    ecx,0x8
c0011230:	09 c1                	or     ecx,eax
c0011232:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011236:	09 c1                	or     ecx,eax
c0011238:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c001123c:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011240:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011244:	c1 f8 03             	sar    eax,0x3
c0011247:	01 c2                	add    edx,eax
c0011249:	89 e8                	mov    eax,ebp
c001124b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001124f:	39 c6                	cmp    esi,eax
c0011251:	7f b0                	jg     c0011203 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011253:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011257:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001125b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c001125e:	7e 22                	jle    c0011282 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0011260:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011264:	eb 99                	jmp    c00111ff <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0011266:	50                   	push   eax
c0011267:	50                   	push   eax
c0011268:	51                   	push   ecx
c0011269:	68 e4 3a 02 c0       	push   0xc0023ae4
c001126e:	e8 00 b8 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0011273:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011276:	e8 58 87 ff ff       	call   c00099d3 <free>
c001127b:	83 c4 10             	add    esp,0x10
c001127e:	31 ff                	xor    edi,edi
c0011280:	eb 0f                	jmp    c0011291 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011282:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011286:	89 30                	mov    DWORD PTR [eax],esi
c0011288:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001128c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001128f:	89 30                	mov    DWORD PTR [eax],esi
c0011291:	83 c4 1c             	add    esp,0x1c
c0011294:	89 f8                	mov    eax,edi
c0011296:	5b                   	pop    ebx
c0011297:	5e                   	pop    esi
c0011298:	5f                   	pop    edi
c0011299:	5d                   	pop    ebp
c001129a:	c3                   	ret    
c001129b:	90                   	nop

c001129c <Video::putTGA(int, int, unsigned char*, int)>:
c001129c:	55                   	push   ebp
c001129d:	57                   	push   edi
c001129e:	56                   	push   esi
c001129f:	53                   	push   ebx
c00112a0:	83 ec 28             	sub    esp,0x28
c00112a3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00112a7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00112ab:	50                   	push   eax
c00112ac:	8d 44 24 18          	lea    eax,[esp+0x18]
c00112b0:	50                   	push   eax
c00112b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00112b5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00112b9:	56                   	push   esi
c00112ba:	e8 75 fe ff ff       	call   c0011134 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00112bf:	83 c4 20             	add    esp,0x20
c00112c2:	85 c0                	test   eax,eax
c00112c4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00112c8:	74 35                	je     c00112ff <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00112ca:	89 c7                	mov    edi,eax
c00112cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00112d0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00112d4:	39 d8                	cmp    eax,ebx
c00112d6:	7e 27                	jle    c00112ff <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00112d8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00112dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112e0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00112e4:	39 e8                	cmp    eax,ebp
c00112e6:	7e 14                	jle    c00112fc <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00112e8:	8b 06                	mov    eax,DWORD PTR [esi]
c00112ea:	83 c7 04             	add    edi,0x4
c00112ed:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00112f0:	53                   	push   ebx
c00112f1:	55                   	push   ebp
c00112f2:	45                   	inc    ebp
c00112f3:	56                   	push   esi
c00112f4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112f7:	83 c4 10             	add    esp,0x10
c00112fa:	eb e0                	jmp    c00112dc <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00112fc:	43                   	inc    ebx
c00112fd:	eb cd                	jmp    c00112cc <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00112ff:	83 c4 1c             	add    esp,0x1c
c0011302:	5b                   	pop    ebx
c0011303:	5e                   	pop    esi
c0011304:	5f                   	pop    edi
c0011305:	5d                   	pop    ebp
c0011306:	c3                   	ret    
c0011307:	90                   	nop

c0011308 <ACPI::close(int, int, void*)>:
c0011308:	83 ec 1c             	sub    esp,0x1c
c001130b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011313:	74 0b                	je     c0011320 <ACPI::close(int, int, void*)+0x18>
c0011315:	b8 00 00 00 00       	mov    eax,0x0
c001131a:	e9 99 00 00 00       	jmp    c00113b8 <ACPI::close(int, int, void*)+0xb0>
c001131f:	90                   	nop
c0011320:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011325:	75 29                	jne    c0011350 <ACPI::close(int, int, void*)+0x48>
c0011327:	a1 48 6a 02 c0       	mov    eax,ds:0xc0026a48
c001132c:	85 c0                	test   eax,eax
c001132e:	74 08                	je     c0011338 <ACPI::close(int, int, void*)+0x30>
c0011330:	a1 48 6a 02 c0       	mov    eax,ds:0xc0026a48
c0011335:	ff d0                	call   eax
c0011337:	90                   	nop
c0011338:	83 ec 0c             	sub    esp,0xc
c001133b:	68 40 3b 02 c0       	push   0xc0023b40
c0011340:	e8 f0 2f 00 00       	call   c0014335 <Krnl::panic(char const*)>
c0011345:	83 c4 10             	add    esp,0x10
c0011348:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001134d:	eb 69                	jmp    c00113b8 <ACPI::close(int, int, void*)+0xb0>
c001134f:	90                   	nop
c0011350:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011355:	75 59                	jne    c00113b0 <ACPI::close(int, int, void*)+0xa8>
c0011357:	a1 44 6a 02 c0       	mov    eax,ds:0xc0026a44
c001135c:	85 c0                	test   eax,eax
c001135e:	74 08                	je     c0011368 <ACPI::close(int, int, void*)+0x60>
c0011360:	a1 44 6a 02 c0       	mov    eax,ds:0xc0026a44
c0011365:	ff d0                	call   eax
c0011367:	90                   	nop
c0011368:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001136d:	8d 76 00             	lea    esi,[esi+0x0]
c0011370:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011375:	83 e0 02             	and    eax,0x2
c0011378:	74 1e                	je     c0011398 <ACPI::close(int, int, void*)+0x90>
c001137a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011381:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011385:	89 c2                	mov    edx,eax
c0011387:	ec                   	in     al,dx
c0011388:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001138c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011390:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011394:	eb da                	jmp    c0011370 <ACPI::close(int, int, void*)+0x68>
c0011396:	66 90                	xchg   ax,ax
c0011398:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001139f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00113a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00113a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00113ac:	ee                   	out    dx,al
c00113ad:	8d 76 00             	lea    esi,[esi+0x0]
c00113b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113b5:	8d 76 00             	lea    esi,[esi+0x0]
c00113b8:	83 c4 1c             	add    esp,0x1c
c00113bb:	c3                   	ret    

c00113bc <findRSDP()>:
c00113bc:	83 ec 1c             	sub    esp,0x1c
c00113bf:	83 ec 0c             	sub    esp,0xc
c00113c2:	68 1b 3c 02 c0       	push   0xc0023c1b
c00113c7:	e8 51 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00113cc:	83 c4 10             	add    esp,0x10
c00113cf:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c00113d4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00113da:	83 e0 04             	and    eax,0x4
c00113dd:	84 c0                	test   al,al
c00113df:	75 0b                	jne    c00113ec <findRSDP()+0x30>
c00113e1:	b8 00 00 00 00       	mov    eax,0x0
c00113e6:	e9 a1 00 00 00       	jmp    c001148c <findRSDP()+0xd0>
c00113eb:	90                   	nop
c00113ec:	a1 38 64 02 c0       	mov    eax,ds:0xc0026438
c00113f1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00113f6:	7f 1c                	jg     c0011414 <findRSDP()+0x58>
c00113f8:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c00113fd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011403:	83 e2 fb             	and    edx,0xfffffffb
c0011406:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001140c:	b8 00 00 00 00       	mov    eax,0x0
c0011411:	eb 79                	jmp    c001148c <findRSDP()+0xd0>
c0011413:	90                   	nop
c0011414:	83 ec 0c             	sub    esp,0xc
c0011417:	68 2b 3c 02 c0       	push   0xc0023c2b
c001141c:	e8 fc 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011421:	83 c4 10             	add    esp,0x10
c0011424:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001142c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011434:	77 3e                	ja     c0011474 <findRSDP()+0xb8>
c0011436:	83 ec 04             	sub    esp,0x4
c0011439:	6a 08                	push   0x8
c001143b:	68 44 3c 02 c0       	push   0xc0023c44
c0011440:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011444:	e8 37 f1 fe ff       	call   c0000580 <memcmp>
c0011449:	83 c4 10             	add    esp,0x10
c001144c:	85 c0                	test   eax,eax
c001144e:	0f 94 c0             	sete   al
c0011451:	84 c0                	test   al,al
c0011453:	74 17                	je     c001146c <findRSDP()+0xb0>
c0011455:	83 ec 0c             	sub    esp,0xc
c0011458:	68 4d 3c 02 c0       	push   0xc0023c4d
c001145d:	e8 bb 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011462:	83 c4 10             	add    esp,0x10
c0011465:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011469:	eb 21                	jmp    c001148c <findRSDP()+0xd0>
c001146b:	90                   	nop
c001146c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011471:	eb b9                	jmp    c001142c <findRSDP()+0x70>
c0011473:	90                   	nop
c0011474:	83 ec 0c             	sub    esp,0xc
c0011477:	68 5b 3c 02 c0       	push   0xc0023c5b
c001147c:	e8 9c 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011481:	83 c4 10             	add    esp,0x10
c0011484:	b8 00 00 00 00       	mov    eax,0x0
c0011489:	8d 76 00             	lea    esi,[esi+0x0]
c001148c:	83 c4 1c             	add    esp,0x1c
c001148f:	c3                   	ret    

c0011490 <loadACPITables(unsigned char*)>:
c0011490:	57                   	push   edi
c0011491:	56                   	push   esi
c0011492:	53                   	push   ebx
c0011493:	83 ec 60             	sub    esp,0x60
c0011496:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c001149b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00114a1:	83 e0 04             	and    eax,0x4
c00114a4:	84 c0                	test   al,al
c00114a6:	0f 84 3c 02 00 00    	je     c00116e8 <loadACPITables(unsigned char*)+0x258>
c00114ac:	a0 60 6c 02 c0       	mov    al,ds:0xc0026c60
c00114b1:	84 c0                	test   al,al
c00114b3:	74 77                	je     c001152c <loadACPITables(unsigned char*)+0x9c>
c00114b5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00114b9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00114bd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00114c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c4:	83 e8 24             	sub    eax,0x24
c00114c7:	c1 e8 03             	shr    eax,0x3
c00114ca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00114ce:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00114d6:	66 90                	xchg   ax,ax
c00114d8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00114dc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00114e0:	0f 8d b6 00 00 00    	jge    c001159c <loadACPITables(unsigned char*)+0x10c>
c00114e6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00114ea:	83 c0 24             	add    eax,0x24
c00114ed:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00114f1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00114f5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00114f9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00114fd:	c1 e0 03             	shl    eax,0x3
c0011500:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011504:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011508:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001150b:	8b 00                	mov    eax,DWORD PTR [eax]
c001150d:	89 c1                	mov    ecx,eax
c001150f:	a1 4c 6a 02 c0       	mov    eax,ds:0xc0026a4c
c0011514:	8d 50 01             	lea    edx,[eax+0x1]
c0011517:	89 15 4c 6a 02 c0    	mov    DWORD PTR ds:0xc0026a4c,edx
c001151d:	89 ca                	mov    edx,ecx
c001151f:	89 14 c5 64 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd959c],edx
c0011526:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001152a:	eb ac                	jmp    c00114d8 <loadACPITables(unsigned char*)+0x48>
c001152c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011530:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011534:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011538:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153b:	83 e8 24             	sub    eax,0x24
c001153e:	c1 e8 02             	shr    eax,0x2
c0011541:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011545:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001154d:	8d 76 00             	lea    esi,[esi+0x0]
c0011550:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011554:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011558:	7d 42                	jge    c001159c <loadACPITables(unsigned char*)+0x10c>
c001155a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001155e:	83 c0 24             	add    eax,0x24
c0011561:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011565:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011569:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001156d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011571:	c1 e0 02             	shl    eax,0x2
c0011574:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011578:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001157c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001157e:	a1 4c 6a 02 c0       	mov    eax,ds:0xc0026a4c
c0011583:	8d 50 01             	lea    edx,[eax+0x1]
c0011586:	89 15 4c 6a 02 c0    	mov    DWORD PTR ds:0xc0026a4c,edx
c001158c:	89 ca                	mov    edx,ecx
c001158e:	89 14 c5 64 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd959c],edx
c0011595:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011599:	eb b5                	jmp    c0011550 <loadACPITables(unsigned char*)+0xc0>
c001159b:	90                   	nop
c001159c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00115a4:	a1 4c 6a 02 c0       	mov    eax,ds:0xc0026a4c
c00115a9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00115ad:	0f 8d 39 01 00 00    	jge    c00116ec <loadACPITables(unsigned char*)+0x25c>
c00115b3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00115b7:	8b 04 c5 64 6a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd959c]
c00115be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00115c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115c6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00115ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115ce:	25 ff 0f 00 00       	and    eax,0xfff
c00115d3:	89 c6                	mov    esi,eax
c00115d5:	8b 1d 30 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026530
c00115db:	83 ec 0c             	sub    esp,0xc
c00115de:	6a 01                	push   0x1
c00115e0:	e8 bc a0 ff ff       	call   c000b6a1 <Virt::allocateKernelVirtualPages(int)>
c00115e5:	83 c4 10             	add    esp,0x10
c00115e8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00115ec:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00115f2:	83 ec 0c             	sub    esp,0xc
c00115f5:	6a 01                	push   0x1
c00115f7:	6a 01                	push   0x1
c00115f9:	50                   	push   eax
c00115fa:	52                   	push   edx
c00115fb:	53                   	push   ebx
c00115fc:	e8 3d aa ff ff       	call   c000c03e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011601:	83 c4 20             	add    esp,0x20
c0011604:	09 f0                	or     eax,esi
c0011606:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001160a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001160e:	c1 e0 03             	shl    eax,0x3
c0011611:	05 60 6a 02 c0       	add    eax,0xc0026a60
c0011616:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001161a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001161e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011622:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001162a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001162e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011632:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011636:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001163a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001163e:	89 c6                	mov    esi,eax
c0011640:	89 d7                	mov    edi,edx
c0011642:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011644:	89 c8                	mov    eax,ecx
c0011646:	89 fa                	mov    edx,edi
c0011648:	89 f3                	mov    ebx,esi
c001164a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001164e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011652:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011656:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001165a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001165d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011661:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011665:	05 00 10 00 00       	add    eax,0x1000
c001166a:	c1 e8 0c             	shr    eax,0xc
c001166d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011671:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011675:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011679:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001167d:	25 ff 0f 00 00       	and    eax,0xfff
c0011682:	89 c6                	mov    esi,eax
c0011684:	8b 1d 30 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026530
c001168a:	83 ec 0c             	sub    esp,0xc
c001168d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011691:	e8 0b a0 ff ff       	call   c000b6a1 <Virt::allocateKernelVirtualPages(int)>
c0011696:	83 c4 10             	add    esp,0x10
c0011699:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001169d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00116a3:	83 ec 0c             	sub    esp,0xc
c00116a6:	6a 01                	push   0x1
c00116a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00116ac:	50                   	push   eax
c00116ad:	52                   	push   edx
c00116ae:	53                   	push   ebx
c00116af:	e8 8a a9 ff ff       	call   c000c03e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00116b4:	83 c4 20             	add    esp,0x20
c00116b7:	09 f0                	or     eax,esi
c00116b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00116bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116c1:	83 ec 0c             	sub    esp,0xc
c00116c4:	50                   	push   eax
c00116c5:	e8 07 a3 ff ff       	call   c000b9d1 <Virt::freeKernelVirtualPages(unsigned long)>
c00116ca:	83 c4 10             	add    esp,0x10
c00116cd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00116d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00116d5:	89 14 c5 64 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd959c],edx
c00116dc:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00116e0:	e9 bf fe ff ff       	jmp    c00115a4 <loadACPITables(unsigned char*)+0x114>
c00116e5:	8d 76 00             	lea    esi,[esi+0x0]
c00116e8:	90                   	nop
c00116e9:	8d 76 00             	lea    esi,[esi+0x0]
c00116ec:	83 c4 60             	add    esp,0x60
c00116ef:	5b                   	pop    ebx
c00116f0:	5e                   	pop    esi
c00116f1:	5f                   	pop    edi
c00116f2:	c3                   	ret    
c00116f3:	90                   	nop

c00116f4 <findRSDT(unsigned char*)>:
c00116f4:	57                   	push   edi
c00116f5:	56                   	push   esi
c00116f6:	53                   	push   ebx
c00116f7:	83 ec 50             	sub    esp,0x50
c00116fa:	83 ec 0c             	sub    esp,0xc
c00116fd:	68 6f 3c 02 c0       	push   0xc0023c6f
c0011702:	e8 16 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011707:	83 c4 10             	add    esp,0x10
c001170a:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c001170f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011715:	83 e0 04             	and    eax,0x4
c0011718:	84 c0                	test   al,al
c001171a:	75 0c                	jne    c0011728 <findRSDT(unsigned char*)+0x34>
c001171c:	b8 00 00 00 00       	mov    eax,0x0
c0011721:	e9 86 01 00 00       	jmp    c00118ac <findRSDT(unsigned char*)+0x1b8>
c0011726:	66 90                	xchg   ax,ax
c0011728:	83 ec 0c             	sub    esp,0xc
c001172b:	68 81 3c 02 c0       	push   0xc0023c81
c0011730:	e8 e8 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011735:	83 c4 10             	add    esp,0x10
c0011738:	89 e0                	mov    eax,esp
c001173a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001173e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011742:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011746:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001174e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011752:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011756:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001175a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001175e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011762:	89 c6                	mov    esi,eax
c0011764:	89 d7                	mov    edi,edx
c0011766:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011768:	89 c8                	mov    eax,ecx
c001176a:	89 fa                	mov    edx,edi
c001176c:	89 f3                	mov    ebx,esi
c001176e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011772:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011776:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001177a:	83 ec 0c             	sub    esp,0xc
c001177d:	68 93 3c 02 c0       	push   0xc0023c93
c0011782:	e8 96 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011787:	83 c4 10             	add    esp,0x10
c001178a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001178e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011792:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001179a:	83 ec 0c             	sub    esp,0xc
c001179d:	68 a5 3c 02 c0       	push   0xc0023ca5
c00117a2:	e8 76 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00117a7:	83 c4 10             	add    esp,0x10
c00117aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00117b2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00117b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00117be:	83 ec 04             	sub    esp,0x4
c00117c1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00117c5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00117c9:	68 64 3b 02 c0       	push   0xc0023b64
c00117ce:	e8 a0 b2 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c00117d3:	83 c4 10             	add    esp,0x10
c00117d6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00117da:	25 ff 0f 00 00       	and    eax,0xfff
c00117df:	89 c6                	mov    esi,eax
c00117e1:	8b 1d 30 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026530
c00117e7:	83 ec 0c             	sub    esp,0xc
c00117ea:	6a 02                	push   0x2
c00117ec:	e8 b0 9e ff ff       	call   c000b6a1 <Virt::allocateKernelVirtualPages(int)>
c00117f1:	83 c4 10             	add    esp,0x10
c00117f4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00117f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00117fe:	83 ec 0c             	sub    esp,0xc
c0011801:	6a 01                	push   0x1
c0011803:	6a 02                	push   0x2
c0011805:	50                   	push   eax
c0011806:	52                   	push   edx
c0011807:	53                   	push   ebx
c0011808:	e8 31 a8 ff ff       	call   c000c03e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001180d:	83 c4 20             	add    esp,0x20
c0011810:	09 f0                	or     eax,esi
c0011812:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011816:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001181a:	25 ff 0f 00 00       	and    eax,0xfff
c001181f:	89 c6                	mov    esi,eax
c0011821:	8b 1d 30 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026530
c0011827:	83 ec 0c             	sub    esp,0xc
c001182a:	6a 02                	push   0x2
c001182c:	e8 70 9e ff ff       	call   c000b6a1 <Virt::allocateKernelVirtualPages(int)>
c0011831:	83 c4 10             	add    esp,0x10
c0011834:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011838:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001183e:	83 ec 0c             	sub    esp,0xc
c0011841:	6a 01                	push   0x1
c0011843:	6a 02                	push   0x2
c0011845:	50                   	push   eax
c0011846:	52                   	push   edx
c0011847:	53                   	push   ebx
c0011848:	e8 f1 a7 ff ff       	call   c000c03e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001184d:	83 c4 20             	add    esp,0x20
c0011850:	09 f0                	or     eax,esi
c0011852:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011856:	83 ec 04             	sub    esp,0x4
c0011859:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001185d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011861:	68 84 3b 02 c0       	push   0xc0023b84
c0011866:	e8 08 b2 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001186b:	83 c4 10             	add    esp,0x10
c001186e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011873:	75 13                	jne    c0011888 <findRSDT(unsigned char*)+0x194>
c0011875:	c6 05 60 6c 02 c0 00 	mov    BYTE PTR ds:0xc0026c60,0x0
c001187c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011880:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011884:	eb 22                	jmp    c00118a8 <findRSDT(unsigned char*)+0x1b4>
c0011886:	66 90                	xchg   ax,ax
c0011888:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c001188d:	75 11                	jne    c00118a0 <findRSDT(unsigned char*)+0x1ac>
c001188f:	c6 05 60 6c 02 c0 01 	mov    BYTE PTR ds:0xc0026c60,0x1
c0011896:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001189a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001189e:	eb 08                	jmp    c00118a8 <findRSDT(unsigned char*)+0x1b4>
c00118a0:	b8 00 00 00 00       	mov    eax,0x0
c00118a5:	eb 05                	jmp    c00118ac <findRSDT(unsigned char*)+0x1b8>
c00118a7:	90                   	nop
c00118a8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00118ac:	83 c4 50             	add    esp,0x50
c00118af:	5b                   	pop    ebx
c00118b0:	5e                   	pop    esi
c00118b1:	5f                   	pop    edi
c00118b2:	c3                   	ret    
c00118b3:	90                   	nop

c00118b4 <findDataTable(unsigned char*, char*)>:
c00118b4:	83 ec 1c             	sub    esp,0x1c
c00118b7:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c00118bc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00118c2:	83 e0 04             	and    eax,0x4
c00118c5:	84 c0                	test   al,al
c00118c7:	75 07                	jne    c00118d0 <findDataTable(unsigned char*, char*)+0x1c>
c00118c9:	b8 00 00 00 00       	mov    eax,0x0
c00118ce:	eb 58                	jmp    c0011928 <findDataTable(unsigned char*, char*)+0x74>
c00118d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118d8:	a1 4c 6a 02 c0       	mov    eax,ds:0xc0026a4c
c00118dd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00118e1:	7d 3d                	jge    c0011920 <findDataTable(unsigned char*, char*)+0x6c>
c00118e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118e7:	c1 e0 03             	shl    eax,0x3
c00118ea:	05 60 6a 02 c0       	add    eax,0xc0026a60
c00118ef:	83 ec 04             	sub    esp,0x4
c00118f2:	6a 04                	push   0x4
c00118f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118f8:	50                   	push   eax
c00118f9:	e8 82 ec fe ff       	call   c0000580 <memcmp>
c00118fe:	83 c4 10             	add    esp,0x10
c0011901:	85 c0                	test   eax,eax
c0011903:	0f 94 c0             	sete   al
c0011906:	84 c0                	test   al,al
c0011908:	74 0e                	je     c0011918 <findDataTable(unsigned char*, char*)+0x64>
c001190a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001190e:	8b 04 c5 64 6a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd959c]
c0011915:	eb 11                	jmp    c0011928 <findDataTable(unsigned char*, char*)+0x74>
c0011917:	90                   	nop
c0011918:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001191c:	eb ba                	jmp    c00118d8 <findDataTable(unsigned char*, char*)+0x24>
c001191e:	66 90                	xchg   ax,ax
c0011920:	b8 00 00 00 00       	mov    eax,0x0
c0011925:	8d 76 00             	lea    esi,[esi+0x0]
c0011928:	83 c4 1c             	add    esp,0x1c
c001192b:	c3                   	ret    

c001192c <scanMADT()>:
c001192c:	53                   	push   ebx
c001192d:	83 ec 38             	sub    esp,0x38
c0011930:	83 ec 0c             	sub    esp,0xc
c0011933:	68 b7 3c 02 c0       	push   0xc0023cb7
c0011938:	e8 e0 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001193d:	83 c4 10             	add    esp,0x10
c0011940:	a1 20 64 02 c0       	mov    eax,ds:0xc0026420
c0011945:	25 00 04 00 00       	and    eax,0x400
c001194a:	74 14                	je     c0011960 <scanMADT()+0x34>
c001194c:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c0011951:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011957:	83 e2 fb             	and    edx,0xfffffffb
c001195a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011960:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c0011965:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001196b:	83 e0 04             	and    eax,0x4
c001196e:	84 c0                	test   al,al
c0011970:	0f 84 82 04 00 00    	je     c0011df8 <scanMADT()+0x4cc>
c0011976:	83 ec 0c             	sub    esp,0xc
c0011979:	68 c4 3c 02 c0       	push   0xc0023cc4
c001197e:	e8 9a 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011983:	83 c4 10             	add    esp,0x10
c0011986:	e8 31 fa ff ff       	call   c00113bc <findRSDP()>
c001198b:	a3 6c 6c 02 c0       	mov    ds:0xc0026c6c,eax
c0011990:	a1 6c 6c 02 c0       	mov    eax,ds:0xc0026c6c
c0011995:	85 c0                	test   eax,eax
c0011997:	75 1b                	jne    c00119b4 <scanMADT()+0x88>
c0011999:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c001199e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00119a4:	83 e2 fb             	and    edx,0xfffffffb
c00119a7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00119ad:	e9 4e 04 00 00       	jmp    c0011e00 <scanMADT()+0x4d4>
c00119b2:	66 90                	xchg   ax,ax
c00119b4:	83 ec 0c             	sub    esp,0xc
c00119b7:	68 d6 3c 02 c0       	push   0xc0023cd6
c00119bc:	e8 5c 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00119c1:	83 c4 10             	add    esp,0x10
c00119c4:	a1 6c 6c 02 c0       	mov    eax,ds:0xc0026c6c
c00119c9:	83 ec 0c             	sub    esp,0xc
c00119cc:	50                   	push   eax
c00119cd:	e8 22 fd ff ff       	call   c00116f4 <findRSDT(unsigned char*)>
c00119d2:	83 c4 10             	add    esp,0x10
c00119d5:	a3 68 6c 02 c0       	mov    ds:0xc0026c68,eax
c00119da:	a1 68 6c 02 c0       	mov    eax,ds:0xc0026c68
c00119df:	85 c0                	test   eax,eax
c00119e1:	75 19                	jne    c00119fc <scanMADT()+0xd0>
c00119e3:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c00119e8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00119ee:	83 e2 fb             	and    edx,0xfffffffb
c00119f1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00119f7:	e9 04 04 00 00       	jmp    c0011e00 <scanMADT()+0x4d4>
c00119fc:	83 ec 0c             	sub    esp,0xc
c00119ff:	68 e6 3c 02 c0       	push   0xc0023ce6
c0011a04:	e8 14 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011a09:	83 c4 10             	add    esp,0x10
c0011a0c:	a1 68 6c 02 c0       	mov    eax,ds:0xc0026c68
c0011a11:	83 ec 0c             	sub    esp,0xc
c0011a14:	50                   	push   eax
c0011a15:	e8 76 fa ff ff       	call   c0011490 <loadACPITables(unsigned char*)>
c0011a1a:	83 c4 10             	add    esp,0x10
c0011a1d:	a1 68 6c 02 c0       	mov    eax,ds:0xc0026c68
c0011a22:	83 ec 08             	sub    esp,0x8
c0011a25:	68 fe 3c 02 c0       	push   0xc0023cfe
c0011a2a:	50                   	push   eax
c0011a2b:	e8 84 fe ff ff       	call   c00118b4 <findDataTable(unsigned char*, char*)>
c0011a30:	83 c4 10             	add    esp,0x10
c0011a33:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011a37:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011a3c:	75 1a                	jne    c0011a58 <scanMADT()+0x12c>
c0011a3e:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c0011a43:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011a49:	83 e2 fe             	and    edx,0xfffffffe
c0011a4c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011a52:	e9 a9 03 00 00       	jmp    c0011e00 <scanMADT()+0x4d4>
c0011a57:	90                   	nop
c0011a58:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011a60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011a64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a67:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011a6b:	0f 87 8f 03 00 00    	ja     c0011e00 <scanMADT()+0x4d4>
c0011a71:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011a79:	0f 87 81 03 00 00    	ja     c0011e00 <scanMADT()+0x4d4>
c0011a7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011a87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a8b:	8d 50 01             	lea    edx,[eax+0x1]
c0011a8e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a92:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011a96:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011a9a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011a9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011aa2:	8d 50 01             	lea    edx,[eax+0x1]
c0011aa5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011aa9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011aad:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011ab1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011ab5:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011aba:	0f 86 3c 03 00 00    	jbe    c0011dfc <scanMADT()+0x4d0>
c0011ac0:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011ac5:	75 59                	jne    c0011b20 <scanMADT()+0x1f4>
c0011ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011acb:	8d 50 01             	lea    edx,[eax+0x1]
c0011ace:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ad2:	8a 15 60 6e 02 c0    	mov    dl,BYTE PTR ds:0xc0026e60
c0011ad8:	0f b6 d2             	movzx  edx,dl
c0011adb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011adf:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011ae3:	88 82 a0 6e 02 c0    	mov    BYTE PTR [edx-0x3ffd9160],al
c0011ae9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011aed:	8d 50 01             	lea    edx,[eax+0x1]
c0011af0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011af4:	8a 15 60 6e 02 c0    	mov    dl,BYTE PTR ds:0xc0026e60
c0011afa:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011afd:	88 0d 60 6e 02 c0    	mov    BYTE PTR ds:0xc0026e60,cl
c0011b03:	0f b6 d2             	movzx  edx,dl
c0011b06:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011b0a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011b0e:	88 82 80 6e 02 c0    	mov    BYTE PTR [edx-0x3ffd9180],al
c0011b14:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011b19:	e9 c6 02 00 00       	jmp    c0011de4 <scanMADT()+0x4b8>
c0011b1e:	66 90                	xchg   ax,ax
c0011b20:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011b25:	0f 85 15 01 00 00    	jne    c0011c40 <scanMADT()+0x314>
c0011b2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b2f:	8d 50 01             	lea    edx,[eax+0x1]
c0011b32:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b36:	8a 15 20 6d 02 c0    	mov    dl,BYTE PTR ds:0xc0026d20
c0011b3c:	0f b6 d2             	movzx  edx,dl
c0011b3f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011b43:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011b47:	88 82 40 6d 02 c0    	mov    BYTE PTR [edx-0x3ffd92c0],al
c0011b4d:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011b51:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011b55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b59:	01 d0                	add    eax,edx
c0011b5b:	83 c0 2c             	add    eax,0x2c
c0011b5e:	8a 00                	mov    al,BYTE PTR [eax]
c0011b60:	0f b6 d0             	movzx  edx,al
c0011b63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b67:	8d 48 01             	lea    ecx,[eax+0x1]
c0011b6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b6e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011b72:	0f b6 c0             	movzx  eax,al
c0011b75:	c1 e0 08             	shl    eax,0x8
c0011b78:	89 d1                	mov    ecx,edx
c0011b7a:	09 c1                	or     ecx,eax
c0011b7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b80:	8d 50 02             	lea    edx,[eax+0x2]
c0011b83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b87:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b8b:	0f b6 c0             	movzx  eax,al
c0011b8e:	c1 e0 10             	shl    eax,0x10
c0011b91:	09 c1                	or     ecx,eax
c0011b93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b97:	8d 50 03             	lea    edx,[eax+0x3]
c0011b9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b9e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011ba2:	0f b6 c0             	movzx  eax,al
c0011ba5:	c1 e0 18             	shl    eax,0x18
c0011ba8:	09 c1                	or     ecx,eax
c0011baa:	89 ca                	mov    edx,ecx
c0011bac:	a0 20 6d 02 c0       	mov    al,ds:0xc0026d20
c0011bb1:	0f b6 c0             	movzx  eax,al
c0011bb4:	89 14 85 60 6d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd92a0],edx
c0011bbb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011bc0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011bc4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bc8:	01 d0                	add    eax,edx
c0011bca:	83 c0 2c             	add    eax,0x2c
c0011bcd:	8a 00                	mov    al,BYTE PTR [eax]
c0011bcf:	0f b6 d0             	movzx  edx,al
c0011bd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bd6:	8d 48 01             	lea    ecx,[eax+0x1]
c0011bd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bdd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011be1:	0f b6 c0             	movzx  eax,al
c0011be4:	c1 e0 08             	shl    eax,0x8
c0011be7:	89 d1                	mov    ecx,edx
c0011be9:	09 c1                	or     ecx,eax
c0011beb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bef:	8d 50 02             	lea    edx,[eax+0x2]
c0011bf2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bf6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011bfa:	0f b6 c0             	movzx  eax,al
c0011bfd:	c1 e0 10             	shl    eax,0x10
c0011c00:	09 c1                	or     ecx,eax
c0011c02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c06:	8d 50 03             	lea    edx,[eax+0x3]
c0011c09:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c0d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c11:	0f b6 c0             	movzx  eax,al
c0011c14:	c1 e0 18             	shl    eax,0x18
c0011c17:	09 c1                	or     ecx,eax
c0011c19:	89 ca                	mov    edx,ecx
c0011c1b:	a0 20 6d 02 c0       	mov    al,ds:0xc0026d20
c0011c20:	0f b6 c0             	movzx  eax,al
c0011c23:	89 14 85 e0 6d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9220],edx
c0011c2a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011c2f:	a0 20 6d 02 c0       	mov    al,ds:0xc0026d20
c0011c34:	40                   	inc    eax
c0011c35:	a2 20 6d 02 c0       	mov    ds:0xc0026d20,al
c0011c3a:	e9 a5 01 00 00       	jmp    c0011de4 <scanMADT()+0x4b8>
c0011c3f:	90                   	nop
c0011c40:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011c45:	0f 85 e9 00 00 00    	jne    c0011d34 <scanMADT()+0x408>
c0011c4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c4f:	8d 50 01             	lea    edx,[eax+0x1]
c0011c52:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c56:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c5a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011c5e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011c62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c66:	8d 50 01             	lea    edx,[eax+0x1]
c0011c69:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c6d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c71:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011c75:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011c79:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c7d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c81:	01 d0                	add    eax,edx
c0011c83:	83 c0 2c             	add    eax,0x2c
c0011c86:	8a 00                	mov    al,BYTE PTR [eax]
c0011c88:	0f b6 d0             	movzx  edx,al
c0011c8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c8f:	8d 48 01             	lea    ecx,[eax+0x1]
c0011c92:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c96:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011c9a:	0f b6 c0             	movzx  eax,al
c0011c9d:	c1 e0 08             	shl    eax,0x8
c0011ca0:	89 d1                	mov    ecx,edx
c0011ca2:	09 c1                	or     ecx,eax
c0011ca4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ca8:	8d 50 02             	lea    edx,[eax+0x2]
c0011cab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011caf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011cb3:	0f b6 c0             	movzx  eax,al
c0011cb6:	c1 e0 10             	shl    eax,0x10
c0011cb9:	09 c1                	or     ecx,eax
c0011cbb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cbf:	8d 50 03             	lea    edx,[eax+0x3]
c0011cc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011cc6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011cca:	0f b6 c0             	movzx  eax,al
c0011ccd:	c1 e0 18             	shl    eax,0x18
c0011cd0:	09 c8                	or     eax,ecx
c0011cd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011cd6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011cdb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ce3:	01 d0                	add    eax,edx
c0011ce5:	83 c0 2c             	add    eax,0x2c
c0011ce8:	8a 00                	mov    al,BYTE PTR [eax]
c0011cea:	0f b6 c0             	movzx  eax,al
c0011ced:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011cf1:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011cf4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cf8:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011cfc:	0f b6 d2             	movzx  edx,dl
c0011cff:	c1 e2 08             	shl    edx,0x8
c0011d02:	09 d0                	or     eax,edx
c0011d04:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011d09:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011d0e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011d13:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011d17:	88 90 00 5b 02 c0    	mov    BYTE PTR [eax-0x3ffda500],dl
c0011d1d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011d22:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011d27:	66 89 84 12 00 6d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd9300],ax
c0011d2f:	e9 b0 00 00 00       	jmp    c0011de4 <scanMADT()+0x4b8>
c0011d34:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011d39:	0f 85 99 00 00 00    	jne    c0011dd8 <scanMADT()+0x4ac>
c0011d3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d43:	8d 50 01             	lea    edx,[eax+0x1]
c0011d46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d4e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011d52:	0f b6 c0             	movzx  eax,al
c0011d55:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011d59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d61:	01 d0                	add    eax,edx
c0011d63:	83 c0 2c             	add    eax,0x2c
c0011d66:	8a 00                	mov    al,BYTE PTR [eax]
c0011d68:	0f b6 d0             	movzx  edx,al
c0011d6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d6f:	8d 48 01             	lea    ecx,[eax+0x1]
c0011d72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d76:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011d7a:	0f b6 c0             	movzx  eax,al
c0011d7d:	c1 e0 08             	shl    eax,0x8
c0011d80:	09 d0                	or     eax,edx
c0011d82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d86:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011d8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d8f:	8d 50 01             	lea    edx,[eax+0x1]
c0011d92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d96:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d9a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011d9e:	0f b6 c0             	movzx  eax,al
c0011da1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011da5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011da9:	c1 e0 08             	shl    eax,0x8
c0011dac:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011db0:	89 c1                	mov    ecx,eax
c0011db2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011db6:	c1 e0 18             	shl    eax,0x18
c0011db9:	89 c3                	mov    ebx,eax
c0011dbb:	a1 70 6c 02 c0       	mov    eax,ds:0xc0026c70
c0011dc0:	8d 50 01             	lea    edx,[eax+0x1]
c0011dc3:	89 15 70 6c 02 c0    	mov    DWORD PTR ds:0xc0026c70,edx
c0011dc9:	09 d9                	or     ecx,ebx
c0011dcb:	89 ca                	mov    edx,ecx
c0011dcd:	89 14 85 80 6c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9380],edx
c0011dd4:	eb 0e                	jmp    c0011de4 <scanMADT()+0x4b8>
c0011dd6:	66 90                	xchg   ax,ax
c0011dd8:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0011ddd:	75 05                	jne    c0011de4 <scanMADT()+0x4b8>
c0011ddf:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011de4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0011de9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011ded:	01 d0                	add    eax,edx
c0011def:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011df3:	e9 68 fc ff ff       	jmp    c0011a60 <scanMADT()+0x134>
c0011df8:	90                   	nop
c0011df9:	eb 05                	jmp    c0011e00 <scanMADT()+0x4d4>
c0011dfb:	90                   	nop
c0011dfc:	90                   	nop
c0011dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0011e00:	83 c4 38             	add    esp,0x38
c0011e03:	5b                   	pop    ebx
c0011e04:	c3                   	ret    
c0011e05:	90                   	nop
c0011e06:	66 90                	xchg   ax,ax

c0011e08 <ACPI::ACPI()>:
c0011e08:	83 ec 0c             	sub    esp,0xc
c0011e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e0f:	83 ec 08             	sub    esp,0x8
c0011e12:	68 03 3d 02 c0       	push   0xc0023d03
c0011e17:	50                   	push   eax
c0011e18:	e8 a1 c2 ff ff       	call   c000e0be <Device::Device(char const*)>
c0011e1d:	83 c4 10             	add    esp,0x10
c0011e20:	ba 8c 3e 02 c0       	mov    edx,0xc0023e8c
c0011e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e29:	89 10                	mov    DWORD PTR [eax],edx
c0011e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e2f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0011e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e3a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0011e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e48:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0011e52:	83 ec 0c             	sub    esp,0xc
c0011e55:	68 08 3d 02 c0       	push   0xc0023d08
c0011e5a:	e8 be 7b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011e5f:	83 c4 10             	add    esp,0x10
c0011e62:	e8 c5 fa ff ff       	call   c001192c <scanMADT()>
c0011e67:	90                   	nop
c0011e68:	83 c4 0c             	add    esp,0xc
c0011e6b:	c3                   	ret    

c0011e6c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0011e6c:	83 ec 2c             	sub    esp,0x2c
c0011e6f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e77:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011e7b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0011e7f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0011e84:	88 d0                	mov    al,dl
c0011e86:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011e8a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011e8f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e97:	90                   	nop
c0011e98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e9c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011ea2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011ea6:	0f 8d 9c 00 00 00    	jge    c0011f48 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0011eac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011eb0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011eb4:	83 c2 2a             	add    edx,0x2a
c0011eb7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0011ebb:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0011ec0:	75 7a                	jne    c0011f3c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011ec2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ec6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011eca:	83 c2 2a             	add    edx,0x2a
c0011ecd:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0011ed1:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0011ed5:	75 65                	jne    c0011f3c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011ed7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011edc:	74 3a                	je     c0011f18 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0011ede:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ee2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ee6:	83 c2 2a             	add    edx,0x2a
c0011ee9:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0011eed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ef4:	39 c2                	cmp    edx,eax
c0011ef6:	74 10                	je     c0011f08 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0011ef8:	83 ec 0c             	sub    esp,0xc
c0011efb:	68 a4 3b 02 c0       	push   0xc0023ba4
c0011f00:	e8 30 24 00 00       	call   c0014335 <Krnl::panic(char const*)>
c0011f05:	83 c4 10             	add    esp,0x10
c0011f08:	83 ec 0c             	sub    esp,0xc
c0011f0b:	68 16 3d 02 c0       	push   0xc0023d16
c0011f10:	e8 20 24 00 00       	call   c0014335 <Krnl::panic(char const*)>
c0011f15:	83 c4 10             	add    esp,0x10
c0011f18:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011f1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f20:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f24:	83 c2 2a             	add    edx,0x2a
c0011f27:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0011f2b:	8b 02                	mov    eax,DWORD PTR [edx]
c0011f2d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011f30:	89 01                	mov    DWORD PTR [ecx],eax
c0011f32:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0011f35:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011f3a:	66 90                	xchg   ax,ax
c0011f3c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f40:	e9 53 ff ff ff       	jmp    c0011e98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0011f45:	8d 76 00             	lea    esi,[esi+0x0]
c0011f48:	90                   	nop
c0011f49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f4d:	83 c4 2c             	add    esp,0x2c
c0011f50:	c2 04 00             	ret    0x4
c0011f53:	90                   	nop

c0011f54 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0011f54:	83 ec 1c             	sub    esp,0x1c
c0011f57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f5b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0011f5f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f63:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011f68:	88 c8                	mov    al,cl
c0011f6a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0011f6e:	88 d0                	mov    al,dl
c0011f70:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f78:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011f7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f82:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011f85:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0011f89:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0011f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f91:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011f97:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0011f9b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0011f9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fa2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0011fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fab:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011fb1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0011fb5:	8d 48 01             	lea    ecx,[eax+0x1]
c0011fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fbc:	83 c2 2a             	add    edx,0x2a
c0011fbf:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0011fc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fc7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011fcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fd1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011fd4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011fd8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0011fdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fe0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011fe6:	8d 50 01             	lea    edx,[eax+0x1]
c0011fe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fed:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0011ff3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ff7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011ffd:	3d 00 02 00 00       	cmp    eax,0x200
c0012002:	75 10                	jne    c0012014 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0012004:	83 ec 0c             	sub    esp,0xc
c0012007:	68 25 3d 02 c0       	push   0xc0023d25
c001200c:	e8 24 23 00 00       	call   c0014335 <Krnl::panic(char const*)>
c0012011:	83 c4 10             	add    esp,0x10
c0012014:	90                   	nop
c0012015:	83 c4 1c             	add    esp,0x1c
c0012018:	c3                   	ret    
c0012019:	90                   	nop
c001201a:	66 90                	xchg   ax,ax

c001201c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001201c:	b8 00 00 00 00       	mov    eax,0x0
c0012021:	c3                   	ret    
c0012022:	66 90                	xchg   ax,ax

c0012024 <ACPI::detectPCI()>:
c0012024:	53                   	push   ebx
c0012025:	83 ec 28             	sub    esp,0x28
c0012028:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001202d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0012032:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c0012037:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001203d:	83 e0 04             	and    eax,0x4
c0012040:	84 c0                	test   al,al
c0012042:	74 2c                	je     c0012070 <ACPI::detectPCI()+0x4c>
c0012044:	a1 68 6c 02 c0       	mov    eax,ds:0xc0026c68
c0012049:	83 ec 08             	sub    esp,0x8
c001204c:	68 42 3d 02 c0       	push   0xc0023d42
c0012051:	50                   	push   eax
c0012052:	e8 5d f8 ff ff       	call   c00118b4 <findDataTable(unsigned char*, char*)>
c0012057:	83 c4 10             	add    esp,0x10
c001205a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001205e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012063:	74 0b                	je     c0012070 <ACPI::detectPCI()+0x4c>
c0012065:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001206a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001206f:	90                   	nop
c0012070:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0012078:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001207c:	8a 00                	mov    al,BYTE PTR [eax]
c001207e:	3c 01                	cmp    al,0x1
c0012080:	75 0e                	jne    c0012090 <ACPI::detectPCI()+0x6c>
c0012082:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012087:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001208c:	eb 2a                	jmp    c00120b8 <ACPI::detectPCI()+0x94>
c001208e:	66 90                	xchg   ax,ax
c0012090:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012094:	8a 00                	mov    al,BYTE PTR [eax]
c0012096:	3c 02                	cmp    al,0x2
c0012098:	75 1e                	jne    c00120b8 <ACPI::detectPCI()+0x94>
c001209a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001209f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00120a4:	74 12                	je     c00120b8 <ACPI::detectPCI()+0x94>
c00120a6:	83 ec 0c             	sub    esp,0xc
c00120a9:	68 d4 3b 02 c0       	push   0xc0023bd4
c00120ae:	e8 82 22 00 00       	call   c0014335 <Krnl::panic(char const*)>
c00120b3:	83 c4 10             	add    esp,0x10
c00120b6:	66 90                	xchg   ax,ax
c00120b8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00120bc:	83 f0 01             	xor    eax,0x1
c00120bf:	84 c0                	test   al,al
c00120c1:	74 41                	je     c0012104 <ACPI::detectPCI()+0xe0>
c00120c3:	e8 88 e0 fe ff       	call   c0000150 <manualPCIProbe>
c00120c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120cc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00120d1:	75 0d                	jne    c00120e0 <ACPI::detectPCI()+0xbc>
c00120d3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120d8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00120dd:	eb 25                	jmp    c0012104 <ACPI::detectPCI()+0xe0>
c00120df:	90                   	nop
c00120e0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c00120e5:	75 1d                	jne    c0012104 <ACPI::detectPCI()+0xe0>
c00120e7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120ec:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00120f1:	74 11                	je     c0012104 <ACPI::detectPCI()+0xe0>
c00120f3:	83 ec 0c             	sub    esp,0xc
c00120f6:	68 d4 3b 02 c0       	push   0xc0023bd4
c00120fb:	e8 35 22 00 00       	call   c0014335 <Krnl::panic(char const*)>
c0012100:	83 c4 10             	add    esp,0x10
c0012103:	90                   	nop
c0012104:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012109:	0f 84 85 00 00 00    	je     c0012194 <ACPI::detectPCI()+0x170>
c001210f:	83 ec 0c             	sub    esp,0xc
c0012112:	68 47 3d 02 c0       	push   0xc0023d47
c0012117:	e8 01 79 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001211c:	83 c4 10             	add    esp,0x10
c001211f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0012127:	83 ec 0c             	sub    esp,0xc
c001212a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001212e:	e8 90 78 ff ff       	call   c00099c3 <malloc>
c0012133:	83 c4 10             	add    esp,0x10
c0012136:	89 c3                	mov    ebx,eax
c0012138:	83 ec 0c             	sub    esp,0xc
c001213b:	53                   	push   ebx
c001213c:	e8 dd a9 00 00       	call   c001cb1e <PCI::PCI()>
c0012141:	83 c4 10             	add    esp,0x10
c0012144:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012148:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001214c:	83 ec 08             	sub    esp,0x8
c001214f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012153:	50                   	push   eax
c0012154:	e8 61 bd ff ff       	call   c000deba <Device::addChild(Device*)>
c0012159:	83 c4 10             	add    esp,0x10
c001215c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012160:	8b 00                	mov    eax,DWORD PTR [eax]
c0012162:	83 c0 08             	add    eax,0x8
c0012165:	8b 00                	mov    eax,DWORD PTR [eax]
c0012167:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c001216c:	74 0a                	je     c0012178 <ACPI::detectPCI()+0x154>
c001216e:	ba 01 00 00 00       	mov    edx,0x1
c0012173:	eb 0b                	jmp    c0012180 <ACPI::detectPCI()+0x15c>
c0012175:	8d 76 00             	lea    esi,[esi+0x0]
c0012178:	ba 02 00 00 00       	mov    edx,0x2
c001217d:	8d 76 00             	lea    esi,[esi+0x0]
c0012180:	6a 00                	push   0x0
c0012182:	6a 00                	push   0x0
c0012184:	52                   	push   edx
c0012185:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012189:	ff d0                	call   eax
c001218b:	83 c4 10             	add    esp,0x10
c001218e:	e9 a1 00 00 00       	jmp    c0012234 <ACPI::detectPCI()+0x210>
c0012193:	90                   	nop
c0012194:	83 ec 0c             	sub    esp,0xc
c0012197:	68 5f 3d 02 c0       	push   0xc0023d5f
c001219c:	e8 d2 a8 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c00121a1:	83 c4 10             	add    esp,0x10
c00121a4:	83 ec 0c             	sub    esp,0xc
c00121a7:	68 6a 3d 02 c0       	push   0xc0023d6a
c00121ac:	e8 6c 78 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00121b1:	83 c4 10             	add    esp,0x10
c00121b4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c00121bb:	83 ec 0c             	sub    esp,0xc
c00121be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00121c2:	e8 fc 77 ff ff       	call   c00099c3 <malloc>
c00121c7:	83 c4 10             	add    esp,0x10
c00121ca:	89 c3                	mov    ebx,eax
c00121cc:	83 ec 0c             	sub    esp,0xc
c00121cf:	53                   	push   ebx
c00121d0:	e8 b3 b4 00 00       	call   c001d688 <IDE::IDE()>
c00121d5:	83 c4 10             	add    esp,0x10
c00121d8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00121dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121e0:	83 ec 08             	sub    esp,0x8
c00121e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00121e7:	50                   	push   eax
c00121e8:	e8 cd bc ff ff       	call   c000deba <Device::addChild(Device*)>
c00121ed:	83 c4 10             	add    esp,0x10
c00121f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121f4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00121fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012202:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001220b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001220f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012218:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001221c:	8b 00                	mov    eax,DWORD PTR [eax]
c001221e:	83 c0 08             	add    eax,0x8
c0012221:	8b 00                	mov    eax,DWORD PTR [eax]
c0012223:	6a 00                	push   0x0
c0012225:	6a 00                	push   0x0
c0012227:	6a 00                	push   0x0
c0012229:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001222d:	ff d0                	call   eax
c001222f:	83 c4 10             	add    esp,0x10
c0012232:	66 90                	xchg   ax,ax
c0012234:	90                   	nop
c0012235:	83 c4 28             	add    esp,0x28
c0012238:	5b                   	pop    ebx
c0012239:	c3                   	ret    
c001223a:	66 90                	xchg   ax,ax

c001223c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001223c:	83 ec 1c             	sub    esp,0x1c
c001223f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012243:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012246:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001224a:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c001224f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012254:	83 ec 08             	sub    esp,0x8
c0012257:	52                   	push   edx
c0012258:	50                   	push   eax
c0012259:	e8 36 6d ff ff       	call   c0008f94 <Computer::readCMOS(unsigned char)>
c001225e:	83 c4 10             	add    esp,0x10
c0012261:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012265:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c001226a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001226f:	83 ec 04             	sub    esp,0x4
c0012272:	6a 01                	push   0x1
c0012274:	52                   	push   edx
c0012275:	50                   	push   eax
c0012276:	e8 f5 6e ff ff       	call   c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>
c001227b:	83 c4 10             	add    esp,0x10
c001227e:	90                   	nop
c001227f:	83 c4 1c             	add    esp,0x1c
c0012282:	c3                   	ret    
c0012283:	90                   	nop

c0012284 <ACPI::sleep()>:
c0012284:	83 ec 0c             	sub    esp,0xc
c0012287:	a1 40 6a 02 c0       	mov    eax,ds:0xc0026a40
c001228c:	85 c0                	test   eax,eax
c001228e:	74 08                	je     c0012298 <ACPI::sleep()+0x14>
c0012290:	a1 40 6a 02 c0       	mov    eax,ds:0xc0026a40
c0012295:	ff d0                	call   eax
c0012297:	90                   	nop
c0012298:	90                   	nop
c0012299:	83 c4 0c             	add    esp,0xc
c001229c:	c3                   	ret    
c001229d:	90                   	nop
c001229e:	66 90                	xchg   ax,ax

c00122a0 <ACPI::open(int, int, void*)>:
c00122a0:	57                   	push   edi
c00122a1:	56                   	push   esi
c00122a2:	53                   	push   ebx
c00122a3:	81 ec 70 01 00 00    	sub    esp,0x170
c00122a9:	83 ec 0c             	sub    esp,0xc
c00122ac:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00122b3:	e8 6c fd ff ff       	call   c0012024 <ACPI::detectPCI()>
c00122b8:	83 c4 10             	add    esp,0x10
c00122bb:	83 ec 0c             	sub    esp,0xc
c00122be:	68 fc 3b 02 c0       	push   0xc0023bfc
c00122c3:	e8 55 77 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00122c8:	83 c4 10             	add    esp,0x10
c00122cb:	83 ec 0c             	sub    esp,0xc
c00122ce:	68 7f 3d 02 c0       	push   0xc0023d7f
c00122d3:	e8 d3 47 00 00       	call   c0016aab <Thr::loadKernelSymbolTable(char const*)>
c00122d8:	83 c4 10             	add    esp,0x10
c00122db:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c00122e3:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c00122ee:	83 ec 0c             	sub    esp,0xc
c00122f1:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00122f8:	e8 c6 76 ff ff       	call   c00099c3 <malloc>
c00122fd:	83 c4 10             	add    esp,0x10
c0012300:	89 c3                	mov    ebx,eax
c0012302:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0012307:	83 ec 04             	sub    esp,0x4
c001230a:	50                   	push   eax
c001230b:	68 9d 3d 02 c0       	push   0xc0023d9d
c0012310:	53                   	push   ebx
c0012311:	e8 c8 ac ff ff       	call   c000cfde <File::File(char const*, Process*)>
c0012316:	83 c4 10             	add    esp,0x10
c0012319:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012320:	83 ec 08             	sub    esp,0x8
c0012323:	6a 01                	push   0x1
c0012325:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001232c:	e8 11 ad ff ff       	call   c000d042 <File::open(FileOpenMode)>
c0012331:	83 c4 10             	add    esp,0x10
c0012334:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001233b:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012343:	75 17                	jne    c001235c <ACPI::open(int, int, void*)+0xbc>
c0012345:	83 ec 0c             	sub    esp,0xc
c0012348:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001234f:	e8 4c ad ff ff       	call   c000d0a0 <File::close()>
c0012354:	83 c4 10             	add    esp,0x10
c0012357:	eb 0b                	jmp    c0012364 <ACPI::open(int, int, void*)+0xc4>
c0012359:	8d 76 00             	lea    esi,[esi+0x0]
c001235c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012364:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c001236c:	74 1e                	je     c001238c <ACPI::open(int, int, void*)+0xec>
c001236e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012375:	8b 00                	mov    eax,DWORD PTR [eax]
c0012377:	83 c0 08             	add    eax,0x8
c001237a:	8b 00                	mov    eax,DWORD PTR [eax]
c001237c:	83 ec 0c             	sub    esp,0xc
c001237f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012386:	ff d0                	call   eax
c0012388:	83 c4 10             	add    esp,0x10
c001238b:	90                   	nop
c001238c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012393:	83 f0 01             	xor    eax,0x1
c0012396:	84 c0                	test   al,al
c0012398:	74 42                	je     c00123dc <ACPI::open(int, int, void*)+0x13c>
c001239a:	83 ec 0c             	sub    esp,0xc
c001239d:	68 bb 3d 02 c0       	push   0xc0023dbb
c00123a2:	e8 76 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00123a7:	83 c4 10             	add    esp,0x10
c00123aa:	83 ec 04             	sub    esp,0x4
c00123ad:	6a 0c                	push   0xc
c00123af:	68 d6 3d 02 c0       	push   0xc0023dd6
c00123b4:	68 e7 3d 02 c0       	push   0xc0023de7
c00123b9:	e8 57 2d 00 00       	call   c0015115 <Reg::readIntWithDefault(char*, char*, int)>
c00123be:	83 c4 10             	add    esp,0x10
c00123c1:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c00123c8:	83 ec 0c             	sub    esp,0xc
c00123cb:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c00123d2:	e8 d4 94 ff ff       	call   c000b8ab <Virt::setupPageSwapping(int)>
c00123d7:	83 c4 10             	add    esp,0x10
c00123da:	66 90                	xchg   ax,ax
c00123dc:	83 ec 0c             	sub    esp,0xc
c00123df:	68 26 25 02 c0       	push   0xc0022526
c00123e4:	e8 34 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00123e9:	83 c4 10             	add    esp,0x10
c00123ec:	8b 1d 08 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026408
c00123f2:	83 ec 08             	sub    esp,0x8
c00123f5:	6a 01                	push   0x1
c00123f7:	68 ee 3d 02 c0       	push   0xc0023dee
c00123fc:	e8 21 51 00 00       	call   c0017522 <Thr::loadDLL(char const*, bool)>
c0012401:	83 c4 10             	add    esp,0x10
c0012404:	83 ec 08             	sub    esp,0x8
c0012407:	53                   	push   ebx
c0012408:	50                   	push   eax
c0012409:	e8 45 53 00 00       	call   c0017753 <Thr::executeDLL(unsigned long, void*)>
c001240e:	83 c4 10             	add    esp,0x10
c0012411:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012418:	83 ec 08             	sub    esp,0x8
c001241b:	6a 12                	push   0x12
c001241d:	50                   	push   eax
c001241e:	e8 1b be ff ff       	call   c000e23e <getDevicesOfType(DeviceType)>
c0012423:	83 c4 0c             	add    esp,0xc
c0012426:	66 90                	xchg   ax,ax
c0012428:	83 ec 0c             	sub    esp,0xc
c001242b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012432:	50                   	push   eax
c0012433:	e8 d8 f2 00 00       	call   c0021710 <LinkedList<Device>::isEmpty()>
c0012438:	83 c4 10             	add    esp,0x10
c001243b:	83 f0 01             	xor    eax,0x1
c001243e:	84 c0                	test   al,al
c0012440:	0f 84 46 01 00 00    	je     c001258c <ACPI::open(int, int, void*)+0x2ec>
c0012446:	83 ec 0c             	sub    esp,0xc
c0012449:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012450:	50                   	push   eax
c0012451:	e8 d6 f2 00 00       	call   c002172c <LinkedList<Device>::getFirstElement()>
c0012456:	83 c4 10             	add    esp,0x10
c0012459:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012460:	83 ec 0c             	sub    esp,0xc
c0012463:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001246a:	50                   	push   eax
c001246b:	e8 c4 f2 00 00       	call   c0021734 <LinkedList<Device>::removeFirst()>
c0012470:	83 c4 10             	add    esp,0x10
c0012473:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001247a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012481:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012488:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001248c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012492:	ba 09 00 00 00       	mov    edx,0x9
c0012497:	fc                   	cld    
c0012498:	89 c7                	mov    edi,eax
c001249a:	89 de                	mov    esi,ebx
c001249c:	89 d1                	mov    ecx,edx
c001249e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00124a0:	83 ec 08             	sub    esp,0x8
c00124a3:	8d 44 24 38          	lea    eax,[esp+0x38]
c00124a7:	50                   	push   eax
c00124a8:	83 ec 24             	sub    esp,0x24
c00124ab:	89 e0                	mov    eax,esp
c00124ad:	89 c3                	mov    ebx,eax
c00124af:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00124b3:	ba 09 00 00 00       	mov    edx,0x9
c00124b8:	89 df                	mov    edi,ebx
c00124ba:	89 c6                	mov    esi,eax
c00124bc:	89 d1                	mov    ecx,edx
c00124be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00124c0:	e8 37 ab 00 00       	call   c001cffc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00124c5:	83 c4 30             	add    esp,0x30
c00124c8:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00124cf:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c00124d7:	0f 84 4b ff ff ff    	je     c0012428 <ACPI::open(int, int, void*)+0x188>
c00124dd:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00124e8:	83 ec 0c             	sub    esp,0xc
c00124eb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00124f2:	e8 cc 74 ff ff       	call   c00099c3 <malloc>
c00124f7:	83 c4 10             	add    esp,0x10
c00124fa:	89 c3                	mov    ebx,eax
c00124fc:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0012501:	83 ec 04             	sub    esp,0x4
c0012504:	50                   	push   eax
c0012505:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001250c:	53                   	push   ebx
c001250d:	e8 cc aa ff ff       	call   c000cfde <File::File(char const*, Process*)>
c0012512:	83 c4 10             	add    esp,0x10
c0012515:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001251c:	83 ec 0c             	sub    esp,0xc
c001251f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012526:	e8 85 ad ff ff       	call   c000d2b0 <File::exists()>
c001252b:	83 c4 10             	add    esp,0x10
c001252e:	84 c0                	test   al,al
c0012530:	74 2a                	je     c001255c <ACPI::open(int, int, void*)+0x2bc>
c0012532:	83 ec 08             	sub    esp,0x8
c0012535:	6a 01                	push   0x1
c0012537:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001253e:	e8 df 4f 00 00       	call   c0017522 <Thr::loadDLL(char const*, bool)>
c0012543:	83 c4 10             	add    esp,0x10
c0012546:	83 ec 08             	sub    esp,0x8
c0012549:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012550:	50                   	push   eax
c0012551:	e8 fd 51 00 00       	call   c0017753 <Thr::executeDLL(unsigned long, void*)>
c0012556:	83 c4 10             	add    esp,0x10
c0012559:	8d 76 00             	lea    esi,[esi+0x0]
c001255c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012564:	0f 84 be fe ff ff    	je     c0012428 <ACPI::open(int, int, void*)+0x188>
c001256a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012571:	8b 00                	mov    eax,DWORD PTR [eax]
c0012573:	83 c0 08             	add    eax,0x8
c0012576:	8b 00                	mov    eax,DWORD PTR [eax]
c0012578:	83 ec 0c             	sub    esp,0xc
c001257b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012582:	ff d0                	call   eax
c0012584:	83 c4 10             	add    esp,0x10
c0012587:	e9 9c fe ff ff       	jmp    c0012428 <ACPI::open(int, int, void*)+0x188>
c001258c:	83 ec 0c             	sub    esp,0xc
c001258f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012596:	50                   	push   eax
c0012597:	e8 70 f1 00 00       	call   c002170c <LinkedList<Device>::~LinkedList()>
c001259c:	83 c4 10             	add    esp,0x10
c001259f:	8b 1d 08 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026408
c00125a5:	83 ec 08             	sub    esp,0x8
c00125a8:	6a 01                	push   0x1
c00125aa:	68 09 3e 02 c0       	push   0xc0023e09
c00125af:	e8 6e 4f 00 00       	call   c0017522 <Thr::loadDLL(char const*, bool)>
c00125b4:	83 c4 10             	add    esp,0x10
c00125b7:	83 ec 08             	sub    esp,0x8
c00125ba:	53                   	push   ebx
c00125bb:	50                   	push   eax
c00125bc:	e8 92 51 00 00       	call   c0017753 <Thr::executeDLL(unsigned long, void*)>
c00125c1:	83 c4 10             	add    esp,0x10
c00125c4:	8b 1d 08 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026408
c00125ca:	83 ec 08             	sub    esp,0x8
c00125cd:	6a 01                	push   0x1
c00125cf:	68 26 3e 02 c0       	push   0xc0023e26
c00125d4:	e8 49 4f 00 00       	call   c0017522 <Thr::loadDLL(char const*, bool)>
c00125d9:	83 c4 10             	add    esp,0x10
c00125dc:	83 ec 08             	sub    esp,0x8
c00125df:	53                   	push   ebx
c00125e0:	50                   	push   eax
c00125e1:	e8 6d 51 00 00       	call   c0017753 <Thr::executeDLL(unsigned long, void*)>
c00125e6:	83 c4 10             	add    esp,0x10
c00125e9:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c00125ee:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00125f4:	83 e0 04             	and    eax,0x4
c00125f7:	84 c0                	test   al,al
c00125f9:	0f 84 15 01 00 00    	je     c0012714 <ACPI::open(int, int, void*)+0x474>
c00125ff:	83 ec 0c             	sub    esp,0xc
c0012602:	68 43 3e 02 c0       	push   0xc0023e43
c0012607:	e8 11 74 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001260c:	83 c4 10             	add    esp,0x10
c001260f:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001261a:	83 ec 0c             	sub    esp,0xc
c001261d:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012624:	e8 9a 73 ff ff       	call   c00099c3 <malloc>
c0012629:	83 c4 10             	add    esp,0x10
c001262c:	89 c3                	mov    ebx,eax
c001262e:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0012633:	83 ec 04             	sub    esp,0x4
c0012636:	50                   	push   eax
c0012637:	68 60 3e 02 c0       	push   0xc0023e60
c001263c:	53                   	push   ebx
c001263d:	e8 9c a9 ff ff       	call   c000cfde <File::File(char const*, Process*)>
c0012642:	83 c4 10             	add    esp,0x10
c0012645:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001264c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012654:	74 1a                	je     c0012670 <ACPI::open(int, int, void*)+0x3d0>
c0012656:	83 ec 0c             	sub    esp,0xc
c0012659:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012660:	e8 4b ac ff ff       	call   c000d2b0 <File::exists()>
c0012665:	83 c4 10             	add    esp,0x10
c0012668:	84 c0                	test   al,al
c001266a:	74 04                	je     c0012670 <ACPI::open(int, int, void*)+0x3d0>
c001266c:	b0 01                	mov    al,0x1
c001266e:	eb 04                	jmp    c0012674 <ACPI::open(int, int, void*)+0x3d4>
c0012670:	b0 00                	mov    al,0x0
c0012672:	66 90                	xchg   ax,ax
c0012674:	84 c0                	test   al,al
c0012676:	74 28                	je     c00126a0 <ACPI::open(int, int, void*)+0x400>
c0012678:	83 ec 08             	sub    esp,0x8
c001267b:	6a 01                	push   0x1
c001267d:	68 60 3e 02 c0       	push   0xc0023e60
c0012682:	e8 9b 4e 00 00       	call   c0017522 <Thr::loadDLL(char const*, bool)>
c0012687:	83 c4 10             	add    esp,0x10
c001268a:	83 ec 08             	sub    esp,0x8
c001268d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012694:	50                   	push   eax
c0012695:	e8 b9 50 00 00       	call   c0017753 <Thr::executeDLL(unsigned long, void*)>
c001269a:	83 c4 10             	add    esp,0x10
c001269d:	8d 76 00             	lea    esi,[esi+0x0]
c00126a0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00126a8:	74 2a                	je     c00126d4 <ACPI::open(int, int, void*)+0x434>
c00126aa:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00126b2:	74 20                	je     c00126d4 <ACPI::open(int, int, void*)+0x434>
c00126b4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00126bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00126bd:	83 c0 08             	add    eax,0x8
c00126c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00126c2:	83 ec 0c             	sub    esp,0xc
c00126c5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00126cc:	ff d0                	call   eax
c00126ce:	83 c4 10             	add    esp,0x10
c00126d1:	8d 76 00             	lea    esi,[esi+0x0]
c00126d4:	a1 68 6c 02 c0       	mov    eax,ds:0xc0026c68
c00126d9:	83 ec 08             	sub    esp,0x8
c00126dc:	68 7d 3e 02 c0       	push   0xc0023e7d
c00126e1:	50                   	push   eax
c00126e2:	e8 cd f1 ff ff       	call   c00118b4 <findDataTable(unsigned char*, char*)>
c00126e7:	83 c4 10             	add    esp,0x10
c00126ea:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00126f1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00126f9:	74 19                	je     c0012714 <ACPI::open(int, int, void*)+0x474>
c00126fb:	83 ec 08             	sub    esp,0x8
c00126fe:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012705:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001270c:	e8 2b fb ff ff       	call   c001223c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012711:	83 c4 10             	add    esp,0x10
c0012714:	b8 00 00 00 00       	mov    eax,0x0
c0012719:	81 c4 70 01 00 00    	add    esp,0x170
c001271f:	5b                   	pop    ebx
c0012720:	5e                   	pop    esi
c0012721:	5f                   	pop    edi
c0012722:	c3                   	ret    
c0012723:	90                   	nop

c0012724 <CPU::close(int, int, void*)>:
c0012724:	31 c0                	xor    eax,eax
c0012726:	c3                   	ret    
c0012727:	90                   	nop

c0012728 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012728:	55                   	push   ebp
c0012729:	57                   	push   edi
c001272a:	56                   	push   esi
c001272b:	53                   	push   ebx
c001272c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012730:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012734:	89 ce                	mov    esi,ecx
c0012736:	89 d5                	mov    ebp,edx
c0012738:	80 f9 04             	cmp    cl,0x4
c001273b:	75 28                	jne    c0012765 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001273d:	8d 42 f9             	lea    eax,[edx-0x7]
c0012740:	3c 03                	cmp    al,0x3
c0012742:	0f 86 63 01 00 00    	jbe    c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012748:	80 fa 03             	cmp    dl,0x3
c001274b:	0f 84 5a 01 00 00    	je     c00128ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012751:	8d 7a f2             	lea    edi,[edx-0xe]
c0012754:	b8 d0 5c 02 c0       	mov    eax,0xc0025cd0
c0012759:	89 fb                	mov    ebx,edi
c001275b:	80 fb 01             	cmp    bl,0x1
c001275e:	77 4e                	ja     c00127ae <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012760:	e9 52 01 00 00       	jmp    c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012765:	80 f9 05             	cmp    cl,0x5
c0012768:	75 4d                	jne    c00127b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001276a:	b8 e0 5c 02 c0       	mov    eax,0xc0025ce0
c001276f:	80 fa 03             	cmp    dl,0x3
c0012772:	0f 86 3f 01 00 00    	jbe    c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012778:	8d 7a fa             	lea    edi,[edx-0x6]
c001277b:	b8 f0 5c 02 c0       	mov    eax,0xc0025cf0
c0012780:	89 fb                	mov    ebx,edi
c0012782:	80 fb 01             	cmp    bl,0x1
c0012785:	0f 86 2c 01 00 00    	jbe    c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001278b:	b8 00 5d 02 c0       	mov    eax,0xc0025d00
c0012790:	80 fa 08             	cmp    dl,0x8
c0012793:	0f 84 1e 01 00 00    	je     c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012799:	89 d7                	mov    edi,edx
c001279b:	b8 10 5d 02 c0       	mov    eax,0xc0025d10
c00127a0:	83 e7 fb             	and    edi,0xfffffffb
c00127a3:	89 fb                	mov    ebx,edi
c00127a5:	80 fb 09             	cmp    bl,0x9
c00127a8:	0f 84 09 01 00 00    	je     c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127ae:	31 c0                	xor    eax,eax
c00127b0:	89 eb                	mov    ebx,ebp
c00127b2:	0f b6 fb             	movzx  edi,bl
c00127b5:	eb 30                	jmp    c00127e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00127b7:	31 c0                	xor    eax,eax
c00127b9:	80 f9 06             	cmp    cl,0x6
c00127bc:	75 f2                	jne    c00127b0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00127be:	80 fa 0a             	cmp    dl,0xa
c00127c1:	77 ed                	ja     c00127b0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00127c3:	bf de 05 00 00       	mov    edi,0x5de
c00127c8:	0f a3 d7             	bt     edi,edx
c00127cb:	73 e3                	jae    c00127b0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00127cd:	b8 20 5d 02 c0       	mov    eax,0xc0025d20
c00127d2:	e9 e0 00 00 00       	jmp    c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127d7:	39 c7                	cmp    edi,eax
c00127d9:	0f 84 d3 00 00 00    	je     c00128b2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00127df:	40                   	inc    eax
c00127e0:	3d d0 00 00 00       	cmp    eax,0xd0
c00127e5:	74 09                	je     c00127f0 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00127e7:	89 f3                	mov    ebx,esi
c00127e9:	80 fb 0f             	cmp    bl,0xf
c00127ec:	75 f1                	jne    c00127df <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00127ee:	eb e7                	jmp    c00127d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00127f0:	80 f9 10             	cmp    cl,0x10
c00127f3:	75 14                	jne    c0012809 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00127f5:	8d 42 fc             	lea    eax,[edx-0x4]
c00127f8:	83 e0 fb             	and    eax,0xfffffffb
c00127fb:	3c 02                	cmp    al,0x2
c00127fd:	76 34                	jbe    c0012833 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00127ff:	b8 05 40 02 c0       	mov    eax,0xc0024005
c0012804:	80 fa 02             	cmp    dl,0x2
c0012807:	eb 24                	jmp    c001282d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012809:	80 f9 11             	cmp    cl,0x11
c001280c:	75 13                	jne    c0012821 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001280e:	b8 05 40 02 c0       	mov    eax,0xc0024005
c0012813:	80 fa 03             	cmp    dl,0x3
c0012816:	0f 85 9b 00 00 00    	jne    c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001281c:	e9 91 00 00 00       	jmp    c00128b2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012821:	80 f9 12             	cmp    cl,0x12
c0012824:	75 14                	jne    c001283a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012826:	b8 05 40 02 c0       	mov    eax,0xc0024005
c001282b:	fe ca                	dec    dl
c001282d:	0f 85 84 00 00 00    	jne    c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012833:	b8 40 5d 02 c0       	mov    eax,0xc0025d40
c0012838:	eb 7d                	jmp    c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001283a:	80 f9 14             	cmp    cl,0x14
c001283d:	75 12                	jne    c0012851 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001283f:	4a                   	dec    edx
c0012840:	b8 05 40 02 c0       	mov    eax,0xc0024005
c0012845:	80 fa 01             	cmp    dl,0x1
c0012848:	77 6d                	ja     c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001284a:	b8 50 5d 02 c0       	mov    eax,0xc0025d50
c001284f:	eb 66                	jmp    c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012851:	80 f9 15             	cmp    cl,0x15
c0012854:	75 31                	jne    c0012887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0012856:	b8 60 5d 02 c0       	mov    eax,0xc0025d60
c001285b:	80 fa 01             	cmp    dl,0x1
c001285e:	74 57                	je     c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012860:	b8 05 40 02 c0       	mov    eax,0xc0024005
c0012865:	80 fa 13             	cmp    dl,0x13
c0012868:	76 0c                	jbe    c0012876 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001286a:	80 fa 30             	cmp    dl,0x30
c001286d:	75 48                	jne    c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001286f:	b8 80 5d 02 c0       	mov    eax,0xc0025d80
c0012874:	eb 41                	jmp    c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012876:	b9 04 00 09 00       	mov    ecx,0x90004
c001287b:	0f a3 d1             	bt     ecx,edx
c001287e:	73 37                	jae    c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012880:	b8 70 5d 02 c0       	mov    eax,0xc0025d70
c0012885:	eb 30                	jmp    c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012887:	b8 05 40 02 c0       	mov    eax,0xc0024005
c001288c:	80 f9 16             	cmp    cl,0x16
c001288f:	75 26                	jne    c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012891:	b8 90 5d 02 c0       	mov    eax,0xc0025d90
c0012896:	84 d2                	test   dl,dl
c0012898:	74 1d                	je     c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001289a:	b8 05 40 02 c0       	mov    eax,0xc0024005
c001289f:	80 fa 30             	cmp    dl,0x30
c00128a2:	75 13                	jne    c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128a4:	b8 a0 5d 02 c0       	mov    eax,0xc0025da0
c00128a9:	eb 0c                	jmp    c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128ab:	b8 c0 5c 02 c0       	mov    eax,0xc0025cc0
c00128b0:	eb 05                	jmp    c00128b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128b2:	b8 30 5d 02 c0       	mov    eax,0xc0025d30
c00128b7:	5b                   	pop    ebx
c00128b8:	5e                   	pop    esi
c00128b9:	5f                   	pop    edi
c00128ba:	5d                   	pop    ebp
c00128bb:	c3                   	ret    

c00128bc <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00128bc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128c4:	80 f9 04             	cmp    cl,0x4
c00128c7:	75 6b                	jne    c0012934 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00128c9:	b8 20 5b 02 c0       	mov    eax,0xc0025b20
c00128ce:	80 fa 01             	cmp    dl,0x1
c00128d1:	0f 86 92 02 00 00    	jbe    c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128d7:	b8 30 5b 02 c0       	mov    eax,0xc0025b30
c00128dc:	80 fa 02             	cmp    dl,0x2
c00128df:	0f 84 84 02 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128e5:	b8 40 5b 02 c0       	mov    eax,0xc0025b40
c00128ea:	80 fa 03             	cmp    dl,0x3
c00128ed:	0f 84 76 02 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128f3:	b8 50 5b 02 c0       	mov    eax,0xc0025b50
c00128f8:	80 fa 04             	cmp    dl,0x4
c00128fb:	0f 84 68 02 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012901:	b8 60 5b 02 c0       	mov    eax,0xc0025b60
c0012906:	80 fa 05             	cmp    dl,0x5
c0012909:	0f 84 5a 02 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001290f:	b8 40 5b 02 c0       	mov    eax,0xc0025b40
c0012914:	80 fa 07             	cmp    dl,0x7
c0012917:	0f 84 4c 02 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001291d:	83 ea 08             	sub    edx,0x8
c0012920:	b8 05 40 02 c0       	mov    eax,0xc0024005
c0012925:	80 fa 01             	cmp    dl,0x1
c0012928:	0f 87 3b 02 00 00    	ja     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001292e:	b8 70 5b 02 c0       	mov    eax,0xc0025b70
c0012933:	c3                   	ret    
c0012934:	80 f9 05             	cmp    cl,0x5
c0012937:	75 45                	jne    c001297e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012939:	8d 4a ff             	lea    ecx,[edx-0x1]
c001293c:	b8 80 5b 02 c0       	mov    eax,0xc0025b80
c0012941:	80 f9 02             	cmp    cl,0x2
c0012944:	0f 86 1f 02 00 00    	jbe    c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001294a:	80 fa 04             	cmp    dl,0x4
c001294d:	0f 84 f3 01 00 00    	je     c0012b46 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012953:	80 fa 07             	cmp    dl,0x7
c0012956:	0f 84 0d 02 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001295c:	b8 90 5b 02 c0       	mov    eax,0xc0025b90
c0012961:	80 fa 08             	cmp    dl,0x8
c0012964:	0f 84 ff 01 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001296a:	b8 05 40 02 c0       	mov    eax,0xc0024005
c001296f:	80 fa 09             	cmp    dl,0x9
c0012972:	0f 85 f1 01 00 00    	jne    c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012978:	b8 a0 5b 02 c0       	mov    eax,0xc0025ba0
c001297d:	c3                   	ret    
c001297e:	80 f9 06             	cmp    cl,0x6
c0012981:	0f 85 85 01 00 00    	jne    c0012b0c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0012987:	b8 b0 5b 02 c0       	mov    eax,0xc0025bb0
c001298c:	80 fa 01             	cmp    dl,0x1
c001298f:	0f 84 d4 01 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012995:	8d 42 fb             	lea    eax,[edx-0x5]
c0012998:	3c 01                	cmp    al,0x1
c001299a:	0f 86 ac 01 00 00    	jbe    c0012b4c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00129a0:	80 fa 03             	cmp    dl,0x3
c00129a3:	0f 84 a3 01 00 00    	je     c0012b4c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00129a9:	8d 4a f9             	lea    ecx,[edx-0x7]
c00129ac:	b8 d0 5b 02 c0       	mov    eax,0xc0025bd0
c00129b1:	80 f9 01             	cmp    cl,0x1
c00129b4:	0f 86 af 01 00 00    	jbe    c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129ba:	80 fa 09             	cmp    dl,0x9
c00129bd:	0f 84 8f 01 00 00    	je     c0012b52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00129c3:	8d 4a f6             	lea    ecx,[edx-0xa]
c00129c6:	80 f9 01             	cmp    cl,0x1
c00129c9:	0f 86 9a 01 00 00    	jbe    c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129cf:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c00129d4:	80 fa 0d             	cmp    dl,0xd
c00129d7:	0f 84 8c 01 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129dd:	b8 f0 5b 02 c0       	mov    eax,0xc0025bf0
c00129e2:	80 fa 0e             	cmp    dl,0xe
c00129e5:	0f 84 7e 01 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129eb:	b8 00 5c 02 c0       	mov    eax,0xc0025c00
c00129f0:	80 fa 0f             	cmp    dl,0xf
c00129f3:	0f 84 70 01 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129f9:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c00129fe:	80 fa 15             	cmp    dl,0x15
c0012a01:	0f 84 62 01 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a07:	8d 4a ea             	lea    ecx,[edx-0x16]
c0012a0a:	b8 00 5c 02 c0       	mov    eax,0xc0025c00
c0012a0f:	80 f9 01             	cmp    cl,0x1
c0012a12:	0f 86 51 01 00 00    	jbe    c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a18:	80 fa 1a             	cmp    dl,0x1a
c0012a1b:	0f 84 37 01 00 00    	je     c0012b58 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0012a21:	80 fa 1c             	cmp    dl,0x1c
c0012a24:	0f 84 34 01 00 00    	je     c0012b5e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0012a2a:	80 fa 1d             	cmp    dl,0x1d
c0012a2d:	0f 84 36 01 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a33:	b8 30 5c 02 c0       	mov    eax,0xc0025c30
c0012a38:	80 fa 25             	cmp    dl,0x25
c0012a3b:	0f 84 28 01 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a41:	8d 4a da             	lea    ecx,[edx-0x26]
c0012a44:	b8 20 5c 02 c0       	mov    eax,0xc0025c20
c0012a49:	80 f9 01             	cmp    cl,0x1
c0012a4c:	0f 86 17 01 00 00    	jbe    c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a52:	b8 40 5c 02 c0       	mov    eax,0xc0025c40
c0012a57:	80 fa 2a             	cmp    dl,0x2a
c0012a5a:	0f 84 09 01 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a60:	b8 30 5c 02 c0       	mov    eax,0xc0025c30
c0012a65:	80 fa 2c             	cmp    dl,0x2c
c0012a68:	0f 84 fb 00 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a6e:	b8 40 5c 02 c0       	mov    eax,0xc0025c40
c0012a73:	80 fa 2d             	cmp    dl,0x2d
c0012a76:	0f 84 ed 00 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a7c:	b8 10 5c 02 c0       	mov    eax,0xc0025c10
c0012a81:	80 fa 2e             	cmp    dl,0x2e
c0012a84:	0f 84 df 00 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a8a:	b8 30 5c 02 c0       	mov    eax,0xc0025c30
c0012a8f:	80 fa 2f             	cmp    dl,0x2f
c0012a92:	0f 84 d1 00 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a98:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012a9b:	b8 20 5c 02 c0       	mov    eax,0xc0025c20
c0012aa0:	80 f9 01             	cmp    cl,0x1
c0012aa3:	0f 86 c0 00 00 00    	jbe    c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012aa9:	b8 50 5c 02 c0       	mov    eax,0xc0025c50
c0012aae:	80 fa 37             	cmp    dl,0x37
c0012ab1:	0f 84 b2 00 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ab7:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0012abc:	80 fa 3a             	cmp    dl,0x3a
c0012abf:	0f 84 a4 00 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ac5:	b8 70 5c 02 c0       	mov    eax,0xc0025c70
c0012aca:	80 fa 3c             	cmp    dl,0x3c
c0012acd:	0f 84 96 00 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ad3:	b8 80 5c 02 c0       	mov    eax,0xc0025c80
c0012ad8:	80 fa 3d             	cmp    dl,0x3d
c0012adb:	0f 84 88 00 00 00    	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ae1:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0012ae6:	80 fa 3e             	cmp    dl,0x3e
c0012ae9:	74 7e                	je     c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012aeb:	8d 42 bb             	lea    eax,[edx-0x45]
c0012aee:	3c 01                	cmp    al,0x1
c0012af0:	76 72                	jbe    c0012b64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012af2:	80 fa 3f             	cmp    dl,0x3f
c0012af5:	74 6d                	je     c0012b64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012af7:	80 fa 4a             	cmp    dl,0x4a
c0012afa:	74 0a                	je     c0012b06 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0012afc:	b8 05 40 02 c0       	mov    eax,0xc0024005
c0012b01:	80 fa 4d             	cmp    dl,0x4d
c0012b04:	75 63                	jne    c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b06:	b8 50 5c 02 c0       	mov    eax,0xc0025c50
c0012b0b:	c3                   	ret    
c0012b0c:	b8 05 40 02 c0       	mov    eax,0xc0024005
c0012b11:	80 f9 0b             	cmp    cl,0xb
c0012b14:	75 0a                	jne    c0012b20 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0012b16:	fe ca                	dec    dl
c0012b18:	75 4f                	jne    c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b1a:	b8 90 5c 02 c0       	mov    eax,0xc0025c90
c0012b1f:	c3                   	ret    
c0012b20:	80 f9 0f             	cmp    cl,0xf
c0012b23:	75 44                	jne    c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b25:	b8 a0 5c 02 c0       	mov    eax,0xc0025ca0
c0012b2a:	80 fa 02             	cmp    dl,0x2
c0012b2d:	76 3a                	jbe    c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b2f:	8d 42 fd             	lea    eax,[edx-0x3]
c0012b32:	3c 01                	cmp    al,0x1
c0012b34:	76 0a                	jbe    c0012b40 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0012b36:	b8 05 40 02 c0       	mov    eax,0xc0024005
c0012b3b:	80 fa 06             	cmp    dl,0x6
c0012b3e:	75 29                	jne    c0012b69 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b40:	b8 b0 5c 02 c0       	mov    eax,0xc0025cb0
c0012b45:	c3                   	ret    
c0012b46:	b8 90 5b 02 c0       	mov    eax,0xc0025b90
c0012b4b:	c3                   	ret    
c0012b4c:	b8 c0 5b 02 c0       	mov    eax,0xc0025bc0
c0012b51:	c3                   	ret    
c0012b52:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c0012b57:	c3                   	ret    
c0012b58:	b8 10 5c 02 c0       	mov    eax,0xc0025c10
c0012b5d:	c3                   	ret    
c0012b5e:	b8 20 5c 02 c0       	mov    eax,0xc0025c20
c0012b63:	c3                   	ret    
c0012b64:	b8 70 5c 02 c0       	mov    eax,0xc0025c70
c0012b69:	c3                   	ret    

c0012b6a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0012b6a:	60                   	pusha  
c0012b6b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b77:	9c                   	pushf  
c0012b78:	fa                   	cli    
c0012b79:	0f 09                	wbinvd 
c0012b7b:	0f 30                	wrmsr  
c0012b7d:	9d                   	popf   
c0012b7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b82:	89 02                	mov    DWORD PTR [edx],eax
c0012b84:	61                   	popa   
c0012b85:	c3                   	ret    

c0012b86 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0012b86:	60                   	pusha  
c0012b87:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b8b:	9c                   	pushf  
c0012b8c:	fa                   	cli    
c0012b8d:	0f 09                	wbinvd 
c0012b8f:	31 c0                	xor    eax,eax
c0012b91:	31 d2                	xor    edx,edx
c0012b93:	0f 32                	rdmsr  
c0012b95:	9d                   	popf   
c0012b96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b9a:	89 02                	mov    DWORD PTR [edx],eax
c0012b9c:	61                   	popa   
c0012b9d:	c3                   	ret    

c0012b9e <CPU::AMD_K6_writeback(int, int, int)>:
c0012b9e:	56                   	push   esi
c0012b9f:	53                   	push   ebx
c0012ba0:	83 ec 10             	sub    esp,0x10
c0012ba3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ba7:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0012bac:	75 5d                	jne    c0012c0b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012bae:	83 f8 08             	cmp    eax,0x8
c0012bb1:	75 09                	jne    c0012bbc <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0012bb3:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0012bb8:	7e 13                	jle    c0012bcd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012bba:	eb 30                	jmp    c0012bec <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012bbc:	83 f8 06             	cmp    eax,0x6
c0012bbf:	7c 4a                	jl     c0012c0b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012bc1:	83 f8 07             	cmp    eax,0x7
c0012bc4:	7e 07                	jle    c0012bcd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012bc6:	83 f8 09             	cmp    eax,0x9
c0012bc9:	74 21                	je     c0012bec <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012bcb:	eb 3e                	jmp    c0012c0b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012bcd:	89 e6                	mov    esi,esp
c0012bcf:	8b 1d 2c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002642c
c0012bd5:	56                   	push   esi
c0012bd6:	c1 eb 15             	shr    ebx,0x15
c0012bd9:	68 82 00 00 c0       	push   0xc0000082
c0012bde:	83 e3 7e             	and    ebx,0x7e
c0012be1:	e8 a0 ff ff ff       	call   c0012b86 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012be6:	56                   	push   esi
c0012be7:	6a 00                	push   0x0
c0012be9:	53                   	push   ebx
c0012bea:	eb 12                	jmp    c0012bfe <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0012bec:	89 e3                	mov    ebx,esp
c0012bee:	53                   	push   ebx
c0012bef:	68 82 00 00 c0       	push   0xc0000082
c0012bf4:	e8 8d ff ff ff       	call   c0012b86 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012bf9:	53                   	push   ebx
c0012bfa:	6a 00                	push   0x0
c0012bfc:	6a 00                	push   0x0
c0012bfe:	68 82 00 00 c0       	push   0xc0000082
c0012c03:	e8 62 ff ff ff       	call   c0012b6a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0012c08:	83 c4 18             	add    esp,0x18
c0012c0b:	83 c4 10             	add    esp,0x10
c0012c0e:	5b                   	pop    ebx
c0012c0f:	5e                   	pop    esi
c0012c10:	c3                   	ret    
c0012c11:	90                   	nop

c0012c12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0012c12:	55                   	push   ebp
c0012c13:	57                   	push   edi
c0012c14:	56                   	push   esi
c0012c15:	53                   	push   ebx
c0012c16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c1a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012c1e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012c22:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0012c26:	39 05 c0 5d 02 c0    	cmp    DWORD PTR ds:0xc0025dc0,eax
c0012c2c:	75 23                	jne    c0012c51 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0012c2e:	a1 cc 6e 02 c0       	mov    eax,ds:0xc0026ecc
c0012c33:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012c37:	89 06                	mov    DWORD PTR [esi],eax
c0012c39:	a1 c8 6e 02 c0       	mov    eax,ds:0xc0026ec8
c0012c3e:	89 07                	mov    DWORD PTR [edi],eax
c0012c40:	a1 c4 6e 02 c0       	mov    eax,ds:0xc0026ec4
c0012c45:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012c48:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0012c4d:	89 02                	mov    DWORD PTR [edx],eax
c0012c4f:	eb 3f                	jmp    c0012c90 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0012c51:	31 c9                	xor    ecx,ecx
c0012c53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c57:	0f a2                	cpuid  
c0012c59:	89 06                	mov    DWORD PTR [esi],eax
c0012c5b:	89 1f                	mov    DWORD PTR [edi],ebx
c0012c5d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c61:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0012c64:	89 10                	mov    DWORD PTR [eax],edx
c0012c66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c6a:	a3 c0 5d 02 c0       	mov    ds:0xc0025dc0,eax
c0012c6f:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c71:	a3 cc 6e 02 c0       	mov    ds:0xc0026ecc,eax
c0012c76:	8b 07                	mov    eax,DWORD PTR [edi]
c0012c78:	a3 c8 6e 02 c0       	mov    ds:0xc0026ec8,eax
c0012c7d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c80:	a3 c4 6e 02 c0       	mov    ds:0xc0026ec4,eax
c0012c85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c89:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c8b:	a3 c0 6e 02 c0       	mov    ds:0xc0026ec0,eax
c0012c90:	5b                   	pop    ebx
c0012c91:	5e                   	pop    esi
c0012c92:	5f                   	pop    edi
c0012c93:	5d                   	pop    ebp
c0012c94:	c3                   	ret    
c0012c95:	90                   	nop

c0012c96 <CPU::cpuidCheckEDX(unsigned int)>:
c0012c96:	83 ec 10             	sub    esp,0x10
c0012c99:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c9d:	50                   	push   eax
c0012c9e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ca2:	50                   	push   eax
c0012ca3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ca7:	50                   	push   eax
c0012ca8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cac:	50                   	push   eax
c0012cad:	6a 01                	push   0x1
c0012caf:	e8 5e ff ff ff       	call   c0012c12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012cb4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012cb8:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0012cbc:	0f 95 c0             	setne  al
c0012cbf:	83 c4 24             	add    esp,0x24
c0012cc2:	c3                   	ret    
c0012cc3:	90                   	nop

c0012cc4 <CPU::cpuidCheckECX(unsigned int)>:
c0012cc4:	83 ec 10             	sub    esp,0x10
c0012cc7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ccb:	50                   	push   eax
c0012ccc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cd0:	50                   	push   eax
c0012cd1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cd5:	50                   	push   eax
c0012cd6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cda:	50                   	push   eax
c0012cdb:	6a 01                	push   0x1
c0012cdd:	e8 30 ff ff ff       	call   c0012c12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012ce2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012ce6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012cea:	0f 95 c0             	setne  al
c0012ced:	83 c4 24             	add    esp,0x24
c0012cf0:	c3                   	ret    
c0012cf1:	90                   	nop

c0012cf2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0012cf2:	83 ec 10             	sub    esp,0x10
c0012cf5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cf9:	50                   	push   eax
c0012cfa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cfe:	50                   	push   eax
c0012cff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d03:	50                   	push   eax
c0012d04:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d08:	50                   	push   eax
c0012d09:	6a 07                	push   0x7
c0012d0b:	e8 02 ff ff ff       	call   c0012c12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d10:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d14:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0012d18:	0f 95 c0             	setne  al
c0012d1b:	83 c4 24             	add    esp,0x24
c0012d1e:	c3                   	ret    
c0012d1f:	90                   	nop

c0012d20 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0012d20:	83 ec 10             	sub    esp,0x10
c0012d23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d27:	50                   	push   eax
c0012d28:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d2c:	50                   	push   eax
c0012d2d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d31:	50                   	push   eax
c0012d32:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d36:	50                   	push   eax
c0012d37:	6a 07                	push   0x7
c0012d39:	e8 d4 fe ff ff       	call   c0012c12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d42:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012d46:	0f 95 c0             	setne  al
c0012d49:	83 c4 24             	add    esp,0x24
c0012d4c:	c3                   	ret    
c0012d4d:	90                   	nop

c0012d4e <CPU::CPU()>:
c0012d4e:	83 ec 0c             	sub    esp,0xc
c0012d51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d55:	83 ec 08             	sub    esp,0x8
c0012d58:	68 05 40 02 c0       	push   0xc0024005
c0012d5d:	50                   	push   eax
c0012d5e:	e8 5b b3 ff ff       	call   c000e0be <Device::Device(char const*)>
c0012d63:	83 c4 10             	add    esp,0x10
c0012d66:	ba 28 42 02 c0       	mov    edx,0xc0024228
c0012d6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d6f:	89 10                	mov    DWORD PTR [eax],edx
c0012d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d75:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0012d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d83:	05 78 01 00 00       	add    eax,0x178
c0012d88:	83 ec 0c             	sub    esp,0xc
c0012d8b:	50                   	push   eax
c0012d8c:	e8 c9 64 ff ff       	call   c000925a <GDT::GDT()>
c0012d91:	83 c4 10             	add    esp,0x10
c0012d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d98:	05 7c 09 00 00       	add    eax,0x97c
c0012d9d:	83 ec 0c             	sub    esp,0xc
c0012da0:	50                   	push   eax
c0012da1:	e8 0a 67 ff ff       	call   c00094b0 <IDT::IDT()>
c0012da6:	83 c4 10             	add    esp,0x10
c0012da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dad:	05 7c 11 00 00       	add    eax,0x117c
c0012db2:	83 ec 0c             	sub    esp,0xc
c0012db5:	50                   	push   eax
c0012db6:	e8 29 82 ff ff       	call   c000afe4 <TSS::TSS()>
c0012dbb:	83 c4 10             	add    esp,0x10
c0012dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dc2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0012dc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dcd:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0012dd7:	90                   	nop
c0012dd8:	83 c4 0c             	add    esp,0xc
c0012ddb:	c3                   	ret    

c0012ddc <CPU::displayFeatures()>:
c0012ddc:	c3                   	ret    
c0012ddd:	90                   	nop

c0012dde <CPU::detectFeatures()>:
c0012dde:	55                   	push   ebp
c0012ddf:	57                   	push   edi
c0012de0:	56                   	push   esi
c0012de1:	53                   	push   ebx
c0012de2:	83 ec 50             	sub    esp,0x50
c0012de5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0012de9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0012df3:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0012dfa:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0012e00:	6a 0d                	push   0xd
c0012e02:	6a 00                	push   0x0
c0012e04:	55                   	push   ebp
c0012e05:	e8 7a d8 fe ff       	call   c0000684 <memset>
c0012e0a:	83 c4 10             	add    esp,0x10
c0012e0d:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c0012e12:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0012e19:	0f 84 22 09 00 00    	je     c0013741 <CPU::detectFeatures()+0x963>
c0012e1f:	83 ec 0c             	sub    esp,0xc
c0012e22:	89 ef                	mov    edi,ebp
c0012e24:	6a 10                	push   0x10
c0012e26:	e8 6b fe ff ff       	call   c0012c96 <CPU::cpuidCheckEDX(unsigned int)>
c0012e2b:	83 e0 01             	and    eax,0x1
c0012e2e:	8d 14 00             	lea    edx,[eax+eax*1]
c0012e31:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e37:	83 e0 fd             	and    eax,0xfffffffd
c0012e3a:	09 d0                	or     eax,edx
c0012e3c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e42:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0012e49:	e8 48 fe ff ff       	call   c0012c96 <CPU::cpuidCheckEDX(unsigned int)>
c0012e4e:	83 e0 01             	and    eax,0x1
c0012e51:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0012e58:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e5e:	83 e0 fb             	and    eax,0xfffffffb
c0012e61:	09 d0                	or     eax,edx
c0012e63:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e69:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012e70:	e8 21 fe ff ff       	call   c0012c96 <CPU::cpuidCheckEDX(unsigned int)>
c0012e75:	83 e0 01             	and    eax,0x1
c0012e78:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012e7f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e85:	83 e0 f7             	and    eax,0xfffffff7
c0012e88:	09 d0                	or     eax,edx
c0012e8a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e90:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0012e97:	e8 fa fd ff ff       	call   c0012c96 <CPU::cpuidCheckEDX(unsigned int)>
c0012e9c:	83 e0 01             	and    eax,0x1
c0012e9f:	c1 e0 04             	shl    eax,0x4
c0012ea2:	88 c2                	mov    dl,al
c0012ea4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012eaa:	83 e0 ef             	and    eax,0xffffffef
c0012ead:	09 d0                	or     eax,edx
c0012eaf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012eb5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0012ebc:	e8 d5 fd ff ff       	call   c0012c96 <CPU::cpuidCheckEDX(unsigned int)>
c0012ec1:	83 e0 01             	and    eax,0x1
c0012ec4:	c1 e0 05             	shl    eax,0x5
c0012ec7:	88 c2                	mov    dl,al
c0012ec9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012ecf:	83 e0 df             	and    eax,0xffffffdf
c0012ed2:	09 d0                	or     eax,edx
c0012ed4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012eda:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0012ee1:	e8 b0 fd ff ff       	call   c0012c96 <CPU::cpuidCheckEDX(unsigned int)>
c0012ee6:	83 e0 01             	and    eax,0x1
c0012ee9:	8d 14 00             	lea    edx,[eax+eax*1]
c0012eec:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0012ef2:	83 e0 fd             	and    eax,0xfffffffd
c0012ef5:	09 d0                	or     eax,edx
c0012ef7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0012efd:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0012f04:	e8 8d fd ff ff       	call   c0012c96 <CPU::cpuidCheckEDX(unsigned int)>
c0012f09:	83 e0 01             	and    eax,0x1
c0012f0c:	c1 e0 06             	shl    eax,0x6
c0012f0f:	88 c2                	mov    dl,al
c0012f11:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0012f17:	83 e0 bf             	and    eax,0xffffffbf
c0012f1a:	09 d0                	or     eax,edx
c0012f1c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0012f22:	58                   	pop    eax
c0012f23:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f27:	50                   	push   eax
c0012f28:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f2c:	50                   	push   eax
c0012f2d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0012f31:	56                   	push   esi
c0012f32:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f36:	50                   	push   eax
c0012f37:	6a 00                	push   0x0
c0012f39:	e8 d4 fc ff ff       	call   c0012c12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012f3e:	b8 04 00 00 00       	mov    eax,0x4
c0012f43:	89 c1                	mov    ecx,eax
c0012f45:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f47:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0012f4d:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012f51:	89 c1                	mov    ecx,eax
c0012f53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f55:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0012f5b:	8d 74 24 38          	lea    esi,[esp+0x38]
c0012f5f:	89 c1                	mov    ecx,eax
c0012f61:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f63:	83 c4 18             	add    esp,0x18
c0012f66:	68 b0 3e 02 c0       	push   0xc0023eb0
c0012f6b:	55                   	push   ebp
c0012f6c:	e8 5b d8 fe ff       	call   c00007cc <strcmp>
c0012f71:	83 c4 10             	add    esp,0x10
c0012f74:	85 c0                	test   eax,eax
c0012f76:	75 0f                	jne    c0012f87 <CPU::detectFeatures()+0x1a9>
c0012f78:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0012f82:	e9 22 02 00 00       	jmp    c00131a9 <CPU::detectFeatures()+0x3cb>
c0012f87:	50                   	push   eax
c0012f88:	50                   	push   eax
c0012f89:	68 bd 3e 02 c0       	push   0xc0023ebd
c0012f8e:	55                   	push   ebp
c0012f8f:	e8 38 d8 fe ff       	call   c00007cc <strcmp>
c0012f94:	83 c4 10             	add    esp,0x10
c0012f97:	85 c0                	test   eax,eax
c0012f99:	74 dd                	je     c0012f78 <CPU::detectFeatures()+0x19a>
c0012f9b:	50                   	push   eax
c0012f9c:	50                   	push   eax
c0012f9d:	68 ca 3e 02 c0       	push   0xc0023eca
c0012fa2:	55                   	push   ebp
c0012fa3:	e8 24 d8 fe ff       	call   c00007cc <strcmp>
c0012fa8:	83 c4 10             	add    esp,0x10
c0012fab:	85 c0                	test   eax,eax
c0012fad:	74 2a                	je     c0012fd9 <CPU::detectFeatures()+0x1fb>
c0012faf:	50                   	push   eax
c0012fb0:	50                   	push   eax
c0012fb1:	68 d7 3e 02 c0       	push   0xc0023ed7
c0012fb6:	55                   	push   ebp
c0012fb7:	e8 10 d8 fe ff       	call   c00007cc <strcmp>
c0012fbc:	83 c4 10             	add    esp,0x10
c0012fbf:	85 c0                	test   eax,eax
c0012fc1:	74 16                	je     c0012fd9 <CPU::detectFeatures()+0x1fb>
c0012fc3:	50                   	push   eax
c0012fc4:	50                   	push   eax
c0012fc5:	68 e4 3e 02 c0       	push   0xc0023ee4
c0012fca:	55                   	push   ebp
c0012fcb:	e8 fc d7 fe ff       	call   c00007cc <strcmp>
c0012fd0:	83 c4 10             	add    esp,0x10
c0012fd3:	85 c0                	test   eax,eax
c0012fd5:	74 48                	je     c001301f <CPU::detectFeatures()+0x241>
c0012fd7:	eb 0f                	jmp    c0012fe8 <CPU::detectFeatures()+0x20a>
c0012fd9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0012fe3:	e9 c1 01 00 00       	jmp    c00131a9 <CPU::detectFeatures()+0x3cb>
c0012fe8:	50                   	push   eax
c0012fe9:	50                   	push   eax
c0012fea:	68 f1 3e 02 c0       	push   0xc0023ef1
c0012fef:	55                   	push   ebp
c0012ff0:	e8 d7 d7 fe ff       	call   c00007cc <strcmp>
c0012ff5:	83 c4 10             	add    esp,0x10
c0012ff8:	85 c0                	test   eax,eax
c0012ffa:	74 23                	je     c001301f <CPU::detectFeatures()+0x241>
c0012ffc:	57                   	push   edi
c0012ffd:	57                   	push   edi
c0012ffe:	68 fe 3e 02 c0       	push   0xc0023efe
c0013003:	55                   	push   ebp
c0013004:	e8 c3 d7 fe ff       	call   c00007cc <strcmp>
c0013009:	83 c4 10             	add    esp,0x10
c001300c:	85 c0                	test   eax,eax
c001300e:	75 1e                	jne    c001302e <CPU::detectFeatures()+0x250>
c0013010:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001301a:	e9 8a 01 00 00       	jmp    c00131a9 <CPU::detectFeatures()+0x3cb>
c001301f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013029:	e9 7b 01 00 00       	jmp    c00131a9 <CPU::detectFeatures()+0x3cb>
c001302e:	56                   	push   esi
c001302f:	56                   	push   esi
c0013030:	68 0b 3f 02 c0       	push   0xc0023f0b
c0013035:	55                   	push   ebp
c0013036:	e8 91 d7 fe ff       	call   c00007cc <strcmp>
c001303b:	83 c4 10             	add    esp,0x10
c001303e:	85 c0                	test   eax,eax
c0013040:	75 0f                	jne    c0013051 <CPU::detectFeatures()+0x273>
c0013042:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001304c:	e9 58 01 00 00       	jmp    c00131a9 <CPU::detectFeatures()+0x3cb>
c0013051:	51                   	push   ecx
c0013052:	51                   	push   ecx
c0013053:	68 ca 3e 02 c0       	push   0xc0023eca
c0013058:	55                   	push   ebp
c0013059:	e8 6e d7 fe ff       	call   c00007cc <strcmp>
c001305e:	83 c4 10             	add    esp,0x10
c0013061:	85 c0                	test   eax,eax
c0013063:	75 0f                	jne    c0013074 <CPU::detectFeatures()+0x296>
c0013065:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001306f:	e9 35 01 00 00       	jmp    c00131a9 <CPU::detectFeatures()+0x3cb>
c0013074:	52                   	push   edx
c0013075:	52                   	push   edx
c0013076:	68 18 3f 02 c0       	push   0xc0023f18
c001307b:	55                   	push   ebp
c001307c:	e8 4b d7 fe ff       	call   c00007cc <strcmp>
c0013081:	83 c4 10             	add    esp,0x10
c0013084:	85 c0                	test   eax,eax
c0013086:	75 0f                	jne    c0013097 <CPU::detectFeatures()+0x2b9>
c0013088:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013092:	e9 12 01 00 00       	jmp    c00131a9 <CPU::detectFeatures()+0x3cb>
c0013097:	50                   	push   eax
c0013098:	50                   	push   eax
c0013099:	68 25 3f 02 c0       	push   0xc0023f25
c001309e:	55                   	push   ebp
c001309f:	e8 28 d7 fe ff       	call   c00007cc <strcmp>
c00130a4:	83 c4 10             	add    esp,0x10
c00130a7:	85 c0                	test   eax,eax
c00130a9:	75 0f                	jne    c00130ba <CPU::detectFeatures()+0x2dc>
c00130ab:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00130b5:	e9 ef 00 00 00       	jmp    c00131a9 <CPU::detectFeatures()+0x3cb>
c00130ba:	50                   	push   eax
c00130bb:	50                   	push   eax
c00130bc:	68 32 3f 02 c0       	push   0xc0023f32
c00130c1:	55                   	push   ebp
c00130c2:	e8 05 d7 fe ff       	call   c00007cc <strcmp>
c00130c7:	83 c4 10             	add    esp,0x10
c00130ca:	85 c0                	test   eax,eax
c00130cc:	75 0f                	jne    c00130dd <CPU::detectFeatures()+0x2ff>
c00130ce:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00130d8:	e9 cc 00 00 00       	jmp    c00131a9 <CPU::detectFeatures()+0x3cb>
c00130dd:	50                   	push   eax
c00130de:	50                   	push   eax
c00130df:	68 3f 3f 02 c0       	push   0xc0023f3f
c00130e4:	55                   	push   ebp
c00130e5:	e8 e2 d6 fe ff       	call   c00007cc <strcmp>
c00130ea:	83 c4 10             	add    esp,0x10
c00130ed:	85 c0                	test   eax,eax
c00130ef:	75 0f                	jne    c0013100 <CPU::detectFeatures()+0x322>
c00130f1:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00130fb:	e9 a9 00 00 00       	jmp    c00131a9 <CPU::detectFeatures()+0x3cb>
c0013100:	50                   	push   eax
c0013101:	50                   	push   eax
c0013102:	68 4c 3f 02 c0       	push   0xc0023f4c
c0013107:	55                   	push   ebp
c0013108:	e8 bf d6 fe ff       	call   c00007cc <strcmp>
c001310d:	83 c4 10             	add    esp,0x10
c0013110:	85 c0                	test   eax,eax
c0013112:	75 0f                	jne    c0013123 <CPU::detectFeatures()+0x345>
c0013114:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001311e:	e9 86 00 00 00       	jmp    c00131a9 <CPU::detectFeatures()+0x3cb>
c0013123:	50                   	push   eax
c0013124:	50                   	push   eax
c0013125:	68 59 3f 02 c0       	push   0xc0023f59
c001312a:	55                   	push   ebp
c001312b:	e8 9c d6 fe ff       	call   c00007cc <strcmp>
c0013130:	83 c4 10             	add    esp,0x10
c0013133:	85 c0                	test   eax,eax
c0013135:	75 0c                	jne    c0013143 <CPU::detectFeatures()+0x365>
c0013137:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013141:	eb 66                	jmp    c00131a9 <CPU::detectFeatures()+0x3cb>
c0013143:	50                   	push   eax
c0013144:	50                   	push   eax
c0013145:	68 66 3f 02 c0       	push   0xc0023f66
c001314a:	55                   	push   ebp
c001314b:	e8 7c d6 fe ff       	call   c00007cc <strcmp>
c0013150:	83 c4 10             	add    esp,0x10
c0013153:	85 c0                	test   eax,eax
c0013155:	75 0c                	jne    c0013163 <CPU::detectFeatures()+0x385>
c0013157:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013161:	eb 46                	jmp    c00131a9 <CPU::detectFeatures()+0x3cb>
c0013163:	57                   	push   edi
c0013164:	57                   	push   edi
c0013165:	68 73 3f 02 c0       	push   0xc0023f73
c001316a:	55                   	push   ebp
c001316b:	e8 5c d6 fe ff       	call   c00007cc <strcmp>
c0013170:	83 c4 10             	add    esp,0x10
c0013173:	85 c0                	test   eax,eax
c0013175:	74 e0                	je     c0013157 <CPU::detectFeatures()+0x379>
c0013177:	56                   	push   esi
c0013178:	56                   	push   esi
c0013179:	68 80 3f 02 c0       	push   0xc0023f80
c001317e:	55                   	push   ebp
c001317f:	e8 48 d6 fe ff       	call   c00007cc <strcmp>
c0013184:	83 c4 10             	add    esp,0x10
c0013187:	85 c0                	test   eax,eax
c0013189:	74 cc                	je     c0013157 <CPU::detectFeatures()+0x379>
c001318b:	51                   	push   ecx
c001318c:	51                   	push   ecx
c001318d:	68 8d 3f 02 c0       	push   0xc0023f8d
c0013192:	55                   	push   ebp
c0013193:	e8 34 d6 fe ff       	call   c00007cc <strcmp>
c0013198:	83 c4 10             	add    esp,0x10
c001319b:	85 c0                	test   eax,eax
c001319d:	74 b8                	je     c0013157 <CPU::detectFeatures()+0x379>
c001319f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00131a9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00131ae:	0f 86 be 00 00 00    	jbe    c0013272 <CPU::detectFeatures()+0x494>
c00131b4:	83 ec 0c             	sub    esp,0xc
c00131b7:	68 80 00 00 00       	push   0x80
c00131bc:	e8 31 fb ff ff       	call   c0012cf2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00131c1:	83 e0 01             	and    eax,0x1
c00131c4:	c1 e0 06             	shl    eax,0x6
c00131c7:	88 c2                	mov    dl,al
c00131c9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00131cf:	83 e0 bf             	and    eax,0xffffffbf
c00131d2:	09 d0                	or     eax,edx
c00131d4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00131da:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00131e1:	e8 0c fb ff ff       	call   c0012cf2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00131e6:	83 e0 01             	and    eax,0x1
c00131e9:	c1 e0 04             	shl    eax,0x4
c00131ec:	88 c2                	mov    dl,al
c00131ee:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00131f4:	83 e0 ef             	and    eax,0xffffffef
c00131f7:	09 d0                	or     eax,edx
c00131f9:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00131ff:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013206:	e8 e7 fa ff ff       	call   c0012cf2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001320b:	c1 e0 07             	shl    eax,0x7
c001320e:	88 c2                	mov    dl,al
c0013210:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013216:	83 e0 7f             	and    eax,0x7f
c0013219:	09 d0                	or     eax,edx
c001321b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013221:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013228:	e8 f3 fa ff ff       	call   c0012d20 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001322d:	83 e0 01             	and    eax,0x1
c0013230:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013237:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001323d:	83 e0 f7             	and    eax,0xfffffff7
c0013240:	09 d0                	or     eax,edx
c0013242:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013248:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001324f:	e8 cc fa ff ff       	call   c0012d20 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013254:	83 c4 10             	add    esp,0x10
c0013257:	83 e0 01             	and    eax,0x1
c001325a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013261:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013267:	83 e0 fb             	and    eax,0xfffffffb
c001326a:	09 d0                	or     eax,edx
c001326c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013272:	83 ec 0c             	sub    esp,0xc
c0013275:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013279:	50                   	push   eax
c001327a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001327e:	50                   	push   eax
c001327f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013283:	56                   	push   esi
c0013284:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013288:	50                   	push   eax
c0013289:	6a 01                	push   0x1
c001328b:	e8 82 f9 ff ff       	call   c0012c12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013290:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013294:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001329a:	88 ca                	mov    dl,cl
c001329c:	83 e0 f0             	and    eax,0xfffffff0
c001329f:	83 e2 0f             	and    edx,0xf
c00132a2:	09 d0                	or     eax,edx
c00132a4:	88 ca                	mov    dl,cl
c00132a6:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00132ac:	c0 ea 04             	shr    dl,0x4
c00132af:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00132b3:	0f b6 c2             	movzx  eax,dl
c00132b6:	83 c4 20             	add    esp,0x20
c00132b9:	c1 e0 06             	shl    eax,0x6
c00132bc:	89 c7                	mov    edi,eax
c00132be:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00132c4:	66 25 3f c0          	and    ax,0xc03f
c00132c8:	09 f8                	or     eax,edi
c00132ca:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00132d1:	89 c8                	mov    eax,ecx
c00132d3:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00132da:	c1 e8 08             	shr    eax,0x8
c00132dd:	83 e5 3f             	and    ebp,0x3f
c00132e0:	83 e0 0f             	and    eax,0xf
c00132e3:	89 c7                	mov    edi,eax
c00132e5:	c1 e7 06             	shl    edi,0x6
c00132e8:	09 ef                	or     edi,ebp
c00132ea:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00132f1:	89 fa                	mov    edx,edi
c00132f3:	83 e5 c0             	and    ebp,0xffffffc0
c00132f6:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00132fc:	88 c2                	mov    dl,al
c00132fe:	c0 ea 02             	shr    dl,0x2
c0013301:	89 d7                	mov    edi,edx
c0013303:	09 ef                	or     edi,ebp
c0013305:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001330b:	89 fa                	mov    edx,edi
c001330d:	83 e5 cf             	and    ebp,0xffffffcf
c0013310:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013316:	89 cf                	mov    edi,ecx
c0013318:	c1 ef 0c             	shr    edi,0xc
c001331b:	83 e7 03             	and    edi,0x3
c001331e:	c1 e7 04             	shl    edi,0x4
c0013321:	09 ef                	or     edi,ebp
c0013323:	3c 06                	cmp    al,0x6
c0013325:	89 fa                	mov    edx,edi
c0013327:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001332d:	74 04                	je     c0013333 <CPU::detectFeatures()+0x555>
c001332f:	3c 0f                	cmp    al,0xf
c0013331:	75 5c                	jne    c001338f <CPU::detectFeatures()+0x5b1>
c0013333:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013337:	89 cf                	mov    edi,ecx
c0013339:	c1 ef 10             	shr    edi,0x10
c001333c:	c1 e7 04             	shl    edi,0x4
c001333f:	09 fa                	or     edx,edi
c0013341:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0013347:	0f b6 d2             	movzx  edx,dl
c001334a:	66 81 e7 3f c0       	and    di,0xc03f
c001334f:	c1 e2 06             	shl    edx,0x6
c0013352:	09 fa                	or     edx,edi
c0013354:	3c 0f                	cmp    al,0xf
c0013356:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001335d:	75 30                	jne    c001338f <CPU::detectFeatures()+0x5b1>
c001335f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013365:	c1 e9 14             	shr    ecx,0x14
c0013368:	83 e0 3f             	and    eax,0x3f
c001336b:	83 c1 0f             	add    ecx,0xf
c001336e:	88 ca                	mov    dl,cl
c0013370:	c0 e9 02             	shr    cl,0x2
c0013373:	c1 e2 06             	shl    edx,0x6
c0013376:	09 d0                	or     eax,edx
c0013378:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001337e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0013384:	83 e0 c0             	and    eax,0xffffffc0
c0013387:	09 c1                	or     ecx,eax
c0013389:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001338f:	83 ec 0c             	sub    esp,0xc
c0013392:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013399:	8d 44 24 28          	lea    eax,[esp+0x28]
c001339d:	50                   	push   eax
c001339e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00133a2:	55                   	push   ebp
c00133a3:	56                   	push   esi
c00133a4:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00133a8:	57                   	push   edi
c00133a9:	68 00 00 00 80       	push   0x80000000
c00133ae:	e8 5f f8 ff ff       	call   c0012c12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133b3:	83 c4 20             	add    esp,0x20
c00133b6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00133be:	76 22                	jbe    c00133e2 <CPU::detectFeatures()+0x604>
c00133c0:	83 ec 0c             	sub    esp,0xc
c00133c3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00133c7:	50                   	push   eax
c00133c8:	55                   	push   ebp
c00133c9:	56                   	push   esi
c00133ca:	57                   	push   edi
c00133cb:	68 01 00 00 80       	push   0x80000001
c00133d0:	e8 3d f8 ff ff       	call   c0012c12 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133d5:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00133df:	83 c4 20             	add    esp,0x20
c00133e2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00133e8:	83 f8 01             	cmp    eax,0x1
c00133eb:	75 6f                	jne    c001345c <CPU::detectFeatures()+0x67e>
c00133ed:	51                   	push   ecx
c00133ee:	51                   	push   ecx
c00133ef:	68 99 3f 02 c0       	push   0xc0023f99
c00133f4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00133f8:	56                   	push   esi
c00133f9:	e8 42 d3 fe ff       	call   c0000740 <strcpy>
c00133fe:	5f                   	pop    edi
c00133ff:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013405:	5d                   	pop    ebp
c0013406:	66 c1 e8 06          	shr    ax,0x6
c001340a:	0f b6 c0             	movzx  eax,al
c001340d:	50                   	push   eax
c001340e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013414:	c1 e8 0e             	shr    eax,0xe
c0013417:	0f b6 c0             	movzx  eax,al
c001341a:	50                   	push   eax
c001341b:	e8 9c f4 ff ff       	call   c00128bc <CPU::lookupIntelName(unsigned char, unsigned char)>
c0013420:	5a                   	pop    edx
c0013421:	59                   	pop    ecx
c0013422:	50                   	push   eax
c0013423:	56                   	push   esi
c0013424:	e8 57 d4 fe ff       	call   c0000880 <strcat>
c0013429:	5f                   	pop    edi
c001342a:	5d                   	pop    ebp
c001342b:	56                   	push   esi
c001342c:	53                   	push   ebx
c001342d:	e8 7e ac ff ff       	call   c000e0b0 <Device::setName(char const*)>
c0013432:	58                   	pop    eax
c0013433:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013439:	5a                   	pop    edx
c001343a:	68 a0 3f 02 c0       	push   0xc0023fa0
c001343f:	50                   	push   eax
c0013440:	e8 87 d3 fe ff       	call   c00007cc <strcmp>
c0013445:	83 c4 10             	add    esp,0x10
c0013448:	85 c0                	test   eax,eax
c001344a:	0f 85 71 03 00 00    	jne    c00137c1 <CPU::detectFeatures()+0x9e3>
c0013450:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0013457:	e9 65 03 00 00       	jmp    c00137c1 <CPU::detectFeatures()+0x9e3>
c001345c:	83 f8 02             	cmp    eax,0x2
c001345f:	0f 85 b5 00 00 00    	jne    c001351a <CPU::detectFeatures()+0x73c>
c0013465:	57                   	push   edi
c0013466:	57                   	push   edi
c0013467:	68 b2 3f 02 c0       	push   0xc0023fb2
c001346c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013470:	56                   	push   esi
c0013471:	e8 ca d2 fe ff       	call   c0000740 <strcpy>
c0013476:	5d                   	pop    ebp
c0013477:	58                   	pop    eax
c0013478:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001347e:	66 c1 e8 06          	shr    ax,0x6
c0013482:	0f b6 c0             	movzx  eax,al
c0013485:	50                   	push   eax
c0013486:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001348c:	c1 e8 0e             	shr    eax,0xe
c001348f:	0f b6 c0             	movzx  eax,al
c0013492:	50                   	push   eax
c0013493:	e8 90 f2 ff ff       	call   c0012728 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0013498:	5a                   	pop    edx
c0013499:	59                   	pop    ecx
c001349a:	50                   	push   eax
c001349b:	56                   	push   esi
c001349c:	e8 df d3 fe ff       	call   c0000880 <strcat>
c00134a1:	5f                   	pop    edi
c00134a2:	5d                   	pop    ebp
c00134a3:	56                   	push   esi
c00134a4:	53                   	push   ebx
c00134a5:	e8 06 ac ff ff       	call   c000e0b0 <Device::setName(char const*)>
c00134aa:	58                   	pop    eax
c00134ab:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00134b1:	5a                   	pop    edx
c00134b2:	68 b7 3f 02 c0       	push   0xc0023fb7
c00134b7:	50                   	push   eax
c00134b8:	e8 0f d3 fe ff       	call   c00007cc <strcmp>
c00134bd:	83 c4 10             	add    esp,0x10
c00134c0:	85 c0                	test   eax,eax
c00134c2:	75 20                	jne    c00134e4 <CPU::detectFeatures()+0x706>
c00134c4:	8b 15 08 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026408
c00134ca:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00134d0:	a8 01                	test   al,0x1
c00134d2:	74 10                	je     c00134e4 <CPU::detectFeatures()+0x706>
c00134d4:	83 e0 fe             	and    eax,0xfffffffe
c00134d7:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00134dd:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00134e4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134ea:	c1 e8 0e             	shr    eax,0xe
c00134ed:	3c 05                	cmp    al,0x5
c00134ef:	0f 85 cc 02 00 00    	jne    c00137c1 <CPU::detectFeatures()+0x9e3>
c00134f5:	56                   	push   esi
c00134f6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00134fc:	83 e0 0f             	and    eax,0xf
c00134ff:	50                   	push   eax
c0013500:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013506:	66 c1 e8 06          	shr    ax,0x6
c001350a:	0f b6 c0             	movzx  eax,al
c001350d:	50                   	push   eax
c001350e:	6a 05                	push   0x5
c0013510:	e8 89 f6 ff ff       	call   c0012b9e <CPU::AMD_K6_writeback(int, int, int)>
c0013515:	e9 1f 02 00 00       	jmp    c0013739 <CPU::detectFeatures()+0x95b>
c001351a:	8d 50 fd             	lea    edx,[eax-0x3]
c001351d:	83 fa 01             	cmp    edx,0x1
c0013520:	76 09                	jbe    c001352b <CPU::detectFeatures()+0x74d>
c0013522:	83 f8 06             	cmp    eax,0x6
c0013525:	0f 85 91 01 00 00    	jne    c00136bc <CPU::detectFeatures()+0x8de>
c001352b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013531:	c1 ea 0e             	shr    edx,0xe
c0013534:	80 fa 05             	cmp    dl,0x5
c0013537:	75 7b                	jne    c00135b4 <CPU::detectFeatures()+0x7d6>
c0013539:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001353f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013544:	66 81 fa 00 01       	cmp    dx,0x100
c0013549:	75 0c                	jne    c0013557 <CPU::detectFeatures()+0x779>
c001354b:	51                   	push   ecx
c001354c:	51                   	push   ecx
c001354d:	68 be 3f 02 c0       	push   0xc0023fbe
c0013552:	e9 dc 01 00 00       	jmp    c0013733 <CPU::detectFeatures()+0x955>
c0013557:	66 81 fa 00 02       	cmp    dx,0x200
c001355c:	75 0c                	jne    c001356a <CPU::detectFeatures()+0x78c>
c001355e:	52                   	push   edx
c001355f:	52                   	push   edx
c0013560:	68 d1 3f 02 c0       	push   0xc0023fd1
c0013565:	e9 c9 01 00 00       	jmp    c0013733 <CPU::detectFeatures()+0x955>
c001356a:	66 81 fa 40 02       	cmp    dx,0x240
c001356f:	75 0c                	jne    c001357d <CPU::detectFeatures()+0x79f>
c0013571:	50                   	push   eax
c0013572:	50                   	push   eax
c0013573:	68 e3 3f 02 c0       	push   0xc0023fe3
c0013578:	e9 b6 01 00 00       	jmp    c0013733 <CPU::detectFeatures()+0x955>
c001357d:	83 f8 06             	cmp    eax,0x6
c0013580:	75 0c                	jne    c001358e <CPU::detectFeatures()+0x7b0>
c0013582:	50                   	push   eax
c0013583:	50                   	push   eax
c0013584:	68 f5 3f 02 c0       	push   0xc0023ff5
c0013589:	e9 a5 01 00 00       	jmp    c0013733 <CPU::detectFeatures()+0x955>
c001358e:	83 f8 04             	cmp    eax,0x4
c0013591:	75 0c                	jne    c001359f <CPU::detectFeatures()+0x7c1>
c0013593:	50                   	push   eax
c0013594:	50                   	push   eax
c0013595:	68 01 40 02 c0       	push   0xc0024001
c001359a:	e9 94 01 00 00       	jmp    c0013733 <CPU::detectFeatures()+0x955>
c001359f:	83 f8 03             	cmp    eax,0x3
c00135a2:	0f 85 19 02 00 00    	jne    c00137c1 <CPU::detectFeatures()+0x9e3>
c00135a8:	50                   	push   eax
c00135a9:	50                   	push   eax
c00135aa:	68 09 40 02 c0       	push   0xc0024009
c00135af:	e9 7f 01 00 00       	jmp    c0013733 <CPU::detectFeatures()+0x955>
c00135b4:	80 fa 06             	cmp    dl,0x6
c00135b7:	0f 85 db 00 00 00    	jne    c0013698 <CPU::detectFeatures()+0x8ba>
c00135bd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00135c3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00135c8:	66 81 fa 80 01       	cmp    dx,0x180
c00135cd:	75 0c                	jne    c00135db <CPU::detectFeatures()+0x7fd>
c00135cf:	50                   	push   eax
c00135d0:	50                   	push   eax
c00135d1:	68 14 40 02 c0       	push   0xc0024014
c00135d6:	e9 58 01 00 00       	jmp    c0013733 <CPU::detectFeatures()+0x955>
c00135db:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00135e1:	66 f7 c1 80 ff       	test   cx,0xff80
c00135e6:	75 0c                	jne    c00135f4 <CPU::detectFeatures()+0x816>
c00135e8:	50                   	push   eax
c00135e9:	50                   	push   eax
c00135ea:	68 24 40 02 c0       	push   0xc0024024
c00135ef:	e9 3f 01 00 00       	jmp    c0013733 <CPU::detectFeatures()+0x955>
c00135f4:	66 81 fa 40 02       	cmp    dx,0x240
c00135f9:	75 0c                	jne    c0013607 <CPU::detectFeatures()+0x829>
c00135fb:	55                   	push   ebp
c00135fc:	55                   	push   ebp
c00135fd:	68 2b 40 02 c0       	push   0xc002402b
c0013602:	e9 2c 01 00 00       	jmp    c0013733 <CPU::detectFeatures()+0x955>
c0013607:	66 81 fa 80 02       	cmp    dx,0x280
c001360c:	75 0c                	jne    c001361a <CPU::detectFeatures()+0x83c>
c001360e:	57                   	push   edi
c001360f:	57                   	push   edi
c0013610:	68 34 40 02 c0       	push   0xc0024034
c0013615:	e9 19 01 00 00       	jmp    c0013733 <CPU::detectFeatures()+0x955>
c001361a:	66 81 fa 40 03       	cmp    dx,0x340
c001361f:	74 ed                	je     c001360e <CPU::detectFeatures()+0x830>
c0013621:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013626:	75 0c                	jne    c0013634 <CPU::detectFeatures()+0x856>
c0013628:	56                   	push   esi
c0013629:	56                   	push   esi
c001362a:	68 3b 40 02 c0       	push   0xc002403b
c001362f:	e9 ff 00 00 00       	jmp    c0013733 <CPU::detectFeatures()+0x955>
c0013634:	83 f8 06             	cmp    eax,0x6
c0013637:	0f 84 45 ff ff ff    	je     c0013582 <CPU::detectFeatures()+0x7a4>
c001363d:	83 f8 04             	cmp    eax,0x4
c0013640:	0f 84 4d ff ff ff    	je     c0013593 <CPU::detectFeatures()+0x7b5>
c0013646:	83 f8 03             	cmp    eax,0x3
c0013649:	0f 85 72 01 00 00    	jne    c00137c1 <CPU::detectFeatures()+0x9e3>
c001364f:	51                   	push   ecx
c0013650:	51                   	push   ecx
c0013651:	68 44 40 02 c0       	push   0xc0024044
c0013656:	53                   	push   ebx
c0013657:	e8 54 aa ff ff       	call   c000e0b0 <Device::setName(char const*)>
c001365c:	b1 c1                	mov    cl,0xc1
c001365e:	88 c8                	mov    al,cl
c0013660:	e6 22                	out    0x22,al
c0013662:	e4 23                	in     al,0x23
c0013664:	88 c2                	mov    dl,al
c0013666:	88 c8                	mov    al,cl
c0013668:	e6 22                	out    0x22,al
c001366a:	88 d0                	mov    al,dl
c001366c:	83 c8 10             	or     eax,0x10
c001366f:	e6 23                	out    0x23,al
c0013671:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013678:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001367b:	89 d0                	mov    eax,edx
c001367d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013683:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0013687:	40                   	inc    eax
c0013688:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001368e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0013693:	e9 a1 00 00 00       	jmp    c0013739 <CPU::detectFeatures()+0x95b>
c0013698:	83 f8 06             	cmp    eax,0x6
c001369b:	0f 84 e1 fe ff ff    	je     c0013582 <CPU::detectFeatures()+0x7a4>
c00136a1:	83 f8 04             	cmp    eax,0x4
c00136a4:	0f 84 e9 fe ff ff    	je     c0013593 <CPU::detectFeatures()+0x7b5>
c00136aa:	83 f8 03             	cmp    eax,0x3
c00136ad:	0f 85 0e 01 00 00    	jne    c00137c1 <CPU::detectFeatures()+0x9e3>
c00136b3:	52                   	push   edx
c00136b4:	52                   	push   edx
c00136b5:	68 4f 40 02 c0       	push   0xc002404f
c00136ba:	eb 77                	jmp    c0013733 <CPU::detectFeatures()+0x955>
c00136bc:	83 f8 07             	cmp    eax,0x7
c00136bf:	75 09                	jne    c00136ca <CPU::detectFeatures()+0x8ec>
c00136c1:	50                   	push   eax
c00136c2:	50                   	push   eax
c00136c3:	68 59 40 02 c0       	push   0xc0024059
c00136c8:	eb 69                	jmp    c0013733 <CPU::detectFeatures()+0x955>
c00136ca:	83 f8 0a             	cmp    eax,0xa
c00136cd:	75 09                	jne    c00136d8 <CPU::detectFeatures()+0x8fa>
c00136cf:	50                   	push   eax
c00136d0:	50                   	push   eax
c00136d1:	68 64 40 02 c0       	push   0xc0024064
c00136d6:	eb 5b                	jmp    c0013733 <CPU::detectFeatures()+0x955>
c00136d8:	83 f8 0b             	cmp    eax,0xb
c00136db:	75 09                	jne    c00136e6 <CPU::detectFeatures()+0x908>
c00136dd:	50                   	push   eax
c00136de:	50                   	push   eax
c00136df:	68 6c 40 02 c0       	push   0xc002406c
c00136e4:	eb 4d                	jmp    c0013733 <CPU::detectFeatures()+0x955>
c00136e6:	83 f8 08             	cmp    eax,0x8
c00136e9:	75 09                	jne    c00136f4 <CPU::detectFeatures()+0x916>
c00136eb:	50                   	push   eax
c00136ec:	50                   	push   eax
c00136ed:	68 75 40 02 c0       	push   0xc0024075
c00136f2:	eb 3f                	jmp    c0013733 <CPU::detectFeatures()+0x955>
c00136f4:	83 f8 09             	cmp    eax,0x9
c00136f7:	75 09                	jne    c0013702 <CPU::detectFeatures()+0x924>
c00136f9:	50                   	push   eax
c00136fa:	50                   	push   eax
c00136fb:	68 7d 40 02 c0       	push   0xc002407d
c0013700:	eb 31                	jmp    c0013733 <CPU::detectFeatures()+0x955>
c0013702:	83 f8 05             	cmp    eax,0x5
c0013705:	75 09                	jne    c0013710 <CPU::detectFeatures()+0x932>
c0013707:	50                   	push   eax
c0013708:	50                   	push   eax
c0013709:	68 85 40 02 c0       	push   0xc0024085
c001370e:	eb 23                	jmp    c0013733 <CPU::detectFeatures()+0x955>
c0013710:	83 f8 0c             	cmp    eax,0xc
c0013713:	75 09                	jne    c001371e <CPU::detectFeatures()+0x940>
c0013715:	55                   	push   ebp
c0013716:	55                   	push   ebp
c0013717:	68 93 40 02 c0       	push   0xc0024093
c001371c:	eb 15                	jmp    c0013733 <CPU::detectFeatures()+0x955>
c001371e:	83 f8 0d             	cmp    eax,0xd
c0013721:	75 09                	jne    c001372c <CPU::detectFeatures()+0x94e>
c0013723:	57                   	push   edi
c0013724:	57                   	push   edi
c0013725:	68 9e 40 02 c0       	push   0xc002409e
c001372a:	eb 07                	jmp    c0013733 <CPU::detectFeatures()+0x955>
c001372c:	56                   	push   esi
c001372d:	56                   	push   esi
c001372e:	68 b2 40 02 c0       	push   0xc00240b2
c0013733:	53                   	push   ebx
c0013734:	e8 77 a9 ff ff       	call   c000e0b0 <Device::setName(char const*)>
c0013739:	83 c4 10             	add    esp,0x10
c001373c:	e9 80 00 00 00       	jmp    c00137c1 <CPU::detectFeatures()+0x9e3>
c0013741:	51                   	push   ecx
c0013742:	51                   	push   ecx
c0013743:	68 fe 3e 02 c0       	push   0xc0023efe
c0013748:	55                   	push   ebp
c0013749:	e8 f2 cf fe ff       	call   c0000740 <strcpy>
c001374e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013758:	e8 86 ca fe ff       	call   c00001e3 <is486>
c001375d:	83 c4 10             	add    esp,0x10
c0013760:	85 c0                	test   eax,eax
c0013762:	74 2b                	je     c001378f <CPU::detectFeatures()+0x9b1>
c0013764:	52                   	push   edx
c0013765:	52                   	push   edx
c0013766:	68 be 40 02 c0       	push   0xc00240be
c001376b:	53                   	push   ebx
c001376c:	e8 3f a9 ff ff       	call   c000e0b0 <Device::setName(char const*)>
c0013771:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013778:	0f 20 c0             	mov    eax,cr0
c001377b:	83 e0 14             	and    eax,0x14
c001377e:	83 c4 10             	add    esp,0x10
c0013781:	83 f8 04             	cmp    eax,0x4
c0013784:	75 1f                	jne    c00137a5 <CPU::detectFeatures()+0x9c7>
c0013786:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001378d:	eb 32                	jmp    c00137c1 <CPU::detectFeatures()+0x9e3>
c001378f:	50                   	push   eax
c0013790:	50                   	push   eax
c0013791:	68 c9 40 02 c0       	push   0xc00240c9
c0013796:	53                   	push   ebx
c0013797:	e8 14 a9 ff ff       	call   c000e0b0 <Device::setName(char const*)>
c001379c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00137a3:	eb d3                	jmp    c0013778 <CPU::detectFeatures()+0x99a>
c00137a5:	e8 14 ca fe ff       	call   c00001be <hasLegacyFPU>
c00137aa:	83 e0 01             	and    eax,0x1
c00137ad:	8d 14 00             	lea    edx,[eax+eax*1]
c00137b0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00137b6:	83 e0 fd             	and    eax,0xfffffffd
c00137b9:	09 d0                	or     eax,edx
c00137bb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00137c1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00137c8:	83 c4 4c             	add    esp,0x4c
c00137cb:	5b                   	pop    ebx
c00137cc:	5e                   	pop    esi
c00137cd:	5f                   	pop    edi
c00137ce:	5d                   	pop    ebp
c00137cf:	c3                   	ret    

c00137d0 <CPU::setupSMEP()>:
c00137d0:	0f 20 e0             	mov    eax,cr4
c00137d3:	0d 00 00 10 00       	or     eax,0x100000
c00137d8:	0f 22 e0             	mov    cr4,eax
c00137db:	c3                   	ret    

c00137dc <CPU::setupUMIP()>:
c00137dc:	0f 20 e0             	mov    eax,cr4
c00137df:	80 cc 08             	or     ah,0x8
c00137e2:	0f 22 e0             	mov    cr4,eax
c00137e5:	c3                   	ret    

c00137e6 <CPU::setupTSC()>:
c00137e6:	0f 20 e0             	mov    eax,cr4
c00137e9:	83 c8 04             	or     eax,0x4
c00137ec:	0f 22 e0             	mov    cr4,eax
c00137ef:	c3                   	ret    

c00137f0 <CPU::setupLargePages()>:
c00137f0:	0f 20 e0             	mov    eax,cr4
c00137f3:	83 c8 10             	or     eax,0x10
c00137f6:	0f 22 e0             	mov    cr4,eax
c00137f9:	c3                   	ret    

c00137fa <CPU::setupPAT()>:
c00137fa:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c00137ff:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013806:	74 2c                	je     c0013834 <CPU::setupPAT()+0x3a>
c0013808:	53                   	push   ebx
c0013809:	83 ec 10             	sub    esp,0x10
c001380c:	68 77 02 00 00       	push   0x277
c0013811:	50                   	push   eax
c0013812:	e8 0d 57 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013817:	83 e2 f8             	and    edx,0xfffffff8
c001381a:	83 ca 01             	or     edx,0x1
c001381d:	52                   	push   edx
c001381e:	50                   	push   eax
c001381f:	68 77 02 00 00       	push   0x277
c0013824:	ff 35 08 64 02 c0    	push   DWORD PTR ds:0xc0026408
c001382a:	e8 21 57 ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c001382f:	83 c4 28             	add    esp,0x28
c0013832:	5b                   	pop    ebx
c0013833:	c3                   	ret    
c0013834:	c3                   	ret    
c0013835:	90                   	nop

c0013836 <CPU::setupMTRR()>:
c0013836:	c3                   	ret    
c0013837:	90                   	nop

c0013838 <CPU::setupGlobalPages()>:
c0013838:	0f 20 e0             	mov    eax,cr4
c001383b:	0c 80                	or     al,0x80
c001383d:	0f 22 e0             	mov    cr4,eax
c0013840:	c3                   	ret    
c0013841:	90                   	nop

c0013842 <CPU::allowUsermodeDataAccess()>:
c0013842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013846:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001384d:	74 03                	je     c0013852 <CPU::allowUsermodeDataAccess()+0x10>
c001384f:	0f 01 cb             	stac   
c0013852:	c3                   	ret    
c0013853:	90                   	nop

c0013854 <CPU::prohibitUsermodeDataAccess()>:
c0013854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013858:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001385f:	74 03                	je     c0013864 <CPU::prohibitUsermodeDataAccess()+0x10>
c0013861:	0f 01 ca             	clac   
c0013864:	c3                   	ret    
c0013865:	90                   	nop

c0013866 <CPU::setupSMAP()>:
c0013866:	0f 20 e0             	mov    eax,cr4
c0013869:	0d 00 00 20 00       	or     eax,0x200000
c001386e:	0f 22 e0             	mov    cr4,eax
c0013871:	eb e1                	jmp    c0013854 <CPU::prohibitUsermodeDataAccess()>
c0013873:	90                   	nop

c0013874 <CPU::setupFeatures()>:
c0013874:	83 ec 0c             	sub    esp,0xc
c0013877:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001387b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0013882:	74 07                	je     c001388b <CPU::setupFeatures()+0x17>
c0013884:	52                   	push   edx
c0013885:	e8 46 ff ff ff       	call   c00137d0 <CPU::setupSMEP()>
c001388a:	58                   	pop    eax
c001388b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0013892:	74 07                	je     c001389b <CPU::setupFeatures()+0x27>
c0013894:	52                   	push   edx
c0013895:	e8 cc ff ff ff       	call   c0013866 <CPU::setupSMAP()>
c001389a:	58                   	pop    eax
c001389b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00138a2:	74 07                	je     c00138ab <CPU::setupFeatures()+0x37>
c00138a4:	52                   	push   edx
c00138a5:	e8 32 ff ff ff       	call   c00137dc <CPU::setupUMIP()>
c00138aa:	58                   	pop    eax
c00138ab:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00138b2:	74 07                	je     c00138bb <CPU::setupFeatures()+0x47>
c00138b4:	52                   	push   edx
c00138b5:	e8 2c ff ff ff       	call   c00137e6 <CPU::setupTSC()>
c00138ba:	58                   	pop    eax
c00138bb:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00138c2:	74 07                	je     c00138cb <CPU::setupFeatures()+0x57>
c00138c4:	52                   	push   edx
c00138c5:	e8 26 ff ff ff       	call   c00137f0 <CPU::setupLargePages()>
c00138ca:	59                   	pop    ecx
c00138cb:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00138d2:	74 07                	je     c00138db <CPU::setupFeatures()+0x67>
c00138d4:	52                   	push   edx
c00138d5:	e8 5e ff ff ff       	call   c0013838 <CPU::setupGlobalPages()>
c00138da:	58                   	pop    eax
c00138db:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00138e2:	74 0c                	je     c00138f0 <CPU::setupFeatures()+0x7c>
c00138e4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00138e8:	83 c4 0c             	add    esp,0xc
c00138eb:	e9 0a ff ff ff       	jmp    c00137fa <CPU::setupPAT()>
c00138f0:	83 c4 0c             	add    esp,0xc
c00138f3:	c3                   	ret    

c00138f4 <CPU::open(int, int, void*)>:
c00138f4:	57                   	push   edi
c00138f5:	56                   	push   esi
c00138f6:	53                   	push   ebx
c00138f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00138ff:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0013905:	83 ec 0c             	sub    esp,0xc
c0013908:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001390e:	68 d4 40 02 c0       	push   0xc00240d4
c0013913:	e8 05 61 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013918:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001391e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013921:	e8 96 59 ff ff       	call   c00092bc <GDT::setup()>
c0013926:	c7 04 24 e6 40 02 c0 	mov    DWORD PTR [esp],0xc00240e6
c001392d:	e8 eb 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013932:	83 c4 0c             	add    esp,0xc
c0013935:	6a 00                	push   0x0
c0013937:	68 ef be ad de       	push   0xdeadbeef
c001393c:	57                   	push   edi
c001393d:	e8 e6 76 ff ff       	call   c000b028 <TSS::setup(unsigned long, unsigned long)>
c0013942:	c7 04 24 f8 40 02 c0 	mov    DWORD PTR [esp],0xc00240f8
c0013949:	e8 cf 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001394e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013951:	e8 b2 76 ff ff       	call   c000b008 <TSS::flush()>
c0013956:	c7 04 24 0c 41 02 c0 	mov    DWORD PTR [esp],0xc002410c
c001395d:	e8 bb 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013962:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0013968:	89 04 24             	mov    DWORD PTR [esp],eax
c001396b:	e8 b6 5b ff ff       	call   c0009526 <IDT::setup()>
c0013970:	c7 04 24 1e 41 02 c0 	mov    DWORD PTR [esp],0xc002411e
c0013977:	e8 a1 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001397c:	b8 00 04 00 00       	mov    eax,0x400
c0013981:	0f 23 f8             	mov    db7,eax
c0013984:	c7 04 24 3c 41 02 c0 	mov    DWORD PTR [esp],0xc002413c
c001398b:	e8 8d 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013990:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001399a:	e8 32 64 ff ff       	call   c0009dd1 <Phys::allocatePage()>
c001399f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00139a5:	89 30                	mov    DWORD PTR [eax],esi
c00139a7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00139ad:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00139b0:	c7 04 24 5e 41 02 c0 	mov    DWORD PTR [esp],0xc002415e
c00139b7:	e8 61 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139bc:	58                   	pop    eax
c00139bd:	5a                   	pop    edx
c00139be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00139c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00139c8:	e8 55 86 ff ff       	call   c000c022 <VAS::setCPUSpecific(unsigned long)>
c00139cd:	c7 04 24 86 41 02 c0 	mov    DWORD PTR [esp],0xc0024186
c00139d4:	e8 44 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139dc:	e8 fd f3 ff ff       	call   c0012dde <CPU::detectFeatures()>
c00139e1:	c7 04 24 a9 41 02 c0 	mov    DWORD PTR [esp],0xc00241a9
c00139e8:	e8 30 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139ed:	e8 cc b8 ff ff       	call   c000f2be <setupInterruptController()>
c00139f2:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00139f8:	c7 04 24 cd 41 02 c0 	mov    DWORD PTR [esp],0xc00241cd
c00139ff:	e8 19 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a04:	a1 20 64 02 c0       	mov    eax,ds:0xc0026420
c0013a09:	83 e0 10             	and    eax,0x10
c0013a0c:	83 f8 01             	cmp    eax,0x1
c0013a0f:	19 c0                	sbb    eax,eax
c0013a11:	83 e0 46             	and    eax,0x46
c0013a14:	83 c0 1e             	add    eax,0x1e
c0013a17:	89 04 24             	mov    DWORD PTR [esp],eax
c0013a1a:	e8 89 ce ff ff       	call   c00108a8 <setupTimer(int)>
c0013a1f:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0013a25:	c7 04 24 e8 41 02 c0 	mov    DWORD PTR [esp],0xc00241e8
c0013a2c:	e8 ec 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a34:	e8 3b fe ff ff       	call   c0013874 <CPU::setupFeatures()>
c0013a39:	c7 04 24 03 42 02 c0 	mov    DWORD PTR [esp],0xc0024203
c0013a40:	e8 d8 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a45:	83 c4 10             	add    esp,0x10
c0013a48:	31 c0                	xor    eax,eax
c0013a4a:	5b                   	pop    ebx
c0013a4b:	5e                   	pop    esi
c0013a4c:	5f                   	pop    edi
c0013a4d:	c3                   	ret    

c0013a4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013a4e:	57                   	push   edi
c0013a4f:	56                   	push   esi
c0013a50:	53                   	push   ebx
c0013a51:	51                   	push   ecx
c0013a52:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a56:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013a59:	0f 02 c0             	lar    eax,ax
c0013a5c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013a5f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013a63:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013a66:	88 ca                	mov    dl,cl
c0013a68:	c0 ea 06             	shr    dl,0x6
c0013a6b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013a6f:	89 ca                	mov    edx,ecx
c0013a71:	66 c1 ea 03          	shr    dx,0x3
c0013a75:	83 e2 07             	and    edx,0x7
c0013a78:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013a7d:	88 17                	mov    BYTE PTR [edi],dl
c0013a7f:	0f 84 a6 01 00 00    	je     c0013c2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013a85:	83 e1 07             	and    ecx,0x7
c0013a88:	80 f9 04             	cmp    cl,0x4
c0013a8b:	0f 84 98 00 00 00    	je     c0013b29 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013a91:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013a96:	0f 95 c0             	setne  al
c0013a99:	80 f9 05             	cmp    cl,0x5
c0013a9c:	0f 95 c2             	setne  dl
c0013a9f:	08 c2                	or     dl,al
c0013aa1:	74 79                	je     c0013b1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0013aa3:	84 c9                	test   cl,cl
c0013aa5:	75 05                	jne    c0013aac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0013aa7:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013aaa:	eb 3c                	jmp    c0013ae8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013aac:	80 f9 01             	cmp    cl,0x1
c0013aaf:	75 05                	jne    c0013ab6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0013ab1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013ab4:	eb 32                	jmp    c0013ae8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ab6:	80 f9 02             	cmp    cl,0x2
c0013ab9:	75 05                	jne    c0013ac0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0013abb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013abe:	eb 28                	jmp    c0013ae8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ac0:	31 c0                	xor    eax,eax
c0013ac2:	80 f9 03             	cmp    cl,0x3
c0013ac5:	75 05                	jne    c0013acc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0013ac7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013aca:	eb 1c                	jmp    c0013ae8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013acc:	80 f9 05             	cmp    cl,0x5
c0013acf:	75 05                	jne    c0013ad6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0013ad1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013ad4:	eb 12                	jmp    c0013ae8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ad6:	80 f9 06             	cmp    cl,0x6
c0013ad9:	75 05                	jne    c0013ae0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0013adb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013ade:	eb 08                	jmp    c0013ae8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ae0:	80 f9 07             	cmp    cl,0x7
c0013ae3:	75 03                	jne    c0013ae8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013ae5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013ae8:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013aed:	75 10                	jne    c0013aff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0013aef:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0013af3:	b9 03 00 00 00       	mov    ecx,0x3
c0013af8:	01 d0                	add    eax,edx
c0013afa:	e9 37 01 00 00       	jmp    c0013c36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013aff:	b9 02 00 00 00       	mov    ecx,0x2
c0013b04:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0013b09:	0f 85 27 01 00 00    	jne    c0013c36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b0f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0013b12:	b9 06 00 00 00       	mov    ecx,0x6
c0013b17:	e9 1a 01 00 00       	jmp    c0013c36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b1c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0013b1f:	b9 06 00 00 00       	mov    ecx,0x6
c0013b24:	e9 0f 01 00 00       	jmp    c0013c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013b29:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0013b2c:	88 ca                	mov    dl,cl
c0013b2e:	c0 ea 06             	shr    dl,0x6
c0013b31:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0013b35:	89 ca                	mov    edx,ecx
c0013b37:	66 c1 ea 03          	shr    dx,0x3
c0013b3b:	83 e2 07             	and    edx,0x7
c0013b3e:	80 e1 07             	and    cl,0x7
c0013b41:	75 05                	jne    c0013b48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0013b43:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0013b46:	eb 4c                	jmp    c0013b94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b48:	80 f9 01             	cmp    cl,0x1
c0013b4b:	75 05                	jne    c0013b52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0013b4d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013b50:	eb 42                	jmp    c0013b94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b52:	80 f9 02             	cmp    cl,0x2
c0013b55:	75 05                	jne    c0013b5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0013b57:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0013b5a:	eb 38                	jmp    c0013b94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b5c:	80 f9 03             	cmp    cl,0x3
c0013b5f:	75 05                	jne    c0013b66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0013b61:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0013b64:	eb 2e                	jmp    c0013b94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b66:	80 f9 04             	cmp    cl,0x4
c0013b69:	75 12                	jne    c0013b7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0013b6b:	f6 c4 60             	test   ah,0x60
c0013b6e:	75 08                	jne    c0013b78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0013b70:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0013b73:	8d 78 14             	lea    edi,[eax+0x14]
c0013b76:	eb 1c                	jmp    c0013b94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b78:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0013b7b:	eb 17                	jmp    c0013b94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b7d:	80 f9 05             	cmp    cl,0x5
c0013b80:	75 05                	jne    c0013b87 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0013b82:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0013b85:	eb 0d                	jmp    c0013b94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b87:	80 f9 06             	cmp    cl,0x6
c0013b8a:	75 05                	jne    c0013b91 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0013b8c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0013b8f:	eb 03                	jmp    c0013b94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b91:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0013b94:	84 d2                	test   dl,dl
c0013b96:	75 05                	jne    c0013b9d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0013b98:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013b9b:	eb 3c                	jmp    c0013bd9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b9d:	80 fa 01             	cmp    dl,0x1
c0013ba0:	75 05                	jne    c0013ba7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0013ba2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013ba5:	eb 32                	jmp    c0013bd9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013ba7:	80 fa 02             	cmp    dl,0x2
c0013baa:	75 05                	jne    c0013bb1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0013bac:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013baf:	eb 28                	jmp    c0013bd9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bb1:	80 fa 03             	cmp    dl,0x3
c0013bb4:	75 05                	jne    c0013bbb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0013bb6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013bb9:	eb 1e                	jmp    c0013bd9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bbb:	31 c0                	xor    eax,eax
c0013bbd:	80 fa 04             	cmp    dl,0x4
c0013bc0:	74 17                	je     c0013bd9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bc2:	80 fa 05             	cmp    dl,0x5
c0013bc5:	75 05                	jne    c0013bcc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0013bc7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013bca:	eb 0d                	jmp    c0013bd9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bcc:	80 fa 06             	cmp    dl,0x6
c0013bcf:	75 05                	jne    c0013bd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0013bd1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013bd4:	eb 03                	jmp    c0013bd9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bd6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013bd9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013bde:	0f 94 c2             	sete   dl
c0013be1:	80 f9 05             	cmp    cl,0x5
c0013be4:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0013be8:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0013bed:	d3 e0                	shl    eax,cl
c0013bef:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0013bf3:	74 0a                	je     c0013bff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0013bf5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013bf8:	b9 07 00 00 00       	mov    ecx,0x7
c0013bfd:	eb 37                	jmp    c0013c36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013bff:	01 f8                	add    eax,edi
c0013c01:	b9 03 00 00 00       	mov    ecx,0x3
c0013c06:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013c0b:	74 2b                	je     c0013c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c0d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013c12:	75 0d                	jne    c0013c21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0013c14:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0013c18:	01 c8                	add    eax,ecx
c0013c1a:	b9 04 00 00 00       	mov    ecx,0x4
c0013c1f:	eb 17                	jmp    c0013c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c21:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013c24:	b9 07 00 00 00       	mov    ecx,0x7
c0013c29:	eb 0d                	jmp    c0013c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c2b:	b9 02 00 00 00       	mov    ecx,0x2
c0013c30:	b2 01                	mov    dl,0x1
c0013c32:	31 c0                	xor    eax,eax
c0013c34:	eb 02                	jmp    c0013c38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c36:	31 d2                	xor    edx,edx
c0013c38:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c3c:	89 0b                	mov    DWORD PTR [ebx],ecx
c0013c3e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013c42:	88 11                	mov    BYTE PTR [ecx],dl
c0013c44:	5a                   	pop    edx
c0013c45:	5b                   	pop    ebx
c0013c46:	5e                   	pop    esi
c0013c47:	5f                   	pop    edi
c0013c48:	c3                   	ret    

c0013c49 <Krnl::smpEntry()>:
c0013c49:	eb fe                	jmp    c0013c49 <Krnl::smpEntry()>

c0013c4b <Krnl::startCPU(int)>:
c0013c4b:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c0013c50:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013c57:	0f 84 36 01 00 00    	je     c0013d93 <Krnl::startCPU(int)+0x148>
c0013c5d:	53                   	push   ebx
c0013c5e:	83 ec 10             	sub    esp,0x10
c0013c61:	fa                   	cli    
c0013c62:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0013c68:	6a 1b                	push   0x1b
c0013c6a:	ff 35 08 64 02 c0    	push   DWORD PTR ds:0xc0026408
c0013c70:	e8 af 52 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013c75:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013c7a:	89 c3                	mov    ebx,eax
c0013c7c:	58                   	pop    eax
c0013c7d:	5a                   	pop    edx
c0013c7e:	53                   	push   ebx
c0013c7f:	68 4c 42 02 c0       	push   0xc002424c
c0013c84:	e8 ea 8d ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0013c89:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013c93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c97:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013ca1:	c1 e0 18             	shl    eax,0x18
c0013ca4:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0013caa:	83 c4 10             	add    esp,0x10
c0013cad:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013cb3:	09 c2                	or     edx,eax
c0013cb5:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0013cbb:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0013cc1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013cc7:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013ccd:	80 cd c5             	or     ch,0xc5
c0013cd0:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013cd6:	f3 90                	pause  
c0013cd8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013cda:	0f ba e1 0c          	bt     ecx,0xc
c0013cde:	72 f6                	jb     c0013cd6 <Krnl::startCPU(int)+0x8b>
c0013ce0:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013ce6:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013cec:	09 c1                	or     ecx,eax
c0013cee:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013cf4:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013cfa:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013d00:	80 cd 85             	or     ch,0x85
c0013d03:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d09:	f3 90                	pause  
c0013d0b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d0d:	0f ba e1 0c          	bt     ecx,0xc
c0013d11:	72 f6                	jb     c0013d09 <Krnl::startCPU(int)+0xbe>
c0013d13:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013d1d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d23:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d29:	09 c1                	or     ecx,eax
c0013d2b:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013d31:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013d37:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0013d3d:	81 c9 02 06 00 00    	or     ecx,0x602
c0013d43:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d49:	f3 90                	pause  
c0013d4b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d4d:	0f ba e1 0c          	bt     ecx,0xc
c0013d51:	72 f6                	jb     c0013d49 <Krnl::startCPU(int)+0xfe>
c0013d53:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013d5d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d63:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d69:	09 c8                	or     eax,ecx
c0013d6b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0013d71:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0013d77:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0013d7c:	0d 02 06 00 00       	or     eax,0x602
c0013d81:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0013d87:	f3 90                	pause  
c0013d89:	8b 02                	mov    eax,DWORD PTR [edx]
c0013d8b:	0f ba e0 0c          	bt     eax,0xc
c0013d8f:	72 f6                	jb     c0013d87 <Krnl::startCPU(int)+0x13c>
c0013d91:	eb fe                	jmp    c0013d91 <Krnl::startCPU(int)+0x146>
c0013d93:	c3                   	ret    

c0013d94 <Krnl::startCPUs()>:
c0013d94:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c0013d99:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013d9f:	88 c2                	mov    dl,al
c0013da1:	83 e2 0a             	and    edx,0xa
c0013da4:	80 fa 0a             	cmp    dl,0xa
c0013da7:	75 09                	jne    c0013db2 <Krnl::startCPUs()+0x1e>
c0013da9:	a8 01                	test   al,0x1
c0013dab:	74 05                	je     c0013db2 <Krnl::startCPUs()+0x1e>
c0013dad:	e9 e9 c3 fe ff       	jmp    c000019b <prepareTramp>
c0013db2:	c3                   	ret    
c0013db3:	90                   	nop

c0013db4 <EnvVarContainer::getEnv(char const*)>:
c0013db4:	57                   	push   edi
c0013db5:	56                   	push   esi
c0013db6:	53                   	push   ebx
c0013db7:	31 db                	xor    ebx,ebx
c0013db9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013dbd:	39 1e                	cmp    DWORD PTR [esi],ebx
c0013dbf:	7e 2b                	jle    c0013dec <EnvVarContainer::getEnv(char const*)+0x38>
c0013dc1:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0013dc8:	50                   	push   eax
c0013dc9:	50                   	push   eax
c0013dca:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013dcd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0013dd0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013dd4:	e8 f3 c9 fe ff       	call   c00007cc <strcmp>
c0013dd9:	83 c4 10             	add    esp,0x10
c0013ddc:	85 c0                	test   eax,eax
c0013dde:	75 09                	jne    c0013de9 <EnvVarContainer::getEnv(char const*)+0x35>
c0013de0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013de3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0013de7:	eb 05                	jmp    c0013dee <EnvVarContainer::getEnv(char const*)+0x3a>
c0013de9:	43                   	inc    ebx
c0013dea:	eb d1                	jmp    c0013dbd <EnvVarContainer::getEnv(char const*)+0x9>
c0013dec:	31 c0                	xor    eax,eax
c0013dee:	5b                   	pop    ebx
c0013def:	5e                   	pop    esi
c0013df0:	5f                   	pop    edi
c0013df1:	c3                   	ret    

c0013df2 <EnvVarContainer::setEnv(char const*, char const*)>:
c0013df2:	55                   	push   ebp
c0013df3:	57                   	push   edi
c0013df4:	56                   	push   esi
c0013df5:	53                   	push   ebx
c0013df6:	83 ec 28             	sub    esp,0x28
c0013df9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013dfd:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0013e01:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013e05:	56                   	push   esi
c0013e06:	e8 95 c8 fe ff       	call   c00006a0 <strlen>
c0013e0b:	40                   	inc    eax
c0013e0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e0f:	e8 af 5b ff ff       	call   c00099c3 <malloc>
c0013e14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013e1b:	e8 80 c8 fe ff       	call   c00006a0 <strlen>
c0013e20:	40                   	inc    eax
c0013e21:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e24:	e8 9a 5b ff ff       	call   c00099c3 <malloc>
c0013e29:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e30:	e8 6b c8 fe ff       	call   c00006a0 <strlen>
c0013e35:	83 c4 0c             	add    esp,0xc
c0013e38:	40                   	inc    eax
c0013e39:	50                   	push   eax
c0013e3a:	6a 00                	push   0x0
c0013e3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013e40:	e8 3f c8 fe ff       	call   c0000684 <memset>
c0013e45:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e48:	e8 53 c8 fe ff       	call   c00006a0 <strlen>
c0013e4d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e51:	8d 48 01             	lea    ecx,[eax+0x1]
c0013e54:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e59:	89 de                	mov    esi,ebx
c0013e5b:	e8 40 c8 fe ff       	call   c00006a0 <strlen>
c0013e60:	83 c4 0c             	add    esp,0xc
c0013e63:	40                   	inc    eax
c0013e64:	50                   	push   eax
c0013e65:	6a 00                	push   0x0
c0013e67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e6b:	e8 14 c8 fe ff       	call   c0000684 <memset>
c0013e70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e73:	e8 28 c8 fe ff       	call   c00006a0 <strlen>
c0013e78:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e7c:	8d 48 01             	lea    ecx,[eax+0x1]
c0013e7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e81:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e84:	40                   	inc    eax
c0013e85:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013e88:	c1 e0 03             	shl    eax,0x3
c0013e8b:	5a                   	pop    edx
c0013e8c:	59                   	pop    ecx
c0013e8d:	50                   	push   eax
c0013e8e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0013e91:	e8 19 5b ff ff       	call   c00099af <realloc>
c0013e96:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013e9a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013e9d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013ea0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013ea4:	b9 08 00 00 00       	mov    ecx,0x8
c0013ea9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013eab:	83 c4 2c             	add    esp,0x2c
c0013eae:	5b                   	pop    ebx
c0013eaf:	5e                   	pop    esi
c0013eb0:	5f                   	pop    edi
c0013eb1:	5d                   	pop    ebp
c0013eb2:	c3                   	ret    
c0013eb3:	90                   	nop

c0013eb4 <EnvVarContainer::deleteEnv(char const*)>:
c0013eb4:	c3                   	ret    
c0013eb5:	90                   	nop

c0013eb6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0013eb6:	55                   	push   ebp
c0013eb7:	57                   	push   edi
c0013eb8:	56                   	push   esi
c0013eb9:	53                   	push   ebx
c0013eba:	81 ec 38 01 00 00    	sub    esp,0x138
c0013ec0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0013ec7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0013ece:	68 14 01 00 00       	push   0x114
c0013ed3:	e8 eb 5a ff ff       	call   c00099c3 <malloc>
c0013ed8:	83 c4 0c             	add    esp,0xc
c0013edb:	89 c3                	mov    ebx,eax
c0013edd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0013ee0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0013ee7:	50                   	push   eax
c0013ee8:	e8 f1 90 ff ff       	call   c000cfde <File::File(char const*, Process*)>
c0013eed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ef0:	e8 bb 93 ff ff       	call   c000d2b0 <File::exists()>
c0013ef5:	83 c4 10             	add    esp,0x10
c0013ef8:	84 c0                	test   al,al
c0013efa:	75 31                	jne    c0013f2d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0013efc:	50                   	push   eax
c0013efd:	50                   	push   eax
c0013efe:	6a 12                	push   0x12
c0013f00:	53                   	push   ebx
c0013f01:	e8 3c 91 ff ff       	call   c000d042 <File::open(FileOpenMode)>
c0013f06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f08:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0013f0b:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f0e:	e8 8d c7 fe ff       	call   c00006a0 <strlen>
c0013f13:	5a                   	pop    edx
c0013f14:	31 d2                	xor    edx,edx
c0013f16:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013f1a:	51                   	push   ecx
c0013f1b:	56                   	push   esi
c0013f1c:	52                   	push   edx
c0013f1d:	50                   	push   eax
c0013f1e:	53                   	push   ebx
c0013f1f:	ff d7                	call   edi
c0013f21:	83 c4 14             	add    esp,0x14
c0013f24:	53                   	push   ebx
c0013f25:	e8 76 91 ff ff       	call   c000d0a0 <File::close()>
c0013f2a:	83 c4 10             	add    esp,0x10
c0013f2d:	56                   	push   esi
c0013f2e:	31 f6                	xor    esi,esi
c0013f30:	68 00 01 00 00       	push   0x100
c0013f35:	6a 00                	push   0x0
c0013f37:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0013f3b:	50                   	push   eax
c0013f3c:	e8 43 c7 fe ff       	call   c0000684 <memset>
c0013f41:	5f                   	pop    edi
c0013f42:	58                   	pop    eax
c0013f43:	6a 01                	push   0x1
c0013f45:	53                   	push   ebx
c0013f46:	e8 f7 90 ff ff       	call   c000d042 <File::open(FileOpenMode)>
c0013f4b:	83 c4 10             	add    esp,0x10
c0013f4e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013f56:	83 ec 0c             	sub    esp,0xc
c0013f59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f5b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013f5f:	51                   	push   ecx
c0013f60:	8d 54 24 23          	lea    edx,[esp+0x23]
c0013f64:	52                   	push   edx
c0013f65:	6a 00                	push   0x0
c0013f67:	6a 01                	push   0x1
c0013f69:	53                   	push   ebx
c0013f6a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f6d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0013f71:	83 c4 20             	add    esp,0x20
c0013f74:	3c 0d                	cmp    al,0xd
c0013f76:	0f 84 09 01 00 00    	je     c0014085 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013f7c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013f81:	0f 84 ef 00 00 00    	je     c0014076 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013f87:	3c 0a                	cmp    al,0xa
c0013f89:	74 13                	je     c0013f9e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013f8b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013f90:	74 0c                	je     c0013f9e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013f92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0013f98:	0f 8e d8 00 00 00    	jle    c0014076 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013f9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013fa2:	83 ec 0c             	sub    esp,0xc
c0013fa5:	8d 78 01             	lea    edi,[eax+0x1]
c0013fa8:	57                   	push   edi
c0013fa9:	e8 15 5a ff ff       	call   c00099c3 <malloc>
c0013fae:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0013fb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013fb6:	8d 56 04             	lea    edx,[esi+0x4]
c0013fb9:	89 14 24             	mov    DWORD PTR [esp],edx
c0013fbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013fc0:	e8 fe 59 ff ff       	call   c00099c3 <malloc>
c0013fc5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013fc9:	83 c4 0c             	add    esp,0xc
c0013fcc:	57                   	push   edi
c0013fcd:	6a 00                	push   0x0
c0013fcf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013fd3:	e8 ac c6 fe ff       	call   c0000684 <memset>
c0013fd8:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013fdc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013fe0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013fe4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fe6:	83 c4 0c             	add    esp,0xc
c0013fe9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013fed:	52                   	push   edx
c0013fee:	6a 00                	push   0x0
c0013ff0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013ff4:	e8 8b c6 fe ff       	call   c0000684 <memset>
c0013ff9:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013ffd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014001:	89 34 24             	mov    DWORD PTR [esp],esi
c0014004:	e8 97 c6 fe ff       	call   c00006a0 <strlen>
c0014009:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001400d:	89 c1                	mov    ecx,eax
c001400f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014011:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014014:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014017:	40                   	inc    eax
c0014018:	83 c4 10             	add    esp,0x10
c001401b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001401e:	85 d2                	test   edx,edx
c0014020:	75 0c                	jne    c001402e <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014022:	83 ec 0c             	sub    esp,0xc
c0014025:	6a 08                	push   0x8
c0014027:	e8 97 59 ff ff       	call   c00099c3 <malloc>
c001402c:	eb 0c                	jmp    c001403a <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001402e:	c1 e0 03             	shl    eax,0x3
c0014031:	51                   	push   ecx
c0014032:	51                   	push   ecx
c0014033:	50                   	push   eax
c0014034:	52                   	push   edx
c0014035:	e8 75 59 ff ff       	call   c00099af <realloc>
c001403a:	83 c4 10             	add    esp,0x10
c001403d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014040:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014043:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014046:	8d 74 24 18          	lea    esi,[esp+0x18]
c001404a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001404e:	b9 08 00 00 00       	mov    ecx,0x8
c0014053:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014055:	31 f6                	xor    esi,esi
c0014057:	50                   	push   eax
c0014058:	68 00 01 00 00       	push   0x100
c001405d:	6a 00                	push   0x0
c001405f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014063:	50                   	push   eax
c0014064:	e8 1b c6 fe ff       	call   c0000684 <memset>
c0014069:	83 c4 10             	add    esp,0x10
c001406c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014074:	eb 0f                	jmp    c0014085 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014076:	3c 3d                	cmp    al,0x3d
c0014078:	74 07                	je     c0014081 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c001407a:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001407e:	46                   	inc    esi
c001407f:	eb 04                	jmp    c0014085 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014081:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014085:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001408a:	0f 85 c6 fe ff ff    	jne    c0013f56 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014090:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014096:	5b                   	pop    ebx
c0014097:	5e                   	pop    esi
c0014098:	5f                   	pop    edi
c0014099:	5d                   	pop    ebp
c001409a:	c3                   	ret    
c001409b:	90                   	nop

c001409c <EnvVarContainer::__loadSystem()>:
c001409c:	83 ec 10             	sub    esp,0x10
c001409f:	68 e0 5d 02 c0       	push   0xc0025de0
c00140a4:	68 5d 42 02 c0       	push   0xc002425d
c00140a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ad:	e8 04 fe ff ff       	call   c0013eb6 <EnvVarContainer::loadFrom(char const*, char const*)>
c00140b2:	83 c4 1c             	add    esp,0x1c
c00140b5:	c3                   	ret    

c00140b6 <EnvVarContainer::__loadUser()>:
c00140b6:	c3                   	ret    
c00140b7:	90                   	nop

c00140b8 <EnvVarContainer::EnvVarContainer(Process*)>:
c00140b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00140c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00140ca:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00140cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00140d8:	90                   	nop
c00140d9:	c3                   	ret    

c00140da <EnvVarContainer::~EnvVarContainer()>:
c00140da:	83 ec 0c             	sub    esp,0xc
c00140dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00140e4:	85 c0                	test   eax,eax
c00140e6:	74 1d                	je     c0014105 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00140e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00140ee:	85 c0                	test   eax,eax
c00140f0:	74 13                	je     c0014105 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00140f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00140f9:	83 ec 0c             	sub    esp,0xc
c00140fc:	50                   	push   eax
c00140fd:	e8 d1 58 ff ff       	call   c00099d3 <free>
c0014102:	83 c4 10             	add    esp,0x10
c0014105:	90                   	nop
c0014106:	83 c4 0c             	add    esp,0xc
c0014109:	c3                   	ret    

c001410a <Krnl::getEnv(Process*, char const*)>:
c001410a:	53                   	push   ebx
c001410b:	83 ec 08             	sub    esp,0x8
c001410e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014112:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014116:	39 05 f0 78 02 c0    	cmp    DWORD PTR ds:0xc00278f0,eax
c001411c:	74 04                	je     c0014122 <Krnl::getEnv(Process*, char const*)+0x18>
c001411e:	85 c0                	test   eax,eax
c0014120:	75 0b                	jne    c001412d <Krnl::getEnv(Process*, char const*)+0x23>
c0014122:	a1 d4 6e 02 c0       	mov    eax,ds:0xc0026ed4
c0014127:	85 c0                	test   eax,eax
c0014129:	75 19                	jne    c0014144 <Krnl::getEnv(Process*, char const*)+0x3a>
c001412b:	eb 27                	jmp    c0014154 <Krnl::getEnv(Process*, char const*)+0x4a>
c001412d:	52                   	push   edx
c001412e:	52                   	push   edx
c001412f:	53                   	push   ebx
c0014130:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014136:	e8 79 fc ff ff       	call   c0013db4 <EnvVarContainer::getEnv(char const*)>
c001413b:	83 c4 10             	add    esp,0x10
c001413e:	85 c0                	test   eax,eax
c0014140:	75 28                	jne    c001416a <Krnl::getEnv(Process*, char const*)+0x60>
c0014142:	eb de                	jmp    c0014122 <Krnl::getEnv(Process*, char const*)+0x18>
c0014144:	52                   	push   edx
c0014145:	52                   	push   edx
c0014146:	53                   	push   ebx
c0014147:	50                   	push   eax
c0014148:	e8 67 fc ff ff       	call   c0013db4 <EnvVarContainer::getEnv(char const*)>
c001414d:	83 c4 10             	add    esp,0x10
c0014150:	85 c0                	test   eax,eax
c0014152:	75 16                	jne    c001416a <Krnl::getEnv(Process*, char const*)+0x60>
c0014154:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014158:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c001415d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014161:	83 c4 08             	add    esp,0x8
c0014164:	5b                   	pop    ebx
c0014165:	e9 4a fc ff ff       	jmp    c0013db4 <EnvVarContainer::getEnv(char const*)>
c001416a:	83 c4 08             	add    esp,0x8
c001416d:	5b                   	pop    ebx
c001416e:	c3                   	ret    

c001416f <Krnl::setEnvSystem(char const*, char const*)>:
c001416f:	83 ec 10             	sub    esp,0x10
c0014172:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014176:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001417a:	ff 35 d8 6e 02 c0    	push   DWORD PTR ds:0xc0026ed8
c0014180:	e8 6d fc ff ff       	call   c0013df2 <EnvVarContainer::setEnv(char const*, char const*)>
c0014185:	83 c4 1c             	add    esp,0x1c
c0014188:	c3                   	ret    

c0014189 <Krnl::setEnvUser(char const*, char const*)>:
c0014189:	a1 d4 6e 02 c0       	mov    eax,ds:0xc0026ed4
c001418e:	85 c0                	test   eax,eax
c0014190:	74 15                	je     c00141a7 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014192:	83 ec 10             	sub    esp,0x10
c0014195:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014199:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001419d:	50                   	push   eax
c001419e:	e8 4f fc ff ff       	call   c0013df2 <EnvVarContainer::setEnv(char const*, char const*)>
c00141a3:	83 c4 1c             	add    esp,0x1c
c00141a6:	c3                   	ret    
c00141a7:	c3                   	ret    

c00141a8 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00141a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141ac:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00141b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141b6:	e9 37 fc ff ff       	jmp    c0013df2 <EnvVarContainer::setEnv(char const*, char const*)>

c00141bb <Krnl::deleteEnvSystem(char const*)>:
c00141bb:	c3                   	ret    

c00141bc <Krnl::deleteEnvUser(char const*)>:
c00141bc:	c3                   	ret    

c00141bd <Krnl::deleteEnvProcess(Process*, char const*)>:
c00141bd:	c3                   	ret    

c00141be <Krnl::newProcessEnv(Process*)>:
c00141be:	83 ec 28             	sub    esp,0x28
c00141c1:	6a 0c                	push   0xc
c00141c3:	e8 fb 57 ff ff       	call   c00099c3 <malloc>
c00141c8:	5a                   	pop    edx
c00141c9:	59                   	pop    ecx
c00141ca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00141ce:	50                   	push   eax
c00141cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00141d3:	e8 e0 fe ff ff       	call   c00140b8 <EnvVarContainer::EnvVarContainer(Process*)>
c00141d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141dc:	83 c4 2c             	add    esp,0x2c
c00141df:	c3                   	ret    

c00141e0 <Krnl::copyProcessEnv(Process*, Process*)>:
c00141e0:	57                   	push   edi
c00141e1:	56                   	push   esi
c00141e2:	53                   	push   ebx
c00141e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141e7:	83 ec 0c             	sub    esp,0xc
c00141ea:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00141f0:	6a 0c                	push   0xc
c00141f2:	e8 cc 57 ff ff       	call   c00099c3 <malloc>
c00141f7:	89 c3                	mov    ebx,eax
c00141f9:	58                   	pop    eax
c00141fa:	5a                   	pop    edx
c00141fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141ff:	53                   	push   ebx
c0014200:	e8 b3 fe ff ff       	call   c00140b8 <EnvVarContainer::EnvVarContainer(Process*)>
c0014205:	8b 07                	mov    eax,DWORD PTR [edi]
c0014207:	89 03                	mov    DWORD PTR [ebx],eax
c0014209:	c1 e0 03             	shl    eax,0x3
c001420c:	89 04 24             	mov    DWORD PTR [esp],eax
c001420f:	e8 af 57 ff ff       	call   c00099c3 <malloc>
c0014214:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014217:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014219:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001421c:	c1 e1 03             	shl    ecx,0x3
c001421f:	89 c7                	mov    edi,eax
c0014221:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014223:	83 c4 10             	add    esp,0x10
c0014226:	89 d8                	mov    eax,ebx
c0014228:	5b                   	pop    ebx
c0014229:	5e                   	pop    esi
c001422a:	5f                   	pop    edi
c001422b:	c3                   	ret    

c001422c <Krnl::loadSystemEnv()>:
c001422c:	53                   	push   ebx
c001422d:	83 ec 14             	sub    esp,0x14
c0014230:	6a 0c                	push   0xc
c0014232:	e8 8c 57 ff ff       	call   c00099c3 <malloc>
c0014237:	89 c3                	mov    ebx,eax
c0014239:	58                   	pop    eax
c001423a:	5a                   	pop    edx
c001423b:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0014241:	53                   	push   ebx
c0014242:	e8 71 fe ff ff       	call   c00140b8 <EnvVarContainer::EnvVarContainer(Process*)>
c0014247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001424a:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0014250:	e8 47 fe ff ff       	call   c001409c <EnvVarContainer::__loadSystem()>
c0014255:	83 c4 18             	add    esp,0x18
c0014258:	5b                   	pop    ebx
c0014259:	c3                   	ret    

c001425a <Krnl::loadUserEnv()>:
c001425a:	53                   	push   ebx
c001425b:	83 ec 14             	sub    esp,0x14
c001425e:	6a 0c                	push   0xc
c0014260:	e8 5e 57 ff ff       	call   c00099c3 <malloc>
c0014265:	89 c3                	mov    ebx,eax
c0014267:	58                   	pop    eax
c0014268:	5a                   	pop    edx
c0014269:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c001426f:	53                   	push   ebx
c0014270:	e8 43 fe ff ff       	call   c00140b8 <EnvVarContainer::EnvVarContainer(Process*)>
c0014275:	89 1d d4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed4,ebx
c001427b:	83 c4 18             	add    esp,0x18
c001427e:	5b                   	pop    ebx
c001427f:	c3                   	ret    

c0014280 <Krnl::flushEnv()>:
c0014280:	c3                   	ret    

c0014281 <Krnl::getProcessTotalEnvCount(Process*)>:
c0014281:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014285:	8b 15 d4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ed4
c001428b:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014291:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0014296:	8b 00                	mov    eax,DWORD PTR [eax]
c0014298:	03 01                	add    eax,DWORD PTR [ecx]
c001429a:	85 d2                	test   edx,edx
c001429c:	74 02                	je     c00142a0 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001429e:	03 02                	add    eax,DWORD PTR [edx]
c00142a0:	c3                   	ret    

c00142a1 <Krnl::getProcessEnvPair(Process*, int)>:
c00142a1:	57                   	push   edi
c00142a2:	56                   	push   esi
c00142a3:	8b 35 d4 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed4
c00142a9:	53                   	push   ebx
c00142aa:	85 f6                	test   esi,esi
c00142ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142b4:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00142ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142be:	8b 01                	mov    eax,DWORD PTR [ecx]
c00142c0:	75 16                	jne    c00142d8 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00142c2:	39 c2                	cmp    edx,eax
c00142c4:	7c 16                	jl     c00142dc <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00142c6:	8b 0d d8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ed8
c00142cc:	8b 31                	mov    esi,DWORD PTR [ecx]
c00142ce:	01 c6                	add    esi,eax
c00142d0:	39 d6                	cmp    esi,edx
c00142d2:	7e 3c                	jle    c0014310 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00142d4:	29 c2                	sub    edx,eax
c00142d6:	eb 04                	jmp    c00142dc <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00142d8:	39 c2                	cmp    edx,eax
c00142da:	7d 05                	jge    c00142e1 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00142dc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00142df:	eb 20                	jmp    c0014301 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00142e1:	8b 3e                	mov    edi,DWORD PTR [esi]
c00142e3:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00142e6:	39 d1                	cmp    ecx,edx
c00142e8:	7e 04                	jle    c00142ee <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00142ea:	29 c2                	sub    edx,eax
c00142ec:	eb 10                	jmp    c00142fe <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00142ee:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c00142f4:	03 0e                	add    ecx,DWORD PTR [esi]
c00142f6:	39 d1                	cmp    ecx,edx
c00142f8:	7e 16                	jle    c0014310 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00142fa:	29 c2                	sub    edx,eax
c00142fc:	29 fa                	sub    edx,edi
c00142fe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014301:	8d 14 d0             	lea    edx,[eax+edx*8]
c0014304:	8b 02                	mov    eax,DWORD PTR [edx]
c0014306:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014309:	89 03                	mov    DWORD PTR [ebx],eax
c001430b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001430e:	eb 1d                	jmp    c001432d <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0014310:	83 ec 0c             	sub    esp,0xc
c0014313:	68 7f 42 02 c0       	push   0xc002427f
c0014318:	e8 18 00 00 00       	call   c0014335 <Krnl::panic(char const*)>
c001431d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0014323:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001432a:	83 c4 10             	add    esp,0x10
c001432d:	89 d8                	mov    eax,ebx
c001432f:	5b                   	pop    ebx
c0014330:	5e                   	pop    esi
c0014331:	5f                   	pop    edi
c0014332:	c2 04 00             	ret    0x4

c0014335 <Krnl::panic(char const*)>:
c0014335:	55                   	push   ebp
c0014336:	89 e5                	mov    ebp,esp
c0014338:	53                   	push   ebx
c0014339:	83 ec 10             	sub    esp,0x10
c001433c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001433f:	fa                   	cli    
c0014340:	c6 05 e4 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ee4,0x1
c0014347:	53                   	push   ebx
c0014348:	e8 d0 56 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001434d:	58                   	pop    eax
c001434e:	c6 05 e0 57 02 c0 00 	mov    BYTE PTR ds:0xc00257e0,0x0
c0014355:	5a                   	pop    edx
c0014356:	53                   	push   ebx
c0014357:	68 99 42 02 c0       	push   0xc0024299
c001435c:	e8 12 87 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0014361:	59                   	pop    ecx
c0014362:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014367:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001436d:	e8 5f 64 ff ff       	call   c000a7d1 <setActiveTerminal(VgaText*)>
c0014372:	83 c4 0c             	add    esp,0xc
c0014375:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001437a:	6a 01                	push   0x1
c001437c:	6a 0f                	push   0xf
c001437e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014384:	e8 a7 62 ff ff       	call   c000a630 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014389:	58                   	pop    eax
c001438a:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001438f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014395:	e8 b8 67 ff ff       	call   c000ab52 <VgaText::clearScreen()>
c001439a:	58                   	pop    eax
c001439b:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00143a0:	5a                   	pop    edx
c00143a1:	68 b2 42 02 c0       	push   0xc00242b2
c00143a6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143ac:	e8 2d 69 ff ff       	call   c000acde <VgaText::puts(char const*)>
c00143b1:	59                   	pop    ecx
c00143b2:	58                   	pop    eax
c00143b3:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00143b8:	68 58 43 02 c0       	push   0xc0024358
c00143bd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143c3:	e8 16 69 ff ff       	call   c000acde <VgaText::puts(char const*)>
c00143c8:	58                   	pop    eax
c00143c9:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00143ce:	5a                   	pop    edx
c00143cf:	68 ce 42 02 c0       	push   0xc00242ce
c00143d4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143da:	e8 ff 68 ff ff       	call   c000acde <VgaText::puts(char const*)>
c00143df:	59                   	pop    ecx
c00143e0:	58                   	pop    eax
c00143e1:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00143e6:	53                   	push   ebx
c00143e7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143ed:	e8 ec 68 ff ff       	call   c000acde <VgaText::puts(char const*)>
c00143f2:	58                   	pop    eax
c00143f3:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00143f8:	5a                   	pop    edx
c00143f9:	68 ee 42 02 c0       	push   0xc00242ee
c00143fe:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014404:	e8 d5 68 ff ff       	call   c000acde <VgaText::puts(char const*)>
c0014409:	a1 e0 6e 02 c0       	mov    eax,ds:0xc0026ee0
c001440e:	83 c4 10             	add    esp,0x10
c0014411:	85 c0                	test   eax,eax
c0014413:	74 02                	je     c0014417 <Krnl::panic(char const*)+0xe2>
c0014415:	ff d0                	call   eax
c0014417:	83 ec 0c             	sub    esp,0xc
c001441a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001441d:	e8 af 30 00 00       	call   c00174d1 <Thr::getDriverNameFromAddress(unsigned long)>
c0014422:	83 c4 10             	add    esp,0x10
c0014425:	89 c3                	mov    ebx,eax
c0014427:	85 c0                	test   eax,eax
c0014429:	0f 84 4e 02 00 00    	je     c001467d <Krnl::panic(char const*)+0x348>
c001442f:	83 ec 08             	sub    esp,0x8
c0014432:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014437:	68 94 43 02 c0       	push   0xc0024394
c001443c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014442:	e8 97 68 ff ff       	call   c000acde <VgaText::puts(char const*)>
c0014447:	58                   	pop    eax
c0014448:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001444d:	5a                   	pop    edx
c001444e:	68 ce 42 02 c0       	push   0xc00242ce
c0014453:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014459:	e8 80 68 ff ff       	call   c000acde <VgaText::puts(char const*)>
c001445e:	59                   	pop    ecx
c001445f:	58                   	pop    eax
c0014460:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014465:	53                   	push   ebx
c0014466:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001446c:	e8 6d 68 ff ff       	call   c000acde <VgaText::puts(char const*)>
c0014471:	83 c4 10             	add    esp,0x10
c0014474:	83 ec 08             	sub    esp,0x8
c0014477:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001447c:	68 ed 42 02 c0       	push   0xc00242ed
c0014481:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014487:	e8 52 68 ff ff       	call   c000acde <VgaText::puts(char const*)>
c001448c:	58                   	pop    eax
c001448d:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014492:	5a                   	pop    edx
c0014493:	68 ec 43 02 c0       	push   0xc00243ec
c0014498:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001449e:	e8 3b 68 ff ff       	call   c000acde <VgaText::puts(char const*)>
c00144a3:	59                   	pop    ecx
c00144a4:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00144a9:	5b                   	pop    ebx
c00144aa:	68 2c 44 02 c0       	push   0xc002442c
c00144af:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144b5:	e8 24 68 ff ff       	call   c000acde <VgaText::puts(char const*)>
c00144ba:	58                   	pop    eax
c00144bb:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00144c0:	5a                   	pop    edx
c00144c1:	68 d9 42 02 c0       	push   0xc00242d9
c00144c6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144cc:	e8 0d 68 ff ff       	call   c000acde <VgaText::puts(char const*)>
c00144d1:	59                   	pop    ecx
c00144d2:	5b                   	pop    ebx
c00144d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00144d6:	68 f1 42 02 c0       	push   0xc00242f1
c00144db:	e8 93 85 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c00144e0:	58                   	pop    eax
c00144e1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144e4:	5a                   	pop    edx
c00144e5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144e8:	68 fa 42 02 c0       	push   0xc00242fa
c00144ed:	e8 81 85 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c00144f2:	59                   	pop    ecx
c00144f3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144f6:	5b                   	pop    ebx
c00144f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00144f9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144fc:	68 03 43 02 c0       	push   0xc0024303
c0014501:	e8 6d 85 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0014506:	58                   	pop    eax
c0014507:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001450c:	5a                   	pop    edx
c001450d:	68 70 44 02 c0       	push   0xc0024470
c0014512:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014518:	e8 c1 67 ff ff       	call   c000acde <VgaText::puts(char const*)>
c001451d:	59                   	pop    ecx
c001451e:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014523:	5b                   	pop    ebx
c0014524:	68 0c 43 02 c0       	push   0xc002430c
c0014529:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001452f:	e8 aa 67 ff ff       	call   c000acde <VgaText::puts(char const*)>
c0014534:	0f 20 c0             	mov    eax,cr0
c0014537:	5a                   	pop    edx
c0014538:	59                   	pop    ecx
c0014539:	50                   	push   eax
c001453a:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001453f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014545:	e8 4e 67 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c001454a:	5b                   	pop    ebx
c001454b:	58                   	pop    eax
c001454c:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014551:	68 16 43 02 c0       	push   0xc0024316
c0014556:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001455c:	e8 7d 67 ff ff       	call   c000acde <VgaText::puts(char const*)>
c0014561:	0f 20 d0             	mov    eax,cr2
c0014564:	5a                   	pop    edx
c0014565:	59                   	pop    ecx
c0014566:	50                   	push   eax
c0014567:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001456c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014572:	e8 21 67 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c0014577:	5b                   	pop    ebx
c0014578:	58                   	pop    eax
c0014579:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001457e:	68 20 43 02 c0       	push   0xc0024320
c0014583:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014589:	e8 50 67 ff ff       	call   c000acde <VgaText::puts(char const*)>
c001458e:	0f 20 d8             	mov    eax,cr3
c0014591:	5a                   	pop    edx
c0014592:	59                   	pop    ecx
c0014593:	50                   	push   eax
c0014594:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014599:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001459f:	e8 f4 66 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c00145a4:	5b                   	pop    ebx
c00145a5:	58                   	pop    eax
c00145a6:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00145ab:	68 33 43 02 c0       	push   0xc0024333
c00145b0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145b6:	e8 23 67 ff ff       	call   c000acde <VgaText::puts(char const*)>
c00145bb:	0f 20 e0             	mov    eax,cr4
c00145be:	5a                   	pop    edx
c00145bf:	59                   	pop    ecx
c00145c0:	50                   	push   eax
c00145c1:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00145c6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145cc:	e8 c7 66 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c00145d1:	5b                   	pop    ebx
c00145d2:	58                   	pop    eax
c00145d3:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00145d8:	68 3d 43 02 c0       	push   0xc002433d
c00145dd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145e3:	e8 f6 66 ff ff       	call   c000acde <VgaText::puts(char const*)>
c00145e8:	5a                   	pop    edx
c00145e9:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00145ee:	59                   	pop    ecx
c00145ef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00145f5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00145f8:	50                   	push   eax
c00145f9:	e8 9a 66 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c00145fe:	5b                   	pop    ebx
c00145ff:	58                   	pop    eax
c0014600:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014605:	68 54 43 02 c0       	push   0xc0024354
c001460a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014610:	e8 c9 66 ff ff       	call   c000acde <VgaText::puts(char const*)>
c0014615:	5a                   	pop    edx
c0014616:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001461b:	59                   	pop    ecx
c001461c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014622:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014625:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014628:	50                   	push   eax
c0014629:	e8 6a 66 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c001462e:	5b                   	pop    ebx
c001462f:	58                   	pop    eax
c0014630:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014635:	68 54 43 02 c0       	push   0xc0024354
c001463a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014640:	e8 99 66 ff ff       	call   c000acde <VgaText::puts(char const*)>
c0014645:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001464a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001464d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014653:	8b 12                	mov    edx,DWORD PTR [edx]
c0014655:	59                   	pop    ecx
c0014656:	5b                   	pop    ebx
c0014657:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001465a:	50                   	push   eax
c001465b:	e8 38 66 ff ff       	call   c000ac98 <VgaText::putx(unsigned int)>
c0014660:	83 c4 10             	add    esp,0x10
c0014663:	b2 fe                	mov    dl,0xfe
c0014665:	e4 60                	in     al,0x60
c0014667:	3c 1c                	cmp    al,0x1c
c0014669:	74 04                	je     c001466f <Krnl::panic(char const*)+0x33a>
c001466b:	3c 5a                	cmp    al,0x5a
c001466d:	75 f6                	jne    c0014665 <Krnl::panic(char const*)+0x330>
c001466f:	e4 64                	in     al,0x64
c0014671:	a8 02                	test   al,0x2
c0014673:	75 fa                	jne    c001466f <Krnl::panic(char const*)+0x33a>
c0014675:	88 d0                	mov    al,dl
c0014677:	e6 64                	out    0x64,al
c0014679:	fa                   	cli    
c001467a:	f4                   	hlt    
c001467b:	eb e8                	jmp    c0014665 <Krnl::panic(char const*)+0x330>
c001467d:	50                   	push   eax
c001467e:	50                   	push   eax
c001467f:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0014684:	68 c0 43 02 c0       	push   0xc00243c0
c0014689:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001468f:	e8 4a 66 ff ff       	call   c000acde <VgaText::puts(char const*)>
c0014694:	58                   	pop    eax
c0014695:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001469a:	5a                   	pop    edx
c001469b:	68 ce 42 02 c0       	push   0xc00242ce
c00146a0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00146a6:	e8 33 66 ff ff       	call   c000acde <VgaText::puts(char const*)>
c00146ab:	59                   	pop    ecx
c00146ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146b1:	5b                   	pop    ebx
c00146b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00146b5:	83 c0 0c             	add    eax,0xc
c00146b8:	50                   	push   eax
c00146b9:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c00146be:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00146c4:	e8 15 66 ff ff       	call   c000acde <VgaText::puts(char const*)>
c00146c9:	83 c4 10             	add    esp,0x10
c00146cc:	e9 a3 fd ff ff       	jmp    c0014474 <Krnl::panic(char const*)+0x13f>
c00146d1:	66 90                	xchg   ax,ax
c00146d3:	90                   	nop

c00146d4 <Net::switchEndian16(unsigned short)>:
c00146d4:	83 ec 04             	sub    esp,0x4
c00146d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00146db:	66 89 04 24          	mov    WORD PTR [esp],ax
c00146df:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00146e3:	c1 f8 08             	sar    eax,0x8
c00146e6:	89 c2                	mov    edx,eax
c00146e8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00146ec:	c1 e0 08             	shl    eax,0x8
c00146ef:	09 d0                	or     eax,edx
c00146f1:	83 c4 04             	add    esp,0x4
c00146f4:	c3                   	ret    
c00146f5:	8d 76 00             	lea    esi,[esi+0x0]

c00146f8 <Net::switchEndian32(unsigned int)>:
c00146f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146fc:	c1 e8 18             	shr    eax,0x18
c00146ff:	89 c2                	mov    edx,eax
c0014701:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014705:	c1 e0 08             	shl    eax,0x8
c0014708:	25 00 00 ff 00       	and    eax,0xff0000
c001470d:	09 c2                	or     edx,eax
c001470f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014713:	c1 e8 08             	shr    eax,0x8
c0014716:	25 00 ff 00 00       	and    eax,0xff00
c001471b:	09 c2                	or     edx,eax
c001471d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014721:	c1 e0 18             	shl    eax,0x18
c0014724:	09 d0                	or     eax,edx
c0014726:	c3                   	ret    
c0014727:	90                   	nop

c0014728 <Net::crc32Calc(unsigned char*, int)>:
c0014728:	83 ec 10             	sub    esp,0x10
c001472b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014730:	75 0a                	jne    c001473c <Net::crc32Calc(unsigned char*, int)+0x14>
c0014732:	b8 00 00 00 00       	mov    eax,0x0
c0014737:	e9 8c 00 00 00       	jmp    c00147c8 <Net::crc32Calc(unsigned char*, int)+0xa0>
c001473c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014741:	7f 09                	jg     c001474c <Net::crc32Calc(unsigned char*, int)+0x24>
c0014743:	b8 00 00 00 00       	mov    eax,0x0
c0014748:	eb 7e                	jmp    c00147c8 <Net::crc32Calc(unsigned char*, int)+0xa0>
c001474a:	66 90                	xchg   ax,ax
c001474c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0014754:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001475c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014760:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0014764:	7d 5a                	jge    c00147c0 <Net::crc32Calc(unsigned char*, int)+0x98>
c0014766:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001476a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001476e:	01 d0                	add    eax,edx
c0014770:	8a 00                	mov    al,BYTE PTR [eax]
c0014772:	0f b6 c0             	movzx  eax,al
c0014775:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0014779:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014781:	8d 76 00             	lea    esi,[esi+0x0]
c0014784:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0014789:	7f 2d                	jg     c00147b8 <Net::crc32Calc(unsigned char*, int)+0x90>
c001478b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001478f:	83 e0 01             	and    eax,0x1
c0014792:	74 10                	je     c00147a4 <Net::crc32Calc(unsigned char*, int)+0x7c>
c0014794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014798:	d1 e8                	shr    eax,1
c001479a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001479f:	eb 0b                	jmp    c00147ac <Net::crc32Calc(unsigned char*, int)+0x84>
c00147a1:	8d 76 00             	lea    esi,[esi+0x0]
c00147a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147a8:	d1 e8                	shr    eax,1
c00147aa:	66 90                	xchg   ax,ax
c00147ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147b0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00147b4:	eb ce                	jmp    c0014784 <Net::crc32Calc(unsigned char*, int)+0x5c>
c00147b6:	66 90                	xchg   ax,ax
c00147b8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00147bc:	eb 9e                	jmp    c001475c <Net::crc32Calc(unsigned char*, int)+0x34>
c00147be:	66 90                	xchg   ax,ax
c00147c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147c4:	f7 d0                	not    eax
c00147c6:	66 90                	xchg   ax,ax
c00147c8:	83 c4 10             	add    esp,0x10
c00147cb:	c3                   	ret    

c00147cc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c00147cc:	57                   	push   edi
c00147cd:	56                   	push   esi
c00147ce:	53                   	push   ebx
c00147cf:	83 ec 60             	sub    esp,0x60
c00147d2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147d9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00147dd:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00147e5:	8d 76 00             	lea    esi,[esi+0x0]
c00147e8:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c00147ed:	7f 1d                	jg     c001480c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c00147ef:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147f6:	8d 50 01             	lea    edx,[eax+0x1]
c00147f9:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014800:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0014803:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0014807:	eb df                	jmp    c00147e8 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0014809:	8d 76 00             	lea    esi,[esi+0x0]
c001480c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014813:	8d 50 01             	lea    edx,[eax+0x1]
c0014816:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001481d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0014820:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014827:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001482b:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001482f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014833:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001483b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001483f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014843:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014847:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001484b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001484f:	89 c6                	mov    esi,eax
c0014851:	89 d7                	mov    edi,edx
c0014853:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014855:	89 c8                	mov    eax,ecx
c0014857:	89 fa                	mov    edx,edi
c0014859:	89 f3                	mov    ebx,esi
c001485b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001485f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014863:	89 04 24             	mov    DWORD PTR [esp],eax
c0014866:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001486e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014875:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014879:	8d 44 24 78          	lea    eax,[esp+0x78]
c001487d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014881:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014889:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001488d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014891:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014895:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014899:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001489d:	89 c6                	mov    esi,eax
c001489f:	89 d7                	mov    edi,edx
c00148a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148a3:	89 c8                	mov    eax,ecx
c00148a5:	89 fa                	mov    edx,edi
c00148a7:	89 f3                	mov    ebx,esi
c00148a9:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00148ad:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00148b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148b5:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00148bd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00148c4:	0f b7 c0             	movzx  eax,ax
c00148c7:	c1 f8 08             	sar    eax,0x8
c00148ca:	89 c1                	mov    ecx,eax
c00148cc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148d3:	8d 50 01             	lea    edx,[eax+0x1]
c00148d6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00148dd:	88 ca                	mov    dl,cl
c00148df:	88 10                	mov    BYTE PTR [eax],dl
c00148e1:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00148e8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148ef:	8d 48 01             	lea    ecx,[eax+0x1]
c00148f2:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c00148f9:	88 10                	mov    BYTE PTR [eax],dl
c00148fb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00148ff:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0014903:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001490a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001490e:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0014912:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0014916:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001491a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001491e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014922:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014926:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001492a:	89 c6                	mov    esi,eax
c001492c:	89 d7                	mov    edi,edx
c001492e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014930:	89 c8                	mov    eax,ecx
c0014932:	89 fa                	mov    edx,edi
c0014934:	89 f3                	mov    ebx,esi
c0014936:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001493a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001493e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014942:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014946:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001494d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014954:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c0014958:	50                   	push   eax
c0014959:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001495d:	e8 c6 fd ff ff       	call   c0014728 <Net::crc32Calc(unsigned char*, int)>
c0014962:	83 c4 08             	add    esp,0x8
c0014965:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014969:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001496d:	c1 e8 18             	shr    eax,0x18
c0014970:	89 c1                	mov    ecx,eax
c0014972:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014979:	8d 50 01             	lea    edx,[eax+0x1]
c001497c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014983:	88 ca                	mov    dl,cl
c0014985:	88 10                	mov    BYTE PTR [eax],dl
c0014987:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001498b:	c1 e8 10             	shr    eax,0x10
c001498e:	89 c1                	mov    ecx,eax
c0014990:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014997:	8d 50 01             	lea    edx,[eax+0x1]
c001499a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00149a1:	88 ca                	mov    dl,cl
c00149a3:	88 10                	mov    BYTE PTR [eax],dl
c00149a5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00149a9:	c1 e8 08             	shr    eax,0x8
c00149ac:	89 c1                	mov    ecx,eax
c00149ae:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00149b5:	8d 50 01             	lea    edx,[eax+0x1]
c00149b8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00149bf:	88 ca                	mov    dl,cl
c00149c1:	88 10                	mov    BYTE PTR [eax],dl
c00149c3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00149ca:	8d 50 01             	lea    edx,[eax+0x1]
c00149cd:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00149d4:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00149d8:	88 10                	mov    BYTE PTR [eax],dl
c00149da:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00149de:	83 c4 60             	add    esp,0x60
c00149e1:	5b                   	pop    ebx
c00149e2:	5e                   	pop    esi
c00149e3:	5f                   	pop    edi
c00149e4:	c3                   	ret    
c00149e5:	8d 76 00             	lea    esi,[esi+0x0]

c00149e8 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c00149e8:	57                   	push   edi
c00149e9:	56                   	push   esi
c00149ea:	53                   	push   ebx
c00149eb:	83 ec 70             	sub    esp,0x70
c00149ee:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00149f5:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00149f9:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0014a01:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014a08:	83 c0 0e             	add    eax,0xe
c0014a0b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014a0f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a16:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014a1a:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014a22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014a26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014a2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a2e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a32:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014a36:	89 c6                	mov    esi,eax
c0014a38:	89 d7                	mov    edi,edx
c0014a3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a3c:	89 c8                	mov    eax,ecx
c0014a3e:	89 fa                	mov    edx,edi
c0014a40:	89 f3                	mov    ebx,esi
c0014a42:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014a46:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014a4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a4e:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014a56:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014a5d:	83 c0 08             	add    eax,0x8
c0014a60:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0014a64:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a6b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0014a6f:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0014a77:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014a7b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014a7f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014a83:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014a87:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014a8b:	89 c6                	mov    esi,eax
c0014a8d:	89 d7                	mov    edi,edx
c0014a8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a91:	89 c8                	mov    eax,ecx
c0014a93:	89 fa                	mov    edx,edi
c0014a95:	89 f3                	mov    ebx,esi
c0014a97:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014a9b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014a9f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014aa3:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014aab:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014ab2:	8d 50 01             	lea    edx,[eax+0x1]
c0014ab5:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014abc:	8a 00                	mov    al,BYTE PTR [eax]
c0014abe:	0f b6 c0             	movzx  eax,al
c0014ac1:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0014ac6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014acd:	8d 50 01             	lea    edx,[eax+0x1]
c0014ad0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014ad7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ad9:	0f b6 c0             	movzx  eax,al
c0014adc:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0014ae1:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0014ae6:	c1 e0 08             	shl    eax,0x8
c0014ae9:	89 c2                	mov    edx,eax
c0014aeb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0014aef:	09 d0                	or     eax,edx
c0014af1:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014af8:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0014afc:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0014b04:	75 46                	jne    c0014b4c <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014b06:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b0d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014b10:	66 3d dc 05          	cmp    ax,0x5dc
c0014b14:	77 16                	ja     c0014b2c <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0014b16:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b1d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014b20:	0f b7 c0             	movzx  eax,ax
c0014b23:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0014b2a:	eb 20                	jmp    c0014b4c <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014b2c:	83 ec 0c             	sub    esp,0xc
c0014b2f:	68 98 44 02 c0       	push   0xc0024498
c0014b34:	e8 3a 7f ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0014b39:	83 c4 10             	add    esp,0x10
c0014b3c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b43:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0014b47:	e9 18 01 00 00       	jmp    c0014c64 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0014b4c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014b53:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014b5a:	8b 12                	mov    edx,DWORD PTR [edx]
c0014b5c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014b60:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014b67:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014b6b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b7b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b7f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014b83:	89 c6                	mov    esi,eax
c0014b85:	89 d7                	mov    edi,edx
c0014b87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b89:	89 c8                	mov    eax,ecx
c0014b8b:	89 fa                	mov    edx,edi
c0014b8d:	89 f3                	mov    ebx,esi
c0014b8f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014b93:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014b97:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b9a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014ba1:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0014ba8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014baf:	8d 50 01             	lea    edx,[eax+0x1]
c0014bb2:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bb9:	8a 00                	mov    al,BYTE PTR [eax]
c0014bbb:	0f b6 c0             	movzx  eax,al
c0014bbe:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0014bc2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bc9:	8d 50 01             	lea    edx,[eax+0x1]
c0014bcc:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bd3:	8a 00                	mov    al,BYTE PTR [eax]
c0014bd5:	0f b6 c0             	movzx  eax,al
c0014bd8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0014bdc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014be3:	8d 50 01             	lea    edx,[eax+0x1]
c0014be6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bed:	8a 00                	mov    al,BYTE PTR [eax]
c0014bef:	0f b6 c0             	movzx  eax,al
c0014bf2:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0014bf6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bfd:	8d 50 01             	lea    edx,[eax+0x1]
c0014c00:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014c07:	8a 00                	mov    al,BYTE PTR [eax]
c0014c09:	0f b6 c0             	movzx  eax,al
c0014c0c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014c10:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0014c14:	c1 e0 18             	shl    eax,0x18
c0014c17:	89 c2                	mov    edx,eax
c0014c19:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0014c1d:	c1 e0 10             	shl    eax,0x10
c0014c20:	09 c2                	or     edx,eax
c0014c22:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0014c26:	c1 e0 08             	shl    eax,0x8
c0014c29:	09 d0                	or     eax,edx
c0014c2b:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0014c2f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014c33:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c3a:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0014c3e:	83 e8 04             	sub    eax,0x4
c0014c41:	83 ec 08             	sub    esp,0x8
c0014c44:	50                   	push   eax
c0014c45:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014c49:	e8 da fa ff ff       	call   c0014728 <Net::crc32Calc(unsigned char*, int)>
c0014c4e:	83 c4 10             	add    esp,0x10
c0014c51:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0014c55:	0f 94 c2             	sete   dl
c0014c58:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c5f:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0014c62:	90                   	nop
c0014c63:	90                   	nop
c0014c64:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c6b:	83 c4 70             	add    esp,0x70
c0014c6e:	5b                   	pop    ebx
c0014c6f:	5e                   	pop    esi
c0014c70:	5f                   	pop    edi
c0014c71:	c2 04 00             	ret    0x4

c0014c74 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014c74:	55                   	push   ebp
c0014c75:	57                   	push   edi
c0014c76:	56                   	push   esi
c0014c77:	53                   	push   ebx
c0014c78:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014c7e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014c85:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014c87:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014c8a:	80 fb 40             	cmp    bl,0x40
c0014c8d:	75 1b                	jne    c0014caa <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014c8f:	8a 16                	mov    dl,BYTE PTR [esi]
c0014c91:	84 d2                	test   dl,dl
c0014c93:	0f 84 f1 00 00 00    	je     c0014d8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014c99:	8d 46 01             	lea    eax,[esi+0x1]
c0014c9c:	80 fa 3a             	cmp    dl,0x3a
c0014c9f:	74 04                	je     c0014ca5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014ca1:	89 c6                	mov    esi,eax
c0014ca3:	eb ea                	jmp    c0014c8f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014ca5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014ca8:	89 c6                	mov    esi,eax
c0014caa:	50                   	push   eax
c0014cab:	6a 40                	push   0x40
c0014cad:	6a 00                	push   0x0
c0014caf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014cb3:	50                   	push   eax
c0014cb4:	e8 cb b9 fe ff       	call   c0000684 <memset>
c0014cb9:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014cc0:	31 c0                	xor    eax,eax
c0014cc2:	83 c4 10             	add    esp,0x10
c0014cc5:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014cc7:	84 c9                	test   cl,cl
c0014cc9:	0f 84 bb 00 00 00    	je     c0014d8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014ccf:	3d c7 00 00 00       	cmp    eax,0xc7
c0014cd4:	0f 8f b0 00 00 00    	jg     c0014d8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014cda:	80 f9 0a             	cmp    cl,0xa
c0014cdd:	0f 85 98 00 00 00    	jne    c0014d7b <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014ce3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014ce8:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014cec:	a8 df                	test   al,0xdf
c0014cee:	0f 94 c1             	sete   cl
c0014cf1:	3c 23                	cmp    al,0x23
c0014cf3:	0f 94 c2             	sete   dl
c0014cf6:	08 d1                	or     cl,dl
c0014cf8:	75 4a                	jne    c0014d44 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cfa:	8d 50 f7             	lea    edx,[eax-0x9]
c0014cfd:	80 fa 01             	cmp    dl,0x1
c0014d00:	76 42                	jbe    c0014d44 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d02:	3c 5b                	cmp    al,0x5b
c0014d04:	75 42                	jne    c0014d48 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014d06:	80 fb 40             	cmp    bl,0x40
c0014d09:	75 39                	jne    c0014d44 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d0b:	83 ec 0c             	sub    esp,0xc
c0014d0e:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014d12:	52                   	push   edx
c0014d13:	e8 88 b9 fe ff       	call   c00006a0 <strlen>
c0014d18:	83 c4 10             	add    esp,0x10
c0014d1b:	83 f8 3f             	cmp    eax,0x3f
c0014d1e:	77 6a                	ja     c0014d8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d20:	50                   	push   eax
c0014d21:	50                   	push   eax
c0014d22:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014d26:	52                   	push   edx
c0014d27:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d2b:	52                   	push   edx
c0014d2c:	e8 0f ba fe ff       	call   c0000740 <strcpy>
c0014d31:	58                   	pop    eax
c0014d32:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d36:	52                   	push   edx
c0014d37:	e8 64 b9 fe ff       	call   c00006a0 <strlen>
c0014d3c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014d41:	83 c4 10             	add    esp,0x10
c0014d44:	31 d2                	xor    edx,edx
c0014d46:	eb 3a                	jmp    c0014d82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014d48:	80 fb 40             	cmp    bl,0x40
c0014d4b:	74 06                	je     c0014d53 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014d4d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014d51:	eb 20                	jmp    c0014d73 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014d53:	50                   	push   eax
c0014d54:	50                   	push   eax
c0014d55:	55                   	push   ebp
c0014d56:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014d5a:	50                   	push   eax
c0014d5b:	e8 6c ba fe ff       	call   c00007cc <strcmp>
c0014d60:	83 c4 10             	add    esp,0x10
c0014d63:	85 c0                	test   eax,eax
c0014d65:	75 dd                	jne    c0014d44 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d67:	eb e4                	jmp    c0014d4d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014d69:	8d 50 01             	lea    edx,[eax+0x1]
c0014d6c:	80 f9 3d             	cmp    cl,0x3d
c0014d6f:	74 1d                	je     c0014d8e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014d71:	89 d0                	mov    eax,edx
c0014d73:	8a 08                	mov    cl,BYTE PTR [eax]
c0014d75:	84 c9                	test   cl,cl
c0014d77:	75 f0                	jne    c0014d69 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014d79:	eb 0f                	jmp    c0014d8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d7b:	8d 50 01             	lea    edx,[eax+0x1]
c0014d7e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014d82:	47                   	inc    edi
c0014d83:	89 d0                	mov    eax,edx
c0014d85:	e9 3b ff ff ff       	jmp    c0014cc5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014d8a:	31 c0                	xor    eax,eax
c0014d8c:	eb 33                	jmp    c0014dc1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014d8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014d92:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014d95:	50                   	push   eax
c0014d96:	50                   	push   eax
c0014d97:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014d9b:	50                   	push   eax
c0014d9c:	56                   	push   esi
c0014d9d:	e8 2a ba fe ff       	call   c00007cc <strcmp>
c0014da2:	83 c4 10             	add    esp,0x10
c0014da5:	85 c0                	test   eax,eax
c0014da7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014dab:	75 97                	jne    c0014d44 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014dad:	51                   	push   ecx
c0014dae:	51                   	push   ecx
c0014daf:	52                   	push   edx
c0014db0:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014db7:	e8 84 b9 fe ff       	call   c0000740 <strcpy>
c0014dbc:	83 c4 10             	add    esp,0x10
c0014dbf:	b0 01                	mov    al,0x1
c0014dc1:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014dc7:	5b                   	pop    ebx
c0014dc8:	5e                   	pop    esi
c0014dc9:	5f                   	pop    edi
c0014dca:	5d                   	pop    ebp
c0014dcb:	c3                   	ret    

c0014dcc <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014dcc:	57                   	push   edi
c0014dcd:	56                   	push   esi
c0014dce:	53                   	push   ebx
c0014dcf:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014dd5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0014ddc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0014de3:	53                   	push   ebx
c0014de4:	e8 b7 b8 fe ff       	call   c00006a0 <strlen>
c0014de9:	89 34 24             	mov    DWORD PTR [esp],esi
c0014dec:	89 c7                	mov    edi,eax
c0014dee:	e8 ad b8 fe ff       	call   c00006a0 <strlen>
c0014df3:	83 c4 10             	add    esp,0x10
c0014df6:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014dfa:	3d ff 00 00 00       	cmp    eax,0xff
c0014dff:	0f 87 d3 00 00 00    	ja     c0014ed8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014e05:	57                   	push   edi
c0014e06:	57                   	push   edi
c0014e07:	56                   	push   esi
c0014e08:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014e0c:	56                   	push   esi
c0014e0d:	e8 2e b9 fe ff       	call   c0000740 <strcpy>
c0014e12:	58                   	pop    eax
c0014e13:	5a                   	pop    edx
c0014e14:	68 3a 48 02 c0       	push   0xc002483a
c0014e19:	56                   	push   esi
c0014e1a:	e8 61 ba fe ff       	call   c0000880 <strcat>
c0014e1f:	59                   	pop    ecx
c0014e20:	5f                   	pop    edi
c0014e21:	53                   	push   ebx
c0014e22:	56                   	push   esi
c0014e23:	e8 58 ba fe ff       	call   c0000880 <strcat>
c0014e28:	58                   	pop    eax
c0014e29:	5a                   	pop    edx
c0014e2a:	68 e4 44 02 c0       	push   0xc00244e4
c0014e2f:	56                   	push   esi
c0014e30:	e8 4b ba fe ff       	call   c0000880 <strcat>
c0014e35:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014e3c:	e8 82 4b ff ff       	call   c00099c3 <malloc>
c0014e41:	83 c4 0c             	add    esp,0xc
c0014e44:	89 c3                	mov    ebx,eax
c0014e46:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0014e4c:	56                   	push   esi
c0014e4d:	50                   	push   eax
c0014e4e:	e8 8b 81 ff ff       	call   c000cfde <File::File(char const*, Process*)>
c0014e53:	83 c4 10             	add    esp,0x10
c0014e56:	85 db                	test   ebx,ebx
c0014e58:	74 7e                	je     c0014ed8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014e5a:	51                   	push   ecx
c0014e5b:	51                   	push   ecx
c0014e5c:	6a 01                	push   0x1
c0014e5e:	53                   	push   ebx
c0014e5f:	e8 de 81 ff ff       	call   c000d042 <File::open(FileOpenMode)>
c0014e64:	83 c4 10             	add    esp,0x10
c0014e67:	85 c0                	test   eax,eax
c0014e69:	74 08                	je     c0014e73 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0014e6b:	83 ec 0c             	sub    esp,0xc
c0014e6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e70:	53                   	push   ebx
c0014e71:	eb 5f                	jmp    c0014ed2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014e73:	52                   	push   edx
c0014e74:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014e78:	50                   	push   eax
c0014e79:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014e7d:	50                   	push   eax
c0014e7e:	53                   	push   ebx
c0014e7f:	e8 6a 84 ff ff       	call   c000d2ee <File::stat(unsigned long long*, bool*)>
c0014e84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e88:	83 c4 10             	add    esp,0x10
c0014e8b:	89 c1                	mov    ecx,eax
c0014e8d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0014e91:	74 31                	je     c0014ec4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014e93:	83 ec 0c             	sub    esp,0xc
c0014e96:	50                   	push   eax
c0014e97:	e8 27 4b ff ff       	call   c00099c3 <malloc>
c0014e9c:	89 c6                	mov    esi,eax
c0014e9e:	58                   	pop    eax
c0014e9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ea1:	8d 54 24 20          	lea    edx,[esp+0x20]
c0014ea5:	52                   	push   edx
c0014ea6:	56                   	push   esi
c0014ea7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014eab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014eaf:	53                   	push   ebx
c0014eb0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014eb3:	83 c4 20             	add    esp,0x20
c0014eb6:	85 c0                	test   eax,eax
c0014eb8:	75 0a                	jne    c0014ec4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014eba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ebe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0014ec2:	74 18                	je     c0014edc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0014ec4:	83 ec 0c             	sub    esp,0xc
c0014ec7:	53                   	push   ebx
c0014ec8:	e8 d3 81 ff ff       	call   c000d0a0 <File::close()>
c0014ecd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ecf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ed2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ed5:	83 c4 10             	add    esp,0x10
c0014ed8:	31 c0                	xor    eax,eax
c0014eda:	eb 3b                	jmp    c0014f17 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0014edc:	83 ec 0c             	sub    esp,0xc
c0014edf:	53                   	push   ebx
c0014ee0:	e8 bb 81 ff ff       	call   c000d0a0 <File::close()>
c0014ee5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ee7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014eea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014eed:	83 c4 0c             	add    esp,0xc
c0014ef0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014ef7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014efe:	56                   	push   esi
c0014eff:	e8 70 fd ff ff       	call   c0014c74 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014f04:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f07:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014f0b:	e8 c3 4a ff ff       	call   c00099d3 <free>
c0014f10:	83 c4 10             	add    esp,0x10
c0014f13:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014f17:	81 c4 20 01 00 00    	add    esp,0x120
c0014f1d:	5b                   	pop    ebx
c0014f1e:	5e                   	pop    esi
c0014f1f:	5f                   	pop    edi
c0014f20:	c3                   	ret    

c0014f21 <Reg::getLine(char*, char*, char*)>:
c0014f21:	57                   	push   edi
c0014f22:	56                   	push   esi
c0014f23:	53                   	push   ebx
c0014f24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f28:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014f2c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014f30:	57                   	push   edi
c0014f31:	56                   	push   esi
c0014f32:	53                   	push   ebx
c0014f33:	68 e9 44 02 c0       	push   0xc00244e9
c0014f38:	e8 8f fe ff ff       	call   c0014dcc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f3d:	83 c4 10             	add    esp,0x10
c0014f40:	84 c0                	test   al,al
c0014f42:	75 10                	jne    c0014f54 <Reg::getLine(char*, char*, char*)+0x33>
c0014f44:	57                   	push   edi
c0014f45:	56                   	push   esi
c0014f46:	53                   	push   ebx
c0014f47:	68 0e 45 02 c0       	push   0xc002450e
c0014f4c:	e8 7b fe ff ff       	call   c0014dcc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f51:	83 c4 10             	add    esp,0x10
c0014f54:	5b                   	pop    ebx
c0014f55:	5e                   	pop    esi
c0014f56:	5f                   	pop    edi
c0014f57:	c3                   	ret    

c0014f58 <Reg::readInt(char*, char*, int*)>:
c0014f58:	55                   	push   ebp
c0014f59:	57                   	push   edi
c0014f5a:	56                   	push   esi
c0014f5b:	53                   	push   ebx
c0014f5c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0014f62:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0014f66:	57                   	push   edi
c0014f67:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f6e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f75:	e8 a7 ff ff ff       	call   c0014f21 <Reg::getLine(char*, char*, char*)>
c0014f7a:	83 c4 10             	add    esp,0x10
c0014f7d:	84 c0                	test   al,al
c0014f7f:	0f 84 b3 00 00 00    	je     c0015038 <Reg::readInt(char*, char*, int*)+0xe0>
c0014f85:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0014f89:	80 fa 2b             	cmp    dl,0x2b
c0014f8c:	74 0c                	je     c0014f9a <Reg::readInt(char*, char*, int*)+0x42>
c0014f8e:	80 fa 2d             	cmp    dl,0x2d
c0014f91:	75 0e                	jne    c0014fa1 <Reg::readInt(char*, char*, int*)+0x49>
c0014f93:	ba 01 00 00 00       	mov    edx,0x1
c0014f98:	eb 0b                	jmp    c0014fa5 <Reg::readInt(char*, char*, int*)+0x4d>
c0014f9a:	ba 01 00 00 00       	mov    edx,0x1
c0014f9f:	eb 02                	jmp    c0014fa3 <Reg::readInt(char*, char*, int*)+0x4b>
c0014fa1:	31 d2                	xor    edx,edx
c0014fa3:	31 c0                	xor    eax,eax
c0014fa5:	be 0a 00 00 00       	mov    esi,0xa
c0014faa:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0014faf:	75 20                	jne    c0014fd1 <Reg::readInt(char*, char*, int*)+0x79>
c0014fb1:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0014fb5:	80 f9 78             	cmp    cl,0x78
c0014fb8:	75 0a                	jne    c0014fc4 <Reg::readInt(char*, char*, int*)+0x6c>
c0014fba:	83 c2 02             	add    edx,0x2
c0014fbd:	be 10 00 00 00       	mov    esi,0x10
c0014fc2:	eb 0d                	jmp    c0014fd1 <Reg::readInt(char*, char*, int*)+0x79>
c0014fc4:	80 f9 62             	cmp    cl,0x62
c0014fc7:	75 08                	jne    c0014fd1 <Reg::readInt(char*, char*, int*)+0x79>
c0014fc9:	83 c2 02             	add    edx,0x2
c0014fcc:	be 02 00 00 00       	mov    esi,0x2
c0014fd1:	01 d7                	add    edi,edx
c0014fd3:	31 d2                	xor    edx,edx
c0014fd5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0014fd7:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0014fdb:	80 fb 0d             	cmp    bl,0xd
c0014fde:	0f 94 c3             	sete   bl
c0014fe1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014fe6:	0f 94 c1             	sete   cl
c0014fe9:	08 cb                	or     bl,cl
c0014feb:	75 3a                	jne    c0015027 <Reg::readInt(char*, char*, int*)+0xcf>
c0014fed:	0f af d6             	imul   edx,esi
c0014ff0:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0014ff5:	83 fe 10             	cmp    esi,0x10
c0014ff8:	75 26                	jne    c0015020 <Reg::readInt(char*, char*, int*)+0xc8>
c0014ffa:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014ffe:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015001:	89 e9                	mov    ecx,ebp
c0015003:	80 f9 05             	cmp    cl,0x5
c0015006:	77 06                	ja     c001500e <Reg::readInt(char*, char*, int*)+0xb6>
c0015008:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001500c:	eb 16                	jmp    c0015024 <Reg::readInt(char*, char*, int*)+0xcc>
c001500e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015012:	83 e9 61             	sub    ecx,0x61
c0015015:	80 f9 05             	cmp    cl,0x5
c0015018:	77 06                	ja     c0015020 <Reg::readInt(char*, char*, int*)+0xc8>
c001501a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001501e:	eb 04                	jmp    c0015024 <Reg::readInt(char*, char*, int*)+0xcc>
c0015020:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015024:	47                   	inc    edi
c0015025:	eb ae                	jmp    c0014fd5 <Reg::readInt(char*, char*, int*)+0x7d>
c0015027:	84 c0                	test   al,al
c0015029:	74 02                	je     c001502d <Reg::readInt(char*, char*, int*)+0xd5>
c001502b:	f7 da                	neg    edx
c001502d:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015034:	89 10                	mov    DWORD PTR [eax],edx
c0015036:	88 d8                	mov    al,bl
c0015038:	81 c4 ec 00 00 00    	add    esp,0xec
c001503e:	5b                   	pop    ebx
c001503f:	5e                   	pop    esi
c0015040:	5f                   	pop    edi
c0015041:	5d                   	pop    ebp
c0015042:	c3                   	ret    

c0015043 <Reg::readString(char*, char*, char*, int)>:
c0015043:	57                   	push   edi
c0015044:	56                   	push   esi
c0015045:	53                   	push   ebx
c0015046:	81 ec d4 00 00 00    	sub    esp,0xd4
c001504c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015053:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015057:	57                   	push   edi
c0015058:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001505f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015066:	e8 b6 fe ff ff       	call   c0014f21 <Reg::getLine(char*, char*, char*)>
c001506b:	83 c4 10             	add    esp,0x10
c001506e:	89 c6                	mov    esi,eax
c0015070:	84 c0                	test   al,al
c0015072:	74 44                	je     c00150b8 <Reg::readString(char*, char*, char*, int)+0x75>
c0015074:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001507b:	31 c0                	xor    eax,eax
c001507d:	4a                   	dec    edx
c001507e:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015081:	84 c9                	test   cl,cl
c0015083:	74 0f                	je     c0015094 <Reg::readString(char*, char*, char*, int)+0x51>
c0015085:	39 c2                	cmp    edx,eax
c0015087:	7e 0b                	jle    c0015094 <Reg::readString(char*, char*, char*, int)+0x51>
c0015089:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001508c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015091:	40                   	inc    eax
c0015092:	eb ea                	jmp    c001507e <Reg::readString(char*, char*, char*, int)+0x3b>
c0015094:	83 ec 0c             	sub    esp,0xc
c0015097:	53                   	push   ebx
c0015098:	e8 03 b6 fe ff       	call   c00006a0 <strlen>
c001509d:	83 c4 10             	add    esp,0x10
c00150a0:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00150a5:	75 11                	jne    c00150b8 <Reg::readString(char*, char*, char*, int)+0x75>
c00150a7:	83 ec 0c             	sub    esp,0xc
c00150aa:	53                   	push   ebx
c00150ab:	e8 f0 b5 fe ff       	call   c00006a0 <strlen>
c00150b0:	83 c4 10             	add    esp,0x10
c00150b3:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00150b8:	81 c4 d0 00 00 00    	add    esp,0xd0
c00150be:	89 f0                	mov    eax,esi
c00150c0:	5b                   	pop    ebx
c00150c1:	5e                   	pop    esi
c00150c2:	5f                   	pop    edi
c00150c3:	c3                   	ret    

c00150c4 <Reg::readBool(char*, char*, bool*)>:
c00150c4:	83 ec 20             	sub    esp,0x20
c00150c7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00150cb:	50                   	push   eax
c00150cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150d4:	e8 7f fe ff ff       	call   c0014f58 <Reg::readInt(char*, char*, int*)>
c00150d9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00150de:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00150e2:	0f 95 02             	setne  BYTE PTR [edx]
c00150e5:	83 c4 2c             	add    esp,0x2c
c00150e8:	c3                   	ret    

c00150e9 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00150e9:	53                   	push   ebx
c00150ea:	83 ec 1c             	sub    esp,0x1c
c00150ed:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00150f1:	8d 44 24 13          	lea    eax,[esp+0x13]
c00150f5:	50                   	push   eax
c00150f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150fe:	e8 c1 ff ff ff       	call   c00150c4 <Reg::readBool(char*, char*, bool*)>
c0015103:	83 c4 10             	add    esp,0x10
c0015106:	84 c0                	test   al,al
c0015108:	74 04                	je     c001510e <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001510a:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001510e:	88 d8                	mov    al,bl
c0015110:	83 c4 18             	add    esp,0x18
c0015113:	5b                   	pop    ebx
c0015114:	c3                   	ret    

c0015115 <Reg::readIntWithDefault(char*, char*, int)>:
c0015115:	53                   	push   ebx
c0015116:	83 ec 1c             	sub    esp,0x1c
c0015119:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001511d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015121:	50                   	push   eax
c0015122:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015126:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001512a:	e8 29 fe ff ff       	call   c0014f58 <Reg::readInt(char*, char*, int*)>
c001512f:	83 c4 10             	add    esp,0x10
c0015132:	84 c0                	test   al,al
c0015134:	74 04                	je     c001513a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015136:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001513a:	89 d8                	mov    eax,ebx
c001513c:	83 c4 18             	add    esp,0x18
c001513f:	5b                   	pop    ebx
c0015140:	c3                   	ret    

c0015141 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015141:	57                   	push   edi
c0015142:	56                   	push   esi
c0015143:	56                   	push   esi
c0015144:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015148:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001514c:	56                   	push   esi
c001514d:	57                   	push   edi
c001514e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015156:	e8 e8 fe ff ff       	call   c0015043 <Reg::readString(char*, char*, char*, int)>
c001515b:	83 c4 10             	add    esp,0x10
c001515e:	84 c0                	test   al,al
c0015160:	75 1a                	jne    c001517c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015162:	51                   	push   ecx
c0015163:	56                   	push   esi
c0015164:	6a 00                	push   0x0
c0015166:	57                   	push   edi
c0015167:	e8 18 b5 fe ff       	call   c0000684 <memset>
c001516c:	8d 4e ff             	lea    ecx,[esi-0x1]
c001516f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015173:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015175:	83 c4 10             	add    esp,0x10
c0015178:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001517c:	89 f8                	mov    eax,edi
c001517e:	5a                   	pop    edx
c001517f:	5e                   	pop    esi
c0015180:	5f                   	pop    edi
c0015181:	c3                   	ret    

c0015182 <Sys::eject(regs*)>:
c0015182:	83 ec 0c             	sub    esp,0xc
c0015185:	83 ca ff             	or     edx,0xffffffff
c0015188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001518c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001518f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015194:	83 e9 41             	sub    ecx,0x41
c0015197:	83 f9 19             	cmp    ecx,0x19
c001519a:	77 18                	ja     c00151b4 <Sys::eject(regs*)+0x32>
c001519c:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c00151a3:	85 c9                	test   ecx,ecx
c00151a5:	74 0d                	je     c00151b4 <Sys::eject(regs*)+0x32>
c00151a7:	83 ec 0c             	sub    esp,0xc
c00151aa:	51                   	push   ecx
c00151ab:	e8 76 af ff ff       	call   c0010126 <LogicalDisk::eject()>
c00151b0:	83 c4 10             	add    esp,0x10
c00151b3:	99                   	cdq    
c00151b4:	83 c4 0c             	add    esp,0xc
c00151b7:	c3                   	ret    

c00151b8 <Sys::exit(regs*)>:
c00151b8:	83 ec 18             	sub    esp,0x18
c00151bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151bf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00151c2:	e8 59 36 00 00       	call   c0018820 <terminateTask(int)>
c00151c7:	83 c8 ff             	or     eax,0xffffffff
c00151ca:	83 c4 1c             	add    esp,0x1c
c00151cd:	89 c2                	mov    edx,eax
c00151cf:	c3                   	ret    

c00151d0 <Sys::getCwd(regs*)>:
c00151d0:	83 ec 10             	sub    esp,0x10
c00151d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00151d7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00151da:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00151dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151e2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00151e5:	e8 f6 7b ff ff       	call   c000cde0 <Fs::getcwd(Process*, char*, int)>
c00151ea:	83 c4 1c             	add    esp,0x1c
c00151ed:	99                   	cdq    
c00151ee:	c3                   	ret    

c00151ef <Sys::getPID(regs*)>:
c00151ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f9:	99                   	cdq    
c00151fa:	c3                   	ret    

c00151fb <Sys::getRAMData(regs*)>:
c00151fb:	8b 0d 38 64 02 c0    	mov    ecx,DWORD PTR ds:0xc0026438
c0015201:	69 05 34 64 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026434,0xc8
c001520b:	99                   	cdq    
c001520c:	f7 f9                	idiv   ecx
c001520e:	c1 e0 18             	shl    eax,0x18
c0015211:	09 c8                	or     eax,ecx
c0015213:	99                   	cdq    
c0015214:	c3                   	ret    

c0015215 <Sys::getVGAPtr(regs*)>:
c0015215:	55                   	push   ebp
c0015216:	57                   	push   edi
c0015217:	56                   	push   esi
c0015218:	53                   	push   ebx
c0015219:	83 ec 18             	sub    esp,0x18
c001521c:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0015220:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0015223:	e8 fc 30 00 00       	call   c0018324 <Thr::processFromPID(int)>
c0015228:	83 c4 10             	add    esp,0x10
c001522b:	89 c1                	mov    ecx,eax
c001522d:	b8 01 00 00 00       	mov    eax,0x1
c0015232:	85 c9                	test   ecx,ecx
c0015234:	74 59                	je     c001528f <Sys::getVGAPtr(regs*)+0x7a>
c0015236:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c001523c:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015240:	74 0c                	je     c001524e <Sys::getVGAPtr(regs*)+0x39>
c0015242:	83 ec 0c             	sub    esp,0xc
c0015245:	53                   	push   ebx
c0015246:	e8 86 55 ff ff       	call   c000a7d1 <setActiveTerminal(VgaText*)>
c001524b:	83 c4 10             	add    esp,0x10
c001524e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015251:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015254:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015259:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001525b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001525e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015261:	81 c3 82 00 00 00    	add    ebx,0x82
c0015267:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001526d:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015270:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0015273:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0015279:	50                   	push   eax
c001527a:	50                   	push   eax
c001527b:	53                   	push   ebx
c001527c:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001527f:	05 a8 0f 00 00       	add    eax,0xfa8
c0015284:	50                   	push   eax
c0015285:	e8 b6 b4 fe ff       	call   c0000740 <strcpy>
c001528a:	83 c4 10             	add    esp,0x10
c001528d:	31 c0                	xor    eax,eax
c001528f:	83 c4 0c             	add    esp,0xc
c0015292:	31 d2                	xor    edx,edx
c0015294:	5b                   	pop    ebx
c0015295:	5e                   	pop    esi
c0015296:	5f                   	pop    edi
c0015297:	5d                   	pop    ebp
c0015298:	c3                   	ret    

c0015299 <Sys::loadDLL(regs*)>:
c0015299:	56                   	push   esi
c001529a:	53                   	push   ebx
c001529b:	31 d2                	xor    edx,edx
c001529d:	51                   	push   ecx
c001529e:	b8 01 00 00 00       	mov    eax,0x1
c00152a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00152a7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00152ab:	0f 84 8c 00 00 00    	je     c001533d <Sys::loadDLL(regs*)+0xa4>
c00152b1:	83 ec 0c             	sub    esp,0xc
c00152b4:	68 14 01 00 00       	push   0x114
c00152b9:	e8 05 47 ff ff       	call   c00099c3 <malloc>
c00152be:	83 c4 0c             	add    esp,0xc
c00152c1:	89 c3                	mov    ebx,eax
c00152c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152c8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00152cb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00152ce:	53                   	push   ebx
c00152cf:	e8 0a 7d ff ff       	call   c000cfde <File::File(char const*, Process*)>
c00152d4:	83 c4 10             	add    esp,0x10
c00152d7:	31 d2                	xor    edx,edx
c00152d9:	b8 02 00 00 00       	mov    eax,0x2
c00152de:	85 db                	test   ebx,ebx
c00152e0:	74 5b                	je     c001533d <Sys::loadDLL(regs*)+0xa4>
c00152e2:	83 ec 0c             	sub    esp,0xc
c00152e5:	53                   	push   ebx
c00152e6:	e8 c5 7f ff ff       	call   c000d2b0 <File::exists()>
c00152eb:	83 c4 10             	add    esp,0x10
c00152ee:	84 c0                	test   al,al
c00152f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00152f2:	75 11                	jne    c0015305 <Sys::loadDLL(regs*)+0x6c>
c00152f4:	83 ec 0c             	sub    esp,0xc
c00152f7:	53                   	push   ebx
c00152f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152fb:	83 c4 10             	add    esp,0x10
c00152fe:	b8 03 00 00 00       	mov    eax,0x3
c0015303:	eb 36                	jmp    c001533b <Sys::loadDLL(regs*)+0xa2>
c0015305:	83 ec 0c             	sub    esp,0xc
c0015308:	53                   	push   ebx
c0015309:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001530c:	58                   	pop    eax
c001530d:	5a                   	pop    edx
c001530e:	6a 00                	push   0x0
c0015310:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015313:	e8 0a 22 00 00       	call   c0017522 <Thr::loadDLL(char const*, bool)>
c0015318:	83 c4 10             	add    esp,0x10
c001531b:	89 c1                	mov    ecx,eax
c001531d:	31 d2                	xor    edx,edx
c001531f:	b8 04 00 00 00       	mov    eax,0x4
c0015324:	85 c9                	test   ecx,ecx
c0015326:	74 15                	je     c001533d <Sys::loadDLL(regs*)+0xa4>
c0015328:	53                   	push   ebx
c0015329:	53                   	push   ebx
c001532a:	ff 35 08 64 02 c0    	push   DWORD PTR ds:0xc0026408
c0015330:	51                   	push   ecx
c0015331:	e8 1d 24 00 00       	call   c0017753 <Thr::executeDLL(unsigned long, void*)>
c0015336:	83 c4 10             	add    esp,0x10
c0015339:	31 c0                	xor    eax,eax
c001533b:	31 d2                	xor    edx,edx
c001533d:	59                   	pop    ecx
c001533e:	5b                   	pop    ebx
c001533f:	5e                   	pop    esi
c0015340:	c3                   	ret    

c0015341 <Sys::read(regs*)>:
c0015341:	57                   	push   edi
c0015342:	56                   	push   esi
c0015343:	53                   	push   ebx
c0015344:	83 ec 10             	sub    esp,0x10
c0015347:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001534b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001534e:	83 f8 02             	cmp    eax,0x2
c0015351:	77 10                	ja     c0015363 <Sys::read(regs*)+0x22>
c0015353:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015358:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001535b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015361:	eb 0e                	jmp    c0015371 <Sys::read(regs*)+0x30>
c0015363:	83 ec 0c             	sub    esp,0xc
c0015366:	50                   	push   eax
c0015367:	e8 df 61 ff ff       	call   c000b54b <getFromFileDescriptor(int)>
c001536c:	83 c4 10             	add    esp,0x10
c001536f:	89 c1                	mov    ecx,eax
c0015371:	83 c8 ff             	or     eax,0xffffffff
c0015374:	85 c9                	test   ecx,ecx
c0015376:	89 c2                	mov    edx,eax
c0015378:	74 28                	je     c00153a2 <Sys::read(regs*)+0x61>
c001537a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015382:	31 ff                	xor    edi,edi
c0015384:	83 ec 0c             	sub    esp,0xc
c0015387:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015389:	8d 54 24 18          	lea    edx,[esp+0x18]
c001538d:	52                   	push   edx
c001538e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015391:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015394:	57                   	push   edi
c0015395:	56                   	push   esi
c0015396:	51                   	push   ecx
c0015397:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001539a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001539e:	83 c4 20             	add    esp,0x20
c00153a1:	99                   	cdq    
c00153a2:	83 c4 10             	add    esp,0x10
c00153a5:	5b                   	pop    ebx
c00153a6:	5e                   	pop    esi
c00153a7:	5f                   	pop    edi
c00153a8:	c3                   	ret    

c00153a9 <Sys::sbrk(regs*)>:
c00153a9:	56                   	push   esi
c00153aa:	53                   	push   ebx
c00153ab:	50                   	push   eax
c00153ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00153b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153b8:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00153bb:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00153c1:	85 db                	test   ebx,ebx
c00153c3:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00153c6:	74 02                	je     c00153ca <Sys::sbrk(regs*)+0x21>
c00153c8:	79 06                	jns    c00153d0 <Sys::sbrk(regs*)+0x27>
c00153ca:	89 f0                	mov    eax,esi
c00153cc:	31 d2                	xor    edx,edx
c00153ce:	eb 2a                	jmp    c00153fa <Sys::sbrk(regs*)+0x51>
c00153d0:	83 c8 ff             	or     eax,0xffffffff
c00153d3:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00153d9:	89 c2                	mov    edx,eax
c00153db:	77 1d                	ja     c00153fa <Sys::sbrk(regs*)+0x51>
c00153dd:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00153e3:	50                   	push   eax
c00153e4:	c1 ea 0c             	shr    edx,0xc
c00153e7:	68 07 0c 00 00       	push   0xc07
c00153ec:	52                   	push   edx
c00153ed:	51                   	push   ecx
c00153ee:	e8 57 6a ff ff       	call   c000be4a <VAS::allocatePages(int, int)>
c00153f3:	89 f0                	mov    eax,esi
c00153f5:	31 d2                	xor    edx,edx
c00153f7:	83 c4 10             	add    esp,0x10
c00153fa:	59                   	pop    ecx
c00153fb:	5b                   	pop    ebx
c00153fc:	5e                   	pop    esi
c00153fd:	c3                   	ret    

c00153fe <Sys::setCwd(regs*)>:
c00153fe:	83 ec 14             	sub    esp,0x14
c0015401:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015405:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015408:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001540d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015410:	e8 3a 7f ff ff       	call   c000d34f <Fs::setcwd(Process*, char*)>
c0015415:	83 c4 1c             	add    esp,0x1c
c0015418:	99                   	cdq    
c0015419:	c3                   	ret    

c001541a <Sys::setTime(regs*)>:
c001541a:	55                   	push   ebp
c001541b:	31 c9                	xor    ecx,ecx
c001541d:	57                   	push   edi
c001541e:	bd 0c 00 00 00       	mov    ebp,0xc
c0015423:	56                   	push   esi
c0015424:	53                   	push   ebx
c0015425:	31 db                	xor    ebx,ebx
c0015427:	83 ec 10             	sub    esp,0x10
c001542a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001542e:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015431:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015434:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0015437:	89 c2                	mov    edx,eax
c0015439:	66 81 ef 6c 07       	sub    di,0x76c
c001543e:	83 e2 1f             	and    edx,0x1f
c0015441:	c1 e7 10             	shl    edi,0x10
c0015444:	42                   	inc    edx
c0015445:	c1 e8 05             	shr    eax,0x5
c0015448:	88 d1                	mov    cl,dl
c001544a:	31 d2                	xor    edx,edx
c001544c:	f7 f5                	div    ebp
c001544e:	89 dd                	mov    ebp,ebx
c0015450:	88 d5                	mov    ch,dl
c0015452:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0015458:	0f b7 c1             	movzx  eax,cx
c001545b:	31 d2                	xor    edx,edx
c001545d:	09 f8                	or     eax,edi
c001545f:	bf 3c 00 00 00       	mov    edi,0x3c
c0015464:	89 c1                	mov    ecx,eax
c0015466:	89 f0                	mov    eax,esi
c0015468:	f7 f7                	div    edi
c001546a:	c1 e2 10             	shl    edx,0x10
c001546d:	09 d5                	or     ebp,edx
c001546f:	31 d2                	xor    edx,edx
c0015471:	89 eb                	mov    ebx,ebp
c0015473:	f7 f7                	div    edi
c0015475:	bf 10 0e 00 00       	mov    edi,0xe10
c001547a:	88 d7                	mov    bh,dl
c001547c:	89 f0                	mov    eax,esi
c001547e:	31 d2                	xor    edx,edx
c0015480:	f7 f7                	div    edi
c0015482:	bf 18 00 00 00       	mov    edi,0x18
c0015487:	31 d2                	xor    edx,edx
c0015489:	f7 f7                	div    edi
c001548b:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c0015490:	88 d3                	mov    bl,dl
c0015492:	53                   	push   ebx
c0015493:	51                   	push   ecx
c0015494:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001549a:	e8 fb 86 ff ff       	call   c000db9a <Clock::setTimeInDatetimeLocal(datetime_t)>
c001549f:	83 c4 1c             	add    esp,0x1c
c00154a2:	83 f0 01             	xor    eax,0x1
c00154a5:	5b                   	pop    ebx
c00154a6:	0f b6 c0             	movzx  eax,al
c00154a9:	5e                   	pop    esi
c00154aa:	31 d2                	xor    edx,edx
c00154ac:	5f                   	pop    edi
c00154ad:	5d                   	pop    ebp
c00154ae:	c3                   	ret    

c00154af <Sys::timezone(regs*)>:
c00154af:	53                   	push   ebx
c00154b0:	83 ec 08             	sub    esp,0x8
c00154b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00154b7:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00154bb:	75 17                	jne    c00154d4 <Sys::timezone(regs*)+0x25>
c00154bd:	83 ec 0c             	sub    esp,0xc
c00154c0:	68 29 45 02 c0       	push   0xc0024529
c00154c5:	e8 a9 75 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c00154ca:	83 c8 ff             	or     eax,0xffffffff
c00154cd:	83 c4 10             	add    esp,0x10
c00154d0:	89 c2                	mov    edx,eax
c00154d2:	eb 20                	jmp    c00154f4 <Sys::timezone(regs*)+0x45>
c00154d4:	83 ec 0c             	sub    esp,0xc
c00154d7:	68 3e 45 02 c0       	push   0xc002453e
c00154dc:	e8 92 75 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c00154e1:	58                   	pop    eax
c00154e2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00154e5:	e8 12 84 ff ff       	call   c000d8fc <User::loadClockSettings(int)>
c00154ea:	83 c4 10             	add    esp,0x10
c00154ed:	b8 01 00 00 00       	mov    eax,0x1
c00154f2:	31 d2                	xor    edx,edx
c00154f4:	83 c4 08             	add    esp,0x8
c00154f7:	5b                   	pop    ebx
c00154f8:	c3                   	ret    

c00154f9 <Sys::write(regs*)>:
c00154f9:	57                   	push   edi
c00154fa:	56                   	push   esi
c00154fb:	53                   	push   ebx
c00154fc:	83 ec 10             	sub    esp,0x10
c00154ff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015503:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015506:	83 f8 02             	cmp    eax,0x2
c0015509:	77 10                	ja     c001551b <Sys::write(regs*)+0x22>
c001550b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015510:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015513:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015519:	eb 0e                	jmp    c0015529 <Sys::write(regs*)+0x30>
c001551b:	83 ec 0c             	sub    esp,0xc
c001551e:	50                   	push   eax
c001551f:	e8 27 60 ff ff       	call   c000b54b <getFromFileDescriptor(int)>
c0015524:	83 c4 10             	add    esp,0x10
c0015527:	89 c1                	mov    ecx,eax
c0015529:	83 c8 ff             	or     eax,0xffffffff
c001552c:	85 c9                	test   ecx,ecx
c001552e:	89 c2                	mov    edx,eax
c0015530:	74 28                	je     c001555a <Sys::write(regs*)+0x61>
c0015532:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001553a:	31 ff                	xor    edi,edi
c001553c:	83 ec 0c             	sub    esp,0xc
c001553f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015541:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015545:	52                   	push   edx
c0015546:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015549:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001554c:	57                   	push   edi
c001554d:	56                   	push   esi
c001554e:	51                   	push   ecx
c001554f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015552:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015556:	83 c4 20             	add    esp,0x20
c0015559:	99                   	cdq    
c001555a:	83 c4 10             	add    esp,0x10
c001555d:	5b                   	pop    ebx
c001555e:	5e                   	pop    esi
c001555f:	5f                   	pop    edi
c0015560:	c3                   	ret    

c0015561 <Sys::wsbe(regs*)>:
c0015561:	57                   	push   edi
c0015562:	b9 0b 00 00 00       	mov    ecx,0xb
c0015567:	56                   	push   esi
c0015568:	be 7d 45 02 c0       	mov    esi,0xc002457d
c001556d:	53                   	push   ebx
c001556e:	83 ec 30             	sub    esp,0x30
c0015571:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015575:	fc                   	cld    
c0015576:	83 ec 0c             	sub    esp,0xc
c0015579:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001557b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001557f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015584:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015587:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001558d:	8b 06                	mov    eax,DWORD PTR [esi]
c001558f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015592:	57                   	push   edi
c0015593:	e8 08 b1 fe ff       	call   c00006a0 <strlen>
c0015598:	5a                   	pop    edx
c0015599:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001559d:	52                   	push   edx
c001559e:	31 d2                	xor    edx,edx
c00155a0:	57                   	push   edi
c00155a1:	52                   	push   edx
c00155a2:	50                   	push   eax
c00155a3:	56                   	push   esi
c00155a4:	ff d3                	call   ebx
c00155a6:	83 c4 14             	add    esp,0x14
c00155a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00155ad:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00155b0:	e8 6b 32 00 00       	call   c0018820 <terminateTask(int)>
c00155b5:	83 c4 40             	add    esp,0x40
c00155b8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00155bd:	5b                   	pop    ebx
c00155be:	31 d2                	xor    edx,edx
c00155c0:	5e                   	pop    esi
c00155c1:	5f                   	pop    edi
c00155c2:	c3                   	ret    

c00155c3 <Sys::yield(regs*)>:
c00155c3:	83 ec 0c             	sub    esp,0xc
c00155c6:	fa                   	cli    
c00155c7:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00155cd:	e8 36 29 00 00       	call   c0017f08 <schedule()>
c00155d2:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00155d7:	48                   	dec    eax
c00155d8:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00155dd:	75 01                	jne    c00155e0 <Sys::yield(regs*)+0x1d>
c00155df:	fb                   	sti    
c00155e0:	8b 15 2c 6a 02 c0    	mov    edx,DWORD PTR ds:0xc0026a2c
c00155e6:	83 c4 0c             	add    esp,0xc
c00155e9:	89 d0                	mov    eax,edx
c00155eb:	c1 ea 11             	shr    edx,0x11
c00155ee:	c1 e0 07             	shl    eax,0x7
c00155f1:	25 80 30 0f 00       	and    eax,0xf3080
c00155f6:	31 d0                	xor    eax,edx
c00155f8:	31 d2                	xor    edx,edx
c00155fa:	c3                   	ret    

c00155fb <sysCallSeekDir(regs*)>:
c00155fb:	31 c0                	xor    eax,eax
c00155fd:	31 d2                	xor    edx,edx
c00155ff:	c3                   	ret    

c0015600 <sysCallTellDir(regs*)>:
c0015600:	31 c0                	xor    eax,eax
c0015602:	31 d2                	xor    edx,edx
c0015604:	c3                   	ret    

c0015605 <sysCallVerify(regs*)>:
c0015605:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015609:	31 d2                	xor    edx,edx
c001560b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001560e:	c3                   	ret    

c001560f <sysCallGetArgc(regs*)>:
c001560f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015614:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015617:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001561d:	99                   	cdq    
c001561e:	c3                   	ret    

c001561f <sysFormatDisk(regs*)>:
c001561f:	56                   	push   esi
c0015620:	53                   	push   ebx
c0015621:	53                   	push   ebx
c0015622:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015626:	8b 1d 34 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026534
c001562c:	eb 25                	jmp    c0015653 <sysFormatDisk(regs*)+0x34>
c001562e:	83 ec 0c             	sub    esp,0xc
c0015631:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015634:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015636:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015639:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001563c:	50                   	push   eax
c001563d:	ff 34 85 c0 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd9640]
c0015644:	53                   	push   ebx
c0015645:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015648:	83 c4 20             	add    esp,0x20
c001564b:	83 f8 08             	cmp    eax,0x8
c001564e:	75 12                	jne    c0015662 <sysFormatDisk(regs*)+0x43>
c0015650:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015653:	85 db                	test   ebx,ebx
c0015655:	75 d7                	jne    c001562e <sysFormatDisk(regs*)+0xf>
c0015657:	59                   	pop    ecx
c0015658:	b8 03 00 00 00       	mov    eax,0x3
c001565d:	31 d2                	xor    edx,edx
c001565f:	5b                   	pop    ebx
c0015660:	5e                   	pop    esi
c0015661:	c3                   	ret    
c0015662:	85 c0                	test   eax,eax
c0015664:	74 1b                	je     c0015681 <sysFormatDisk(regs*)+0x62>
c0015666:	83 f8 09             	cmp    eax,0x9
c0015669:	74 0b                	je     c0015676 <sysFormatDisk(regs*)+0x57>
c001566b:	59                   	pop    ecx
c001566c:	b8 02 00 00 00       	mov    eax,0x2
c0015671:	31 d2                	xor    edx,edx
c0015673:	5b                   	pop    ebx
c0015674:	5e                   	pop    esi
c0015675:	c3                   	ret    
c0015676:	59                   	pop    ecx
c0015677:	b8 01 00 00 00       	mov    eax,0x1
c001567c:	31 d2                	xor    edx,edx
c001567e:	5b                   	pop    ebx
c001567f:	5e                   	pop    esi
c0015680:	c3                   	ret    
c0015681:	59                   	pop    ecx
c0015682:	31 c0                	xor    eax,eax
c0015684:	31 d2                	xor    edx,edx
c0015686:	5b                   	pop    ebx
c0015687:	5e                   	pop    esi
c0015688:	c3                   	ret    

c0015689 <sysSetDiskVolumeLabel(regs*)>:
c0015689:	56                   	push   esi
c001568a:	53                   	push   ebx
c001568b:	53                   	push   ebx
c001568c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015690:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015693:	83 f8 19             	cmp    eax,0x19
c0015696:	77 2d                	ja     c00156c5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015698:	8b 0c 85 c0 69 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9640]
c001569f:	85 c9                	test   ecx,ecx
c00156a1:	74 22                	je     c00156c5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00156a3:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00156a6:	85 db                	test   ebx,ebx
c00156a8:	74 1b                	je     c00156c5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00156aa:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00156b0:	85 d2                	test   edx,edx
c00156b2:	74 11                	je     c00156c5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00156b4:	8b 32                	mov    esi,DWORD PTR [edx]
c00156b6:	53                   	push   ebx
c00156b7:	50                   	push   eax
c00156b8:	51                   	push   ecx
c00156b9:	52                   	push   edx
c00156ba:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00156bd:	83 c4 10             	add    esp,0x10
c00156c0:	99                   	cdq    
c00156c1:	59                   	pop    ecx
c00156c2:	5b                   	pop    ebx
c00156c3:	5e                   	pop    esi
c00156c4:	c3                   	ret    
c00156c5:	59                   	pop    ecx
c00156c6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00156cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00156d0:	5b                   	pop    ebx
c00156d1:	5e                   	pop    esi
c00156d2:	c3                   	ret    

c00156d3 <sysGetDiskVolumeLabel(regs*)>:
c00156d3:	57                   	push   edi
c00156d4:	56                   	push   esi
c00156d5:	53                   	push   ebx
c00156d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156da:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00156dd:	83 fa 19             	cmp    edx,0x19
c00156e0:	77 38                	ja     c001571a <sysGetDiskVolumeLabel(regs*)+0x47>
c00156e2:	8b 0c 95 c0 69 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd9640]
c00156e9:	85 c9                	test   ecx,ecx
c00156eb:	74 2d                	je     c001571a <sysGetDiskVolumeLabel(regs*)+0x47>
c00156ed:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00156f0:	85 db                	test   ebx,ebx
c00156f2:	74 26                	je     c001571a <sysGetDiskVolumeLabel(regs*)+0x47>
c00156f4:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00156f7:	85 f6                	test   esi,esi
c00156f9:	74 1f                	je     c001571a <sysGetDiskVolumeLabel(regs*)+0x47>
c00156fb:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0015701:	85 c0                	test   eax,eax
c0015703:	74 15                	je     c001571a <sysGetDiskVolumeLabel(regs*)+0x47>
c0015705:	83 ec 0c             	sub    esp,0xc
c0015708:	8b 38                	mov    edi,DWORD PTR [eax]
c001570a:	56                   	push   esi
c001570b:	53                   	push   ebx
c001570c:	52                   	push   edx
c001570d:	51                   	push   ecx
c001570e:	50                   	push   eax
c001570f:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015712:	83 c4 20             	add    esp,0x20
c0015715:	99                   	cdq    
c0015716:	5b                   	pop    ebx
c0015717:	5e                   	pop    esi
c0015718:	5f                   	pop    edi
c0015719:	c3                   	ret    
c001571a:	5b                   	pop    ebx
c001571b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015720:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015725:	5e                   	pop    esi
c0015726:	5f                   	pop    edi
c0015727:	c3                   	ret    

c0015728 <sysShutdown(regs*)>:
c0015728:	83 ec 0c             	sub    esp,0xc
c001572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001572f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015732:	85 c0                	test   eax,eax
c0015734:	74 18                	je     c001574e <sysShutdown(regs*)+0x26>
c0015736:	83 f8 01             	cmp    eax,0x1
c0015739:	74 38                	je     c0015773 <sysShutdown(regs*)+0x4b>
c001573b:	83 f8 02             	cmp    eax,0x2
c001573e:	74 24                	je     c0015764 <sysShutdown(regs*)+0x3c>
c0015740:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015745:	ba ff ff ff ff       	mov    edx,0xffffffff
c001574a:	83 c4 0c             	add    esp,0xc
c001574d:	c3                   	ret    
c001574e:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c0015753:	8b 10                	mov    edx,DWORD PTR [eax]
c0015755:	6a 00                	push   0x0
c0015757:	6a 00                	push   0x0
c0015759:	6a 00                	push   0x0
c001575b:	50                   	push   eax
c001575c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001575f:	83 c4 10             	add    esp,0x10
c0015762:	eb dc                	jmp    c0015740 <sysShutdown(regs*)+0x18>
c0015764:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c0015769:	8b 10                	mov    edx,DWORD PTR [eax]
c001576b:	6a 00                	push   0x0
c001576d:	6a 00                	push   0x0
c001576f:	6a 01                	push   0x1
c0015771:	eb e8                	jmp    c001575b <sysShutdown(regs*)+0x33>
c0015773:	a1 40 6a 02 c0       	mov    eax,ds:0xc0026a40
c0015778:	85 c0                	test   eax,eax
c001577a:	74 02                	je     c001577e <sysShutdown(regs*)+0x56>
c001577c:	ff d0                	call   eax
c001577e:	31 c0                	xor    eax,eax
c0015780:	31 d2                	xor    edx,edx
c0015782:	83 c4 0c             	add    esp,0xc
c0015785:	c3                   	ret    

c0015786 <sysCallRealpath(regs*)>:
c0015786:	83 ec 0c             	sub    esp,0xc
c0015789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001578d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015790:	85 d2                	test   edx,edx
c0015792:	74 07                	je     c001579b <sysCallRealpath(regs*)+0x15>
c0015794:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015797:	85 c0                	test   eax,eax
c0015799:	75 0b                	jne    c00157a6 <sysCallRealpath(regs*)+0x20>
c001579b:	b8 01 00 00 00       	mov    eax,0x1
c00157a0:	31 d2                	xor    edx,edx
c00157a2:	83 c4 0c             	add    esp,0xc
c00157a5:	c3                   	ret    
c00157a6:	51                   	push   ecx
c00157a7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00157ad:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00157b0:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00157b6:	51                   	push   ecx
c00157b7:	52                   	push   edx
c00157b8:	50                   	push   eax
c00157b9:	e8 76 76 ff ff       	call   c000ce34 <Fs::standardiseFiles(char*, char const*, char const*)>
c00157be:	83 c4 10             	add    esp,0x10
c00157c1:	31 c0                	xor    eax,eax
c00157c3:	31 d2                	xor    edx,edx
c00157c5:	83 c4 0c             	add    esp,0xc
c00157c8:	c3                   	ret    

c00157c9 <sysCallReadDir(regs*)>:
c00157c9:	53                   	push   ebx
c00157ca:	83 ec 18             	sub    esp,0x18
c00157cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00157d1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00157d4:	83 f8 02             	cmp    eax,0x2
c00157d7:	76 60                	jbe    c0015839 <sysCallReadDir(regs*)+0x70>
c00157d9:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00157e0:	77 48                	ja     c001582a <sysCallReadDir(regs*)+0x61>
c00157e2:	83 ec 0c             	sub    esp,0xc
c00157e5:	50                   	push   eax
c00157e6:	e8 60 5d ff ff       	call   c000b54b <getFromFileDescriptor(int)>
c00157eb:	83 c4 10             	add    esp,0x10
c00157ee:	85 c0                	test   eax,eax
c00157f0:	74 38                	je     c001582a <sysCallReadDir(regs*)+0x61>
c00157f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00157fa:	83 ec 0c             	sub    esp,0xc
c00157fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00157ff:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015803:	51                   	push   ecx
c0015804:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015807:	6a 00                	push   0x0
c0015809:	68 10 01 00 00       	push   0x110
c001580e:	50                   	push   eax
c001580f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015812:	83 c4 20             	add    esp,0x20
c0015815:	85 c0                	test   eax,eax
c0015817:	74 29                	je     c0015842 <sysCallReadDir(regs*)+0x79>
c0015819:	83 f8 07             	cmp    eax,0x7
c001581c:	74 1b                	je     c0015839 <sysCallReadDir(regs*)+0x70>
c001581e:	b8 02 00 00 00       	mov    eax,0x2
c0015823:	31 d2                	xor    edx,edx
c0015825:	83 c4 18             	add    esp,0x18
c0015828:	5b                   	pop    ebx
c0015829:	c3                   	ret    
c001582a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001582f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015834:	83 c4 18             	add    esp,0x18
c0015837:	5b                   	pop    ebx
c0015838:	c3                   	ret    
c0015839:	b8 01 00 00 00       	mov    eax,0x1
c001583e:	31 d2                	xor    edx,edx
c0015840:	eb e3                	jmp    c0015825 <sysCallReadDir(regs*)+0x5c>
c0015842:	31 c0                	xor    eax,eax
c0015844:	31 d2                	xor    edx,edx
c0015846:	eb dd                	jmp    c0015825 <sysCallReadDir(regs*)+0x5c>

c0015848 <sysCallIsATTY(regs*)>:
c0015848:	83 ec 0c             	sub    esp,0xc
c001584b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001584f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015852:	83 f8 02             	cmp    eax,0x2
c0015855:	76 07                	jbe    c001585e <sysCallIsATTY(regs*)+0x16>
c0015857:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001585c:	75 26                	jne    c0015884 <sysCallIsATTY(regs*)+0x3c>
c001585e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015863:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015866:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001586c:	85 c0                	test   eax,eax
c001586e:	74 24                	je     c0015894 <sysCallIsATTY(regs*)+0x4c>
c0015870:	83 ec 0c             	sub    esp,0xc
c0015873:	8b 10                	mov    edx,DWORD PTR [eax]
c0015875:	50                   	push   eax
c0015876:	ff 12                	call   DWORD PTR [edx]
c0015878:	31 d2                	xor    edx,edx
c001587a:	0f b6 c0             	movzx  eax,al
c001587d:	83 c4 10             	add    esp,0x10
c0015880:	83 c4 0c             	add    esp,0xc
c0015883:	c3                   	ret    
c0015884:	83 ec 0c             	sub    esp,0xc
c0015887:	50                   	push   eax
c0015888:	e8 be 5c ff ff       	call   c000b54b <getFromFileDescriptor(int)>
c001588d:	83 c4 10             	add    esp,0x10
c0015890:	85 c0                	test   eax,eax
c0015892:	75 dc                	jne    c0015870 <sysCallIsATTY(regs*)+0x28>
c0015894:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015899:	ba ff ff ff ff       	mov    edx,0xffffffff
c001589e:	83 c4 0c             	add    esp,0xc
c00158a1:	c3                   	ret    

c00158a2 <sysCallSeek(regs*)>:
c00158a2:	53                   	push   ebx
c00158a3:	83 ec 08             	sub    esp,0x8
c00158a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158aa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00158ad:	8d 50 fd             	lea    edx,[eax-0x3]
c00158b0:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00158b6:	77 32                	ja     c00158ea <sysCallSeek(regs*)+0x48>
c00158b8:	83 ec 0c             	sub    esp,0xc
c00158bb:	50                   	push   eax
c00158bc:	e8 8a 5c ff ff       	call   c000b54b <getFromFileDescriptor(int)>
c00158c1:	83 c4 0c             	add    esp,0xc
c00158c4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00158c7:	31 db                	xor    ebx,ebx
c00158c9:	53                   	push   ebx
c00158ca:	51                   	push   ecx
c00158cb:	50                   	push   eax
c00158cc:	e8 2f 78 ff ff       	call   c000d100 <File::seek(unsigned long long)>
c00158d1:	83 c4 10             	add    esp,0x10
c00158d4:	85 c0                	test   eax,eax
c00158d6:	0f 95 c0             	setne  al
c00158d9:	31 d2                	xor    edx,edx
c00158db:	0f b6 c0             	movzx  eax,al
c00158de:	f7 d8                	neg    eax
c00158e0:	83 d2 00             	adc    edx,0x0
c00158e3:	83 c4 08             	add    esp,0x8
c00158e6:	f7 da                	neg    edx
c00158e8:	5b                   	pop    ebx
c00158e9:	c3                   	ret    
c00158ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158f4:	83 c4 08             	add    esp,0x8
c00158f7:	5b                   	pop    ebx
c00158f8:	c3                   	ret    

c00158f9 <sysCallTell(regs*)>:
c00158f9:	53                   	push   ebx
c00158fa:	83 ec 08             	sub    esp,0x8
c00158fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015901:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015904:	83 f8 02             	cmp    eax,0x2
c0015907:	76 4d                	jbe    c0015956 <sysCallTell(regs*)+0x5d>
c0015909:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001590e:	76 19                	jbe    c0015929 <sysCallTell(regs*)+0x30>
c0015910:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015913:	31 d2                	xor    edx,edx
c0015915:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001591b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015922:	31 c0                	xor    eax,eax
c0015924:	83 c4 08             	add    esp,0x8
c0015927:	5b                   	pop    ebx
c0015928:	c3                   	ret    
c0015929:	83 ec 0c             	sub    esp,0xc
c001592c:	50                   	push   eax
c001592d:	e8 19 5c ff ff       	call   c000b54b <getFromFileDescriptor(int)>
c0015932:	5a                   	pop    edx
c0015933:	59                   	pop    ecx
c0015934:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015937:	50                   	push   eax
c0015938:	e8 19 78 ff ff       	call   c000d156 <File::tell(unsigned long long*)>
c001593d:	83 c4 10             	add    esp,0x10
c0015940:	85 c0                	test   eax,eax
c0015942:	0f 95 c0             	setne  al
c0015945:	31 d2                	xor    edx,edx
c0015947:	0f b6 c0             	movzx  eax,al
c001594a:	f7 d8                	neg    eax
c001594c:	83 d2 00             	adc    edx,0x0
c001594f:	83 c4 08             	add    esp,0x8
c0015952:	f7 da                	neg    edx
c0015954:	5b                   	pop    ebx
c0015955:	c3                   	ret    
c0015956:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001595b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015960:	83 c4 08             	add    esp,0x8
c0015963:	5b                   	pop    ebx
c0015964:	c3                   	ret    

c0015965 <sysCallSize(regs*)>:
c0015965:	53                   	push   ebx
c0015966:	83 ec 18             	sub    esp,0x18
c0015969:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001596d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015970:	83 f8 02             	cmp    eax,0x2
c0015973:	76 53                	jbe    c00159c8 <sysCallSize(regs*)+0x63>
c0015975:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001597a:	76 19                	jbe    c0015995 <sysCallSize(regs*)+0x30>
c001597c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001597f:	31 d2                	xor    edx,edx
c0015981:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015987:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001598e:	31 c0                	xor    eax,eax
c0015990:	83 c4 18             	add    esp,0x18
c0015993:	5b                   	pop    ebx
c0015994:	c3                   	ret    
c0015995:	83 ec 0c             	sub    esp,0xc
c0015998:	50                   	push   eax
c0015999:	e8 ad 5b ff ff       	call   c000b54b <getFromFileDescriptor(int)>
c001599e:	83 c4 0c             	add    esp,0xc
c00159a1:	8d 54 24 13          	lea    edx,[esp+0x13]
c00159a5:	52                   	push   edx
c00159a6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00159a9:	50                   	push   eax
c00159aa:	e8 3f 79 ff ff       	call   c000d2ee <File::stat(unsigned long long*, bool*)>
c00159af:	83 c4 10             	add    esp,0x10
c00159b2:	85 c0                	test   eax,eax
c00159b4:	0f 95 c0             	setne  al
c00159b7:	31 d2                	xor    edx,edx
c00159b9:	0f b6 c0             	movzx  eax,al
c00159bc:	f7 d8                	neg    eax
c00159be:	83 d2 00             	adc    edx,0x0
c00159c1:	83 c4 18             	add    esp,0x18
c00159c4:	f7 da                	neg    edx
c00159c6:	5b                   	pop    ebx
c00159c7:	c3                   	ret    
c00159c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159cd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159d2:	83 c4 18             	add    esp,0x18
c00159d5:	5b                   	pop    ebx
c00159d6:	c3                   	ret    

c00159d7 <sysCallSizeFromFilename(regs*)>:
c00159d7:	57                   	push   edi
c00159d8:	56                   	push   esi
c00159d9:	53                   	push   ebx
c00159da:	83 ec 20             	sub    esp,0x20
c00159dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00159e1:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00159e4:	83 fb 02             	cmp    ebx,0x2
c00159e7:	0f 86 88 00 00 00    	jbe    c0015a75 <sysCallSizeFromFilename(regs*)+0x9e>
c00159ed:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00159f3:	76 1b                	jbe    c0015a10 <sysCallSizeFromFilename(regs*)+0x39>
c00159f5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00159f8:	31 d2                	xor    edx,edx
c00159fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015a00:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015a07:	83 c4 20             	add    esp,0x20
c0015a0a:	31 c0                	xor    eax,eax
c0015a0c:	5b                   	pop    ebx
c0015a0d:	5e                   	pop    esi
c0015a0e:	5f                   	pop    edi
c0015a0f:	c3                   	ret    
c0015a10:	83 ec 0c             	sub    esp,0xc
c0015a13:	68 14 01 00 00       	push   0x114
c0015a18:	e8 a6 3f ff ff       	call   c00099c3 <malloc>
c0015a1d:	83 c4 0c             	add    esp,0xc
c0015a20:	89 c7                	mov    edi,eax
c0015a22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a27:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015a2a:	53                   	push   ebx
c0015a2b:	57                   	push   edi
c0015a2c:	e8 ad 75 ff ff       	call   c000cfde <File::File(char const*, Process*)>
c0015a31:	83 c4 0c             	add    esp,0xc
c0015a34:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015a38:	50                   	push   eax
c0015a39:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015a3c:	57                   	push   edi
c0015a3d:	e8 ac 78 ff ff       	call   c000d2ee <File::stat(unsigned long long*, bool*)>
c0015a42:	83 c4 10             	add    esp,0x10
c0015a45:	85 ff                	test   edi,edi
c0015a47:	74 14                	je     c0015a5d <sysCallSizeFromFilename(regs*)+0x86>
c0015a49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a4d:	8b 17                	mov    edx,DWORD PTR [edi]
c0015a4f:	83 ec 0c             	sub    esp,0xc
c0015a52:	57                   	push   edi
c0015a53:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015a56:	83 c4 10             	add    esp,0x10
c0015a59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015a5d:	85 c0                	test   eax,eax
c0015a5f:	0f 95 c0             	setne  al
c0015a62:	31 d2                	xor    edx,edx
c0015a64:	0f b6 c0             	movzx  eax,al
c0015a67:	f7 d8                	neg    eax
c0015a69:	83 d2 00             	adc    edx,0x0
c0015a6c:	83 c4 20             	add    esp,0x20
c0015a6f:	f7 da                	neg    edx
c0015a71:	5b                   	pop    ebx
c0015a72:	5e                   	pop    esi
c0015a73:	5f                   	pop    edi
c0015a74:	c3                   	ret    
c0015a75:	83 c4 20             	add    esp,0x20
c0015a78:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a7d:	5b                   	pop    ebx
c0015a7e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a83:	5e                   	pop    esi
c0015a84:	5f                   	pop    edi
c0015a85:	c3                   	ret    

c0015a86 <sysCallClose(regs*)>:
c0015a86:	53                   	push   ebx
c0015a87:	83 ec 08             	sub    esp,0x8
c0015a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a8e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a91:	83 f8 02             	cmp    eax,0x2
c0015a94:	76 41                	jbe    c0015ad7 <sysCallClose(regs*)+0x51>
c0015a96:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015a9c:	83 fa 01             	cmp    edx,0x1
c0015a9f:	76 2d                	jbe    c0015ace <sysCallClose(regs*)+0x48>
c0015aa1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015aa6:	77 2f                	ja     c0015ad7 <sysCallClose(regs*)+0x51>
c0015aa8:	83 ec 0c             	sub    esp,0xc
c0015aab:	50                   	push   eax
c0015aac:	e8 9a 5a ff ff       	call   c000b54b <getFromFileDescriptor(int)>
c0015ab1:	89 c3                	mov    ebx,eax
c0015ab3:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ab6:	e8 e5 75 ff ff       	call   c000d0a0 <File::close()>
c0015abb:	83 c4 10             	add    esp,0x10
c0015abe:	85 db                	test   ebx,ebx
c0015ac0:	74 0c                	je     c0015ace <sysCallClose(regs*)+0x48>
c0015ac2:	83 ec 0c             	sub    esp,0xc
c0015ac5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ac7:	53                   	push   ebx
c0015ac8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015acb:	83 c4 10             	add    esp,0x10
c0015ace:	31 c0                	xor    eax,eax
c0015ad0:	31 d2                	xor    edx,edx
c0015ad2:	83 c4 08             	add    esp,0x8
c0015ad5:	5b                   	pop    ebx
c0015ad6:	c3                   	ret    
c0015ad7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015adc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ae1:	83 c4 08             	add    esp,0x8
c0015ae4:	5b                   	pop    ebx
c0015ae5:	c3                   	ret    

c0015ae6 <sysCallOpenDir(regs*)>:
c0015ae6:	56                   	push   esi
c0015ae7:	53                   	push   ebx
c0015ae8:	53                   	push   ebx
c0015ae9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015aed:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015af0:	85 f6                	test   esi,esi
c0015af2:	74 59                	je     c0015b4d <sysCallOpenDir(regs*)+0x67>
c0015af4:	83 ec 0c             	sub    esp,0xc
c0015af7:	68 14 01 00 00       	push   0x114
c0015afc:	e8 c2 3e ff ff       	call   c00099c3 <malloc>
c0015b01:	83 c4 0c             	add    esp,0xc
c0015b04:	89 c6                	mov    esi,eax
c0015b06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b0b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015b0e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015b11:	56                   	push   esi
c0015b12:	e8 73 79 ff ff       	call   c000d48a <Directory::Directory(char const*, Process*)>
c0015b17:	83 c4 10             	add    esp,0x10
c0015b1a:	85 f6                	test   esi,esi
c0015b1c:	74 2f                	je     c0015b4d <sysCallOpenDir(regs*)+0x67>
c0015b1e:	83 ec 0c             	sub    esp,0xc
c0015b21:	56                   	push   esi
c0015b22:	e8 c7 79 ff ff       	call   c000d4ee <Directory::open()>
c0015b27:	83 c4 10             	add    esp,0x10
c0015b2a:	85 c0                	test   eax,eax
c0015b2c:	75 1f                	jne    c0015b4d <sysCallOpenDir(regs*)+0x67>
c0015b2e:	83 ec 0c             	sub    esp,0xc
c0015b31:	56                   	push   esi
c0015b32:	e8 1f 57 ff ff       	call   c000b256 <UnixFile::getFileDescriptor()>
c0015b37:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015b3a:	83 c4 10             	add    esp,0x10
c0015b3d:	89 02                	mov    DWORD PTR [edx],eax
c0015b3f:	c1 f8 1f             	sar    eax,0x1f
c0015b42:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b45:	31 c0                	xor    eax,eax
c0015b47:	59                   	pop    ecx
c0015b48:	31 d2                	xor    edx,edx
c0015b4a:	5b                   	pop    ebx
c0015b4b:	5e                   	pop    esi
c0015b4c:	c3                   	ret    
c0015b4d:	59                   	pop    ecx
c0015b4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b53:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b58:	5b                   	pop    ebx
c0015b59:	5e                   	pop    esi
c0015b5a:	c3                   	ret    

c0015b5b <sysCallCloseDir(regs*)>:
c0015b5b:	53                   	push   ebx
c0015b5c:	83 ec 08             	sub    esp,0x8
c0015b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b63:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015b66:	8d 50 fd             	lea    edx,[eax-0x3]
c0015b69:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015b6f:	77 2f                	ja     c0015ba0 <sysCallCloseDir(regs*)+0x45>
c0015b71:	83 ec 0c             	sub    esp,0xc
c0015b74:	50                   	push   eax
c0015b75:	e8 d1 59 ff ff       	call   c000b54b <getFromFileDescriptor(int)>
c0015b7a:	89 c3                	mov    ebx,eax
c0015b7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b7f:	e8 c6 79 ff ff       	call   c000d54a <Directory::close()>
c0015b84:	83 c4 10             	add    esp,0x10
c0015b87:	85 db                	test   ebx,ebx
c0015b89:	74 0c                	je     c0015b97 <sysCallCloseDir(regs*)+0x3c>
c0015b8b:	83 ec 0c             	sub    esp,0xc
c0015b8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b90:	53                   	push   ebx
c0015b91:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b94:	83 c4 10             	add    esp,0x10
c0015b97:	31 c0                	xor    eax,eax
c0015b99:	31 d2                	xor    edx,edx
c0015b9b:	83 c4 08             	add    esp,0x8
c0015b9e:	5b                   	pop    ebx
c0015b9f:	c3                   	ret    
c0015ba0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ba5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015baa:	83 c4 08             	add    esp,0x8
c0015bad:	5b                   	pop    ebx
c0015bae:	c3                   	ret    

c0015baf <sysCallMakeDir(regs*)>:
c0015baf:	56                   	push   esi
c0015bb0:	53                   	push   ebx
c0015bb1:	83 ec 10             	sub    esp,0x10
c0015bb4:	68 14 01 00 00       	push   0x114
c0015bb9:	e8 05 3e ff ff       	call   c00099c3 <malloc>
c0015bbe:	83 c4 0c             	add    esp,0xc
c0015bc1:	89 c3                	mov    ebx,eax
c0015bc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bc8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015bcb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015bcf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015bd2:	53                   	push   ebx
c0015bd3:	e8 b2 78 ff ff       	call   c000d48a <Directory::Directory(char const*, Process*)>
c0015bd8:	83 c4 10             	add    esp,0x10
c0015bdb:	85 db                	test   ebx,ebx
c0015bdd:	74 32                	je     c0015c11 <sysCallMakeDir(regs*)+0x62>
c0015bdf:	83 ec 0c             	sub    esp,0xc
c0015be2:	53                   	push   ebx
c0015be3:	e8 e6 7a ff ff       	call   c000d6ce <Directory::create()>
c0015be8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015beb:	89 c6                	mov    esi,eax
c0015bed:	e8 58 79 ff ff       	call   c000d54a <Directory::close()>
c0015bf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bf7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bfa:	83 c4 10             	add    esp,0x10
c0015bfd:	31 c0                	xor    eax,eax
c0015bff:	59                   	pop    ecx
c0015c00:	85 f6                	test   esi,esi
c0015c02:	5b                   	pop    ebx
c0015c03:	0f 95 c0             	setne  al
c0015c06:	5e                   	pop    esi
c0015c07:	31 d2                	xor    edx,edx
c0015c09:	f7 d8                	neg    eax
c0015c0b:	83 d2 00             	adc    edx,0x0
c0015c0e:	f7 da                	neg    edx
c0015c10:	c3                   	ret    
c0015c11:	59                   	pop    ecx
c0015c12:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c17:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c1c:	5b                   	pop    ebx
c0015c1d:	5e                   	pop    esi
c0015c1e:	c3                   	ret    

c0015c1f <sysCallWait(regs*)>:
c0015c1f:	83 ec 10             	sub    esp,0x10
c0015c22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c26:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015c29:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c2c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015c2f:	e8 fc 24 00 00       	call   c0018130 <waitTask(int, int*, int)>
c0015c34:	83 c4 1c             	add    esp,0x1c
c0015c37:	99                   	cdq    
c0015c38:	c3                   	ret    

c0015c39 <sysCallNotImpl(regs*)>:
c0015c39:	83 ec 18             	sub    esp,0x18
c0015c3c:	68 a9 45 02 c0       	push   0xc00245a9
c0015c41:	e8 ef e6 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0015c46:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c4b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c50:	83 c4 1c             	add    esp,0x1c
c0015c53:	c3                   	ret    

c0015c54 <sysPanic(regs*)>:
c0015c54:	83 ec 18             	sub    esp,0x18
c0015c57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c5b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c5e:	e8 d2 e6 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0015c63:	b8 01 00 00 00       	mov    eax,0x1
c0015c68:	31 d2                	xor    edx,edx
c0015c6a:	83 c4 1c             	add    esp,0x1c
c0015c6d:	c3                   	ret    

c0015c6e <sysCallRmdir(regs*)>:
c0015c6e:	56                   	push   esi
c0015c6f:	53                   	push   ebx
c0015c70:	83 ec 20             	sub    esp,0x20
c0015c73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c77:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015c7a:	68 14 01 00 00       	push   0x114
c0015c7f:	e8 3f 3d ff ff       	call   c00099c3 <malloc>
c0015c84:	83 c4 0c             	add    esp,0xc
c0015c87:	89 c3                	mov    ebx,eax
c0015c89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c8e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015c91:	56                   	push   esi
c0015c92:	53                   	push   ebx
c0015c93:	e8 46 73 ff ff       	call   c000cfde <File::File(char const*, Process*)>
c0015c98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c9b:	e8 1a 75 ff ff       	call   c000d1ba <File::unlink()>
c0015ca0:	83 c4 10             	add    esp,0x10
c0015ca3:	85 db                	test   ebx,ebx
c0015ca5:	74 14                	je     c0015cbb <sysCallRmdir(regs*)+0x4d>
c0015ca7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cab:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015cad:	83 ec 0c             	sub    esp,0xc
c0015cb0:	53                   	push   ebx
c0015cb1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015cb4:	83 c4 10             	add    esp,0x10
c0015cb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015cbb:	85 c0                	test   eax,eax
c0015cbd:	0f 95 c0             	setne  al
c0015cc0:	31 d2                	xor    edx,edx
c0015cc2:	0f b6 c0             	movzx  eax,al
c0015cc5:	f7 d8                	neg    eax
c0015cc7:	83 d2 00             	adc    edx,0x0
c0015cca:	83 c4 14             	add    esp,0x14
c0015ccd:	f7 da                	neg    edx
c0015ccf:	5b                   	pop    ebx
c0015cd0:	5e                   	pop    esi
c0015cd1:	c3                   	ret    

c0015cd2 <sysCallUnlink(regs*)>:
c0015cd2:	56                   	push   esi
c0015cd3:	53                   	push   ebx
c0015cd4:	83 ec 20             	sub    esp,0x20
c0015cd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015cdb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015cde:	68 14 01 00 00       	push   0x114
c0015ce3:	e8 db 3c ff ff       	call   c00099c3 <malloc>
c0015ce8:	83 c4 0c             	add    esp,0xc
c0015ceb:	89 c3                	mov    ebx,eax
c0015ced:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cf2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015cf5:	56                   	push   esi
c0015cf6:	53                   	push   ebx
c0015cf7:	e8 e2 72 ff ff       	call   c000cfde <File::File(char const*, Process*)>
c0015cfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cff:	e8 b6 74 ff ff       	call   c000d1ba <File::unlink()>
c0015d04:	83 c4 10             	add    esp,0x10
c0015d07:	85 db                	test   ebx,ebx
c0015d09:	74 14                	je     c0015d1f <sysCallUnlink(regs*)+0x4d>
c0015d0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d0f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d11:	83 ec 0c             	sub    esp,0xc
c0015d14:	53                   	push   ebx
c0015d15:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015d18:	83 c4 10             	add    esp,0x10
c0015d1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d1f:	85 c0                	test   eax,eax
c0015d21:	0f 95 c0             	setne  al
c0015d24:	31 d2                	xor    edx,edx
c0015d26:	0f b6 c0             	movzx  eax,al
c0015d29:	f7 d8                	neg    eax
c0015d2b:	83 d2 00             	adc    edx,0x0
c0015d2e:	83 c4 14             	add    esp,0x14
c0015d31:	f7 da                	neg    edx
c0015d33:	5b                   	pop    ebx
c0015d34:	5e                   	pop    esi
c0015d35:	c3                   	ret    

c0015d36 <sysCallGetArgv(regs*)>:
c0015d36:	83 ec 0c             	sub    esp,0xc
c0015d39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d3d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015d40:	85 c0                	test   eax,eax
c0015d42:	78 2b                	js     c0015d6f <sysCallGetArgv(regs*)+0x39>
c0015d44:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015d4a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015d4d:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0015d53:	7d 1a                	jge    c0015d6f <sysCallGetArgv(regs*)+0x39>
c0015d55:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0015d5c:	85 c0                	test   eax,eax
c0015d5e:	74 17                	je     c0015d77 <sysCallGetArgv(regs*)+0x41>
c0015d60:	83 ec 08             	sub    esp,0x8
c0015d63:	50                   	push   eax
c0015d64:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015d67:	e8 d4 a9 fe ff       	call   c0000740 <strcpy>
c0015d6c:	83 c4 10             	add    esp,0x10
c0015d6f:	31 c0                	xor    eax,eax
c0015d71:	31 d2                	xor    edx,edx
c0015d73:	83 c4 0c             	add    esp,0xc
c0015d76:	c3                   	ret    
c0015d77:	b8 01 00 00 00       	mov    eax,0x1
c0015d7c:	31 d2                	xor    edx,edx
c0015d7e:	83 c4 0c             	add    esp,0xc
c0015d81:	c3                   	ret    

c0015d82 <sysCallTTYName(regs*)>:
c0015d82:	56                   	push   esi
c0015d83:	53                   	push   ebx
c0015d84:	53                   	push   ebx
c0015d85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d89:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015d8c:	85 c0                	test   eax,eax
c0015d8e:	74 5f                	je     c0015def <sysCallTTYName(regs*)+0x6d>
c0015d90:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015d93:	83 f8 02             	cmp    eax,0x2
c0015d96:	77 3e                	ja     c0015dd6 <sysCallTTYName(regs*)+0x54>
c0015d98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015da0:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0015da6:	85 db                	test   ebx,ebx
c0015da8:	74 45                	je     c0015def <sysCallTTYName(regs*)+0x6d>
c0015daa:	83 ec 0c             	sub    esp,0xc
c0015dad:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015daf:	53                   	push   ebx
c0015db0:	ff 10                	call   DWORD PTR [eax]
c0015db2:	83 c4 10             	add    esp,0x10
c0015db5:	84 c0                	test   al,al
c0015db7:	74 41                	je     c0015dfa <sysCallTTYName(regs*)+0x78>
c0015db9:	83 ec 08             	sub    esp,0x8
c0015dbc:	81 c3 82 00 00 00    	add    ebx,0x82
c0015dc2:	53                   	push   ebx
c0015dc3:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015dc6:	e8 75 a9 fe ff       	call   c0000740 <strcpy>
c0015dcb:	83 c4 10             	add    esp,0x10
c0015dce:	31 c0                	xor    eax,eax
c0015dd0:	59                   	pop    ecx
c0015dd1:	31 d2                	xor    edx,edx
c0015dd3:	5b                   	pop    ebx
c0015dd4:	5e                   	pop    esi
c0015dd5:	c3                   	ret    
c0015dd6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015ddb:	74 bb                	je     c0015d98 <sysCallTTYName(regs*)+0x16>
c0015ddd:	83 ec 0c             	sub    esp,0xc
c0015de0:	50                   	push   eax
c0015de1:	e8 65 57 ff ff       	call   c000b54b <getFromFileDescriptor(int)>
c0015de6:	83 c4 10             	add    esp,0x10
c0015de9:	89 c3                	mov    ebx,eax
c0015deb:	85 db                	test   ebx,ebx
c0015ded:	75 bb                	jne    c0015daa <sysCallTTYName(regs*)+0x28>
c0015def:	59                   	pop    ecx
c0015df0:	b8 01 00 00 00       	mov    eax,0x1
c0015df5:	31 d2                	xor    edx,edx
c0015df7:	5b                   	pop    ebx
c0015df8:	5e                   	pop    esi
c0015df9:	c3                   	ret    
c0015dfa:	59                   	pop    ecx
c0015dfb:	b8 02 00 00 00       	mov    eax,0x2
c0015e00:	31 d2                	xor    edx,edx
c0015e02:	5b                   	pop    ebx
c0015e03:	5e                   	pop    esi
c0015e04:	c3                   	ret    

c0015e05 <sysCallUSleep(regs*)>:
c0015e05:	83 ec 1c             	sub    esp,0x1c
c0015e08:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e0c:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015e0f:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0015e12:	6a 00                	push   0x0
c0015e14:	6a 64                	push   0x64
c0015e16:	52                   	push   edx
c0015e17:	50                   	push   eax
c0015e18:	e8 17 b1 00 00       	call   c0020f34 <__udivdi3>
c0015e1d:	83 c4 14             	add    esp,0x14
c0015e20:	50                   	push   eax
c0015e21:	e8 da 23 00 00       	call   c0018200 <milliTenthSleep(unsigned int)>
c0015e26:	31 c0                	xor    eax,eax
c0015e28:	31 d2                	xor    edx,edx
c0015e2a:	83 c4 1c             	add    esp,0x1c
c0015e2d:	c3                   	ret    

c0015e2e <sysCallSpawn(regs*)>:
c0015e2e:	56                   	push   esi
c0015e2f:	53                   	push   ebx
c0015e30:	50                   	push   eax
c0015e31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e35:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015e38:	85 c0                	test   eax,eax
c0015e3a:	75 08                	jne    c0015e44 <sysCallSpawn(regs*)+0x16>
c0015e3c:	59                   	pop    ecx
c0015e3d:	31 c0                	xor    eax,eax
c0015e3f:	31 d2                	xor    edx,edx
c0015e41:	5b                   	pop    ebx
c0015e42:	5e                   	pop    esi
c0015e43:	c3                   	ret    
c0015e44:	83 ec 0c             	sub    esp,0xc
c0015e47:	68 1f 07 00 00       	push   0x71f
c0015e4c:	e8 72 3b ff ff       	call   c00099c3 <malloc>
c0015e51:	83 c4 10             	add    esp,0x10
c0015e54:	89 c6                	mov    esi,eax
c0015e56:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0015e59:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015e5c:	85 c0                	test   eax,eax
c0015e5e:	75 32                	jne    c0015e92 <sysCallSpawn(regs*)+0x64>
c0015e60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e65:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015e68:	52                   	push   edx
c0015e69:	50                   	push   eax
c0015e6a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015e6d:	56                   	push   esi
c0015e6e:	e8 85 1a 00 00       	call   c00178f8 <Process::Process(char const*, Process*, char**)>
c0015e73:	83 c4 10             	add    esp,0x10
c0015e76:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0015e7d:	75 bd                	jne    c0015e3c <sysCallSpawn(regs*)+0xe>
c0015e7f:	83 ec 0c             	sub    esp,0xc
c0015e82:	56                   	push   esi
c0015e83:	e8 5c 1f 00 00       	call   c0017de4 <Process::createUserThread()>
c0015e88:	8b 06                	mov    eax,DWORD PTR [esi]
c0015e8a:	83 c4 10             	add    esp,0x10
c0015e8d:	99                   	cdq    
c0015e8e:	59                   	pop    ecx
c0015e8f:	5b                   	pop    ebx
c0015e90:	5e                   	pop    esi
c0015e91:	c3                   	ret    
c0015e92:	31 c0                	xor    eax,eax
c0015e94:	eb d2                	jmp    c0015e68 <sysCallSpawn(regs*)+0x3a>

c0015e96 <sysCallGetEnv(regs*)>:
c0015e96:	57                   	push   edi
c0015e97:	56                   	push   esi
c0015e98:	53                   	push   ebx
c0015e99:	83 ec 1c             	sub    esp,0x1c
c0015e9c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015ea0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ea5:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0015ea8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015eab:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015eae:	e8 ce e3 ff ff       	call   c0014281 <Krnl::getProcessTotalEnvCount(Process*)>
c0015eb3:	83 c4 10             	add    esp,0x10
c0015eb6:	39 c7                	cmp    edi,eax
c0015eb8:	7c 14                	jl     c0015ece <sysCallGetEnv(regs*)+0x38>
c0015eba:	85 f6                	test   esi,esi
c0015ebc:	75 0b                	jne    c0015ec9 <sysCallGetEnv(regs*)+0x33>
c0015ebe:	83 c4 10             	add    esp,0x10
c0015ec1:	31 c0                	xor    eax,eax
c0015ec3:	5b                   	pop    ebx
c0015ec4:	31 d2                	xor    edx,edx
c0015ec6:	5e                   	pop    esi
c0015ec7:	5f                   	pop    edi
c0015ec8:	c3                   	ret    
c0015ec9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015ecc:	eb f0                	jmp    c0015ebe <sysCallGetEnv(regs*)+0x28>
c0015ece:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015ed2:	52                   	push   edx
c0015ed3:	57                   	push   edi
c0015ed4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015eda:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0015edd:	50                   	push   eax
c0015ede:	e8 be e3 ff ff       	call   c00142a1 <Krnl::getProcessEnvPair(Process*, int)>
c0015ee3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015ee6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015eea:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015eee:	83 c4 0c             	add    esp,0xc
c0015ef1:	85 c9                	test   ecx,ecx
c0015ef3:	75 23                	jne    c0015f18 <sysCallGetEnv(regs*)+0x82>
c0015ef5:	83 ec 0c             	sub    esp,0xc
c0015ef8:	50                   	push   eax
c0015ef9:	e8 a2 a7 fe ff       	call   c00006a0 <strlen>
c0015efe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015f01:	89 c3                	mov    ebx,eax
c0015f03:	e8 98 a7 fe ff       	call   c00006a0 <strlen>
c0015f08:	83 c4 10             	add    esp,0x10
c0015f0b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0015f0f:	83 c4 10             	add    esp,0x10
c0015f12:	31 d2                	xor    edx,edx
c0015f14:	5b                   	pop    ebx
c0015f15:	5e                   	pop    esi
c0015f16:	5f                   	pop    edi
c0015f17:	c3                   	ret    
c0015f18:	83 ec 08             	sub    esp,0x8
c0015f1b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015f1e:	50                   	push   eax
c0015f1f:	56                   	push   esi
c0015f20:	e8 1b a8 fe ff       	call   c0000740 <strcpy>
c0015f25:	58                   	pop    eax
c0015f26:	5a                   	pop    edx
c0015f27:	68 c3 45 02 c0       	push   0xc00245c3
c0015f2c:	56                   	push   esi
c0015f2d:	e8 4e a9 fe ff       	call   c0000880 <strcat>
c0015f32:	59                   	pop    ecx
c0015f33:	5b                   	pop    ebx
c0015f34:	57                   	push   edi
c0015f35:	56                   	push   esi
c0015f36:	e8 45 a9 fe ff       	call   c0000880 <strcat>
c0015f3b:	83 c4 10             	add    esp,0x10
c0015f3e:	e9 7b ff ff ff       	jmp    c0015ebe <sysCallGetEnv(regs*)+0x28>

c0015f43 <sysAppSettings(regs*)>:
c0015f43:	57                   	push   edi
c0015f44:	56                   	push   esi
c0015f45:	56                   	push   esi
c0015f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f4a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015f4d:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0015f53:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015f58:	66 3d c0 09          	cmp    ax,0x9c0
c0015f5c:	75 2e                	jne    c0015f8c <sysAppSettings(regs*)+0x49>
c0015f5e:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0015f64:	83 e0 1f             	and    eax,0x1f
c0015f67:	3c 01                	cmp    al,0x1
c0015f69:	74 2c                	je     c0015f97 <sysAppSettings(regs*)+0x54>
c0015f6b:	3c 07                	cmp    al,0x7
c0015f6d:	0f 84 b3 00 00 00    	je     c0016026 <sysAppSettings(regs*)+0xe3>
c0015f73:	84 c0                	test   al,al
c0015f75:	0f 84 d2 00 00 00    	je     c001604d <sysAppSettings(regs*)+0x10a>
c0015f7b:	3c 08                	cmp    al,0x8
c0015f7d:	74 63                	je     c0015fe2 <sysAppSettings(regs*)+0x9f>
c0015f7f:	59                   	pop    ecx
c0015f80:	0f b6 c0             	movzx  eax,al
c0015f83:	5e                   	pop    esi
c0015f84:	05 e8 03 00 00       	add    eax,0x3e8
c0015f89:	5f                   	pop    edi
c0015f8a:	99                   	cdq    
c0015f8b:	c3                   	ret    
c0015f8c:	b8 01 00 00 00       	mov    eax,0x1
c0015f91:	59                   	pop    ecx
c0015f92:	31 d2                	xor    edx,edx
c0015f94:	5e                   	pop    esi
c0015f95:	5f                   	pop    edi
c0015f96:	c3                   	ret    
c0015f97:	50                   	push   eax
c0015f98:	68 00 01 00 00       	push   0x100
c0015f9d:	6a 00                	push   0x0
c0015f9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fa4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015fa7:	83 c0 0c             	add    eax,0xc
c0015faa:	50                   	push   eax
c0015fab:	e8 d4 a6 fe ff       	call   c0000684 <memset>
c0015fb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fb5:	b9 ff 00 00 00       	mov    ecx,0xff
c0015fba:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0015fbd:	83 c7 0c             	add    edi,0xc
c0015fc0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015fc2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fc7:	5a                   	pop    edx
c0015fc8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015fcb:	59                   	pop    ecx
c0015fcc:	8d 50 0c             	lea    edx,[eax+0xc]
c0015fcf:	52                   	push   edx
c0015fd0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015fd6:	e8 95 46 ff ff       	call   c000a670 <VgaText::setTitle(char*)>
c0015fdb:	83 c4 10             	add    esp,0x10
c0015fde:	31 c0                	xor    eax,eax
c0015fe0:	eb af                	jmp    c0015f91 <sysAppSettings(regs*)+0x4e>
c0015fe2:	83 ec 08             	sub    esp,0x8
c0015fe5:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015feb:	83 e0 0f             	and    eax,0xf
c0015fee:	50                   	push   eax
c0015fef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ff4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015ff7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015ffd:	e8 5e 46 ff ff       	call   c000a660 <VgaText::setTitleColour(VgaColour)>
c0016002:	5f                   	pop    edi
c0016003:	58                   	pop    eax
c0016004:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001600a:	c1 e8 04             	shr    eax,0x4
c001600d:	83 e0 0f             	and    eax,0xf
c0016010:	50                   	push   eax
c0016011:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016016:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016019:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001601f:	e8 2c 46 ff ff       	call   c000a650 <VgaText::setTitleTextColour(VgaColour)>
c0016024:	eb b5                	jmp    c0015fdb <sysAppSettings(regs*)+0x98>
c0016026:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001602b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001602e:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016034:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001603a:	c0 e8 06             	shr    al,0x6
c001603d:	83 e0 01             	and    eax,0x1
c0016040:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0016046:	31 c0                	xor    eax,eax
c0016048:	e9 44 ff ff ff       	jmp    c0015f91 <sysAppSettings(regs*)+0x4e>
c001604d:	b8 02 00 00 00       	mov    eax,0x2
c0016052:	e9 3a ff ff ff       	jmp    c0015f91 <sysAppSettings(regs*)+0x4e>

c0016057 <sysSetFatAttrib(regs*)>:
c0016057:	57                   	push   edi
c0016058:	56                   	push   esi
c0016059:	53                   	push   ebx
c001605a:	83 ec 1c             	sub    esp,0x1c
c001605d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016061:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016064:	68 14 01 00 00       	push   0x114
c0016069:	e8 55 39 ff ff       	call   c00099c3 <malloc>
c001606e:	83 c4 0c             	add    esp,0xc
c0016071:	89 c3                	mov    ebx,eax
c0016073:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016078:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001607b:	57                   	push   edi
c001607c:	53                   	push   ebx
c001607d:	e8 5c 6f ff ff       	call   c000cfde <File::File(char const*, Process*)>
c0016082:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016085:	83 c4 0c             	add    esp,0xc
c0016088:	0f b6 d4             	movzx  edx,ah
c001608b:	0f b6 c0             	movzx  eax,al
c001608e:	52                   	push   edx
c001608f:	50                   	push   eax
c0016090:	53                   	push   ebx
c0016091:	e8 be 71 ff ff       	call   c000d254 <File::chfatattr(unsigned char, unsigned char)>
c0016096:	83 c4 10             	add    esp,0x10
c0016099:	85 db                	test   ebx,ebx
c001609b:	74 14                	je     c00160b1 <sysSetFatAttrib(regs*)+0x5a>
c001609d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160a1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00160a3:	83 ec 0c             	sub    esp,0xc
c00160a6:	53                   	push   ebx
c00160a7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00160aa:	83 c4 10             	add    esp,0x10
c00160ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160b1:	85 c0                	test   eax,eax
c00160b3:	0f 95 c0             	setne  al
c00160b6:	31 d2                	xor    edx,edx
c00160b8:	0f b6 c0             	movzx  eax,al
c00160bb:	f7 d8                	neg    eax
c00160bd:	83 d2 00             	adc    edx,0x0
c00160c0:	83 c4 10             	add    esp,0x10
c00160c3:	f7 da                	neg    edx
c00160c5:	5b                   	pop    ebx
c00160c6:	5e                   	pop    esi
c00160c7:	5f                   	pop    edi
c00160c8:	c3                   	ret    

c00160c9 <sysPipe(regs*)>:
c00160c9:	57                   	push   edi
c00160ca:	56                   	push   esi
c00160cb:	53                   	push   ebx
c00160cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160d0:	83 ec 0c             	sub    esp,0xc
c00160d3:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00160d6:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00160d9:	6a 20                	push   0x20
c00160db:	e8 e3 38 ff ff       	call   c00099c3 <malloc>
c00160e0:	89 c3                	mov    ebx,eax
c00160e2:	58                   	pop    eax
c00160e3:	5a                   	pop    edx
c00160e4:	68 00 50 00 00       	push   0x5000
c00160e9:	53                   	push   ebx
c00160ea:	e8 f9 42 ff ff       	call   c000a3e8 <Pipe::Pipe(int)>
c00160ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160f2:	e8 5f 51 ff ff       	call   c000b256 <UnixFile::getFileDescriptor()>
c00160f7:	89 07                	mov    DWORD PTR [edi],eax
c00160f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160fc:	e8 55 51 ff ff       	call   c000b256 <UnixFile::getFileDescriptor()>
c0016101:	83 c4 10             	add    esp,0x10
c0016104:	89 06                	mov    DWORD PTR [esi],eax
c0016106:	31 d2                	xor    edx,edx
c0016108:	5b                   	pop    ebx
c0016109:	31 c0                	xor    eax,eax
c001610b:	5e                   	pop    esi
c001610c:	5f                   	pop    edi
c001610d:	c3                   	ret    

c001610e <sysGetUnixTime(regs*)>:
c001610e:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c0016113:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016119:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001611d:	e9 b0 78 ff ff       	jmp    c000d9d2 <Clock::timeInSecondsLocal()>

c0016122 <string_ends_with(char const*, char const*)>:
c0016122:	57                   	push   edi
c0016123:	56                   	push   esi
c0016124:	53                   	push   ebx
c0016125:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016129:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001612d:	83 ec 0c             	sub    esp,0xc
c0016130:	53                   	push   ebx
c0016131:	e8 6a a5 fe ff       	call   c00006a0 <strlen>
c0016136:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016139:	89 c6                	mov    esi,eax
c001613b:	e8 60 a5 fe ff       	call   c00006a0 <strlen>
c0016140:	83 c4 10             	add    esp,0x10
c0016143:	39 c6                	cmp    esi,eax
c0016145:	7d 06                	jge    c001614d <string_ends_with(char const*, char const*)+0x2b>
c0016147:	5b                   	pop    ebx
c0016148:	31 c0                	xor    eax,eax
c001614a:	5e                   	pop    esi
c001614b:	5f                   	pop    edi
c001614c:	c3                   	ret    
c001614d:	83 ec 08             	sub    esp,0x8
c0016150:	29 c6                	sub    esi,eax
c0016152:	57                   	push   edi
c0016153:	01 f3                	add    ebx,esi
c0016155:	53                   	push   ebx
c0016156:	e8 71 a6 fe ff       	call   c00007cc <strcmp>
c001615b:	83 c4 10             	add    esp,0x10
c001615e:	85 c0                	test   eax,eax
c0016160:	5b                   	pop    ebx
c0016161:	0f 94 c0             	sete   al
c0016164:	5e                   	pop    esi
c0016165:	0f b6 c0             	movzx  eax,al
c0016168:	5f                   	pop    edi
c0016169:	c3                   	ret    

c001616a <sysCallOpen(regs*)>:
c001616a:	56                   	push   esi
c001616b:	53                   	push   ebx
c001616c:	81 ec 04 01 00 00    	sub    esp,0x104
c0016172:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016179:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001617c:	85 c9                	test   ecx,ecx
c001617e:	0f 84 ad 01 00 00    	je     c0016331 <sysCallOpen(regs*)+0x1c7>
c0016184:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016187:	85 c0                	test   eax,eax
c0016189:	0f 84 a2 01 00 00    	je     c0016331 <sysCallOpen(regs*)+0x1c7>
c001618f:	52                   	push   edx
c0016190:	68 c5 45 02 c0       	push   0xc00245c5
c0016195:	50                   	push   eax
c0016196:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001619a:	56                   	push   esi
c001619b:	e8 94 6c ff ff       	call   c000ce34 <Fs::standardiseFiles(char*, char const*, char const*)>
c00161a0:	89 34 24             	mov    DWORD PTR [esp],esi
c00161a3:	e8 f8 a4 fe ff       	call   c00006a0 <strlen>
c00161a8:	83 c4 10             	add    esp,0x10
c00161ab:	48                   	dec    eax
c00161ac:	74 1d                	je     c00161cb <sysCallOpen(regs*)+0x61>
c00161ae:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00161b1:	eb 0f                	jmp    c00161c2 <sysCallOpen(regs*)+0x58>
c00161b3:	80 fa 3a             	cmp    dl,0x3a
c00161b6:	74 0f                	je     c00161c7 <sysCallOpen(regs*)+0x5d>
c00161b8:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00161bc:	48                   	dec    eax
c00161bd:	74 0c                	je     c00161cb <sysCallOpen(regs*)+0x61>
c00161bf:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00161c2:	80 fa 2e             	cmp    dl,0x2e
c00161c5:	75 ec                	jne    c00161b3 <sysCallOpen(regs*)+0x49>
c00161c7:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00161cb:	83 ec 08             	sub    esp,0x8
c00161ce:	68 c9 45 02 c0       	push   0xc00245c9
c00161d3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161d6:	e8 47 ff ff ff       	call   c0016122 <string_ends_with(char const*, char const*)>
c00161db:	83 c4 10             	add    esp,0x10
c00161de:	85 c0                	test   eax,eax
c00161e0:	74 1d                	je     c00161ff <sysCallOpen(regs*)+0x95>
c00161e2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00161e5:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00161eb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00161f2:	81 c4 04 01 00 00    	add    esp,0x104
c00161f8:	31 c0                	xor    eax,eax
c00161fa:	31 d2                	xor    edx,edx
c00161fc:	5b                   	pop    ebx
c00161fd:	5e                   	pop    esi
c00161fe:	c3                   	ret    
c00161ff:	83 ec 08             	sub    esp,0x8
c0016202:	68 ce 45 02 c0       	push   0xc00245ce
c0016207:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001620a:	e8 13 ff ff ff       	call   c0016122 <string_ends_with(char const*, char const*)>
c001620f:	83 c4 10             	add    esp,0x10
c0016212:	85 c0                	test   eax,eax
c0016214:	75 cc                	jne    c00161e2 <sysCallOpen(regs*)+0x78>
c0016216:	83 ec 08             	sub    esp,0x8
c0016219:	68 ca 45 02 c0       	push   0xc00245ca
c001621e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016221:	e8 a6 a5 fe ff       	call   c00007cc <strcmp>
c0016226:	83 c4 10             	add    esp,0x10
c0016229:	85 c0                	test   eax,eax
c001622b:	74 b5                	je     c00161e2 <sysCallOpen(regs*)+0x78>
c001622d:	83 ec 08             	sub    esp,0x8
c0016230:	68 c9 45 02 c0       	push   0xc00245c9
c0016235:	56                   	push   esi
c0016236:	e8 e7 fe ff ff       	call   c0016122 <string_ends_with(char const*, char const*)>
c001623b:	83 c4 10             	add    esp,0x10
c001623e:	85 c0                	test   eax,eax
c0016240:	75 a0                	jne    c00161e2 <sysCallOpen(regs*)+0x78>
c0016242:	83 ec 08             	sub    esp,0x8
c0016245:	68 d3 45 02 c0       	push   0xc00245d3
c001624a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001624d:	e8 d0 fe ff ff       	call   c0016122 <string_ends_with(char const*, char const*)>
c0016252:	83 c4 10             	add    esp,0x10
c0016255:	85 c0                	test   eax,eax
c0016257:	0f 85 e7 00 00 00    	jne    c0016344 <sysCallOpen(regs*)+0x1da>
c001625d:	83 ec 08             	sub    esp,0x8
c0016260:	68 d8 45 02 c0       	push   0xc00245d8
c0016265:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016268:	e8 b5 fe ff ff       	call   c0016122 <string_ends_with(char const*, char const*)>
c001626d:	83 c4 10             	add    esp,0x10
c0016270:	85 c0                	test   eax,eax
c0016272:	0f 85 cc 00 00 00    	jne    c0016344 <sysCallOpen(regs*)+0x1da>
c0016278:	83 ec 08             	sub    esp,0x8
c001627b:	68 d4 45 02 c0       	push   0xc00245d4
c0016280:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016283:	e8 44 a5 fe ff       	call   c00007cc <strcmp>
c0016288:	83 c4 10             	add    esp,0x10
c001628b:	85 c0                	test   eax,eax
c001628d:	0f 84 b1 00 00 00    	je     c0016344 <sysCallOpen(regs*)+0x1da>
c0016293:	83 ec 08             	sub    esp,0x8
c0016296:	68 d3 45 02 c0       	push   0xc00245d3
c001629b:	56                   	push   esi
c001629c:	e8 81 fe ff ff       	call   c0016122 <string_ends_with(char const*, char const*)>
c00162a1:	83 c4 10             	add    esp,0x10
c00162a4:	85 c0                	test   eax,eax
c00162a6:	0f 85 98 00 00 00    	jne    c0016344 <sysCallOpen(regs*)+0x1da>
c00162ac:	83 ec 0c             	sub    esp,0xc
c00162af:	68 14 01 00 00       	push   0x114
c00162b4:	e8 0a 37 ff ff       	call   c00099c3 <malloc>
c00162b9:	83 c4 0c             	add    esp,0xc
c00162bc:	89 c6                	mov    esi,eax
c00162be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162c3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00162c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162c9:	56                   	push   esi
c00162ca:	e8 0f 6d ff ff       	call   c000cfde <File::File(char const*, Process*)>
c00162cf:	83 c4 10             	add    esp,0x10
c00162d2:	85 f6                	test   esi,esi
c00162d4:	74 5b                	je     c0016331 <sysCallOpen(regs*)+0x1c7>
c00162d6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00162d9:	0f b6 c2             	movzx  eax,dl
c00162dc:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00162df:	89 d0                	mov    eax,edx
c00162e1:	83 e0 01             	and    eax,0x1
c00162e4:	f6 c2 02             	test   dl,0x2
c00162e7:	74 03                	je     c00162ec <sysCallOpen(regs*)+0x182>
c00162e9:	83 c8 02             	or     eax,0x2
c00162ec:	f6 c2 04             	test   dl,0x4
c00162ef:	74 03                	je     c00162f4 <sysCallOpen(regs*)+0x18a>
c00162f1:	83 c8 04             	or     eax,0x4
c00162f4:	f6 c2 08             	test   dl,0x8
c00162f7:	74 03                	je     c00162fc <sysCallOpen(regs*)+0x192>
c00162f9:	83 c8 0a             	or     eax,0xa
c00162fc:	83 e2 10             	and    edx,0x10
c00162ff:	74 03                	je     c0016304 <sysCallOpen(regs*)+0x19a>
c0016301:	83 c8 12             	or     eax,0x12
c0016304:	83 ec 08             	sub    esp,0x8
c0016307:	50                   	push   eax
c0016308:	56                   	push   esi
c0016309:	e8 34 6d ff ff       	call   c000d042 <File::open(FileOpenMode)>
c001630e:	83 c4 10             	add    esp,0x10
c0016311:	85 c0                	test   eax,eax
c0016313:	75 1c                	jne    c0016331 <sysCallOpen(regs*)+0x1c7>
c0016315:	83 ec 0c             	sub    esp,0xc
c0016318:	56                   	push   esi
c0016319:	e8 38 4f ff ff       	call   c000b256 <UnixFile::getFileDescriptor()>
c001631e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016321:	83 c4 10             	add    esp,0x10
c0016324:	89 02                	mov    DWORD PTR [edx],eax
c0016326:	c1 f8 1f             	sar    eax,0x1f
c0016329:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001632c:	e9 c1 fe ff ff       	jmp    c00161f2 <sysCallOpen(regs*)+0x88>
c0016331:	81 c4 04 01 00 00    	add    esp,0x104
c0016337:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001633c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016341:	5b                   	pop    ebx
c0016342:	5e                   	pop    esi
c0016343:	c3                   	ret    
c0016344:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016347:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001634d:	e9 99 fe ff ff       	jmp    c00161eb <sysCallOpen(regs*)+0x81>

c0016352 <Sys::loadSyscalls()>:
c0016352:	c7 05 00 6f 02 c0 c3 55 01 c0 	mov    DWORD PTR ds:0xc0026f00,0xc00155c3
c001635c:	c7 05 04 6f 02 c0 b8 51 01 c0 	mov    DWORD PTR ds:0xc0026f04,0xc00151b8
c0016366:	c7 05 08 6f 02 c0 a9 53 01 c0 	mov    DWORD PTR ds:0xc0026f08,0xc00153a9
c0016370:	c7 05 0c 6f 02 c0 f9 54 01 c0 	mov    DWORD PTR ds:0xc0026f0c,0xc00154f9
c001637a:	c7 05 10 6f 02 c0 41 53 01 c0 	mov    DWORD PTR ds:0xc0026f10,0xc0015341
c0016384:	c7 05 14 6f 02 c0 ef 51 01 c0 	mov    DWORD PTR ds:0xc0026f14,0xc00151ef
c001638e:	c7 05 18 6f 02 c0 d0 51 01 c0 	mov    DWORD PTR ds:0xc0026f18,0xc00151d0
c0016398:	c7 05 1c 6f 02 c0 fe 53 01 c0 	mov    DWORD PTR ds:0xc0026f1c,0xc00153fe
c00163a2:	c7 05 24 6f 02 c0 86 5a 01 c0 	mov    DWORD PTR ds:0xc0026f24,0xc0015a86
c00163ac:	c7 05 20 6f 02 c0 6a 61 01 c0 	mov    DWORD PTR ds:0xc0026f20,0xc001616a
c00163b6:	c7 05 28 6f 02 c0 e6 5a 01 c0 	mov    DWORD PTR ds:0xc0026f28,0xc0015ae6
c00163c0:	c7 05 2c 6f 02 c0 c9 57 01 c0 	mov    DWORD PTR ds:0xc0026f2c,0xc00157c9
c00163ca:	c7 05 30 6f 02 c0 fb 55 01 c0 	mov    DWORD PTR ds:0xc0026f30,0xc00155fb
c00163d4:	c7 05 34 6f 02 c0 00 56 01 c0 	mov    DWORD PTR ds:0xc0026f34,0xc0015600
c00163de:	c7 05 38 6f 02 c0 af 5b 01 c0 	mov    DWORD PTR ds:0xc0026f38,0xc0015baf
c00163e8:	c7 05 3c 6f 02 c0 5b 5b 01 c0 	mov    DWORD PTR ds:0xc0026f3c,0xc0015b5b
c00163f2:	c7 05 40 6f 02 c0 a2 58 01 c0 	mov    DWORD PTR ds:0xc0026f40,0xc00158a2
c00163fc:	c7 05 44 6f 02 c0 f9 58 01 c0 	mov    DWORD PTR ds:0xc0026f44,0xc00158f9
c0016406:	c7 05 48 6f 02 c0 65 59 01 c0 	mov    DWORD PTR ds:0xc0026f48,0xc0015965
c0016410:	c7 05 4c 6f 02 c0 05 56 01 c0 	mov    DWORD PTR ds:0xc0026f4c,0xc0015605
c001641a:	c7 05 50 6f 02 c0 1f 5c 01 c0 	mov    DWORD PTR ds:0xc0026f50,0xc0015c1f
c0016424:	c7 05 54 6f 02 c0 39 5c 01 c0 	mov    DWORD PTR ds:0xc0026f54,0xc0015c39
c001642e:	c7 05 58 6f 02 c0 39 5c 01 c0 	mov    DWORD PTR ds:0xc0026f58,0xc0015c39
c0016438:	c7 05 5c 6f 02 c0 6e 5c 01 c0 	mov    DWORD PTR ds:0xc0026f5c,0xc0015c6e
c0016442:	c7 05 60 6f 02 c0 d2 5c 01 c0 	mov    DWORD PTR ds:0xc0026f60,0xc0015cd2
c001644c:	c7 05 64 6f 02 c0 0f 56 01 c0 	mov    DWORD PTR ds:0xc0026f64,0xc001560f
c0016456:	c7 05 68 6f 02 c0 36 5d 01 c0 	mov    DWORD PTR ds:0xc0026f68,0xc0015d36
c0016460:	c7 05 6c 6f 02 c0 86 57 01 c0 	mov    DWORD PTR ds:0xc0026f6c,0xc0015786
c001646a:	c7 05 70 6f 02 c0 82 5d 01 c0 	mov    DWORD PTR ds:0xc0026f70,0xc0015d82
c0016474:	c7 05 74 6f 02 c0 48 58 01 c0 	mov    DWORD PTR ds:0xc0026f74,0xc0015848
c001647e:	c7 05 78 6f 02 c0 05 5e 01 c0 	mov    DWORD PTR ds:0xc0026f78,0xc0015e05
c0016488:	c7 05 7c 6f 02 c0 d7 59 01 c0 	mov    DWORD PTR ds:0xc0026f7c,0xc00159d7
c0016492:	c7 05 80 6f 02 c0 2e 5e 01 c0 	mov    DWORD PTR ds:0xc0026f80,0xc0015e2e
c001649c:	c7 05 84 6f 02 c0 96 5e 01 c0 	mov    DWORD PTR ds:0xc0026f84,0xc0015e96
c00164a6:	c7 05 88 6f 02 c0 43 5f 01 c0 	mov    DWORD PTR ds:0xc0026f88,0xc0015f43
c00164b0:	c7 05 8c 6f 02 c0 1f 56 01 c0 	mov    DWORD PTR ds:0xc0026f8c,0xc001561f
c00164ba:	c7 05 90 6f 02 c0 89 56 01 c0 	mov    DWORD PTR ds:0xc0026f90,0xc0015689
c00164c4:	c7 05 94 6f 02 c0 d3 56 01 c0 	mov    DWORD PTR ds:0xc0026f94,0xc00156d3
c00164ce:	c7 05 98 6f 02 c0 57 60 01 c0 	mov    DWORD PTR ds:0xc0026f98,0xc0016057
c00164d8:	c7 05 9c 6f 02 c0 54 5c 01 c0 	mov    DWORD PTR ds:0xc0026f9c,0xc0015c54
c00164e2:	c7 05 a0 6f 02 c0 28 57 01 c0 	mov    DWORD PTR ds:0xc0026fa0,0xc0015728
c00164ec:	c7 05 a4 6f 02 c0 c9 60 01 c0 	mov    DWORD PTR ds:0xc0026fa4,0xc00160c9
c00164f6:	c7 05 a8 6f 02 c0 0e 61 01 c0 	mov    DWORD PTR ds:0xc0026fa8,0xc001610e
c0016500:	c7 05 ac 6f 02 c0 99 52 01 c0 	mov    DWORD PTR ds:0xc0026fac,0xc0015299
c001650a:	c7 05 b0 6f 02 c0 1a 54 01 c0 	mov    DWORD PTR ds:0xc0026fb0,0xc001541a
c0016514:	c7 05 b4 6f 02 c0 af 54 01 c0 	mov    DWORD PTR ds:0xc0026fb4,0xc00154af
c001651e:	c7 05 b8 6f 02 c0 82 51 01 c0 	mov    DWORD PTR ds:0xc0026fb8,0xc0015182
c0016528:	c7 05 bc 6f 02 c0 61 55 01 c0 	mov    DWORD PTR ds:0xc0026fbc,0xc0015561
c0016532:	c7 05 c0 6f 02 c0 fb 51 01 c0 	mov    DWORD PTR ds:0xc0026fc0,0xc00151fb
c001653c:	c7 05 c4 6f 02 c0 15 52 01 c0 	mov    DWORD PTR ds:0xc0026fc4,0xc0015215
c0016546:	c3                   	ret    

c0016547 <Sys::systemCall(regs*, void*)>:
c0016547:	53                   	push   ebx
c0016548:	83 ec 08             	sub    esp,0x8
c001654b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001654f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016552:	83 f8 7f             	cmp    eax,0x7f
c0016555:	77 16                	ja     c001656d <Sys::systemCall(regs*, void*)+0x26>
c0016557:	8b 14 85 00 6f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9100]
c001655e:	85 d2                	test   edx,edx
c0016560:	74 0b                	je     c001656d <Sys::systemCall(regs*, void*)+0x26>
c0016562:	83 ec 0c             	sub    esp,0xc
c0016565:	53                   	push   ebx
c0016566:	ff d2                	call   edx
c0016568:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001656b:	eb 0d                	jmp    c001657a <Sys::systemCall(regs*, void*)+0x33>
c001656d:	52                   	push   edx
c001656e:	52                   	push   edx
c001656f:	50                   	push   eax
c0016570:	68 dd 45 02 c0       	push   0xc00245dd
c0016575:	e8 f9 64 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001657a:	83 c4 10             	add    esp,0x10
c001657d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016582:	31 d2                	xor    edx,edx
c0016584:	83 c4 08             	add    esp,0x8
c0016587:	5b                   	pop    ebx
c0016588:	c3                   	ret    

c0016589 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016589:	55                   	push   ebp
c001658a:	57                   	push   edi
c001658b:	56                   	push   esi
c001658c:	53                   	push   ebx
c001658d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016593:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001659a:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c00165a1:	85 c0                	test   eax,eax
c00165a3:	0f 95 c1             	setne  cl
c00165a6:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00165ae:	0f 94 c2             	sete   dl
c00165b1:	84 d1                	test   cl,dl
c00165b3:	74 23                	je     c00165d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00165b5:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c00165bb:	74 1b                	je     c00165d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00165bd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00165c3:	89 da                	mov    edx,ebx
c00165c5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00165cb:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00165d1:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00165d8:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c00165df:	05 ff 0f 00 00       	add    eax,0xfff
c00165e4:	83 ec 0c             	sub    esp,0xc
c00165e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00165eb:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c00165f1:	c1 e8 0c             	shr    eax,0xc
c00165f4:	89 fe                	mov    esi,edi
c00165f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00165fa:	c1 ee 0c             	shr    esi,0xc
c00165fd:	6a 01                	push   0x1
c00165ff:	e8 9d 50 ff ff       	call   c000b6a1 <Virt::allocateKernelVirtualPages(int)>
c0016604:	89 c5                	mov    ebp,eax
c0016606:	58                   	pop    eax
c0016607:	5a                   	pop    edx
c0016608:	56                   	push   esi
c0016609:	68 f1 45 02 c0       	push   0xc00245f1
c001660e:	e8 60 64 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0016613:	59                   	pop    ecx
c0016614:	58                   	pop    eax
c0016615:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016619:	68 03 46 02 c0       	push   0xc0024603
c001661e:	e8 50 64 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0016623:	83 c4 10             	add    esp,0x10
c0016626:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001662c:	0f 86 31 01 00 00    	jbe    c0016763 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016632:	c1 e6 0c             	shl    esi,0xc
c0016635:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016638:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001663b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001663f:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016646:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016649:	01 df                	add    edi,ebx
c001664b:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001664e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016652:	0f 84 08 01 00 00    	je     c0016760 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016658:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001665e:	76 05                	jbe    c0016665 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016660:	bf 00 10 00 00       	mov    edi,0x1000
c0016665:	83 ec 0c             	sub    esp,0xc
c0016668:	31 d2                	xor    edx,edx
c001666a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016671:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016673:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016677:	50                   	push   eax
c0016678:	8d 74 24 30          	lea    esi,[esp+0x30]
c001667c:	56                   	push   esi
c001667d:	52                   	push   edx
c001667e:	57                   	push   edi
c001667f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016686:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016689:	83 c4 20             	add    esp,0x20
c001668c:	85 c0                	test   eax,eax
c001668e:	74 0a                	je     c001669a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016690:	53                   	push   ebx
c0016691:	53                   	push   ebx
c0016692:	50                   	push   eax
c0016693:	68 15 46 02 c0       	push   0xc0024615
c0016698:	eb 0f                	jmp    c00166a9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001669a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001669e:	74 20                	je     c00166c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c00166a0:	51                   	push   ecx
c00166a1:	51                   	push   ecx
c00166a2:	6a 00                	push   0x0
c00166a4:	68 40 46 02 c0       	push   0xc0024640
c00166a9:	e8 c5 63 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c00166ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00166b1:	e8 1b 53 ff ff       	call   c000b9d1 <Virt::freeKernelVirtualPages(unsigned long)>
c00166b6:	83 c4 10             	add    esp,0x10
c00166b9:	31 c0                	xor    eax,eax
c00166bb:	e9 68 01 00 00       	jmp    c0016828 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c00166c0:	fa                   	cli    
c00166c1:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00166c7:	e8 05 37 ff ff       	call   c0009dd1 <Phys::allocatePage()>
c00166cc:	6a 07                	push   0x7
c00166ce:	89 c7                	mov    edi,eax
c00166d0:	55                   	push   ebp
c00166d1:	50                   	push   eax
c00166d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166d7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166da:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166e0:	e8 63 56 ff ff       	call   c000bd48 <VAS::mapPage(unsigned long, unsigned long, int)>
c00166e5:	83 c4 0c             	add    esp,0xc
c00166e8:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00166ef:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166f5:	6a 00                	push   0x0
c00166f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166ff:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016705:	e8 98 54 ff ff       	call   c000bba2 <VAS::mapOtherVASIn(bool, VAS*)>
c001670a:	58                   	pop    eax
c001670b:	5a                   	pop    edx
c001670c:	68 07 0c 00 00       	push   0xc07
c0016711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016715:	57                   	push   edi
c0016716:	89 ef                	mov    edi,ebp
c0016718:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001671f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016725:	6a 00                	push   0x0
c0016727:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001672c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001672f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016735:	e8 ca 59 ff ff       	call   c000c104 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001673a:	b9 00 10 00 00       	mov    ecx,0x1000
c001673f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016741:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0016746:	83 c4 20             	add    esp,0x20
c0016749:	48                   	dec    eax
c001674a:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001674f:	85 c0                	test   eax,eax
c0016751:	75 01                	jne    c0016754 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016753:	fb                   	sti    
c0016754:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001675b:	e9 df fe ff ff       	jmp    c001663f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016760:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016763:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001676b:	0f 86 a9 00 00 00    	jbe    c001681a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016771:	fa                   	cli    
c0016772:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0016778:	51                   	push   ecx
c0016779:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016780:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016786:	6a 00                	push   0x0
c0016788:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001678d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016790:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016796:	e8 07 54 ff ff       	call   c000bba2 <VAS::mapOtherVASIn(bool, VAS*)>
c001679b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001679f:	c1 e6 0c             	shl    esi,0xc
c00167a2:	01 de                	add    esi,ebx
c00167a4:	83 c4 10             	add    esp,0x10
c00167a7:	39 de                	cmp    esi,ebx
c00167a9:	74 61                	je     c001680c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00167ab:	e8 21 36 ff ff       	call   c0009dd1 <Phys::allocatePage()>
c00167b0:	6a 07                	push   0x7
c00167b2:	89 c7                	mov    edi,eax
c00167b4:	55                   	push   ebp
c00167b5:	50                   	push   eax
c00167b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167be:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167c4:	e8 7f 55 ff ff       	call   c000bd48 <VAS::mapPage(unsigned long, unsigned long, int)>
c00167c9:	58                   	pop    eax
c00167ca:	5a                   	pop    edx
c00167cb:	68 07 0c 00 00       	push   0xc07
c00167d0:	53                   	push   ebx
c00167d1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00167d7:	57                   	push   edi
c00167d8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00167df:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167e5:	6a 00                	push   0x0
c00167e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167ef:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167f5:	e8 0a 59 ff ff       	call   c000c104 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00167fa:	83 c4 1c             	add    esp,0x1c
c00167fd:	68 00 10 00 00       	push   0x1000
c0016802:	6a 00                	push   0x0
c0016804:	55                   	push   ebp
c0016805:	e8 7a 9e fe ff       	call   c0000684 <memset>
c001680a:	eb 98                	jmp    c00167a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001680c:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0016811:	48                   	dec    eax
c0016812:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0016817:	75 01                	jne    c001681a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016819:	fb                   	sti    
c001681a:	83 ec 0c             	sub    esp,0xc
c001681d:	55                   	push   ebp
c001681e:	e8 ae 51 ff ff       	call   c000b9d1 <Virt::freeKernelVirtualPages(unsigned long)>
c0016823:	83 c4 10             	add    esp,0x10
c0016826:	b0 01                	mov    al,0x1
c0016828:	81 c4 2c 10 00 00    	add    esp,0x102c
c001682e:	5b                   	pop    ebx
c001682f:	5e                   	pop    esi
c0016830:	5f                   	pop    edi
c0016831:	5d                   	pop    ebp
c0016832:	c3                   	ret    

c0016833 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016833:	55                   	push   ebp
c0016834:	57                   	push   edi
c0016835:	56                   	push   esi
c0016836:	53                   	push   ebx
c0016837:	83 ec 48             	sub    esp,0x48
c001683a:	68 14 01 00 00       	push   0x114
c001683f:	e8 7f 31 ff ff       	call   c00099c3 <malloc>
c0016844:	83 c4 0c             	add    esp,0xc
c0016847:	89 c6                	mov    esi,eax
c0016849:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001684d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016851:	50                   	push   eax
c0016852:	e8 87 67 ff ff       	call   c000cfde <File::File(char const*, Process*)>
c0016857:	58                   	pop    eax
c0016858:	5a                   	pop    edx
c0016859:	6a 01                	push   0x1
c001685b:	56                   	push   esi
c001685c:	e8 e1 67 ff ff       	call   c000d042 <File::open(FileOpenMode)>
c0016861:	83 c4 10             	add    esp,0x10
c0016864:	85 c0                	test   eax,eax
c0016866:	0f 85 47 01 00 00    	jne    c00169b3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001686c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016874:	83 ec 0c             	sub    esp,0xc
c0016877:	6a 34                	push   0x34
c0016879:	e8 45 31 ff ff       	call   c00099c3 <malloc>
c001687e:	89 c3                	mov    ebx,eax
c0016880:	58                   	pop    eax
c0016881:	8b 06                	mov    eax,DWORD PTR [esi]
c0016883:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0016887:	57                   	push   edi
c0016888:	53                   	push   ebx
c0016889:	6a 00                	push   0x0
c001688b:	6a 34                	push   0x34
c001688d:	56                   	push   esi
c001688e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016891:	83 c4 20             	add    esp,0x20
c0016894:	85 c0                	test   eax,eax
c0016896:	0f 85 17 01 00 00    	jne    c00169b3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001689c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00168a2:	0f 85 0b 01 00 00    	jne    c00169b3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168a8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00168ab:	85 c0                	test   eax,eax
c00168ad:	0f 84 00 01 00 00    	je     c00169b3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168b3:	31 d2                	xor    edx,edx
c00168b5:	55                   	push   ebp
c00168b6:	52                   	push   edx
c00168b7:	50                   	push   eax
c00168b8:	56                   	push   esi
c00168b9:	e8 42 68 ff ff       	call   c000d100 <File::seek(unsigned long long)>
c00168be:	83 c4 10             	add    esp,0x10
c00168c1:	85 c0                	test   eax,eax
c00168c3:	0f 85 ea 00 00 00    	jne    c00169b3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168c9:	83 ec 0c             	sub    esp,0xc
c00168cc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00168cf:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00168d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00168d7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00168db:	0f af c2             	imul   eax,edx
c00168de:	50                   	push   eax
c00168df:	e8 df 30 ff ff       	call   c00099c3 <malloc>
c00168e4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00168e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00168ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c00168ed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00168f1:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00168f5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00168f9:	0f af c2             	imul   eax,edx
c00168fc:	99                   	cdq    
c00168fd:	52                   	push   edx
c00168fe:	50                   	push   eax
c00168ff:	56                   	push   esi
c0016900:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016903:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016906:	83 c4 20             	add    esp,0x20
c0016909:	85 c0                	test   eax,eax
c001690b:	0f 84 a2 00 00 00    	je     c00169b3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016911:	31 d2                	xor    edx,edx
c0016913:	51                   	push   ecx
c0016914:	52                   	push   edx
c0016915:	50                   	push   eax
c0016916:	56                   	push   esi
c0016917:	e8 e4 67 ff ff       	call   c000d100 <File::seek(unsigned long long)>
c001691c:	83 c4 10             	add    esp,0x10
c001691f:	85 c0                	test   eax,eax
c0016921:	0f 85 8c 00 00 00    	jne    c00169b3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016927:	83 ec 0c             	sub    esp,0xc
c001692a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001692e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016932:	31 ed                	xor    ebp,ebp
c0016934:	0f af c2             	imul   eax,edx
c0016937:	50                   	push   eax
c0016938:	e8 86 30 ff ff       	call   c00099c3 <malloc>
c001693d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001693f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016943:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001694a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001694e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016952:	0f af c2             	imul   eax,edx
c0016955:	99                   	cdq    
c0016956:	52                   	push   edx
c0016957:	50                   	push   eax
c0016958:	56                   	push   esi
c0016959:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001695c:	83 c4 20             	add    esp,0x20
c001695f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016967:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001696b:	0f 86 80 00 00 00    	jbe    c00169f1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016971:	0f b7 fd             	movzx  edi,bp
c0016974:	c1 e7 05             	shl    edi,0x5
c0016977:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001697b:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001697e:	75 6b                	jne    c00169eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016980:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016983:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016987:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001698a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001698e:	52                   	push   edx
c001698f:	31 d2                	xor    edx,edx
c0016991:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016994:	52                   	push   edx
c0016995:	50                   	push   eax
c0016996:	56                   	push   esi
c0016997:	e8 64 67 ff ff       	call   c000d100 <File::seek(unsigned long long)>
c001699c:	83 c4 10             	add    esp,0x10
c001699f:	85 c0                	test   eax,eax
c00169a1:	74 17                	je     c00169ba <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00169a3:	83 ec 0c             	sub    esp,0xc
c00169a6:	68 6c 46 02 c0       	push   0xc002466c
c00169ab:	e8 c3 60 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c00169b0:	83 c4 10             	add    esp,0x10
c00169b3:	31 c0                	xor    eax,eax
c00169b5:	e9 87 00 00 00       	jmp    c0016a41 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00169ba:	83 ec 0c             	sub    esp,0xc
c00169bd:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00169c0:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00169c3:	50                   	push   eax
c00169c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00169c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169cc:	56                   	push   esi
c00169cd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00169d1:	e8 b3 fb ff ff       	call   c0016589 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00169d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00169da:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00169de:	83 c4 20             	add    esp,0x20
c00169e1:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00169e5:	73 04                	jae    c00169eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00169e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00169eb:	45                   	inc    ebp
c00169ec:	e9 76 ff ff ff       	jmp    c0016967 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00169f1:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00169f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00169f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00169fd:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0016a03:	83 ec 0c             	sub    esp,0xc
c0016a06:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0016a0c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016a11:	05 00 10 00 00       	add    eax,0x1000
c0016a16:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016a19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a1d:	e8 b1 2f ff ff       	call   c00099d3 <free>
c0016a22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a25:	e8 a9 2f ff ff       	call   c00099d3 <free>
c0016a2a:	58                   	pop    eax
c0016a2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a2f:	e8 9f 2f ff ff       	call   c00099d3 <free>
c0016a34:	89 34 24             	mov    DWORD PTR [esp],esi
c0016a37:	e8 64 66 ff ff       	call   c000d0a0 <File::close()>
c0016a3c:	83 c4 10             	add    esp,0x10
c0016a3f:	b0 01                	mov    al,0x1
c0016a41:	83 c4 3c             	add    esp,0x3c
c0016a44:	5b                   	pop    ebx
c0016a45:	5e                   	pop    esi
c0016a46:	5f                   	pop    edi
c0016a47:	5d                   	pop    ebp
c0016a48:	c3                   	ret    

c0016a49 <Thr::runtimeReferenceHelper()>:
c0016a49:	83 ec 18             	sub    esp,0x18
c0016a4c:	68 74 46 02 c0       	push   0xc0024674
c0016a51:	e8 1d 60 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0016a56:	fa                   	cli    
c0016a57:	83 c4 10             	add    esp,0x10
c0016a5a:	eb fe                	jmp    c0016a5a <Thr::runtimeReferenceHelper()+0x11>

c0016a5c <Thr::getAddressOfKernelSymbol(char const*)>:
c0016a5c:	57                   	push   edi
c0016a5d:	56                   	push   esi
c0016a5e:	53                   	push   ebx
c0016a5f:	31 db                	xor    ebx,ebx
c0016a61:	39 1d a0 78 02 c0    	cmp    DWORD PTR ds:0xc00278a0,ebx
c0016a67:	7e 3c                	jle    c0016aa5 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016a69:	8b 34 9d 20 78 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd87e0]
c0016a70:	31 ff                	xor    edi,edi
c0016a72:	39 3c 9d 20 77 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd88e0],edi
c0016a79:	7e 27                	jle    c0016aa2 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016a7b:	50                   	push   eax
c0016a7c:	50                   	push   eax
c0016a7d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a81:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a83:	03 04 9d a0 77 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8860]
c0016a8a:	50                   	push   eax
c0016a8b:	e8 3c 9d fe ff       	call   c00007cc <strcmp>
c0016a90:	83 c4 10             	add    esp,0x10
c0016a93:	85 c0                	test   eax,eax
c0016a95:	75 05                	jne    c0016a9c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016a97:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016a9a:	eb 0b                	jmp    c0016aa7 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016a9c:	83 c6 10             	add    esi,0x10
c0016a9f:	47                   	inc    edi
c0016aa0:	eb d0                	jmp    c0016a72 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016aa2:	43                   	inc    ebx
c0016aa3:	eb bc                	jmp    c0016a61 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016aa5:	31 c0                	xor    eax,eax
c0016aa7:	5b                   	pop    ebx
c0016aa8:	5e                   	pop    esi
c0016aa9:	5f                   	pop    edi
c0016aaa:	c3                   	ret    

c0016aab <Thr::loadKernelSymbolTable(char const*)>:
c0016aab:	55                   	push   ebp
c0016aac:	57                   	push   edi
c0016aad:	56                   	push   esi
c0016aae:	53                   	push   ebx
c0016aaf:	83 ec 68             	sub    esp,0x68
c0016ab2:	8b 35 f0 78 02 c0    	mov    esi,DWORD PTR ds:0xc00278f0
c0016ab8:	68 14 01 00 00       	push   0x114
c0016abd:	e8 01 2f ff ff       	call   c00099c3 <malloc>
c0016ac2:	83 c4 0c             	add    esp,0xc
c0016ac5:	89 c3                	mov    ebx,eax
c0016ac7:	56                   	push   esi
c0016ac8:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016acc:	50                   	push   eax
c0016acd:	e8 0c 65 ff ff       	call   c000cfde <File::File(char const*, Process*)>
c0016ad2:	5e                   	pop    esi
c0016ad3:	5f                   	pop    edi
c0016ad4:	6a 01                	push   0x1
c0016ad6:	53                   	push   ebx
c0016ad7:	e8 66 65 ff ff       	call   c000d042 <File::open(FileOpenMode)>
c0016adc:	83 c4 10             	add    esp,0x10
c0016adf:	85 c0                	test   eax,eax
c0016ae1:	74 0a                	je     c0016aed <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016ae3:	83 ec 0c             	sub    esp,0xc
c0016ae6:	68 96 46 02 c0       	push   0xc0024696
c0016aeb:	eb 34                	jmp    c0016b21 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016aed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016af5:	83 ec 0c             	sub    esp,0xc
c0016af8:	6a 34                	push   0x34
c0016afa:	e8 c4 2e ff ff       	call   c00099c3 <malloc>
c0016aff:	59                   	pop    ecx
c0016b00:	89 c7                	mov    edi,eax
c0016b02:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016b06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b08:	56                   	push   esi
c0016b09:	57                   	push   edi
c0016b0a:	6a 00                	push   0x0
c0016b0c:	6a 34                	push   0x34
c0016b0e:	53                   	push   ebx
c0016b0f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b12:	83 c4 20             	add    esp,0x20
c0016b15:	85 c0                	test   eax,eax
c0016b17:	74 17                	je     c0016b30 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016b19:	83 ec 0c             	sub    esp,0xc
c0016b1c:	68 ad 46 02 c0       	push   0xc00246ad
c0016b21:	e8 0f d8 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0016b26:	83 c4 10             	add    esp,0x10
c0016b29:	31 c0                	xor    eax,eax
c0016b2b:	e9 31 02 00 00       	jmp    c0016d61 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016b30:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016b36:	75 e1                	jne    c0016b19 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b38:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016b3b:	85 c0                	test   eax,eax
c0016b3d:	74 da                	je     c0016b19 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b3f:	52                   	push   edx
c0016b40:	31 d2                	xor    edx,edx
c0016b42:	52                   	push   edx
c0016b43:	50                   	push   eax
c0016b44:	53                   	push   ebx
c0016b45:	e8 b6 65 ff ff       	call   c000d100 <File::seek(unsigned long long)>
c0016b4a:	83 c4 10             	add    esp,0x10
c0016b4d:	85 c0                	test   eax,eax
c0016b4f:	75 c8                	jne    c0016b19 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b51:	83 ec 0c             	sub    esp,0xc
c0016b54:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016b58:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016b5c:	31 ed                	xor    ebp,ebp
c0016b5e:	0f af c2             	imul   eax,edx
c0016b61:	50                   	push   eax
c0016b62:	e8 5c 2e ff ff       	call   c00099c3 <malloc>
c0016b67:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016b69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b6d:	89 34 24             	mov    DWORD PTR [esp],esi
c0016b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b74:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016b78:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016b7c:	0f af c2             	imul   eax,edx
c0016b7f:	99                   	cdq    
c0016b80:	52                   	push   edx
c0016b81:	50                   	push   eax
c0016b82:	53                   	push   ebx
c0016b83:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016b86:	83 c4 20             	add    esp,0x20
c0016b89:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b91:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b99:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016ba1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016ba9:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016bad:	0f 86 aa 00 00 00    	jbe    c0016c5d <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0016bb3:	0f b7 f5             	movzx  esi,bp
c0016bb6:	6b f6 28             	imul   esi,esi,0x28
c0016bb9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016bbd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016bc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016bc4:	50                   	push   eax
c0016bc5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bc9:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016bcd:	8b 16                	mov    edx,DWORD PTR [esi]
c0016bcf:	6b c0 28             	imul   eax,eax,0x28
c0016bd2:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016bd6:	89 d0                	mov    eax,edx
c0016bd8:	31 d2                	xor    edx,edx
c0016bda:	52                   	push   edx
c0016bdb:	50                   	push   eax
c0016bdc:	53                   	push   ebx
c0016bdd:	e8 1e 65 ff ff       	call   c000d100 <File::seek(unsigned long long)>
c0016be2:	83 c4 0c             	add    esp,0xc
c0016be5:	6a 20                	push   0x20
c0016be7:	6a 00                	push   0x0
c0016be9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016bed:	52                   	push   edx
c0016bee:	e8 91 9a fe ff       	call   c0000684 <memset>
c0016bf3:	58                   	pop    eax
c0016bf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bf6:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016bfa:	51                   	push   ecx
c0016bfb:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016bff:	52                   	push   edx
c0016c00:	6a 00                	push   0x0
c0016c02:	6a 1f                	push   0x1f
c0016c04:	53                   	push   ebx
c0016c05:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c08:	83 c4 18             	add    esp,0x18
c0016c0b:	68 c4 46 02 c0       	push   0xc00246c4
c0016c10:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016c14:	52                   	push   edx
c0016c15:	e8 b2 9b fe ff       	call   c00007cc <strcmp>
c0016c1a:	83 c4 10             	add    esp,0x10
c0016c1d:	85 c0                	test   eax,eax
c0016c1f:	75 0f                	jne    c0016c30 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0016c21:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c30:	50                   	push   eax
c0016c31:	50                   	push   eax
c0016c32:	68 cc 46 02 c0       	push   0xc00246cc
c0016c37:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016c3b:	50                   	push   eax
c0016c3c:	e8 8b 9b fe ff       	call   c00007cc <strcmp>
c0016c41:	83 c4 10             	add    esp,0x10
c0016c44:	85 c0                	test   eax,eax
c0016c46:	75 0f                	jne    c0016c57 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016c48:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016c4b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c57:	45                   	inc    ebp
c0016c58:	e9 4c ff ff ff       	jmp    c0016ba9 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0016c5d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016c62:	75 10                	jne    c0016c74 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0016c64:	83 ec 0c             	sub    esp,0xc
c0016c67:	68 d4 46 02 c0       	push   0xc00246d4
c0016c6c:	e8 c4 d6 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0016c71:	83 c4 10             	add    esp,0x10
c0016c74:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0016c79:	75 10                	jne    c0016c8b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0016c7b:	83 ec 0c             	sub    esp,0xc
c0016c7e:	68 d4 46 02 c0       	push   0xc00246d4
c0016c83:	e8 ad d6 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0016c88:	83 c4 10             	add    esp,0x10
c0016c8b:	31 d2                	xor    edx,edx
c0016c8d:	50                   	push   eax
c0016c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c92:	52                   	push   edx
c0016c93:	50                   	push   eax
c0016c94:	53                   	push   ebx
c0016c95:	e8 66 64 ff ff       	call   c000d100 <File::seek(unsigned long long)>
c0016c9a:	5a                   	pop    edx
c0016c9b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016c9f:	e8 1f 2d ff ff       	call   c00099c3 <malloc>
c0016ca4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016ca8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016cac:	31 c9                	xor    ecx,ecx
c0016cae:	5e                   	pop    esi
c0016caf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016cb1:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016cb5:	55                   	push   ebp
c0016cb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cba:	51                   	push   ecx
c0016cbb:	52                   	push   edx
c0016cbc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016cc0:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0016cc4:	53                   	push   ebx
c0016cc5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016cc8:	83 c4 14             	add    esp,0x14
c0016ccb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016ccf:	e8 ef 2c ff ff       	call   c00099c3 <malloc>
c0016cd4:	89 c6                	mov    esi,eax
c0016cd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016cd8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016cdb:	56                   	push   esi
c0016cdc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016ce0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016ce4:	51                   	push   ecx
c0016ce5:	52                   	push   edx
c0016ce6:	53                   	push   ebx
c0016ce7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016cea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016cee:	8b 15 a0 78 02 c0    	mov    edx,DWORD PTR ds:0xc00278a0
c0016cf4:	83 c4 1c             	add    esp,0x1c
c0016cf7:	c1 e8 04             	shr    eax,0x4
c0016cfa:	89 04 95 20 77 02 c0 	mov    DWORD PTR [edx*4-0x3ffd88e0],eax
c0016d01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d05:	31 d2                	xor    edx,edx
c0016d07:	52                   	push   edx
c0016d08:	50                   	push   eax
c0016d09:	53                   	push   ebx
c0016d0a:	e8 f1 63 ff ff       	call   c000d100 <File::seek(unsigned long long)>
c0016d0f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016d11:	31 d2                	xor    edx,edx
c0016d13:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d16:	56                   	push   esi
c0016d17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016d1b:	52                   	push   edx
c0016d1c:	50                   	push   eax
c0016d1d:	53                   	push   ebx
c0016d1e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d21:	83 c4 14             	add    esp,0x14
c0016d24:	53                   	push   ebx
c0016d25:	e8 76 63 ff ff       	call   c000d0a0 <File::close()>
c0016d2a:	5d                   	pop    ebp
c0016d2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d2f:	e8 9f 2c ff ff       	call   c00099d3 <free>
c0016d34:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016d37:	e8 97 2c ff ff       	call   c00099d3 <free>
c0016d3c:	a1 a0 78 02 c0       	mov    eax,ds:0xc00278a0
c0016d41:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016d45:	8d 50 01             	lea    edx,[eax+0x1]
c0016d48:	89 0c 85 20 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87e0],ecx
c0016d4f:	89 34 85 a0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8860],esi
c0016d56:	89 15 a0 78 02 c0    	mov    DWORD PTR ds:0xc00278a0,edx
c0016d5c:	83 c4 10             	add    esp,0x10
c0016d5f:	b0 01                	mov    al,0x1
c0016d61:	83 c4 5c             	add    esp,0x5c
c0016d64:	5b                   	pop    ebx
c0016d65:	5e                   	pop    esi
c0016d66:	5f                   	pop    edi
c0016d67:	5d                   	pop    ebp
c0016d68:	c3                   	ret    

c0016d69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016d69:	55                   	push   ebp
c0016d6a:	57                   	push   edi
c0016d6b:	56                   	push   esi
c0016d6c:	53                   	push   ebx
c0016d6d:	81 ec 68 03 00 00    	sub    esp,0x368
c0016d73:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016d7a:	8b 1d f0 78 02 c0    	mov    ebx,DWORD PTR ds:0xc00278f0
c0016d80:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016d84:	68 14 01 00 00       	push   0x114
c0016d89:	e8 35 2c ff ff       	call   c00099c3 <malloc>
c0016d8e:	83 c4 0c             	add    esp,0xc
c0016d91:	89 c5                	mov    ebp,eax
c0016d93:	53                   	push   ebx
c0016d94:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016d9b:	50                   	push   eax
c0016d9c:	e8 3d 62 ff ff       	call   c000cfde <File::File(char const*, Process*)>
c0016da1:	5e                   	pop    esi
c0016da2:	5f                   	pop    edi
c0016da3:	6a 01                	push   0x1
c0016da5:	55                   	push   ebp
c0016da6:	e8 97 62 ff ff       	call   c000d042 <File::open(FileOpenMode)>
c0016dab:	83 c4 10             	add    esp,0x10
c0016dae:	85 c0                	test   eax,eax
c0016db0:	0f 85 a7 06 00 00    	jne    c001745d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016db6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016dbe:	83 ec 0c             	sub    esp,0xc
c0016dc1:	6a 34                	push   0x34
c0016dc3:	e8 fb 2b ff ff       	call   c00099c3 <malloc>
c0016dc8:	5b                   	pop    ebx
c0016dc9:	89 c7                	mov    edi,eax
c0016dcb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016dcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016dd2:	53                   	push   ebx
c0016dd3:	57                   	push   edi
c0016dd4:	6a 00                	push   0x0
c0016dd6:	6a 34                	push   0x34
c0016dd8:	55                   	push   ebp
c0016dd9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ddc:	83 c4 20             	add    esp,0x20
c0016ddf:	85 c0                	test   eax,eax
c0016de1:	0f 85 76 06 00 00    	jne    c001745d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016de7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016ded:	0f 85 6a 06 00 00    	jne    c001745d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016df3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016df6:	85 c0                	test   eax,eax
c0016df8:	0f 84 5f 06 00 00    	je     c001745d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016dfe:	31 d2                	xor    edx,edx
c0016e00:	51                   	push   ecx
c0016e01:	52                   	push   edx
c0016e02:	50                   	push   eax
c0016e03:	55                   	push   ebp
c0016e04:	e8 f7 62 ff ff       	call   c000d100 <File::seek(unsigned long long)>
c0016e09:	83 c4 10             	add    esp,0x10
c0016e0c:	85 c0                	test   eax,eax
c0016e0e:	0f 85 49 06 00 00    	jne    c001745d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e14:	83 ec 0c             	sub    esp,0xc
c0016e17:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016e1a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016e1e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016e22:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016e26:	0f af c2             	imul   eax,edx
c0016e29:	50                   	push   eax
c0016e2a:	e8 94 2b ff ff       	call   c00099c3 <malloc>
c0016e2f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e3d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016e41:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016e45:	0f af c2             	imul   eax,edx
c0016e48:	99                   	cdq    
c0016e49:	52                   	push   edx
c0016e4a:	50                   	push   eax
c0016e4b:	55                   	push   ebp
c0016e4c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e4f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016e52:	83 c4 20             	add    esp,0x20
c0016e55:	85 c0                	test   eax,eax
c0016e57:	0f 84 00 06 00 00    	je     c001745d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e5d:	52                   	push   edx
c0016e5e:	31 d2                	xor    edx,edx
c0016e60:	52                   	push   edx
c0016e61:	50                   	push   eax
c0016e62:	55                   	push   ebp
c0016e63:	e8 98 62 ff ff       	call   c000d100 <File::seek(unsigned long long)>
c0016e68:	83 c4 10             	add    esp,0x10
c0016e6b:	85 c0                	test   eax,eax
c0016e6d:	0f 85 ea 05 00 00    	jne    c001745d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e73:	83 ec 0c             	sub    esp,0xc
c0016e76:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016e7a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016e7e:	31 f6                	xor    esi,esi
c0016e80:	0f af c2             	imul   eax,edx
c0016e83:	50                   	push   eax
c0016e84:	e8 3a 2b ff ff       	call   c00099c3 <malloc>
c0016e89:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016e90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e93:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e97:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016e9b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016e9f:	0f af c2             	imul   eax,edx
c0016ea2:	99                   	cdq    
c0016ea3:	52                   	push   edx
c0016ea4:	50                   	push   eax
c0016ea5:	55                   	push   ebp
c0016ea6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ea9:	83 c4 20             	add    esp,0x20
c0016eac:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016eb0:	0f 86 8a 00 00 00    	jbe    c0016f40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016eb6:	0f b7 de             	movzx  ebx,si
c0016eb9:	c1 e3 05             	shl    ebx,0x5
c0016ebc:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0016ec0:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016ec3:	75 75                	jne    c0016f3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016ec5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ec8:	31 d2                	xor    edx,edx
c0016eca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016ece:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016ed1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ed5:	50                   	push   eax
c0016ed6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016ed9:	52                   	push   edx
c0016eda:	50                   	push   eax
c0016edb:	55                   	push   ebp
c0016edc:	e8 1f 62 ff ff       	call   c000d100 <File::seek(unsigned long long)>
c0016ee1:	83 c4 10             	add    esp,0x10
c0016ee4:	85 c0                	test   eax,eax
c0016ee6:	0f 85 71 05 00 00    	jne    c001745d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016eec:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016ef3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016ef6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016efa:	31 d2                	xor    edx,edx
c0016efc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016f00:	83 ec 0c             	sub    esp,0xc
c0016f03:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f07:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016f0e:	50                   	push   eax
c0016f0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016f13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f17:	52                   	push   edx
c0016f18:	50                   	push   eax
c0016f19:	55                   	push   ebp
c0016f1a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f1d:	83 c4 1c             	add    esp,0x1c
c0016f20:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016f23:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016f26:	50                   	push   eax
c0016f27:	6a 00                	push   0x0
c0016f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f2d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0016f31:	50                   	push   eax
c0016f32:	e8 4d 97 fe ff       	call   c0000684 <memset>
c0016f37:	83 c4 10             	add    esp,0x10
c0016f3a:	46                   	inc    esi
c0016f3b:	e9 6c ff ff ff       	jmp    c0016eac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016f40:	53                   	push   ebx
c0016f41:	31 db                	xor    ebx,ebx
c0016f43:	68 00 01 00 00       	push   0x100
c0016f48:	6a 00                	push   0x0
c0016f4a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016f4e:	50                   	push   eax
c0016f4f:	e8 30 97 fe ff       	call   c0000684 <memset>
c0016f54:	83 c4 0c             	add    esp,0xc
c0016f57:	68 00 01 00 00       	push   0x100
c0016f5c:	6a 00                	push   0x0
c0016f5e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016f65:	50                   	push   eax
c0016f66:	e8 19 97 fe ff       	call   c0000684 <memset>
c0016f6b:	83 c4 10             	add    esp,0x10
c0016f6e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016f76:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016f7e:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0016f86:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016f8e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016f96:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0016f9a:	0f 86 30 01 00 00    	jbe    c00170d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0016fa0:	0f b7 f3             	movzx  esi,bx
c0016fa3:	6b f6 28             	imul   esi,esi,0x28
c0016fa6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016faa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016fad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fb1:	52                   	push   edx
c0016fb2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016fb6:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0016fba:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fbc:	6b d2 28             	imul   edx,edx,0x28
c0016fbf:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0016fc3:	31 d2                	xor    edx,edx
c0016fc5:	52                   	push   edx
c0016fc6:	50                   	push   eax
c0016fc7:	55                   	push   ebp
c0016fc8:	e8 33 61 ff ff       	call   c000d100 <File::seek(unsigned long long)>
c0016fcd:	83 c4 0c             	add    esp,0xc
c0016fd0:	6a 20                	push   0x20
c0016fd2:	6a 00                	push   0x0
c0016fd4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016fdb:	51                   	push   ecx
c0016fdc:	e8 a3 96 fe ff       	call   c0000684 <memset>
c0016fe1:	59                   	pop    ecx
c0016fe2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016fe5:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016fe9:	52                   	push   edx
c0016fea:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0016ff1:	51                   	push   ecx
c0016ff2:	6a 00                	push   0x0
c0016ff4:	6a 1f                	push   0x1f
c0016ff6:	55                   	push   ebp
c0016ff7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ffa:	83 c4 1c             	add    esp,0x1c
c0016ffd:	6a 09                	push   0x9
c0016fff:	68 ee 46 02 c0       	push   0xc00246ee
c0017004:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001700b:	51                   	push   ecx
c001700c:	e8 6f 95 fe ff       	call   c0000580 <memcmp>
c0017011:	83 c4 10             	add    esp,0x10
c0017014:	85 c0                	test   eax,eax
c0017016:	75 21                	jne    c0017039 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001701c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017020:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017024:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017028:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001702b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017032:	89 d0                	mov    eax,edx
c0017034:	40                   	inc    eax
c0017035:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017039:	50                   	push   eax
c001703a:	6a 09                	push   0x9
c001703c:	68 f8 46 02 c0       	push   0xc00246f8
c0017041:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017048:	50                   	push   eax
c0017049:	e8 32 95 fe ff       	call   c0000580 <memcmp>
c001704e:	83 c4 10             	add    esp,0x10
c0017051:	85 c0                	test   eax,eax
c0017053:	75 21                	jne    c0017076 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017055:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017059:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001705d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017061:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017065:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017068:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001706f:	89 d0                	mov    eax,edx
c0017071:	40                   	inc    eax
c0017072:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017076:	50                   	push   eax
c0017077:	50                   	push   eax
c0017078:	68 c4 46 02 c0       	push   0xc00246c4
c001707d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017084:	50                   	push   eax
c0017085:	e8 42 97 fe ff       	call   c00007cc <strcmp>
c001708a:	83 c4 10             	add    esp,0x10
c001708d:	85 c0                	test   eax,eax
c001708f:	75 0f                	jne    c00170a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017091:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017094:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017098:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001709c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00170a0:	50                   	push   eax
c00170a1:	50                   	push   eax
c00170a2:	68 cc 46 02 c0       	push   0xc00246cc
c00170a7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00170ae:	50                   	push   eax
c00170af:	e8 18 97 fe ff       	call   c00007cc <strcmp>
c00170b4:	83 c4 10             	add    esp,0x10
c00170b7:	85 c0                	test   eax,eax
c00170b9:	75 0f                	jne    c00170ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00170bb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00170be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00170c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00170ca:	43                   	inc    ebx
c00170cb:	e9 c6 fe ff ff       	jmp    c0016f96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00170d0:	31 d2                	xor    edx,edx
c00170d2:	50                   	push   eax
c00170d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170d7:	52                   	push   edx
c00170d8:	50                   	push   eax
c00170d9:	55                   	push   ebp
c00170da:	e8 21 60 ff ff       	call   c000d100 <File::seek(unsigned long long)>
c00170df:	58                   	pop    eax
c00170e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00170e4:	e8 da 28 ff ff       	call   c00099c3 <malloc>
c00170e9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00170ec:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00170f0:	31 d2                	xor    edx,edx
c00170f2:	58                   	pop    eax
c00170f3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00170f7:	53                   	push   ebx
c00170f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00170fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017100:	52                   	push   edx
c0017101:	50                   	push   eax
c0017102:	55                   	push   ebp
c0017103:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017106:	83 c4 14             	add    esp,0x14
c0017109:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001710d:	e8 b1 28 ff ff       	call   c00099c3 <malloc>
c0017112:	31 d2                	xor    edx,edx
c0017114:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017118:	83 c4 0c             	add    esp,0xc
c001711b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001711f:	52                   	push   edx
c0017120:	50                   	push   eax
c0017121:	55                   	push   ebp
c0017122:	e8 d9 5f ff ff       	call   c000d100 <File::seek(unsigned long long)>
c0017127:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001712a:	31 d2                	xor    edx,edx
c001712c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001712f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017133:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017137:	52                   	push   edx
c0017138:	50                   	push   eax
c0017139:	55                   	push   ebp
c001713a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001713d:	83 c4 20             	add    esp,0x20
c0017140:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017148:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001714c:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017150:	0f 84 0b 03 00 00    	je     c0017461 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0017156:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001715d:	31 d2                	xor    edx,edx
c001715f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017163:	c1 e8 03             	shr    eax,0x3
c0017166:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001716a:	51                   	push   ecx
c001716b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001716f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017173:	52                   	push   edx
c0017174:	50                   	push   eax
c0017175:	55                   	push   ebp
c0017176:	e8 85 5f ff ff       	call   c000d100 <File::seek(unsigned long long)>
c001717b:	5b                   	pop    ebx
c001717c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017180:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017187:	e8 37 28 ff ff       	call   c00099c3 <malloc>
c001718c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001718f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017193:	31 d2                	xor    edx,edx
c0017195:	5e                   	pop    esi
c0017196:	8d 44 24 58          	lea    eax,[esp+0x58]
c001719a:	50                   	push   eax
c001719b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001719f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00171a3:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00171aa:	52                   	push   edx
c00171ab:	50                   	push   eax
c00171ac:	55                   	push   ebp
c00171ad:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00171b0:	83 c4 20             	add    esp,0x20
c00171b3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00171bb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00171bf:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00171c3:	0f 8d 7c 02 00 00    	jge    c0017445 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00171c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00171cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171d1:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00171d6:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00171d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00171dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171e1:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00171e5:	89 d8                	mov    eax,ebx
c00171e7:	c1 e8 08             	shr    eax,0x8
c00171ea:	89 c6                	mov    esi,eax
c00171ec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171f0:	c1 e6 04             	shl    esi,0x4
c00171f3:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00171f7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00171fa:	85 d2                	test   edx,edx
c00171fc:	0f 85 bf 00 00 00    	jne    c00172c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017202:	83 ec 0c             	sub    esp,0xc
c0017205:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017209:	03 06                	add    eax,DWORD PTR [esi]
c001720b:	50                   	push   eax
c001720c:	e8 4b f8 ff ff       	call   c0016a5c <Thr::getAddressOfKernelSymbol(char const*)>
c0017211:	83 c4 10             	add    esp,0x10
c0017214:	89 c2                	mov    edx,eax
c0017216:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001721b:	85 c0                	test   eax,eax
c001721d:	0f 85 9e 00 00 00    	jne    c00172c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017223:	83 ec 0c             	sub    esp,0xc
c0017226:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001722a:	03 06                	add    eax,DWORD PTR [esi]
c001722c:	50                   	push   eax
c001722d:	e8 de 16 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c0017232:	83 c4 10             	add    esp,0x10
c0017235:	89 c2                	mov    edx,eax
c0017237:	85 c0                	test   eax,eax
c0017239:	0f 85 82 00 00 00    	jne    c00172c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001723f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017243:	50                   	push   eax
c0017244:	50                   	push   eax
c0017245:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017249:	03 06                	add    eax,DWORD PTR [esi]
c001724b:	50                   	push   eax
c001724c:	68 02 47 02 c0       	push   0xc0024702
c0017251:	e8 1d 58 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0017256:	58                   	pop    eax
c0017257:	5a                   	pop    edx
c0017258:	68 1c 47 02 c0       	push   0xc002471c
c001725d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017264:	50                   	push   eax
c0017265:	e8 d6 94 fe ff       	call   c0000740 <strcpy>
c001726a:	59                   	pop    ecx
c001726b:	58                   	pop    eax
c001726c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017270:	03 06                	add    eax,DWORD PTR [esi]
c0017272:	50                   	push   eax
c0017273:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001727a:	50                   	push   eax
c001727b:	e8 00 96 fe ff       	call   c0000880 <strcat>
c0017280:	58                   	pop    eax
c0017281:	5a                   	pop    edx
c0017282:	68 b2 47 02 c0       	push   0xc00247b2
c0017287:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001728e:	50                   	push   eax
c001728f:	e8 ec 95 fe ff       	call   c0000880 <strcat>
c0017294:	83 c4 10             	add    esp,0x10
c0017297:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001729c:	0f 84 5d 01 00 00    	je     c00173ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00172a2:	83 ec 0c             	sub    esp,0xc
c00172a5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00172ac:	50                   	push   eax
c00172ad:	e8 83 d0 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00172b2:	83 c4 10             	add    esp,0x10
c00172b5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00172b9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00172bd:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00172c1:	80 fb 01             	cmp    bl,0x1
c00172c4:	0f 85 88 00 00 00    	jne    c0017352 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00172ca:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00172d1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00172d5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00172d9:	01 ce                	add    esi,ecx
c00172db:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00172e1:	0f 94 c0             	sete   al
c00172e4:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00172ea:	0f 94 c3             	sete   bl
c00172ed:	09 c3                	or     ebx,eax
c00172ef:	8b 06                	mov    eax,DWORD PTR [esi]
c00172f1:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00172f6:	74 41                	je     c0017339 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00172f8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00172fb:	84 db                	test   bl,bl
c00172fd:	75 15                	jne    c0017314 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00172ff:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017303:	66 83 f8 0c          	cmp    ax,0xc
c0017307:	76 05                	jbe    c001730e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0017309:	b8 0c 00 00 00       	mov    eax,0xc
c001730e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017312:	76 37                	jbe    c001734b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017314:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0017318:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001731d:	0f 84 dc 00 00 00    	je     c00173ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017323:	83 ec 0c             	sub    esp,0xc
c0017326:	68 33 47 02 c0       	push   0xc0024733
c001732b:	e8 05 d0 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0017330:	83 c4 10             	add    esp,0x10
c0017333:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0017337:	eb 12                	jmp    c001734b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017339:	01 c1                	add    ecx,eax
c001733b:	84 db                	test   bl,bl
c001733d:	75 0c                	jne    c001734b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001733f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017343:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017347:	77 02                	ja     c001734b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017349:	01 d1                	add    ecx,edx
c001734b:	89 0e                	mov    DWORD PTR [esi],ecx
c001734d:	e9 ea 00 00 00       	jmp    c001743c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017352:	80 fb 02             	cmp    bl,0x2
c0017355:	75 7c                	jne    c00173d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0017357:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001735e:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0017362:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0017366:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001736c:	74 20                	je     c001738e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001736e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017374:	74 18                	je     c001738e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017376:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001737a:	b9 0a 00 00 00       	mov    ecx,0xa
c001737f:	66 83 f8 0e          	cmp    ax,0xe
c0017383:	77 03                	ja     c0017388 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0017385:	8d 48 fc             	lea    ecx,[eax-0x4]
c0017388:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001738c:	76 1f                	jbe    c00173ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001738e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0017392:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017397:	74 66                	je     c00173ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017399:	83 ec 0c             	sub    esp,0xc
c001739c:	68 4f 47 02 c0       	push   0xc002474f
c00173a1:	e8 8f cf ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00173a6:	83 c4 10             	add    esp,0x10
c00173a9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00173ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00173af:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00173b4:	74 13                	je     c00173c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00173b6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00173ba:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00173c1:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00173c5:	01 c8                	add    eax,ecx
c00173c7:	eb 04                	jmp    c00173cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00173c9:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00173cd:	01 c2                	add    edx,eax
c00173cf:	89 16                	mov    DWORD PTR [esi],edx
c00173d1:	eb 69                	jmp    c001743c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00173d3:	0f b6 db             	movzx  ebx,bl
c00173d6:	50                   	push   eax
c00173d7:	50                   	push   eax
c00173d8:	53                   	push   ebx
c00173d9:	68 6b 47 02 c0       	push   0xc002476b
c00173de:	e8 90 56 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c00173e3:	83 c4 10             	add    esp,0x10
c00173e6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00173eb:	74 12                	je     c00173ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00173ed:	83 ec 0c             	sub    esp,0xc
c00173f0:	68 76 47 02 c0       	push   0xc0024776
c00173f5:	e8 3b cf ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00173fa:	83 c4 10             	add    esp,0x10
c00173fd:	eb 3d                	jmp    c001743c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00173ff:	83 ec 0c             	sub    esp,0xc
c0017402:	55                   	push   ebp
c0017403:	e8 98 5c ff ff       	call   c000d0a0 <File::close()>
c0017408:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001740b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001740e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017411:	59                   	pop    ecx
c0017412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017416:	e8 b8 25 ff ff       	call   c00099d3 <free>
c001741b:	5b                   	pop    ebx
c001741c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017420:	e8 ae 25 ff ff       	call   c00099d3 <free>
c0017425:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017428:	e8 a6 25 ff ff       	call   c00099d3 <free>
c001742d:	5e                   	pop    esi
c001742e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017432:	e8 9c 25 ff ff       	call   c00099d3 <free>
c0017437:	83 c4 10             	add    esp,0x10
c001743a:	eb 21                	jmp    c001745d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001743c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017440:	e9 76 fd ff ff       	jmp    c00171bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017445:	83 ec 0c             	sub    esp,0xc
c0017448:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001744c:	e8 82 25 ff ff       	call   c00099d3 <free>
c0017451:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0017455:	83 c4 10             	add    esp,0x10
c0017458:	e9 eb fc ff ff       	jmp    c0017148 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001745d:	31 c0                	xor    eax,eax
c001745f:	eb 33                	jmp    c0017494 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017461:	83 ec 0c             	sub    esp,0xc
c0017464:	55                   	push   ebp
c0017465:	e8 36 5c ff ff       	call   c000d0a0 <File::close()>
c001746a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001746d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017470:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017473:	58                   	pop    eax
c0017474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017478:	e8 56 25 ff ff       	call   c00099d3 <free>
c001747d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017480:	e8 4e 25 ff ff       	call   c00099d3 <free>
c0017485:	5a                   	pop    edx
c0017486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001748a:	e8 44 25 ff ff       	call   c00099d3 <free>
c001748f:	83 c4 10             	add    esp,0x10
c0017492:	b0 01                	mov    al,0x1
c0017494:	81 c4 5c 03 00 00    	add    esp,0x35c
c001749a:	5b                   	pop    ebx
c001749b:	5e                   	pop    esi
c001749c:	5f                   	pop    edi
c001749d:	5d                   	pop    ebp
c001749e:	c3                   	ret    

c001749f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001749f:	56                   	push   esi
c00174a0:	31 d2                	xor    edx,edx
c00174a2:	53                   	push   ebx
c00174a3:	8b 1d 00 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027100
c00174a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174ad:	39 d3                	cmp    ebx,edx
c00174af:	7e 1b                	jle    c00174cc <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00174b1:	8b 04 95 20 73 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8ce0]
c00174b8:	39 c8                	cmp    eax,ecx
c00174ba:	77 0d                	ja     c00174c9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00174bc:	8b 34 95 20 71 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8ee0]
c00174c3:	01 c6                	add    esi,eax
c00174c5:	39 ce                	cmp    esi,ecx
c00174c7:	77 05                	ja     c00174ce <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00174c9:	42                   	inc    edx
c00174ca:	eb e1                	jmp    c00174ad <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00174cc:	31 c0                	xor    eax,eax
c00174ce:	5b                   	pop    ebx
c00174cf:	5e                   	pop    esi
c00174d0:	c3                   	ret    

c00174d1 <Thr::getDriverNameFromAddress(unsigned long)>:
c00174d1:	53                   	push   ebx
c00174d2:	31 c0                	xor    eax,eax
c00174d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00174d8:	8b 1d 00 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027100
c00174de:	39 c3                	cmp    ebx,eax
c00174e0:	7e 22                	jle    c0017504 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00174e2:	8b 14 85 20 73 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8ce0]
c00174e9:	39 ca                	cmp    edx,ecx
c00174eb:	77 14                	ja     c0017501 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00174ed:	03 14 85 20 71 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8ee0]
c00174f4:	39 ca                	cmp    edx,ecx
c00174f6:	76 09                	jbe    c0017501 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00174f8:	8b 04 85 20 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ae0]
c00174ff:	eb 05                	jmp    c0017506 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017501:	40                   	inc    eax
c0017502:	eb da                	jmp    c00174de <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017504:	31 c0                	xor    eax,eax
c0017506:	5b                   	pop    ebx
c0017507:	c3                   	ret    

c0017508 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017508:	53                   	push   ebx
c0017509:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001750d:	53                   	push   ebx
c001750e:	e8 8c ff ff ff       	call   c001749f <Thr::getDriverBaseFromAddress(unsigned long)>
c0017513:	5a                   	pop    edx
c0017514:	31 d2                	xor    edx,edx
c0017516:	85 c0                	test   eax,eax
c0017518:	74 04                	je     c001751e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001751a:	89 da                	mov    edx,ebx
c001751c:	29 c2                	sub    edx,eax
c001751e:	89 d0                	mov    eax,edx
c0017520:	5b                   	pop    ebx
c0017521:	c3                   	ret    

c0017522 <Thr::loadDLL(char const*, bool)>:
c0017522:	55                   	push   ebp
c0017523:	57                   	push   edi
c0017524:	56                   	push   esi
c0017525:	53                   	push   ebx
c0017526:	81 ec 34 01 00 00    	sub    esp,0x134
c001752c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017533:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001753a:	56                   	push   esi
c001753b:	68 8e 47 02 c0       	push   0xc002478e
c0017540:	e8 2e 55 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0017545:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001754c:	e8 72 24 ff ff       	call   c00099c3 <malloc>
c0017551:	83 c4 0c             	add    esp,0xc
c0017554:	89 c3                	mov    ebx,eax
c0017556:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c001755c:	56                   	push   esi
c001755d:	50                   	push   eax
c001755e:	e8 7b 5a ff ff       	call   c000cfde <File::File(char const*, Process*)>
c0017563:	83 c4 10             	add    esp,0x10
c0017566:	85 db                	test   ebx,ebx
c0017568:	75 3c                	jne    c00175a6 <Thr::loadDLL(char const*, bool)+0x84>
c001756a:	89 f8                	mov    eax,edi
c001756c:	84 c0                	test   al,al
c001756e:	0f 84 d2 01 00 00    	je     c0017746 <Thr::loadDLL(char const*, bool)+0x224>
c0017574:	55                   	push   ebp
c0017575:	55                   	push   ebp
c0017576:	68 9f 47 02 c0       	push   0xc002479f
c001757b:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001757f:	55                   	push   ebp
c0017580:	e8 bb 91 fe ff       	call   c0000740 <strcpy>
c0017585:	58                   	pop    eax
c0017586:	5a                   	pop    edx
c0017587:	56                   	push   esi
c0017588:	55                   	push   ebp
c0017589:	e8 f2 92 fe ff       	call   c0000880 <strcat>
c001758e:	59                   	pop    ecx
c001758f:	58                   	pop    eax
c0017590:	68 b2 47 02 c0       	push   0xc00247b2
c0017595:	55                   	push   ebp
c0017596:	e8 e5 92 fe ff       	call   c0000880 <strcat>
c001759b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001759e:	e8 92 cd ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00175a3:	83 c4 10             	add    esp,0x10
c00175a6:	51                   	push   ecx
c00175a7:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00175ab:	50                   	push   eax
c00175ac:	8d 44 24 20          	lea    eax,[esp+0x20]
c00175b0:	50                   	push   eax
c00175b1:	53                   	push   ebx
c00175b2:	e8 37 5d ff ff       	call   c000d2ee <File::stat(unsigned long long*, bool*)>
c00175b7:	83 c4 10             	add    esp,0x10
c00175ba:	85 db                	test   ebx,ebx
c00175bc:	74 0c                	je     c00175ca <Thr::loadDLL(char const*, bool)+0xa8>
c00175be:	83 ec 0c             	sub    esp,0xc
c00175c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00175c3:	53                   	push   ebx
c00175c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00175c7:	83 c4 10             	add    esp,0x10
c00175ca:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00175cf:	75 0a                	jne    c00175db <Thr::loadDLL(char const*, bool)+0xb9>
c00175d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00175d5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00175d9:	75 3c                	jne    c0017617 <Thr::loadDLL(char const*, bool)+0xf5>
c00175db:	89 f8                	mov    eax,edi
c00175dd:	84 c0                	test   al,al
c00175df:	0f 84 49 01 00 00    	je     c001772e <Thr::loadDLL(char const*, bool)+0x20c>
c00175e5:	51                   	push   ecx
c00175e6:	51                   	push   ecx
c00175e7:	68 9f 47 02 c0       	push   0xc002479f
c00175ec:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00175f0:	53                   	push   ebx
c00175f1:	e8 4a 91 fe ff       	call   c0000740 <strcpy>
c00175f6:	5d                   	pop    ebp
c00175f7:	58                   	pop    eax
c00175f8:	56                   	push   esi
c00175f9:	53                   	push   ebx
c00175fa:	e8 81 92 fe ff       	call   c0000880 <strcat>
c00175ff:	58                   	pop    eax
c0017600:	5a                   	pop    edx
c0017601:	68 b2 47 02 c0       	push   0xc00247b2
c0017606:	53                   	push   ebx
c0017607:	e8 74 92 fe ff       	call   c0000880 <strcat>
c001760c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001760f:	e8 21 cd ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0017614:	83 c4 10             	add    esp,0x10
c0017617:	52                   	push   edx
c0017618:	6a 03                	push   0x3
c001761a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001761e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017622:	05 ff 0f 00 00       	add    eax,0xfff
c0017627:	83 d2 00             	adc    edx,0x0
c001762a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001762e:	50                   	push   eax
c001762f:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c0017635:	e8 10 48 ff ff       	call   c000be4a <VAS::allocatePages(int, int)>
c001763a:	59                   	pop    ecx
c001763b:	89 c3                	mov    ebx,eax
c001763d:	5d                   	pop    ebp
c001763e:	50                   	push   eax
c001763f:	68 0e 29 02 c0       	push   0xc002290e
c0017644:	e8 2a 54 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0017649:	89 34 24             	mov    DWORD PTR [esp],esi
c001764c:	e8 4f 90 fe ff       	call   c00006a0 <strlen>
c0017651:	8b 2d 00 71 02 c0    	mov    ebp,DWORD PTR ds:0xc0027100
c0017657:	40                   	inc    eax
c0017658:	89 04 24             	mov    DWORD PTR [esp],eax
c001765b:	e8 63 23 ff ff       	call   c00099c3 <malloc>
c0017660:	89 04 ad 20 75 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8ae0],eax
c0017667:	58                   	pop    eax
c0017668:	a1 00 71 02 c0       	mov    eax,ds:0xc0027100
c001766d:	5a                   	pop    edx
c001766e:	56                   	push   esi
c001766f:	ff 34 85 20 75 02 c0 	push   DWORD PTR [eax*4-0x3ffd8ae0]
c0017676:	e8 c5 90 fe ff       	call   c0000740 <strcpy>
c001767b:	a1 00 71 02 c0       	mov    eax,ds:0xc0027100
c0017680:	8d 50 01             	lea    edx,[eax+0x1]
c0017683:	89 1c 85 20 73 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8ce0],ebx
c001768a:	89 15 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,edx
c0017690:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017694:	83 c4 0c             	add    esp,0xc
c0017697:	89 14 85 20 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8ee0],edx
c001769e:	6a 01                	push   0x1
c00176a0:	53                   	push   ebx
c00176a1:	56                   	push   esi
c00176a2:	e8 c2 f6 ff ff       	call   c0016d69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00176a7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00176ab:	83 c4 10             	add    esp,0x10
c00176ae:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00176b3:	0f 85 89 00 00 00    	jne    c0017742 <Thr::loadDLL(char const*, bool)+0x220>
c00176b9:	89 f8                	mov    eax,edi
c00176bb:	84 c0                	test   al,al
c00176bd:	74 73                	je     c0017732 <Thr::loadDLL(char const*, bool)+0x210>
c00176bf:	83 ec 0c             	sub    esp,0xc
c00176c2:	68 b4 47 02 c0       	push   0xc00247b4
c00176c7:	e8 69 cc ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00176cc:	83 c4 10             	add    esp,0x10
c00176cf:	eb 61                	jmp    c0017732 <Thr::loadDLL(char const*, bool)+0x210>
c00176d1:	50                   	push   eax
c00176d2:	50                   	push   eax
c00176d3:	89 e8                	mov    eax,ebp
c00176d5:	c1 e0 0c             	shl    eax,0xc
c00176d8:	01 d8                	add    eax,ebx
c00176da:	50                   	push   eax
c00176db:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c00176e1:	e8 cc 42 ff ff       	call   c000b9b2 <VAS::getPageTableEntry(unsigned long)>
c00176e6:	83 c4 10             	add    esp,0x10
c00176e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00176eb:	a8 60                	test   al,0x60
c00176ed:	75 11                	jne    c0017700 <Thr::loadDLL(char const*, bool)+0x1de>
c00176ef:	83 ec 0c             	sub    esp,0xc
c00176f2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00176f7:	50                   	push   eax
c00176f8:	e8 51 26 ff ff       	call   c0009d4e <Phys::freePage(unsigned long)>
c00176fd:	83 c4 10             	add    esp,0x10
c0017700:	45                   	inc    ebp
c0017701:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017705:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017709:	05 ff 0f 00 00       	add    eax,0xfff
c001770e:	bf 00 00 00 00       	mov    edi,0x0
c0017713:	83 d2 00             	adc    edx,0x0
c0017716:	0f ac d0 0c          	shrd   eax,edx,0xc
c001771a:	c1 ea 0c             	shr    edx,0xc
c001771d:	39 c5                	cmp    ebp,eax
c001771f:	89 d1                	mov    ecx,edx
c0017721:	89 f8                	mov    eax,edi
c0017723:	19 c8                	sbb    eax,ecx
c0017725:	72 aa                	jb     c00176d1 <Thr::loadDLL(char const*, bool)+0x1af>
c0017727:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001772c:	75 18                	jne    c0017746 <Thr::loadDLL(char const*, bool)+0x224>
c001772e:	31 db                	xor    ebx,ebx
c0017730:	eb 14                	jmp    c0017746 <Thr::loadDLL(char const*, bool)+0x224>
c0017732:	83 ec 0c             	sub    esp,0xc
c0017735:	68 d3 47 02 c0       	push   0xc00247d3
c001773a:	e8 f6 cb ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001773f:	83 c4 10             	add    esp,0x10
c0017742:	31 ed                	xor    ebp,ebp
c0017744:	eb bb                	jmp    c0017701 <Thr::loadDLL(char const*, bool)+0x1df>
c0017746:	81 c4 2c 01 00 00    	add    esp,0x12c
c001774c:	89 d8                	mov    eax,ebx
c001774e:	5b                   	pop    ebx
c001774f:	5e                   	pop    esi
c0017750:	5f                   	pop    edi
c0017751:	5d                   	pop    ebp
c0017752:	c3                   	ret    

c0017753 <Thr::executeDLL(unsigned long, void*)>:
c0017753:	56                   	push   esi
c0017754:	53                   	push   ebx
c0017755:	52                   	push   edx
c0017756:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001775a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001775e:	85 db                	test   ebx,ebx
c0017760:	75 10                	jne    c0017772 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017762:	83 ec 0c             	sub    esp,0xc
c0017765:	68 ef 47 02 c0       	push   0xc00247ef
c001776a:	e8 c6 cb ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001776f:	83 c4 10             	add    esp,0x10
c0017772:	50                   	push   eax
c0017773:	50                   	push   eax
c0017774:	53                   	push   ebx
c0017775:	68 19 48 02 c0       	push   0xc0024819
c001777a:	e8 f4 52 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001777f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017783:	89 d8                	mov    eax,ebx
c0017785:	83 c4 14             	add    esp,0x14
c0017788:	5b                   	pop    ebx
c0017789:	5e                   	pop    esi
c001778a:	ff e0                	jmp    eax

c001778c <userModeEntryPoint(void*)>:
c001778c:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0017791:	48                   	dec    eax
c0017792:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0017797:	75 03                	jne    c001779c <userModeEntryPoint(void*)+0x10>
c0017799:	fb                   	sti    
c001779a:	66 90                	xchg   ax,ax
c001779c:	fb                   	sti    
c001779d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177a5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00177ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00177af:	e9 ab 8a fe ff       	jmp    c000025f <goToUsermode>

c00177b4 <changeTSS>:
c00177b4:	83 ec 14             	sub    esp,0x14
c00177b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177bc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00177bf:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00177c4:	c1 e2 15             	shl    edx,0x15
c00177c7:	29 d0                	sub    eax,edx
c00177c9:	50                   	push   eax
c00177ca:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c00177cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00177d5:	05 7c 11 00 00       	add    eax,0x117c
c00177da:	50                   	push   eax
c00177db:	e8 14 38 ff ff       	call   c000aff4 <TSS::setESP(unsigned long)>
c00177e0:	83 c4 1c             	add    esp,0x1c
c00177e3:	c3                   	ret    

c00177e4 <switchToThread(ThreadControlBlock*)>:
c00177e4:	57                   	push   edi
c00177e5:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00177ea:	56                   	push   esi
c00177eb:	85 c0                	test   eax,eax
c00177ed:	53                   	push   ebx
c00177ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00177f2:	0f 85 90 00 00 00    	jne    c0017888 <switchToThread(ThreadControlBlock*)+0xa4>
c00177f8:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c00177fb:	3c ff                	cmp    al,0xff
c00177fd:	0f 84 81 00 00 00    	je     c0017884 <switchToThread(ThreadControlBlock*)+0xa0>
c0017803:	0f b6 d0             	movzx  edx,al
c0017806:	b8 00 04 00 00       	mov    eax,0x400
c001780b:	29 d0                	sub    eax,edx
c001780d:	d1 f8                	sar    eax,1
c001780f:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0017812:	66 90                	xchg   ax,ax
c0017814:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0017817:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c001781c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017822:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017829:	74 4d                	je     c0017878 <switchToThread(ThreadControlBlock*)+0x94>
c001782b:	0f 31                	rdtsc  
c001782d:	a3 08 79 02 c0       	mov    ds:0xc0027908,eax
c0017832:	89 c6                	mov    esi,eax
c0017834:	89 d7                	mov    edi,edx
c0017836:	2b 35 f8 78 02 c0    	sub    esi,DWORD PTR ds:0xc00278f8
c001783c:	89 15 0c 79 02 c0    	mov    DWORD PTR ds:0xc002790c,edx
c0017842:	1b 3d fc 78 02 c0    	sbb    edi,DWORD PTR ds:0xc00278fc
c0017848:	89 35 00 79 02 c0    	mov    DWORD PTR ds:0xc0027900,esi
c001784e:	a3 f8 78 02 c0       	mov    ds:0xc00278f8,eax
c0017853:	89 3d 04 79 02 c0    	mov    DWORD PTR ds:0xc0027904,edi
c0017859:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001785f:	89 15 fc 78 02 c0    	mov    DWORD PTR ds:0xc00278fc,edx
c0017865:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017868:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001786b:	01 c6                	add    esi,eax
c001786d:	11 d7                	adc    edi,edx
c001786f:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0017872:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0017875:	8d 76 00             	lea    esi,[esi+0x0]
c0017878:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001787c:	5b                   	pop    ebx
c001787d:	5e                   	pop    esi
c001787e:	5f                   	pop    edi
c001787f:	e9 13 8a fe ff       	jmp    c0000297 <switchToThreadASM>
c0017884:	31 c0                	xor    eax,eax
c0017886:	eb 8c                	jmp    c0017814 <switchToThread(ThreadControlBlock*)+0x30>
c0017888:	5b                   	pop    ebx
c0017889:	c7 05 c0 78 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x1
c0017893:	5e                   	pop    esi
c0017894:	5f                   	pop    edi
c0017895:	c3                   	ret    
c0017896:	66 90                	xchg   ax,ax

c0017898 <Process::addArgs(char**)>:
c0017898:	57                   	push   edi
c0017899:	56                   	push   esi
c001789a:	53                   	push   ebx
c001789b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001789f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00178a3:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00178ad:	85 ff                	test   edi,edi
c00178af:	74 43                	je     c00178f4 <Process::addArgs(char**)+0x5c>
c00178b1:	8b 07                	mov    eax,DWORD PTR [edi]
c00178b3:	85 c0                	test   eax,eax
c00178b5:	74 3d                	je     c00178f4 <Process::addArgs(char**)+0x5c>
c00178b7:	31 db                	xor    ebx,ebx
c00178b9:	8d 76 00             	lea    esi,[esi+0x0]
c00178bc:	83 ec 0c             	sub    esp,0xc
c00178bf:	50                   	push   eax
c00178c0:	e8 db 8d fe ff       	call   c00006a0 <strlen>
c00178c5:	40                   	inc    eax
c00178c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00178c9:	e8 f5 20 ff ff       	call   c00099c3 <malloc>
c00178ce:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00178d5:	5a                   	pop    edx
c00178d6:	59                   	pop    ecx
c00178d7:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00178da:	43                   	inc    ebx
c00178db:	50                   	push   eax
c00178dc:	e8 5f 8e fe ff       	call   c0000740 <strcpy>
c00178e1:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00178e7:	83 c4 10             	add    esp,0x10
c00178ea:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00178ed:	85 c0                	test   eax,eax
c00178ef:	75 cb                	jne    c00178bc <Process::addArgs(char**)+0x24>
c00178f1:	8d 76 00             	lea    esi,[esi+0x0]
c00178f4:	5b                   	pop    ebx
c00178f5:	5e                   	pop    esi
c00178f6:	5f                   	pop    edi
c00178f7:	c3                   	ret    

c00178f8 <Process::Process(char const*, Process*, char**)>:
c00178f8:	56                   	push   esi
c00178f9:	53                   	push   ebx
c00178fa:	83 ec 14             	sub    esp,0x14
c00178fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017901:	05 0c 02 00 00       	add    eax,0x20c
c0017906:	bb 07 00 00 00       	mov    ebx,0x7
c001790b:	89 c6                	mov    esi,eax
c001790d:	8d 76 00             	lea    esi,[esi+0x0]
c0017910:	85 db                	test   ebx,ebx
c0017912:	78 14                	js     c0017928 <Process::Process(char const*, Process*, char**)+0x30>
c0017914:	83 ec 0c             	sub    esp,0xc
c0017917:	56                   	push   esi
c0017918:	e8 23 9f 00 00       	call   c0021840 <ThreadControlBlock::ThreadControlBlock()>
c001791d:	83 c4 10             	add    esp,0x10
c0017920:	83 c6 5f             	add    esi,0x5f
c0017923:	4b                   	dec    ebx
c0017924:	eb ea                	jmp    c0017910 <Process::Process(char const*, Process*, char**)+0x18>
c0017926:	66 90                	xchg   ax,ax
c0017928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001792c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017933:	83 ec 0c             	sub    esp,0xc
c0017936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001793a:	e8 7f c8 ff ff       	call   c00141be <Krnl::newProcessEnv(Process*)>
c001793f:	83 c4 10             	add    esp,0x10
c0017942:	89 c2                	mov    edx,eax
c0017944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017948:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001794e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017952:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001795b:	a1 30 5e 02 c0       	mov    eax,ds:0xc0025e30
c0017960:	8d 50 01             	lea    edx,[eax+0x1]
c0017963:	89 15 30 5e 02 c0    	mov    DWORD PTR ds:0xc0025e30,edx
c0017969:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001796d:	89 02                	mov    DWORD PTR [edx],eax
c001796f:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0017977:	83 ec 0c             	sub    esp,0xc
c001797a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001797e:	e8 40 20 ff ff       	call   c00099c3 <malloc>
c0017983:	83 c4 10             	add    esp,0x10
c0017986:	89 c3                	mov    ebx,eax
c0017988:	83 ec 08             	sub    esp,0x8
c001798b:	6a 00                	push   0x0
c001798d:	53                   	push   ebx
c001798e:	e8 5f 48 ff ff       	call   c000c1f2 <VAS::VAS(bool)>
c0017993:	83 c4 10             	add    esp,0x10
c0017996:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001799a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00179a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179a4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00179ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179b6:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00179bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179c0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00179c6:	85 c0                	test   eax,eax
c00179c8:	74 42                	je     c0017a0c <Process::Process(char const*, Process*, char**)+0x114>
c00179ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ce:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00179d4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00179da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179de:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00179e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179e8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00179ee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00179f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179f8:	05 0c 01 00 00       	add    eax,0x10c
c00179fd:	83 ec 08             	sub    esp,0x8
c0017a00:	52                   	push   edx
c0017a01:	50                   	push   eax
c0017a02:	e8 39 8d fe ff       	call   c0000740 <strcpy>
c0017a07:	83 c4 10             	add    esp,0x10
c0017a0a:	eb 64                	jmp    c0017a70 <Process::Process(char const*, Process*, char**)+0x178>
c0017a0c:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c0017a14:	83 ec 0c             	sub    esp,0xc
c0017a17:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a1b:	e8 a3 1f ff ff       	call   c00099c3 <malloc>
c0017a20:	83 c4 10             	add    esp,0x10
c0017a23:	89 c3                	mov    ebx,eax
c0017a25:	83 ec 08             	sub    esp,0x8
c0017a28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a2c:	53                   	push   ebx
c0017a2d:	e8 d2 32 ff ff       	call   c000ad04 <VgaText::VgaText(char const*)>
c0017a32:	83 c4 10             	add    esp,0x10
c0017a35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a39:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017a3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a43:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a49:	83 ec 0c             	sub    esp,0xc
c0017a4c:	50                   	push   eax
c0017a4d:	e8 71 2a ff ff       	call   c000a4c3 <addToTerminalCycle(VgaText*)>
c0017a52:	83 c4 10             	add    esp,0x10
c0017a55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a59:	05 0c 01 00 00       	add    eax,0x10c
c0017a5e:	83 ec 08             	sub    esp,0x8
c0017a61:	68 38 48 02 c0       	push   0xc0024838
c0017a66:	50                   	push   eax
c0017a67:	e8 d4 8c fe ff       	call   c0000740 <strcpy>
c0017a6c:	83 c4 10             	add    esp,0x10
c0017a6f:	90                   	nop
c0017a70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a74:	83 c0 0c             	add    eax,0xc
c0017a77:	83 ec 08             	sub    esp,0x8
c0017a7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a7e:	50                   	push   eax
c0017a7f:	e8 bc 8c fe ff       	call   c0000740 <strcpy>
c0017a84:	83 c4 10             	add    esp,0x10
c0017a87:	83 ec 08             	sub    esp,0x8
c0017a8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017a8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a92:	e8 01 fe ff ff       	call   c0017898 <Process::addArgs(char**)>
c0017a97:	83 c4 10             	add    esp,0x10
c0017a9a:	83 ec 08             	sub    esp,0x8
c0017a9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017aa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017aa5:	e8 89 ed ff ff       	call   c0016833 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017aaa:	83 c4 10             	add    esp,0x10
c0017aad:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017ab1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017ab5:	83 f0 01             	xor    eax,0x1
c0017ab8:	88 c2                	mov    dl,al
c0017aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017abe:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0017ac4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017ac9:	83 ec 08             	sub    esp,0x8
c0017acc:	50                   	push   eax
c0017acd:	68 90 48 02 c0       	push   0xc0024890
c0017ad2:	e8 9c 4f ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0017ad7:	83 c4 10             	add    esp,0x10
c0017ada:	90                   	nop
c0017adb:	83 c4 14             	add    esp,0x14
c0017ade:	5b                   	pop    ebx
c0017adf:	5e                   	pop    esi
c0017ae0:	c3                   	ret    
c0017ae1:	90                   	nop
c0017ae2:	66 90                	xchg   ax,ax

c0017ae4 <Process::Process(bool, char const*, Process*, char**)>:
c0017ae4:	56                   	push   esi
c0017ae5:	53                   	push   ebx
c0017ae6:	83 ec 24             	sub    esp,0x24
c0017ae9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017aed:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017af1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017af5:	05 0c 02 00 00       	add    eax,0x20c
c0017afa:	bb 07 00 00 00       	mov    ebx,0x7
c0017aff:	89 c6                	mov    esi,eax
c0017b01:	8d 76 00             	lea    esi,[esi+0x0]
c0017b04:	85 db                	test   ebx,ebx
c0017b06:	78 14                	js     c0017b1c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017b08:	83 ec 0c             	sub    esp,0xc
c0017b0b:	56                   	push   esi
c0017b0c:	e8 2f 9d 00 00       	call   c0021840 <ThreadControlBlock::ThreadControlBlock()>
c0017b11:	83 c4 10             	add    esp,0x10
c0017b14:	83 c6 5f             	add    esi,0x5f
c0017b17:	4b                   	dec    ebx
c0017b18:	eb ea                	jmp    c0017b04 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0017b1a:	66 90                	xchg   ax,ax
c0017b1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b20:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017b27:	83 ec 0c             	sub    esp,0xc
c0017b2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017b2e:	e8 8b c6 ff ff       	call   c00141be <Krnl::newProcessEnv(Process*)>
c0017b33:	83 c4 10             	add    esp,0x10
c0017b36:	89 c2                	mov    edx,eax
c0017b38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b3c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017b42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b46:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017b4f:	a1 30 5e 02 c0       	mov    eax,ds:0xc0025e30
c0017b54:	8d 50 01             	lea    edx,[eax+0x1]
c0017b57:	89 15 30 5e 02 c0    	mov    DWORD PTR ds:0xc0025e30,edx
c0017b5d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b61:	89 02                	mov    DWORD PTR [edx],eax
c0017b63:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0017b6b:	83 ec 0c             	sub    esp,0xc
c0017b6e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017b72:	e8 4c 1e ff ff       	call   c00099c3 <malloc>
c0017b77:	83 c4 10             	add    esp,0x10
c0017b7a:	89 c3                	mov    ebx,eax
c0017b7c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017b81:	83 ec 08             	sub    esp,0x8
c0017b84:	50                   	push   eax
c0017b85:	53                   	push   ebx
c0017b86:	e8 67 46 ff ff       	call   c000c1f2 <VAS::VAS(bool)>
c0017b8b:	83 c4 10             	add    esp,0x10
c0017b8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b92:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017b98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b9c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017ba6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017baa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017bae:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017bb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bb8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017bbe:	85 c0                	test   eax,eax
c0017bc0:	74 42                	je     c0017c04 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0017bc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bc6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017bcc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017bd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bd6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017bdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017be0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017be6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017bec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bf0:	05 0c 01 00 00       	add    eax,0x10c
c0017bf5:	83 ec 08             	sub    esp,0x8
c0017bf8:	52                   	push   edx
c0017bf9:	50                   	push   eax
c0017bfa:	e8 41 8b fe ff       	call   c0000740 <strcpy>
c0017bff:	83 c4 10             	add    esp,0x10
c0017c02:	eb 64                	jmp    c0017c68 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0017c04:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0017c0c:	83 ec 0c             	sub    esp,0xc
c0017c0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017c13:	e8 ab 1d ff ff       	call   c00099c3 <malloc>
c0017c18:	83 c4 10             	add    esp,0x10
c0017c1b:	89 c3                	mov    ebx,eax
c0017c1d:	83 ec 08             	sub    esp,0x8
c0017c20:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017c24:	53                   	push   ebx
c0017c25:	e8 da 30 ff ff       	call   c000ad04 <VgaText::VgaText(char const*)>
c0017c2a:	83 c4 10             	add    esp,0x10
c0017c2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c31:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017c37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c3b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c41:	83 ec 0c             	sub    esp,0xc
c0017c44:	50                   	push   eax
c0017c45:	e8 79 28 ff ff       	call   c000a4c3 <addToTerminalCycle(VgaText*)>
c0017c4a:	83 c4 10             	add    esp,0x10
c0017c4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c51:	05 0c 01 00 00       	add    eax,0x10c
c0017c56:	83 ec 08             	sub    esp,0x8
c0017c59:	68 38 48 02 c0       	push   0xc0024838
c0017c5e:	50                   	push   eax
c0017c5f:	e8 dc 8a fe ff       	call   c0000740 <strcpy>
c0017c64:	83 c4 10             	add    esp,0x10
c0017c67:	90                   	nop
c0017c68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c6c:	83 c0 0c             	add    eax,0xc
c0017c6f:	83 ec 08             	sub    esp,0x8
c0017c72:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017c76:	50                   	push   eax
c0017c77:	e8 c4 8a fe ff       	call   c0000740 <strcpy>
c0017c7c:	83 c4 10             	add    esp,0x10
c0017c7f:	83 ec 08             	sub    esp,0x8
c0017c82:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017c86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017c8a:	e8 09 fc ff ff       	call   c0017898 <Process::addArgs(char**)>
c0017c8f:	83 c4 10             	add    esp,0x10
c0017c92:	90                   	nop
c0017c93:	83 c4 24             	add    esp,0x24
c0017c96:	5b                   	pop    ebx
c0017c97:	5e                   	pop    esi
c0017c98:	c3                   	ret    
c0017c99:	8d 76 00             	lea    esi,[esi+0x0]

c0017c9c <taskStartupFunction>:
c0017c9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ca1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0017ca4:	c3                   	ret    
c0017ca5:	90                   	nop
c0017ca6:	66 90                	xchg   ax,ax

c0017ca8 <Semaphore::Semaphore(int)>:
c0017ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017cb0:	89 10                	mov    DWORD PTR [eax],edx
c0017cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cb6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017cbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cc1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ccc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017cd3:	90                   	nop
c0017cd4:	c3                   	ret    
c0017cd5:	90                   	nop
c0017cd6:	66 90                	xchg   ax,ax

c0017cd8 <Mutex::Mutex()>:
c0017cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cdc:	6a 01                	push   0x1
c0017cde:	50                   	push   eax
c0017cdf:	e8 c4 ff ff ff       	call   c0017ca8 <Semaphore::Semaphore(int)>
c0017ce4:	83 c4 08             	add    esp,0x8
c0017ce7:	90                   	nop
c0017ce8:	c3                   	ret    
c0017ce9:	90                   	nop
c0017cea:	66 90                	xchg   ax,ax

c0017cec <Process::createThread(void (*)(void*), void*, int)>:
c0017cec:	57                   	push   edi
c0017ced:	31 c9                	xor    ecx,ecx
c0017cef:	56                   	push   esi
c0017cf0:	53                   	push   ebx
c0017cf1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017cf5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0017cfc:	89 f2                	mov    edx,esi
c0017cfe:	66 90                	xchg   ax,ax
c0017d00:	0f b7 c2             	movzx  eax,dx
c0017d03:	83 e2 01             	and    edx,0x1
c0017d06:	74 14                	je     c0017d1c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0017d08:	d1 f8                	sar    eax,1
c0017d0a:	41                   	inc    ecx
c0017d0b:	89 c2                	mov    edx,eax
c0017d0d:	83 f9 10             	cmp    ecx,0x10
c0017d10:	75 ee                	jne    c0017d00 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0017d12:	31 db                	xor    ebx,ebx
c0017d14:	89 d8                	mov    eax,ebx
c0017d16:	5b                   	pop    ebx
c0017d17:	5e                   	pop    esi
c0017d18:	5f                   	pop    edi
c0017d19:	c3                   	ret    
c0017d1a:	66 90                	xchg   ax,ax
c0017d1c:	b8 01 00 00 00       	mov    eax,0x1
c0017d21:	d3 e0                	shl    eax,cl
c0017d23:	09 c6                	or     esi,eax
c0017d25:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017d28:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0017d2f:	01 c0                	add    eax,eax
c0017d31:	01 c8                	add    eax,ecx
c0017d33:	8d 04 80             	lea    eax,[eax+eax*4]
c0017d36:	01 d8                	add    eax,ebx
c0017d38:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0017d3f:	75 0b                	jne    c0017d4c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0017d41:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0017d4b:	90                   	nop
c0017d4c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017d52:	83 ec 08             	sub    esp,0x8
c0017d55:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0017d58:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017d5b:	01 c0                	add    eax,eax
c0017d5d:	01 c8                	add    eax,ecx
c0017d5f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0017d62:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0017d65:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017d6b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0017d71:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d75:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0017d7b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0017d81:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0017d88:	89 ca                	mov    edx,ecx
c0017d8a:	f7 da                	neg    edx
c0017d8c:	c1 e2 15             	shl    edx,0x15
c0017d8f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017d95:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017d9b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017d9f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017da9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0017daf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017db3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017db9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017dc3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017dcd:	53                   	push   ebx
c0017dce:	68 e4 78 02 c0       	push   0xc00278e4
c0017dd3:	e8 08 98 00 00       	call   c00215e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017dd8:	83 c4 10             	add    esp,0x10
c0017ddb:	89 d8                	mov    eax,ebx
c0017ddd:	5b                   	pop    ebx
c0017dde:	5e                   	pop    esi
c0017ddf:	5f                   	pop    edi
c0017de0:	c3                   	ret    
c0017de1:	90                   	nop
c0017de2:	66 90                	xchg   ax,ax

c0017de4 <Process::createUserThread()>:
c0017de4:	83 ec 0c             	sub    esp,0xc
c0017de7:	68 80 00 00 00       	push   0x80
c0017dec:	6a 00                	push   0x0
c0017dee:	68 8c 77 01 c0       	push   0xc001778c
c0017df3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017df7:	e8 f0 fe ff ff       	call   c0017cec <Process::createThread(void (*)(void*), void*, int)>
c0017dfc:	83 c4 1c             	add    esp,0x1c
c0017dff:	c3                   	ret    

c0017e00 <setupMultitasking(void (*)())>:
c0017e00:	56                   	push   esi
c0017e01:	53                   	push   ebx
c0017e02:	51                   	push   ecx
c0017e03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e07:	eb 13                	jmp    c0017e1c <setupMultitasking(void (*)())+0x1c>
c0017e09:	8d 76 00             	lea    esi,[esi+0x0]
c0017e0c:	83 ec 0c             	sub    esp,0xc
c0017e0f:	68 e4 78 02 c0       	push   0xc00278e4
c0017e14:	e8 0f 97 00 00       	call   c0021528 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017e19:	83 c4 10             	add    esp,0x10
c0017e1c:	83 ec 0c             	sub    esp,0xc
c0017e1f:	68 e4 78 02 c0       	push   0xc00278e4
c0017e24:	e8 db 96 00 00       	call   c0021504 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017e29:	83 c4 10             	add    esp,0x10
c0017e2c:	84 c0                	test   al,al
c0017e2e:	74 dc                	je     c0017e0c <setupMultitasking(void (*)())+0xc>
c0017e30:	83 ec 0c             	sub    esp,0xc
c0017e33:	68 1f 07 00 00       	push   0x71f
c0017e38:	e8 86 1b ff ff       	call   c00099c3 <malloc>
c0017e3d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e44:	89 c3                	mov    ebx,eax
c0017e46:	6a 00                	push   0x0
c0017e48:	68 3c 48 02 c0       	push   0xc002483c
c0017e4d:	6a 01                	push   0x1
c0017e4f:	50                   	push   eax
c0017e50:	e8 8f fc ff ff       	call   c0017ae4 <Process::Process(bool, char const*, Process*, char**)>
c0017e55:	83 c4 14             	add    esp,0x14
c0017e58:	89 1d f0 78 02 c0    	mov    DWORD PTR ds:0xc00278f0,ebx
c0017e5e:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0017e64:	e8 68 29 ff ff       	call   c000a7d1 <setActiveTerminal(VgaText*)>
c0017e69:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0017e71:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0017e7b:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017e81:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017e84:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0017e8e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017e94:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0017e9a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017ea4:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0017eae:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017eb8:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017ebe:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017ec8:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017ece:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017ed8:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017ede:	58                   	pop    eax
c0017edf:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017ee5:	5a                   	pop    edx
c0017ee6:	68 38 48 02 c0       	push   0xc0024838
c0017eeb:	50                   	push   eax
c0017eec:	e8 4f 88 fe ff       	call   c0000740 <strcpy>
c0017ef1:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0017ef8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017efc:	83 c4 14             	add    esp,0x14
c0017eff:	5b                   	pop    ebx
c0017f00:	5e                   	pop    esi
c0017f01:	e9 83 83 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0017f06:	66 90                	xchg   ax,ax

c0017f08 <schedule()>:
c0017f08:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c0017f0d:	85 c0                	test   eax,eax
c0017f0f:	74 0b                	je     c0017f1c <schedule()+0x14>
c0017f11:	c7 05 c0 78 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x1
c0017f1b:	c3                   	ret    
c0017f1c:	53                   	push   ebx
c0017f1d:	83 ec 14             	sub    esp,0x14
c0017f20:	68 e4 78 02 c0       	push   0xc00278e4
c0017f25:	e8 da 95 00 00       	call   c0021504 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017f2a:	83 c4 10             	add    esp,0x10
c0017f2d:	84 c0                	test   al,al
c0017f2f:	75 3b                	jne    c0017f6c <schedule()+0x64>
c0017f31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f36:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017f39:	4a                   	dec    edx
c0017f3a:	74 38                	je     c0017f74 <schedule()+0x6c>
c0017f3c:	83 ec 0c             	sub    esp,0xc
c0017f3f:	68 e4 78 02 c0       	push   0xc00278e4
c0017f44:	e8 d7 95 00 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017f49:	c7 04 24 e4 78 02 c0 	mov    DWORD PTR [esp],0xc00278e4
c0017f50:	89 c3                	mov    ebx,eax
c0017f52:	e8 d1 95 00 00       	call   c0021528 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017f57:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017f5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f61:	e8 7e f8 ff ff       	call   c00177e4 <switchToThread(ThreadControlBlock*)>
c0017f66:	83 c4 10             	add    esp,0x10
c0017f69:	8d 76 00             	lea    esi,[esi+0x0]
c0017f6c:	83 c4 08             	add    esp,0x8
c0017f6f:	5b                   	pop    ebx
c0017f70:	c3                   	ret    
c0017f71:	8d 76 00             	lea    esi,[esi+0x0]
c0017f74:	83 ec 08             	sub    esp,0x8
c0017f77:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017f7e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017f84:	68 e4 78 02 c0       	push   0xc00278e4
c0017f89:	e8 52 96 00 00       	call   c00215e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017f8e:	83 c4 10             	add    esp,0x10
c0017f91:	eb a9                	jmp    c0017f3c <schedule()+0x34>
c0017f93:	90                   	nop

c0017f94 <Semaphore::tryAcquire()>:
c0017f94:	53                   	push   ebx
c0017f95:	83 ec 08             	sub    esp,0x8
c0017f98:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017f9c:	fa                   	cli    
c0017f9d:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0017fa2:	8d 50 01             	lea    edx,[eax+0x1]
c0017fa5:	89 15 c8 78 02 c0    	mov    DWORD PTR ds:0xc00278c8,edx
c0017fab:	8b 15 c4 78 02 c0    	mov    edx,DWORD PTR ds:0xc00278c4
c0017fb1:	8d 5a 01             	lea    ebx,[edx+0x1]
c0017fb4:	89 1d c4 78 02 c0    	mov    DWORD PTR ds:0xc00278c4,ebx
c0017fba:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0017fbd:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0017fbf:	7c 33                	jl     c0017ff4 <Semaphore::tryAcquire()+0x60>
c0017fc1:	89 15 c4 78 02 c0    	mov    DWORD PTR ds:0xc00278c4,edx
c0017fc7:	85 d2                	test   edx,edx
c0017fc9:	75 0d                	jne    c0017fd8 <Semaphore::tryAcquire()+0x44>
c0017fcb:	8b 15 c0 78 02 c0    	mov    edx,DWORD PTR ds:0xc00278c0
c0017fd1:	85 d2                	test   edx,edx
c0017fd3:	75 6b                	jne    c0018040 <Semaphore::tryAcquire()+0xac>
c0017fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0017fd8:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0017fdd:	85 c0                	test   eax,eax
c0017fdf:	74 0b                	je     c0017fec <Semaphore::tryAcquire()+0x58>
c0017fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0017fe4:	31 c0                	xor    eax,eax
c0017fe6:	83 c4 08             	add    esp,0x8
c0017fe9:	5b                   	pop    ebx
c0017fea:	c3                   	ret    
c0017feb:	90                   	nop
c0017fec:	fb                   	sti    
c0017fed:	83 c4 08             	add    esp,0x8
c0017ff0:	5b                   	pop    ebx
c0017ff1:	c3                   	ret    
c0017ff2:	66 90                	xchg   ax,ax
c0017ff4:	43                   	inc    ebx
c0017ff5:	89 15 c4 78 02 c0    	mov    DWORD PTR ds:0xc00278c4,edx
c0017ffb:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0017ffe:	85 d2                	test   edx,edx
c0018000:	75 22                	jne    c0018024 <Semaphore::tryAcquire()+0x90>
c0018002:	8b 0d c0 78 02 c0    	mov    ecx,DWORD PTR ds:0xc00278c0
c0018008:	85 c9                	test   ecx,ecx
c001800a:	74 18                	je     c0018024 <Semaphore::tryAcquire()+0x90>
c001800c:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c0018016:	e8 ed fe ff ff       	call   c0017f08 <schedule()>
c001801b:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018020:	48                   	dec    eax
c0018021:	8d 76 00             	lea    esi,[esi+0x0]
c0018024:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018029:	85 c0                	test   eax,eax
c001802b:	75 0b                	jne    c0018038 <Semaphore::tryAcquire()+0xa4>
c001802d:	fb                   	sti    
c001802e:	b0 01                	mov    al,0x1
c0018030:	83 c4 08             	add    esp,0x8
c0018033:	5b                   	pop    ebx
c0018034:	c3                   	ret    
c0018035:	8d 76 00             	lea    esi,[esi+0x0]
c0018038:	b0 01                	mov    al,0x1
c001803a:	83 c4 08             	add    esp,0x8
c001803d:	5b                   	pop    ebx
c001803e:	c3                   	ret    
c001803f:	90                   	nop
c0018040:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c001804a:	e8 b9 fe ff ff       	call   c0017f08 <schedule()>
c001804f:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018054:	48                   	dec    eax
c0018055:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001805a:	85 c0                	test   eax,eax
c001805c:	75 86                	jne    c0017fe4 <Semaphore::tryAcquire()+0x50>
c001805e:	eb 8c                	jmp    c0017fec <Semaphore::tryAcquire()+0x58>

c0018060 <Semaphore::assertLocked(char const*)>:
c0018060:	83 ec 0c             	sub    esp,0xc
c0018063:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018067:	fa                   	cli    
c0018068:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c001806e:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c0018073:	8d 48 01             	lea    ecx,[eax+0x1]
c0018076:	89 0d c4 78 02 c0    	mov    DWORD PTR ds:0xc00278c4,ecx
c001807c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001807e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018081:	7c 29                	jl     c00180ac <Semaphore::assertLocked(char const*)+0x4c>
c0018083:	90                   	nop
c0018084:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c0018089:	85 c0                	test   eax,eax
c001808b:	75 0b                	jne    c0018098 <Semaphore::assertLocked(char const*)+0x38>
c001808d:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c0018092:	85 c0                	test   eax,eax
c0018094:	75 2e                	jne    c00180c4 <Semaphore::assertLocked(char const*)+0x64>
c0018096:	66 90                	xchg   ax,ax
c0018098:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c001809d:	48                   	dec    eax
c001809e:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00180a3:	75 03                	jne    c00180a8 <Semaphore::assertLocked(char const*)+0x48>
c00180a5:	fb                   	sti    
c00180a6:	66 90                	xchg   ax,ax
c00180a8:	83 c4 0c             	add    esp,0xc
c00180ab:	c3                   	ret    
c00180ac:	83 ec 0c             	sub    esp,0xc
c00180af:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180b3:	e8 7d c2 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00180b8:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00180bd:	83 c4 10             	add    esp,0x10
c00180c0:	48                   	dec    eax
c00180c1:	eb c1                	jmp    c0018084 <Semaphore::assertLocked(char const*)+0x24>
c00180c3:	90                   	nop
c00180c4:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c00180ce:	e8 35 fe ff ff       	call   c0017f08 <schedule()>
c00180d3:	eb c3                	jmp    c0018098 <Semaphore::assertLocked(char const*)+0x38>
c00180d5:	8d 76 00             	lea    esi,[esi+0x0]

c00180d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00180d8:	83 ec 0c             	sub    esp,0xc
c00180db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180e4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00180e7:	e8 1c fe ff ff       	call   c0017f08 <schedule()>
c00180ec:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00180f1:	48                   	dec    eax
c00180f2:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00180f7:	75 03                	jne    c00180fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00180f9:	fb                   	sti    
c00180fa:	66 90                	xchg   ax,ax
c00180fc:	83 c4 0c             	add    esp,0xc
c00180ff:	c3                   	ret    

c0018100 <blockTask(TaskState)>:
c0018100:	83 ec 0c             	sub    esp,0xc
c0018103:	fa                   	cli    
c0018104:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c001810a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001810e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018113:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018116:	e8 ed fd ff ff       	call   c0017f08 <schedule()>
c001811b:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018120:	48                   	dec    eax
c0018121:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018126:	75 04                	jne    c001812c <blockTask(TaskState)+0x2c>
c0018128:	fb                   	sti    
c0018129:	8d 76 00             	lea    esi,[esi+0x0]
c001812c:	83 c4 0c             	add    esp,0xc
c001812f:	c3                   	ret    

c0018130 <waitTask(int, int*, int)>:
c0018130:	83 ec 18             	sub    esp,0x18
c0018133:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018138:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001813c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001813f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018143:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018148:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001814b:	6a 07                	push   0x7
c001814d:	e8 ae ff ff ff       	call   c0018100 <blockTask(TaskState)>
c0018152:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018157:	83 c4 10             	add    esp,0x10
c001815a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001815d:	85 d2                	test   edx,edx
c001815f:	74 0b                	je     c001816c <waitTask(int, int*, int)+0x3c>
c0018161:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0018164:	89 02                	mov    DWORD PTR [edx],eax
c0018166:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001816b:	90                   	nop
c001816c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001816f:	83 c4 0c             	add    esp,0xc
c0018172:	c3                   	ret    
c0018173:	90                   	nop

c0018174 <milliTenthSleepUntil(unsigned int)>:
c0018174:	83 ec 0c             	sub    esp,0xc
c0018177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001817b:	39 05 2c 6a 02 c0    	cmp    DWORD PTR ds:0xc0026a2c,eax
c0018181:	76 05                	jbe    c0018188 <milliTenthSleepUntil(unsigned int)+0x14>
c0018183:	90                   	nop
c0018184:	83 c4 0c             	add    esp,0xc
c0018187:	c3                   	ret    
c0018188:	fa                   	cli    
c0018189:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c001818f:	83 ec 08             	sub    esp,0x8
c0018192:	ff 05 c4 78 02 c0    	inc    DWORD PTR ds:0xc00278c4
c0018198:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001819e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00181a1:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00181a7:	68 d8 78 02 c0       	push   0xc00278d8
c00181ac:	e8 2f 94 00 00       	call   c00215e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00181b1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00181b8:	e8 43 ff ff ff       	call   c0018100 <blockTask(TaskState)>
c00181bd:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00181c2:	83 c4 10             	add    esp,0x10
c00181c5:	48                   	dec    eax
c00181c6:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c00181cb:	85 c0                	test   eax,eax
c00181cd:	75 09                	jne    c00181d8 <milliTenthSleepUntil(unsigned int)+0x64>
c00181cf:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c00181d4:	85 c0                	test   eax,eax
c00181d6:	75 14                	jne    c00181ec <milliTenthSleepUntil(unsigned int)+0x78>
c00181d8:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00181dd:	48                   	dec    eax
c00181de:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00181e3:	75 9f                	jne    c0018184 <milliTenthSleepUntil(unsigned int)+0x10>
c00181e5:	fb                   	sti    
c00181e6:	83 c4 0c             	add    esp,0xc
c00181e9:	c3                   	ret    
c00181ea:	66 90                	xchg   ax,ax
c00181ec:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c00181f6:	e8 0d fd ff ff       	call   c0017f08 <schedule()>
c00181fb:	eb db                	jmp    c00181d8 <milliTenthSleepUntil(unsigned int)+0x64>
c00181fd:	8d 76 00             	lea    esi,[esi+0x0]

c0018200 <milliTenthSleep(unsigned int)>:
c0018200:	a1 2c 6a 02 c0       	mov    eax,ds:0xc0026a2c
c0018205:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018209:	e9 66 ff ff ff       	jmp    c0018174 <milliTenthSleepUntil(unsigned int)>
c001820e:	66 90                	xchg   ax,ax

c0018210 <sleep(unsigned int)>:
c0018210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018214:	8d 04 80             	lea    eax,[eax+eax*4]
c0018217:	8d 04 80             	lea    eax,[eax+eax*4]
c001821a:	8d 04 80             	lea    eax,[eax+eax*4]
c001821d:	8d 04 80             	lea    eax,[eax+eax*4]
c0018220:	c1 e0 04             	shl    eax,0x4
c0018223:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018227:	eb d7                	jmp    c0018200 <milliTenthSleep(unsigned int)>
c0018229:	90                   	nop
c001822a:	66 90                	xchg   ax,ax

c001822c <Semaphore::acquire()>:
c001822c:	83 ec 0c             	sub    esp,0xc
c001822f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018233:	fa                   	cli    
c0018234:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c0018239:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c001823f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018242:	89 0d c4 78 02 c0    	mov    DWORD PTR ds:0xc00278c4,ecx
c0018248:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001824b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001824d:	7d 2d                	jge    c001827c <Semaphore::acquire()+0x50>
c001824f:	41                   	inc    ecx
c0018250:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0018253:	90                   	nop
c0018254:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c0018259:	85 c0                	test   eax,eax
c001825b:	75 0b                	jne    c0018268 <Semaphore::acquire()+0x3c>
c001825d:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c0018262:	85 c0                	test   eax,eax
c0018264:	75 62                	jne    c00182c8 <Semaphore::acquire()+0x9c>
c0018266:	66 90                	xchg   ax,ax
c0018268:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c001826d:	48                   	dec    eax
c001826e:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018273:	75 03                	jne    c0018278 <Semaphore::acquire()+0x4c>
c0018275:	fb                   	sti    
c0018276:	66 90                	xchg   ax,ax
c0018278:	83 c4 0c             	add    esp,0xc
c001827b:	c3                   	ret    
c001827c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018281:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018288:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001828b:	85 c9                	test   ecx,ecx
c001828d:	74 4d                	je     c00182dc <Semaphore::acquire()+0xb0>
c001828f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018292:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018298:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001829b:	90                   	nop
c001829c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182a1:	83 ec 0c             	sub    esp,0xc
c00182a4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00182a7:	68 b8 48 02 c0       	push   0xc00248b8
c00182ac:	e8 c2 47 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c00182b1:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00182b8:	e8 43 fe ff ff       	call   c0018100 <blockTask(TaskState)>
c00182bd:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00182c2:	83 c4 10             	add    esp,0x10
c00182c5:	48                   	dec    eax
c00182c6:	eb 8c                	jmp    c0018254 <Semaphore::acquire()+0x28>
c00182c8:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c00182d2:	e8 31 fc ff ff       	call   c0017f08 <schedule()>
c00182d7:	eb 8f                	jmp    c0018268 <Semaphore::acquire()+0x3c>
c00182d9:	8d 76 00             	lea    esi,[esi+0x0]
c00182dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182e1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00182e4:	eb b6                	jmp    c001829c <Semaphore::acquire()+0x70>
c00182e6:	66 90                	xchg   ax,ax

c00182e8 <taskReturned>:
c00182e8:	83 ec 18             	sub    esp,0x18
c00182eb:	68 d8 48 02 c0       	push   0xc00248d8
c00182f0:	e8 40 c0 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00182f5:	83 c4 10             	add    esp,0x10
c00182f8:	83 ec 0c             	sub    esp,0xc
c00182fb:	6a 02                	push   0x2
c00182fd:	e8 fe fd ff ff       	call   c0018100 <blockTask(TaskState)>
c0018302:	fa                   	cli    
c0018303:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018309:	e8 fa fb ff ff       	call   c0017f08 <schedule()>
c001830e:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018313:	83 c4 10             	add    esp,0x10
c0018316:	48                   	dec    eax
c0018317:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001831c:	85 c0                	test   eax,eax
c001831e:	75 d8                	jne    c00182f8 <taskReturned+0x10>
c0018320:	fb                   	sti    
c0018321:	eb d5                	jmp    c00182f8 <taskReturned+0x10>
c0018323:	90                   	nop

c0018324 <Thr::processFromPID(int)>:
c0018324:	57                   	push   edi
c0018325:	56                   	push   esi
c0018326:	53                   	push   ebx
c0018327:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001832b:	fa                   	cli    
c001832c:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018332:	83 ec 0c             	sub    esp,0xc
c0018335:	68 e4 78 02 c0       	push   0xc00278e4
c001833a:	e8 e1 91 00 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001833f:	83 c4 10             	add    esp,0x10
c0018342:	89 c7                	mov    edi,eax
c0018344:	eb 16                	jmp    c001835c <Thr::processFromPID(int)+0x38>
c0018346:	66 90                	xchg   ax,ax
c0018348:	83 ec 0c             	sub    esp,0xc
c001834b:	68 e4 78 02 c0       	push   0xc00278e4
c0018350:	e8 cb 91 00 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018355:	83 c4 10             	add    esp,0x10
c0018358:	39 f8                	cmp    eax,edi
c001835a:	74 4c                	je     c00183a8 <Thr::processFromPID(int)+0x84>
c001835c:	83 ec 0c             	sub    esp,0xc
c001835f:	68 e4 78 02 c0       	push   0xc00278e4
c0018364:	e8 b7 91 00 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018369:	c7 04 24 e4 78 02 c0 	mov    DWORD PTR [esp],0xc00278e4
c0018370:	89 c3                	mov    ebx,eax
c0018372:	e8 b1 91 00 00       	call   c0021528 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018377:	58                   	pop    eax
c0018378:	5a                   	pop    edx
c0018379:	53                   	push   ebx
c001837a:	68 e4 78 02 c0       	push   0xc00278e4
c001837f:	e8 5c 92 00 00       	call   c00215e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018384:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018387:	83 c4 10             	add    esp,0x10
c001838a:	39 30                	cmp    DWORD PTR [eax],esi
c001838c:	75 ba                	jne    c0018348 <Thr::processFromPID(int)+0x24>
c001838e:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018393:	48                   	dec    eax
c0018394:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018399:	74 09                	je     c00183a4 <Thr::processFromPID(int)+0x80>
c001839b:	90                   	nop
c001839c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001839f:	5b                   	pop    ebx
c00183a0:	5e                   	pop    esi
c00183a1:	5f                   	pop    edi
c00183a2:	c3                   	ret    
c00183a3:	90                   	nop
c00183a4:	fb                   	sti    
c00183a5:	eb f5                	jmp    c001839c <Thr::processFromPID(int)+0x78>
c00183a7:	90                   	nop
c00183a8:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00183ad:	48                   	dec    eax
c00183ae:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00183b3:	75 07                	jne    c00183bc <Thr::processFromPID(int)+0x98>
c00183b5:	fb                   	sti    
c00183b6:	5b                   	pop    ebx
c00183b7:	5e                   	pop    esi
c00183b8:	5f                   	pop    edi
c00183b9:	c3                   	ret    
c00183ba:	66 90                	xchg   ax,ax
c00183bc:	5b                   	pop    ebx
c00183bd:	31 c0                	xor    eax,eax
c00183bf:	5e                   	pop    esi
c00183c0:	5f                   	pop    edi
c00183c1:	c3                   	ret    
c00183c2:	66 90                	xchg   ax,ax

c00183c4 <unblockTask(ThreadControlBlock*)>:
c00183c4:	53                   	push   ebx
c00183c5:	83 ec 08             	sub    esp,0x8
c00183c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183cc:	fa                   	cli    
c00183cd:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00183d3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00183d6:	85 c0                	test   eax,eax
c00183d8:	74 66                	je     c0018440 <unblockTask(ThreadControlBlock*)+0x7c>
c00183da:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00183dd:	48                   	dec    eax
c00183de:	74 38                	je     c0018418 <unblockTask(ThreadControlBlock*)+0x54>
c00183e0:	83 ec 0c             	sub    esp,0xc
c00183e3:	68 e4 78 02 c0       	push   0xc00278e4
c00183e8:	e8 33 91 00 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183ed:	83 c4 10             	add    esp,0x10
c00183f0:	85 c0                	test   eax,eax
c00183f2:	75 1c                	jne    c0018410 <unblockTask(ThreadControlBlock*)+0x4c>
c00183f4:	eb 5e                	jmp    c0018454 <unblockTask(ThreadControlBlock*)+0x90>
c00183f6:	66 90                	xchg   ax,ax
c00183f8:	83 ec 08             	sub    esp,0x8
c00183fb:	50                   	push   eax
c00183fc:	68 e4 78 02 c0       	push   0xc00278e4
c0018401:	e8 ca 94 00 00       	call   c00218d0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018406:	83 c4 10             	add    esp,0x10
c0018409:	85 c0                	test   eax,eax
c001840b:	74 47                	je     c0018454 <unblockTask(ThreadControlBlock*)+0x90>
c001840d:	8d 76 00             	lea    esi,[esi+0x0]
c0018410:	39 c3                	cmp    ebx,eax
c0018412:	75 e4                	jne    c00183f8 <unblockTask(ThreadControlBlock*)+0x34>
c0018414:	eb 12                	jmp    c0018428 <unblockTask(ThreadControlBlock*)+0x64>
c0018416:	66 90                	xchg   ax,ax
c0018418:	83 ec 0c             	sub    esp,0xc
c001841b:	68 5a 48 02 c0       	push   0xc002485a
c0018420:	e8 4e 46 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0018425:	83 c4 10             	add    esp,0x10
c0018428:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c001842d:	48                   	dec    eax
c001842e:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018433:	75 03                	jne    c0018438 <unblockTask(ThreadControlBlock*)+0x74>
c0018435:	fb                   	sti    
c0018436:	66 90                	xchg   ax,ax
c0018438:	83 c4 08             	add    esp,0x8
c001843b:	5b                   	pop    ebx
c001843c:	c3                   	ret    
c001843d:	8d 76 00             	lea    esi,[esi+0x0]
c0018440:	83 ec 0c             	sub    esp,0xc
c0018443:	68 43 48 02 c0       	push   0xc0024843
c0018448:	e8 26 46 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001844d:	83 c4 10             	add    esp,0x10
c0018450:	eb d6                	jmp    c0018428 <unblockTask(ThreadControlBlock*)+0x64>
c0018452:	66 90                	xchg   ax,ax
c0018454:	83 ec 08             	sub    esp,0x8
c0018457:	53                   	push   ebx
c0018458:	68 e4 78 02 c0       	push   0xc00278e4
c001845d:	e8 7e 91 00 00       	call   c00215e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018462:	83 c4 10             	add    esp,0x10
c0018465:	eb c1                	jmp    c0018428 <unblockTask(ThreadControlBlock*)+0x64>
c0018467:	90                   	nop

c0018468 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018468:	55                   	push   ebp
c0018469:	57                   	push   edi
c001846a:	56                   	push   esi
c001846b:	53                   	push   ebx
c001846c:	83 ec 1c             	sub    esp,0x1c
c001846f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018473:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018476:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c001847c:	85 ff                	test   edi,edi
c001847e:	7e 24                	jle    c00184a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018480:	31 f6                	xor    esi,esi
c0018482:	66 90                	xchg   ax,ax
c0018484:	83 ec 0c             	sub    esp,0xc
c0018487:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c001848e:	46                   	inc    esi
c001848f:	e8 3f 15 ff ff       	call   c00099d3 <free>
c0018494:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018497:	83 c4 10             	add    esp,0x10
c001849a:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00184a0:	7f e2                	jg     c0018484 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00184a2:	66 90                	xchg   ax,ax
c00184a4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00184ae:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00184b3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00184b6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00184b9:	d3 c0                	rol    eax,cl
c00184bb:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00184c2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00184c5:	89 f7                	mov    edi,esi
c00184c7:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00184cf:	0f 85 73 01 00 00    	jne    c0018648 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00184d5:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00184db:	85 ed                	test   ebp,ebp
c00184dd:	74 1d                	je     c00184fc <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00184df:	83 ec 0c             	sub    esp,0xc
c00184e2:	55                   	push   ebp
c00184e3:	e8 f2 bb ff ff       	call   c00140da <EnvVarContainer::~EnvVarContainer()>
c00184e8:	59                   	pop    ecx
c00184e9:	5e                   	pop    esi
c00184ea:	6a 0c                	push   0xc
c00184ec:	55                   	push   ebp
c00184ed:	e8 a0 44 ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c00184f2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00184f5:	83 c4 10             	add    esp,0x10
c00184f8:	89 f7                	mov    edi,esi
c00184fa:	66 90                	xchg   ax,ax
c00184fc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018502:	85 c0                	test   eax,eax
c0018504:	0f 84 b2 00 00 00    	je     c00185bc <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001850a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001850d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018511:	31 c9                	xor    ecx,ecx
c0018513:	eb 17                	jmp    c001852c <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018515:	8d 76 00             	lea    esi,[esi+0x0]
c0018518:	41                   	inc    ecx
c0018519:	83 f9 10             	cmp    ecx,0x10
c001851c:	0f 84 9a 00 00 00    	je     c00185bc <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018522:	66 90                	xchg   ax,ax
c0018524:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001852a:	66 90                	xchg   ax,ax
c001852c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0018533:	d3 fa                	sar    edx,cl
c0018535:	83 e2 01             	and    edx,0x1
c0018538:	74 de                	je     c0018518 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001853a:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001853d:	01 d2                	add    edx,edx
c001853f:	01 ca                	add    edx,ecx
c0018541:	8d 14 92             	lea    edx,[edx+edx*4]
c0018544:	01 d0                	add    eax,edx
c0018546:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001854c:	83 fd 07             	cmp    ebp,0x7
c001854f:	75 c7                	jne    c0018518 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018551:	05 40 02 00 00       	add    eax,0x240
c0018556:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0018559:	83 fd ff             	cmp    ebp,0xffffffff
c001855c:	0f 8c ee 00 00 00    	jl     c0018650 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0018562:	0f 84 ac 01 00 00    	je     c0018714 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0018568:	85 ed                	test   ebp,ebp
c001856a:	0f 84 90 01 00 00    	je     c0018700 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018570:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018572:	75 a4                	jne    c0018518 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018574:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001857a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001857e:	01 d0                	add    eax,edx
c0018580:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018584:	83 ec 0c             	sub    esp,0xc
c0018587:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001858d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018590:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018596:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001859d:	50                   	push   eax
c001859e:	e8 21 fe ff ff       	call   c00183c4 <unblockTask(ThreadControlBlock*)>
c00185a3:	83 c4 10             	add    esp,0x10
c00185a6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00185a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185ad:	89 f7                	mov    edi,esi
c00185af:	41                   	inc    ecx
c00185b0:	83 f9 10             	cmp    ecx,0x10
c00185b3:	0f 85 6b ff ff ff    	jne    c0018524 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00185b9:	8d 76 00             	lea    esi,[esi+0x0]
c00185bc:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00185c2:	85 c0                	test   eax,eax
c00185c4:	74 62                	je     c0018628 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00185c6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00185cc:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00185d2:	74 54                	je     c0018628 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00185d4:	83 ec 0c             	sub    esp,0xc
c00185d7:	68 e4 78 02 c0       	push   0xc00278e4
c00185dc:	e8 3f 8f 00 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00185e1:	c7 04 24 e4 78 02 c0 	mov    DWORD PTR [esp],0xc00278e4
c00185e8:	89 c7                	mov    edi,eax
c00185ea:	e8 15 8f 00 00       	call   c0021504 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00185ef:	83 c4 10             	add    esp,0x10
c00185f2:	84 c0                	test   al,al
c00185f4:	0f 84 ce 00 00 00    	je     c00186c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c00185fa:	66 90                	xchg   ax,ax
c00185fc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00185ff:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018605:	85 d2                	test   edx,edx
c0018607:	74 0f                	je     c0018618 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018609:	83 ec 0c             	sub    esp,0xc
c001860c:	8b 02                	mov    eax,DWORD PTR [edx]
c001860e:	52                   	push   edx
c001860f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018612:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018615:	83 c4 10             	add    esp,0x10
c0018618:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018622:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018625:	8d 76 00             	lea    esi,[esi+0x0]
c0018628:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001862e:	85 db                	test   ebx,ebx
c0018630:	74 16                	je     c0018648 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018632:	83 ec 0c             	sub    esp,0xc
c0018635:	53                   	push   ebx
c0018636:	e8 91 35 ff ff       	call   c000bbcc <VAS::~VAS()>
c001863b:	58                   	pop    eax
c001863c:	5a                   	pop    edx
c001863d:	6a 14                	push   0x14
c001863f:	53                   	push   ebx
c0018640:	e8 4d 43 ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c0018645:	83 c4 10             	add    esp,0x10
c0018648:	83 c4 1c             	add    esp,0x1c
c001864b:	5b                   	pop    ebx
c001864c:	5e                   	pop    esi
c001864d:	5f                   	pop    edi
c001864e:	5d                   	pop    ebp
c001864f:	c3                   	ret    
c0018650:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018654:	83 ec 0c             	sub    esp,0xc
c0018657:	68 0c 49 02 c0       	push   0xc002490c
c001865c:	e8 d4 bc ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0018661:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018664:	83 c4 10             	add    esp,0x10
c0018667:	89 f7                	mov    edi,esi
c0018669:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001866d:	e9 a6 fe ff ff       	jmp    c0018518 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018672:	66 90                	xchg   ax,ax
c0018674:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001867a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018680:	75 1e                	jne    c00186a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018682:	83 ec 0c             	sub    esp,0xc
c0018685:	68 74 49 02 c0       	push   0xc0024974
c001868a:	e8 e4 43 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001868f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018696:	e8 65 fa ff ff       	call   c0018100 <blockTask(TaskState)>
c001869b:	83 c4 10             	add    esp,0x10
c001869e:	66 90                	xchg   ax,ax
c00186a0:	83 ec 08             	sub    esp,0x8
c00186a3:	56                   	push   esi
c00186a4:	68 e4 78 02 c0       	push   0xc00278e4
c00186a9:	e8 32 8f 00 00       	call   c00215e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00186ae:	c7 04 24 e4 78 02 c0 	mov    DWORD PTR [esp],0xc00278e4
c00186b5:	e8 66 8e 00 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186ba:	83 c4 10             	add    esp,0x10
c00186bd:	39 f8                	cmp    eax,edi
c00186bf:	0f 84 37 ff ff ff    	je     c00185fc <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c00186c5:	8d 76 00             	lea    esi,[esi+0x0]
c00186c8:	83 ec 0c             	sub    esp,0xc
c00186cb:	68 e4 78 02 c0       	push   0xc00278e4
c00186d0:	e8 4b 8e 00 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186d5:	c7 04 24 e4 78 02 c0 	mov    DWORD PTR [esp],0xc00278e4
c00186dc:	89 c6                	mov    esi,eax
c00186de:	e8 45 8e 00 00       	call   c0021528 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00186e3:	83 c4 10             	add    esp,0x10
c00186e6:	39 f3                	cmp    ebx,esi
c00186e8:	74 b6                	je     c00186a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00186ea:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00186ed:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00186f0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00186f6:	75 a8                	jne    c00186a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00186f8:	e9 77 ff ff ff       	jmp    c0018674 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c00186fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018700:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018704:	83 ec 0c             	sub    esp,0xc
c0018707:	68 40 49 02 c0       	push   0xc0024940
c001870c:	e9 4b ff ff ff       	jmp    c001865c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018711:	8d 76 00             	lea    esi,[esi+0x0]
c0018714:	8b 36                	mov    esi,DWORD PTR [esi]
c0018716:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001871a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001871d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018720:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018726:	01 d7                	add    edi,edx
c0018728:	89 f8                	mov    eax,edi
c001872a:	e9 51 fe ff ff       	jmp    c0018580 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c001872f:	90                   	nop

c0018730 <cleanerTaskFunction(void*)>:
c0018730:	53                   	push   ebx
c0018731:	83 ec 08             	sub    esp,0x8
c0018734:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018739:	48                   	dec    eax
c001873a:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001873f:	75 03                	jne    c0018744 <cleanerTaskFunction(void*)+0x14>
c0018741:	fb                   	sti    
c0018742:	66 90                	xchg   ax,ax
c0018744:	fa                   	cli    
c0018745:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c001874a:	80 3d ac 78 02 c0 00 	cmp    BYTE PTR ds:0xc00278ac,0x0
c0018751:	8d 50 01             	lea    edx,[eax+0x1]
c0018754:	89 15 c8 78 02 c0    	mov    DWORD PTR ds:0xc00278c8,edx
c001875a:	0f 84 ac 00 00 00    	je     c001880c <cleanerTaskFunction(void*)+0xdc>
c0018760:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018765:	85 c0                	test   eax,eax
c0018767:	75 03                	jne    c001876c <cleanerTaskFunction(void*)+0x3c>
c0018769:	fb                   	sti    
c001876a:	66 90                	xchg   ax,ax
c001876c:	c6 05 ac 78 02 c0 00 	mov    BYTE PTR ds:0xc00278ac,0x0
c0018773:	fa                   	cli    
c0018774:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c001877a:	ff 05 c4 78 02 c0    	inc    DWORD PTR ds:0xc00278c4
c0018780:	fa                   	cli    
c0018781:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018787:	eb 2b                	jmp    c00187b4 <cleanerTaskFunction(void*)+0x84>
c0018789:	8d 76 00             	lea    esi,[esi+0x0]
c001878c:	83 ec 0c             	sub    esp,0xc
c001878f:	68 cc 78 02 c0       	push   0xc00278cc
c0018794:	e8 87 8d 00 00       	call   c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018799:	c7 04 24 cc 78 02 c0 	mov    DWORD PTR [esp],0xc00278cc
c00187a0:	89 c3                	mov    ebx,eax
c00187a2:	e8 81 8d 00 00       	call   c0021528 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00187a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187aa:	e8 b9 fc ff ff       	call   c0018468 <cleanupTerminatedTask(ThreadControlBlock*)>
c00187af:	83 c4 10             	add    esp,0x10
c00187b2:	66 90                	xchg   ax,ax
c00187b4:	83 ec 0c             	sub    esp,0xc
c00187b7:	68 cc 78 02 c0       	push   0xc00278cc
c00187bc:	e8 43 8d 00 00       	call   c0021504 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00187c1:	83 c4 10             	add    esp,0x10
c00187c4:	84 c0                	test   al,al
c00187c6:	74 c4                	je     c001878c <cleanerTaskFunction(void*)+0x5c>
c00187c8:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00187cd:	48                   	dec    eax
c00187ce:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00187d3:	75 03                	jne    c00187d8 <cleanerTaskFunction(void*)+0xa8>
c00187d5:	fb                   	sti    
c00187d6:	66 90                	xchg   ax,ax
c00187d8:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c00187dd:	48                   	dec    eax
c00187de:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c00187e3:	0f 85 4b ff ff ff    	jne    c0018734 <cleanerTaskFunction(void*)+0x4>
c00187e9:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c00187ee:	85 c0                	test   eax,eax
c00187f0:	0f 84 3e ff ff ff    	je     c0018734 <cleanerTaskFunction(void*)+0x4>
c00187f6:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c0018800:	e8 03 f7 ff ff       	call   c0017f08 <schedule()>
c0018805:	e9 2a ff ff ff       	jmp    c0018734 <cleanerTaskFunction(void*)+0x4>
c001880a:	66 90                	xchg   ax,ax
c001880c:	83 ec 0c             	sub    esp,0xc
c001880f:	6a 02                	push   0x2
c0018811:	e8 c2 f8 ff ff       	call   c00180d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018816:	83 c4 10             	add    esp,0x10
c0018819:	e9 4e ff ff ff       	jmp    c001876c <cleanerTaskFunction(void*)+0x3c>
c001881e:	66 90                	xchg   ax,ax

c0018820 <terminateTask(int)>:
c0018820:	83 ec 14             	sub    esp,0x14
c0018823:	fa                   	cli    
c0018824:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c001882a:	ff 05 c4 78 02 c0    	inc    DWORD PTR ds:0xc00278c4
c0018830:	fa                   	cli    
c0018831:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018837:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001883b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018840:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0018843:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018848:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001884b:	50                   	push   eax
c001884c:	68 cc 78 02 c0       	push   0xc00278cc
c0018851:	e8 8a 8d 00 00       	call   c00215e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018856:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001885b:	83 c4 10             	add    esp,0x10
c001885e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018865:	a1 a8 78 02 c0       	mov    eax,ds:0xc00278a8
c001886a:	85 c0                	test   eax,eax
c001886c:	74 5e                	je     c00188cc <terminateTask(int)+0xac>
c001886e:	83 ec 0c             	sub    esp,0xc
c0018871:	c6 05 ac 78 02 c0 01 	mov    BYTE PTR ds:0xc00278ac,0x1
c0018878:	50                   	push   eax
c0018879:	e8 46 fb ff ff       	call   c00183c4 <unblockTask(ThreadControlBlock*)>
c001887e:	83 c4 10             	add    esp,0x10
c0018881:	8d 76 00             	lea    esi,[esi+0x0]
c0018884:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018889:	48                   	dec    eax
c001888a:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c001888f:	75 03                	jne    c0018894 <terminateTask(int)+0x74>
c0018891:	fb                   	sti    
c0018892:	66 90                	xchg   ax,ax
c0018894:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c0018899:	48                   	dec    eax
c001889a:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c001889f:	75 0b                	jne    c00188ac <terminateTask(int)+0x8c>
c00188a1:	83 3d c0 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278c0,0x0
c00188a8:	75 36                	jne    c00188e0 <terminateTask(int)+0xc0>
c00188aa:	66 90                	xchg   ax,ax
c00188ac:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00188b1:	48                   	dec    eax
c00188b2:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00188b7:	75 03                	jne    c00188bc <terminateTask(int)+0x9c>
c00188b9:	fb                   	sti    
c00188ba:	66 90                	xchg   ax,ax
c00188bc:	fa                   	cli    
c00188bd:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00188c3:	90                   	nop
c00188c4:	e8 3f f6 ff ff       	call   c0017f08 <schedule()>
c00188c9:	eb e1                	jmp    c00188ac <terminateTask(int)+0x8c>
c00188cb:	90                   	nop
c00188cc:	83 ec 0c             	sub    esp,0xc
c00188cf:	68 71 48 02 c0       	push   0xc0024871
c00188d4:	e8 9a 41 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c00188d9:	83 c4 10             	add    esp,0x10
c00188dc:	eb a6                	jmp    c0018884 <terminateTask(int)+0x64>
c00188de:	66 90                	xchg   ax,ax
c00188e0:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c00188ea:	eb d8                	jmp    c00188c4 <terminateTask(int)+0xa4>

c00188ec <Thr::terminateFromIRQ(int)>:
c00188ec:	83 ec 18             	sub    esp,0x18
c00188ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00188f3:	e8 28 ff ff ff       	call   c0018820 <terminateTask(int)>

c00188f8 <Semaphore::release()>:
c00188f8:	83 ec 0c             	sub    esp,0xc
c00188fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188ff:	fa                   	cli    
c0018900:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c0018905:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c001890b:	8d 48 01             	lea    ecx,[eax+0x1]
c001890e:	89 0d c4 78 02 c0    	mov    DWORD PTR ds:0xc00278c4,ecx
c0018914:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018917:	85 c9                	test   ecx,ecx
c0018919:	74 41                	je     c001895c <Semaphore::release()+0x64>
c001891b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001891e:	83 ec 0c             	sub    esp,0xc
c0018921:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018924:	51                   	push   ecx
c0018925:	e8 9a fa ff ff       	call   c00183c4 <unblockTask(ThreadControlBlock*)>
c001892a:	a1 c4 78 02 c0       	mov    eax,ds:0xc00278c4
c001892f:	83 c4 10             	add    esp,0x10
c0018932:	48                   	dec    eax
c0018933:	90                   	nop
c0018934:	a3 c4 78 02 c0       	mov    ds:0xc00278c4,eax
c0018939:	85 c0                	test   eax,eax
c001893b:	75 0b                	jne    c0018948 <Semaphore::release()+0x50>
c001893d:	a1 c0 78 02 c0       	mov    eax,ds:0xc00278c0
c0018942:	85 c0                	test   eax,eax
c0018944:	75 1e                	jne    c0018964 <Semaphore::release()+0x6c>
c0018946:	66 90                	xchg   ax,ax
c0018948:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c001894d:	48                   	dec    eax
c001894e:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018953:	75 03                	jne    c0018958 <Semaphore::release()+0x60>
c0018955:	fb                   	sti    
c0018956:	66 90                	xchg   ax,ax
c0018958:	83 c4 0c             	add    esp,0xc
c001895b:	c3                   	ret    
c001895c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001895f:	eb d3                	jmp    c0018934 <Semaphore::release()+0x3c>
c0018961:	8d 76 00             	lea    esi,[esi+0x0]
c0018964:	c7 05 c0 78 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00278c0,0x0
c001896e:	e8 95 f5 ff ff       	call   c0017f08 <schedule()>
c0018973:	eb d3                	jmp    c0018948 <Semaphore::release()+0x50>
c0018975:	8d 76 00             	lea    esi,[esi+0x0]

c0018978 <__static_initialization_and_destruction_0(int, int)>:
c0018978:	83 ec 0c             	sub    esp,0xc
c001897b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018980:	0f 85 8e 00 00 00    	jne    c0018a14 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018986:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001898e:	0f 85 80 00 00 00    	jne    c0018a14 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018994:	83 ec 0c             	sub    esp,0xc
c0018997:	68 e4 78 02 c0       	push   0xc00278e4
c001899c:	e8 eb 8e 00 00       	call   c002188c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00189a1:	83 c4 10             	add    esp,0x10
c00189a4:	83 ec 04             	sub    esp,0x4
c00189a7:	68 68 56 02 c0       	push   0xc0025668
c00189ac:	68 e4 78 02 c0       	push   0xc00278e4
c00189b1:	68 3c 18 02 c0       	push   0xc002183c
c00189b6:	e8 51 3f ff ff       	call   c000c90c <__cxa_atexit>
c00189bb:	83 c4 10             	add    esp,0x10
c00189be:	83 ec 0c             	sub    esp,0xc
c00189c1:	68 d8 78 02 c0       	push   0xc00278d8
c00189c6:	e8 c1 8e 00 00       	call   c002188c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00189cb:	83 c4 10             	add    esp,0x10
c00189ce:	83 ec 04             	sub    esp,0x4
c00189d1:	68 68 56 02 c0       	push   0xc0025668
c00189d6:	68 d8 78 02 c0       	push   0xc00278d8
c00189db:	68 3c 18 02 c0       	push   0xc002183c
c00189e0:	e8 27 3f ff ff       	call   c000c90c <__cxa_atexit>
c00189e5:	83 c4 10             	add    esp,0x10
c00189e8:	83 ec 0c             	sub    esp,0xc
c00189eb:	68 cc 78 02 c0       	push   0xc00278cc
c00189f0:	e8 97 8e 00 00       	call   c002188c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00189f5:	83 c4 10             	add    esp,0x10
c00189f8:	83 ec 04             	sub    esp,0x4
c00189fb:	68 68 56 02 c0       	push   0xc0025668
c0018a00:	68 cc 78 02 c0       	push   0xc00278cc
c0018a05:	68 3c 18 02 c0       	push   0xc002183c
c0018a0a:	e8 fd 3e ff ff       	call   c000c90c <__cxa_atexit>
c0018a0f:	83 c4 10             	add    esp,0x10
c0018a12:	66 90                	xchg   ax,ax
c0018a14:	90                   	nop
c0018a15:	83 c4 0c             	add    esp,0xc
c0018a18:	c3                   	ret    
c0018a19:	8d 76 00             	lea    esi,[esi+0x0]

c0018a1c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018a1c:	83 ec 0c             	sub    esp,0xc
c0018a1f:	83 ec 08             	sub    esp,0x8
c0018a22:	68 ff ff 00 00       	push   0xffff
c0018a27:	6a 01                	push   0x1
c0018a29:	e8 4a ff ff ff       	call   c0018978 <__static_initialization_and_destruction_0(int, int)>
c0018a2e:	83 c4 10             	add    esp,0x10
c0018a31:	83 c4 0c             	add    esp,0xc
c0018a34:	c3                   	ret    

c0018a35 <Vm::inbv(unsigned short)>:
c0018a35:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a39:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018a3e:	75 06                	jne    c0018a46 <Vm::inbv(unsigned short)+0x11>
c0018a40:	a0 2c 79 02 c0       	mov    al,ds:0xc002792c
c0018a45:	c3                   	ret    
c0018a46:	ec                   	in     al,dx
c0018a47:	c3                   	ret    

c0018a48 <Vm::outbv(unsigned short, unsigned char)>:
c0018a48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a50:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018a55:	75 25                	jne    c0018a7c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018a57:	8b 0d 2c 79 02 c0    	mov    ecx,DWORD PTR ds:0xc002792c
c0018a5d:	8d 51 01             	lea    edx,[ecx+0x1]
c0018a60:	88 81 40 79 02 c0    	mov    BYTE PTR [ecx-0x3ffd86c0],al
c0018a66:	89 15 2c 79 02 c0    	mov    DWORD PTR ds:0xc002792c,edx
c0018a6c:	83 fa 20             	cmp    edx,0x20
c0018a6f:	75 0c                	jne    c0018a7d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018a71:	c7 05 2c 79 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002792c,0x1f
c0018a7b:	c3                   	ret    
c0018a7c:	ee                   	out    dx,al
c0018a7d:	c3                   	ret    

c0018a7e <Vm::realToLinear(unsigned short, unsigned short)>:
c0018a7e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018a83:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018a88:	c1 e0 04             	shl    eax,0x4
c0018a8b:	01 d0                	add    eax,edx
c0018a8d:	c3                   	ret    

c0018a8e <Vm::getSegment(unsigned int)>:
c0018a8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a92:	c1 e8 10             	shr    eax,0x10
c0018a95:	c3                   	ret    

c0018a96 <Vm::getOffset(unsigned int)>:
c0018a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a9a:	c3                   	ret    

c0018a9b <Vm::mainloop2()>:
c0018a9b:	83 ec 18             	sub    esp,0x18
c0018a9e:	fa                   	cli    
c0018a9f:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018aa5:	6a 02                	push   0x2
c0018aa7:	c6 05 25 79 02 c0 01 	mov    BYTE PTR ds:0xc0027925,0x1
c0018aae:	e8 25 f6 ff ff       	call   c00180d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018ab3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ab8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018abc:	52                   	push   edx
c0018abd:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0018ac1:	52                   	push   edx
c0018ac2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0018ac6:	52                   	push   edx
c0018ac7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018acb:	50                   	push   eax
c0018acc:	e8 5e 77 fe ff       	call   c000022f <goToVM86>
c0018ad1:	83 c4 2c             	add    esp,0x2c
c0018ad4:	c3                   	ret    

c0018ad5 <Vm::mainVm8086Loop(void*)>:
c0018ad5:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018ada:	48                   	dec    eax
c0018adb:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018ae0:	75 01                	jne    c0018ae3 <Vm::mainVm8086Loop(void*)+0xe>
c0018ae2:	fb                   	sti    
c0018ae3:	eb b6                	jmp    c0018a9b <Vm::mainloop2()>

c0018ae5 <Vm::mainloop3(unsigned long)>:
c0018ae5:	83 ec 18             	sub    esp,0x18
c0018ae8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018aec:	fa                   	cli    
c0018aed:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018af3:	6a 02                	push   0x2
c0018af5:	c6 05 24 79 02 c0 01 	mov    BYTE PTR ds:0xc0027924,0x1
c0018afc:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c0018b01:	e8 d2 f5 ff ff       	call   c00180d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018b06:	83 c4 1c             	add    esp,0x1c
c0018b09:	eb 90                	jmp    c0018a9b <Vm::mainloop2()>

c0018b0b <Vm::initialise8086()>:
c0018b0b:	83 ec 0c             	sub    esp,0xc
c0018b0e:	68 80 00 00 00       	push   0x80
c0018b13:	6a 00                	push   0x0
c0018b15:	68 d5 8a 01 c0       	push   0xc0018ad5
c0018b1a:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0018b20:	e8 c7 f1 ff ff       	call   c0017cec <Process::createThread(void (*)(void*), void*, int)>
c0018b25:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018b2c:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018b31:	68 00 01 00 00       	push   0x100
c0018b36:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c0018b3b:	6a 00                	push   0x0
c0018b3d:	6a 00                	push   0x0
c0018b3f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0018b45:	e8 f4 34 ff ff       	call   c000c03e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018b4a:	83 c4 2c             	add    esp,0x2c
c0018b4d:	c3                   	ret    

c0018b4e <Vm::finish8086()>:
c0018b4e:	53                   	push   ebx
c0018b4f:	83 ec 08             	sub    esp,0x8
c0018b52:	fa                   	cli    
c0018b53:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018b59:	80 3d 24 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027924,0x0
c0018b60:	75 15                	jne    c0018b77 <Vm::finish8086()+0x29>
c0018b62:	e8 a1 f3 ff ff       	call   c0017f08 <schedule()>
c0018b67:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018b6c:	48                   	dec    eax
c0018b6d:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018b72:	75 de                	jne    c0018b52 <Vm::finish8086()+0x4>
c0018b74:	fb                   	sti    
c0018b75:	eb db                	jmp    c0018b52 <Vm::finish8086()+0x4>
c0018b77:	83 ec 0c             	sub    esp,0xc
c0018b7a:	8b 1d 20 79 02 c0    	mov    ebx,DWORD PTR ds:0xc0027920
c0018b80:	ff 35 28 79 02 c0    	push   DWORD PTR ds:0xc0027928
c0018b86:	c6 05 24 79 02 c0 00 	mov    BYTE PTR ds:0xc0027924,0x0
c0018b8d:	e8 32 f8 ff ff       	call   c00183c4 <unblockTask(ThreadControlBlock*)>
c0018b92:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018b97:	83 c4 10             	add    esp,0x10
c0018b9a:	8d 50 ff             	lea    edx,[eax-0x1]
c0018b9d:	89 15 c8 78 02 c0    	mov    DWORD PTR ds:0xc00278c8,edx
c0018ba3:	85 d2                	test   edx,edx
c0018ba5:	75 01                	jne    c0018ba8 <Vm::finish8086()+0x5a>
c0018ba7:	fb                   	sti    
c0018ba8:	89 d8                	mov    eax,ebx
c0018baa:	83 c4 08             	add    esp,0x8
c0018bad:	5b                   	pop    ebx
c0018bae:	c3                   	ret    

c0018baf <Vm::getOutput8086(unsigned char*)>:
c0018baf:	57                   	push   edi
c0018bb0:	8b 0d 2c 79 02 c0    	mov    ecx,DWORD PTR ds:0xc002792c
c0018bb6:	56                   	push   esi
c0018bb7:	be 40 79 02 c0       	mov    esi,0xc0027940
c0018bbc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018bc0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018bc2:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c0018bc7:	5e                   	pop    esi
c0018bc8:	c7 05 2c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002792c,0x0
c0018bd2:	5f                   	pop    edi
c0018bd3:	c3                   	ret    

c0018bd4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018bd4:	55                   	push   ebp
c0018bd5:	57                   	push   edi
c0018bd6:	56                   	push   esi
c0018bd7:	53                   	push   ebx
c0018bd8:	83 ec 2c             	sub    esp,0x2c
c0018bdb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0018bdf:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018be3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0018be7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0018beb:	fa                   	cli    
c0018bec:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c0018bf2:	0f b6 35 25 79 02 c0 	movzx  esi,BYTE PTR ds:0xc0027925
c0018bf9:	89 f0                	mov    eax,esi
c0018bfb:	84 c0                	test   al,al
c0018bfd:	75 1d                	jne    c0018c1c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0018bff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c03:	e8 00 f3 ff ff       	call   c0017f08 <schedule()>
c0018c08:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018c0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c11:	48                   	dec    eax
c0018c12:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018c17:	75 d2                	jne    c0018beb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018c19:	fb                   	sti    
c0018c1a:	eb cf                	jmp    c0018beb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018c1c:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018c21:	c7 05 2c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002792c,0x0
c0018c2b:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0018c2f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0018c33:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0018c37:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0018c3b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0018c3f:	50                   	push   eax
c0018c40:	6a 20                	push   0x20
c0018c42:	6a 00                	push   0x0
c0018c44:	68 40 79 02 c0       	push   0xc0027940
c0018c49:	e8 36 7a fe ff       	call   c0000684 <memset>
c0018c4e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018c55:	e8 69 0d ff ff       	call   c00099c3 <malloc>
c0018c5a:	83 c4 0c             	add    esp,0xc
c0018c5d:	89 c3                	mov    ebx,eax
c0018c5f:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c0018c65:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c69:	50                   	push   eax
c0018c6a:	e8 6f 43 ff ff       	call   c000cfde <File::File(char const*, Process*)>
c0018c6f:	83 c4 10             	add    esp,0x10
c0018c72:	85 db                	test   ebx,ebx
c0018c74:	75 0a                	jne    c0018c80 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0018c76:	83 ec 0c             	sub    esp,0xc
c0018c79:	68 9c 49 02 c0       	push   0xc002499c
c0018c7e:	eb 3e                	jmp    c0018cbe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018c80:	50                   	push   eax
c0018c81:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018c85:	50                   	push   eax
c0018c86:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018c8a:	50                   	push   eax
c0018c8b:	53                   	push   ebx
c0018c8c:	e8 5d 46 ff ff       	call   c000d2ee <File::stat(unsigned long long*, bool*)>
c0018c91:	83 c4 10             	add    esp,0x10
c0018c94:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0018c99:	74 0a                	je     c0018ca5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0018c9b:	83 ec 0c             	sub    esp,0xc
c0018c9e:	68 b0 49 02 c0       	push   0xc00249b0
c0018ca3:	eb 19                	jmp    c0018cbe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018ca5:	51                   	push   ecx
c0018ca6:	51                   	push   ecx
c0018ca7:	6a 01                	push   0x1
c0018ca9:	53                   	push   ebx
c0018caa:	e8 93 43 ff ff       	call   c000d042 <File::open(FileOpenMode)>
c0018caf:	83 c4 10             	add    esp,0x10
c0018cb2:	85 c0                	test   eax,eax
c0018cb4:	74 24                	je     c0018cda <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0018cb6:	83 ec 0c             	sub    esp,0xc
c0018cb9:	68 c9 49 02 c0       	push   0xc00249c9
c0018cbe:	e8 72 b6 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0018cc3:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018cc8:	83 c4 10             	add    esp,0x10
c0018ccb:	48                   	dec    eax
c0018ccc:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018cd1:	85 c0                	test   eax,eax
c0018cd3:	75 01                	jne    c0018cd6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0018cd5:	fb                   	sti    
c0018cd6:	31 f6                	xor    esi,esi
c0018cd8:	eb 58                	jmp    c0018d32 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0018cda:	0f b7 ed             	movzx  ebp,bp
c0018cdd:	50                   	push   eax
c0018cde:	0f b7 ff             	movzx  edi,di
c0018ce1:	50                   	push   eax
c0018ce2:	55                   	push   ebp
c0018ce3:	57                   	push   edi
c0018ce4:	e8 95 fd ff ff       	call   c0018a7e <Vm::realToLinear(unsigned short, unsigned short)>
c0018ce9:	5a                   	pop    edx
c0018cea:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018cec:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018cf0:	51                   	push   ecx
c0018cf1:	50                   	push   eax
c0018cf2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018cf6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018cfa:	53                   	push   ebx
c0018cfb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018cfe:	83 c4 14             	add    esp,0x14
c0018d01:	53                   	push   ebx
c0018d02:	e8 99 43 ff ff       	call   c000d0a0 <File::close()>
c0018d07:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c0018d0c:	83 c4 10             	add    esp,0x10
c0018d0f:	48                   	dec    eax
c0018d10:	c6 05 25 79 02 c0 00 	mov    BYTE PTR ds:0xc0027925,0x0
c0018d17:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c0018d1c:	85 c0                	test   eax,eax
c0018d1e:	75 01                	jne    c0018d21 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0018d20:	fb                   	sti    
c0018d21:	83 ec 0c             	sub    esp,0xc
c0018d24:	ff 35 28 79 02 c0    	push   DWORD PTR ds:0xc0027928
c0018d2a:	e8 95 f6 ff ff       	call   c00183c4 <unblockTask(ThreadControlBlock*)>
c0018d2f:	83 c4 10             	add    esp,0x10
c0018d32:	83 c4 2c             	add    esp,0x2c
c0018d35:	89 f0                	mov    eax,esi
c0018d37:	5b                   	pop    ebx
c0018d38:	5e                   	pop    esi
c0018d39:	5f                   	pop    edi
c0018d3a:	5d                   	pop    ebp
c0018d3b:	c3                   	ret    

c0018d3c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018d3c:	57                   	push   edi
c0018d3d:	56                   	push   esi
c0018d3e:	53                   	push   ebx
c0018d3f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018d43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d47:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018d4b:	83 e8 06             	sub    eax,0x6
c0018d4e:	0f b7 c0             	movzx  eax,ax
c0018d51:	50                   	push   eax
c0018d52:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018d57:	50                   	push   eax
c0018d58:	e8 21 fd ff ff       	call   c0018a7e <Vm::realToLinear(unsigned short, unsigned short)>
c0018d5d:	5a                   	pop    edx
c0018d5e:	5e                   	pop    esi
c0018d5f:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018d62:	8d 56 fa             	lea    edx,[esi-0x6]
c0018d65:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018d6b:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018d6e:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018d71:	83 c2 02             	add    edx,0x2
c0018d74:	66 89 10             	mov    WORD PTR [eax],dx
c0018d77:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018d7a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018d7e:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018d81:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018d85:	89 d6                	mov    esi,edx
c0018d87:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018d8d:	66 81 e6 ff fd       	and    si,0xfdff
c0018d92:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0018d96:	74 07                	je     c0018d9f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018d98:	89 d6                	mov    esi,edx
c0018d9a:	66 81 ce 00 02       	or     si,0x200
c0018d9f:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018da3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018da8:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0018dac:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018db4:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018db7:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018dbf:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018dc2:	5b                   	pop    ebx
c0018dc3:	5e                   	pop    esi
c0018dc4:	5f                   	pop    edi
c0018dc5:	c3                   	ret    

c0018dc6 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018dc6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018dcb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018dd0:	c1 e0 04             	shl    eax,0x4
c0018dd3:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018dd6:	c3                   	ret    

c0018dd7 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018dd7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018ddc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018de1:	c1 e0 04             	shl    eax,0x4
c0018de4:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018de8:	c3                   	ret    

c0018de9 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018de9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018dee:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018df3:	c1 e0 04             	shl    eax,0x4
c0018df6:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018df9:	c3                   	ret    

c0018dfa <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018dfa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018dff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e04:	c1 e0 04             	shl    eax,0x4
c0018e07:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e0b:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018e0e:	c3                   	ret    

c0018e0f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018e0f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e14:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e19:	c1 e0 04             	shl    eax,0x4
c0018e1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e20:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018e24:	c3                   	ret    

c0018e25 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018e25:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e2a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e2f:	c1 e0 04             	shl    eax,0x4
c0018e32:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e36:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018e39:	c3                   	ret    

c0018e3a <Vm::faultHandler(regs*)>:
c0018e3a:	55                   	push   ebp
c0018e3b:	57                   	push   edi
c0018e3c:	56                   	push   esi
c0018e3d:	53                   	push   ebx
c0018e3e:	83 ec 1c             	sub    esp,0x1c
c0018e41:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018e45:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018e48:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018e4c:	0f b7 f8             	movzx  edi,ax
c0018e4f:	52                   	push   edx
c0018e50:	0f b7 c0             	movzx  eax,ax
c0018e53:	50                   	push   eax
c0018e54:	e8 25 fc ff ff       	call   c0018a7e <Vm::realToLinear(unsigned short, unsigned short)>
c0018e59:	5a                   	pop    edx
c0018e5a:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018e5d:	59                   	pop    ecx
c0018e5e:	89 c1                	mov    ecx,eax
c0018e60:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018e63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e67:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018e70:	0f b7 c5             	movzx  eax,bp
c0018e73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e77:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018e7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018e7f:	e8 fa fb ff ff       	call   c0018a7e <Vm::realToLinear(unsigned short, unsigned short)>
c0018e84:	5e                   	pop    esi
c0018e85:	be 06 00 00 00       	mov    esi,0x6
c0018e8a:	5a                   	pop    edx
c0018e8b:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018e90:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018e95:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0018e98:	80 fa 9d             	cmp    dl,0x9d
c0018e9b:	0f 84 2c 02 00 00    	je     c00190cd <Vm::faultHandler(regs*)+0x293>
c0018ea1:	0f 87 91 00 00 00    	ja     c0018f38 <Vm::faultHandler(regs*)+0xfe>
c0018ea7:	80 fa 66             	cmp    dl,0x66
c0018eaa:	0f 84 98 01 00 00    	je     c0019048 <Vm::faultHandler(regs*)+0x20e>
c0018eb0:	77 47                	ja     c0018ef9 <Vm::faultHandler(regs*)+0xbf>
c0018eb2:	80 fa 36             	cmp    dl,0x36
c0018eb5:	0f 84 80 01 00 00    	je     c001903b <Vm::faultHandler(regs*)+0x201>
c0018ebb:	77 1a                	ja     c0018ed7 <Vm::faultHandler(regs*)+0x9d>
c0018ebd:	80 fa 26             	cmp    dl,0x26
c0018ec0:	0f 84 4e 01 00 00    	je     c0019014 <Vm::faultHandler(regs*)+0x1da>
c0018ec6:	80 fa 2e             	cmp    dl,0x2e
c0018ec9:	0f 85 e2 05 00 00    	jne    c00194b1 <Vm::faultHandler(regs*)+0x677>
c0018ecf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ed2:	31 f6                	xor    esi,esi
c0018ed4:	41                   	inc    ecx
c0018ed5:	eb be                	jmp    c0018e95 <Vm::faultHandler(regs*)+0x5b>
c0018ed7:	80 fa 64             	cmp    dl,0x64
c0018eda:	0f 84 41 01 00 00    	je     c0019021 <Vm::faultHandler(regs*)+0x1e7>
c0018ee0:	0f 87 48 01 00 00    	ja     c001902e <Vm::faultHandler(regs*)+0x1f4>
c0018ee6:	80 fa 3e             	cmp    dl,0x3e
c0018ee9:	0f 85 c2 05 00 00    	jne    c00194b1 <Vm::faultHandler(regs*)+0x677>
c0018eef:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ef2:	be 01 00 00 00       	mov    esi,0x1
c0018ef7:	eb db                	jmp    c0018ed4 <Vm::faultHandler(regs*)+0x9a>
c0018ef9:	80 fa 6d             	cmp    dl,0x6d
c0018efc:	0f 84 ec 02 00 00    	je     c00191ee <Vm::faultHandler(regs*)+0x3b4>
c0018f02:	77 17                	ja     c0018f1b <Vm::faultHandler(regs*)+0xe1>
c0018f04:	80 fa 67             	cmp    dl,0x67
c0018f07:	0f 84 48 01 00 00    	je     c0019055 <Vm::faultHandler(regs*)+0x21b>
c0018f0d:	80 fa 6c             	cmp    dl,0x6c
c0018f10:	0f 84 69 02 00 00    	je     c001917f <Vm::faultHandler(regs*)+0x345>
c0018f16:	e9 96 05 00 00       	jmp    c00194b1 <Vm::faultHandler(regs*)+0x677>
c0018f1b:	80 fa 6f             	cmp    dl,0x6f
c0018f1e:	0f 84 f4 03 00 00    	je     c0019318 <Vm::faultHandler(regs*)+0x4de>
c0018f24:	0f 82 59 03 00 00    	jb     c0019283 <Vm::faultHandler(regs*)+0x449>
c0018f2a:	80 fa 9c             	cmp    dl,0x9c
c0018f2d:	0f 84 2f 01 00 00    	je     c0019062 <Vm::faultHandler(regs*)+0x228>
c0018f33:	e9 79 05 00 00       	jmp    c00194b1 <Vm::faultHandler(regs*)+0x677>
c0018f38:	80 fa ec             	cmp    dl,0xec
c0018f3b:	0f 84 14 05 00 00    	je     c0019455 <Vm::faultHandler(regs*)+0x61b>
c0018f41:	77 7b                	ja     c0018fbe <Vm::faultHandler(regs*)+0x184>
c0018f43:	80 fa e4             	cmp    dl,0xe4
c0018f46:	0f 84 93 04 00 00    	je     c00193df <Vm::faultHandler(regs*)+0x5a5>
c0018f4c:	77 53                	ja     c0018fa1 <Vm::faultHandler(regs*)+0x167>
c0018f4e:	80 fa cd             	cmp    dl,0xcd
c0018f51:	0f 84 d9 01 00 00    	je     c0019130 <Vm::faultHandler(regs*)+0x2f6>
c0018f57:	80 fa cf             	cmp    dl,0xcf
c0018f5a:	0f 85 51 05 00 00    	jne    c00194b1 <Vm::faultHandler(regs*)+0x677>
c0018f60:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018f63:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018f66:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018f6a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018f6d:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018f71:	81 ca 00 02 02 00    	or     edx,0x20200
c0018f77:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018f7a:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018f7e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018f84:	66 c1 e8 09          	shr    ax,0x9
c0018f88:	83 e0 01             	and    eax,0x1
c0018f8b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0018f8e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018f91:	83 c0 06             	add    eax,0x6
c0018f94:	25 ff ff 00 00       	and    eax,0xffff
c0018f99:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018f9c:	e9 0c 05 00 00       	jmp    c00194ad <Vm::faultHandler(regs*)+0x673>
c0018fa1:	80 fa e6             	cmp    dl,0xe6
c0018fa4:	0f 84 7f 04 00 00    	je     c0019429 <Vm::faultHandler(regs*)+0x5ef>
c0018faa:	0f 82 4b 04 00 00    	jb     c00193fb <Vm::faultHandler(regs*)+0x5c1>
c0018fb0:	80 fa e7             	cmp    dl,0xe7
c0018fb3:	0f 84 87 04 00 00    	je     c0019440 <Vm::faultHandler(regs*)+0x606>
c0018fb9:	e9 f3 04 00 00       	jmp    c00194b1 <Vm::faultHandler(regs*)+0x677>
c0018fbe:	80 fa ef             	cmp    dl,0xef
c0018fc1:	0f 84 d1 04 00 00    	je     c0019498 <Vm::faultHandler(regs*)+0x65e>
c0018fc7:	77 28                	ja     c0018ff1 <Vm::faultHandler(regs*)+0x1b7>
c0018fc9:	80 fa ed             	cmp    dl,0xed
c0018fcc:	0f 84 9f 04 00 00    	je     c0019471 <Vm::faultHandler(regs*)+0x637>
c0018fd2:	80 fa ee             	cmp    dl,0xee
c0018fd5:	0f 85 d6 04 00 00    	jne    c00194b1 <Vm::faultHandler(regs*)+0x677>
c0018fdb:	50                   	push   eax
c0018fdc:	50                   	push   eax
c0018fdd:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018fe1:	50                   	push   eax
c0018fe2:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018fe6:	50                   	push   eax
c0018fe7:	e8 5c fa ff ff       	call   c0018a48 <Vm::outbv(unsigned short, unsigned char)>
c0018fec:	e9 9f 04 00 00       	jmp    c0019490 <Vm::faultHandler(regs*)+0x656>
c0018ff1:	80 fa fa             	cmp    dl,0xfa
c0018ff4:	0f 84 69 01 00 00    	je     c0019163 <Vm::faultHandler(regs*)+0x329>
c0018ffa:	80 fa fb             	cmp    dl,0xfb
c0018ffd:	0f 84 6e 01 00 00    	je     c0019171 <Vm::faultHandler(regs*)+0x337>
c0019003:	80 fa f3             	cmp    dl,0xf3
c0019006:	0f 85 a5 04 00 00    	jne    c00194b1 <Vm::faultHandler(regs*)+0x677>
c001900c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001900f:	e9 c0 fe ff ff       	jmp    c0018ed4 <Vm::faultHandler(regs*)+0x9a>
c0019014:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019017:	be 02 00 00 00       	mov    esi,0x2
c001901c:	e9 b3 fe ff ff       	jmp    c0018ed4 <Vm::faultHandler(regs*)+0x9a>
c0019021:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019024:	be 03 00 00 00       	mov    esi,0x3
c0019029:	e9 a6 fe ff ff       	jmp    c0018ed4 <Vm::faultHandler(regs*)+0x9a>
c001902e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019031:	be 04 00 00 00       	mov    esi,0x4
c0019036:	e9 99 fe ff ff       	jmp    c0018ed4 <Vm::faultHandler(regs*)+0x9a>
c001903b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001903e:	be 05 00 00 00       	mov    esi,0x5
c0019043:	e9 8c fe ff ff       	jmp    c0018ed4 <Vm::faultHandler(regs*)+0x9a>
c0019048:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001904b:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019050:	e9 7f fe ff ff       	jmp    c0018ed4 <Vm::faultHandler(regs*)+0x9a>
c0019055:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019058:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001905d:	e9 72 fe ff ff       	jmp    c0018ed4 <Vm::faultHandler(regs*)+0x9a>
c0019062:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019065:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019069:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001906e:	74 30                	je     c00190a0 <Vm::faultHandler(regs*)+0x266>
c0019070:	83 e9 04             	sub    ecx,0x4
c0019073:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019079:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001907f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019082:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019085:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001908b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001908f:	0f 84 15 04 00 00    	je     c00194aa <Vm::faultHandler(regs*)+0x670>
c0019095:	80 ce 02             	or     dh,0x2
c0019098:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001909b:	e9 0a 04 00 00       	jmp    c00194aa <Vm::faultHandler(regs*)+0x670>
c00190a0:	83 e9 02             	sub    ecx,0x2
c00190a3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00190a9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00190ac:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00190b0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00190b6:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00190ba:	74 05                	je     c00190c1 <Vm::faultHandler(regs*)+0x287>
c00190bc:	80 ce 02             	or     dh,0x2
c00190bf:	eb 03                	jmp    c00190c4 <Vm::faultHandler(regs*)+0x28a>
c00190c1:	80 e6 fd             	and    dh,0xfd
c00190c4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00190c8:	e9 dd 03 00 00       	jmp    c00194aa <Vm::faultHandler(regs*)+0x670>
c00190cd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00190d2:	74 2a                	je     c00190fe <Vm::faultHandler(regs*)+0x2c4>
c00190d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00190d6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00190dc:	81 ca 00 02 02 00    	or     edx,0x20200
c00190e2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00190e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00190e7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00190ed:	c1 e8 09             	shr    eax,0x9
c00190f0:	83 e0 01             	and    eax,0x1
c00190f3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00190f6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00190f9:	83 c0 04             	add    eax,0x4
c00190fc:	eb 25                	jmp    c0019123 <Vm::faultHandler(regs*)+0x2e9>
c00190fe:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019101:	81 ca 00 02 02 00    	or     edx,0x20200
c0019107:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001910a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001910d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019113:	66 c1 e8 09          	shr    ax,0x9
c0019117:	83 e0 01             	and    eax,0x1
c001911a:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001911d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019120:	83 c0 02             	add    eax,0x2
c0019123:	25 ff ff 00 00       	and    eax,0xffff
c0019128:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001912b:	e9 7a 03 00 00       	jmp    c00194aa <Vm::faultHandler(regs*)+0x670>
c0019130:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019134:	3c ee                	cmp    al,0xee
c0019136:	75 10                	jne    c0019148 <Vm::faultHandler(regs*)+0x30e>
c0019138:	83 ec 0c             	sub    esp,0xc
c001913b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001913e:	e8 a2 f9 ff ff       	call   c0018ae5 <Vm::mainloop3(unsigned long)>
c0019143:	e9 4b 03 00 00       	jmp    c0019493 <Vm::faultHandler(regs*)+0x659>
c0019148:	83 ec 0c             	sub    esp,0xc
c001914b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001914f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019153:	51                   	push   ecx
c0019154:	50                   	push   eax
c0019155:	53                   	push   ebx
c0019156:	e8 e1 fb ff ff       	call   c0018d3c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001915b:	83 c4 20             	add    esp,0x20
c001915e:	e9 4a 03 00 00       	jmp    c00194ad <Vm::faultHandler(regs*)+0x673>
c0019163:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019168:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001916c:	e9 39 03 00 00       	jmp    c00194aa <Vm::faultHandler(regs*)+0x670>
c0019171:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019176:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001917a:	e9 2b 03 00 00       	jmp    c00194aa <Vm::faultHandler(regs*)+0x670>
c001917f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019182:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019187:	74 2b                	je     c00191b4 <Vm::faultHandler(regs*)+0x37a>
c0019189:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019190:	76 22                	jbe    c00191b4 <Vm::faultHandler(regs*)+0x37a>
c0019192:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019196:	50                   	push   eax
c0019197:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001919b:	50                   	push   eax
c001919c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00191a0:	50                   	push   eax
c00191a1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00191a5:	50                   	push   eax
c00191a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00191aa:	50                   	push   eax
c00191ab:	6a 6c                	push   0x6c
c00191ad:	6a 6c                	push   0x6c
c00191af:	e9 b9 01 00 00       	jmp    c001936d <Vm::faultHandler(regs*)+0x533>
c00191b4:	83 ec 0c             	sub    esp,0xc
c00191b7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00191bb:	0f b7 f6             	movzx  esi,si
c00191be:	50                   	push   eax
c00191bf:	e8 71 f8 ff ff       	call   c0018a35 <Vm::inbv(unsigned short)>
c00191c4:	83 c4 0c             	add    esp,0xc
c00191c7:	0f b6 c0             	movzx  eax,al
c00191ca:	50                   	push   eax
c00191cb:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00191cf:	50                   	push   eax
c00191d0:	56                   	push   esi
c00191d1:	e8 24 fc ff ff       	call   c0018dfa <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00191d6:	83 c4 10             	add    esp,0x10
c00191d9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00191dc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00191e0:	74 03                	je     c00191e5 <Vm::faultHandler(regs*)+0x3ab>
c00191e2:	48                   	dec    eax
c00191e3:	eb 01                	jmp    c00191e6 <Vm::faultHandler(regs*)+0x3ac>
c00191e5:	40                   	inc    eax
c00191e6:	0f b7 c0             	movzx  eax,ax
c00191e9:	e9 8d 00 00 00       	jmp    c001927b <Vm::faultHandler(regs*)+0x441>
c00191ee:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00191f1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00191f4:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00191f9:	74 29                	je     c0019224 <Vm::faultHandler(regs*)+0x3ea>
c00191fb:	3d ff ff 00 00       	cmp    eax,0xffff
c0019200:	76 22                	jbe    c0019224 <Vm::faultHandler(regs*)+0x3ea>
c0019202:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019206:	50                   	push   eax
c0019207:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001920b:	50                   	push   eax
c001920c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019210:	50                   	push   eax
c0019211:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019215:	50                   	push   eax
c0019216:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001921a:	50                   	push   eax
c001921b:	6a 6d                	push   0x6d
c001921d:	6a 6d                	push   0x6d
c001921f:	e9 49 01 00 00       	jmp    c001936d <Vm::faultHandler(regs*)+0x533>
c0019224:	0f b7 c8             	movzx  ecx,ax
c0019227:	0f b7 f6             	movzx  esi,si
c001922a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001922d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019232:	74 20                	je     c0019254 <Vm::faultHandler(regs*)+0x41a>
c0019234:	ed                   	in     eax,dx
c0019235:	55                   	push   ebp
c0019236:	50                   	push   eax
c0019237:	51                   	push   ecx
c0019238:	56                   	push   esi
c0019239:	e8 e7 fb ff ff       	call   c0018e25 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001923e:	83 c4 10             	add    esp,0x10
c0019241:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019244:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019248:	74 05                	je     c001924f <Vm::faultHandler(regs*)+0x415>
c001924a:	83 e8 04             	sub    eax,0x4
c001924d:	eb 27                	jmp    c0019276 <Vm::faultHandler(regs*)+0x43c>
c001924f:	83 c0 04             	add    eax,0x4
c0019252:	eb 22                	jmp    c0019276 <Vm::faultHandler(regs*)+0x43c>
c0019254:	66 ed                	in     ax,dx
c0019256:	0f b7 c0             	movzx  eax,ax
c0019259:	57                   	push   edi
c001925a:	50                   	push   eax
c001925b:	51                   	push   ecx
c001925c:	56                   	push   esi
c001925d:	e8 ad fb ff ff       	call   c0018e0f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019262:	83 c4 10             	add    esp,0x10
c0019265:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019268:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001926c:	74 05                	je     c0019273 <Vm::faultHandler(regs*)+0x439>
c001926e:	83 e8 02             	sub    eax,0x2
c0019271:	eb 03                	jmp    c0019276 <Vm::faultHandler(regs*)+0x43c>
c0019273:	83 c0 02             	add    eax,0x2
c0019276:	25 ff ff 00 00       	and    eax,0xffff
c001927b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001927e:	e9 27 02 00 00       	jmp    c00194aa <Vm::faultHandler(regs*)+0x670>
c0019283:	8d 46 ff             	lea    eax,[esi-0x1]
c0019286:	3c 05                	cmp    al,0x5
c0019288:	77 24                	ja     c00192ae <Vm::faultHandler(regs*)+0x474>
c001928a:	0f b6 c0             	movzx  eax,al
c001928d:	ff 24 85 3c 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb5c4]
c0019294:	0f b7 fd             	movzx  edi,bp
c0019297:	eb 15                	jmp    c00192ae <Vm::faultHandler(regs*)+0x474>
c0019299:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001929d:	eb 0f                	jmp    c00192ae <Vm::faultHandler(regs*)+0x474>
c001929f:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00192a3:	eb 09                	jmp    c00192ae <Vm::faultHandler(regs*)+0x474>
c00192a5:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00192a9:	eb 03                	jmp    c00192ae <Vm::faultHandler(regs*)+0x474>
c00192ab:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00192ae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00192b1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00192b6:	74 29                	je     c00192e1 <Vm::faultHandler(regs*)+0x4a7>
c00192b8:	3d ff ff 00 00       	cmp    eax,0xffff
c00192bd:	76 22                	jbe    c00192e1 <Vm::faultHandler(regs*)+0x4a7>
c00192bf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00192c3:	50                   	push   eax
c00192c4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00192c8:	50                   	push   eax
c00192c9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00192cd:	50                   	push   eax
c00192ce:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00192d2:	50                   	push   eax
c00192d3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00192d7:	50                   	push   eax
c00192d8:	6a 6e                	push   0x6e
c00192da:	6a 6e                	push   0x6e
c00192dc:	e9 8c 00 00 00       	jmp    c001936d <Vm::faultHandler(regs*)+0x533>
c00192e1:	0f b7 c0             	movzx  eax,ax
c00192e4:	52                   	push   edx
c00192e5:	52                   	push   edx
c00192e6:	50                   	push   eax
c00192e7:	57                   	push   edi
c00192e8:	e8 d9 fa ff ff       	call   c0018dc6 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00192ed:	59                   	pop    ecx
c00192ee:	0f b6 c0             	movzx  eax,al
c00192f1:	5e                   	pop    esi
c00192f2:	50                   	push   eax
c00192f3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00192f7:	50                   	push   eax
c00192f8:	e8 4b f7 ff ff       	call   c0018a48 <Vm::outbv(unsigned short, unsigned char)>
c00192fd:	83 c4 10             	add    esp,0x10
c0019300:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019303:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019307:	74 03                	je     c001930c <Vm::faultHandler(regs*)+0x4d2>
c0019309:	48                   	dec    eax
c001930a:	eb 01                	jmp    c001930d <Vm::faultHandler(regs*)+0x4d3>
c001930c:	40                   	inc    eax
c001930d:	0f b7 c0             	movzx  eax,ax
c0019310:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019313:	e9 92 01 00 00       	jmp    c00194aa <Vm::faultHandler(regs*)+0x670>
c0019318:	8d 46 ff             	lea    eax,[esi-0x1]
c001931b:	3c 05                	cmp    al,0x5
c001931d:	77 1f                	ja     c001933e <Vm::faultHandler(regs*)+0x504>
c001931f:	0f b6 c0             	movzx  eax,al
c0019322:	ff 24 85 54 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb5ac]
c0019329:	89 ef                	mov    edi,ebp
c001932b:	eb 11                	jmp    c001933e <Vm::faultHandler(regs*)+0x504>
c001932d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019330:	eb 0c                	jmp    c001933e <Vm::faultHandler(regs*)+0x504>
c0019332:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0019335:	eb 07                	jmp    c001933e <Vm::faultHandler(regs*)+0x504>
c0019337:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001933a:	eb 02                	jmp    c001933e <Vm::faultHandler(regs*)+0x504>
c001933c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001933e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019341:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019346:	74 37                	je     c001937f <Vm::faultHandler(regs*)+0x545>
c0019348:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001934e:	76 2f                	jbe    c001937f <Vm::faultHandler(regs*)+0x545>
c0019350:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019354:	50                   	push   eax
c0019355:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019359:	50                   	push   eax
c001935a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001935e:	50                   	push   eax
c001935f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019363:	50                   	push   eax
c0019364:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019368:	50                   	push   eax
c0019369:	6a 6f                	push   0x6f
c001936b:	6a 6f                	push   0x6f
c001936d:	68 e2 49 02 c0       	push   0xc00249e2
c0019372:	e8 fc 36 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0019377:	83 c4 20             	add    esp,0x20
c001937a:	e9 86 01 00 00       	jmp    c0019505 <Vm::faultHandler(regs*)+0x6cb>
c001937f:	0f b7 d7             	movzx  edx,di
c0019382:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0019385:	0f b7 c6             	movzx  eax,si
c0019388:	81 e1 00 04 00 00    	and    ecx,0x400
c001938e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0019391:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019396:	74 1d                	je     c00193b5 <Vm::faultHandler(regs*)+0x57b>
c0019398:	55                   	push   ebp
c0019399:	55                   	push   ebp
c001939a:	50                   	push   eax
c001939b:	52                   	push   edx
c001939c:	e8 48 fa ff ff       	call   c0018de9 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00193a1:	83 c4 10             	add    esp,0x10
c00193a4:	89 fa                	mov    edx,edi
c00193a6:	ef                   	out    dx,eax
c00193a7:	85 c9                	test   ecx,ecx
c00193a9:	74 05                	je     c00193b0 <Vm::faultHandler(regs*)+0x576>
c00193ab:	83 ee 04             	sub    esi,0x4
c00193ae:	eb 21                	jmp    c00193d1 <Vm::faultHandler(regs*)+0x597>
c00193b0:	83 c6 04             	add    esi,0x4
c00193b3:	eb 1c                	jmp    c00193d1 <Vm::faultHandler(regs*)+0x597>
c00193b5:	55                   	push   ebp
c00193b6:	55                   	push   ebp
c00193b7:	50                   	push   eax
c00193b8:	52                   	push   edx
c00193b9:	e8 19 fa ff ff       	call   c0018dd7 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00193be:	83 c4 10             	add    esp,0x10
c00193c1:	89 fa                	mov    edx,edi
c00193c3:	66 ef                	out    dx,ax
c00193c5:	85 c9                	test   ecx,ecx
c00193c7:	74 05                	je     c00193ce <Vm::faultHandler(regs*)+0x594>
c00193c9:	83 ee 02             	sub    esi,0x2
c00193cc:	eb 03                	jmp    c00193d1 <Vm::faultHandler(regs*)+0x597>
c00193ce:	83 c6 02             	add    esi,0x2
c00193d1:	81 e6 ff ff 00 00    	and    esi,0xffff
c00193d7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00193da:	e9 cb 00 00 00       	jmp    c00194aa <Vm::faultHandler(regs*)+0x670>
c00193df:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00193e6:	83 ec 0c             	sub    esp,0xc
c00193e9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00193ed:	50                   	push   eax
c00193ee:	e8 42 f6 ff ff       	call   c0018a35 <Vm::inbv(unsigned short)>
c00193f3:	0f b6 c0             	movzx  eax,al
c00193f6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00193f9:	eb 3f                	jmp    c001943a <Vm::faultHandler(regs*)+0x600>
c00193fb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019400:	74 07                	je     c0019409 <Vm::faultHandler(regs*)+0x5cf>
c0019402:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019406:	ed                   	in     eax,dx
c0019407:	eb 14                	jmp    c001941d <Vm::faultHandler(regs*)+0x5e3>
c0019409:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001940c:	66 31 f6             	xor    si,si
c001940f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0019412:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019416:	66 ed                	in     ax,dx
c0019418:	0f b7 c0             	movzx  eax,ax
c001941b:	09 f0                	or     eax,esi
c001941d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019420:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019424:	e9 84 00 00 00       	jmp    c00194ad <Vm::faultHandler(regs*)+0x673>
c0019429:	52                   	push   edx
c001942a:	52                   	push   edx
c001942b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001942f:	50                   	push   eax
c0019430:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019434:	50                   	push   eax
c0019435:	e8 0e f6 ff ff       	call   c0018a48 <Vm::outbv(unsigned short, unsigned char)>
c001943a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001943e:	eb 53                	jmp    c0019493 <Vm::faultHandler(regs*)+0x659>
c0019440:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019443:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019447:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001944c:	74 03                	je     c0019451 <Vm::faultHandler(regs*)+0x617>
c001944e:	ef                   	out    dx,eax
c001944f:	eb cf                	jmp    c0019420 <Vm::faultHandler(regs*)+0x5e6>
c0019451:	66 ef                	out    dx,ax
c0019453:	eb cb                	jmp    c0019420 <Vm::faultHandler(regs*)+0x5e6>
c0019455:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001945c:	83 ec 0c             	sub    esp,0xc
c001945f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019463:	50                   	push   eax
c0019464:	e8 cc f5 ff ff       	call   c0018a35 <Vm::inbv(unsigned short)>
c0019469:	0f b6 c0             	movzx  eax,al
c001946c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001946f:	eb 1f                	jmp    c0019490 <Vm::faultHandler(regs*)+0x656>
c0019471:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019474:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019479:	74 03                	je     c001947e <Vm::faultHandler(regs*)+0x644>
c001947b:	ed                   	in     eax,dx
c001947c:	eb 0d                	jmp    c001948b <Vm::faultHandler(regs*)+0x651>
c001947e:	66 ed                	in     ax,dx
c0019480:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019483:	0f b7 c0             	movzx  eax,ax
c0019486:	66 31 d2             	xor    dx,dx
c0019489:	09 d0                	or     eax,edx
c001948b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001948e:	eb 1a                	jmp    c00194aa <Vm::faultHandler(regs*)+0x670>
c0019490:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019493:	83 c4 10             	add    esp,0x10
c0019496:	eb 15                	jmp    c00194ad <Vm::faultHandler(regs*)+0x673>
c0019498:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001949b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001949e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00194a3:	74 03                	je     c00194a8 <Vm::faultHandler(regs*)+0x66e>
c00194a5:	ef                   	out    dx,eax
c00194a6:	eb 02                	jmp    c00194aa <Vm::faultHandler(regs*)+0x670>
c00194a8:	66 ef                	out    dx,ax
c00194aa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00194ad:	b0 01                	mov    al,0x1
c00194af:	eb 56                	jmp    c0019507 <Vm::faultHandler(regs*)+0x6cd>
c00194b1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00194b5:	50                   	push   eax
c00194b6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00194ba:	50                   	push   eax
c00194bb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00194bf:	50                   	push   eax
c00194c0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00194c4:	50                   	push   eax
c00194c5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00194c9:	50                   	push   eax
c00194ca:	52                   	push   edx
c00194cb:	52                   	push   edx
c00194cc:	68 0f 4a 02 c0       	push   0xc0024a0f
c00194d1:	e8 9d 35 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c00194d6:	83 c4 20             	add    esp,0x20
c00194d9:	83 ec 0c             	sub    esp,0xc
c00194dc:	6a 60                	push   0x60
c00194de:	e8 52 f5 ff ff       	call   c0018a35 <Vm::inbv(unsigned short)>
c00194e3:	83 c4 10             	add    esp,0x10
c00194e6:	3c 1c                	cmp    al,0x1c
c00194e8:	74 04                	je     c00194ee <Vm::faultHandler(regs*)+0x6b4>
c00194ea:	3c 5a                	cmp    al,0x5a
c00194ec:	75 eb                	jne    c00194d9 <Vm::faultHandler(regs*)+0x69f>
c00194ee:	3c 5a                	cmp    al,0x5a
c00194f0:	74 04                	je     c00194f6 <Vm::faultHandler(regs*)+0x6bc>
c00194f2:	3c 1c                	cmp    al,0x1c
c00194f4:	75 0f                	jne    c0019505 <Vm::faultHandler(regs*)+0x6cb>
c00194f6:	83 ec 0c             	sub    esp,0xc
c00194f9:	6a 60                	push   0x60
c00194fb:	e8 35 f5 ff ff       	call   c0018a35 <Vm::inbv(unsigned short)>
c0019500:	83 c4 10             	add    esp,0x10
c0019503:	eb e9                	jmp    c00194ee <Vm::faultHandler(regs*)+0x6b4>
c0019505:	31 c0                	xor    eax,eax
c0019507:	83 c4 1c             	add    esp,0x1c
c001950a:	5b                   	pop    ebx
c001950b:	5e                   	pop    esi
c001950c:	5f                   	pop    edi
c001950d:	5d                   	pop    ebp
c001950e:	c3                   	ret    
c001950f:	90                   	nop

c0019510 <Vm::fpuInternalTo32(unsigned long long)>:
c0019510:	57                   	push   edi
c0019511:	56                   	push   esi
c0019512:	53                   	push   ebx
c0019513:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001951b:	89 d6                	mov    esi,edx
c001951d:	89 d7                	mov    edi,edx
c001951f:	89 c1                	mov    ecx,eax
c0019521:	c1 ef 14             	shr    edi,0x14
c0019524:	89 d3                	mov    ebx,edx
c0019526:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001952c:	31 d2                	xor    edx,edx
c001952e:	89 f8                	mov    eax,edi
c0019530:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019536:	bf ff 00 00 00       	mov    edi,0xff
c001953b:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019540:	83 d2 ff             	adc    edx,0xffffffff
c0019543:	39 c7                	cmp    edi,eax
c0019545:	bf 00 00 00 00       	mov    edi,0x0
c001954a:	19 d7                	sbb    edi,edx
c001954c:	72 16                	jb     c0019564 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c001954e:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019552:	c1 e0 17             	shl    eax,0x17
c0019555:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001955b:	09 f1                	or     ecx,esi
c001955d:	09 c1                	or     ecx,eax
c001955f:	89 cf                	mov    edi,ecx
c0019561:	eb 05                	jmp    c0019568 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019563:	90                   	nop
c0019564:	31 ff                	xor    edi,edi
c0019566:	66 90                	xchg   ax,ax
c0019568:	89 f8                	mov    eax,edi
c001956a:	5b                   	pop    ebx
c001956b:	5e                   	pop    esi
c001956c:	5f                   	pop    edi
c001956d:	c3                   	ret    

c001956e <Vm::fpuInternalTo64(unsigned long long)>:
c001956e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019572:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019576:	c3                   	ret    

c0019577 <Vm::fpu32ToInternal(unsigned int)>:
c0019577:	57                   	push   edi
c0019578:	31 ff                	xor    edi,edi
c001957a:	56                   	push   esi
c001957b:	53                   	push   ebx
c001957c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019580:	89 cb                	mov    ebx,ecx
c0019582:	89 ce                	mov    esi,ecx
c0019584:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001958a:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019590:	c1 e9 17             	shr    ecx,0x17
c0019593:	89 f0                	mov    eax,esi
c0019595:	0f b6 d1             	movzx  edx,cl
c0019598:	81 c2 80 03 00 00    	add    edx,0x380
c001959e:	89 d1                	mov    ecx,edx
c00195a0:	89 fa                	mov    edx,edi
c00195a2:	c1 e1 14             	shl    ecx,0x14
c00195a5:	0f a4 c2 1d          	shld   edx,eax,0x1d
c00195a9:	c1 e0 1d             	shl    eax,0x1d
c00195ac:	89 d7                	mov    edi,edx
c00195ae:	89 c6                	mov    esi,eax
c00195b0:	89 ca                	mov    edx,ecx
c00195b2:	89 f0                	mov    eax,esi
c00195b4:	09 fa                	or     edx,edi
c00195b6:	09 da                	or     edx,ebx
c00195b8:	5b                   	pop    ebx
c00195b9:	5e                   	pop    esi
c00195ba:	5f                   	pop    edi
c00195bb:	c3                   	ret    

c00195bc <Vm::fpu64ToInternal(unsigned long long)>:
c00195bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00195c4:	c3                   	ret    

c00195c5 <Vm::fpuFloatToLong(unsigned long long)>:
c00195c5:	57                   	push   edi
c00195c6:	31 c0                	xor    eax,eax
c00195c8:	56                   	push   esi
c00195c9:	31 d2                	xor    edx,edx
c00195cb:	53                   	push   ebx
c00195cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00195d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00195d4:	89 d9                	mov    ecx,ebx
c00195d6:	c1 e9 14             	shr    ecx,0x14
c00195d9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00195df:	89 cf                	mov    edi,ecx
c00195e1:	81 ef ff 03 00 00    	sub    edi,0x3ff
c00195e7:	78 37                	js     c0019620 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c00195e9:	89 d9                	mov    ecx,ebx
c00195eb:	89 f0                	mov    eax,esi
c00195ed:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00195f3:	81 c9 00 00 10 00    	or     ecx,0x100000
c00195f9:	89 ca                	mov    edx,ecx
c00195fb:	b9 34 00 00 00       	mov    ecx,0x34
c0019600:	29 f9                	sub    ecx,edi
c0019602:	0f ad d0             	shrd   eax,edx,cl
c0019605:	d3 fa                	sar    edx,cl
c0019607:	f6 c1 20             	test   cl,0x20
c001960a:	74 08                	je     c0019614 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c001960c:	89 d0                	mov    eax,edx
c001960e:	c1 fa 1f             	sar    edx,0x1f
c0019611:	8d 76 00             	lea    esi,[esi+0x0]
c0019614:	85 db                	test   ebx,ebx
c0019616:	79 08                	jns    c0019620 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019618:	f7 d8                	neg    eax
c001961a:	83 d2 00             	adc    edx,0x0
c001961d:	f7 da                	neg    edx
c001961f:	90                   	nop
c0019620:	5b                   	pop    ebx
c0019621:	5e                   	pop    esi
c0019622:	5f                   	pop    edi
c0019623:	c3                   	ret    

c0019624 <Vm::fpuULongToFloat(unsigned long long)>:
c0019624:	57                   	push   edi
c0019625:	31 c9                	xor    ecx,ecx
c0019627:	56                   	push   esi
c0019628:	53                   	push   ebx
c0019629:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001962d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019631:	8d 76 00             	lea    esi,[esi+0x0]
c0019634:	0f ba e7 14          	bt     edi,0x14
c0019638:	72 0a                	jb     c0019644 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001963a:	01 f6                	add    esi,esi
c001963c:	11 ff                	adc    edi,edi
c001963e:	41                   	inc    ecx
c001963f:	eb f3                	jmp    c0019634 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019641:	8d 76 00             	lea    esi,[esi+0x0]
c0019644:	89 fa                	mov    edx,edi
c0019646:	89 f0                	mov    eax,esi
c0019648:	bb 33 04 00 00       	mov    ebx,0x433
c001964d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019653:	29 cb                	sub    ebx,ecx
c0019655:	89 d9                	mov    ecx,ebx
c0019657:	5b                   	pop    ebx
c0019658:	c1 e1 14             	shl    ecx,0x14
c001965b:	5e                   	pop    esi
c001965c:	09 ca                	or     edx,ecx
c001965e:	5f                   	pop    edi
c001965f:	c3                   	ret    

c0019660 <Vm::fpuLongToFloat(long long)>:
c0019660:	56                   	push   esi
c0019661:	31 c0                	xor    eax,eax
c0019663:	53                   	push   ebx
c0019664:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019668:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001966c:	39 c8                	cmp    eax,ecx
c001966e:	19 d8                	sbb    eax,ebx
c0019670:	7d 06                	jge    c0019678 <Vm::fpuLongToFloat(long long)+0x18>
c0019672:	31 f6                	xor    esi,esi
c0019674:	eb 0e                	jmp    c0019684 <Vm::fpuLongToFloat(long long)+0x24>
c0019676:	66 90                	xchg   ax,ax
c0019678:	f7 d9                	neg    ecx
c001967a:	be 01 00 00 00       	mov    esi,0x1
c001967f:	83 d3 00             	adc    ebx,0x0
c0019682:	f7 db                	neg    ebx
c0019684:	31 c0                	xor    eax,eax
c0019686:	66 90                	xchg   ax,ax
c0019688:	0f ba e3 14          	bt     ebx,0x14
c001968c:	72 0a                	jb     c0019698 <Vm::fpuLongToFloat(long long)+0x38>
c001968e:	01 c9                	add    ecx,ecx
c0019690:	11 db                	adc    ebx,ebx
c0019692:	40                   	inc    eax
c0019693:	eb f3                	jmp    c0019688 <Vm::fpuLongToFloat(long long)+0x28>
c0019695:	8d 76 00             	lea    esi,[esi+0x0]
c0019698:	ba 33 04 00 00       	mov    edx,0x433
c001969d:	29 c2                	sub    edx,eax
c001969f:	89 c8                	mov    eax,ecx
c00196a1:	c1 e2 14             	shl    edx,0x14
c00196a4:	89 d9                	mov    ecx,ebx
c00196a6:	89 f3                	mov    ebx,esi
c00196a8:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00196ae:	09 ca                	or     edx,ecx
c00196b0:	84 db                	test   bl,bl
c00196b2:	74 08                	je     c00196bc <Vm::fpuLongToFloat(long long)+0x5c>
c00196b4:	81 ca 00 00 00 80    	or     edx,0x80000000
c00196ba:	66 90                	xchg   ax,ax
c00196bc:	5b                   	pop    ebx
c00196bd:	5e                   	pop    esi
c00196be:	c3                   	ret    

c00196bf <Vm::fpuGet0()>:
c00196bf:	31 c0                	xor    eax,eax
c00196c1:	31 d2                	xor    edx,edx
c00196c3:	c3                   	ret    

c00196c4 <Vm::fpuGet1()>:
c00196c4:	b8 01 00 00 00       	mov    eax,0x1
c00196c9:	31 d2                	xor    edx,edx
c00196cb:	c3                   	ret    

c00196cc <Vm::fpuGetPi()>:
c00196cc:	b8 03 00 00 00       	mov    eax,0x3
c00196d1:	31 d2                	xor    edx,edx
c00196d3:	c3                   	ret    

c00196d4 <Vm::fpuGetLog2E()>:
c00196d4:	83 ec 18             	sub    esp,0x18
c00196d7:	68 6c 4a 02 c0       	push   0xc0024a6c
c00196dc:	e8 54 ac ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00196e1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196e6:	31 d2                	xor    edx,edx
c00196e8:	83 c4 1c             	add    esp,0x1c
c00196eb:	c3                   	ret    

c00196ec <Vm::fpuGetLogE2()>:
c00196ec:	83 ec 18             	sub    esp,0x18
c00196ef:	68 78 4a 02 c0       	push   0xc0024a78
c00196f4:	e8 3c ac ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00196f9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196fe:	31 d2                	xor    edx,edx
c0019700:	83 c4 1c             	add    esp,0x1c
c0019703:	c3                   	ret    

c0019704 <Vm::fpuGetLog210()>:
c0019704:	83 ec 18             	sub    esp,0x18
c0019707:	68 84 4a 02 c0       	push   0xc0024a84
c001970c:	e8 24 ac ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0019711:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019716:	31 d2                	xor    edx,edx
c0019718:	83 c4 1c             	add    esp,0x1c
c001971b:	c3                   	ret    

c001971c <Vm::fpuGetLog102()>:
c001971c:	83 ec 18             	sub    esp,0x18
c001971f:	68 91 4a 02 c0       	push   0xc0024a91
c0019724:	e8 0c ac ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0019729:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001972e:	31 d2                	xor    edx,edx
c0019730:	83 c4 1c             	add    esp,0x1c
c0019733:	c3                   	ret    

c0019734 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019734:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019738:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001973c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019740:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019744:	0f 92 c0             	setb   al
c0019747:	c3                   	ret    

c0019748 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019748:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001974c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019750:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019754:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019758:	09 c2                	or     edx,eax
c001975a:	0f 94 c0             	sete   al
c001975d:	c3                   	ret    

c001975e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001975e:	57                   	push   edi
c001975f:	56                   	push   esi
c0019760:	53                   	push   ebx
c0019761:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019765:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019769:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001976d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019771:	57                   	push   edi
c0019772:	56                   	push   esi
c0019773:	53                   	push   ebx
c0019774:	51                   	push   ecx
c0019775:	e8 ce ff ff ff       	call   c0019748 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001977a:	83 c4 10             	add    esp,0x10
c001977d:	88 c2                	mov    dl,al
c001977f:	31 c0                	xor    eax,eax
c0019781:	84 d2                	test   dl,dl
c0019783:	75 0f                	jne    c0019794 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019785:	57                   	push   edi
c0019786:	56                   	push   esi
c0019787:	53                   	push   ebx
c0019788:	51                   	push   ecx
c0019789:	e8 a6 ff ff ff       	call   c0019734 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001978e:	83 c4 10             	add    esp,0x10
c0019791:	8d 76 00             	lea    esi,[esi+0x0]
c0019794:	83 e0 01             	and    eax,0x1
c0019797:	5b                   	pop    ebx
c0019798:	88 c1                	mov    cl,al
c001979a:	83 e2 01             	and    edx,0x1
c001979d:	a0 61 79 02 c0       	mov    al,ds:0xc0027961
c00197a2:	c1 e2 06             	shl    edx,0x6
c00197a5:	83 e0 ba             	and    eax,0xffffffba
c00197a8:	5e                   	pop    esi
c00197a9:	09 c8                	or     eax,ecx
c00197ab:	5f                   	pop    edi
c00197ac:	09 d0                	or     eax,edx
c00197ae:	a2 61 79 02 c0       	mov    ds:0xc0027961,al
c00197b3:	c3                   	ret    

c00197b4 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c00197b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00197bc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00197c0:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c00197c4:	c3                   	ret    

c00197c5 <Vm::fpuAbs(unsigned long long)>:
c00197c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00197cd:	c3                   	ret    

c00197ce <Vm::fpuChs(unsigned long long)>:
c00197ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00197d6:	f7 d8                	neg    eax
c00197d8:	83 d2 00             	adc    edx,0x0
c00197db:	f7 da                	neg    edx
c00197dd:	c3                   	ret    

c00197de <Vm::fpuSub(unsigned long long, unsigned long long)>:
c00197de:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c00197e2:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c00197e7:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c00197eb:	eb c7                	jmp    c00197b4 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c00197ed <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c00197ed:	53                   	push   ebx
c00197ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00197f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00197fa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197fe:	0f af ca             	imul   ecx,edx
c0019801:	0f af d8             	imul   ebx,eax
c0019804:	f7 e2                	mul    edx
c0019806:	01 d9                	add    ecx,ebx
c0019808:	5b                   	pop    ebx
c0019809:	01 ca                	add    edx,ecx
c001980b:	c3                   	ret    

c001980c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001980c:	83 ec 0c             	sub    esp,0xc
c001980f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019813:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019817:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001981b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001981f:	e8 10 77 00 00       	call   c0020f34 <__udivdi3>
c0019824:	83 c4 1c             	add    esp,0x1c
c0019827:	c3                   	ret    

c0019828 <Vm::fpuSquare(unsigned long long)>:
c0019828:	50                   	push   eax
c0019829:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001982d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019831:	52                   	push   edx
c0019832:	50                   	push   eax
c0019833:	52                   	push   edx
c0019834:	50                   	push   eax
c0019835:	e8 b3 ff ff ff       	call   c00197ed <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001983a:	83 c4 14             	add    esp,0x14
c001983d:	c3                   	ret    

c001983e <Vm::fpuGetReg(int)>:
c001983e:	83 ec 0c             	sub    esp,0xc
c0019841:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019846:	76 10                	jbe    c0019858 <Vm::fpuGetReg(int)+0x1a>
c0019848:	83 ec 0c             	sub    esp,0xc
c001984b:	68 9e 4a 02 c0       	push   0xc0024a9e
c0019850:	e8 e0 aa ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0019855:	83 c4 10             	add    esp,0x10
c0019858:	a0 61 79 02 c0       	mov    al,ds:0xc0027961
c001985d:	b9 08 00 00 00       	mov    ecx,0x8
c0019862:	c0 e8 03             	shr    al,0x3
c0019865:	83 e0 07             	and    eax,0x7
c0019868:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001986c:	99                   	cdq    
c001986d:	f7 f9                	idiv   ecx
c001986f:	8b 04 d5 64 79 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd869c]
c0019876:	8b 14 d5 68 79 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd8698]
c001987d:	83 c4 0c             	add    esp,0xc
c0019880:	c3                   	ret    

c0019881 <Vm::fpuSetReg(int, unsigned long long)>:
c0019881:	57                   	push   edi
c0019882:	56                   	push   esi
c0019883:	52                   	push   edx
c0019884:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019888:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001988c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019891:	76 11                	jbe    c00198a4 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0019893:	83 ec 0c             	sub    esp,0xc
c0019896:	68 b1 4a 02 c0       	push   0xc0024ab1
c001989b:	e8 95 aa ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00198a0:	83 c4 10             	add    esp,0x10
c00198a3:	90                   	nop
c00198a4:	a0 61 79 02 c0       	mov    al,ds:0xc0027961
c00198a9:	b9 08 00 00 00       	mov    ecx,0x8
c00198ae:	c0 e8 03             	shr    al,0x3
c00198b1:	83 e0 07             	and    eax,0x7
c00198b4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00198b8:	99                   	cdq    
c00198b9:	f7 f9                	idiv   ecx
c00198bb:	89 34 d5 64 79 02 c0 	mov    DWORD PTR [edx*8-0x3ffd869c],esi
c00198c2:	89 3c d5 68 79 02 c0 	mov    DWORD PTR [edx*8-0x3ffd8698],edi
c00198c9:	58                   	pop    eax
c00198ca:	5e                   	pop    esi
c00198cb:	5f                   	pop    edi
c00198cc:	c3                   	ret    

c00198cd <Vm::fpuPush(unsigned long long)>:
c00198cd:	a0 61 79 02 c0       	mov    al,ds:0xc0027961
c00198d2:	c0 e8 03             	shr    al,0x3
c00198d5:	83 e0 07             	and    eax,0x7
c00198d8:	83 c0 07             	add    eax,0x7
c00198db:	88 c2                	mov    dl,al
c00198dd:	83 e0 07             	and    eax,0x7
c00198e0:	83 e2 07             	and    edx,0x7
c00198e3:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c00198ea:	8a 15 61 79 02 c0    	mov    dl,BYTE PTR ds:0xc0027961
c00198f0:	83 e2 c7             	and    edx,0xffffffc7
c00198f3:	09 ca                	or     edx,ecx
c00198f5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00198f9:	88 15 61 79 02 c0    	mov    BYTE PTR ds:0xc0027961,dl
c00198ff:	89 0c c5 68 79 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8698],ecx
c0019906:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001990a:	89 14 c5 64 79 02 c0 	mov    DWORD PTR [eax*8-0x3ffd869c],edx
c0019911:	a1 a4 79 02 c0       	mov    eax,ds:0xc00279a4
c0019916:	83 f8 08             	cmp    eax,0x8
c0019919:	75 09                	jne    c0019924 <Vm::fpuPush(unsigned long long)+0x57>
c001991b:	80 0d 60 79 02 c0 40 	or     BYTE PTR ds:0xc0027960,0x40
c0019922:	c3                   	ret    
c0019923:	90                   	nop
c0019924:	40                   	inc    eax
c0019925:	a3 a4 79 02 c0       	mov    ds:0xc00279a4,eax
c001992a:	c3                   	ret    

c001992b <Vm::fpuPop()>:
c001992b:	8a 0d 61 79 02 c0    	mov    cl,BYTE PTR ds:0xc0027961
c0019931:	53                   	push   ebx
c0019932:	c0 e9 03             	shr    cl,0x3
c0019935:	8a 1d 61 79 02 c0    	mov    bl,BYTE PTR ds:0xc0027961
c001993b:	83 e1 07             	and    ecx,0x7
c001993e:	83 e3 c7             	and    ebx,0xffffffc7
c0019941:	8b 04 cd 64 79 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd869c]
c0019948:	8b 14 cd 68 79 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd8698]
c001994f:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0019956:	83 e1 38             	and    ecx,0x38
c0019959:	09 d9                	or     ecx,ebx
c001995b:	88 0d 61 79 02 c0    	mov    BYTE PTR ds:0xc0027961,cl
c0019961:	8b 0d a4 79 02 c0    	mov    ecx,DWORD PTR ds:0xc00279a4
c0019967:	85 c9                	test   ecx,ecx
c0019969:	74 09                	je     c0019974 <Vm::fpuPop()+0x49>
c001996b:	49                   	dec    ecx
c001996c:	89 0d a4 79 02 c0    	mov    DWORD PTR ds:0xc00279a4,ecx
c0019972:	eb 08                	jmp    c001997c <Vm::fpuPop()+0x51>
c0019974:	80 0d 60 79 02 c0 40 	or     BYTE PTR ds:0xc0027960,0x40
c001997b:	90                   	nop
c001997c:	5b                   	pop    ebx
c001997d:	c3                   	ret    

c001997e <Vm::x87Handler(regs*)>:
c001997e:	55                   	push   ebp
c001997f:	57                   	push   edi
c0019980:	56                   	push   esi
c0019981:	53                   	push   ebx
c0019982:	83 ec 1c             	sub    esp,0x1c
c0019985:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019989:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001998e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0019991:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0019999:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001999d:	50                   	push   eax
c001999e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00199a2:	50                   	push   eax
c00199a3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199a7:	50                   	push   eax
c00199a8:	53                   	push   ebx
c00199a9:	e8 a0 a0 ff ff       	call   c0013a4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00199ae:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c00199b1:	83 c4 10             	add    esp,0x10
c00199b4:	89 c6                	mov    esi,eax
c00199b6:	80 fa d9             	cmp    dl,0xd9
c00199b9:	0f 85 79 01 00 00    	jne    c0019b38 <Vm::x87Handler(regs*)+0x1ba>
c00199bf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00199c3:	8d 50 20             	lea    edx,[eax+0x20]
c00199c6:	80 fa 0e             	cmp    dl,0xe
c00199c9:	0f 87 a5 00 00 00    	ja     c0019a74 <Vm::x87Handler(regs*)+0xf6>
c00199cf:	0f b6 d2             	movzx  edx,dl
c00199d2:	ff 24 95 c4 4a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb53c]
c00199d9:	8d 76 00             	lea    esi,[esi+0x0]
c00199dc:	e8 de fc ff ff       	call   c00196bf <Vm::fpuGet0()>
c00199e1:	eb 09                	jmp    c00199ec <Vm::x87Handler(regs*)+0x6e>
c00199e3:	90                   	nop
c00199e4:	e8 db fc ff ff       	call   c00196c4 <Vm::fpuGet1()>
c00199e9:	8d 76 00             	lea    esi,[esi+0x0]
c00199ec:	57                   	push   edi
c00199ed:	57                   	push   edi
c00199ee:	66 90                	xchg   ax,ax
c00199f0:	52                   	push   edx
c00199f1:	50                   	push   eax
c00199f2:	e8 d6 fe ff ff       	call   c00198cd <Vm::fpuPush(unsigned long long)>
c00199f7:	90                   	nop
c00199f8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00199fc:	83 c4 10             	add    esp,0x10
c00199ff:	90                   	nop
c0019a00:	b0 01                	mov    al,0x1
c0019a02:	e9 89 0a 00 00       	jmp    c001a490 <Vm::x87Handler(regs*)+0xb12>
c0019a07:	90                   	nop
c0019a08:	83 ec 0c             	sub    esp,0xc
c0019a0b:	6a 00                	push   0x0
c0019a0d:	e8 2c fe ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019a12:	59                   	pop    ecx
c0019a13:	5e                   	pop    esi
c0019a14:	52                   	push   edx
c0019a15:	50                   	push   eax
c0019a16:	e8 b3 fd ff ff       	call   c00197ce <Vm::fpuChs(unsigned long long)>
c0019a1b:	eb 17                	jmp    c0019a34 <Vm::x87Handler(regs*)+0xb6>
c0019a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a20:	83 ec 0c             	sub    esp,0xc
c0019a23:	6a 00                	push   0x0
c0019a25:	e8 14 fe ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019a2a:	5f                   	pop    edi
c0019a2b:	5d                   	pop    ebp
c0019a2c:	52                   	push   edx
c0019a2d:	50                   	push   eax
c0019a2e:	e8 92 fd ff ff       	call   c00197c5 <Vm::fpuAbs(unsigned long long)>
c0019a33:	90                   	nop
c0019a34:	83 c4 0c             	add    esp,0xc
c0019a37:	90                   	nop
c0019a38:	52                   	push   edx
c0019a39:	50                   	push   eax
c0019a3a:	66 90                	xchg   ax,ax
c0019a3c:	6a 00                	push   0x0
c0019a3e:	66 90                	xchg   ax,ax
c0019a40:	e8 3c fe ff ff       	call   c0019881 <Vm::fpuSetReg(int, unsigned long long)>
c0019a45:	eb b1                	jmp    c00199f8 <Vm::x87Handler(regs*)+0x7a>
c0019a47:	90                   	nop
c0019a48:	e8 b7 fc ff ff       	call   c0019704 <Vm::fpuGetLog210()>
c0019a4d:	eb 9d                	jmp    c00199ec <Vm::x87Handler(regs*)+0x6e>
c0019a4f:	90                   	nop
c0019a50:	e8 7f fc ff ff       	call   c00196d4 <Vm::fpuGetLog2E()>
c0019a55:	eb 95                	jmp    c00199ec <Vm::x87Handler(regs*)+0x6e>
c0019a57:	90                   	nop
c0019a58:	e8 6f fc ff ff       	call   c00196cc <Vm::fpuGetPi()>
c0019a5d:	eb 8d                	jmp    c00199ec <Vm::x87Handler(regs*)+0x6e>
c0019a5f:	90                   	nop
c0019a60:	e8 b7 fc ff ff       	call   c001971c <Vm::fpuGetLog102()>
c0019a65:	eb 85                	jmp    c00199ec <Vm::x87Handler(regs*)+0x6e>
c0019a67:	90                   	nop
c0019a68:	e8 7f fc ff ff       	call   c00196ec <Vm::fpuGetLogE2()>
c0019a6d:	e9 7a ff ff ff       	jmp    c00199ec <Vm::x87Handler(regs*)+0x6e>
c0019a72:	66 90                	xchg   ax,ax
c0019a74:	8d 50 40             	lea    edx,[eax+0x40]
c0019a77:	80 fa 07             	cmp    dl,0x7
c0019a7a:	77 18                	ja     c0019a94 <Vm::x87Handler(regs*)+0x116>
c0019a7c:	83 ec 0c             	sub    esp,0xc
c0019a7f:	2d c0 00 00 00       	sub    eax,0xc0
c0019a84:	50                   	push   eax
c0019a85:	e8 b4 fd ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019a8a:	59                   	pop    ecx
c0019a8b:	5e                   	pop    esi
c0019a8c:	e9 5f ff ff ff       	jmp    c00199f0 <Vm::x87Handler(regs*)+0x72>
c0019a91:	8d 76 00             	lea    esi,[esi+0x0]
c0019a94:	8d 50 38             	lea    edx,[eax+0x38]
c0019a97:	80 fa 07             	cmp    dl,0x7
c0019a9a:	77 3c                	ja     c0019ad8 <Vm::x87Handler(regs*)+0x15a>
c0019a9c:	83 ec 0c             	sub    esp,0xc
c0019a9f:	2d c8 00 00 00       	sub    eax,0xc8
c0019aa4:	50                   	push   eax
c0019aa5:	e8 94 fd ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019aaa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ab1:	89 c6                	mov    esi,eax
c0019ab3:	89 d7                	mov    edi,edx
c0019ab5:	e8 84 fd ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019aba:	83 c4 0c             	add    esp,0xc
c0019abd:	52                   	push   edx
c0019abe:	50                   	push   eax
c0019abf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ac3:	2d c8 00 00 00       	sub    eax,0xc8
c0019ac8:	50                   	push   eax
c0019ac9:	e8 b3 fd ff ff       	call   c0019881 <Vm::fpuSetReg(int, unsigned long long)>
c0019ace:	83 c4 0c             	add    esp,0xc
c0019ad1:	57                   	push   edi
c0019ad2:	56                   	push   esi
c0019ad3:	e9 64 ff ff ff       	jmp    c0019a3c <Vm::x87Handler(regs*)+0xbe>
c0019ad8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019adc:	84 d2                	test   dl,dl
c0019ade:	75 10                	jne    c0019af0 <Vm::x87Handler(regs*)+0x172>
c0019ae0:	83 ec 0c             	sub    esp,0xc
c0019ae3:	ff 36                	push   DWORD PTR [esi]
c0019ae5:	e8 8d fa ff ff       	call   c0019577 <Vm::fpu32ToInternal(unsigned int)>
c0019aea:	e9 c9 00 00 00       	jmp    c0019bb8 <Vm::x87Handler(regs*)+0x23a>
c0019aef:	90                   	nop
c0019af0:	80 fa 03             	cmp    dl,0x3
c0019af3:	75 13                	jne    c0019b08 <Vm::x87Handler(regs*)+0x18a>
c0019af5:	e8 31 fe ff ff       	call   c001992b <Vm::fpuPop()>
c0019afa:	55                   	push   ebp
c0019afb:	55                   	push   ebp
c0019afc:	52                   	push   edx
c0019afd:	50                   	push   eax
c0019afe:	e8 0d fa ff ff       	call   c0019510 <Vm::fpuInternalTo32(unsigned long long)>
c0019b03:	e9 90 00 00 00       	jmp    c0019b98 <Vm::x87Handler(regs*)+0x21a>
c0019b08:	80 fa 05             	cmp    dl,0x5
c0019b0b:	75 0f                	jne    c0019b1c <Vm::x87Handler(regs*)+0x19e>
c0019b0d:	66 8b 06             	mov    ax,WORD PTR [esi]
c0019b10:	66 a3 62 79 02 c0    	mov    ds:0xc0027962,ax
c0019b16:	e9 ed 00 00 00       	jmp    c0019c08 <Vm::x87Handler(regs*)+0x28a>
c0019b1b:	90                   	nop
c0019b1c:	31 c0                	xor    eax,eax
c0019b1e:	80 fa 07             	cmp    dl,0x7
c0019b21:	0f 85 69 09 00 00    	jne    c001a490 <Vm::x87Handler(regs*)+0xb12>
c0019b27:	66 a1 62 79 02 c0    	mov    ax,ds:0xc0027962
c0019b2d:	66 89 06             	mov    WORD PTR [esi],ax
c0019b30:	e9 d3 00 00 00       	jmp    c0019c08 <Vm::x87Handler(regs*)+0x28a>
c0019b35:	8d 76 00             	lea    esi,[esi+0x0]
c0019b38:	80 fa d8             	cmp    dl,0xd8
c0019b3b:	0f 84 d3 00 00 00    	je     c0019c14 <Vm::x87Handler(regs*)+0x296>
c0019b41:	80 fa dc             	cmp    dl,0xdc
c0019b44:	0f 84 2a 02 00 00    	je     c0019d74 <Vm::x87Handler(regs*)+0x3f6>
c0019b4a:	80 fa de             	cmp    dl,0xde
c0019b4d:	0f 84 f1 02 00 00    	je     c0019e44 <Vm::x87Handler(regs*)+0x4c6>
c0019b53:	80 fa dd             	cmp    dl,0xdd
c0019b56:	0f 84 94 04 00 00    	je     c0019ff0 <Vm::x87Handler(regs*)+0x672>
c0019b5c:	80 fa da             	cmp    dl,0xda
c0019b5f:	0f 84 5f 05 00 00    	je     c001a0c4 <Vm::x87Handler(regs*)+0x746>
c0019b65:	80 fa df             	cmp    dl,0xdf
c0019b68:	0f 84 aa 05 00 00    	je     c001a118 <Vm::x87Handler(regs*)+0x79a>
c0019b6e:	31 c0                	xor    eax,eax
c0019b70:	80 fa db             	cmp    dl,0xdb
c0019b73:	0f 85 17 09 00 00    	jne    c001a490 <Vm::x87Handler(regs*)+0xb12>
c0019b79:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b7d:	80 fa 03             	cmp    dl,0x3
c0019b80:	0f 85 c2 06 00 00    	jne    c001a248 <Vm::x87Handler(regs*)+0x8ca>
c0019b86:	e8 a0 fd ff ff       	call   c001992b <Vm::fpuPop()>
c0019b8b:	55                   	push   ebp
c0019b8c:	55                   	push   ebp
c0019b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b90:	52                   	push   edx
c0019b91:	50                   	push   eax
c0019b92:	e8 2e fa ff ff       	call   c00195c5 <Vm::fpuFloatToLong(unsigned long long)>
c0019b97:	90                   	nop
c0019b98:	83 c4 10             	add    esp,0x10
c0019b9b:	89 06                	mov    DWORD PTR [esi],eax
c0019b9d:	eb 69                	jmp    c0019c08 <Vm::x87Handler(regs*)+0x28a>
c0019b9f:	90                   	nop
c0019ba0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019ba4:	84 d2                	test   dl,dl
c0019ba6:	0f 85 2c 06 00 00    	jne    c001a1d8 <Vm::x87Handler(regs*)+0x85a>
c0019bac:	57                   	push   edi
c0019bad:	57                   	push   edi
c0019bae:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019bb1:	ff 36                	push   DWORD PTR [esi]
c0019bb3:	e8 04 fa ff ff       	call   c00195bc <Vm::fpu64ToInternal(unsigned long long)>
c0019bb8:	5e                   	pop    esi
c0019bb9:	5f                   	pop    edi
c0019bba:	52                   	push   edx
c0019bbb:	50                   	push   eax
c0019bbc:	e8 0c fd ff ff       	call   c00198cd <Vm::fpuPush(unsigned long long)>
c0019bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0019bc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bc8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019bcb:	e9 2c fe ff ff       	jmp    c00199fc <Vm::x87Handler(regs*)+0x7e>
c0019bd0:	80 fa 03             	cmp    dl,0x3
c0019bd3:	0f 85 2b 07 00 00    	jne    c001a304 <Vm::x87Handler(regs*)+0x986>
c0019bd9:	57                   	push   edi
c0019bda:	57                   	push   edi
c0019bdb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019bde:	ff 36                	push   DWORD PTR [esi]
c0019be0:	e8 d7 f9 ff ff       	call   c00195bc <Vm::fpu64ToInternal(unsigned long long)>
c0019be5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019bec:	89 c6                	mov    esi,eax
c0019bee:	89 d7                	mov    edi,edx
c0019bf0:	e8 49 fc ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019bf5:	57                   	push   edi
c0019bf6:	56                   	push   esi
c0019bf7:	52                   	push   edx
c0019bf8:	50                   	push   eax
c0019bf9:	e8 60 fb ff ff       	call   c001975e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019bfe:	83 c4 20             	add    esp,0x20
c0019c01:	e8 25 fd ff ff       	call   c001992b <Vm::fpuPop()>
c0019c06:	66 90                	xchg   ax,ax
c0019c08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c0c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019c0f:	e9 ec fd ff ff       	jmp    c0019a00 <Vm::x87Handler(regs*)+0x82>
c0019c14:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019c18:	8d 50 40             	lea    edx,[eax+0x40]
c0019c1b:	80 fa 07             	cmp    dl,0x7
c0019c1e:	77 2c                	ja     c0019c4c <Vm::x87Handler(regs*)+0x2ce>
c0019c20:	83 ec 0c             	sub    esp,0xc
c0019c23:	2d c0 00 00 00       	sub    eax,0xc0
c0019c28:	50                   	push   eax
c0019c29:	e8 10 fc ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019c2e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c35:	89 c6                	mov    esi,eax
c0019c37:	89 d7                	mov    edi,edx
c0019c39:	e8 00 fc ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019c3e:	57                   	push   edi
c0019c3f:	56                   	push   esi
c0019c40:	52                   	push   edx
c0019c41:	50                   	push   eax
c0019c42:	e8 6d fb ff ff       	call   c00197b4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019c47:	eb 33                	jmp    c0019c7c <Vm::x87Handler(regs*)+0x2fe>
c0019c49:	8d 76 00             	lea    esi,[esi+0x0]
c0019c4c:	8d 50 38             	lea    edx,[eax+0x38]
c0019c4f:	80 fa 07             	cmp    dl,0x7
c0019c52:	77 30                	ja     c0019c84 <Vm::x87Handler(regs*)+0x306>
c0019c54:	83 ec 0c             	sub    esp,0xc
c0019c57:	2d c8 00 00 00       	sub    eax,0xc8
c0019c5c:	50                   	push   eax
c0019c5d:	e8 dc fb ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019c62:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c69:	89 c6                	mov    esi,eax
c0019c6b:	89 d7                	mov    edi,edx
c0019c6d:	e8 cc fb ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019c72:	57                   	push   edi
c0019c73:	56                   	push   esi
c0019c74:	52                   	push   edx
c0019c75:	50                   	push   eax
c0019c76:	e8 72 fb ff ff       	call   c00197ed <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019c7b:	90                   	nop
c0019c7c:	83 c4 1c             	add    esp,0x1c
c0019c7f:	e9 b4 fd ff ff       	jmp    c0019a38 <Vm::x87Handler(regs*)+0xba>
c0019c84:	8d 50 30             	lea    edx,[eax+0x30]
c0019c87:	80 fa 07             	cmp    dl,0x7
c0019c8a:	77 10                	ja     c0019c9c <Vm::x87Handler(regs*)+0x31e>
c0019c8c:	83 ec 0c             	sub    esp,0xc
c0019c8f:	2d d0 00 00 00       	sub    eax,0xd0
c0019c94:	e9 c3 03 00 00       	jmp    c001a05c <Vm::x87Handler(regs*)+0x6de>
c0019c99:	8d 76 00             	lea    esi,[esi+0x0]
c0019c9c:	8d 50 28             	lea    edx,[eax+0x28]
c0019c9f:	80 fa 07             	cmp    dl,0x7
c0019ca2:	77 10                	ja     c0019cb4 <Vm::x87Handler(regs*)+0x336>
c0019ca4:	83 ec 0c             	sub    esp,0xc
c0019ca7:	2d d8 00 00 00       	sub    eax,0xd8
c0019cac:	e9 e7 03 00 00       	jmp    c001a098 <Vm::x87Handler(regs*)+0x71a>
c0019cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0019cb4:	8d 50 20             	lea    edx,[eax+0x20]
c0019cb7:	80 fa 07             	cmp    dl,0x7
c0019cba:	77 1c                	ja     c0019cd8 <Vm::x87Handler(regs*)+0x35a>
c0019cbc:	83 ec 0c             	sub    esp,0xc
c0019cbf:	2d e0 00 00 00       	sub    eax,0xe0
c0019cc4:	50                   	push   eax
c0019cc5:	e8 74 fb ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019cca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019cd1:	89 c6                	mov    esi,eax
c0019cd3:	89 d7                	mov    edi,edx
c0019cd5:	eb 25                	jmp    c0019cfc <Vm::x87Handler(regs*)+0x37e>
c0019cd7:	90                   	nop
c0019cd8:	8d 50 18             	lea    edx,[eax+0x18]
c0019cdb:	80 fa 07             	cmp    dl,0x7
c0019cde:	77 30                	ja     c0019d10 <Vm::x87Handler(regs*)+0x392>
c0019ce0:	83 ec 0c             	sub    esp,0xc
c0019ce3:	6a 00                	push   0x0
c0019ce5:	e8 54 fb ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019cea:	89 c6                	mov    esi,eax
c0019cec:	89 d7                	mov    edi,edx
c0019cee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019cf2:	2d e8 00 00 00       	sub    eax,0xe8
c0019cf7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cfa:	66 90                	xchg   ax,ax
c0019cfc:	e8 3d fb ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019d01:	57                   	push   edi
c0019d02:	56                   	push   esi
c0019d03:	52                   	push   edx
c0019d04:	50                   	push   eax
c0019d05:	e8 d4 fa ff ff       	call   c00197de <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019d0a:	e9 6d ff ff ff       	jmp    c0019c7c <Vm::x87Handler(regs*)+0x2fe>
c0019d0f:	90                   	nop
c0019d10:	8d 50 10             	lea    edx,[eax+0x10]
c0019d13:	80 fa 07             	cmp    dl,0x7
c0019d16:	77 1c                	ja     c0019d34 <Vm::x87Handler(regs*)+0x3b6>
c0019d18:	83 ec 0c             	sub    esp,0xc
c0019d1b:	2d f0 00 00 00       	sub    eax,0xf0
c0019d20:	50                   	push   eax
c0019d21:	e8 18 fb ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019d26:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d2d:	89 c6                	mov    esi,eax
c0019d2f:	89 d7                	mov    edi,edx
c0019d31:	eb 25                	jmp    c0019d58 <Vm::x87Handler(regs*)+0x3da>
c0019d33:	90                   	nop
c0019d34:	3c f7                	cmp    al,0xf7
c0019d36:	0f 86 00 04 00 00    	jbe    c001a13c <Vm::x87Handler(regs*)+0x7be>
c0019d3c:	83 ec 0c             	sub    esp,0xc
c0019d3f:	6a 00                	push   0x0
c0019d41:	e8 f8 fa ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019d46:	89 c6                	mov    esi,eax
c0019d48:	89 d7                	mov    edi,edx
c0019d4a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d4e:	2d f8 00 00 00       	sub    eax,0xf8
c0019d53:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d56:	66 90                	xchg   ax,ax
c0019d58:	e8 e1 fa ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019d5d:	57                   	push   edi
c0019d5e:	56                   	push   esi
c0019d5f:	52                   	push   edx
c0019d60:	50                   	push   eax
c0019d61:	e8 a6 fa ff ff       	call   c001980c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019d66:	83 c4 1c             	add    esp,0x1c
c0019d69:	52                   	push   edx
c0019d6a:	50                   	push   eax
c0019d6b:	6a 00                	push   0x0
c0019d6d:	e9 6a 02 00 00       	jmp    c0019fdc <Vm::x87Handler(regs*)+0x65e>
c0019d72:	66 90                	xchg   ax,ax
c0019d74:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d78:	8d 50 40             	lea    edx,[eax+0x40]
c0019d7b:	80 fa 07             	cmp    dl,0x7
c0019d7e:	77 38                	ja     c0019db8 <Vm::x87Handler(regs*)+0x43a>
c0019d80:	83 ec 0c             	sub    esp,0xc
c0019d83:	2d c0 00 00 00       	sub    eax,0xc0
c0019d88:	50                   	push   eax
c0019d89:	e8 b0 fa ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019d8e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d95:	89 c6                	mov    esi,eax
c0019d97:	89 d7                	mov    edi,edx
c0019d99:	e8 a0 fa ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019d9e:	57                   	push   edi
c0019d9f:	56                   	push   esi
c0019da0:	52                   	push   edx
c0019da1:	50                   	push   eax
c0019da2:	e8 0d fa ff ff       	call   c00197b4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019da7:	83 c4 1c             	add    esp,0x1c
c0019daa:	52                   	push   edx
c0019dab:	50                   	push   eax
c0019dac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019db0:	2d c0 00 00 00       	sub    eax,0xc0
c0019db5:	eb 41                	jmp    c0019df8 <Vm::x87Handler(regs*)+0x47a>
c0019db7:	90                   	nop
c0019db8:	8d 50 38             	lea    edx,[eax+0x38]
c0019dbb:	80 fa 07             	cmp    dl,0x7
c0019dbe:	77 40                	ja     c0019e00 <Vm::x87Handler(regs*)+0x482>
c0019dc0:	83 ec 0c             	sub    esp,0xc
c0019dc3:	2d c8 00 00 00       	sub    eax,0xc8
c0019dc8:	50                   	push   eax
c0019dc9:	e8 70 fa ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019dce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019dd5:	89 c6                	mov    esi,eax
c0019dd7:	89 d7                	mov    edi,edx
c0019dd9:	e8 60 fa ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019dde:	57                   	push   edi
c0019ddf:	56                   	push   esi
c0019de0:	52                   	push   edx
c0019de1:	50                   	push   eax
c0019de2:	e8 06 fa ff ff       	call   c00197ed <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019de7:	83 c4 1c             	add    esp,0x1c
c0019dea:	52                   	push   edx
c0019deb:	50                   	push   eax
c0019dec:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019df0:	2d c8 00 00 00       	sub    eax,0xc8
c0019df5:	8d 76 00             	lea    esi,[esi+0x0]
c0019df8:	50                   	push   eax
c0019df9:	e9 42 fc ff ff       	jmp    c0019a40 <Vm::x87Handler(regs*)+0xc2>
c0019dfe:	66 90                	xchg   ax,ax
c0019e00:	83 c0 18             	add    eax,0x18
c0019e03:	3c 07                	cmp    al,0x7
c0019e05:	0f 87 6d 04 00 00    	ja     c001a278 <Vm::x87Handler(regs*)+0x8fa>
c0019e0b:	83 ec 0c             	sub    esp,0xc
c0019e0e:	6a 00                	push   0x0
c0019e10:	e8 29 fa ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019e15:	89 c6                	mov    esi,eax
c0019e17:	89 d7                	mov    edi,edx
c0019e19:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e1d:	2d e8 00 00 00       	sub    eax,0xe8
c0019e22:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e25:	e8 14 fa ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019e2a:	57                   	push   edi
c0019e2b:	56                   	push   esi
c0019e2c:	52                   	push   edx
c0019e2d:	50                   	push   eax
c0019e2e:	e8 ab f9 ff ff       	call   c00197de <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019e33:	83 c4 1c             	add    esp,0x1c
c0019e36:	52                   	push   edx
c0019e37:	50                   	push   eax
c0019e38:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e3c:	2d e8 00 00 00       	sub    eax,0xe8
c0019e41:	eb b5                	jmp    c0019df8 <Vm::x87Handler(regs*)+0x47a>
c0019e43:	90                   	nop
c0019e44:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e48:	8d 50 40             	lea    edx,[eax+0x40]
c0019e4b:	80 fa 07             	cmp    dl,0x7
c0019e4e:	77 3c                	ja     c0019e8c <Vm::x87Handler(regs*)+0x50e>
c0019e50:	83 ec 0c             	sub    esp,0xc
c0019e53:	2d c0 00 00 00       	sub    eax,0xc0
c0019e58:	50                   	push   eax
c0019e59:	e8 e0 f9 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019e5e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e65:	89 c6                	mov    esi,eax
c0019e67:	89 d7                	mov    edi,edx
c0019e69:	e8 d0 f9 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019e6e:	57                   	push   edi
c0019e6f:	56                   	push   esi
c0019e70:	52                   	push   edx
c0019e71:	50                   	push   eax
c0019e72:	e8 3d f9 ff ff       	call   c00197b4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019e77:	83 c4 1c             	add    esp,0x1c
c0019e7a:	52                   	push   edx
c0019e7b:	50                   	push   eax
c0019e7c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e80:	2d c0 00 00 00       	sub    eax,0xc0
c0019e85:	e9 b2 01 00 00       	jmp    c001a03c <Vm::x87Handler(regs*)+0x6be>
c0019e8a:	66 90                	xchg   ax,ax
c0019e8c:	8d 50 20             	lea    edx,[eax+0x20]
c0019e8f:	80 fa 07             	cmp    dl,0x7
c0019e92:	77 3c                	ja     c0019ed0 <Vm::x87Handler(regs*)+0x552>
c0019e94:	83 ec 0c             	sub    esp,0xc
c0019e97:	2d e0 00 00 00       	sub    eax,0xe0
c0019e9c:	50                   	push   eax
c0019e9d:	e8 9c f9 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019ea2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ea9:	89 c6                	mov    esi,eax
c0019eab:	89 d7                	mov    edi,edx
c0019ead:	e8 8c f9 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019eb2:	57                   	push   edi
c0019eb3:	56                   	push   esi
c0019eb4:	52                   	push   edx
c0019eb5:	50                   	push   eax
c0019eb6:	e8 23 f9 ff ff       	call   c00197de <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019ebb:	83 c4 1c             	add    esp,0x1c
c0019ebe:	52                   	push   edx
c0019ebf:	50                   	push   eax
c0019ec0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ec4:	2d e0 00 00 00       	sub    eax,0xe0
c0019ec9:	e9 6e 01 00 00       	jmp    c001a03c <Vm::x87Handler(regs*)+0x6be>
c0019ece:	66 90                	xchg   ax,ax
c0019ed0:	8d 50 18             	lea    edx,[eax+0x18]
c0019ed3:	80 fa 07             	cmp    dl,0x7
c0019ed6:	77 3c                	ja     c0019f14 <Vm::x87Handler(regs*)+0x596>
c0019ed8:	83 ec 0c             	sub    esp,0xc
c0019edb:	6a 00                	push   0x0
c0019edd:	e8 5c f9 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019ee2:	89 c6                	mov    esi,eax
c0019ee4:	89 d7                	mov    edi,edx
c0019ee6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019eea:	2d e8 00 00 00       	sub    eax,0xe8
c0019eef:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ef2:	e8 47 f9 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019ef7:	57                   	push   edi
c0019ef8:	56                   	push   esi
c0019ef9:	52                   	push   edx
c0019efa:	50                   	push   eax
c0019efb:	e8 de f8 ff ff       	call   c00197de <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019f00:	83 c4 1c             	add    esp,0x1c
c0019f03:	52                   	push   edx
c0019f04:	50                   	push   eax
c0019f05:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f09:	2d e8 00 00 00       	sub    eax,0xe8
c0019f0e:	e9 29 01 00 00       	jmp    c001a03c <Vm::x87Handler(regs*)+0x6be>
c0019f13:	90                   	nop
c0019f14:	8d 50 38             	lea    edx,[eax+0x38]
c0019f17:	80 fa 07             	cmp    dl,0x7
c0019f1a:	77 3c                	ja     c0019f58 <Vm::x87Handler(regs*)+0x5da>
c0019f1c:	83 ec 0c             	sub    esp,0xc
c0019f1f:	2d c8 00 00 00       	sub    eax,0xc8
c0019f24:	50                   	push   eax
c0019f25:	e8 14 f9 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019f2a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019f31:	89 c6                	mov    esi,eax
c0019f33:	89 d7                	mov    edi,edx
c0019f35:	e8 04 f9 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019f3a:	57                   	push   edi
c0019f3b:	56                   	push   esi
c0019f3c:	52                   	push   edx
c0019f3d:	50                   	push   eax
c0019f3e:	e8 aa f8 ff ff       	call   c00197ed <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019f43:	83 c4 1c             	add    esp,0x1c
c0019f46:	52                   	push   edx
c0019f47:	50                   	push   eax
c0019f48:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f4c:	2d c8 00 00 00       	sub    eax,0xc8
c0019f51:	e9 82 00 00 00       	jmp    c0019fd8 <Vm::x87Handler(regs*)+0x65a>
c0019f56:	66 90                	xchg   ax,ax
c0019f58:	3c f7                	cmp    al,0xf7
c0019f5a:	76 38                	jbe    c0019f94 <Vm::x87Handler(regs*)+0x616>
c0019f5c:	83 ec 0c             	sub    esp,0xc
c0019f5f:	6a 00                	push   0x0
c0019f61:	e8 d8 f8 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019f66:	89 c6                	mov    esi,eax
c0019f68:	89 d7                	mov    edi,edx
c0019f6a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f6e:	2d f8 00 00 00       	sub    eax,0xf8
c0019f73:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f76:	e8 c3 f8 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019f7b:	57                   	push   edi
c0019f7c:	56                   	push   esi
c0019f7d:	52                   	push   edx
c0019f7e:	50                   	push   eax
c0019f7f:	e8 88 f8 ff ff       	call   c001980c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019f84:	83 c4 1c             	add    esp,0x1c
c0019f87:	52                   	push   edx
c0019f88:	50                   	push   eax
c0019f89:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f8d:	2d f8 00 00 00       	sub    eax,0xf8
c0019f92:	eb 44                	jmp    c0019fd8 <Vm::x87Handler(regs*)+0x65a>
c0019f94:	8d 50 10             	lea    edx,[eax+0x10]
c0019f97:	80 fa 07             	cmp    dl,0x7
c0019f9a:	0f 87 6c 01 00 00    	ja     c001a10c <Vm::x87Handler(regs*)+0x78e>
c0019fa0:	83 ec 0c             	sub    esp,0xc
c0019fa3:	2d f0 00 00 00       	sub    eax,0xf0
c0019fa8:	50                   	push   eax
c0019fa9:	e8 90 f8 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019fae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019fb5:	89 c6                	mov    esi,eax
c0019fb7:	89 d7                	mov    edi,edx
c0019fb9:	e8 80 f8 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c0019fbe:	57                   	push   edi
c0019fbf:	56                   	push   esi
c0019fc0:	52                   	push   edx
c0019fc1:	50                   	push   eax
c0019fc2:	e8 45 f8 ff ff       	call   c001980c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019fc7:	83 c4 1c             	add    esp,0x1c
c0019fca:	52                   	push   edx
c0019fcb:	50                   	push   eax
c0019fcc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fd0:	2d f0 00 00 00       	sub    eax,0xf0
c0019fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0019fd8:	50                   	push   eax
c0019fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fdc:	e8 a0 f8 ff ff       	call   c0019881 <Vm::fpuSetReg(int, unsigned long long)>
c0019fe1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019fe5:	e8 41 f9 ff ff       	call   c001992b <Vm::fpuPop()>
c0019fea:	e9 0d fa ff ff       	jmp    c00199fc <Vm::x87Handler(regs*)+0x7e>
c0019fef:	90                   	nop
c0019ff0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ff4:	8d 50 30             	lea    edx,[eax+0x30]
c0019ff7:	80 fa 07             	cmp    dl,0x7
c0019ffa:	77 20                	ja     c001a01c <Vm::x87Handler(regs*)+0x69e>
c0019ffc:	83 ec 0c             	sub    esp,0xc
c0019fff:	6a 00                	push   0x0
c001a001:	e8 38 f8 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a006:	83 c4 0c             	add    esp,0xc
c001a009:	52                   	push   edx
c001a00a:	50                   	push   eax
c001a00b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a00f:	2d d0 00 00 00       	sub    eax,0xd0
c001a014:	e9 df fd ff ff       	jmp    c0019df8 <Vm::x87Handler(regs*)+0x47a>
c001a019:	8d 76 00             	lea    esi,[esi+0x0]
c001a01c:	8d 50 28             	lea    edx,[eax+0x28]
c001a01f:	80 fa 07             	cmp    dl,0x7
c001a022:	77 28                	ja     c001a04c <Vm::x87Handler(regs*)+0x6ce>
c001a024:	83 ec 0c             	sub    esp,0xc
c001a027:	6a 00                	push   0x0
c001a029:	e8 10 f8 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a02e:	83 c4 0c             	add    esp,0xc
c001a031:	52                   	push   edx
c001a032:	50                   	push   eax
c001a033:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a037:	2d d8 00 00 00       	sub    eax,0xd8
c001a03c:	50                   	push   eax
c001a03d:	e8 3f f8 ff ff       	call   c0019881 <Vm::fpuSetReg(int, unsigned long long)>
c001a042:	e8 e4 f8 ff ff       	call   c001992b <Vm::fpuPop()>
c001a047:	e9 ac f9 ff ff       	jmp    c00199f8 <Vm::x87Handler(regs*)+0x7a>
c001a04c:	8d 50 20             	lea    edx,[eax+0x20]
c001a04f:	80 fa 07             	cmp    dl,0x7
c001a052:	77 30                	ja     c001a084 <Vm::x87Handler(regs*)+0x706>
c001a054:	83 ec 0c             	sub    esp,0xc
c001a057:	2d e0 00 00 00       	sub    eax,0xe0
c001a05c:	50                   	push   eax
c001a05d:	e8 dc f7 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a062:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a069:	89 c6                	mov    esi,eax
c001a06b:	89 d7                	mov    edi,edx
c001a06d:	e8 cc f7 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a072:	57                   	push   edi
c001a073:	56                   	push   esi
c001a074:	52                   	push   edx
c001a075:	50                   	push   eax
c001a076:	e8 e3 f6 ff ff       	call   c001975e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a07b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a07f:	e9 78 02 00 00       	jmp    c001a2fc <Vm::x87Handler(regs*)+0x97e>
c001a084:	8d 50 18             	lea    edx,[eax+0x18]
c001a087:	80 fa 07             	cmp    dl,0x7
c001a08a:	0f 87 10 fb ff ff    	ja     c0019ba0 <Vm::x87Handler(regs*)+0x222>
c001a090:	83 ec 0c             	sub    esp,0xc
c001a093:	2d e8 00 00 00       	sub    eax,0xe8
c001a098:	50                   	push   eax
c001a099:	e8 a0 f7 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a09e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0a5:	89 c6                	mov    esi,eax
c001a0a7:	89 d7                	mov    edi,edx
c001a0a9:	e8 90 f7 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a0ae:	57                   	push   edi
c001a0af:	56                   	push   esi
c001a0b0:	52                   	push   edx
c001a0b1:	50                   	push   eax
c001a0b2:	e8 a7 f6 ff ff       	call   c001975e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0b7:	83 c4 20             	add    esp,0x20
c001a0ba:	e8 6c f8 ff ff       	call   c001992b <Vm::fpuPop()>
c001a0bf:	eb 6f                	jmp    c001a130 <Vm::x87Handler(regs*)+0x7b2>
c001a0c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0c4:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a0c8:	0f 85 22 01 00 00    	jne    c001a1f0 <Vm::x87Handler(regs*)+0x872>
c001a0ce:	66 90                	xchg   ax,ax
c001a0d0:	83 ec 0c             	sub    esp,0xc
c001a0d3:	6a 01                	push   0x1
c001a0d5:	e8 64 f7 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a0da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0e1:	89 c6                	mov    esi,eax
c001a0e3:	89 d7                	mov    edi,edx
c001a0e5:	e8 54 f7 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a0ea:	57                   	push   edi
c001a0eb:	56                   	push   esi
c001a0ec:	52                   	push   edx
c001a0ed:	50                   	push   eax
c001a0ee:	e8 6b f6 ff ff       	call   c001975e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0f3:	83 c4 20             	add    esp,0x20
c001a0f6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a0fa:	e8 2c f8 ff ff       	call   c001992b <Vm::fpuPop()>
c001a0ff:	e8 27 f8 ff ff       	call   c001992b <Vm::fpuPop()>
c001a104:	e9 f7 f8 ff ff       	jmp    c0019a00 <Vm::x87Handler(regs*)+0x82>
c001a109:	8d 76 00             	lea    esi,[esi+0x0]
c001a10c:	3c d9                	cmp    al,0xd9
c001a10e:	0f 85 e8 02 00 00    	jne    c001a3fc <Vm::x87Handler(regs*)+0xa7e>
c001a114:	eb ba                	jmp    c001a0d0 <Vm::x87Handler(regs*)+0x752>
c001a116:	66 90                	xchg   ax,ax
c001a118:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a11c:	0f 85 2a 03 00 00    	jne    c001a44c <Vm::x87Handler(regs*)+0xace>
c001a122:	0f b7 05 60 79 02 c0 	movzx  eax,WORD PTR ds:0xc0027960
c001a129:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a12d:	8d 76 00             	lea    esi,[esi+0x0]
c001a130:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a134:	e9 c7 f8 ff ff       	jmp    c0019a00 <Vm::x87Handler(regs*)+0x82>
c001a139:	8d 76 00             	lea    esi,[esi+0x0]
c001a13c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a140:	84 d2                	test   dl,dl
c001a142:	75 10                	jne    c001a154 <Vm::x87Handler(regs*)+0x7d6>
c001a144:	83 ec 0c             	sub    esp,0xc
c001a147:	ff 36                	push   DWORD PTR [esi]
c001a149:	e8 29 f4 ff ff       	call   c0019577 <Vm::fpu32ToInternal(unsigned int)>
c001a14e:	e9 39 01 00 00       	jmp    c001a28c <Vm::x87Handler(regs*)+0x90e>
c001a153:	90                   	nop
c001a154:	80 fa 01             	cmp    dl,0x1
c001a157:	75 0f                	jne    c001a168 <Vm::x87Handler(regs*)+0x7ea>
c001a159:	83 ec 0c             	sub    esp,0xc
c001a15c:	ff 36                	push   DWORD PTR [esi]
c001a15e:	e8 14 f4 ff ff       	call   c0019577 <Vm::fpu32ToInternal(unsigned int)>
c001a163:	e9 b4 02 00 00       	jmp    c001a41c <Vm::x87Handler(regs*)+0xa9e>
c001a168:	80 fa 04             	cmp    dl,0x4
c001a16b:	75 0f                	jne    c001a17c <Vm::x87Handler(regs*)+0x7fe>
c001a16d:	83 ec 0c             	sub    esp,0xc
c001a170:	ff 36                	push   DWORD PTR [esi]
c001a172:	e8 00 f4 ff ff       	call   c0019577 <Vm::fpu32ToInternal(unsigned int)>
c001a177:	e9 9c 01 00 00       	jmp    c001a318 <Vm::x87Handler(regs*)+0x99a>
c001a17c:	80 fa 05             	cmp    dl,0x5
c001a17f:	75 1b                	jne    c001a19c <Vm::x87Handler(regs*)+0x81e>
c001a181:	83 ec 0c             	sub    esp,0xc
c001a184:	6a 00                	push   0x0
c001a186:	e8 b3 f6 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a18b:	89 c7                	mov    edi,eax
c001a18d:	89 d5                	mov    ebp,edx
c001a18f:	58                   	pop    eax
c001a190:	ff 36                	push   DWORD PTR [esi]
c001a192:	e8 e0 f3 ff ff       	call   c0019577 <Vm::fpu32ToInternal(unsigned int)>
c001a197:	e9 bc 01 00 00       	jmp    c001a358 <Vm::x87Handler(regs*)+0x9da>
c001a19c:	80 fa 06             	cmp    dl,0x6
c001a19f:	75 0f                	jne    c001a1b0 <Vm::x87Handler(regs*)+0x832>
c001a1a1:	83 ec 0c             	sub    esp,0xc
c001a1a4:	ff 36                	push   DWORD PTR [esi]
c001a1a6:	e8 cc f3 ff ff       	call   c0019577 <Vm::fpu32ToInternal(unsigned int)>
c001a1ab:	e9 cc 01 00 00       	jmp    c001a37c <Vm::x87Handler(regs*)+0x9fe>
c001a1b0:	31 c0                	xor    eax,eax
c001a1b2:	80 fa 07             	cmp    dl,0x7
c001a1b5:	0f 85 d5 02 00 00    	jne    c001a490 <Vm::x87Handler(regs*)+0xb12>
c001a1bb:	83 ec 0c             	sub    esp,0xc
c001a1be:	6a 00                	push   0x0
c001a1c0:	e8 79 f6 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a1c5:	89 c7                	mov    edi,eax
c001a1c7:	89 d5                	mov    ebp,edx
c001a1c9:	58                   	pop    eax
c001a1ca:	ff 36                	push   DWORD PTR [esi]
c001a1cc:	e8 a6 f3 ff ff       	call   c0019577 <Vm::fpu32ToInternal(unsigned int)>
c001a1d1:	e9 ee 01 00 00       	jmp    c001a3c4 <Vm::x87Handler(regs*)+0xa46>
c001a1d6:	66 90                	xchg   ax,ax
c001a1d8:	80 fa 03             	cmp    dl,0x3
c001a1db:	0f 85 f7 01 00 00    	jne    c001a3d8 <Vm::x87Handler(regs*)+0xa5a>
c001a1e1:	e8 45 f7 ff ff       	call   c001992b <Vm::fpuPop()>
c001a1e6:	51                   	push   ecx
c001a1e7:	51                   	push   ecx
c001a1e8:	e9 03 02 00 00       	jmp    c001a3f0 <Vm::x87Handler(regs*)+0xa72>
c001a1ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a1f0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a1f4:	80 fa 01             	cmp    dl,0x1
c001a1f7:	75 0b                	jne    c001a204 <Vm::x87Handler(regs*)+0x886>
c001a1f9:	57                   	push   edi
c001a1fa:	57                   	push   edi
c001a1fb:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1fd:	e9 0e 02 00 00       	jmp    c001a410 <Vm::x87Handler(regs*)+0xa92>
c001a202:	66 90                	xchg   ax,ax
c001a204:	80 fa 04             	cmp    dl,0x4
c001a207:	75 13                	jne    c001a21c <Vm::x87Handler(regs*)+0x89e>
c001a209:	31 d2                	xor    edx,edx
c001a20b:	51                   	push   ecx
c001a20c:	51                   	push   ecx
c001a20d:	8b 06                	mov    eax,DWORD PTR [esi]
c001a20f:	52                   	push   edx
c001a210:	50                   	push   eax
c001a211:	e8 4a f4 ff ff       	call   c0019660 <Vm::fpuLongToFloat(long long)>
c001a216:	e9 fd 00 00 00       	jmp    c001a318 <Vm::x87Handler(regs*)+0x99a>
c001a21b:	90                   	nop
c001a21c:	31 c0                	xor    eax,eax
c001a21e:	80 fa 07             	cmp    dl,0x7
c001a221:	0f 85 69 02 00 00    	jne    c001a490 <Vm::x87Handler(regs*)+0xb12>
c001a227:	83 ec 0c             	sub    esp,0xc
c001a22a:	6a 00                	push   0x0
c001a22c:	e8 0d f6 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a231:	89 c7                	mov    edi,eax
c001a233:	89 d5                	mov    ebp,edx
c001a235:	58                   	pop    eax
c001a236:	8b 06                	mov    eax,DWORD PTR [esi]
c001a238:	5a                   	pop    edx
c001a239:	31 d2                	xor    edx,edx
c001a23b:	52                   	push   edx
c001a23c:	50                   	push   eax
c001a23d:	e8 1e f4 ff ff       	call   c0019660 <Vm::fpuLongToFloat(long long)>
c001a242:	e9 7d 01 00 00       	jmp    c001a3c4 <Vm::x87Handler(regs*)+0xa46>
c001a247:	90                   	nop
c001a248:	84 d2                	test   dl,dl
c001a24a:	75 10                	jne    c001a25c <Vm::x87Handler(regs*)+0x8de>
c001a24c:	31 d2                	xor    edx,edx
c001a24e:	55                   	push   ebp
c001a24f:	55                   	push   ebp
c001a250:	8b 06                	mov    eax,DWORD PTR [esi]
c001a252:	52                   	push   edx
c001a253:	50                   	push   eax
c001a254:	e9 03 02 00 00       	jmp    c001a45c <Vm::x87Handler(regs*)+0xade>
c001a259:	8d 76 00             	lea    esi,[esi+0x0]
c001a25c:	31 c0                	xor    eax,eax
c001a25e:	80 fa 02             	cmp    dl,0x2
c001a261:	0f 85 29 02 00 00    	jne    c001a490 <Vm::x87Handler(regs*)+0xb12>
c001a267:	83 ec 0c             	sub    esp,0xc
c001a26a:	6a 00                	push   0x0
c001a26c:	e8 cd f5 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a271:	59                   	pop    ecx
c001a272:	5f                   	pop    edi
c001a273:	e9 18 f9 ff ff       	jmp    c0019b90 <Vm::x87Handler(regs*)+0x212>
c001a278:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a27c:	84 d2                	test   dl,dl
c001a27e:	75 2c                	jne    c001a2ac <Vm::x87Handler(regs*)+0x92e>
c001a280:	50                   	push   eax
c001a281:	50                   	push   eax
c001a282:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a285:	ff 36                	push   DWORD PTR [esi]
c001a287:	e8 30 f3 ff ff       	call   c00195bc <Vm::fpu64ToInternal(unsigned long long)>
c001a28c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a293:	89 c6                	mov    esi,eax
c001a295:	89 d7                	mov    edi,edx
c001a297:	e8 a2 f5 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a29c:	57                   	push   edi
c001a29d:	56                   	push   esi
c001a29e:	52                   	push   edx
c001a29f:	50                   	push   eax
c001a2a0:	e8 0f f5 ff ff       	call   c00197b4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a2a5:	e9 8e 01 00 00       	jmp    c001a438 <Vm::x87Handler(regs*)+0xaba>
c001a2aa:	66 90                	xchg   ax,ax
c001a2ac:	80 fa 01             	cmp    dl,0x1
c001a2af:	75 13                	jne    c001a2c4 <Vm::x87Handler(regs*)+0x946>
c001a2b1:	50                   	push   eax
c001a2b2:	50                   	push   eax
c001a2b3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2b6:	ff 36                	push   DWORD PTR [esi]
c001a2b8:	e8 ff f2 ff ff       	call   c00195bc <Vm::fpu64ToInternal(unsigned long long)>
c001a2bd:	e9 5a 01 00 00       	jmp    c001a41c <Vm::x87Handler(regs*)+0xa9e>
c001a2c2:	66 90                	xchg   ax,ax
c001a2c4:	80 fa 02             	cmp    dl,0x2
c001a2c7:	0f 85 03 f9 ff ff    	jne    c0019bd0 <Vm::x87Handler(regs*)+0x252>
c001a2cd:	55                   	push   ebp
c001a2ce:	55                   	push   ebp
c001a2cf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2d2:	ff 36                	push   DWORD PTR [esi]
c001a2d4:	e8 e3 f2 ff ff       	call   c00195bc <Vm::fpu64ToInternal(unsigned long long)>
c001a2d9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2e0:	89 c6                	mov    esi,eax
c001a2e2:	89 d7                	mov    edi,edx
c001a2e4:	e8 55 f5 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a2e9:	57                   	push   edi
c001a2ea:	56                   	push   esi
c001a2eb:	52                   	push   edx
c001a2ec:	50                   	push   eax
c001a2ed:	e8 6c f4 ff ff       	call   c001975e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a2f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a2f6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a2f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a2fc:	83 c4 20             	add    esp,0x20
c001a2ff:	e9 fc f6 ff ff       	jmp    c0019a00 <Vm::x87Handler(regs*)+0x82>
c001a304:	80 fa 04             	cmp    dl,0x4
c001a307:	75 2f                	jne    c001a338 <Vm::x87Handler(regs*)+0x9ba>
c001a309:	51                   	push   ecx
c001a30a:	51                   	push   ecx
c001a30b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a30e:	ff 36                	push   DWORD PTR [esi]
c001a310:	e8 a7 f2 ff ff       	call   c00195bc <Vm::fpu64ToInternal(unsigned long long)>
c001a315:	8d 76 00             	lea    esi,[esi+0x0]
c001a318:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a31f:	89 c6                	mov    esi,eax
c001a321:	89 d7                	mov    edi,edx
c001a323:	e8 16 f5 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a328:	57                   	push   edi
c001a329:	56                   	push   esi
c001a32a:	52                   	push   edx
c001a32b:	50                   	push   eax
c001a32c:	e8 ad f4 ff ff       	call   c00197de <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a331:	e9 02 01 00 00       	jmp    c001a438 <Vm::x87Handler(regs*)+0xaba>
c001a336:	66 90                	xchg   ax,ax
c001a338:	80 fa 05             	cmp    dl,0x5
c001a33b:	75 2b                	jne    c001a368 <Vm::x87Handler(regs*)+0x9ea>
c001a33d:	83 ec 0c             	sub    esp,0xc
c001a340:	6a 00                	push   0x0
c001a342:	e8 f7 f4 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a347:	89 c7                	mov    edi,eax
c001a349:	89 d5                	mov    ebp,edx
c001a34b:	58                   	pop    eax
c001a34c:	5a                   	pop    edx
c001a34d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a350:	ff 36                	push   DWORD PTR [esi]
c001a352:	e8 65 f2 ff ff       	call   c00195bc <Vm::fpu64ToInternal(unsigned long long)>
c001a357:	90                   	nop
c001a358:	83 c4 10             	add    esp,0x10
c001a35b:	55                   	push   ebp
c001a35c:	57                   	push   edi
c001a35d:	52                   	push   edx
c001a35e:	50                   	push   eax
c001a35f:	e8 7a f4 ff ff       	call   c00197de <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a364:	eb 6a                	jmp    c001a3d0 <Vm::x87Handler(regs*)+0xa52>
c001a366:	66 90                	xchg   ax,ax
c001a368:	80 fa 06             	cmp    dl,0x6
c001a36b:	75 2f                	jne    c001a39c <Vm::x87Handler(regs*)+0xa1e>
c001a36d:	51                   	push   ecx
c001a36e:	51                   	push   ecx
c001a36f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a372:	ff 36                	push   DWORD PTR [esi]
c001a374:	e8 43 f2 ff ff       	call   c00195bc <Vm::fpu64ToInternal(unsigned long long)>
c001a379:	8d 76 00             	lea    esi,[esi+0x0]
c001a37c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a383:	89 c6                	mov    esi,eax
c001a385:	89 d7                	mov    edi,edx
c001a387:	e8 b2 f4 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a38c:	57                   	push   edi
c001a38d:	56                   	push   esi
c001a38e:	52                   	push   edx
c001a38f:	50                   	push   eax
c001a390:	e8 77 f4 ff ff       	call   c001980c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a395:	e9 9e 00 00 00       	jmp    c001a438 <Vm::x87Handler(regs*)+0xaba>
c001a39a:	66 90                	xchg   ax,ax
c001a39c:	31 c0                	xor    eax,eax
c001a39e:	80 fa 07             	cmp    dl,0x7
c001a3a1:	0f 85 e9 00 00 00    	jne    c001a490 <Vm::x87Handler(regs*)+0xb12>
c001a3a7:	83 ec 0c             	sub    esp,0xc
c001a3aa:	6a 00                	push   0x0
c001a3ac:	e8 8d f4 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a3b1:	89 c7                	mov    edi,eax
c001a3b3:	89 d5                	mov    ebp,edx
c001a3b5:	58                   	pop    eax
c001a3b6:	5a                   	pop    edx
c001a3b7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3ba:	ff 36                	push   DWORD PTR [esi]
c001a3bc:	e8 fb f1 ff ff       	call   c00195bc <Vm::fpu64ToInternal(unsigned long long)>
c001a3c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3c4:	83 c4 10             	add    esp,0x10
c001a3c7:	55                   	push   ebp
c001a3c8:	57                   	push   edi
c001a3c9:	52                   	push   edx
c001a3ca:	50                   	push   eax
c001a3cb:	e8 3c f4 ff ff       	call   c001980c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a3d0:	83 c4 0c             	add    esp,0xc
c001a3d3:	eb 67                	jmp    c001a43c <Vm::x87Handler(regs*)+0xabe>
c001a3d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3d8:	31 c0                	xor    eax,eax
c001a3da:	80 fa 02             	cmp    dl,0x2
c001a3dd:	0f 85 ad 00 00 00    	jne    c001a490 <Vm::x87Handler(regs*)+0xb12>
c001a3e3:	83 ec 0c             	sub    esp,0xc
c001a3e6:	6a 00                	push   0x0
c001a3e8:	e8 51 f4 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a3ed:	59                   	pop    ecx
c001a3ee:	5f                   	pop    edi
c001a3ef:	90                   	nop
c001a3f0:	52                   	push   edx
c001a3f1:	50                   	push   eax
c001a3f2:	e8 77 f1 ff ff       	call   c001956e <Vm::fpuInternalTo64(unsigned long long)>
c001a3f7:	e9 84 00 00 00       	jmp    c001a480 <Vm::x87Handler(regs*)+0xb02>
c001a3fc:	31 c0                	xor    eax,eax
c001a3fe:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a403:	0f 85 87 00 00 00    	jne    c001a490 <Vm::x87Handler(regs*)+0xb12>
c001a409:	50                   	push   eax
c001a40a:	50                   	push   eax
c001a40b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a40e:	66 90                	xchg   ax,ax
c001a410:	31 d2                	xor    edx,edx
c001a412:	52                   	push   edx
c001a413:	50                   	push   eax
c001a414:	e8 47 f2 ff ff       	call   c0019660 <Vm::fpuLongToFloat(long long)>
c001a419:	8d 76 00             	lea    esi,[esi+0x0]
c001a41c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a423:	89 c6                	mov    esi,eax
c001a425:	89 d7                	mov    edi,edx
c001a427:	e8 12 f4 ff ff       	call   c001983e <Vm::fpuGetReg(int)>
c001a42c:	57                   	push   edi
c001a42d:	56                   	push   esi
c001a42e:	52                   	push   edx
c001a42f:	50                   	push   eax
c001a430:	e8 b8 f3 ff ff       	call   c00197ed <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a435:	8d 76 00             	lea    esi,[esi+0x0]
c001a438:	83 c4 1c             	add    esp,0x1c
c001a43b:	90                   	nop
c001a43c:	52                   	push   edx
c001a43d:	50                   	push   eax
c001a43e:	6a 00                	push   0x0
c001a440:	e8 3c f4 ff ff       	call   c0019881 <Vm::fpuSetReg(int, unsigned long long)>
c001a445:	e9 7a f7 ff ff       	jmp    c0019bc4 <Vm::x87Handler(regs*)+0x246>
c001a44a:	66 90                	xchg   ax,ax
c001a44c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a450:	80 fa 05             	cmp    dl,0x5
c001a453:	75 13                	jne    c001a468 <Vm::x87Handler(regs*)+0xaea>
c001a455:	55                   	push   ebp
c001a456:	55                   	push   ebp
c001a457:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a45a:	ff 36                	push   DWORD PTR [esi]
c001a45c:	e8 c3 f1 ff ff       	call   c0019624 <Vm::fpuULongToFloat(unsigned long long)>
c001a461:	e9 52 f7 ff ff       	jmp    c0019bb8 <Vm::x87Handler(regs*)+0x23a>
c001a466:	66 90                	xchg   ax,ax
c001a468:	31 c0                	xor    eax,eax
c001a46a:	80 fa 07             	cmp    dl,0x7
c001a46d:	75 21                	jne    c001a490 <Vm::x87Handler(regs*)+0xb12>
c001a46f:	e8 b7 f4 ff ff       	call   c001992b <Vm::fpuPop()>
c001a474:	51                   	push   ecx
c001a475:	51                   	push   ecx
c001a476:	52                   	push   edx
c001a477:	50                   	push   eax
c001a478:	e8 48 f1 ff ff       	call   c00195c5 <Vm::fpuFloatToLong(unsigned long long)>
c001a47d:	8d 76 00             	lea    esi,[esi+0x0]
c001a480:	83 c4 10             	add    esp,0x10
c001a483:	89 06                	mov    DWORD PTR [esi],eax
c001a485:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a488:	e9 7b f7 ff ff       	jmp    c0019c08 <Vm::x87Handler(regs*)+0x28a>
c001a48d:	8d 76 00             	lea    esi,[esi+0x0]
c001a490:	83 c4 1c             	add    esp,0x1c
c001a493:	5b                   	pop    ebx
c001a494:	5e                   	pop    esi
c001a495:	5f                   	pop    edi
c001a496:	5d                   	pop    ebp
c001a497:	c3                   	ret    

c001a498 <__static_initialization_and_destruction_0(int, int)>:
c001a498:	83 ec 0c             	sub    esp,0xc
c001a49b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a4a0:	75 1a                	jne    c001a4bc <__static_initialization_and_destruction_0(int, int)+0x24>
c001a4a2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a4aa:	75 10                	jne    c001a4bc <__static_initialization_and_destruction_0(int, int)+0x24>
c001a4ac:	83 ec 0c             	sub    esp,0xc
c001a4af:	68 60 79 02 c0       	push   0xc0027960
c001a4b4:	e8 1f 74 00 00       	call   c00218d8 <Vm::_FPUState::_FPUState()>
c001a4b9:	83 c4 10             	add    esp,0x10
c001a4bc:	90                   	nop
c001a4bd:	83 c4 0c             	add    esp,0xc
c001a4c0:	c3                   	ret    
c001a4c1:	8d 76 00             	lea    esi,[esi+0x0]

c001a4c4 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a4c4:	83 ec 0c             	sub    esp,0xc
c001a4c7:	83 ec 08             	sub    esp,0x8
c001a4ca:	68 ff ff 00 00       	push   0xffff
c001a4cf:	6a 01                	push   0x1
c001a4d1:	e8 c2 ff ff ff       	call   c001a498 <__static_initialization_and_destruction_0(int, int)>
c001a4d6:	83 c4 10             	add    esp,0x10
c001a4d9:	83 c4 0c             	add    esp,0xc
c001a4dc:	c3                   	ret    
c001a4dd:	66 90                	xchg   ax,ax
c001a4df:	90                   	nop

c001a4e0 <FAT::getName()>:
c001a4e0:	b8 00 4b 02 c0       	mov    eax,0xc0024b00
c001a4e5:	c3                   	ret    
c001a4e6:	66 90                	xchg   ax,ax

c001a4e8 <FAT::tell(void*, unsigned long long*)>:
c001a4e8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a4ed:	75 09                	jne    c001a4f8 <FAT::tell(void*, unsigned long long*)+0x10>
c001a4ef:	b8 04 00 00 00       	mov    eax,0x4
c001a4f4:	c3                   	ret    
c001a4f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4f8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a4fd:	75 09                	jne    c001a508 <FAT::tell(void*, unsigned long long*)+0x20>
c001a4ff:	b8 04 00 00 00       	mov    eax,0x4
c001a504:	c3                   	ret    
c001a505:	8d 76 00             	lea    esi,[esi+0x0]
c001a508:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a50c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a50f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a512:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a516:	89 01                	mov    DWORD PTR [ecx],eax
c001a518:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a51b:	b8 00 00 00 00       	mov    eax,0x0
c001a520:	c3                   	ret    
c001a521:	90                   	nop
c001a522:	66 90                	xchg   ax,ax

c001a524 <FAT::stat(void*, unsigned long long*)>:
c001a524:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a529:	75 09                	jne    c001a534 <FAT::stat(void*, unsigned long long*)+0x10>
c001a52b:	b8 04 00 00 00       	mov    eax,0x4
c001a530:	c3                   	ret    
c001a531:	8d 76 00             	lea    esi,[esi+0x0]
c001a534:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a539:	75 09                	jne    c001a544 <FAT::stat(void*, unsigned long long*)+0x20>
c001a53b:	b8 04 00 00 00       	mov    eax,0x4
c001a540:	c3                   	ret    
c001a541:	8d 76 00             	lea    esi,[esi+0x0]
c001a544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a548:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a54b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a54e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a552:	89 01                	mov    DWORD PTR [ecx],eax
c001a554:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a557:	b8 00 00 00 00       	mov    eax,0x0
c001a55c:	c3                   	ret    
c001a55d:	90                   	nop
c001a55e:	66 90                	xchg   ax,ax

c001a560 <FAT::~FAT()>:
c001a560:	83 ec 0c             	sub    esp,0xc
c001a563:	ba 4c 4b 02 c0       	mov    edx,0xc0024b4c
c001a568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a56c:	89 10                	mov    DWORD PTR [eax],edx
c001a56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a572:	83 ec 0c             	sub    esp,0xc
c001a575:	50                   	push   eax
c001a576:	e8 33 28 ff ff       	call   c000cdae <Filesystem::~Filesystem()>
c001a57b:	83 c4 10             	add    esp,0x10
c001a57e:	90                   	nop
c001a57f:	83 c4 0c             	add    esp,0xc
c001a582:	c3                   	ret    
c001a583:	90                   	nop

c001a584 <FAT::~FAT()>:
c001a584:	83 ec 0c             	sub    esp,0xc
c001a587:	83 ec 0c             	sub    esp,0xc
c001a58a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a58e:	e8 cd ff ff ff       	call   c001a560 <FAT::~FAT()>
c001a593:	83 c4 10             	add    esp,0x10
c001a596:	83 ec 08             	sub    esp,0x8
c001a599:	6a 08                	push   0x8
c001a59b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a59f:	e8 ee 23 ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c001a5a4:	83 c4 10             	add    esp,0x10
c001a5a7:	83 c4 0c             	add    esp,0xc
c001a5aa:	c3                   	ret    
c001a5ab:	90                   	nop

c001a5ac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a5ac:	83 ec 1c             	sub    esp,0x1c
c001a5af:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a5b6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a5bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5bf:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a5c6:	83 f8 ff             	cmp    eax,0xffffffff
c001a5c9:	75 35                	jne    c001a600 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a5cb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a5cf:	88 c2                	mov    dl,al
c001a5d1:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a5d6:	01 d0                	add    eax,edx
c001a5d8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a5dc:	8b 15 c0 79 02 c0    	mov    edx,DWORD PTR ds:0xc00279c0
c001a5e2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5e6:	89 14 85 e0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8620],edx
c001a5ed:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a5f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a5f6:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a5fd:	eb 19                	jmp    c001a618 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a5ff:	90                   	nop
c001a600:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a604:	88 c2                	mov    dl,al
c001a606:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a60a:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a611:	01 d0                	add    eax,edx
c001a613:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a617:	90                   	nop
c001a618:	83 ec 04             	sub    esp,0x4
c001a61b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a61f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a623:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a627:	50                   	push   eax
c001a628:	e8 05 c6 fe ff       	call   c0006c32 <f_getlabel>
c001a62d:	83 c4 10             	add    esp,0x10
c001a630:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a634:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a639:	75 09                	jne    c001a644 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a63b:	b8 00 00 00 00       	mov    eax,0x0
c001a640:	eb 0a                	jmp    c001a64c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a642:	66 90                	xchg   ax,ax
c001a644:	b8 01 00 00 00       	mov    eax,0x1
c001a649:	8d 76 00             	lea    esi,[esi+0x0]
c001a64c:	83 c4 1c             	add    esp,0x1c
c001a64f:	c3                   	ret    

c001a650 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a650:	57                   	push   edi
c001a651:	83 ec 58             	sub    esp,0x58
c001a654:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a65c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a660:	b9 0f 00 00 00       	mov    ecx,0xf
c001a665:	b8 00 00 00 00       	mov    eax,0x0
c001a66a:	fc                   	cld    
c001a66b:	89 d7                	mov    edi,edx
c001a66d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a66f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a673:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a67a:	83 f8 ff             	cmp    eax,0xffffffff
c001a67d:	75 35                	jne    c001a6b4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a67f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a683:	88 c2                	mov    dl,al
c001a685:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a68a:	01 d0                	add    eax,edx
c001a68c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a690:	8b 15 c0 79 02 c0    	mov    edx,DWORD PTR ds:0xc00279c0
c001a696:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a69a:	89 14 85 e0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8620],edx
c001a6a1:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a6a6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a6aa:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a6b1:	eb 19                	jmp    c001a6cc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a6b3:	90                   	nop
c001a6b4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6b8:	88 c2                	mov    dl,al
c001a6ba:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a6be:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a6c5:	01 d0                	add    eax,edx
c001a6c7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6cb:	90                   	nop
c001a6cc:	83 ec 08             	sub    esp,0x8
c001a6cf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a6d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a6d7:	50                   	push   eax
c001a6d8:	e8 a3 61 fe ff       	call   c0000880 <strcat>
c001a6dd:	83 c4 10             	add    esp,0x10
c001a6e0:	83 ec 0c             	sub    esp,0xc
c001a6e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a6e7:	50                   	push   eax
c001a6e8:	e8 33 c7 fe ff       	call   c0006e20 <f_setlabel>
c001a6ed:	83 c4 10             	add    esp,0x10
c001a6f0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a6f4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a6f9:	75 09                	jne    c001a704 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a6fb:	b8 00 00 00 00       	mov    eax,0x0
c001a700:	eb 0a                	jmp    c001a70c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a702:	66 90                	xchg   ax,ax
c001a704:	b8 01 00 00 00       	mov    eax,0x1
c001a709:	8d 76 00             	lea    esi,[esi+0x0]
c001a70c:	83 c4 58             	add    esp,0x58
c001a70f:	5f                   	pop    edi
c001a710:	c3                   	ret    
c001a711:	90                   	nop
c001a712:	66 90                	xchg   ax,ax

c001a714 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a714:	83 ec 2c             	sub    esp,0x2c
c001a717:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a71f:	83 ec 08             	sub    esp,0x8
c001a722:	68 24 4b 02 c0       	push   0xc0024b24
c001a727:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a72b:	e8 9c 60 fe ff       	call   c00007cc <strcmp>
c001a730:	83 c4 10             	add    esp,0x10
c001a733:	85 c0                	test   eax,eax
c001a735:	0f 94 c0             	sete   al
c001a738:	84 c0                	test   al,al
c001a73a:	74 10                	je     c001a74c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a73c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a744:	e9 b3 00 00 00       	jmp    c001a7fc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a749:	8d 76 00             	lea    esi,[esi+0x0]
c001a74c:	83 ec 08             	sub    esp,0x8
c001a74f:	68 16 4b 02 c0       	push   0xc0024b16
c001a754:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a758:	e8 6f 60 fe ff       	call   c00007cc <strcmp>
c001a75d:	83 c4 10             	add    esp,0x10
c001a760:	85 c0                	test   eax,eax
c001a762:	0f 94 c0             	sete   al
c001a765:	84 c0                	test   al,al
c001a767:	74 0f                	je     c001a778 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001a769:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a771:	e9 86 00 00 00       	jmp    c001a7fc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a776:	66 90                	xchg   ax,ax
c001a778:	83 ec 08             	sub    esp,0x8
c001a77b:	68 1c 4b 02 c0       	push   0xc0024b1c
c001a780:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a784:	e8 43 60 fe ff       	call   c00007cc <strcmp>
c001a789:	83 c4 10             	add    esp,0x10
c001a78c:	85 c0                	test   eax,eax
c001a78e:	0f 94 c0             	sete   al
c001a791:	84 c0                	test   al,al
c001a793:	74 0b                	je     c001a7a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001a795:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a79d:	eb 5d                	jmp    c001a7fc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a79f:	90                   	nop
c001a7a0:	83 ec 08             	sub    esp,0x8
c001a7a3:	68 4c 20 02 c0       	push   0xc002204c
c001a7a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7ac:	e8 1b 60 fe ff       	call   c00007cc <strcmp>
c001a7b1:	83 c4 10             	add    esp,0x10
c001a7b4:	85 c0                	test   eax,eax
c001a7b6:	0f 94 c0             	sete   al
c001a7b9:	84 c0                	test   al,al
c001a7bb:	74 0b                	je     c001a7c8 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001a7bd:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a7c5:	eb 35                	jmp    c001a7fc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7c7:	90                   	nop
c001a7c8:	83 ec 08             	sub    esp,0x8
c001a7cb:	68 22 4b 02 c0       	push   0xc0024b22
c001a7d0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7d4:	e8 f3 5f fe ff       	call   c00007cc <strcmp>
c001a7d9:	83 c4 10             	add    esp,0x10
c001a7dc:	85 c0                	test   eax,eax
c001a7de:	0f 94 c0             	sete   al
c001a7e1:	84 c0                	test   al,al
c001a7e3:	74 0b                	je     c001a7f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001a7e5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a7ed:	eb 0d                	jmp    c001a7fc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7ef:	90                   	nop
c001a7f0:	b8 08 00 00 00       	mov    eax,0x8
c001a7f5:	e9 ea 00 00 00       	jmp    c001a8e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a7fa:	66 90                	xchg   ax,ax
c001a7fc:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a803:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a808:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a80c:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a813:	83 f8 ff             	cmp    eax,0xffffffff
c001a816:	75 34                	jne    c001a84c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001a818:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a81c:	88 c2                	mov    dl,al
c001a81e:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a823:	01 d0                	add    eax,edx
c001a825:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a829:	8b 15 c0 79 02 c0    	mov    edx,DWORD PTR ds:0xc00279c0
c001a82f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a833:	89 14 85 e0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8620],edx
c001a83a:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a83f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a843:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a84a:	eb 18                	jmp    c001a864 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001a84c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a850:	88 c2                	mov    dl,al
c001a852:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a856:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a85d:	01 d0                	add    eax,edx
c001a85f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a863:	90                   	nop
c001a864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a868:	88 04 24             	mov    BYTE PTR [esp],al
c001a86b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a86f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a873:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a87b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a880:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a888:	83 ec 0c             	sub    esp,0xc
c001a88b:	68 00 20 00 00       	push   0x2000
c001a890:	e8 2e f1 fe ff       	call   c00099c3 <malloc>
c001a895:	83 c4 10             	add    esp,0x10
c001a898:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a89c:	68 00 20 00 00       	push   0x2000
c001a8a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a8a9:	50                   	push   eax
c001a8aa:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a8ae:	50                   	push   eax
c001a8af:	e8 ed cb fe ff       	call   c00074a1 <f_mkfs>
c001a8b4:	83 c4 10             	add    esp,0x10
c001a8b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a8bb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a8c0:	75 0a                	jne    c001a8cc <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001a8c2:	b8 00 00 00 00       	mov    eax,0x0
c001a8c7:	eb 1b                	jmp    c001a8e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a8c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a8cc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a8d1:	75 09                	jne    c001a8dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a8d3:	b8 09 00 00 00       	mov    eax,0x9
c001a8d8:	eb 0a                	jmp    c001a8e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a8da:	66 90                	xchg   ax,ax
c001a8dc:	b8 01 00 00 00       	mov    eax,0x1
c001a8e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a8e4:	83 c4 2c             	add    esp,0x2c
c001a8e7:	c3                   	ret    

c001a8e8 <FAT::tryMount(LogicalDisk*, int)>:
c001a8e8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a8ee:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a8f3:	83 f8 14             	cmp    eax,0x14
c001a8f6:	75 18                	jne    c001a910 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a8f8:	83 ec 0c             	sub    esp,0xc
c001a8fb:	68 28 4b 02 c0       	push   0xc0024b28
c001a900:	e8 30 9a ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001a905:	83 c4 10             	add    esp,0x10
c001a908:	b0 00                	mov    al,0x0
c001a90a:	e9 e9 01 00 00       	jmp    c001aaf8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a90f:	90                   	nop
c001a910:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a917:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a91d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a923:	3d 00 02 00 00       	cmp    eax,0x200
c001a928:	74 0a                	je     c001a934 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a92a:	b0 00                	mov    al,0x0
c001a92c:	e9 c7 01 00 00       	jmp    c001aaf8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a931:	8d 76 00             	lea    esi,[esi+0x0]
c001a934:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a93c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a943:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001a94a:	83 f8 ff             	cmp    eax,0xffffffff
c001a94d:	74 09                	je     c001a958 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a94f:	b0 01                	mov    al,0x1
c001a951:	e9 a2 01 00 00       	jmp    c001aaf8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a956:	66 90                	xchg   ax,ax
c001a958:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a962:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a96a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a971:	88 c2                	mov    dl,al
c001a973:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a978:	01 d0                	add    eax,edx
c001a97a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a981:	8b 15 c0 79 02 c0    	mov    edx,DWORD PTR ds:0xc00279c0
c001a987:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a98e:	89 14 85 e0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8620],edx
c001a995:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001a99a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a9a1:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a9a8:	83 ec 0c             	sub    esp,0xc
c001a9ab:	68 54 02 00 00       	push   0x254
c001a9b0:	e8 0e f0 fe ff       	call   c00099c3 <malloc>
c001a9b5:	83 c4 10             	add    esp,0x10
c001a9b8:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a9bf:	83 ec 04             	sub    esp,0x4
c001a9c2:	6a 00                	push   0x0
c001a9c4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a9cb:	50                   	push   eax
c001a9cc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a9d3:	e8 51 a4 fe ff       	call   c0004e29 <f_mount>
c001a9d8:	83 c4 10             	add    esp,0x10
c001a9db:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a9e2:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a9ea:	74 1c                	je     c001aa08 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001a9ec:	83 ec 0c             	sub    esp,0xc
c001a9ef:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a9f6:	e8 e8 ef fe ff       	call   c00099e3 <rfree>
c001a9fb:	83 c4 10             	add    esp,0x10
c001a9fe:	b0 00                	mov    al,0x0
c001aa00:	e9 f3 00 00 00       	jmp    c001aaf8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001aa05:	8d 76 00             	lea    esi,[esi+0x0]
c001aa08:	83 ec 04             	sub    esp,0x4
c001aa0b:	68 00 01 00 00       	push   0x100
c001aa10:	6a 00                	push   0x0
c001aa12:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa19:	50                   	push   eax
c001aa1a:	e8 65 5c fe ff       	call   c0000684 <memset>
c001aa1f:	83 c4 10             	add    esp,0x10
c001aa22:	83 ec 08             	sub    esp,0x8
c001aa25:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aa2c:	50                   	push   eax
c001aa2d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa34:	50                   	push   eax
c001aa35:	e8 46 5e fe ff       	call   c0000880 <strcat>
c001aa3a:	83 c4 10             	add    esp,0x10
c001aa3d:	83 ec 08             	sub    esp,0x8
c001aa40:	68 36 4b 02 c0       	push   0xc0024b36
c001aa45:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa4c:	50                   	push   eax
c001aa4d:	e8 2e 5e fe ff       	call   c0000880 <strcat>
c001aa52:	83 c4 10             	add    esp,0x10
c001aa55:	83 ec 04             	sub    esp,0x4
c001aa58:	6a 01                	push   0x1
c001aa5a:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001aa61:	50                   	push   eax
c001aa62:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa66:	50                   	push   eax
c001aa67:	e8 1f a4 fe ff       	call   c0004e8b <f_open>
c001aa6c:	83 c4 10             	add    esp,0x10
c001aa6f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001aa76:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001aa7d:	85 c0                	test   eax,eax
c001aa7f:	74 0b                	je     c001aa8c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001aa81:	78 31                	js     c001aab4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aa83:	83 e8 04             	sub    eax,0x4
c001aa86:	83 f8 01             	cmp    eax,0x1
c001aa89:	77 29                	ja     c001aab4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aa8b:	90                   	nop
c001aa8c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001aa94:	83 ec 0c             	sub    esp,0xc
c001aa97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa9b:	50                   	push   eax
c001aa9c:	e8 3c af fe ff       	call   c00059dd <f_close>
c001aaa1:	83 c4 10             	add    esp,0x10
c001aaa4:	90                   	nop
c001aaa5:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001aaad:	74 41                	je     c001aaf0 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001aaaf:	eb 33                	jmp    c001aae4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001aab1:	8d 76 00             	lea    esi,[esi+0x0]
c001aab4:	83 ec 0c             	sub    esp,0xc
c001aab7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aabe:	e8 20 ef fe ff       	call   c00099e3 <rfree>
c001aac3:	83 c4 10             	add    esp,0x10
c001aac6:	83 ec 04             	sub    esp,0x4
c001aac9:	6a 00                	push   0x0
c001aacb:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aad2:	50                   	push   eax
c001aad3:	6a 00                	push   0x0
c001aad5:	e8 4f a3 fe ff       	call   c0004e29 <f_mount>
c001aada:	83 c4 10             	add    esp,0x10
c001aadd:	b0 00                	mov    al,0x0
c001aadf:	eb 17                	jmp    c001aaf8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001aae1:	8d 76 00             	lea    esi,[esi+0x0]
c001aae4:	a1 c0 79 02 c0       	mov    eax,ds:0xc00279c0
c001aae9:	40                   	inc    eax
c001aaea:	a3 c0 79 02 c0       	mov    ds:0xc00279c0,eax
c001aaef:	90                   	nop
c001aaf0:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001aaf7:	90                   	nop
c001aaf8:	81 c4 6c 03 00 00    	add    esp,0x36c
c001aafe:	c3                   	ret    
c001aaff:	90                   	nop

c001ab00 <FAT::allocateSwapfile(char const*, int)>:
c001ab00:	55                   	push   ebp
c001ab01:	57                   	push   edi
c001ab02:	56                   	push   esi
c001ab03:	53                   	push   ebx
c001ab04:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001ab0a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001ab15:	83 ec 0c             	sub    esp,0xc
c001ab18:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001ab1f:	e8 9f ee fe ff       	call   c00099c3 <malloc>
c001ab24:	83 c4 10             	add    esp,0x10
c001ab27:	89 c7                	mov    edi,eax
c001ab29:	a1 f0 78 02 c0       	mov    eax,ds:0xc00278f0
c001ab2e:	83 ec 04             	sub    esp,0x4
c001ab31:	50                   	push   eax
c001ab32:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001ab39:	57                   	push   edi
c001ab3a:	e8 9f 24 ff ff       	call   c000cfde <File::File(char const*, Process*)>
c001ab3f:	83 c4 10             	add    esp,0x10
c001ab42:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001ab49:	83 ec 04             	sub    esp,0x4
c001ab4c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ab50:	50                   	push   eax
c001ab51:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab55:	50                   	push   eax
c001ab56:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab5d:	e8 8c 27 ff ff       	call   c000d2ee <File::stat(unsigned long long*, bool*)>
c001ab62:	83 c4 10             	add    esp,0x10
c001ab65:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ab6c:	c1 e0 14             	shl    eax,0x14
c001ab6f:	89 c7                	mov    edi,eax
c001ab71:	89 c5                	mov    ebp,eax
c001ab73:	c1 fd 1f             	sar    ebp,0x1f
c001ab76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab7a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab7e:	89 f9                	mov    ecx,edi
c001ab80:	31 c1                	xor    ecx,eax
c001ab82:	89 cb                	mov    ebx,ecx
c001ab84:	89 e9                	mov    ecx,ebp
c001ab86:	31 d1                	xor    ecx,edx
c001ab88:	89 ce                	mov    esi,ecx
c001ab8a:	89 f0                	mov    eax,esi
c001ab8c:	09 d8                	or     eax,ebx
c001ab8e:	0f 84 98 00 00 00    	je     c001ac2c <FAT::allocateSwapfile(char const*, int)+0x12c>
c001ab94:	83 ec 0c             	sub    esp,0xc
c001ab97:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab9e:	e8 17 26 ff ff       	call   c000d1ba <File::unlink()>
c001aba3:	83 c4 10             	add    esp,0x10
c001aba6:	83 ec 08             	sub    esp,0x8
c001aba9:	6a 12                	push   0x12
c001abab:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001abb2:	e8 8b 24 ff ff       	call   c000d042 <File::open(FileOpenMode)>
c001abb7:	83 c4 10             	add    esp,0x10
c001abba:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001abc1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001abc7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001abce:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001abd5:	c1 e0 14             	shl    eax,0x14
c001abd8:	99                   	cdq    
c001abd9:	6a 01                	push   0x1
c001abdb:	52                   	push   edx
c001abdc:	50                   	push   eax
c001abdd:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001abe4:	e8 a4 c4 fe ff       	call   c000708d <f_expand>
c001abe9:	83 c4 10             	add    esp,0x10
c001abec:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001abf3:	8b 00                	mov    eax,DWORD PTR [eax]
c001abf5:	83 c0 10             	add    eax,0x10
c001abf8:	8b 00                	mov    eax,DWORD PTR [eax]
c001abfa:	83 ec 0c             	sub    esp,0xc
c001abfd:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac01:	52                   	push   edx
c001ac02:	8d 54 24 30          	lea    edx,[esp+0x30]
c001ac06:	52                   	push   edx
c001ac07:	6a 00                	push   0x0
c001ac09:	68 00 04 00 00       	push   0x400
c001ac0e:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ac15:	ff d0                	call   eax
c001ac17:	83 c4 20             	add    esp,0x20
c001ac1a:	83 ec 0c             	sub    esp,0xc
c001ac1d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac24:	e8 77 24 ff ff       	call   c000d0a0 <File::close()>
c001ac29:	83 c4 10             	add    esp,0x10
c001ac2c:	83 ec 08             	sub    esp,0x8
c001ac2f:	6a 01                	push   0x1
c001ac31:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac38:	e8 05 24 ff ff       	call   c000d042 <File::open(FileOpenMode)>
c001ac3d:	83 c4 10             	add    esp,0x10
c001ac40:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac47:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac49:	83 c0 0c             	add    eax,0xc
c001ac4c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac4e:	83 ec 0c             	sub    esp,0xc
c001ac51:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac55:	52                   	push   edx
c001ac56:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001ac5a:	52                   	push   edx
c001ac5b:	6a 00                	push   0x0
c001ac5d:	6a 04                	push   0x4
c001ac5f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ac66:	ff d0                	call   eax
c001ac68:	83 c4 20             	add    esp,0x20
c001ac6b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac72:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ac78:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ac7f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001ac86:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001ac89:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ac8c:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001ac93:	83 ec 0c             	sub    esp,0xc
c001ac96:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac9d:	e8 fe 23 ff ff       	call   c000d0a0 <File::close()>
c001aca2:	83 c4 10             	add    esp,0x10
c001aca5:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001acac:	ba 00 00 00 00       	mov    edx,0x0
c001acb1:	81 c4 3c 04 00 00    	add    esp,0x43c
c001acb7:	5b                   	pop    ebx
c001acb8:	5e                   	pop    esi
c001acb9:	5f                   	pop    edi
c001acba:	5d                   	pop    ebp
c001acbb:	c3                   	ret    

c001acbc <FAT::readDir(void*, unsigned long, void*, int*)>:
c001acbc:	57                   	push   edi
c001acbd:	56                   	push   esi
c001acbe:	53                   	push   ebx
c001acbf:	81 ec 50 02 00 00    	sub    esp,0x250
c001acc5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001accd:	74 0d                	je     c001acdc <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001accf:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001acd7:	75 0f                	jne    c001ace8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001acd9:	8d 76 00             	lea    esi,[esi+0x0]
c001acdc:	b8 04 00 00 00       	mov    eax,0x4
c001ace1:	e9 36 01 00 00       	jmp    c001ae1c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ace6:	66 90                	xchg   ax,ax
c001ace8:	83 ec 08             	sub    esp,0x8
c001aceb:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001acf2:	50                   	push   eax
c001acf3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001acfa:	e8 e8 b2 fe ff       	call   c0005fe7 <f_readdir>
c001acff:	83 c4 10             	add    esp,0x10
c001ad02:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001ad09:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001ad10:	83 ec 0c             	sub    esp,0xc
c001ad13:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ad1a:	83 c0 1a             	add    eax,0x1a
c001ad1d:	50                   	push   eax
c001ad1e:	e8 7d 59 fe ff       	call   c00006a0 <strlen>
c001ad23:	83 c4 10             	add    esp,0x10
c001ad26:	ba 00 00 00 00       	mov    edx,0x0
c001ad2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad2f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad33:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001ad3a:	0f b6 c0             	movzx  eax,al
c001ad3d:	83 e0 10             	and    eax,0x10
c001ad40:	74 0a                	je     c001ad4c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001ad42:	b8 02 00 00 00       	mov    eax,0x2
c001ad47:	eb 0b                	jmp    c001ad54 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001ad49:	8d 76 00             	lea    esi,[esi+0x0]
c001ad4c:	b8 01 00 00 00       	mov    eax,0x1
c001ad51:	8d 76 00             	lea    esi,[esi+0x0]
c001ad54:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad58:	83 ec 08             	sub    esp,0x8
c001ad5b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ad62:	83 c0 1a             	add    eax,0x1a
c001ad65:	50                   	push   eax
c001ad66:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ad6a:	83 c0 10             	add    eax,0x10
c001ad6d:	50                   	push   eax
c001ad6e:	e8 cd 59 fe ff       	call   c0000740 <strcpy>
c001ad73:	83 c4 10             	add    esp,0x10
c001ad76:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001ad7d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001ad84:	8d 44 24 04          	lea    eax,[esp+0x4]
c001ad88:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001ad8f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001ad96:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001ad9d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001ada4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001adab:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001adb2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001adb9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001adc0:	89 c6                	mov    esi,eax
c001adc2:	89 d7                	mov    edi,edx
c001adc4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adc6:	89 c8                	mov    eax,ecx
c001adc8:	89 fa                	mov    edx,edi
c001adca:	89 f3                	mov    ebx,esi
c001adcc:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001add3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001adda:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001ade1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001ade8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001adee:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001adf5:	84 c0                	test   al,al
c001adf7:	75 07                	jne    c001ae00 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001adf9:	b8 07 00 00 00       	mov    eax,0x7
c001adfe:	eb 1c                	jmp    c001ae1c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ae00:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001ae07:	85 c0                	test   eax,eax
c001ae09:	75 09                	jne    c001ae14 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001ae0b:	b8 00 00 00 00       	mov    eax,0x0
c001ae10:	eb 0a                	jmp    c001ae1c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ae12:	66 90                	xchg   ax,ax
c001ae14:	b8 01 00 00 00       	mov    eax,0x1
c001ae19:	8d 76 00             	lea    esi,[esi+0x0]
c001ae1c:	81 c4 50 02 00 00    	add    esp,0x250
c001ae22:	5b                   	pop    ebx
c001ae23:	5e                   	pop    esi
c001ae24:	5f                   	pop    edi
c001ae25:	c3                   	ret    
c001ae26:	66 90                	xchg   ax,ax

c001ae28 <FAT::read(void*, unsigned long, void*, int*)>:
c001ae28:	83 ec 1c             	sub    esp,0x1c
c001ae2b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae30:	74 0a                	je     c001ae3c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001ae32:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ae37:	75 0b                	jne    c001ae44 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001ae39:	8d 76 00             	lea    esi,[esi+0x0]
c001ae3c:	b8 04 00 00 00       	mov    eax,0x4
c001ae41:	eb 41                	jmp    c001ae84 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ae43:	90                   	nop
c001ae44:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ae48:	50                   	push   eax
c001ae49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae51:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae55:	e8 6d a4 fe ff       	call   c00052c7 <f_read>
c001ae5a:	83 c4 10             	add    esp,0x10
c001ae5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae65:	89 c2                	mov    edx,eax
c001ae67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae6b:	89 10                	mov    DWORD PTR [eax],edx
c001ae6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae71:	85 c0                	test   eax,eax
c001ae73:	75 07                	jne    c001ae7c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001ae75:	b8 00 00 00 00       	mov    eax,0x0
c001ae7a:	eb 08                	jmp    c001ae84 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ae7c:	b8 01 00 00 00       	mov    eax,0x1
c001ae81:	8d 76 00             	lea    esi,[esi+0x0]
c001ae84:	83 c4 1c             	add    esp,0x1c
c001ae87:	c3                   	ret    

c001ae88 <FAT::write(void*, unsigned long, void*, int*)>:
c001ae88:	83 ec 1c             	sub    esp,0x1c
c001ae8b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae90:	74 0a                	je     c001ae9c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001ae92:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ae97:	75 0b                	jne    c001aea4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001ae99:	8d 76 00             	lea    esi,[esi+0x0]
c001ae9c:	b8 04 00 00 00       	mov    eax,0x4
c001aea1:	eb 41                	jmp    c001aee4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001aea3:	90                   	nop
c001aea4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aea8:	50                   	push   eax
c001aea9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aead:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001aeb1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aeb5:	e8 8d a6 fe ff       	call   c0005547 <f_write>
c001aeba:	83 c4 10             	add    esp,0x10
c001aebd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aec1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aec5:	89 c2                	mov    edx,eax
c001aec7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aecb:	89 10                	mov    DWORD PTR [eax],edx
c001aecd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aed1:	85 c0                	test   eax,eax
c001aed3:	75 07                	jne    c001aedc <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001aed5:	b8 00 00 00 00       	mov    eax,0x0
c001aeda:	eb 08                	jmp    c001aee4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001aedc:	b8 01 00 00 00       	mov    eax,0x1
c001aee1:	8d 76 00             	lea    esi,[esi+0x0]
c001aee4:	83 c4 1c             	add    esp,0x1c
c001aee7:	c3                   	ret    

c001aee8 <FAT::close(void*)>:
c001aee8:	83 ec 1c             	sub    esp,0x1c
c001aeeb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001aef0:	75 0a                	jne    c001aefc <FAT::close(void*)+0x14>
c001aef2:	b8 04 00 00 00       	mov    eax,0x4
c001aef7:	eb 3f                	jmp    c001af38 <FAT::close(void*)+0x50>
c001aef9:	8d 76 00             	lea    esi,[esi+0x0]
c001aefc:	83 ec 0c             	sub    esp,0xc
c001aeff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af03:	e8 d5 aa fe ff       	call   c00059dd <f_close>
c001af08:	83 c4 10             	add    esp,0x10
c001af0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af0f:	83 ec 0c             	sub    esp,0xc
c001af12:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af16:	e8 b8 ea fe ff       	call   c00099d3 <free>
c001af1b:	83 c4 10             	add    esp,0x10
c001af1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af22:	85 c0                	test   eax,eax
c001af24:	75 0a                	jne    c001af30 <FAT::close(void*)+0x48>
c001af26:	b8 00 00 00 00       	mov    eax,0x0
c001af2b:	eb 0b                	jmp    c001af38 <FAT::close(void*)+0x50>
c001af2d:	8d 76 00             	lea    esi,[esi+0x0]
c001af30:	b8 01 00 00 00       	mov    eax,0x1
c001af35:	8d 76 00             	lea    esi,[esi+0x0]
c001af38:	83 c4 1c             	add    esp,0x1c
c001af3b:	c3                   	ret    

c001af3c <FAT::closeDir(void*)>:
c001af3c:	83 ec 1c             	sub    esp,0x1c
c001af3f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001af44:	75 0a                	jne    c001af50 <FAT::closeDir(void*)+0x14>
c001af46:	b8 04 00 00 00       	mov    eax,0x4
c001af4b:	eb 3f                	jmp    c001af8c <FAT::closeDir(void*)+0x50>
c001af4d:	8d 76 00             	lea    esi,[esi+0x0]
c001af50:	83 ec 0c             	sub    esp,0xc
c001af53:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af57:	e8 69 b0 fe ff       	call   c0005fc5 <f_closedir>
c001af5c:	83 c4 10             	add    esp,0x10
c001af5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af63:	83 ec 0c             	sub    esp,0xc
c001af66:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af6a:	e8 64 ea fe ff       	call   c00099d3 <free>
c001af6f:	83 c4 10             	add    esp,0x10
c001af72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af76:	85 c0                	test   eax,eax
c001af78:	75 0a                	jne    c001af84 <FAT::closeDir(void*)+0x48>
c001af7a:	b8 00 00 00 00       	mov    eax,0x0
c001af7f:	eb 0b                	jmp    c001af8c <FAT::closeDir(void*)+0x50>
c001af81:	8d 76 00             	lea    esi,[esi+0x0]
c001af84:	b8 01 00 00 00       	mov    eax,0x1
c001af89:	8d 76 00             	lea    esi,[esi+0x0]
c001af8c:	83 c4 1c             	add    esp,0x1c
c001af8f:	c3                   	ret    

c001af90 <FAT::seek(void*, unsigned long long)>:
c001af90:	83 ec 2c             	sub    esp,0x2c
c001af93:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af9b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001af9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afa3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001afa8:	75 0a                	jne    c001afb4 <FAT::seek(void*, unsigned long long)+0x24>
c001afaa:	b8 04 00 00 00       	mov    eax,0x4
c001afaf:	eb 37                	jmp    c001afe8 <FAT::seek(void*, unsigned long long)+0x58>
c001afb1:	8d 76 00             	lea    esi,[esi+0x0]
c001afb4:	83 ec 04             	sub    esp,0x4
c001afb7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001afbb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001afbf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001afc3:	e8 44 aa fe ff       	call   c0005a0c <f_lseek>
c001afc8:	83 c4 10             	add    esp,0x10
c001afcb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001afcf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afd3:	85 c0                	test   eax,eax
c001afd5:	75 09                	jne    c001afe0 <FAT::seek(void*, unsigned long long)+0x50>
c001afd7:	b8 00 00 00 00       	mov    eax,0x0
c001afdc:	eb 0a                	jmp    c001afe8 <FAT::seek(void*, unsigned long long)+0x58>
c001afde:	66 90                	xchg   ax,ax
c001afe0:	b8 01 00 00 00       	mov    eax,0x1
c001afe5:	8d 76 00             	lea    esi,[esi+0x0]
c001afe8:	83 c4 2c             	add    esp,0x2c
c001afeb:	c3                   	ret    

c001afec <fatWrapperReadDisk>:
c001afec:	83 ec 1c             	sub    esp,0x1c
c001afef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aff3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aff7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001affb:	89 04 24             	mov    DWORD PTR [esp],eax
c001affe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b002:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b006:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b00b:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c001b012:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b016:	83 ec 0c             	sub    esp,0xc
c001b019:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b01d:	52                   	push   edx
c001b01e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b022:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b026:	50                   	push   eax
c001b027:	e8 64 51 ff ff       	call   c0010190 <LogicalDisk::read(unsigned long long, int, void*)>
c001b02c:	83 c4 20             	add    esp,0x20
c001b02f:	83 c4 1c             	add    esp,0x1c
c001b032:	c3                   	ret    
c001b033:	90                   	nop

c001b034 <fatWrapperWriteDisk>:
c001b034:	83 ec 1c             	sub    esp,0x1c
c001b037:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b03b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b03f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b043:	89 04 24             	mov    DWORD PTR [esp],eax
c001b046:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b04a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b04e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b053:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c001b05a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b05e:	83 ec 0c             	sub    esp,0xc
c001b061:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b065:	52                   	push   edx
c001b066:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b06a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b06e:	50                   	push   eax
c001b06f:	e8 88 51 ff ff       	call   c00101fc <LogicalDisk::write(unsigned long long, int, void*)>
c001b074:	83 c4 20             	add    esp,0x20
c001b077:	83 c4 1c             	add    esp,0x1c
c001b07a:	c3                   	ret    
c001b07b:	90                   	nop

c001b07c <fatWrapperIoctl>:
c001b07c:	53                   	push   ebx
c001b07d:	83 ec 28             	sub    esp,0x28
c001b080:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b084:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b088:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b08c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b090:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b095:	75 31                	jne    c001b0c8 <fatWrapperIoctl+0x4c>
c001b097:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b09b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b09f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b0a4:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c001b0ab:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b0b1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b0b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b0bb:	66 89 02             	mov    WORD PTR [edx],ax
c001b0be:	b8 00 00 00 00       	mov    eax,0x0
c001b0c3:	e9 bc 00 00 00       	jmp    c001b184 <fatWrapperIoctl+0x108>
c001b0c8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b0cd:	75 6d                	jne    c001b13c <fatWrapperIoctl+0xc0>
c001b0cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b0d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0d7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b0dc:	8b 04 85 c0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9640]
c001b0e3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b0e9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b0ef:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b0f5:	89 c8                	mov    eax,ecx
c001b0f7:	89 da                	mov    edx,ebx
c001b0f9:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b0fd:	c1 e0 0a             	shl    eax,0xa
c001b100:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b105:	8b 0c 8d c0 69 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9640]
c001b10c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b112:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b118:	89 cb                	mov    ebx,ecx
c001b11a:	c1 fb 1f             	sar    ebx,0x1f
c001b11d:	53                   	push   ebx
c001b11e:	51                   	push   ecx
c001b11f:	52                   	push   edx
c001b120:	50                   	push   eax
c001b121:	e8 0e 5e 00 00       	call   c0020f34 <__udivdi3>
c001b126:	83 c4 10             	add    esp,0x10
c001b129:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b12d:	89 01                	mov    DWORD PTR [ecx],eax
c001b12f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b132:	b8 00 00 00 00       	mov    eax,0x0
c001b137:	eb 4b                	jmp    c001b184 <fatWrapperIoctl+0x108>
c001b139:	8d 76 00             	lea    esi,[esi+0x0]
c001b13c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b141:	75 09                	jne    c001b14c <fatWrapperIoctl+0xd0>
c001b143:	b8 00 00 00 00       	mov    eax,0x0
c001b148:	eb 3a                	jmp    c001b184 <fatWrapperIoctl+0x108>
c001b14a:	66 90                	xchg   ax,ax
c001b14c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b151:	75 19                	jne    c001b16c <fatWrapperIoctl+0xf0>
c001b153:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b157:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b15b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b15f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b165:	b8 00 00 00 00       	mov    eax,0x0
c001b16a:	eb 18                	jmp    c001b184 <fatWrapperIoctl+0x108>
c001b16c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b171:	75 09                	jne    c001b17c <fatWrapperIoctl+0x100>
c001b173:	b8 00 00 00 00       	mov    eax,0x0
c001b178:	eb 0a                	jmp    c001b184 <fatWrapperIoctl+0x108>
c001b17a:	66 90                	xchg   ax,ax
c001b17c:	b8 04 00 00 00       	mov    eax,0x4
c001b181:	8d 76 00             	lea    esi,[esi+0x0]
c001b184:	83 c4 28             	add    esp,0x28
c001b187:	5b                   	pop    ebx
c001b188:	c3                   	ret    
c001b189:	90                   	nop
c001b18a:	66 90                	xchg   ax,ax

c001b18c <FAT::FAT()>:
c001b18c:	83 ec 1c             	sub    esp,0x1c
c001b18f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b193:	83 ec 0c             	sub    esp,0xc
c001b196:	50                   	push   eax
c001b197:	e8 ee 1b ff ff       	call   c000cd8a <Filesystem::Filesystem()>
c001b19c:	83 c4 10             	add    esp,0x10
c001b19f:	ba 4c 4b 02 c0       	mov    edx,0xc0024b4c
c001b1a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1a8:	89 10                	mov    DWORD PTR [eax],edx
c001b1aa:	c7 05 c0 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00279c0,0x0
c001b1b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b1bc:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b1c1:	7f 15                	jg     c001b1d8 <FAT::FAT()+0x4c>
c001b1c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1c7:	c7 04 85 e0 79 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8620],0xffffffff
c001b1d2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b1d6:	eb e4                	jmp    c001b1bc <FAT::FAT()+0x30>
c001b1d8:	90                   	nop
c001b1d9:	83 c4 1c             	add    esp,0x1c
c001b1dc:	c3                   	ret    
c001b1dd:	90                   	nop
c001b1de:	66 90                	xchg   ax,ax

c001b1e0 <FAT::fixFilepath(char*)>:
c001b1e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1e4:	8a 00                	mov    al,BYTE PTR [eax]
c001b1e6:	3c 40                	cmp    al,0x40
c001b1e8:	7e 2e                	jle    c001b218 <FAT::fixFilepath(char*)+0x38>
c001b1ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1ee:	8a 00                	mov    al,BYTE PTR [eax]
c001b1f0:	83 e8 41             	sub    eax,0x41
c001b1f3:	88 c2                	mov    dl,al
c001b1f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1f9:	88 10                	mov    BYTE PTR [eax],dl
c001b1fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1ff:	8a 00                	mov    al,BYTE PTR [eax]
c001b201:	0f be c0             	movsx  eax,al
c001b204:	8b 04 85 e0 79 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8620]
c001b20b:	83 c0 30             	add    eax,0x30
c001b20e:	88 c2                	mov    dl,al
c001b210:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b214:	88 10                	mov    BYTE PTR [eax],dl
c001b216:	66 90                	xchg   ax,ax
c001b218:	90                   	nop
c001b219:	c3                   	ret    
c001b21a:	66 90                	xchg   ax,ax

c001b21c <FAT::open(char const*, void**, FileOpenMode)>:
c001b21c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b222:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b22a:	74 0c                	je     c001b238 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b22c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b234:	75 0e                	jne    c001b244 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b236:	66 90                	xchg   ax,ax
c001b238:	b8 04 00 00 00       	mov    eax,0x4
c001b23d:	e9 06 01 00 00       	jmp    c001b348 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b242:	66 90                	xchg   ax,ax
c001b244:	83 ec 08             	sub    esp,0x8
c001b247:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b24e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b252:	50                   	push   eax
c001b253:	e8 e8 54 fe ff       	call   c0000740 <strcpy>
c001b258:	83 c4 10             	add    esp,0x10
c001b25b:	83 ec 08             	sub    esp,0x8
c001b25e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b262:	50                   	push   eax
c001b263:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b26a:	e8 71 ff ff ff       	call   c001b1e0 <FAT::fixFilepath(char*)>
c001b26f:	83 c4 10             	add    esp,0x10
c001b272:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b27a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b281:	83 e0 01             	and    eax,0x1
c001b284:	74 0a                	je     c001b290 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b286:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b28e:	66 90                	xchg   ax,ax
c001b290:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b297:	83 e0 04             	and    eax,0x4
c001b29a:	74 10                	je     c001b2ac <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b29c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b2a4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b2ac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2b3:	83 e0 02             	and    eax,0x2
c001b2b6:	74 08                	je     c001b2c0 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b2b8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b2c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2c7:	83 e0 08             	and    eax,0x8
c001b2ca:	74 08                	je     c001b2d4 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b2cc:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b2d4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2db:	83 e0 10             	and    eax,0x10
c001b2de:	74 08                	je     c001b2e8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b2e0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b2e8:	83 ec 0c             	sub    esp,0xc
c001b2eb:	68 50 02 00 00       	push   0x250
c001b2f0:	e8 ce e6 fe ff       	call   c00099c3 <malloc>
c001b2f5:	83 c4 10             	add    esp,0x10
c001b2f8:	89 c2                	mov    edx,eax
c001b2fa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b301:	89 10                	mov    DWORD PTR [eax],edx
c001b303:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b30b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b312:	8b 00                	mov    eax,DWORD PTR [eax]
c001b314:	83 ec 04             	sub    esp,0x4
c001b317:	52                   	push   edx
c001b318:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b31c:	52                   	push   edx
c001b31d:	50                   	push   eax
c001b31e:	e8 68 9b fe ff       	call   c0004e8b <f_open>
c001b323:	83 c4 10             	add    esp,0x10
c001b326:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b32d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b335:	74 09                	je     c001b340 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b337:	b8 01 00 00 00       	mov    eax,0x1
c001b33c:	eb 0a                	jmp    c001b348 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b33e:	66 90                	xchg   ax,ax
c001b340:	b8 00 00 00 00       	mov    eax,0x0
c001b345:	8d 76 00             	lea    esi,[esi+0x0]
c001b348:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b34e:	c3                   	ret    
c001b34f:	90                   	nop

c001b350 <FAT::openDir(char const*, void**)>:
c001b350:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b356:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b35e:	74 0c                	je     c001b36c <FAT::openDir(char const*, void**)+0x1c>
c001b360:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b368:	75 0e                	jne    c001b378 <FAT::openDir(char const*, void**)+0x28>
c001b36a:	66 90                	xchg   ax,ax
c001b36c:	b8 04 00 00 00       	mov    eax,0x4
c001b371:	e9 82 00 00 00       	jmp    c001b3f8 <FAT::openDir(char const*, void**)+0xa8>
c001b376:	66 90                	xchg   ax,ax
c001b378:	83 ec 08             	sub    esp,0x8
c001b37b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b382:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b386:	50                   	push   eax
c001b387:	e8 b4 53 fe ff       	call   c0000740 <strcpy>
c001b38c:	83 c4 10             	add    esp,0x10
c001b38f:	83 ec 08             	sub    esp,0x8
c001b392:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b396:	50                   	push   eax
c001b397:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b39e:	e8 3d fe ff ff       	call   c001b1e0 <FAT::fixFilepath(char*)>
c001b3a3:	83 c4 10             	add    esp,0x10
c001b3a6:	83 ec 0c             	sub    esp,0xc
c001b3a9:	6a 4c                	push   0x4c
c001b3ab:	e8 13 e6 fe ff       	call   c00099c3 <malloc>
c001b3b0:	83 c4 10             	add    esp,0x10
c001b3b3:	89 c2                	mov    edx,eax
c001b3b5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b3bc:	89 10                	mov    DWORD PTR [eax],edx
c001b3be:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b3c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3c7:	83 ec 08             	sub    esp,0x8
c001b3ca:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b3ce:	52                   	push   edx
c001b3cf:	50                   	push   eax
c001b3d0:	e8 ee aa fe ff       	call   c0005ec3 <f_opendir>
c001b3d5:	83 c4 10             	add    esp,0x10
c001b3d8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b3df:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b3e7:	74 07                	je     c001b3f0 <FAT::openDir(char const*, void**)+0xa0>
c001b3e9:	b8 01 00 00 00       	mov    eax,0x1
c001b3ee:	eb 08                	jmp    c001b3f8 <FAT::openDir(char const*, void**)+0xa8>
c001b3f0:	b8 00 00 00 00       	mov    eax,0x0
c001b3f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b3f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b3fe:	c3                   	ret    
c001b3ff:	90                   	nop

c001b400 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b400:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b406:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b40e:	75 0c                	jne    c001b41c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b410:	b8 04 00 00 00       	mov    eax,0x4
c001b415:	e9 d2 00 00 00       	jmp    c001b4ec <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b41a:	66 90                	xchg   ax,ax
c001b41c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b424:	75 0a                	jne    c001b430 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b426:	b8 04 00 00 00       	mov    eax,0x4
c001b42b:	e9 bc 00 00 00       	jmp    c001b4ec <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b430:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b438:	75 0a                	jne    c001b444 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b43a:	b8 04 00 00 00       	mov    eax,0x4
c001b43f:	e9 a8 00 00 00       	jmp    c001b4ec <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b444:	83 ec 08             	sub    esp,0x8
c001b447:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b44e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b455:	50                   	push   eax
c001b456:	e8 e5 52 fe ff       	call   c0000740 <strcpy>
c001b45b:	83 c4 10             	add    esp,0x10
c001b45e:	83 ec 08             	sub    esp,0x8
c001b461:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b468:	50                   	push   eax
c001b469:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b470:	e8 6b fd ff ff       	call   c001b1e0 <FAT::fixFilepath(char*)>
c001b475:	83 c4 10             	add    esp,0x10
c001b478:	83 ec 08             	sub    esp,0x8
c001b47b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b47f:	50                   	push   eax
c001b480:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b487:	50                   	push   eax
c001b488:	e8 f5 ab fe ff       	call   c0006082 <f_stat>
c001b48d:	83 c4 10             	add    esp,0x10
c001b490:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b497:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b49e:	85 c0                	test   eax,eax
c001b4a0:	74 0a                	je     c001b4ac <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b4a2:	83 f8 04             	cmp    eax,0x4
c001b4a5:	74 35                	je     c001b4dc <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b4a7:	eb 3b                	jmp    c001b4e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b4a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4ac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b4b0:	0f b6 c0             	movzx  eax,al
c001b4b3:	83 e0 10             	and    eax,0x10
c001b4b6:	0f 95 c2             	setne  dl
c001b4b9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b4c0:	88 10                	mov    BYTE PTR [eax],dl
c001b4c2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b4c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b4c9:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b4d0:	89 01                	mov    DWORD PTR [ecx],eax
c001b4d2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b4d5:	b8 00 00 00 00       	mov    eax,0x0
c001b4da:	eb 10                	jmp    c001b4ec <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b4dc:	b8 02 00 00 00       	mov    eax,0x2
c001b4e1:	eb 09                	jmp    c001b4ec <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b4e3:	90                   	nop
c001b4e4:	b8 01 00 00 00       	mov    eax,0x1
c001b4e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4ec:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b4f2:	c3                   	ret    
c001b4f3:	90                   	nop

c001b4f4 <FAT::unlink(char const*)>:
c001b4f4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b4fa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b502:	75 08                	jne    c001b50c <FAT::unlink(char const*)+0x18>
c001b504:	b8 04 00 00 00       	mov    eax,0x4
c001b509:	eb 61                	jmp    c001b56c <FAT::unlink(char const*)+0x78>
c001b50b:	90                   	nop
c001b50c:	83 ec 08             	sub    esp,0x8
c001b50f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b516:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b51a:	50                   	push   eax
c001b51b:	e8 20 52 fe ff       	call   c0000740 <strcpy>
c001b520:	83 c4 10             	add    esp,0x10
c001b523:	83 ec 08             	sub    esp,0x8
c001b526:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b52a:	50                   	push   eax
c001b52b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b532:	e8 a9 fc ff ff       	call   c001b1e0 <FAT::fixFilepath(char*)>
c001b537:	83 c4 10             	add    esp,0x10
c001b53a:	83 ec 0c             	sub    esp,0xc
c001b53d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b541:	50                   	push   eax
c001b542:	e8 8d ae fe ff       	call   c00063d4 <f_unlink>
c001b547:	83 c4 10             	add    esp,0x10
c001b54a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b551:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b558:	85 c0                	test   eax,eax
c001b55a:	75 08                	jne    c001b564 <FAT::unlink(char const*)+0x70>
c001b55c:	b8 00 00 00 00       	mov    eax,0x0
c001b561:	eb 09                	jmp    c001b56c <FAT::unlink(char const*)+0x78>
c001b563:	90                   	nop
c001b564:	b8 01 00 00 00       	mov    eax,0x1
c001b569:	8d 76 00             	lea    esi,[esi+0x0]
c001b56c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b572:	c3                   	ret    
c001b573:	90                   	nop

c001b574 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b574:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b57a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b581:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b588:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b58c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b590:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b598:	75 0a                	jne    c001b5a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b59a:	b8 04 00 00 00       	mov    eax,0x4
c001b59f:	e9 30 01 00 00       	jmp    c001b6d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b5a4:	83 ec 08             	sub    esp,0x8
c001b5a7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b5ae:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b5b2:	50                   	push   eax
c001b5b3:	e8 88 51 fe ff       	call   c0000740 <strcpy>
c001b5b8:	83 c4 10             	add    esp,0x10
c001b5bb:	83 ec 08             	sub    esp,0x8
c001b5be:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b5c2:	50                   	push   eax
c001b5c3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b5ca:	e8 11 fc ff ff       	call   c001b1e0 <FAT::fixFilepath(char*)>
c001b5cf:	83 c4 10             	add    esp,0x10
c001b5d2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b5da:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b5e2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5e7:	83 e0 01             	and    eax,0x1
c001b5ea:	74 08                	je     c001b5f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b5ec:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b5f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5f9:	83 e0 02             	and    eax,0x2
c001b5fc:	74 0a                	je     c001b608 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001b5fe:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b606:	66 90                	xchg   ax,ax
c001b608:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b60d:	83 e0 04             	and    eax,0x4
c001b610:	74 0a                	je     c001b61c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b612:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b61a:	66 90                	xchg   ax,ax
c001b61c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b621:	83 e0 08             	and    eax,0x8
c001b624:	74 0a                	je     c001b630 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001b626:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b62e:	66 90                	xchg   ax,ax
c001b630:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b635:	83 e0 01             	and    eax,0x1
c001b638:	74 0a                	je     c001b644 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001b63a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b642:	66 90                	xchg   ax,ax
c001b644:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b649:	83 e0 02             	and    eax,0x2
c001b64c:	74 0a                	je     c001b658 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b64e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b656:	66 90                	xchg   ax,ax
c001b658:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b65d:	83 e0 04             	and    eax,0x4
c001b660:	74 0a                	je     c001b66c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001b662:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b66a:	66 90                	xchg   ax,ax
c001b66c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b671:	83 e0 08             	and    eax,0x8
c001b674:	74 0a                	je     c001b680 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001b676:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b67e:	66 90                	xchg   ax,ax
c001b680:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b687:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b68e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b696:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b69e:	83 ec 04             	sub    esp,0x4
c001b6a1:	52                   	push   edx
c001b6a2:	50                   	push   eax
c001b6a3:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b6a7:	50                   	push   eax
c001b6a8:	e8 c9 b3 fe ff       	call   c0006a76 <f_chmod>
c001b6ad:	83 c4 10             	add    esp,0x10
c001b6b0:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b6b7:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b6be:	85 c0                	test   eax,eax
c001b6c0:	75 0a                	jne    c001b6cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001b6c2:	b8 00 00 00 00       	mov    eax,0x0
c001b6c7:	eb 0b                	jmp    c001b6d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b6c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b6cc:	b8 01 00 00 00       	mov    eax,0x1
c001b6d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b6d4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b6da:	c3                   	ret    
c001b6db:	90                   	nop

c001b6dc <FAT::rename(char const*, char const*)>:
c001b6dc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b6e2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b6ea:	74 0c                	je     c001b6f8 <FAT::rename(char const*, char const*)+0x1c>
c001b6ec:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b6f4:	75 0e                	jne    c001b704 <FAT::rename(char const*, char const*)+0x28>
c001b6f6:	66 90                	xchg   ax,ax
c001b6f8:	b8 04 00 00 00       	mov    eax,0x4
c001b6fd:	e9 9e 00 00 00       	jmp    c001b7a0 <FAT::rename(char const*, char const*)+0xc4>
c001b702:	66 90                	xchg   ax,ax
c001b704:	83 ec 08             	sub    esp,0x8
c001b707:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b70e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b715:	50                   	push   eax
c001b716:	e8 25 50 fe ff       	call   c0000740 <strcpy>
c001b71b:	83 c4 10             	add    esp,0x10
c001b71e:	83 ec 08             	sub    esp,0x8
c001b721:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b728:	50                   	push   eax
c001b729:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b730:	e8 ab fa ff ff       	call   c001b1e0 <FAT::fixFilepath(char*)>
c001b735:	83 c4 10             	add    esp,0x10
c001b738:	83 ec 08             	sub    esp,0x8
c001b73b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b742:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b746:	50                   	push   eax
c001b747:	e8 f4 4f fe ff       	call   c0000740 <strcpy>
c001b74c:	83 c4 10             	add    esp,0x10
c001b74f:	83 ec 08             	sub    esp,0x8
c001b752:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b756:	50                   	push   eax
c001b757:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b75e:	e8 7d fa ff ff       	call   c001b1e0 <FAT::fixFilepath(char*)>
c001b763:	83 c4 10             	add    esp,0x10
c001b766:	83 ec 08             	sub    esp,0x8
c001b769:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b76d:	50                   	push   eax
c001b76e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b775:	50                   	push   eax
c001b776:	e8 08 b0 fe ff       	call   c0006783 <f_rename>
c001b77b:	83 c4 10             	add    esp,0x10
c001b77e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b785:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b78c:	85 c0                	test   eax,eax
c001b78e:	75 08                	jne    c001b798 <FAT::rename(char const*, char const*)+0xbc>
c001b790:	b8 00 00 00 00       	mov    eax,0x0
c001b795:	eb 09                	jmp    c001b7a0 <FAT::rename(char const*, char const*)+0xc4>
c001b797:	90                   	nop
c001b798:	b8 01 00 00 00       	mov    eax,0x1
c001b79d:	8d 76 00             	lea    esi,[esi+0x0]
c001b7a0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b7a6:	c3                   	ret    
c001b7a7:	90                   	nop

c001b7a8 <FAT::mkdir(char const*)>:
c001b7a8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b7ae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b7b6:	75 08                	jne    c001b7c0 <FAT::mkdir(char const*)+0x18>
c001b7b8:	b8 04 00 00 00       	mov    eax,0x4
c001b7bd:	eb 61                	jmp    c001b820 <FAT::mkdir(char const*)+0x78>
c001b7bf:	90                   	nop
c001b7c0:	83 ec 08             	sub    esp,0x8
c001b7c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7ce:	50                   	push   eax
c001b7cf:	e8 6c 4f fe ff       	call   c0000740 <strcpy>
c001b7d4:	83 c4 10             	add    esp,0x10
c001b7d7:	83 ec 08             	sub    esp,0x8
c001b7da:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7de:	50                   	push   eax
c001b7df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7e6:	e8 f5 f9 ff ff       	call   c001b1e0 <FAT::fixFilepath(char*)>
c001b7eb:	83 c4 10             	add    esp,0x10
c001b7ee:	83 ec 0c             	sub    esp,0xc
c001b7f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7f5:	50                   	push   eax
c001b7f6:	e8 5c ad fe ff       	call   c0006557 <f_mkdir>
c001b7fb:	83 c4 10             	add    esp,0x10
c001b7fe:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b805:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b80c:	85 c0                	test   eax,eax
c001b80e:	75 08                	jne    c001b818 <FAT::mkdir(char const*)+0x70>
c001b810:	b8 00 00 00 00       	mov    eax,0x0
c001b815:	eb 09                	jmp    c001b820 <FAT::mkdir(char const*)+0x78>
c001b817:	90                   	nop
c001b818:	b8 01 00 00 00       	mov    eax,0x1
c001b81d:	8d 76 00             	lea    esi,[esi+0x0]
c001b820:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b826:	c3                   	ret    
c001b827:	90                   	nop

c001b828 <FAT::exists(char const*)>:
c001b828:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b82e:	83 ec 08             	sub    esp,0x8
c001b831:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b838:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b83c:	50                   	push   eax
c001b83d:	e8 fe 4e fe ff       	call   c0000740 <strcpy>
c001b842:	83 c4 10             	add    esp,0x10
c001b845:	83 ec 08             	sub    esp,0x8
c001b848:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b84c:	50                   	push   eax
c001b84d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b854:	e8 87 f9 ff ff       	call   c001b1e0 <FAT::fixFilepath(char*)>
c001b859:	83 c4 10             	add    esp,0x10
c001b85c:	83 ec 08             	sub    esp,0x8
c001b85f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b866:	50                   	push   eax
c001b867:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b86b:	50                   	push   eax
c001b86c:	e8 11 a8 fe ff       	call   c0006082 <f_stat>
c001b871:	83 c4 10             	add    esp,0x10
c001b874:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b87b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b882:	85 c0                	test   eax,eax
c001b884:	75 06                	jne    c001b88c <FAT::exists(char const*)+0x64>
c001b886:	b0 01                	mov    al,0x1
c001b888:	eb 06                	jmp    c001b890 <FAT::exists(char const*)+0x68>
c001b88a:	66 90                	xchg   ax,ax
c001b88c:	b0 00                	mov    al,0x0
c001b88e:	66 90                	xchg   ax,ax
c001b890:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b896:	c3                   	ret    
c001b897:	90                   	nop

c001b898 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b898:	b8 08 00 00 00       	mov    eax,0x8
c001b89d:	c3                   	ret    

c001b89e <ISO9660::seek(void*, unsigned long long)>:
c001b89e:	53                   	push   ebx
c001b89f:	b8 04 00 00 00       	mov    eax,0x4
c001b8a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b8a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b8b0:	85 d2                	test   edx,edx
c001b8b2:	74 17                	je     c001b8cb <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b8b4:	89 c8                	mov    eax,ecx
c001b8b6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b8b9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b8bc:	b8 01 00 00 00       	mov    eax,0x1
c001b8c1:	73 08                	jae    c001b8cb <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b8c3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b8c6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b8c9:	31 c0                	xor    eax,eax
c001b8cb:	5b                   	pop    ebx
c001b8cc:	c3                   	ret    
c001b8cd:	90                   	nop

c001b8ce <ISO9660::tell(void*, unsigned long long*)>:
c001b8ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b8d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8d6:	85 d2                	test   edx,edx
c001b8d8:	74 12                	je     c001b8ec <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b8da:	85 c0                	test   eax,eax
c001b8dc:	74 0e                	je     c001b8ec <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b8de:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b8e1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b8e4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b8e7:	89 10                	mov    DWORD PTR [eax],edx
c001b8e9:	31 c0                	xor    eax,eax
c001b8eb:	c3                   	ret    
c001b8ec:	b8 04 00 00 00       	mov    eax,0x4
c001b8f1:	c3                   	ret    

c001b8f2 <ISO9660::getName()>:
c001b8f2:	b8 ac 4b 02 c0       	mov    eax,0xc0024bac
c001b8f7:	c3                   	ret    

c001b8f8 <ISO9660::stat(void*, unsigned long long*)>:
c001b8f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b8fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b900:	85 d2                	test   edx,edx
c001b902:	74 12                	je     c001b916 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b904:	85 c0                	test   eax,eax
c001b906:	74 0e                	je     c001b916 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b908:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b90b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b90e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b911:	89 10                	mov    DWORD PTR [eax],edx
c001b913:	31 c0                	xor    eax,eax
c001b915:	c3                   	ret    
c001b916:	b8 04 00 00 00       	mov    eax,0x4
c001b91b:	c3                   	ret    

c001b91c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b91c:	b8 01 00 00 00       	mov    eax,0x1
c001b921:	c3                   	ret    

c001b922 <ISO9660::unlink(char const*)>:
c001b922:	b8 01 00 00 00       	mov    eax,0x1
c001b927:	c3                   	ret    

c001b928 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b928:	b8 01 00 00 00       	mov    eax,0x1
c001b92d:	c3                   	ret    

c001b92e <ISO9660::rename(char const*, char const*)>:
c001b92e:	b8 01 00 00 00       	mov    eax,0x1
c001b933:	c3                   	ret    

c001b934 <ISO9660::mkdir(char const*)>:
c001b934:	b8 01 00 00 00       	mov    eax,0x1
c001b939:	c3                   	ret    

c001b93a <ISO9660::close(void*)>:
c001b93a:	83 ec 0c             	sub    esp,0xc
c001b93d:	b8 04 00 00 00       	mov    eax,0x4
c001b942:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b946:	85 d2                	test   edx,edx
c001b948:	74 0e                	je     c001b958 <ISO9660::close(void*)+0x1e>
c001b94a:	83 ec 0c             	sub    esp,0xc
c001b94d:	52                   	push   edx
c001b94e:	e8 80 e0 fe ff       	call   c00099d3 <free>
c001b953:	83 c4 10             	add    esp,0x10
c001b956:	31 c0                	xor    eax,eax
c001b958:	83 c4 0c             	add    esp,0xc
c001b95b:	c3                   	ret    

c001b95c <ISO9660::closeDir(void*)>:
c001b95c:	83 ec 0c             	sub    esp,0xc
c001b95f:	b8 04 00 00 00       	mov    eax,0x4
c001b964:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b968:	85 d2                	test   edx,edx
c001b96a:	74 0e                	je     c001b97a <ISO9660::closeDir(void*)+0x1e>
c001b96c:	83 ec 0c             	sub    esp,0xc
c001b96f:	52                   	push   edx
c001b970:	e8 5e e0 fe ff       	call   c00099d3 <free>
c001b975:	83 c4 10             	add    esp,0x10
c001b978:	31 c0                	xor    eax,eax
c001b97a:	83 c4 0c             	add    esp,0xc
c001b97d:	c3                   	ret    

c001b97e <ISO9660::~ISO9660()>:
c001b97e:	83 ec 0c             	sub    esp,0xc
c001b981:	ba d0 4b 02 c0       	mov    edx,0xc0024bd0
c001b986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b98a:	89 10                	mov    DWORD PTR [eax],edx
c001b98c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b990:	83 ec 0c             	sub    esp,0xc
c001b993:	50                   	push   eax
c001b994:	e8 15 14 ff ff       	call   c000cdae <Filesystem::~Filesystem()>
c001b999:	83 c4 10             	add    esp,0x10
c001b99c:	90                   	nop
c001b99d:	83 c4 0c             	add    esp,0xc
c001b9a0:	c3                   	ret    
c001b9a1:	90                   	nop

c001b9a2 <ISO9660::~ISO9660()>:
c001b9a2:	83 ec 0c             	sub    esp,0xc
c001b9a5:	83 ec 0c             	sub    esp,0xc
c001b9a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9ac:	e8 cd ff ff ff       	call   c001b97e <ISO9660::~ISO9660()>
c001b9b1:	83 c4 10             	add    esp,0x10
c001b9b4:	83 ec 08             	sub    esp,0x8
c001b9b7:	6a 08                	push   0x8
c001b9b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9bd:	e8 d0 0f ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c001b9c2:	83 c4 10             	add    esp,0x10
c001b9c5:	83 c4 0c             	add    esp,0xc
c001b9c8:	c3                   	ret    

c001b9c9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b9c9:	55                   	push   ebp
c001b9ca:	31 c9                	xor    ecx,ecx
c001b9cc:	57                   	push   edi
c001b9cd:	56                   	push   esi
c001b9ce:	53                   	push   ebx
c001b9cf:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b9d3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b9d7:	89 eb                	mov    ebx,ebp
c001b9d9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b9dd:	39 ce                	cmp    esi,ecx
c001b9df:	7e 17                	jle    c001b9f8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b9e1:	31 d2                	xor    edx,edx
c001b9e3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b9e7:	7d 13                	jge    c001b9fc <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b9e9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b9ed:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b9f0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b9f3:	75 0d                	jne    c001ba02 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b9f5:	42                   	inc    edx
c001b9f6:	eb eb                	jmp    c001b9e3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b9f8:	31 c0                	xor    eax,eax
c001b9fa:	eb 0a                	jmp    c001ba06 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b9fc:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001ba00:	eb 04                	jmp    c001ba06 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ba02:	41                   	inc    ecx
c001ba03:	43                   	inc    ebx
c001ba04:	eb d7                	jmp    c001b9dd <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001ba06:	5b                   	pop    ebx
c001ba07:	5e                   	pop    esi
c001ba08:	5f                   	pop    edi
c001ba09:	5d                   	pop    ebp
c001ba0a:	c3                   	ret    

c001ba0b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ba0b:	57                   	push   edi
c001ba0c:	56                   	push   esi
c001ba0d:	53                   	push   ebx
c001ba0e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba12:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba16:	39 0d c0 7a 02 c0    	cmp    DWORD PTR ds:0xc0027ac0,ecx
c001ba1c:	75 08                	jne    c001ba26 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001ba1e:	38 05 34 5e 02 c0    	cmp    BYTE PTR ds:0xc0025e34,al
c001ba24:	74 2b                	je     c001ba51 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001ba26:	83 ec 0c             	sub    esp,0xc
c001ba29:	a2 34 5e 02 c0       	mov    ds:0xc0025e34,al
c001ba2e:	68 e0 7a 02 c0       	push   0xc0027ae0
c001ba33:	0f be c0             	movsx  eax,al
c001ba36:	6a 01                	push   0x1
c001ba38:	89 0d c0 7a 02 c0    	mov    DWORD PTR ds:0xc0027ac0,ecx
c001ba3e:	31 db                	xor    ebx,ebx
c001ba40:	53                   	push   ebx
c001ba41:	51                   	push   ecx
c001ba42:	ff 34 85 bc 68 02 c0 	push   DWORD PTR [eax*4-0x3ffd9744]
c001ba49:	e8 42 47 ff ff       	call   c0010190 <LogicalDisk::read(unsigned long long, int, void*)>
c001ba4e:	83 c4 20             	add    esp,0x20
c001ba51:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ba55:	be e0 7a 02 c0       	mov    esi,0xc0027ae0
c001ba5a:	b9 00 08 00 00       	mov    ecx,0x800
c001ba5f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ba61:	5b                   	pop    ebx
c001ba62:	5e                   	pop    esi
c001ba63:	5f                   	pop    edi
c001ba64:	c3                   	ret    
c001ba65:	90                   	nop

c001ba66 <ISO9660::tryMount(LogicalDisk*, int)>:
c001ba66:	81 ec 10 08 00 00    	sub    esp,0x810
c001ba6c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001ba73:	83 c0 41             	add    eax,0x41
c001ba76:	0f be c0             	movsx  eax,al
c001ba79:	50                   	push   eax
c001ba7a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ba7e:	50                   	push   eax
c001ba7f:	6a 10                	push   0x10
c001ba81:	e8 85 ff ff ff       	call   c001ba0b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ba86:	83 c4 10             	add    esp,0x10
c001ba89:	31 c0                	xor    eax,eax
c001ba8b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ba90:	75 1d                	jne    c001baaf <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba92:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ba97:	75 16                	jne    c001baaf <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba99:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ba9e:	75 0f                	jne    c001baaf <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001baa0:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001baa5:	75 08                	jne    c001baaf <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001baa7:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001baac:	0f 94 c0             	sete   al
c001baaf:	81 c4 0c 08 00 00    	add    esp,0x80c
c001bab5:	c3                   	ret    

c001bab6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001bab6:	55                   	push   ebp
c001bab7:	57                   	push   edi
c001bab8:	56                   	push   esi
c001bab9:	53                   	push   ebx
c001baba:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001bac0:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001bac7:	85 ed                	test   ebp,ebp
c001bac9:	0f 84 da 01 00 00    	je     c001bca9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bacf:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001bad7:	0f 84 cc 01 00 00    	je     c001bca9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001badd:	b8 01 00 00 00       	mov    eax,0x1
c001bae2:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001bae6:	0f 85 c2 01 00 00    	jne    c001bcae <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001baec:	31 d2                	xor    edx,edx
c001baee:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001baf5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001baf8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bafb:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bafe:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb01:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bb05:	01 c8                	add    eax,ecx
c001bb07:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bb0a:	11 da                	adc    edx,ebx
c001bb0c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001bb10:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bb14:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bb18:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb1c:	19 d7                	sbb    edi,edx
c001bb1e:	72 11                	jb     c001bb31 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001bb20:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001bb23:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001bb27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bb2f:	eb 0c                	jmp    c001bb3d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001bb31:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001bb35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb39:	29 ce                	sub    esi,ecx
c001bb3b:	19 df                	sbb    edi,ebx
c001bb3d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bb40:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001bb43:	0f a4 c2 0b          	shld   edx,eax,0xb
c001bb47:	c1 e0 0b             	shl    eax,0xb
c001bb4a:	01 c8                	add    eax,ecx
c001bb4c:	11 da                	adc    edx,ebx
c001bb4e:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb51:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bb55:	51                   	push   ecx
c001bb56:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bb5a:	50                   	push   eax
c001bb5b:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001bb5f:	53                   	push   ebx
c001bb60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb68:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bb6c:	50                   	push   eax
c001bb6d:	e8 99 fe ff ff       	call   c001ba0b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bb72:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001bb75:	b8 00 08 00 00       	mov    eax,0x800
c001bb7a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001bb80:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001bb84:	29 d0                	sub    eax,edx
c001bb86:	83 c4 10             	add    esp,0x10
c001bb89:	89 f9                	mov    ecx,edi
c001bb8b:	39 c6                	cmp    esi,eax
c001bb8d:	83 d9 00             	sbb    ecx,0x0
c001bb90:	7d 1b                	jge    c001bbad <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001bb92:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001bb97:	75 12                	jne    c001bbab <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001bb99:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bba0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bba6:	e9 fa 00 00 00       	jmp    c001bca5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001bbab:	89 f0                	mov    eax,esi
c001bbad:	01 d3                	add    ebx,edx
c001bbaf:	31 d2                	xor    edx,edx
c001bbb1:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001bbb5:	39 c2                	cmp    edx,eax
c001bbb7:	7d 14                	jge    c001bbcd <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001bbb9:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001bbc0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bbc4:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001bbc7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001bbca:	42                   	inc    edx
c001bbcb:	eb e8                	jmp    c001bbb5 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001bbcd:	89 c2                	mov    edx,eax
c001bbcf:	85 c0                	test   eax,eax
c001bbd1:	79 02                	jns    c001bbd5 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001bbd3:	31 d2                	xor    edx,edx
c001bbd5:	01 c2                	add    edx,eax
c001bbd7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001bbda:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001bbe1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001bbe5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bbe9:	99                   	cdq    
c001bbea:	01 c1                	add    ecx,eax
c001bbec:	11 d3                	adc    ebx,edx
c001bbee:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001bbf2:	29 c6                	sub    esi,eax
c001bbf4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001bbf8:	19 d7                	sbb    edi,edx
c001bbfa:	89 34 24             	mov    DWORD PTR [esp],esi
c001bbfd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001bc01:	b8 ff 07 00 00       	mov    eax,0x7ff
c001bc06:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001bc09:	b8 00 00 00 00       	mov    eax,0x0
c001bc0e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001bc12:	7d 43                	jge    c001bc57 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001bc14:	52                   	push   edx
c001bc15:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc19:	50                   	push   eax
c001bc1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bc1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc22:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bc26:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bc2a:	50                   	push   eax
c001bc2b:	e8 db fd ff ff       	call   c001ba0b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc30:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001bc38:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001bc3d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001bc45:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001bc4d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001bc52:	83 c4 10             	add    esp,0x10
c001bc55:	eb aa                	jmp    c001bc01 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001bc57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc5b:	0b 04 24             	or     eax,DWORD PTR [esp]
c001bc5e:	74 2a                	je     c001bc8a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001bc60:	50                   	push   eax
c001bc61:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc65:	50                   	push   eax
c001bc66:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bc6a:	56                   	push   esi
c001bc6b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bc6f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc73:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001bc77:	51                   	push   ecx
c001bc78:	e8 8e fd ff ff       	call   c001ba0b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc7d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bc81:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bc85:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bc87:	83 c4 10             	add    esp,0x10
c001bc8a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bc91:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bc95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc99:	89 18                	mov    DWORD PTR [eax],ebx
c001bc9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc9f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bca2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bca5:	31 c0                	xor    eax,eax
c001bca7:	eb 05                	jmp    c001bcae <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bca9:	b8 04 00 00 00       	mov    eax,0x4
c001bcae:	81 c4 2c 08 00 00    	add    esp,0x82c
c001bcb4:	5b                   	pop    ebx
c001bcb5:	5e                   	pop    esi
c001bcb6:	5f                   	pop    edi
c001bcb7:	5d                   	pop    ebp
c001bcb8:	c3                   	ret    
c001bcb9:	90                   	nop

c001bcba <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001bcba:	55                   	push   ebp
c001bcbb:	57                   	push   edi
c001bcbc:	56                   	push   esi
c001bcbd:	53                   	push   ebx
c001bcbe:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001bcc4:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001bccb:	85 ed                	test   ebp,ebp
c001bccd:	0f 84 51 02 00 00    	je     c001bf24 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bcd3:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001bcdb:	0f 84 43 02 00 00    	je     c001bf24 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bce1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bce4:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001bce7:	75 0a                	jne    c001bcf3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001bce9:	b8 07 00 00 00       	mov    eax,0x7
c001bcee:	e9 36 02 00 00       	jmp    c001bf29 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bcf3:	50                   	push   eax
c001bcf4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bcf8:	50                   	push   eax
c001bcf9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bd00:	53                   	push   ebx
c001bd01:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bd04:	c1 e0 0b             	shl    eax,0xb
c001bd07:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001bd0a:	c1 e8 0b             	shr    eax,0xb
c001bd0d:	50                   	push   eax
c001bd0e:	e8 f8 fc ff ff       	call   c001ba0b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd13:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd16:	83 c4 10             	add    esp,0x10
c001bd19:	89 c1                	mov    ecx,eax
c001bd1b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001bd1e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001bd24:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001bd27:	84 db                	test   bl,bl
c001bd29:	0f 85 8b 00 00 00    	jne    c001bdba <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001bd2f:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001bd35:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bd38:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001bd3e:	29 c6                	sub    esi,eax
c001bd40:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001bd44:	89 f3                	mov    ebx,esi
c001bd46:	89 f1                	mov    ecx,esi
c001bd48:	c1 fb 1f             	sar    ebx,0x1f
c001bd4b:	01 f0                	add    eax,esi
c001bd4d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bd50:	11 da                	adc    edx,ebx
c001bd52:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd55:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bd59:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bd5c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bd5f:	89 d8                	mov    eax,ebx
c001bd61:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001bd65:	ba 00 00 00 00       	mov    edx,0x0
c001bd6a:	19 f8                	sbb    eax,edi
c001bd6c:	b8 00 00 00 00       	mov    eax,0x0
c001bd71:	73 08                	jae    c001bd7b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001bd73:	89 f0                	mov    eax,esi
c001bd75:	89 fa                	mov    edx,edi
c001bd77:	29 c8                	sub    eax,ecx
c001bd79:	19 da                	sbb    edx,ebx
c001bd7b:	89 d7                	mov    edi,edx
c001bd7d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bd80:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bd83:	09 c7                	or     edi,eax
c001bd85:	0f 84 5e ff ff ff    	je     c001bce9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001bd8b:	57                   	push   edi
c001bd8c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bd90:	50                   	push   eax
c001bd91:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bd98:	53                   	push   ebx
c001bd99:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bd9c:	c1 e0 0b             	shl    eax,0xb
c001bd9f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001bda3:	c1 e8 0b             	shr    eax,0xb
c001bda6:	50                   	push   eax
c001bda7:	e8 5f fc ff ff       	call   c001ba0b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bdac:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bdaf:	83 c4 10             	add    esp,0x10
c001bdb2:	25 ff 07 00 00       	and    eax,0x7ff
c001bdb7:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001bdba:	31 ff                	xor    edi,edi
c001bdbc:	56                   	push   esi
c001bdbd:	6a 28                	push   0x28
c001bdbf:	6a 00                	push   0x0
c001bdc1:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bdc5:	50                   	push   eax
c001bdc6:	e8 b9 48 fe ff       	call   c0000684 <memset>
c001bdcb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bdce:	25 ff 07 00 00       	and    eax,0x7ff
c001bdd3:	89 c6                	mov    esi,eax
c001bdd5:	83 c6 21             	add    esi,0x21
c001bdd8:	83 d7 00             	adc    edi,0x0
c001bddb:	83 c4 10             	add    esp,0x10
c001bdde:	31 c9                	xor    ecx,ecx
c001bde0:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001bde7:	83 f9 28             	cmp    ecx,0x28
c001bdea:	88 04 24             	mov    BYTE PTR [esp],al
c001bded:	0f 94 c2             	sete   dl
c001bdf0:	88 d0                	mov    al,dl
c001bdf2:	ba ff 07 00 00       	mov    edx,0x7ff
c001bdf7:	39 f2                	cmp    edx,esi
c001bdf9:	ba 00 00 00 00       	mov    edx,0x0
c001bdfe:	19 fa                	sbb    edx,edi
c001be00:	0f 92 c2             	setb   dl
c001be03:	09 c2                	or     edx,eax
c001be05:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001be09:	0f 94 c0             	sete   al
c001be0c:	08 d0                	or     al,dl
c001be0e:	75 16                	jne    c001be26 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001be10:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001be14:	74 10                	je     c001be26 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001be16:	8a 04 24             	mov    al,BYTE PTR [esp]
c001be19:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001be1d:	41                   	inc    ecx
c001be1e:	83 c6 01             	add    esi,0x1
c001be21:	83 d7 00             	adc    edi,0x0
c001be24:	eb ba                	jmp    c001bde0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001be26:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001be2d:	83 ec 0c             	sub    esp,0xc
c001be30:	8d 74 24 24          	lea    esi,[esp+0x24]
c001be34:	56                   	push   esi
c001be35:	e8 66 48 fe ff       	call   c00006a0 <strlen>
c001be3a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001be41:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001be45:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001be4d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001be50:	5a                   	pop    edx
c001be51:	25 ff 07 00 00       	and    eax,0x7ff
c001be56:	59                   	pop    ecx
c001be57:	01 f8                	add    eax,edi
c001be59:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001be5f:	83 e0 02             	and    eax,0x2
c001be62:	3c 01                	cmp    al,0x1
c001be64:	19 c0                	sbb    eax,eax
c001be66:	83 c0 02             	add    eax,0x2
c001be69:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001be6d:	56                   	push   esi
c001be6e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001be72:	50                   	push   eax
c001be73:	e8 c8 48 fe ff       	call   c0000740 <strcpy>
c001be78:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001be7c:	83 c4 10             	add    esp,0x10
c001be7f:	84 c0                	test   al,al
c001be81:	75 21                	jne    c001bea4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001be83:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001be8b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001be93:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001be9b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001bea2:	eb 28                	jmp    c001becc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bea4:	fe c8                	dec    al
c001bea6:	75 24                	jne    c001becc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bea8:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001beb0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001beb8:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bec0:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001bec7:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001becc:	8d 74 24 40          	lea    esi,[esp+0x40]
c001bed0:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001bed7:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001bede:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bee0:	0f b6 f3             	movzx  esi,bl
c001bee3:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001beea:	31 db                	xor    ebx,ebx
c001beec:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bef2:	89 df                	mov    edi,ebx
c001bef4:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001bef7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001befa:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001befd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bf00:	39 c6                	cmp    esi,eax
c001bf02:	19 d7                	sbb    edi,edx
c001bf04:	72 10                	jb     c001bf16 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001bf06:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001bf0d:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001bf14:	eb 0a                	jmp    c001bf20 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001bf16:	29 f0                	sub    eax,esi
c001bf18:	19 da                	sbb    edx,ebx
c001bf1a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bf1d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bf20:	31 c0                	xor    eax,eax
c001bf22:	eb 05                	jmp    c001bf29 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bf24:	b8 04 00 00 00       	mov    eax,0x4
c001bf29:	81 c4 5c 09 00 00    	add    esp,0x95c
c001bf2f:	5b                   	pop    ebx
c001bf30:	5e                   	pop    esi
c001bf31:	5f                   	pop    edi
c001bf32:	5d                   	pop    ebp
c001bf33:	c3                   	ret    

c001bf34 <readRoot(unsigned int*, unsigned int*, char)>:
c001bf34:	57                   	push   edi
c001bf35:	56                   	push   esi
c001bf36:	81 ec 38 08 00 00    	sub    esp,0x838
c001bf3c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001bf44:	50                   	push   eax
c001bf45:	8d 44 24 38          	lea    eax,[esp+0x38]
c001bf49:	50                   	push   eax
c001bf4a:	6a 10                	push   0x10
c001bf4c:	e8 ba fa ff ff       	call   c001ba0b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bf51:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001bf58:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001bf5c:	b9 22 00 00 00       	mov    ecx,0x22
c001bf61:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf63:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bf6a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bf6e:	89 10                	mov    DWORD PTR [eax],edx
c001bf70:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001bf77:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bf7b:	89 10                	mov    DWORD PTR [eax],edx
c001bf7d:	81 c4 44 08 00 00    	add    esp,0x844
c001bf83:	b0 01                	mov    al,0x1
c001bf85:	5e                   	pop    esi
c001bf86:	5f                   	pop    edi
c001bf87:	c3                   	ret    

c001bf88 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001bf88:	55                   	push   ebp
c001bf89:	57                   	push   edi
c001bf8a:	56                   	push   esi
c001bf8b:	53                   	push   ebx
c001bf8c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bf92:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001bf99:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001bfa0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bfa4:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001bfa8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bfac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bfb0:	75 03                	jne    c001bfb5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bfb2:	83 c3 02             	add    ebx,0x2
c001bfb5:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001bfb8:	75 03                	jne    c001bfbd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001bfba:	43                   	inc    ebx
c001bfbb:	eb f8                	jmp    c001bfb5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bfbd:	51                   	push   ecx
c001bfbe:	68 00 01 00 00       	push   0x100
c001bfc3:	6a 00                	push   0x0
c001bfc5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bfc9:	50                   	push   eax
c001bfca:	e8 b5 46 fe ff       	call   c0000684 <memset>
c001bfcf:	83 c4 10             	add    esp,0x10
c001bfd2:	31 d2                	xor    edx,edx
c001bfd4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001bfd7:	84 c0                	test   al,al
c001bfd9:	74 21                	je     c001bffc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001bfdb:	3c 2f                	cmp    al,0x2f
c001bfdd:	75 0b                	jne    c001bfea <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001bfdf:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001bfe3:	bd 01 00 00 00       	mov    ebp,0x1
c001bfe8:	eb 14                	jmp    c001bffe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001bfea:	8d 48 9f             	lea    ecx,[eax-0x61]
c001bfed:	80 f9 19             	cmp    cl,0x19
c001bff0:	77 03                	ja     c001bff5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001bff2:	83 e8 20             	sub    eax,0x20
c001bff5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001bff9:	42                   	inc    edx
c001bffa:	eb d8                	jmp    c001bfd4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001bffc:	31 ed                	xor    ebp,ebp
c001bffe:	83 ec 0c             	sub    esp,0xc
c001c001:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c008:	e8 b6 d9 fe ff       	call   c00099c3 <malloc>
c001c00d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c014:	89 c6                	mov    esi,eax
c001c016:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001c01c:	c1 ef 0b             	shr    edi,0xb
c001c01f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c026:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c02a:	83 c4 10             	add    esp,0x10
c001c02d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c032:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c036:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c03d:	74 28                	je     c001c067 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c03f:	52                   	push   edx
c001c040:	57                   	push   edi
c001c041:	50                   	push   eax
c001c042:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c046:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c04d:	e8 b9 f9 ff ff       	call   c001ba0b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c052:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c056:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c05d:	05 00 08 00 00       	add    eax,0x800
c001c062:	83 c4 10             	add    esp,0x10
c001c065:	eb cb                	jmp    c001c032 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c067:	83 ec 0c             	sub    esp,0xc
c001c06a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c06e:	57                   	push   edi
c001c06f:	e8 2c 46 fe ff       	call   c00006a0 <strlen>
c001c074:	50                   	push   eax
c001c075:	57                   	push   edi
c001c076:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c07d:	56                   	push   esi
c001c07e:	e8 46 f9 ff ff       	call   c001b9c9 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c083:	83 c4 20             	add    esp,0x20
c001c086:	85 c0                	test   eax,eax
c001c088:	75 13                	jne    c001c09d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c08a:	83 ec 0c             	sub    esp,0xc
c001c08d:	56                   	push   esi
c001c08e:	e8 40 d9 fe ff       	call   c00099d3 <free>
c001c093:	83 c4 10             	add    esp,0x10
c001c096:	31 c0                	xor    eax,eax
c001c098:	e9 b3 00 00 00       	jmp    c001c150 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c09d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c0a1:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c0a5:	c1 e7 08             	shl    edi,0x8
c001c0a8:	c1 e2 10             	shl    edx,0x10
c001c0ab:	09 d7                	or     edi,edx
c001c0ad:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c0b1:	09 d7                	or     edi,edx
c001c0b3:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c0b7:	c1 e2 18             	shl    edx,0x18
c001c0ba:	09 d7                	or     edi,edx
c001c0bc:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c0c0:	89 d1                	mov    ecx,edx
c001c0c2:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c0c6:	c1 e1 08             	shl    ecx,0x8
c001c0c9:	c1 e2 10             	shl    edx,0x10
c001c0cc:	09 ca                	or     edx,ecx
c001c0ce:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c0d2:	09 ca                	or     edx,ecx
c001c0d4:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c0d8:	c1 e1 18             	shl    ecx,0x18
c001c0db:	09 ca                	or     edx,ecx
c001c0dd:	89 e9                	mov    ecx,ebp
c001c0df:	84 c9                	test   cl,cl
c001c0e1:	74 3c                	je     c001c11f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c0e3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c0e7:	83 ec 0c             	sub    esp,0xc
c001c0ea:	56                   	push   esi
c001c0eb:	e8 e3 d8 fe ff       	call   c00099d3 <free>
c001c0f0:	83 c4 0c             	add    esp,0xc
c001c0f3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c0fa:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c0ff:	50                   	push   eax
c001c100:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c107:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c10e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c112:	52                   	push   edx
c001c113:	57                   	push   edi
c001c114:	53                   	push   ebx
c001c115:	e8 6e fe ff ff       	call   c001bf88 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c11a:	83 c4 20             	add    esp,0x20
c001c11d:	eb 31                	jmp    c001c150 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c11f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c122:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c129:	d0 e8                	shr    al,1
c001c12b:	89 3b                	mov    DWORD PTR [ebx],edi
c001c12d:	83 e0 01             	and    eax,0x1
c001c130:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c137:	83 ec 0c             	sub    esp,0xc
c001c13a:	89 13                	mov    DWORD PTR [ebx],edx
c001c13c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c143:	89 03                	mov    DWORD PTR [ebx],eax
c001c145:	56                   	push   esi
c001c146:	e8 88 d8 fe ff       	call   c00099d3 <free>
c001c14b:	83 c4 10             	add    esp,0x10
c001c14e:	b0 01                	mov    al,0x1
c001c150:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c156:	5b                   	pop    ebx
c001c157:	5e                   	pop    esi
c001c158:	5f                   	pop    edi
c001c159:	5d                   	pop    ebp
c001c15a:	c3                   	ret    

c001c15b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c15b:	55                   	push   ebp
c001c15c:	57                   	push   edi
c001c15d:	56                   	push   esi
c001c15e:	53                   	push   ebx
c001c15f:	83 ec 20             	sub    esp,0x20
c001c162:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c166:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c16a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c16e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c176:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c17e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c183:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c189:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c18f:	57                   	push   edi
c001c190:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c194:	50                   	push   eax
c001c195:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c199:	50                   	push   eax
c001c19a:	e8 95 fd ff ff       	call   c001bf34 <readRoot(unsigned int*, unsigned int*, char)>
c001c19f:	5a                   	pop    edx
c001c1a0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c1a4:	e8 f7 44 fe ff       	call   c00006a0 <strlen>
c001c1a9:	83 c4 10             	add    esp,0x10
c001c1ac:	83 f8 03             	cmp    eax,0x3
c001c1af:	77 17                	ja     c001c1c8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c1b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1b5:	89 03                	mov    DWORD PTR [ebx],eax
c001c1b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1bb:	89 06                	mov    DWORD PTR [esi],eax
c001c1bd:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c1c4:	b0 01                	mov    al,0x1
c001c1c6:	eb 19                	jmp    c001c1e1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c1c8:	50                   	push   eax
c001c1c9:	55                   	push   ebp
c001c1ca:	57                   	push   edi
c001c1cb:	56                   	push   esi
c001c1cc:	53                   	push   ebx
c001c1cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1d1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c1d9:	e8 aa fd ff ff       	call   c001bf88 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c1de:	83 c4 20             	add    esp,0x20
c001c1e1:	83 c4 1c             	add    esp,0x1c
c001c1e4:	5b                   	pop    ebx
c001c1e5:	5e                   	pop    esi
c001c1e6:	5f                   	pop    edi
c001c1e7:	5d                   	pop    ebp
c001c1e8:	c3                   	ret    
c001c1e9:	90                   	nop

c001c1ea <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c1ea:	57                   	push   edi
c001c1eb:	56                   	push   esi
c001c1ec:	53                   	push   ebx
c001c1ed:	83 ec 10             	sub    esp,0x10
c001c1f0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c1f4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c1f8:	85 ff                	test   edi,edi
c001c1fa:	0f 84 8b 00 00 00    	je     c001c28b <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c200:	85 f6                	test   esi,esi
c001c202:	0f 84 83 00 00 00    	je     c001c28b <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c208:	b8 03 00 00 00       	mov    eax,0x3
c001c20d:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c212:	75 7c                	jne    c001c290 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c214:	83 ec 0c             	sub    esp,0xc
c001c217:	6a 1c                	push   0x1c
c001c219:	e8 a5 d7 fe ff       	call   c00099c3 <malloc>
c001c21e:	89 07                	mov    DWORD PTR [edi],eax
c001c220:	89 c3                	mov    ebx,eax
c001c222:	58                   	pop    eax
c001c223:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c227:	50                   	push   eax
c001c228:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c22b:	50                   	push   eax
c001c22c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c230:	50                   	push   eax
c001c231:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c235:	50                   	push   eax
c001c236:	56                   	push   esi
c001c237:	e8 1f ff ff ff       	call   c001c15b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c23c:	83 c4 20             	add    esp,0x20
c001c23f:	84 c0                	test   al,al
c001c241:	74 07                	je     c001c24a <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c243:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c248:	74 0b                	je     c001c255 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c24a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c24e:	b8 01 00 00 00       	mov    eax,0x1
c001c253:	eb 3b                	jmp    c001c290 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c255:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c259:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c25d:	89 03                	mov    DWORD PTR [ebx],eax
c001c25f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c266:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c26a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c271:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c278:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c27b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c282:	8a 06                	mov    al,BYTE PTR [esi]
c001c284:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c287:	31 c0                	xor    eax,eax
c001c289:	eb 05                	jmp    c001c290 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c28b:	b8 04 00 00 00       	mov    eax,0x4
c001c290:	83 c4 10             	add    esp,0x10
c001c293:	5b                   	pop    ebx
c001c294:	5e                   	pop    esi
c001c295:	5f                   	pop    edi
c001c296:	c3                   	ret    
c001c297:	90                   	nop

c001c298 <ISO9660::exists(char const*)>:
c001c298:	83 ec 28             	sub    esp,0x28
c001c29b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c29f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c2a3:	52                   	push   edx
c001c2a4:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c2a7:	52                   	push   edx
c001c2a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c2ac:	52                   	push   edx
c001c2ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c2b1:	52                   	push   edx
c001c2b2:	50                   	push   eax
c001c2b3:	e8 a3 fe ff ff       	call   c001c15b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c2b8:	83 c4 3c             	add    esp,0x3c
c001c2bb:	c3                   	ret    

c001c2bc <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c2bc:	56                   	push   esi
c001c2bd:	53                   	push   ebx
c001c2be:	83 ec 14             	sub    esp,0x14
c001c2c1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c2c5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c2c9:	85 db                	test   ebx,ebx
c001c2cb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c2cf:	0f 94 c2             	sete   dl
c001c2d2:	85 f6                	test   esi,esi
c001c2d4:	0f 94 c0             	sete   al
c001c2d7:	08 c2                	or     dl,al
c001c2d9:	75 68                	jne    c001c343 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c2db:	85 c9                	test   ecx,ecx
c001c2dd:	74 64                	je     c001c343 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c2df:	83 ec 0c             	sub    esp,0xc
c001c2e2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c2e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c2e9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c2ef:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c2f6:	50                   	push   eax
c001c2f7:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c2fa:	50                   	push   eax
c001c2fb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2ff:	50                   	push   eax
c001c300:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c304:	50                   	push   eax
c001c305:	51                   	push   ecx
c001c306:	e8 50 fe ff ff       	call   c001c15b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c30b:	83 c4 20             	add    esp,0x20
c001c30e:	ba 01 00 00 00       	mov    edx,0x1
c001c313:	84 c0                	test   al,al
c001c315:	74 31                	je     c001c348 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c31b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c322:	89 03                	mov    DWORD PTR [ebx],eax
c001c324:	ba 00 00 00 00       	mov    edx,0x0
c001c329:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c32d:	85 c0                	test   eax,eax
c001c32f:	0f 95 06             	setne  BYTE PTR [esi]
c001c332:	74 14                	je     c001c348 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c334:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c33a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c341:	eb 05                	jmp    c001c348 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c343:	ba 04 00 00 00       	mov    edx,0x4
c001c348:	83 c4 14             	add    esp,0x14
c001c34b:	89 d0                	mov    eax,edx
c001c34d:	5b                   	pop    ebx
c001c34e:	5e                   	pop    esi
c001c34f:	c3                   	ret    

c001c350 <ISO9660::openDir(char const*, void**)>:
c001c350:	57                   	push   edi
c001c351:	56                   	push   esi
c001c352:	53                   	push   ebx
c001c353:	83 ec 10             	sub    esp,0x10
c001c356:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c35a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c35e:	85 ff                	test   edi,edi
c001c360:	74 7b                	je     c001c3dd <ISO9660::openDir(char const*, void**)+0x8d>
c001c362:	85 f6                	test   esi,esi
c001c364:	74 77                	je     c001c3dd <ISO9660::openDir(char const*, void**)+0x8d>
c001c366:	83 ec 0c             	sub    esp,0xc
c001c369:	6a 1c                	push   0x1c
c001c36b:	e8 53 d6 fe ff       	call   c00099c3 <malloc>
c001c370:	89 07                	mov    DWORD PTR [edi],eax
c001c372:	89 c3                	mov    ebx,eax
c001c374:	58                   	pop    eax
c001c375:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c379:	50                   	push   eax
c001c37a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c37d:	50                   	push   eax
c001c37e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c382:	50                   	push   eax
c001c383:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c387:	50                   	push   eax
c001c388:	56                   	push   esi
c001c389:	e8 cd fd ff ff       	call   c001c15b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c38e:	83 c4 20             	add    esp,0x20
c001c391:	84 c0                	test   al,al
c001c393:	74 07                	je     c001c39c <ISO9660::openDir(char const*, void**)+0x4c>
c001c395:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c39a:	75 0b                	jne    c001c3a7 <ISO9660::openDir(char const*, void**)+0x57>
c001c39c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c3a0:	b8 01 00 00 00       	mov    eax,0x1
c001c3a5:	eb 3b                	jmp    c001c3e2 <ISO9660::openDir(char const*, void**)+0x92>
c001c3a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3ab:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c3af:	89 03                	mov    DWORD PTR [ebx],eax
c001c3b1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c3b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3bc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c3c3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c3ca:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c3cd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c3d4:	8a 06                	mov    al,BYTE PTR [esi]
c001c3d6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c3d9:	31 c0                	xor    eax,eax
c001c3db:	eb 05                	jmp    c001c3e2 <ISO9660::openDir(char const*, void**)+0x92>
c001c3dd:	b8 04 00 00 00       	mov    eax,0x4
c001c3e2:	83 c4 10             	add    esp,0x10
c001c3e5:	5b                   	pop    ebx
c001c3e6:	5e                   	pop    esi
c001c3e7:	5f                   	pop    edi
c001c3e8:	c3                   	ret    
c001c3e9:	90                   	nop

c001c3ea <ISO9660::ISO9660()>:
c001c3ea:	83 ec 0c             	sub    esp,0xc
c001c3ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f1:	83 ec 0c             	sub    esp,0xc
c001c3f4:	50                   	push   eax
c001c3f5:	e8 90 09 ff ff       	call   c000cd8a <Filesystem::Filesystem()>
c001c3fa:	83 c4 10             	add    esp,0x10
c001c3fd:	ba d0 4b 02 c0       	mov    edx,0xc0024bd0
c001c402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c406:	89 10                	mov    DWORD PTR [eax],edx
c001c408:	90                   	nop
c001c409:	83 c4 0c             	add    esp,0xc
c001c40c:	c3                   	ret    
c001c40d:	90                   	nop

c001c40e <SoundCard::beginPlayback()>:
c001c40e:	c7 44 24 04 30 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024c30
c001c416:	e9 1a 7f ff ff       	jmp    c0014335 <Krnl::panic(char const*)>
c001c41b:	90                   	nop

c001c41c <SoundCard::stopPlayback()>:
c001c41c:	c7 44 24 04 64 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024c64
c001c424:	e9 0c 7f ff ff       	jmp    c0014335 <Krnl::panic(char const*)>
c001c429:	90                   	nop

c001c42a <SoundCard::SoundCard(char const*)>:
c001c42a:	83 ec 1c             	sub    esp,0x1c
c001c42d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c431:	83 ec 08             	sub    esp,0x8
c001c434:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c438:	50                   	push   eax
c001c439:	e8 80 1c ff ff       	call   c000e0be <Device::Device(char const*)>
c001c43e:	83 c4 10             	add    esp,0x10
c001c441:	ba 70 4d 02 c0       	mov    edx,0xc0024d70
c001c446:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c44a:	89 10                	mov    DWORD PTR [eax],edx
c001c44c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c450:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c457:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c45b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c469:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c473:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c477:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c485:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c48f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c497:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c49c:	7f 19                	jg     c001c4b7 <SoundCard::SoundCard(char const*)+0x8d>
c001c49e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c4a6:	83 c2 54             	add    edx,0x54
c001c4a9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c4b1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c4b5:	eb e0                	jmp    c001c497 <SoundCard::SoundCard(char const*)+0x6d>
c001c4b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4bb:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c4c2:	90                   	nop
c001c4c3:	83 c4 1c             	add    esp,0x1c
c001c4c6:	c3                   	ret    
c001c4c7:	90                   	nop

c001c4c8 <SoundCard::~SoundCard()>:
c001c4c8:	83 ec 0c             	sub    esp,0xc
c001c4cb:	ba 70 4d 02 c0       	mov    edx,0xc0024d70
c001c4d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d4:	89 10                	mov    DWORD PTR [eax],edx
c001c4d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4da:	83 ec 0c             	sub    esp,0xc
c001c4dd:	50                   	push   eax
c001c4de:	e8 a5 18 ff ff       	call   c000dd88 <Device::~Device()>
c001c4e3:	83 c4 10             	add    esp,0x10
c001c4e6:	90                   	nop
c001c4e7:	83 c4 0c             	add    esp,0xc
c001c4ea:	c3                   	ret    
c001c4eb:	90                   	nop

c001c4ec <SoundCard::~SoundCard()>:
c001c4ec:	83 ec 0c             	sub    esp,0xc
c001c4ef:	83 ec 0c             	sub    esp,0xc
c001c4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4f6:	e8 cd ff ff ff       	call   c001c4c8 <SoundCard::~SoundCard()>
c001c4fb:	83 c4 10             	add    esp,0x10
c001c4fe:	83 ec 08             	sub    esp,0x8
c001c501:	68 e8 01 00 00       	push   0x1e8
c001c506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c50a:	e8 83 04 ff ff       	call   c000c992 <operator delete(void*, unsigned long)>
c001c50f:	83 c4 10             	add    esp,0x10
c001c512:	83 c4 0c             	add    esp,0xc
c001c515:	c3                   	ret    

c001c516 <SoundCard::configureRates(int, int, int)>:
c001c516:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c51a:	31 c0                	xor    eax,eax
c001c51c:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c523:	75 20                	jne    c001c545 <SoundCard::configureRates(int, int, int)+0x2f>
c001c525:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c529:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c52f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c533:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c53d:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c543:	b0 01                	mov    al,0x1
c001c545:	c3                   	ret    

c001c546 <SoundCard::getSamples16(int, short*)>:
c001c546:	55                   	push   ebp
c001c547:	57                   	push   edi
c001c548:	31 ff                	xor    edi,edi
c001c54a:	56                   	push   esi
c001c54b:	53                   	push   ebx
c001c54c:	83 ec 28             	sub    esp,0x28
c001c54f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c553:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c557:	8d 5c 2d 00          	lea    ebx,[ebp+ebp*1+0x0]
c001c55b:	68 97 4c 02 c0       	push   0xc0024c97
c001c560:	e8 0e 05 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001c565:	83 c4 0c             	add    esp,0xc
c001c568:	53                   	push   ebx
c001c569:	6a 00                	push   0x0
c001c56b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c56f:	e8 10 41 fe ff       	call   c0000684 <memset>
c001c574:	58                   	pop    eax
c001c575:	5a                   	pop    edx
c001c576:	53                   	push   ebx
c001c577:	31 db                	xor    ebx,ebx
c001c579:	68 b6 4c 02 c0       	push   0xc0024cb6
c001c57e:	e8 f0 04 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001c583:	83 c4 10             	add    esp,0x10
c001c586:	52                   	push   edx
c001c587:	52                   	push   edx
c001c588:	53                   	push   ebx
c001c589:	68 c9 4c 02 c0       	push   0xc0024cc9
c001c58e:	e8 e0 04 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001c593:	59                   	pop    ecx
c001c594:	58                   	pop    eax
c001c595:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c59c:	68 e1 4c 02 c0       	push   0xc0024ce1
c001c5a1:	e8 cd 04 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001c5a6:	8b 84 9e 58 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x158]
c001c5ad:	83 c4 10             	add    esp,0x10
c001c5b0:	85 c0                	test   eax,eax
c001c5b2:	74 44                	je     c001c5f8 <SoundCard::getSamples16(int, short*)+0xb2>
c001c5b4:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c5b8:	75 3e                	jne    c001c5f8 <SoundCard::getSamples16(int, short*)+0xb2>
c001c5ba:	50                   	push   eax
c001c5bb:	50                   	push   eax
c001c5bc:	53                   	push   ebx
c001c5bd:	68 f3 4c 02 c0       	push   0xc0024cf3
c001c5c2:	e8 ac 04 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001c5c7:	56                   	push   esi
c001c5c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c5cc:	55                   	push   ebp
c001c5cd:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c5d4:	e8 6f 03 00 00       	call   c001c948 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c5d9:	83 c4 18             	add    esp,0x18
c001c5dc:	50                   	push   eax
c001c5dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c5e1:	68 0a 4d 02 c0       	push   0xc0024d0a
c001c5e6:	e8 88 04 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001c5eb:	83 c4 10             	add    esp,0x10
c001c5ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5f2:	39 c7                	cmp    edi,eax
c001c5f4:	7d 02                	jge    c001c5f8 <SoundCard::getSamples16(int, short*)+0xb2>
c001c5f6:	89 c7                	mov    edi,eax
c001c5f8:	43                   	inc    ebx
c001c5f9:	83 fb 20             	cmp    ebx,0x20
c001c5fc:	75 88                	jne    c001c586 <SoundCard::getSamples16(int, short*)+0x40>
c001c5fe:	83 c4 1c             	add    esp,0x1c
c001c601:	89 f8                	mov    eax,edi
c001c603:	5b                   	pop    ebx
c001c604:	5e                   	pop    esi
c001c605:	5f                   	pop    edi
c001c606:	5d                   	pop    ebp
c001c607:	c3                   	ret    

c001c608 <SoundCard::getSamples32(int, int*)>:
c001c608:	55                   	push   ebp
c001c609:	57                   	push   edi
c001c60a:	31 ff                	xor    edi,edi
c001c60c:	56                   	push   esi
c001c60d:	31 f6                	xor    esi,esi
c001c60f:	53                   	push   ebx
c001c610:	83 ec 10             	sub    esp,0x10
c001c613:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c617:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c61b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c61f:	c1 e0 02             	shl    eax,0x2
c001c622:	50                   	push   eax
c001c623:	6a 00                	push   0x0
c001c625:	55                   	push   ebp
c001c626:	e8 59 40 fe ff       	call   c0000684 <memset>
c001c62b:	83 c4 10             	add    esp,0x10
c001c62e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c635:	85 c0                	test   eax,eax
c001c637:	74 1b                	je     c001c654 <SoundCard::getSamples32(int, int*)+0x4c>
c001c639:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c63d:	75 15                	jne    c001c654 <SoundCard::getSamples32(int, int*)+0x4c>
c001c63f:	53                   	push   ebx
c001c640:	55                   	push   ebp
c001c641:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c645:	50                   	push   eax
c001c646:	e8 f9 03 00 00       	call   c001ca44 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c64b:	83 c4 10             	add    esp,0x10
c001c64e:	39 c6                	cmp    esi,eax
c001c650:	7d 02                	jge    c001c654 <SoundCard::getSamples32(int, int*)+0x4c>
c001c652:	89 c6                	mov    esi,eax
c001c654:	47                   	inc    edi
c001c655:	83 ff 20             	cmp    edi,0x20
c001c658:	75 d4                	jne    c001c62e <SoundCard::getSamples32(int, int*)+0x26>
c001c65a:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c660:	85 f6                	test   esi,esi
c001c662:	75 0f                	jne    c001c673 <SoundCard::getSamples32(int, int*)+0x6b>
c001c664:	84 c0                	test   al,al
c001c666:	74 1b                	je     c001c683 <SoundCard::getSamples32(int, int*)+0x7b>
c001c668:	83 ec 0c             	sub    esp,0xc
c001c66b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c66d:	53                   	push   ebx
c001c66e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c671:	eb 0d                	jmp    c001c680 <SoundCard::getSamples32(int, int*)+0x78>
c001c673:	84 c0                	test   al,al
c001c675:	75 0c                	jne    c001c683 <SoundCard::getSamples32(int, int*)+0x7b>
c001c677:	83 ec 0c             	sub    esp,0xc
c001c67a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c67c:	53                   	push   ebx
c001c67d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c680:	83 c4 10             	add    esp,0x10
c001c683:	83 c4 0c             	add    esp,0xc
c001c686:	89 f0                	mov    eax,esi
c001c688:	5b                   	pop    ebx
c001c689:	5e                   	pop    esi
c001c68a:	5f                   	pop    edi
c001c68b:	5d                   	pop    ebp
c001c68c:	c3                   	ret    
c001c68d:	90                   	nop

c001c68e <SoundCard::addChannel(SoundPort*)>:
c001c68e:	56                   	push   esi
c001c68f:	53                   	push   ebx
c001c690:	53                   	push   ebx
c001c691:	31 db                	xor    ebx,ebx
c001c693:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c697:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c69f:	74 27                	je     c001c6c8 <SoundCard::addChannel(SoundPort*)+0x3a>
c001c6a1:	43                   	inc    ebx
c001c6a2:	83 fb 20             	cmp    ebx,0x20
c001c6a5:	75 f0                	jne    c001c697 <SoundCard::addChannel(SoundPort*)+0x9>
c001c6a7:	83 ec 0c             	sub    esp,0xc
c001c6aa:	83 cb ff             	or     ebx,0xffffffff
c001c6ad:	68 2f 4d 02 c0       	push   0xc0024d2f
c001c6b2:	e8 bc 03 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001c6b7:	c7 04 24 28 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d28
c001c6be:	e8 72 7c ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001c6c3:	83 c4 10             	add    esp,0x10
c001c6c6:	eb 1b                	jmp    c001c6e3 <SoundCard::addChannel(SoundPort*)+0x55>
c001c6c8:	51                   	push   ecx
c001c6c9:	51                   	push   ecx
c001c6ca:	53                   	push   ebx
c001c6cb:	68 47 4d 02 c0       	push   0xc0024d47
c001c6d0:	e8 9e 03 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001c6d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c6d9:	83 c4 10             	add    esp,0x10
c001c6dc:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c6e3:	89 d8                	mov    eax,ebx
c001c6e5:	5a                   	pop    edx
c001c6e6:	5b                   	pop    ebx
c001c6e7:	5e                   	pop    esi
c001c6e8:	c3                   	ret    
c001c6e9:	90                   	nop

c001c6ea <SoundCard::removeChannel(int)>:
c001c6ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c6f2:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c6fd:	c3                   	ret    
c001c6fe:	66 90                	xchg   ax,ax

c001c700 <SoundPort::SoundPort(int, int, int, int)>:
c001c700:	83 ec 0c             	sub    esp,0xc
c001c703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c707:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c70e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c712:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c71e:	89 10                	mov    DWORD PTR [eax],edx
c001c720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c724:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c728:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c72b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c736:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c73b:	75 13                	jne    c001c750 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c741:	8b 00                	mov    eax,DWORD PTR [eax]
c001c743:	05 a0 0f 00 00       	add    eax,0xfa0
c001c748:	01 c0                	add    eax,eax
c001c74a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c74e:	66 90                	xchg   ax,ax
c001c750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c754:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c758:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c75b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c75f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c76a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c76d:	c1 e0 02             	shl    eax,0x2
c001c770:	83 ec 0c             	sub    esp,0xc
c001c773:	50                   	push   eax
c001c774:	e8 4a d2 fe ff       	call   c00099c3 <malloc>
c001c779:	83 c4 10             	add    esp,0x10
c001c77c:	89 c2                	mov    edx,eax
c001c77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c782:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c785:	90                   	nop
c001c786:	83 c4 0c             	add    esp,0xc
c001c789:	c3                   	ret    
c001c78a:	66 90                	xchg   ax,ax

c001c78c <SoundPort::~SoundPort()>:
c001c78c:	83 ec 0c             	sub    esp,0xc
c001c78f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c793:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c796:	85 c0                	test   eax,eax
c001c798:	74 1e                	je     c001c7b8 <SoundPort::~SoundPort()+0x2c>
c001c79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c79e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c7a1:	83 ec 0c             	sub    esp,0xc
c001c7a4:	50                   	push   eax
c001c7a5:	e8 29 d2 fe ff       	call   c00099d3 <free>
c001c7aa:	83 c4 10             	add    esp,0x10
c001c7ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c7b8:	90                   	nop
c001c7b9:	83 c4 0c             	add    esp,0xc
c001c7bc:	c3                   	ret    
c001c7bd:	90                   	nop
c001c7be:	66 90                	xchg   ax,ax

c001c7c0 <SoundPort::unpause()>:
c001c7c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7c4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c7c8:	c3                   	ret    
c001c7c9:	90                   	nop
c001c7ca:	66 90                	xchg   ax,ax

c001c7cc <SoundPort::pause()>:
c001c7cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7d0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c7d4:	c3                   	ret    
c001c7d5:	90                   	nop
c001c7d6:	66 90                	xchg   ax,ax

c001c7d8 <SoundPort::getBufferUsed()>:
c001c7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7dc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c7df:	c3                   	ret    

c001c7e0 <SoundPort::getBufferSize()>:
c001c7e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c7e7:	c3                   	ret    

c001c7e8 <SoundPort::buffer16(short*, int)>:
c001c7e8:	55                   	push   ebp
c001c7e9:	57                   	push   edi
c001c7ea:	56                   	push   esi
c001c7eb:	53                   	push   ebx
c001c7ec:	83 ec 1c             	sub    esp,0x1c
c001c7ef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c7f3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c7f7:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c7fa:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c7fd:	0f 84 85 00 00 00    	je     c001c888 <SoundPort::buffer16(short*, int)+0xa0>
c001c803:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c807:	85 c9                	test   ecx,ecx
c001c809:	7e 7d                	jle    c001c888 <SoundPort::buffer16(short*, int)+0xa0>
c001c80b:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001c80f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c812:	c1 e1 0f             	shl    ecx,0xf
c001c815:	8d 70 01             	lea    esi,[eax+0x1]
c001c818:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c81b:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c81e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c821:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c824:	74 6e                	je     c001c894 <SoundPort::buffer16(short*, int)+0xac>
c001c826:	31 f6                	xor    esi,esi
c001c828:	eb 22                	jmp    c001c84c <SoundPort::buffer16(short*, int)+0x64>
c001c82a:	66 90                	xchg   ax,ax
c001c82c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001c831:	8d 79 01             	lea    edi,[ecx+0x1]
c001c834:	c1 e3 0f             	shl    ebx,0xf
c001c837:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001c83a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001c83d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001c840:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c843:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c846:	74 1c                	je     c001c864 <SoundPort::buffer16(short*, int)+0x7c>
c001c848:	89 c6                	mov    esi,eax
c001c84a:	66 90                	xchg   ax,ax
c001c84c:	8d 46 01             	lea    eax,[esi+0x1]
c001c84f:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001c853:	75 d7                	jne    c001c82c <SoundPort::buffer16(short*, int)+0x44>
c001c855:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c859:	83 c4 1c             	add    esp,0x1c
c001c85c:	5b                   	pop    ebx
c001c85d:	5e                   	pop    esi
c001c85e:	5f                   	pop    edi
c001c85f:	5d                   	pop    ebp
c001c860:	c3                   	ret    
c001c861:	8d 76 00             	lea    esi,[esi+0x0]
c001c864:	8d 46 02             	lea    eax,[esi+0x2]
c001c867:	90                   	nop
c001c868:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c86c:	83 ec 0c             	sub    esp,0xc
c001c86f:	68 9c 4d 02 c0       	push   0xc0024d9c
c001c874:	e8 fa 01 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001c879:	83 c4 10             	add    esp,0x10
c001c87c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c880:	83 c4 1c             	add    esp,0x1c
c001c883:	5b                   	pop    ebx
c001c884:	5e                   	pop    esi
c001c885:	5f                   	pop    edi
c001c886:	5d                   	pop    ebp
c001c887:	c3                   	ret    
c001c888:	83 c4 1c             	add    esp,0x1c
c001c88b:	31 c0                	xor    eax,eax
c001c88d:	5b                   	pop    ebx
c001c88e:	5e                   	pop    esi
c001c88f:	5f                   	pop    edi
c001c890:	5d                   	pop    ebp
c001c891:	c3                   	ret    
c001c892:	66 90                	xchg   ax,ax
c001c894:	b8 01 00 00 00       	mov    eax,0x1
c001c899:	eb cd                	jmp    c001c868 <SoundPort::buffer16(short*, int)+0x80>
c001c89b:	90                   	nop

c001c89c <SoundPort::buffer32(int*, int)>:
c001c89c:	55                   	push   ebp
c001c89d:	57                   	push   edi
c001c89e:	56                   	push   esi
c001c89f:	53                   	push   ebx
c001c8a0:	83 ec 1c             	sub    esp,0x1c
c001c8a3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c8a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c8ab:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8ae:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c8b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8b6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c8b9:	74 79                	je     c001c934 <SoundPort::buffer32(int*, int)+0x98>
c001c8bb:	85 c0                	test   eax,eax
c001c8bd:	7e 75                	jle    c001c934 <SoundPort::buffer32(int*, int)+0x98>
c001c8bf:	8d 71 01             	lea    esi,[ecx+0x1]
c001c8c2:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c8c5:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c8c8:	8b 37                	mov    esi,DWORD PTR [edi]
c001c8ca:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c8cd:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8d0:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c8d3:	74 6b                	je     c001c940 <SoundPort::buffer32(int*, int)+0xa4>
c001c8d5:	31 f6                	xor    esi,esi
c001c8d7:	eb 1f                	jmp    c001c8f8 <SoundPort::buffer32(int*, int)+0x5c>
c001c8d9:	8d 76 00             	lea    esi,[esi+0x0]
c001c8dc:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c8df:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c8e2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c8e5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c8e8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c8ec:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8ef:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c8f2:	74 1c                	je     c001c910 <SoundPort::buffer32(int*, int)+0x74>
c001c8f4:	89 de                	mov    esi,ebx
c001c8f6:	66 90                	xchg   ax,ax
c001c8f8:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c8fb:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001c8ff:	75 db                	jne    c001c8dc <SoundPort::buffer32(int*, int)+0x40>
c001c901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c905:	83 c4 1c             	add    esp,0x1c
c001c908:	5b                   	pop    ebx
c001c909:	5e                   	pop    esi
c001c90a:	5f                   	pop    edi
c001c90b:	5d                   	pop    ebp
c001c90c:	c3                   	ret    
c001c90d:	8d 76 00             	lea    esi,[esi+0x0]
c001c910:	8d 46 02             	lea    eax,[esi+0x2]
c001c913:	90                   	nop
c001c914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c918:	83 ec 0c             	sub    esp,0xc
c001c91b:	68 b7 4d 02 c0       	push   0xc0024db7
c001c920:	e8 4e 01 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001c925:	83 c4 10             	add    esp,0x10
c001c928:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c92c:	83 c4 1c             	add    esp,0x1c
c001c92f:	5b                   	pop    ebx
c001c930:	5e                   	pop    esi
c001c931:	5f                   	pop    edi
c001c932:	5d                   	pop    ebp
c001c933:	c3                   	ret    
c001c934:	83 c4 1c             	add    esp,0x1c
c001c937:	31 c0                	xor    eax,eax
c001c939:	5b                   	pop    ebx
c001c93a:	5e                   	pop    esi
c001c93b:	5f                   	pop    edi
c001c93c:	5d                   	pop    ebp
c001c93d:	c3                   	ret    
c001c93e:	66 90                	xchg   ax,ax
c001c940:	b8 01 00 00 00       	mov    eax,0x1
c001c945:	eb cd                	jmp    c001c914 <SoundPort::buffer32(int*, int)+0x78>
c001c947:	90                   	nop

c001c948 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c948:	57                   	push   edi
c001c949:	56                   	push   esi
c001c94a:	53                   	push   ebx
c001c94b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c94f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c953:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c959:	39 03                	cmp    DWORD PTR [ebx],eax
c001c95b:	74 13                	je     c001c970 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001c95d:	83 ec 0c             	sub    esp,0xc
c001c960:	68 0c 4e 02 c0       	push   0xc0024e0c
c001c965:	e8 cb 79 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001c96a:	83 c4 10             	add    esp,0x10
c001c96d:	8d 76 00             	lea    esi,[esi+0x0]
c001c970:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c976:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c979:	74 11                	je     c001c98c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001c97b:	83 ec 0c             	sub    esp,0xc
c001c97e:	68 d2 4d 02 c0       	push   0xc0024dd2
c001c983:	e8 ad 79 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001c988:	83 c4 10             	add    esp,0x10
c001c98b:	90                   	nop
c001c98c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c992:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c995:	74 11                	je     c001c9a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001c997:	83 ec 0c             	sub    esp,0xc
c001c99a:	68 d2 4d 02 c0       	push   0xc0024dd2
c001c99f:	e8 91 79 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001c9a4:	83 c4 10             	add    esp,0x10
c001c9a7:	90                   	nop
c001c9a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c9ab:	89 c6                	mov    esi,eax
c001c9ad:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001c9b1:	7e 05                	jle    c001c9b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001c9b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c9b7:	90                   	nop
c001c9b8:	85 f6                	test   esi,esi
c001c9ba:	7e 30                	jle    c001c9ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001c9bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c9c0:	8d 3c 36             	lea    edi,[esi+esi*1]
c001c9c3:	31 c9                	xor    ecx,ecx
c001c9c5:	01 d7                	add    edi,edx
c001c9c7:	90                   	nop
c001c9c8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c9cb:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001c9ce:	85 c0                	test   eax,eax
c001c9d0:	79 06                	jns    c001c9d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001c9d2:	05 ff 7f 00 00       	add    eax,0x7fff
c001c9d7:	90                   	nop
c001c9d8:	c1 f8 0f             	sar    eax,0xf
c001c9db:	83 c1 04             	add    ecx,0x4
c001c9de:	66 01 02             	add    WORD PTR [edx],ax
c001c9e1:	83 c2 02             	add    edx,0x2
c001c9e4:	39 d7                	cmp    edi,edx
c001c9e6:	75 e0                	jne    c001c9c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001c9e8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c9eb:	90                   	nop
c001c9ec:	56                   	push   esi
c001c9ed:	89 c2                	mov    edx,eax
c001c9ef:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001c9f6:	29 f2                	sub    edx,esi
c001c9f8:	52                   	push   edx
c001c9f9:	50                   	push   eax
c001c9fa:	68 2c 4e 02 c0       	push   0xc0024e2c
c001c9ff:	e8 6f 00 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001ca04:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ca07:	50                   	push   eax
c001ca08:	01 f8                	add    eax,edi
c001ca0a:	50                   	push   eax
c001ca0b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca0e:	29 f0                	sub    eax,esi
c001ca10:	c1 e0 02             	shl    eax,0x2
c001ca13:	50                   	push   eax
c001ca14:	68 5c 4e 02 c0       	push   0xc0024e5c
c001ca19:	e8 55 00 ff ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001ca1e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ca21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca24:	83 c4 1c             	add    esp,0x1c
c001ca27:	01 d7                	add    edi,edx
c001ca29:	29 f0                	sub    eax,esi
c001ca2b:	c1 e0 02             	shl    eax,0x2
c001ca2e:	50                   	push   eax
c001ca2f:	57                   	push   edi
c001ca30:	52                   	push   edx
c001ca31:	e8 86 3b fe ff       	call   c00005bc <memmove>
c001ca36:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001ca39:	83 c4 10             	add    esp,0x10
c001ca3c:	89 f0                	mov    eax,esi
c001ca3e:	5b                   	pop    ebx
c001ca3f:	5e                   	pop    esi
c001ca40:	5f                   	pop    edi
c001ca41:	c3                   	ret    
c001ca42:	66 90                	xchg   ax,ax

c001ca44 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ca44:	57                   	push   edi
c001ca45:	56                   	push   esi
c001ca46:	53                   	push   ebx
c001ca47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca4b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ca4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ca53:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001ca59:	39 06                	cmp    DWORD PTR [esi],eax
c001ca5b:	74 13                	je     c001ca70 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001ca5d:	83 ec 0c             	sub    esp,0xc
c001ca60:	68 80 4e 02 c0       	push   0xc0024e80
c001ca65:	e8 cb 78 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001ca6a:	83 c4 10             	add    esp,0x10
c001ca6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ca70:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001ca76:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001ca79:	74 11                	je     c001ca8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001ca7b:	83 ec 0c             	sub    esp,0xc
c001ca7e:	68 ee 4d 02 c0       	push   0xc0024dee
c001ca83:	e8 ad 78 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001ca88:	83 c4 10             	add    esp,0x10
c001ca8b:	90                   	nop
c001ca8c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ca92:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001ca95:	74 11                	je     c001caa8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001ca97:	83 ec 0c             	sub    esp,0xc
c001ca9a:	68 ee 4d 02 c0       	push   0xc0024dee
c001ca9f:	e8 91 78 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001caa4:	83 c4 10             	add    esp,0x10
c001caa7:	90                   	nop
c001caa8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001caab:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001caaf:	7e 07                	jle    c001cab8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001cab1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cab5:	8d 76 00             	lea    esi,[esi+0x0]
c001cab8:	85 ff                	test   edi,edi
c001caba:	7e 1c                	jle    c001cad8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001cabc:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001cac3:	31 c0                	xor    eax,eax
c001cac5:	8d 76 00             	lea    esi,[esi+0x0]
c001cac8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cacb:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001cace:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001cad1:	83 c0 04             	add    eax,0x4
c001cad4:	39 c1                	cmp    ecx,eax
c001cad6:	75 f0                	jne    c001cac8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001cad8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cadb:	50                   	push   eax
c001cadc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cadf:	29 f8                	sub    eax,edi
c001cae1:	c1 e0 02             	shl    eax,0x2
c001cae4:	50                   	push   eax
c001cae5:	8d 04 ba             	lea    eax,[edx+edi*4]
c001cae8:	50                   	push   eax
c001cae9:	52                   	push   edx
c001caea:	e8 cd 3a fe ff       	call   c00005bc <memmove>
c001caef:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001caf2:	83 c4 10             	add    esp,0x10
c001caf5:	89 f8                	mov    eax,edi
c001caf7:	5b                   	pop    ebx
c001caf8:	5e                   	pop    esi
c001caf9:	5f                   	pop    edi
c001cafa:	c3                   	ret    
c001cafb:	90                   	nop

c001cafc <PCI::open(int, int, void*)>:
c001cafc:	83 ec 18             	sub    esp,0x18
c001caff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb03:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cb07:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cb0d:	8b 10                	mov    edx,DWORD PTR [eax]
c001cb0f:	50                   	push   eax
c001cb10:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001cb13:	31 c0                	xor    eax,eax
c001cb15:	83 c4 1c             	add    esp,0x1c
c001cb18:	c3                   	ret    
c001cb19:	90                   	nop

c001cb1a <PCI::close(int, int, void*)>:
c001cb1a:	31 c0                	xor    eax,eax
c001cb1c:	c3                   	ret    
c001cb1d:	90                   	nop

c001cb1e <PCI::PCI()>:
c001cb1e:	83 ec 0c             	sub    esp,0xc
c001cb21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb25:	83 ec 08             	sub    esp,0x8
c001cb28:	68 9f 4e 02 c0       	push   0xc0024e9f
c001cb2d:	50                   	push   eax
c001cb2e:	e8 ed 0b ff ff       	call   c000d720 <Bus::Bus(char const*)>
c001cb33:	83 c4 10             	add    esp,0x10
c001cb36:	ba 88 4f 02 c0       	mov    edx,0xc0024f88
c001cb3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb3f:	89 10                	mov    DWORD PTR [eax],edx
c001cb41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb45:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001cb4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb53:	a3 e0 82 02 c0       	mov    ds:0xc00282e0,eax
c001cb58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb5c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb62:	0f b6 d0             	movzx  edx,al
c001cb65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb69:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001cb70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb74:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb7a:	0f b6 d0             	movzx  edx,al
c001cb7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb81:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001cb86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb8a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb90:	8d 50 01             	lea    edx,[eax+0x1]
c001cb93:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb97:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001cb9d:	0f b6 d0             	movzx  edx,al
c001cba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001cba8:	83 c9 c0             	or     ecx,0xffffffc0
c001cbab:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001cbaf:	90                   	nop
c001cbb0:	83 c4 0c             	add    esp,0xc
c001cbb3:	c3                   	ret    

c001cbb4 <PCI::readBAR8(unsigned int, int)>:
c001cbb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbbc:	f6 c2 01             	test   dl,0x1
c001cbbf:	74 07                	je     c001cbc8 <PCI::readBAR8(unsigned int, int)+0x14>
c001cbc1:	83 e2 fc             	and    edx,0xfffffffc
c001cbc4:	01 c2                	add    edx,eax
c001cbc6:	ec                   	in     al,dx
c001cbc7:	c3                   	ret    
c001cbc8:	83 e2 f0             	and    edx,0xfffffff0
c001cbcb:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001cbce:	c3                   	ret    
c001cbcf:	90                   	nop

c001cbd0 <PCI::readBAR16(unsigned int, int)>:
c001cbd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbd8:	f6 c2 01             	test   dl,0x1
c001cbdb:	74 08                	je     c001cbe5 <PCI::readBAR16(unsigned int, int)+0x15>
c001cbdd:	83 e2 fc             	and    edx,0xfffffffc
c001cbe0:	01 c2                	add    edx,eax
c001cbe2:	66 ed                	in     ax,dx
c001cbe4:	c3                   	ret    
c001cbe5:	83 e2 f0             	and    edx,0xfffffff0
c001cbe8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001cbec:	c3                   	ret    
c001cbed:	90                   	nop

c001cbee <PCI::readBAR32(unsigned int, int)>:
c001cbee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbf6:	f6 c2 01             	test   dl,0x1
c001cbf9:	74 07                	je     c001cc02 <PCI::readBAR32(unsigned int, int)+0x14>
c001cbfb:	83 e2 fc             	and    edx,0xfffffffc
c001cbfe:	01 c2                	add    edx,eax
c001cc00:	ed                   	in     eax,dx
c001cc01:	c3                   	ret    
c001cc02:	83 e2 f0             	and    edx,0xfffffff0
c001cc05:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001cc08:	c3                   	ret    
c001cc09:	90                   	nop

c001cc0a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001cc0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc12:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc16:	f6 c2 01             	test   dl,0x1
c001cc19:	74 07                	je     c001cc22 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001cc1b:	83 e2 fc             	and    edx,0xfffffffc
c001cc1e:	01 ca                	add    edx,ecx
c001cc20:	ee                   	out    dx,al
c001cc21:	c3                   	ret    
c001cc22:	83 e2 f0             	and    edx,0xfffffff0
c001cc25:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001cc28:	c3                   	ret    
c001cc29:	90                   	nop

c001cc2a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001cc2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc32:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc36:	f6 c2 01             	test   dl,0x1
c001cc39:	74 08                	je     c001cc43 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001cc3b:	83 e2 fc             	and    edx,0xfffffffc
c001cc3e:	01 ca                	add    edx,ecx
c001cc40:	66 ef                	out    dx,ax
c001cc42:	c3                   	ret    
c001cc43:	83 e2 f0             	and    edx,0xfffffff0
c001cc46:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001cc4a:	c3                   	ret    
c001cc4b:	90                   	nop

c001cc4c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001cc4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc54:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc58:	f6 c2 01             	test   dl,0x1
c001cc5b:	74 07                	je     c001cc64 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001cc5d:	83 e2 fc             	and    edx,0xfffffffc
c001cc60:	01 ca                	add    edx,ecx
c001cc62:	ef                   	out    dx,eax
c001cc63:	c3                   	ret    
c001cc64:	83 e2 f0             	and    edx,0xfffffff0
c001cc67:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001cc6a:	c3                   	ret    
c001cc6b:	90                   	nop

c001cc6c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cc6c:	55                   	push   ebp
c001cc6d:	57                   	push   edi
c001cc6e:	56                   	push   esi
c001cc6f:	53                   	push   ebx
c001cc70:	83 ec 0c             	sub    esp,0xc
c001cc73:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cc77:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001cc7b:	89 f0                	mov    eax,esi
c001cc7d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cc81:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cc85:	3c 07                	cmp    al,0x7
c001cc87:	76 10                	jbe    c001cc99 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001cc89:	83 ec 0c             	sub    esp,0xc
c001cc8c:	68 a7 4e 02 c0       	push   0xc0024ea7
c001cc91:	e8 9f 76 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001cc96:	83 c4 10             	add    esp,0x10
c001cc99:	80 fb 0f             	cmp    bl,0xf
c001cc9c:	76 10                	jbe    c001ccae <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001cc9e:	83 ec 0c             	sub    esp,0xc
c001cca1:	68 d7 4e 02 c0       	push   0xc0024ed7
c001cca6:	e8 8a 76 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001ccab:	83 c4 10             	add    esp,0x10
c001ccae:	8d 04 36             	lea    eax,[esi+esi*1]
c001ccb1:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ccb6:	83 c8 f0             	or     eax,0xfffffff0
c001ccb9:	ee                   	out    dx,al
c001ccba:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ccbf:	89 e8                	mov    eax,ebp
c001ccc1:	ee                   	out    dx,al
c001ccc2:	83 c4 0c             	add    esp,0xc
c001ccc5:	89 d8                	mov    eax,ebx
c001ccc7:	66 81 e7 fc 00       	and    di,0xfc
c001cccc:	5b                   	pop    ebx
c001cccd:	c1 e0 08             	shl    eax,0x8
c001ccd0:	5e                   	pop    esi
c001ccd1:	09 f8                	or     eax,edi
c001ccd3:	5f                   	pop    edi
c001ccd4:	66 0d 00 c0          	or     ax,0xc000
c001ccd8:	5d                   	pop    ebp
c001ccd9:	c3                   	ret    

c001ccda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ccda:	57                   	push   edi
c001ccdb:	56                   	push   esi
c001ccdc:	53                   	push   ebx
c001ccdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cce1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cce5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001cceb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ccef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ccf3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ccf7:	83 ff 01             	cmp    edi,0x1
c001ccfa:	75 3e                	jne    c001cd3a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001ccfc:	89 de                	mov    esi,ebx
c001ccfe:	0f b6 c0             	movzx  eax,al
c001cd01:	81 e6 fc 00 00 00    	and    esi,0xfc
c001cd07:	c1 e0 10             	shl    eax,0x10
c001cd0a:	0f b6 c9             	movzx  ecx,cl
c001cd0d:	09 f0                	or     eax,esi
c001cd0f:	c1 e1 08             	shl    ecx,0x8
c001cd12:	0f b6 d2             	movzx  edx,dl
c001cd15:	09 c8                	or     eax,ecx
c001cd17:	c1 e2 0b             	shl    edx,0xb
c001cd1a:	09 d0                	or     eax,edx
c001cd1c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cd21:	0d 00 00 00 80       	or     eax,0x80000000
c001cd26:	ef                   	out    dx,eax
c001cd27:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cd2c:	ed                   	in     eax,dx
c001cd2d:	83 e3 02             	and    ebx,0x2
c001cd30:	0f b6 cb             	movzx  ecx,bl
c001cd33:	c1 e1 03             	shl    ecx,0x3
c001cd36:	d3 e8                	shr    eax,cl
c001cd38:	eb 43                	jmp    c001cd7d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cd3a:	83 ff 02             	cmp    edi,0x2
c001cd3d:	75 2c                	jne    c001cd6b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001cd3f:	83 ec 0c             	sub    esp,0xc
c001cd42:	0f b6 c9             	movzx  ecx,cl
c001cd45:	0f b6 d2             	movzx  edx,dl
c001cd48:	0f b6 fb             	movzx  edi,bl
c001cd4b:	0f b6 c0             	movzx  eax,al
c001cd4e:	57                   	push   edi
c001cd4f:	51                   	push   ecx
c001cd50:	52                   	push   edx
c001cd51:	50                   	push   eax
c001cd52:	56                   	push   esi
c001cd53:	e8 14 ff ff ff       	call   c001cc6c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd58:	89 c2                	mov    edx,eax
c001cd5a:	ed                   	in     eax,dx
c001cd5b:	83 e3 02             	and    ebx,0x2
c001cd5e:	83 c4 20             	add    esp,0x20
c001cd61:	0f b6 cb             	movzx  ecx,bl
c001cd64:	c1 e1 03             	shl    ecx,0x3
c001cd67:	d3 e8                	shr    eax,cl
c001cd69:	eb 12                	jmp    c001cd7d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cd6b:	83 ec 0c             	sub    esp,0xc
c001cd6e:	68 07 4f 02 c0       	push   0xc0024f07
c001cd73:	e8 bd 75 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001cd78:	83 c4 10             	add    esp,0x10
c001cd7b:	31 c0                	xor    eax,eax
c001cd7d:	5b                   	pop    ebx
c001cd7e:	5e                   	pop    esi
c001cd7f:	5f                   	pop    edi
c001cd80:	c3                   	ret    
c001cd81:	90                   	nop

c001cd82 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001cd82:	83 ec 18             	sub    esp,0x18
c001cd85:	6a 00                	push   0x0
c001cd87:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd8c:	50                   	push   eax
c001cd8d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd92:	50                   	push   eax
c001cd93:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd98:	50                   	push   eax
c001cd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd9d:	e8 38 ff ff ff       	call   c001ccda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cda2:	83 c4 2c             	add    esp,0x2c
c001cda5:	c3                   	ret    

c001cda6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001cda6:	83 ec 18             	sub    esp,0x18
c001cda9:	6a 0e                	push   0xe
c001cdab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdb0:	50                   	push   eax
c001cdb1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdb6:	50                   	push   eax
c001cdb7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdbc:	50                   	push   eax
c001cdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cdc1:	e8 14 ff ff ff       	call   c001ccda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdc6:	83 c4 2c             	add    esp,0x2c
c001cdc9:	0f b6 c0             	movzx  eax,al
c001cdcc:	c3                   	ret    
c001cdcd:	90                   	nop

c001cdce <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001cdce:	55                   	push   ebp
c001cdcf:	57                   	push   edi
c001cdd0:	56                   	push   esi
c001cdd1:	53                   	push   ebx
c001cdd2:	83 ec 18             	sub    esp,0x18
c001cdd5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001cdda:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001cddf:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001cde4:	6a 0a                	push   0xa
c001cde6:	56                   	push   esi
c001cde7:	55                   	push   ebp
c001cde8:	57                   	push   edi
c001cde9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cded:	e8 e8 fe ff ff       	call   c001ccda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdf2:	83 c4 14             	add    esp,0x14
c001cdf5:	89 c3                	mov    ebx,eax
c001cdf7:	6a 0a                	push   0xa
c001cdf9:	0f b6 db             	movzx  ebx,bl
c001cdfc:	56                   	push   esi
c001cdfd:	55                   	push   ebp
c001cdfe:	57                   	push   edi
c001cdff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce03:	e8 d2 fe ff ff       	call   c001ccda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce08:	83 c4 2c             	add    esp,0x2c
c001ce0b:	25 00 ff 00 00       	and    eax,0xff00
c001ce10:	09 d8                	or     eax,ebx
c001ce12:	5b                   	pop    ebx
c001ce13:	5e                   	pop    esi
c001ce14:	5f                   	pop    edi
c001ce15:	5d                   	pop    ebp
c001ce16:	c3                   	ret    
c001ce17:	90                   	nop

c001ce18 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001ce18:	83 ec 18             	sub    esp,0x18
c001ce1b:	6a 08                	push   0x8
c001ce1d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce22:	50                   	push   eax
c001ce23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce28:	50                   	push   eax
c001ce29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce2e:	50                   	push   eax
c001ce2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce33:	e8 a2 fe ff ff       	call   c001ccda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce38:	83 c4 2c             	add    esp,0x2c
c001ce3b:	0f b6 c4             	movzx  eax,ah
c001ce3e:	c3                   	ret    
c001ce3f:	90                   	nop

c001ce40 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001ce40:	83 ec 18             	sub    esp,0x18
c001ce43:	6a 08                	push   0x8
c001ce45:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce4a:	50                   	push   eax
c001ce4b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce50:	50                   	push   eax
c001ce51:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce56:	50                   	push   eax
c001ce57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce5b:	e8 7a fe ff ff       	call   c001ccda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce60:	83 c4 2c             	add    esp,0x2c
c001ce63:	c3                   	ret    

c001ce64 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001ce64:	83 ec 18             	sub    esp,0x18
c001ce67:	6a 3c                	push   0x3c
c001ce69:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce6e:	50                   	push   eax
c001ce6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce74:	50                   	push   eax
c001ce75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce7a:	50                   	push   eax
c001ce7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce7f:	e8 56 fe ff ff       	call   c001ccda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce84:	83 c4 2c             	add    esp,0x2c
c001ce87:	c3                   	ret    

c001ce88 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001ce88:	83 ec 18             	sub    esp,0x18
c001ce8b:	6a 18                	push   0x18
c001ce8d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce92:	50                   	push   eax
c001ce93:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce98:	50                   	push   eax
c001ce99:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce9e:	50                   	push   eax
c001ce9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cea3:	e8 32 fe ff ff       	call   c001ccda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cea8:	83 c4 2c             	add    esp,0x2c
c001ceab:	0f b6 c4             	movzx  eax,ah
c001ceae:	c3                   	ret    
c001ceaf:	90                   	nop

c001ceb0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ceb0:	55                   	push   ebp
c001ceb1:	57                   	push   edi
c001ceb2:	56                   	push   esi
c001ceb3:	53                   	push   ebx
c001ceb4:	83 ec 28             	sub    esp,0x28
c001ceb7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cebb:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001cec0:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001cec5:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001ceca:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001ced1:	8d 43 12             	lea    eax,[ebx+0x12]
c001ced4:	83 c3 10             	add    ebx,0x10
c001ced7:	0f b6 c0             	movzx  eax,al
c001ceda:	0f b6 db             	movzx  ebx,bl
c001cedd:	50                   	push   eax
c001cede:	51                   	push   ecx
c001cedf:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001cee3:	57                   	push   edi
c001cee4:	55                   	push   ebp
c001cee5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cee9:	e8 ec fd ff ff       	call   c001ccda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ceee:	83 c4 14             	add    esp,0x14
c001cef1:	89 c6                	mov    esi,eax
c001cef3:	53                   	push   ebx
c001cef4:	c1 e6 10             	shl    esi,0x10
c001cef7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cefb:	51                   	push   ecx
c001cefc:	57                   	push   edi
c001cefd:	55                   	push   ebp
c001cefe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cf02:	e8 d3 fd ff ff       	call   c001ccda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf07:	83 c4 3c             	add    esp,0x3c
c001cf0a:	0f b7 c0             	movzx  eax,ax
c001cf0d:	5b                   	pop    ebx
c001cf0e:	09 f0                	or     eax,esi
c001cf10:	5e                   	pop    esi
c001cf11:	5f                   	pop    edi
c001cf12:	5d                   	pop    ebp
c001cf13:	c3                   	ret    

c001cf14 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001cf14:	55                   	push   ebp
c001cf15:	57                   	push   edi
c001cf16:	56                   	push   esi
c001cf17:	53                   	push   ebx
c001cf18:	83 ec 0c             	sub    esp,0xc
c001cf1b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cf1f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cf23:	89 f5                	mov    ebp,esi
c001cf25:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001cf2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf2f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf33:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf37:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf3b:	83 f9 01             	cmp    ecx,0x1
c001cf3e:	75 5d                	jne    c001cf9d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001cf40:	0f b6 c8             	movzx  ecx,al
c001cf43:	0f b6 d2             	movzx  edx,dl
c001cf46:	c1 e1 10             	shl    ecx,0x10
c001cf49:	c1 e2 0b             	shl    edx,0xb
c001cf4c:	89 f0                	mov    eax,esi
c001cf4e:	25 fc 00 00 00       	and    eax,0xfc
c001cf53:	09 c1                	or     ecx,eax
c001cf55:	89 e8                	mov    eax,ebp
c001cf57:	0f b6 c0             	movzx  eax,al
c001cf5a:	c1 e0 08             	shl    eax,0x8
c001cf5d:	09 c1                	or     ecx,eax
c001cf5f:	09 d1                	or     ecx,edx
c001cf61:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cf66:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cf6c:	89 c8                	mov    eax,ecx
c001cf6e:	ef                   	out    dx,eax
c001cf6f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cf74:	ed                   	in     eax,dx
c001cf75:	0f b7 db             	movzx  ebx,bx
c001cf78:	83 e6 02             	and    esi,0x2
c001cf7b:	74 0a                	je     c001cf87 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001cf7d:	0f b7 d0             	movzx  edx,ax
c001cf80:	c1 e3 10             	shl    ebx,0x10
c001cf83:	09 d3                	or     ebx,edx
c001cf85:	eb 05                	jmp    c001cf8c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001cf87:	66 31 c0             	xor    ax,ax
c001cf8a:	09 c3                	or     ebx,eax
c001cf8c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cf91:	89 c8                	mov    eax,ecx
c001cf93:	ef                   	out    dx,eax
c001cf94:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cf99:	89 d8                	mov    eax,ebx
c001cf9b:	eb 41                	jmp    c001cfde <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cf9d:	83 f9 02             	cmp    ecx,0x2
c001cfa0:	75 45                	jne    c001cfe7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001cfa2:	83 ec 0c             	sub    esp,0xc
c001cfa5:	0f b6 d2             	movzx  edx,dl
c001cfa8:	89 f1                	mov    ecx,esi
c001cfaa:	0f b6 c0             	movzx  eax,al
c001cfad:	0f b6 f1             	movzx  esi,cl
c001cfb0:	89 e9                	mov    ecx,ebp
c001cfb2:	56                   	push   esi
c001cfb3:	0f b6 c9             	movzx  ecx,cl
c001cfb6:	51                   	push   ecx
c001cfb7:	52                   	push   edx
c001cfb8:	50                   	push   eax
c001cfb9:	57                   	push   edi
c001cfba:	e8 ad fc ff ff       	call   c001cc6c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cfbf:	89 c2                	mov    edx,eax
c001cfc1:	ed                   	in     eax,dx
c001cfc2:	83 c4 20             	add    esp,0x20
c001cfc5:	0f b7 db             	movzx  ebx,bx
c001cfc8:	f6 c2 02             	test   dl,0x2
c001cfcb:	74 0c                	je     c001cfd9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001cfcd:	0f b7 c8             	movzx  ecx,ax
c001cfd0:	89 d8                	mov    eax,ebx
c001cfd2:	c1 e0 10             	shl    eax,0x10
c001cfd5:	09 c8                	or     eax,ecx
c001cfd7:	eb 05                	jmp    c001cfde <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cfd9:	66 31 c0             	xor    ax,ax
c001cfdc:	09 d8                	or     eax,ebx
c001cfde:	ef                   	out    dx,eax
c001cfdf:	83 c4 0c             	add    esp,0xc
c001cfe2:	5b                   	pop    ebx
c001cfe3:	5e                   	pop    esi
c001cfe4:	5f                   	pop    edi
c001cfe5:	5d                   	pop    ebp
c001cfe6:	c3                   	ret    
c001cfe7:	c7 44 24 20 07 4f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024f07
c001cfef:	83 c4 0c             	add    esp,0xc
c001cff2:	5b                   	pop    ebx
c001cff3:	5e                   	pop    esi
c001cff4:	5f                   	pop    edi
c001cff5:	5d                   	pop    ebp
c001cff6:	e9 3a 73 ff ff       	jmp    c0014335 <Krnl::panic(char const*)>
c001cffb:	90                   	nop

c001cffc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001cffc:	55                   	push   ebp
c001cffd:	57                   	push   edi
c001cffe:	56                   	push   esi
c001cfff:	53                   	push   ebx
c001d000:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d006:	80 3d ec 82 02 c0 00 	cmp    BYTE PTR ds:0xc00282ec,0x0
c001d00d:	0f 85 84 00 00 00    	jne    c001d097 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001d013:	83 ec 0c             	sub    esp,0xc
c001d016:	68 14 01 00 00       	push   0x114
c001d01b:	e8 a3 c9 fe ff       	call   c00099c3 <malloc>
c001d020:	83 c4 0c             	add    esp,0xc
c001d023:	89 c3                	mov    ebx,eax
c001d025:	ff 35 f0 78 02 c0    	push   DWORD PTR ds:0xc00278f0
c001d02b:	68 0d 4f 02 c0       	push   0xc0024f0d
c001d030:	50                   	push   eax
c001d031:	e8 a8 ff fe ff       	call   c000cfde <File::File(char const*, Process*)>
c001d036:	5a                   	pop    edx
c001d037:	59                   	pop    ecx
c001d038:	6a 01                	push   0x1
c001d03a:	53                   	push   ebx
c001d03b:	e8 02 00 ff ff       	call   c000d042 <File::open(FileOpenMode)>
c001d040:	83 c4 0c             	add    esp,0xc
c001d043:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d047:	50                   	push   eax
c001d048:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d04c:	50                   	push   eax
c001d04d:	53                   	push   ebx
c001d04e:	e8 9b 02 ff ff       	call   c000d2ee <File::stat(unsigned long long*, bool*)>
c001d053:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d057:	40                   	inc    eax
c001d058:	89 04 24             	mov    DWORD PTR [esp],eax
c001d05b:	e8 63 c9 fe ff       	call   c00099c3 <malloc>
c001d060:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d064:	a3 e8 82 02 c0       	mov    ds:0xc00282e8,eax
c001d069:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d06d:	5e                   	pop    esi
c001d06e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d070:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d074:	51                   	push   ecx
c001d075:	50                   	push   eax
c001d076:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d07a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d07e:	53                   	push   ebx
c001d07f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d082:	83 c4 14             	add    esp,0x14
c001d085:	53                   	push   ebx
c001d086:	e8 15 00 ff ff       	call   c000d0a0 <File::close()>
c001d08b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d08f:	83 c4 10             	add    esp,0x10
c001d092:	a3 e4 82 02 c0       	mov    ds:0xc00282e4,eax
c001d097:	a1 e4 82 02 c0       	mov    eax,ds:0xc00282e4
c001d09c:	8b 15 e8 82 02 c0    	mov    edx,DWORD PTR ds:0xc00282e8
c001d0a2:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0a5:	31 ff                	xor    edi,edi
c001d0a7:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c001d0af:	31 f6                	xor    esi,esi
c001d0b1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001d0b6:	31 db                	xor    ebx,ebx
c001d0b8:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001d0c0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001d0c5:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c001d0cc:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001d0d0:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001d0d7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d0db:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d0de:	0f 8e 6b 01 00 00    	jle    c001d24f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c001d0e4:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d0e7:	d4 40                	aam    0x40
c001d0e9:	d5 39                	aad    0x39
c001d0eb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d0ef:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001d0f3:	d4 40                	aam    0x40
c001d0f5:	d5 39                	aad    0x39
c001d0f7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d0fb:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001d0ff:	d4 40                	aam    0x40
c001d101:	d5 39                	aad    0x39
c001d103:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d107:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001d10b:	d4 40                	aam    0x40
c001d10d:	d5 39                	aad    0x39
c001d10f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d113:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001d117:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d11b:	3c 56                	cmp    al,0x56
c001d11d:	74 45                	je     c001d164 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001d11f:	d4 40                	aam    0x40
c001d121:	d5 39                	aad    0x39
c001d123:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d126:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001d12a:	0f b6 c9             	movzx  ecx,cl
c001d12d:	c1 e1 04             	shl    ecx,0x4
c001d130:	d4 40                	aam    0x40
c001d132:	d5 39                	aad    0x39
c001d134:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d137:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001d13b:	0f b6 db             	movzx  ebx,bl
c001d13e:	09 cb                	or     ebx,ecx
c001d140:	c1 e3 04             	shl    ebx,0x4
c001d143:	d4 40                	aam    0x40
c001d145:	d5 39                	aad    0x39
c001d147:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d14a:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001d14e:	0f b6 c9             	movzx  ecx,cl
c001d151:	09 cb                	or     ebx,ecx
c001d153:	c1 e3 04             	shl    ebx,0x4
c001d156:	89 d9                	mov    ecx,ebx
c001d158:	d4 40                	aam    0x40
c001d15a:	d5 39                	aad    0x39
c001d15c:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d15f:	0f b6 db             	movzx  ebx,bl
c001d162:	09 cb                	or     ebx,ecx
c001d164:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001d168:	80 f9 44             	cmp    cl,0x44
c001d16b:	74 47                	je     c001d1b4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001d16d:	88 c8                	mov    al,cl
c001d16f:	d4 40                	aam    0x40
c001d171:	d5 39                	aad    0x39
c001d173:	83 e8 30             	sub    eax,0x30
c001d176:	0f b6 e8             	movzx  ebp,al
c001d179:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001d17d:	c1 e5 04             	shl    ebp,0x4
c001d180:	d4 40                	aam    0x40
c001d182:	d5 39                	aad    0x39
c001d184:	83 e8 30             	sub    eax,0x30
c001d187:	0f b6 f0             	movzx  esi,al
c001d18a:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001d18e:	09 ee                	or     esi,ebp
c001d190:	c1 e6 04             	shl    esi,0x4
c001d193:	d4 40                	aam    0x40
c001d195:	d5 39                	aad    0x39
c001d197:	83 e8 30             	sub    eax,0x30
c001d19a:	0f b6 e8             	movzx  ebp,al
c001d19d:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c001d1a1:	09 ee                	or     esi,ebp
c001d1a3:	c1 e6 04             	shl    esi,0x4
c001d1a6:	89 f5                	mov    ebp,esi
c001d1a8:	d4 40                	aam    0x40
c001d1aa:	d5 39                	aad    0x39
c001d1ac:	83 e8 30             	sub    eax,0x30
c001d1af:	0f b6 f0             	movzx  esi,al
c001d1b2:	09 ee                	or     esi,ebp
c001d1b4:	83 c7 10             	add    edi,0x10
c001d1b7:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001d1bb:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d1be:	3c 0a                	cmp    al,0xa
c001d1c0:	74 09                	je     c001d1cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001d1c2:	45                   	inc    ebp
c001d1c3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d1c6:	75 16                	jne    c001d1de <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001d1c8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d1cb:	3c 0a                	cmp    al,0xa
c001d1cd:	0f 94 c0             	sete   al
c001d1d0:	0f b6 c0             	movzx  eax,al
c001d1d3:	01 c7                	add    edi,eax
c001d1d5:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001d1da:	75 0c                	jne    c001d1e8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c001d1dc:	eb 15                	jmp    c001d1f3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c001d1de:	47                   	inc    edi
c001d1df:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001d1e2:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001d1e6:	eb d3                	jmp    c001d1bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001d1e8:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001d1ed:	0f 85 e8 fe ff ff    	jne    c001d0db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d1f3:	80 f9 44             	cmp    cl,0x44
c001d1f6:	74 0b                	je     c001d203 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001d1f8:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001d1fd:	0f 85 d8 fe ff ff    	jne    c001d0db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d203:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d207:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001d20b:	c1 e1 04             	shl    ecx,0x4
c001d20e:	83 e8 30             	sub    eax,0x30
c001d211:	09 c8                	or     eax,ecx
c001d213:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001d217:	0f 85 be fe ff ff    	jne    c001d0db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d21d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001d221:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d225:	c1 e1 04             	shl    ecx,0x4
c001d228:	83 e8 30             	sub    eax,0x30
c001d22b:	09 c8                	or     eax,ecx
c001d22d:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001d231:	0f 85 a4 fe ff ff    	jne    c001d0db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d237:	50                   	push   eax
c001d238:	50                   	push   eax
c001d239:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d23d:	50                   	push   eax
c001d23e:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d245:	e8 f6 34 fe ff       	call   c0000740 <strcpy>
c001d24a:	83 c4 10             	add    esp,0x10
c001d24d:	eb 15                	jmp    c001d264 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001d24f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d256:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d261:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d264:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d26b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d271:	5b                   	pop    ebx
c001d272:	5e                   	pop    esi
c001d273:	5f                   	pop    edi
c001d274:	5d                   	pop    ebp
c001d275:	c3                   	ret    

c001d276 <PCI::checkBus(unsigned char)>:
c001d276:	56                   	push   esi
c001d277:	53                   	push   ebx
c001d278:	31 db                	xor    ebx,ebx
c001d27a:	51                   	push   ecx
c001d27b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d280:	52                   	push   edx
c001d281:	53                   	push   ebx
c001d282:	43                   	inc    ebx
c001d283:	56                   	push   esi
c001d284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d288:	e8 37 03 00 00       	call   c001d5c4 <PCI::checkDevice(unsigned char, unsigned char)>
c001d28d:	83 c4 10             	add    esp,0x10
c001d290:	83 fb 20             	cmp    ebx,0x20
c001d293:	75 eb                	jne    c001d280 <PCI::checkBus(unsigned char)+0xa>
c001d295:	58                   	pop    eax
c001d296:	5b                   	pop    ebx
c001d297:	5e                   	pop    esi
c001d298:	c3                   	ret    
c001d299:	90                   	nop

c001d29a <PCI::foundDevice(PCIDeviceInfo)>:
c001d29a:	55                   	push   ebp
c001d29b:	57                   	push   edi
c001d29c:	56                   	push   esi
c001d29d:	53                   	push   ebx
c001d29e:	83 ec 1c             	sub    esp,0x1c
c001d2a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d2a5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d2ab:	0f 84 52 01 00 00    	je     c001d403 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d2b1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d2b5:	66 81 f9 06 04       	cmp    cx,0x406
c001d2ba:	75 2c                	jne    c001d2e8 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001d2bc:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d2c1:	50                   	push   eax
c001d2c2:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d2c7:	50                   	push   eax
c001d2c8:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d2cd:	50                   	push   eax
c001d2ce:	56                   	push   esi
c001d2cf:	e8 b4 fb ff ff       	call   c001ce88 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d2d4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d2d8:	0f b6 c0             	movzx  eax,al
c001d2db:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d2df:	83 c4 2c             	add    esp,0x2c
c001d2e2:	5b                   	pop    ebx
c001d2e3:	5e                   	pop    esi
c001d2e4:	5f                   	pop    edi
c001d2e5:	5d                   	pop    ebp
c001d2e6:	eb 8e                	jmp    c001d276 <PCI::checkBus(unsigned char)>
c001d2e8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d2ec:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001d2f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d2f6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d2fa:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d2fe:	88 d3                	mov    bl,dl
c001d300:	85 c0                	test   eax,eax
c001d302:	74 33                	je     c001d337 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001d304:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d307:	85 d2                	test   edx,edx
c001d309:	74 28                	je     c001d333 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d30b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d311:	31 ef                	xor    edi,ebp
c001d313:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d319:	75 18                	jne    c001d333 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d31b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d31f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001d325:	75 0c                	jne    c001d333 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d327:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001d32d:	0f 84 d0 00 00 00    	je     c001d403 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d333:	8b 00                	mov    eax,DWORD PTR [eax]
c001d335:	eb c9                	jmp    c001d300 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001d337:	66 81 f9 01 06       	cmp    cx,0x601
c001d33c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001d340:	75 19                	jne    c001d35b <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001d342:	83 ec 0c             	sub    esp,0xc
c001d345:	68 64 01 00 00       	push   0x164
c001d34a:	e8 74 c6 fe ff       	call   c00099c3 <malloc>
c001d34f:	89 c5                	mov    ebp,eax
c001d351:	89 04 24             	mov    DWORD PTR [esp],eax
c001d354:	e8 7b 0e 00 00       	call   c001e1d4 <SATABus::SATABus()>
c001d359:	eb 1e                	jmp    c001d379 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001d35b:	66 81 f9 01 01       	cmp    cx,0x101
c001d360:	75 60                	jne    c001d3c2 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001d362:	83 ec 0c             	sub    esp,0xc
c001d365:	68 70 02 00 00       	push   0x270
c001d36a:	e8 54 c6 fe ff       	call   c00099c3 <malloc>
c001d36f:	89 c5                	mov    ebp,eax
c001d371:	89 04 24             	mov    DWORD PTR [esp],eax
c001d374:	e8 0f 03 00 00       	call   c001d688 <IDE::IDE()>
c001d379:	58                   	pop    eax
c001d37a:	5a                   	pop    edx
c001d37b:	55                   	push   ebp
c001d37c:	56                   	push   esi
c001d37d:	e8 38 0b ff ff       	call   c000deba <Device::addChild(Device*)>
c001d382:	83 ec 1c             	sub    esp,0x1c
c001d385:	b9 09 00 00 00       	mov    ecx,0x9
c001d38a:	fc                   	cld    
c001d38b:	89 e7                	mov    edi,esp
c001d38d:	89 de                	mov    esi,ebx
c001d38f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d391:	55                   	push   ebp
c001d392:	e8 35 0a ff ff       	call   c000ddcc <Device::preOpenPCI(PCIDeviceInfo)>
c001d397:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d39a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001d39e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001d3a6:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001d3ae:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001d3b6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d3b9:	83 c4 4c             	add    esp,0x4c
c001d3bc:	5b                   	pop    ebx
c001d3bd:	5e                   	pop    esi
c001d3be:	5f                   	pop    edi
c001d3bf:	5d                   	pop    ebp
c001d3c0:	ff e0                	jmp    eax
c001d3c2:	83 ec 0c             	sub    esp,0xc
c001d3c5:	68 58 01 00 00       	push   0x158
c001d3ca:	e8 f4 c5 fe ff       	call   c00099c3 <malloc>
c001d3cf:	89 c5                	mov    ebp,eax
c001d3d1:	58                   	pop    eax
c001d3d2:	5a                   	pop    edx
c001d3d3:	68 26 4f 02 c0       	push   0xc0024f26
c001d3d8:	55                   	push   ebp
c001d3d9:	e8 e6 0d ff ff       	call   c000e1c4 <DriverlessDevice::DriverlessDevice(char const*)>
c001d3de:	59                   	pop    ecx
c001d3df:	5f                   	pop    edi
c001d3e0:	55                   	push   ebp
c001d3e1:	56                   	push   esi
c001d3e2:	e8 d3 0a ff ff       	call   c000deba <Device::addChild(Device*)>
c001d3e7:	b9 09 00 00 00       	mov    ecx,0x9
c001d3ec:	fc                   	cld    
c001d3ed:	89 df                	mov    edi,ebx
c001d3ef:	89 de                	mov    esi,ebx
c001d3f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d3f3:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001d3f7:	83 c4 2c             	add    esp,0x2c
c001d3fa:	5b                   	pop    ebx
c001d3fb:	5e                   	pop    esi
c001d3fc:	5f                   	pop    edi
c001d3fd:	5d                   	pop    ebp
c001d3fe:	e9 c9 09 ff ff       	jmp    c000ddcc <Device::preOpenPCI(PCIDeviceInfo)>
c001d403:	83 c4 1c             	add    esp,0x1c
c001d406:	5b                   	pop    ebx
c001d407:	5e                   	pop    esi
c001d408:	5f                   	pop    edi
c001d409:	5d                   	pop    ebp
c001d40a:	c3                   	ret    
c001d40b:	90                   	nop

c001d40c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d40c:	55                   	push   ebp
c001d40d:	57                   	push   edi
c001d40e:	56                   	push   esi
c001d40f:	53                   	push   ebx
c001d410:	83 ec 68             	sub    esp,0x68
c001d413:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d417:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d41e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d422:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d429:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c001d42e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d432:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d439:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001d43e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d442:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c001d447:	6a 0c                	push   0xc
c001d449:	57                   	push   edi
c001d44a:	53                   	push   ebx
c001d44b:	56                   	push   esi
c001d44c:	55                   	push   ebp
c001d44d:	e8 88 f8 ff ff       	call   c001ccda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d452:	83 c4 20             	add    esp,0x20
c001d455:	57                   	push   edi
c001d456:	53                   	push   ebx
c001d457:	56                   	push   esi
c001d458:	55                   	push   ebp
c001d459:	e8 70 f9 ff ff       	call   c001cdce <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d45e:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001d463:	57                   	push   edi
c001d464:	53                   	push   ebx
c001d465:	56                   	push   esi
c001d466:	55                   	push   ebp
c001d467:	e8 f8 f9 ff ff       	call   c001ce64 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d46c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d470:	83 c4 14             	add    esp,0x14
c001d473:	6a 3c                	push   0x3c
c001d475:	57                   	push   edi
c001d476:	53                   	push   ebx
c001d477:	56                   	push   esi
c001d478:	55                   	push   ebp
c001d479:	e8 5c f8 ff ff       	call   c001ccda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d47e:	0f b6 c4             	movzx  eax,ah
c001d481:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d485:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d489:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d48d:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c001d492:	83 c4 20             	add    esp,0x20
c001d495:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d49b:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001d4a2:	74 7c                	je     c001d520 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d4a4:	31 c0                	xor    eax,eax
c001d4a6:	8b 15 08 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026408
c001d4ac:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d4b2:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c001d4b8:	7e 66                	jle    c001d520 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d4ba:	8d 14 c2             	lea    edx,[edx+eax*8]
c001d4bd:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001d4c4:	39 cb                	cmp    ebx,ecx
c001d4c6:	75 55                	jne    c001d51d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d4c8:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001d4cf:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001d4d3:	75 48                	jne    c001d51d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d4d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d4d9:	83 ec 0c             	sub    esp,0xc
c001d4dc:	68 40 4f 02 c0       	push   0xc0024f40
c001d4e1:	e8 8d f5 fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001d4e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4ea:	8b 15 08 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026408
c001d4f0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d4f4:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d4fa:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c001d502:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c001d506:	52                   	push   edx
c001d507:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d50b:	53                   	push   ebx
c001d50c:	68 65 4f 02 c0       	push   0xc0024f65
c001d511:	e8 5d f5 fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001d516:	83 c4 20             	add    esp,0x20
c001d519:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d51d:	40                   	inc    eax
c001d51e:	eb 86                	jmp    c001d4a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c001d520:	31 d2                	xor    edx,edx
c001d522:	83 ec 0c             	sub    esp,0xc
c001d525:	57                   	push   edi
c001d526:	53                   	push   ebx
c001d527:	56                   	push   esi
c001d528:	52                   	push   edx
c001d529:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d52d:	55                   	push   ebp
c001d52e:	e8 7d f9 ff ff       	call   c001ceb0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d533:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d537:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001d53b:	42                   	inc    edx
c001d53c:	83 c4 20             	add    esp,0x20
c001d53f:	83 fa 06             	cmp    edx,0x6
c001d542:	75 de                	jne    c001d522 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c001d544:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d549:	83 ec 0c             	sub    esp,0xc
c001d54c:	86 e0                	xchg   al,ah
c001d54e:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001d553:	6a 02                	push   0x2
c001d555:	57                   	push   edi
c001d556:	53                   	push   ebx
c001d557:	56                   	push   esi
c001d558:	55                   	push   ebp
c001d559:	e8 7c f7 ff ff       	call   c001ccda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d55e:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001d563:	83 c4 20             	add    esp,0x20
c001d566:	57                   	push   edi
c001d567:	53                   	push   ebx
c001d568:	56                   	push   esi
c001d569:	55                   	push   ebp
c001d56a:	e8 a9 f8 ff ff       	call   c001ce18 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d56f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d573:	57                   	push   edi
c001d574:	53                   	push   ebx
c001d575:	56                   	push   esi
c001d576:	55                   	push   ebp
c001d577:	e8 06 f8 ff ff       	call   c001cd82 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d57c:	b9 09 00 00 00       	mov    ecx,0x9
c001d581:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001d586:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001d58a:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d58e:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001d592:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001d596:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d59a:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001d59e:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d5a2:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001d5a6:	83 ec 0c             	sub    esp,0xc
c001d5a9:	fc                   	cld    
c001d5aa:	89 e7                	mov    edi,esp
c001d5ac:	8d 74 24 58          	lea    esi,[esp+0x58]
c001d5b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d5b2:	55                   	push   ebp
c001d5b3:	e8 e2 fc ff ff       	call   c001d29a <PCI::foundDevice(PCIDeviceInfo)>
c001d5b8:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d5be:	5b                   	pop    ebx
c001d5bf:	5e                   	pop    esi
c001d5c0:	5f                   	pop    edi
c001d5c1:	5d                   	pop    ebp
c001d5c2:	c3                   	ret    
c001d5c3:	90                   	nop

c001d5c4 <PCI::checkDevice(unsigned char, unsigned char)>:
c001d5c4:	55                   	push   ebp
c001d5c5:	57                   	push   edi
c001d5c6:	56                   	push   esi
c001d5c7:	53                   	push   ebx
c001d5c8:	83 ec 0c             	sub    esp,0xc
c001d5cb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d5cf:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d5d4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d5d9:	6a 00                	push   0x0
c001d5db:	56                   	push   esi
c001d5dc:	57                   	push   edi
c001d5dd:	55                   	push   ebp
c001d5de:	e8 9f f7 ff ff       	call   c001cd82 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d5e3:	6a 00                	push   0x0
c001d5e5:	56                   	push   esi
c001d5e6:	57                   	push   edi
c001d5e7:	55                   	push   ebp
c001d5e8:	e8 1f fe ff ff       	call   c001d40c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d5ed:	83 c4 20             	add    esp,0x20
c001d5f0:	6a 00                	push   0x0
c001d5f2:	56                   	push   esi
c001d5f3:	57                   	push   edi
c001d5f4:	55                   	push   ebp
c001d5f5:	e8 ac f7 ff ff       	call   c001cda6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d5fa:	83 c4 10             	add    esp,0x10
c001d5fd:	84 c0                	test   al,al
c001d5ff:	79 27                	jns    c001d628 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d601:	bb 01 00 00 00       	mov    ebx,0x1
c001d606:	53                   	push   ebx
c001d607:	56                   	push   esi
c001d608:	57                   	push   edi
c001d609:	55                   	push   ebp
c001d60a:	e8 73 f7 ff ff       	call   c001cd82 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d60f:	83 c4 10             	add    esp,0x10
c001d612:	66 40                	inc    ax
c001d614:	74 0c                	je     c001d622 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001d616:	53                   	push   ebx
c001d617:	56                   	push   esi
c001d618:	57                   	push   edi
c001d619:	55                   	push   ebp
c001d61a:	e8 ed fd ff ff       	call   c001d40c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d61f:	83 c4 10             	add    esp,0x10
c001d622:	43                   	inc    ebx
c001d623:	83 fb 08             	cmp    ebx,0x8
c001d626:	75 de                	jne    c001d606 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d628:	83 c4 0c             	add    esp,0xc
c001d62b:	5b                   	pop    ebx
c001d62c:	5e                   	pop    esi
c001d62d:	5f                   	pop    edi
c001d62e:	5d                   	pop    ebp
c001d62f:	c3                   	ret    

c001d630 <PCI::detect()>:
c001d630:	56                   	push   esi
c001d631:	53                   	push   ebx
c001d632:	53                   	push   ebx
c001d633:	31 db                	xor    ebx,ebx
c001d635:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d639:	6a 00                	push   0x0
c001d63b:	6a 00                	push   0x0
c001d63d:	6a 00                	push   0x0
c001d63f:	56                   	push   esi
c001d640:	e8 61 f7 ff ff       	call   c001cda6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d645:	83 c4 10             	add    esp,0x10
c001d648:	a8 80                	test   al,0x80
c001d64a:	75 21                	jne    c001d66d <PCI::detect()+0x3d>
c001d64c:	51                   	push   ecx
c001d64d:	51                   	push   ecx
c001d64e:	6a 00                	push   0x0
c001d650:	56                   	push   esi
c001d651:	e8 20 fc ff ff       	call   c001d276 <PCI::checkBus(unsigned char)>
c001d656:	83 c4 10             	add    esp,0x10
c001d659:	eb 24                	jmp    c001d67f <PCI::detect()+0x4f>
c001d65b:	52                   	push   edx
c001d65c:	52                   	push   edx
c001d65d:	53                   	push   ebx
c001d65e:	43                   	inc    ebx
c001d65f:	56                   	push   esi
c001d660:	e8 11 fc ff ff       	call   c001d276 <PCI::checkBus(unsigned char)>
c001d665:	83 c4 10             	add    esp,0x10
c001d668:	83 fb 08             	cmp    ebx,0x8
c001d66b:	74 12                	je     c001d67f <PCI::detect()+0x4f>
c001d66d:	53                   	push   ebx
c001d66e:	6a 00                	push   0x0
c001d670:	6a 00                	push   0x0
c001d672:	56                   	push   esi
c001d673:	e8 0a f7 ff ff       	call   c001cd82 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d678:	83 c4 10             	add    esp,0x10
c001d67b:	66 40                	inc    ax
c001d67d:	74 dc                	je     c001d65b <PCI::detect()+0x2b>
c001d67f:	58                   	pop    eax
c001d680:	5b                   	pop    ebx
c001d681:	5e                   	pop    esi
c001d682:	c3                   	ret    
c001d683:	90                   	nop

c001d684 <IDE::close(int, int, void*)>:
c001d684:	83 c8 ff             	or     eax,0xffffffff
c001d687:	c3                   	ret    

c001d688 <IDE::IDE()>:
c001d688:	83 ec 0c             	sub    esp,0xc
c001d68b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d68f:	83 ec 08             	sub    esp,0x8
c001d692:	68 ac 4f 02 c0       	push   0xc0024fac
c001d697:	50                   	push   eax
c001d698:	e8 cb 0b ff ff       	call   c000e268 <HardDiskController::HardDiskController(char const*)>
c001d69d:	83 c4 10             	add    esp,0x10
c001d6a0:	ba 3c 50 02 c0       	mov    edx,0xc002503c
c001d6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6a9:	89 10                	mov    DWORD PTR [eax],edx
c001d6ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6af:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001d6b6:	90                   	nop
c001d6b7:	83 c4 0c             	add    esp,0xc
c001d6ba:	c3                   	ret    
c001d6bb:	90                   	nop

c001d6bc <IDE::prepareInterrupt(unsigned char)>:
c001d6bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d6c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d6c5:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001d6cd:	c3                   	ret    

c001d6ce <selectDrive(unsigned char, unsigned char)>:
c001d6ce:	c3                   	ret    
c001d6cf:	90                   	nop

c001d6d0 <IDE::getBase(unsigned char)>:
c001d6d0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001d6d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6d9:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001d6e1:	c3                   	ret    

c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001d6e2:	55                   	push   ebp
c001d6e3:	57                   	push   edi
c001d6e4:	56                   	push   esi
c001d6e5:	53                   	push   ebx
c001d6e6:	83 ec 1c             	sub    esp,0x1c
c001d6e9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d6ed:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d6f1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001d6f4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d6f8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d6fc:	80 f9 03             	cmp    cl,0x3
c001d6ff:	77 51                	ja     c001d752 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001d701:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d705:	0f b6 f2             	movzx  esi,dl
c001d708:	0f b6 db             	movzx  ebx,bl
c001d70b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d70e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001d712:	83 ca 80             	or     edx,0xffffff80
c001d715:	0f b6 d2             	movzx  edx,dl
c001d718:	52                   	push   edx
c001d719:	6a 0c                	push   0xc
c001d71b:	56                   	push   esi
c001d71c:	57                   	push   edi
c001d71d:	e8 c0 ff ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d722:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001d727:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d72b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001d72f:	ee                   	out    dx,al
c001d730:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001d735:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001d739:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001d73d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d741:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d749:	83 c4 2c             	add    esp,0x2c
c001d74c:	5b                   	pop    ebx
c001d74d:	5e                   	pop    esi
c001d74e:	5f                   	pop    edi
c001d74f:	5d                   	pop    ebp
c001d750:	eb 90                	jmp    c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d752:	80 fb 07             	cmp    bl,0x7
c001d755:	77 12                	ja     c001d769 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001d757:	0f b6 d2             	movzx  edx,dl
c001d75a:	0f b6 db             	movzx  ebx,bl
c001d75d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001d765:	89 da                	mov    edx,ebx
c001d767:	eb 2f                	jmp    c001d798 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d769:	80 fb 0d             	cmp    bl,0xd
c001d76c:	77 13                	ja     c001d781 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001d76e:	0f b6 d2             	movzx  edx,dl
c001d771:	0f b6 db             	movzx  ebx,bl
c001d774:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001d77b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001d77f:	eb 17                	jmp    c001d798 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d781:	80 fb 15             	cmp    bl,0x15
c001d784:	77 13                	ja     c001d799 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d786:	0f b6 d2             	movzx  edx,dl
c001d789:	0f b6 db             	movzx  ebx,bl
c001d78c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001d794:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001d798:	ee                   	out    dx,al
c001d799:	83 c4 1c             	add    esp,0x1c
c001d79c:	5b                   	pop    ebx
c001d79d:	5e                   	pop    esi
c001d79e:	5f                   	pop    edi
c001d79f:	5d                   	pop    ebp
c001d7a0:	c3                   	ret    
c001d7a1:	90                   	nop

c001d7a2 <IDE::read(unsigned char, unsigned char)>:
c001d7a2:	55                   	push   ebp
c001d7a3:	57                   	push   edi
c001d7a4:	56                   	push   esi
c001d7a5:	53                   	push   ebx
c001d7a6:	83 ec 1c             	sub    esp,0x1c
c001d7a9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d7ad:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d7b1:	8d 43 f8             	lea    eax,[ebx-0x8]
c001d7b4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d7b8:	3c 03                	cmp    al,0x3
c001d7ba:	77 43                	ja     c001d7ff <IDE::read(unsigned char, unsigned char)+0x5d>
c001d7bc:	0f b6 f2             	movzx  esi,dl
c001d7bf:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d7c2:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001d7c6:	83 c8 80             	or     eax,0xffffff80
c001d7c9:	0f b6 c0             	movzx  eax,al
c001d7cc:	50                   	push   eax
c001d7cd:	6a 0c                	push   0xc
c001d7cf:	56                   	push   esi
c001d7d0:	57                   	push   edi
c001d7d1:	e8 0c ff ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7d6:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001d7db:	0f b6 c3             	movzx  eax,bl
c001d7de:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001d7e2:	ec                   	in     al,dx
c001d7e3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d7e7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001d7ec:	52                   	push   edx
c001d7ed:	6a 0c                	push   0xc
c001d7ef:	56                   	push   esi
c001d7f0:	57                   	push   edi
c001d7f1:	e8 ec fe ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7f6:	83 c4 20             	add    esp,0x20
c001d7f9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d7fd:	eb 49                	jmp    c001d848 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d7ff:	80 fb 07             	cmp    bl,0x7
c001d802:	77 12                	ja     c001d816 <IDE::read(unsigned char, unsigned char)+0x74>
c001d804:	0f b6 d2             	movzx  edx,dl
c001d807:	0f b6 c3             	movzx  eax,bl
c001d80a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001d812:	89 c2                	mov    edx,eax
c001d814:	eb 31                	jmp    c001d847 <IDE::read(unsigned char, unsigned char)+0xa5>
c001d816:	80 fb 0d             	cmp    bl,0xd
c001d819:	77 13                	ja     c001d82e <IDE::read(unsigned char, unsigned char)+0x8c>
c001d81b:	0f b6 d2             	movzx  edx,dl
c001d81e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001d825:	0f b6 d3             	movzx  edx,bl
c001d828:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d82c:	eb 19                	jmp    c001d847 <IDE::read(unsigned char, unsigned char)+0xa5>
c001d82e:	31 c0                	xor    eax,eax
c001d830:	80 fb 15             	cmp    bl,0x15
c001d833:	77 13                	ja     c001d848 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d835:	0f b6 d2             	movzx  edx,dl
c001d838:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001d840:	0f b6 d3             	movzx  edx,bl
c001d843:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d847:	ec                   	in     al,dx
c001d848:	83 c4 1c             	add    esp,0x1c
c001d84b:	5b                   	pop    ebx
c001d84c:	5e                   	pop    esi
c001d84d:	5f                   	pop    edi
c001d84e:	5d                   	pop    ebp
c001d84f:	c3                   	ret    

c001d850 <IDE::waitInterrupt(unsigned char)>:
c001d850:	55                   	push   ebp
c001d851:	57                   	push   edi
c001d852:	56                   	push   esi
c001d853:	53                   	push   ebx
c001d854:	31 db                	xor    ebx,ebx
c001d856:	83 ec 0c             	sub    esp,0xc
c001d859:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d85d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001d862:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001d86a:	89 e8                	mov    eax,ebp
c001d86c:	84 c0                	test   al,al
c001d86e:	75 30                	jne    c001d8a0 <IDE::waitInterrupt(unsigned char)+0x50>
c001d870:	50                   	push   eax
c001d871:	6a 0c                	push   0xc
c001d873:	56                   	push   esi
c001d874:	57                   	push   edi
c001d875:	e8 28 ff ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001d87a:	83 c4 10             	add    esp,0x10
c001d87d:	a8 01                	test   al,0x1
c001d87f:	75 27                	jne    c001d8a8 <IDE::waitInterrupt(unsigned char)+0x58>
c001d881:	f6 c3 04             	test   bl,0x4
c001d884:	75 12                	jne    c001d898 <IDE::waitInterrupt(unsigned char)+0x48>
c001d886:	83 fb 32             	cmp    ebx,0x32
c001d889:	7e 0d                	jle    c001d898 <IDE::waitInterrupt(unsigned char)+0x48>
c001d88b:	83 ec 0c             	sub    esp,0xc
c001d88e:	6a 64                	push   0x64
c001d890:	e8 6b a9 ff ff       	call   c0018200 <milliTenthSleep(unsigned int)>
c001d895:	83 c4 10             	add    esp,0x10
c001d898:	83 fb 3c             	cmp    ebx,0x3c
c001d89b:	74 0b                	je     c001d8a8 <IDE::waitInterrupt(unsigned char)+0x58>
c001d89d:	43                   	inc    ebx
c001d89e:	eb c2                	jmp    c001d862 <IDE::waitInterrupt(unsigned char)+0x12>
c001d8a0:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001d8a8:	83 c4 0c             	add    esp,0xc
c001d8ab:	89 e8                	mov    eax,ebp
c001d8ad:	5b                   	pop    ebx
c001d8ae:	5e                   	pop    esi
c001d8af:	5f                   	pop    edi
c001d8b0:	5d                   	pop    ebp
c001d8b1:	c3                   	ret    

c001d8b2 <ideChannel0IRQHandler(regs*, void*)>:
c001d8b2:	83 ec 10             	sub    esp,0x10
c001d8b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8b9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001d8c0:	6a 07                	push   0x7
c001d8c2:	6a 00                	push   0x0
c001d8c4:	50                   	push   eax
c001d8c5:	e8 d8 fe ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001d8ca:	83 c4 1c             	add    esp,0x1c
c001d8cd:	c3                   	ret    

c001d8ce <ideChannel1IRQHandler(regs*, void*)>:
c001d8ce:	83 ec 10             	sub    esp,0x10
c001d8d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8d5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001d8dc:	6a 07                	push   0x7
c001d8de:	6a 01                	push   0x1
c001d8e0:	50                   	push   eax
c001d8e1:	e8 bc fe ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001d8e6:	83 c4 1c             	add    esp,0x1c
c001d8e9:	c3                   	ret    

c001d8ea <IDE::enableIRQs(unsigned char, bool)>:
c001d8ea:	57                   	push   edi
c001d8eb:	56                   	push   esi
c001d8ec:	be 04 00 00 00       	mov    esi,0x4
c001d8f1:	53                   	push   ebx
c001d8f2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001d8f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d8fb:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001d900:	0f 94 c0             	sete   al
c001d903:	d1 e0                	shl    eax,1
c001d905:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001d90c:	0f b6 c0             	movzx  eax,al
c001d90f:	50                   	push   eax
c001d910:	6a 0c                	push   0xc
c001d912:	57                   	push   edi
c001d913:	53                   	push   ebx
c001d914:	e8 c9 fd ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d919:	83 c4 10             	add    esp,0x10
c001d91c:	50                   	push   eax
c001d91d:	6a 0c                	push   0xc
c001d91f:	57                   	push   edi
c001d920:	53                   	push   ebx
c001d921:	e8 7c fe ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001d926:	83 c4 10             	add    esp,0x10
c001d929:	4e                   	dec    esi
c001d92a:	75 f0                	jne    c001d91c <IDE::enableIRQs(unsigned char, bool)+0x32>
c001d92c:	5b                   	pop    ebx
c001d92d:	5e                   	pop    esi
c001d92e:	5f                   	pop    edi
c001d92f:	c3                   	ret    

c001d930 <IDE::open(int, int, void*)>:
c001d930:	55                   	push   ebp
c001d931:	57                   	push   edi
c001d932:	56                   	push   esi
c001d933:	53                   	push   ebx
c001d934:	83 ec 1c             	sub    esp,0x1c
c001d937:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d93b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001d944:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001d94d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001d954:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001d95b:	0f 85 b0 02 00 00    	jne    c001dc11 <IDE::open(int, int, void*)+0x2e1>
c001d961:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001d967:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001d96b:	83 e0 7f             	and    eax,0x7f
c001d96e:	3c 05                	cmp    al,0x5
c001d970:	74 04                	je     c001d976 <IDE::open(int, int, void*)+0x46>
c001d972:	3c 0f                	cmp    al,0xf
c001d974:	75 32                	jne    c001d9a8 <IDE::open(int, int, void*)+0x78>
c001d976:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001d97c:	83 e0 fc             	and    eax,0xfffffffc
c001d97f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d986:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001d98c:	83 e0 fc             	and    eax,0xfffffffc
c001d98f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d996:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001d99c:	83 e0 fc             	and    eax,0xfffffffc
c001d99f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d9a6:	eb 14                	jmp    c001d9bc <IDE::open(int, int, void*)+0x8c>
c001d9a8:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001d9b2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001d9bc:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001d9c3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001d9ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d9ce:	89 c6                	mov    esi,eax
c001d9d0:	bf f8 0c 00 00       	mov    edi,0xcf8
c001d9d5:	c1 e6 10             	shl    esi,0x10
c001d9d8:	89 e8                	mov    eax,ebp
c001d9da:	89 fa                	mov    edx,edi
c001d9dc:	c1 e0 0b             	shl    eax,0xb
c001d9df:	09 f0                	or     eax,esi
c001d9e1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001d9e8:	c1 e6 08             	shl    esi,0x8
c001d9eb:	09 c6                	or     esi,eax
c001d9ed:	89 f0                	mov    eax,esi
c001d9ef:	0d 08 00 00 80       	or     eax,0x80000008
c001d9f4:	ef                   	out    dx,eax
c001d9f5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001d9fa:	89 ca                	mov    edx,ecx
c001d9fc:	ed                   	in     eax,dx
c001d9fd:	c1 e8 10             	shr    eax,0x10
c001da00:	3d ff ff 00 00       	cmp    eax,0xffff
c001da05:	0f 84 f5 00 00 00    	je     c001db00 <IDE::open(int, int, void*)+0x1d0>
c001da0b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001da11:	89 fa                	mov    edx,edi
c001da13:	89 f0                	mov    eax,esi
c001da15:	ef                   	out    dx,eax
c001da16:	b0 fe                	mov    al,0xfe
c001da18:	89 ca                	mov    edx,ecx
c001da1a:	ee                   	out    dx,al
c001da1b:	89 f0                	mov    eax,esi
c001da1d:	89 fa                	mov    edx,edi
c001da1f:	ef                   	out    dx,eax
c001da20:	89 ca                	mov    edx,ecx
c001da22:	ed                   	in     eax,dx
c001da23:	3c fe                	cmp    al,0xfe
c001da25:	0f 85 a9 00 00 00    	jne    c001dad4 <IDE::open(int, int, void*)+0x1a4>
c001da2b:	8b 15 08 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026408
c001da31:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001da38:	74 33                	je     c001da6d <IDE::open(int, int, void*)+0x13d>
c001da3a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001da40:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001da44:	40                   	inc    eax
c001da45:	83 ec 0c             	sub    esp,0xc
c001da48:	0f b6 c0             	movzx  eax,al
c001da4b:	50                   	push   eax
c001da4c:	55                   	push   ebp
c001da4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001da51:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001da57:	51                   	push   ecx
c001da58:	e8 0f 44 ff ff       	call   c0011e6c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001da5d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001da62:	83 c4 1c             	add    esp,0x1c
c001da65:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001da6b:	eb 0a                	jmp    c001da77 <IDE::open(int, int, void*)+0x147>
c001da6d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001da77:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001da7e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001da85:	c1 e1 10             	shl    ecx,0x10
c001da88:	c1 e0 08             	shl    eax,0x8
c001da8b:	bf f8 0c 00 00       	mov    edi,0xcf8
c001da90:	09 c1                	or     ecx,eax
c001da92:	89 fa                	mov    edx,edi
c001da94:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001da9b:	c1 e0 0b             	shl    eax,0xb
c001da9e:	09 c1                	or     ecx,eax
c001daa0:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001daa6:	89 c8                	mov    eax,ecx
c001daa8:	ef                   	out    dx,eax
c001daa9:	be fc 0c 00 00       	mov    esi,0xcfc
c001daae:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001dab4:	89 f2                	mov    edx,esi
c001dab6:	ee                   	out    dx,al
c001dab7:	89 c8                	mov    eax,ecx
c001dab9:	89 fa                	mov    edx,edi
c001dabb:	ef                   	out    dx,eax
c001dabc:	89 f2                	mov    edx,esi
c001dabe:	ed                   	in     eax,dx
c001dabf:	0f b6 c0             	movzx  eax,al
c001dac2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001dac8:	74 46                	je     c001db10 <IDE::open(int, int, void*)+0x1e0>
c001daca:	83 ec 0c             	sub    esp,0xc
c001dacd:	68 c4 4f 02 c0       	push   0xc0024fc4
c001dad2:	eb 34                	jmp    c001db08 <IDE::open(int, int, void*)+0x1d8>
c001dad4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001dadd:	75 17                	jne    c001daf6 <IDE::open(int, int, void*)+0x1c6>
c001dadf:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001dae4:	74 07                	je     c001daed <IDE::open(int, int, void*)+0x1bd>
c001dae6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001daeb:	75 09                	jne    c001daf6 <IDE::open(int, int, void*)+0x1c6>
c001daed:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001daf4:	eb 1a                	jmp    c001db10 <IDE::open(int, int, void*)+0x1e0>
c001daf6:	83 ec 0c             	sub    esp,0xc
c001daf9:	68 cc 4f 02 c0       	push   0xc0024fcc
c001dafe:	eb 08                	jmp    c001db08 <IDE::open(int, int, void*)+0x1d8>
c001db00:	83 ec 0c             	sub    esp,0xc
c001db03:	68 fd 4f 02 c0       	push   0xc0024ffd
c001db08:	e8 28 68 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001db0d:	83 c4 10             	add    esp,0x10
c001db10:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001db17:	79 1a                	jns    c001db33 <IDE::open(int, int, void*)+0x203>
c001db19:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001db1f:	83 e0 fc             	and    eax,0xfffffffc
c001db22:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001db29:	83 c0 08             	add    eax,0x8
c001db2c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001db33:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001db39:	89 c2                	mov    edx,eax
c001db3b:	83 e2 0f             	and    edx,0xf
c001db3e:	66 83 fa 08          	cmp    dx,0x8
c001db42:	75 0a                	jne    c001db4e <IDE::open(int, int, void*)+0x21e>
c001db44:	83 e8 02             	sub    eax,0x2
c001db47:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001db4e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001db54:	89 c2                	mov    edx,eax
c001db56:	83 e2 0f             	and    edx,0xf
c001db59:	66 83 fa 08          	cmp    dx,0x8
c001db5d:	75 0a                	jne    c001db69 <IDE::open(int, int, void*)+0x239>
c001db5f:	83 e8 02             	sub    eax,0x2
c001db62:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001db69:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001db70:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001db77:	89 d0                	mov    eax,edx
c001db79:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001db7c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001db80:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001db84:	8d 4a 01             	lea    ecx,[edx+0x1]
c001db87:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001db8c:	0f b6 c9             	movzx  ecx,cl
c001db8f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001db96:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001db99:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001db9d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001dba1:	8d 50 02             	lea    edx,[eax+0x2]
c001dba4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001dba9:	0f b6 d2             	movzx  edx,dl
c001dbac:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001dbb2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dbb5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dbb9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001dbbd:	8d 48 03             	lea    ecx,[eax+0x3]
c001dbc0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dbc5:	0f b6 c9             	movzx  ecx,cl
c001dbc8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001dbce:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dbd1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dbd5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001dbd9:	8d 50 04             	lea    edx,[eax+0x4]
c001dbdc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001dbe2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001dbe7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001dbee:	66 85 f6             	test   si,si
c001dbf1:	74 5b                	je     c001dc4e <IDE::open(int, int, void*)+0x31e>
c001dbf3:	0f b6 d2             	movzx  edx,dl
c001dbf6:	83 c0 05             	add    eax,0x5
c001dbf9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dbfc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dc00:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001dc04:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001dc0a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dc0f:	eb 3d                	jmp    c001dc4e <IDE::open(int, int, void*)+0x31e>
c001dc11:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001dc17:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001dc1e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001dc25:	66 05 06 02          	add    ax,0x206
c001dc29:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dc30:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001dc37:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001dc3e:	66 05 06 02          	add    ax,0x206
c001dc42:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dc49:	e9 e5 fe ff ff       	jmp    c001db33 <IDE::open(int, int, void*)+0x203>
c001dc4e:	50                   	push   eax
c001dc4f:	50                   	push   eax
c001dc50:	6a 00                	push   0x0
c001dc52:	53                   	push   ebx
c001dc53:	e8 64 fa ff ff       	call   c001d6bc <IDE::prepareInterrupt(unsigned char)>
c001dc58:	5a                   	pop    edx
c001dc59:	59                   	pop    ecx
c001dc5a:	6a 01                	push   0x1
c001dc5c:	53                   	push   ebx
c001dc5d:	e8 5a fa ff ff       	call   c001d6bc <IDE::prepareInterrupt(unsigned char)>
c001dc62:	83 c4 0c             	add    esp,0xc
c001dc65:	6a 00                	push   0x0
c001dc67:	6a 00                	push   0x0
c001dc69:	53                   	push   ebx
c001dc6a:	e8 7b fc ff ff       	call   c001d8ea <IDE::enableIRQs(unsigned char, bool)>
c001dc6f:	83 c4 0c             	add    esp,0xc
c001dc72:	6a 00                	push   0x0
c001dc74:	6a 01                	push   0x1
c001dc76:	53                   	push   ebx
c001dc77:	e8 6e fc ff ff       	call   c001d8ea <IDE::enableIRQs(unsigned char, bool)>
c001dc7c:	83 c4 10             	add    esp,0x10
c001dc7f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001dc86:	74 34                	je     c001dcbc <IDE::open(int, int, void*)+0x38c>
c001dc88:	83 ec 0c             	sub    esp,0xc
c001dc8b:	53                   	push   ebx
c001dc8c:	6a 01                	push   0x1
c001dc8e:	68 b2 d8 01 c0       	push   0xc001d8b2
c001dc93:	6a 0e                	push   0xe
c001dc95:	53                   	push   ebx
c001dc96:	e8 97 01 ff ff       	call   c000de32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc9b:	83 c4 14             	add    esp,0x14
c001dc9e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001dca4:	53                   	push   ebx
c001dca5:	6a 01                	push   0x1
c001dca7:	68 ce d8 01 c0       	push   0xc001d8ce
c001dcac:	6a 0f                	push   0xf
c001dcae:	53                   	push   ebx
c001dcaf:	e8 7e 01 ff ff       	call   c000de32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dcb4:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001dcba:	eb 38                	jmp    c001dcf4 <IDE::open(int, int, void*)+0x3c4>
c001dcbc:	83 ec 0c             	sub    esp,0xc
c001dcbf:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001dcc9:	53                   	push   ebx
c001dcca:	6a 00                	push   0x0
c001dccc:	68 b2 d8 01 c0       	push   0xc001d8b2
c001dcd1:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001dcd7:	53                   	push   ebx
c001dcd8:	e8 55 01 ff ff       	call   c000de32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dcdd:	83 c4 14             	add    esp,0x14
c001dce0:	53                   	push   ebx
c001dce1:	6a 00                	push   0x0
c001dce3:	68 ce d8 01 c0       	push   0xc001d8ce
c001dce8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001dcee:	53                   	push   ebx
c001dcef:	e8 3e 01 ff ff       	call   c000de32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dcf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dcf6:	83 c4 20             	add    esp,0x20
c001dcf9:	83 ec 0c             	sub    esp,0xc
c001dcfc:	53                   	push   ebx
c001dcfd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001dd00:	83 c4 0c             	add    esp,0xc
c001dd03:	6a 07                	push   0x7
c001dd05:	6a 00                	push   0x0
c001dd07:	53                   	push   ebx
c001dd08:	e8 95 fa ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001dd0d:	83 c4 0c             	add    esp,0xc
c001dd10:	6a 07                	push   0x7
c001dd12:	6a 01                	push   0x1
c001dd14:	53                   	push   ebx
c001dd15:	e8 88 fa ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001dd1a:	83 c4 0c             	add    esp,0xc
c001dd1d:	6a 01                	push   0x1
c001dd1f:	6a 00                	push   0x0
c001dd21:	53                   	push   ebx
c001dd22:	e8 c3 fb ff ff       	call   c001d8ea <IDE::enableIRQs(unsigned char, bool)>
c001dd27:	83 c4 0c             	add    esp,0xc
c001dd2a:	6a 01                	push   0x1
c001dd2c:	6a 01                	push   0x1
c001dd2e:	53                   	push   ebx
c001dd2f:	e8 b6 fb ff ff       	call   c001d8ea <IDE::enableIRQs(unsigned char, bool)>
c001dd34:	83 c4 2c             	add    esp,0x2c
c001dd37:	31 c0                	xor    eax,eax
c001dd39:	5b                   	pop    ebx
c001dd3a:	5e                   	pop    esi
c001dd3b:	5f                   	pop    edi
c001dd3c:	5d                   	pop    ebp
c001dd3d:	c3                   	ret    

c001dd3e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001dd3e:	55                   	push   ebp
c001dd3f:	57                   	push   edi
c001dd40:	56                   	push   esi
c001dd41:	53                   	push   ebx
c001dd42:	83 ec 1c             	sub    esp,0x1c
c001dd45:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dd49:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dd4d:	8d 50 f8             	lea    edx,[eax-0x8]
c001dd50:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dd54:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001dd58:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dd5c:	80 fa 03             	cmp    dl,0x3
c001dd5f:	77 5d                	ja     c001ddbe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001dd61:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dd65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd69:	0f b6 db             	movzx  ebx,bl
c001dd6c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001dd6f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001dd73:	83 ca 80             	or     edx,0xffffff80
c001dd76:	0f b6 d2             	movzx  edx,dl
c001dd79:	52                   	push   edx
c001dd7a:	6a 0c                	push   0xc
c001dd7c:	53                   	push   ebx
c001dd7d:	56                   	push   esi
c001dd7e:	e8 5f f9 ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd83:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001dd88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dd90:	0f b6 c0             	movzx  eax,al
c001dd93:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001dd97:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dd99:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001dd9e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001dda2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001dda6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ddaa:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ddb2:	83 c4 2c             	add    esp,0x2c
c001ddb5:	5b                   	pop    ebx
c001ddb6:	5e                   	pop    esi
c001ddb7:	5f                   	pop    edi
c001ddb8:	5d                   	pop    ebp
c001ddb9:	e9 24 f9 ff ff       	jmp    c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddbe:	3c 07                	cmp    al,0x7
c001ddc0:	77 10                	ja     c001ddd2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ddc2:	0f b6 db             	movzx  ebx,bl
c001ddc5:	0f b6 d0             	movzx  edx,al
c001ddc8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ddd0:	eb 2d                	jmp    c001ddff <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ddd2:	3c 0d                	cmp    al,0xd
c001ddd4:	77 13                	ja     c001dde9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ddd6:	0f b6 db             	movzx  ebx,bl
c001ddd9:	0f b6 c0             	movzx  eax,al
c001dddc:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001dde3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001dde7:	eb 16                	jmp    c001ddff <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001dde9:	3c 15                	cmp    al,0x15
c001ddeb:	77 14                	ja     c001de01 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001dded:	0f b6 db             	movzx  ebx,bl
c001ddf0:	0f b6 c0             	movzx  eax,al
c001ddf3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ddfb:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ddff:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001de01:	83 c4 1c             	add    esp,0x1c
c001de04:	5b                   	pop    ebx
c001de05:	5e                   	pop    esi
c001de06:	5f                   	pop    edi
c001de07:	5d                   	pop    ebp
c001de08:	c3                   	ret    
c001de09:	90                   	nop

c001de0a <IDE::detect()>:
c001de0a:	55                   	push   ebp
c001de0b:	57                   	push   edi
c001de0c:	56                   	push   esi
c001de0d:	53                   	push   ebx
c001de0e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001de14:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001de1b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001de22:	0f 85 97 02 00 00    	jne    c001e0bf <IDE::detect()+0x2b5>
c001de28:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001de2f:	31 f6                	xor    esi,esi
c001de31:	31 ed                	xor    ebp,ebp
c001de33:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001de3b:	89 e8                	mov    eax,ebp
c001de3d:	c1 e0 06             	shl    eax,0x6
c001de40:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001de48:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001de4c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001de50:	c1 e0 04             	shl    eax,0x4
c001de53:	83 c8 a0             	or     eax,0xffffffa0
c001de56:	0f b6 c0             	movzx  eax,al
c001de59:	50                   	push   eax
c001de5a:	6a 06                	push   0x6
c001de5c:	56                   	push   esi
c001de5d:	53                   	push   ebx
c001de5e:	e8 7f f8 ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de63:	83 c4 0c             	add    esp,0xc
c001de66:	6a 0c                	push   0xc
c001de68:	56                   	push   esi
c001de69:	53                   	push   ebx
c001de6a:	e8 33 f9 ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001de6f:	83 c4 0c             	add    esp,0xc
c001de72:	6a 0c                	push   0xc
c001de74:	56                   	push   esi
c001de75:	53                   	push   ebx
c001de76:	e8 27 f9 ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001de7b:	83 c4 0c             	add    esp,0xc
c001de7e:	6a 0c                	push   0xc
c001de80:	56                   	push   esi
c001de81:	53                   	push   ebx
c001de82:	e8 1b f9 ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001de87:	83 c4 0c             	add    esp,0xc
c001de8a:	6a 0c                	push   0xc
c001de8c:	56                   	push   esi
c001de8d:	53                   	push   ebx
c001de8e:	e8 0f f9 ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001de93:	68 ec 00 00 00       	push   0xec
c001de98:	6a 07                	push   0x7
c001de9a:	56                   	push   esi
c001de9b:	53                   	push   ebx
c001de9c:	e8 41 f8 ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dea1:	83 c4 1c             	add    esp,0x1c
c001dea4:	6a 0c                	push   0xc
c001dea6:	56                   	push   esi
c001dea7:	53                   	push   ebx
c001dea8:	e8 f5 f8 ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001dead:	83 c4 0c             	add    esp,0xc
c001deb0:	6a 0c                	push   0xc
c001deb2:	56                   	push   esi
c001deb3:	53                   	push   ebx
c001deb4:	e8 e9 f8 ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001deb9:	83 c4 0c             	add    esp,0xc
c001debc:	6a 0c                	push   0xc
c001debe:	56                   	push   esi
c001debf:	53                   	push   ebx
c001dec0:	e8 dd f8 ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001dec5:	83 c4 0c             	add    esp,0xc
c001dec8:	6a 0c                	push   0xc
c001deca:	56                   	push   esi
c001decb:	53                   	push   ebx
c001decc:	e8 d1 f8 ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001ded1:	83 c4 0c             	add    esp,0xc
c001ded4:	6a 0c                	push   0xc
c001ded6:	56                   	push   esi
c001ded7:	53                   	push   ebx
c001ded8:	e8 c5 f8 ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001dedd:	83 c4 10             	add    esp,0x10
c001dee0:	84 c0                	test   al,al
c001dee2:	0f 84 5f 01 00 00    	je     c001e047 <IDE::detect()+0x23d>
c001dee8:	31 ff                	xor    edi,edi
c001deea:	50                   	push   eax
c001deeb:	6a 0c                	push   0xc
c001deed:	56                   	push   esi
c001deee:	53                   	push   ebx
c001deef:	e8 ae f8 ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001def4:	83 c4 10             	add    esp,0x10
c001def7:	a8 01                	test   al,0x1
c001def9:	0f 85 69 01 00 00    	jne    c001e068 <IDE::detect()+0x25e>
c001deff:	84 c0                	test   al,al
c001df01:	78 04                	js     c001df07 <IDE::detect()+0xfd>
c001df03:	a8 08                	test   al,0x8
c001df05:	75 23                	jne    c001df2a <IDE::detect()+0x120>
c001df07:	47                   	inc    edi
c001df08:	81 ff 17 01 00 00    	cmp    edi,0x117
c001df0e:	7e da                	jle    c001deea <IDE::detect()+0xe0>
c001df10:	83 ec 0c             	sub    esp,0xc
c001df13:	6a 32                	push   0x32
c001df15:	e8 e6 a2 ff ff       	call   c0018200 <milliTenthSleep(unsigned int)>
c001df1a:	83 c4 10             	add    esp,0x10
c001df1d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001df23:	75 c5                	jne    c001deea <IDE::detect()+0xe0>
c001df25:	e9 3e 01 00 00       	jmp    c001e068 <IDE::detect()+0x25e>
c001df2a:	31 c9                	xor    ecx,ecx
c001df2c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001df30:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001df34:	83 ec 0c             	sub    esp,0xc
c001df37:	68 80 00 00 00       	push   0x80
c001df3c:	57                   	push   edi
c001df3d:	6a 00                	push   0x0
c001df3f:	56                   	push   esi
c001df40:	53                   	push   ebx
c001df41:	e8 f8 fd ff ff       	call   c001dd3e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001df46:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001df4b:	89 e8                	mov    eax,ebp
c001df4d:	89 d1                	mov    ecx,edx
c001df4f:	c1 e0 06             	shl    eax,0x6
c001df52:	01 d8                	add    eax,ebx
c001df54:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001df5b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001df62:	89 f2                	mov    edx,esi
c001df64:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001df6a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001df6e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001df74:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001df78:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001df7f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001df87:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001df8e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001df96:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001df9c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001dfa3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001dfa9:	8d 54 24 58          	lea    edx,[esp+0x58]
c001dfad:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001dfb1:	83 c4 20             	add    esp,0x20
c001dfb4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001dfb7:	83 c0 02             	add    eax,0x2
c001dfba:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001dfc0:	83 c7 02             	add    edi,0x2
c001dfc3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001dfc6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001dfcc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001dfd0:	75 e2                	jne    c001dfb4 <IDE::detect()+0x1aa>
c001dfd2:	89 e8                	mov    eax,ebp
c001dfd4:	c1 e0 06             	shl    eax,0x6
c001dfd7:	01 d8                	add    eax,ebx
c001dfd9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001dfdf:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001dfe6:	66 c1 ea 09          	shr    dx,0x9
c001dfea:	83 e2 01             	and    edx,0x1
c001dfed:	84 c9                	test   cl,cl
c001dfef:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001dff5:	75 22                	jne    c001e019 <IDE::detect()+0x20f>
c001dff7:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001dffe:	74 46                	je     c001e046 <IDE::detect()+0x23c>
c001e000:	83 ec 0c             	sub    esp,0xc
c001e003:	68 7c 01 00 00       	push   0x17c
c001e008:	e8 b6 b9 fe ff       	call   c00099c3 <malloc>
c001e00d:	89 c7                	mov    edi,eax
c001e00f:	89 04 24             	mov    DWORD PTR [esp],eax
c001e012:	e8 13 05 00 00       	call   c001e52a <ATA::ATA()>
c001e017:	eb 17                	jmp    c001e030 <IDE::detect()+0x226>
c001e019:	83 ec 0c             	sub    esp,0xc
c001e01c:	68 80 01 00 00       	push   0x180
c001e021:	e8 9d b9 fe ff       	call   c00099c3 <malloc>
c001e026:	89 c7                	mov    edi,eax
c001e028:	89 04 24             	mov    DWORD PTR [esp],eax
c001e02b:	e8 82 0b 00 00       	call   c001ebb2 <ATAPI::ATAPI()>
c001e030:	5a                   	pop    edx
c001e031:	59                   	pop    ecx
c001e032:	57                   	push   edi
c001e033:	53                   	push   ebx
c001e034:	e8 81 fe fe ff       	call   c000deba <Device::addChild(Device*)>
c001e039:	8b 07                	mov    eax,DWORD PTR [edi]
c001e03b:	53                   	push   ebx
c001e03c:	55                   	push   ebp
c001e03d:	6a 00                	push   0x0
c001e03f:	57                   	push   edi
c001e040:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e043:	83 c4 20             	add    esp,0x20
c001e046:	45                   	inc    ebp
c001e047:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001e04c:	74 0d                	je     c001e05b <IDE::detect()+0x251>
c001e04e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001e056:	e9 e0 fd ff ff       	jmp    c001de3b <IDE::detect()+0x31>
c001e05b:	4e                   	dec    esi
c001e05c:	74 61                	je     c001e0bf <IDE::detect()+0x2b5>
c001e05e:	be 01 00 00 00       	mov    esi,0x1
c001e063:	e9 cb fd ff ff       	jmp    c001de33 <IDE::detect()+0x29>
c001e068:	50                   	push   eax
c001e069:	6a 04                	push   0x4
c001e06b:	56                   	push   esi
c001e06c:	53                   	push   ebx
c001e06d:	e8 30 f7 ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001e072:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e076:	83 c4 0c             	add    esp,0xc
c001e079:	6a 05                	push   0x5
c001e07b:	56                   	push   esi
c001e07c:	53                   	push   ebx
c001e07d:	e8 20 f7 ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001e082:	83 c4 10             	add    esp,0x10
c001e085:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001e089:	80 fa 14             	cmp    dl,0x14
c001e08c:	75 04                	jne    c001e092 <IDE::detect()+0x288>
c001e08e:	3c eb                	cmp    al,0xeb
c001e090:	eb 07                	jmp    c001e099 <IDE::detect()+0x28f>
c001e092:	3c 96                	cmp    al,0x96
c001e094:	75 b1                	jne    c001e047 <IDE::detect()+0x23d>
c001e096:	80 fa 69             	cmp    dl,0x69
c001e099:	75 ac                	jne    c001e047 <IDE::detect()+0x23d>
c001e09b:	68 a1 00 00 00       	push   0xa1
c001e0a0:	6a 07                	push   0x7
c001e0a2:	56                   	push   esi
c001e0a3:	53                   	push   ebx
c001e0a4:	e8 39 f6 ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0a9:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e0b0:	e8 4b a1 ff ff       	call   c0018200 <milliTenthSleep(unsigned int)>
c001e0b5:	83 c4 10             	add    esp,0x10
c001e0b8:	b1 01                	mov    cl,0x1
c001e0ba:	e9 6d fe ff ff       	jmp    c001df2c <IDE::detect()+0x122>
c001e0bf:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e0c5:	5b                   	pop    ebx
c001e0c6:	5e                   	pop    esi
c001e0c7:	5f                   	pop    edi
c001e0c8:	5d                   	pop    ebp
c001e0c9:	c3                   	ret    

c001e0ca <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e0ca:	55                   	push   ebp
c001e0cb:	57                   	push   edi
c001e0cc:	56                   	push   esi
c001e0cd:	53                   	push   ebx
c001e0ce:	83 ec 1c             	sub    esp,0x1c
c001e0d1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e0d5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e0d9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e0dd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e0e1:	88 c3                	mov    bl,al
c001e0e3:	84 c0                	test   al,al
c001e0e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e0e9:	0f 84 81 00 00 00    	je     c001e170 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e0ef:	83 ec 0c             	sub    esp,0xc
c001e0f2:	68 27 50 02 c0       	push   0xc0025027
c001e0f7:	e8 77 e9 fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001e0fc:	83 c4 10             	add    esp,0x10
c001e0ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e103:	3c 01                	cmp    al,0x1
c001e105:	74 63                	je     c001e16a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001e107:	3c 02                	cmp    al,0x2
c001e109:	75 53                	jne    c001e15e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e10b:	d1 e6                	shl    esi,1
c001e10d:	09 ee                	or     esi,ebp
c001e10f:	50                   	push   eax
c001e110:	89 f0                	mov    eax,esi
c001e112:	6a 01                	push   0x1
c001e114:	0f b6 f0             	movzx  esi,al
c001e117:	c1 e6 06             	shl    esi,0x6
c001e11a:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001e122:	50                   	push   eax
c001e123:	57                   	push   edi
c001e124:	e8 79 f6 ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001e129:	83 c4 10             	add    esp,0x10
c001e12c:	a8 01                	test   al,0x1
c001e12e:	74 02                	je     c001e132 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001e130:	b3 07                	mov    bl,0x7
c001e132:	a8 02                	test   al,0x2
c001e134:	74 02                	je     c001e138 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001e136:	b3 03                	mov    bl,0x3
c001e138:	a8 04                	test   al,0x4
c001e13a:	74 02                	je     c001e13e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001e13c:	b3 14                	mov    bl,0x14
c001e13e:	a8 08                	test   al,0x8
c001e140:	74 02                	je     c001e144 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001e142:	b3 03                	mov    bl,0x3
c001e144:	a8 10                	test   al,0x10
c001e146:	74 02                	je     c001e14a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001e148:	b3 15                	mov    bl,0x15
c001e14a:	a8 20                	test   al,0x20
c001e14c:	74 02                	je     c001e150 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001e14e:	b3 03                	mov    bl,0x3
c001e150:	a8 40                	test   al,0x40
c001e152:	74 02                	je     c001e156 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001e154:	b3 16                	mov    bl,0x16
c001e156:	84 c0                	test   al,al
c001e158:	79 16                	jns    c001e170 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e15a:	b3 0d                	mov    bl,0xd
c001e15c:	eb 12                	jmp    c001e170 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e15e:	3c 03                	cmp    al,0x3
c001e160:	74 0c                	je     c001e16e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001e162:	3c 04                	cmp    al,0x4
c001e164:	75 0a                	jne    c001e170 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e166:	b3 08                	mov    bl,0x8
c001e168:	eb 06                	jmp    c001e170 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e16a:	b3 13                	mov    bl,0x13
c001e16c:	eb 02                	jmp    c001e170 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e16e:	b3 17                	mov    bl,0x17
c001e170:	83 c4 1c             	add    esp,0x1c
c001e173:	88 d8                	mov    al,bl
c001e175:	5b                   	pop    ebx
c001e176:	5e                   	pop    esi
c001e177:	5f                   	pop    edi
c001e178:	5d                   	pop    ebp
c001e179:	c3                   	ret    

c001e17a <IDE::polling(unsigned char, unsigned int)>:
c001e17a:	57                   	push   edi
c001e17b:	56                   	push   esi
c001e17c:	53                   	push   ebx
c001e17d:	bb 04 00 00 00       	mov    ebx,0x4
c001e182:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e186:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e18b:	52                   	push   edx
c001e18c:	6a 0c                	push   0xc
c001e18e:	56                   	push   esi
c001e18f:	57                   	push   edi
c001e190:	e8 0d f6 ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001e195:	83 c4 10             	add    esp,0x10
c001e198:	4b                   	dec    ebx
c001e199:	75 f0                	jne    c001e18b <IDE::polling(unsigned char, unsigned int)+0x11>
c001e19b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e1a0:	50                   	push   eax
c001e1a1:	6a 0c                	push   0xc
c001e1a3:	56                   	push   esi
c001e1a4:	57                   	push   edi
c001e1a5:	e8 f8 f5 ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001e1aa:	83 c4 10             	add    esp,0x10
c001e1ad:	a8 01                	test   al,0x1
c001e1af:	75 17                	jne    c001e1c8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e1b1:	a8 20                	test   al,0x20
c001e1b3:	75 0f                	jne    c001e1c4 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e1b5:	4b                   	dec    ebx
c001e1b6:	74 10                	je     c001e1c8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e1b8:	84 c0                	test   al,al
c001e1ba:	78 e4                	js     c001e1a0 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e1bc:	a8 08                	test   al,0x8
c001e1be:	74 e0                	je     c001e1a0 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e1c0:	31 c0                	xor    eax,eax
c001e1c2:	eb 06                	jmp    c001e1ca <IDE::polling(unsigned char, unsigned int)+0x50>
c001e1c4:	b0 01                	mov    al,0x1
c001e1c6:	eb 02                	jmp    c001e1ca <IDE::polling(unsigned char, unsigned int)+0x50>
c001e1c8:	b0 02                	mov    al,0x2
c001e1ca:	5b                   	pop    ebx
c001e1cb:	5e                   	pop    esi
c001e1cc:	5f                   	pop    edi
c001e1cd:	c3                   	ret    

c001e1ce <SATABus::close(int, int, void*)>:
c001e1ce:	31 c0                	xor    eax,eax
c001e1d0:	c3                   	ret    
c001e1d1:	90                   	nop

c001e1d2 <SATABus::detect()>:
c001e1d2:	c3                   	ret    
c001e1d3:	90                   	nop

c001e1d4 <SATABus::SATABus()>:
c001e1d4:	83 ec 0c             	sub    esp,0xc
c001e1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1db:	83 ec 08             	sub    esp,0x8
c001e1de:	68 60 50 02 c0       	push   0xc0025060
c001e1e3:	50                   	push   eax
c001e1e4:	e8 7f 00 ff ff       	call   c000e268 <HardDiskController::HardDiskController(char const*)>
c001e1e9:	83 c4 10             	add    esp,0x10
c001e1ec:	ba b4 50 02 c0       	mov    edx,0xc00250b4
c001e1f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f5:	89 10                	mov    DWORD PTR [eax],edx
c001e1f7:	83 ec 0c             	sub    esp,0xc
c001e1fa:	6a 50                	push   0x50
c001e1fc:	e8 bb bc fe ff       	call   c0009ebc <Phys::allocateContiguousPages(int)>
c001e201:	83 c4 10             	add    esp,0x10
c001e204:	89 c2                	mov    edx,eax
c001e206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e20a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e210:	83 ec 0c             	sub    esp,0xc
c001e213:	6a 50                	push   0x50
c001e215:	e8 87 d4 fe ff       	call   c000b6a1 <Virt::allocateKernelVirtualPages(int)>
c001e21a:	83 c4 10             	add    esp,0x10
c001e21d:	89 c2                	mov    edx,eax
c001e21f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e223:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e229:	a1 30 65 02 c0       	mov    eax,ds:0xc0026530
c001e22e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e232:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e238:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e23c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e242:	83 ec 0c             	sub    esp,0xc
c001e245:	6a 03                	push   0x3
c001e247:	6a 50                	push   0x50
c001e249:	51                   	push   ecx
c001e24a:	52                   	push   edx
c001e24b:	50                   	push   eax
c001e24c:	e8 ed dd fe ff       	call   c000c03e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e251:	83 c4 20             	add    esp,0x20
c001e254:	90                   	nop
c001e255:	83 c4 0c             	add    esp,0xc
c001e258:	c3                   	ret    
c001e259:	90                   	nop

c001e25a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e25a:	83 ec 0c             	sub    esp,0xc
c001e25d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e261:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e264:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e267:	09 c2                	or     edx,eax
c001e269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e273:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e275:	31 c0                	xor    eax,eax
c001e277:	c1 e9 08             	shr    ecx,0x8
c001e27a:	83 e1 0f             	and    ecx,0xf
c001e27d:	39 c8                	cmp    eax,ecx
c001e27f:	74 0a                	je     c001e28b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e281:	f6 c2 01             	test   dl,0x1
c001e284:	74 18                	je     c001e29e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c001e286:	d1 ea                	shr    edx,1
c001e288:	40                   	inc    eax
c001e289:	eb f2                	jmp    c001e27d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c001e28b:	83 ec 0c             	sub    esp,0xc
c001e28e:	68 84 50 02 c0       	push   0xc0025084
c001e293:	e8 9d 60 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001e298:	83 c4 10             	add    esp,0x10
c001e29b:	83 c8 ff             	or     eax,0xffffffff
c001e29e:	83 c4 0c             	add    esp,0xc
c001e2a1:	c3                   	ret    

c001e2a2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e2a2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e2a6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e2a9:	89 c2                	mov    edx,eax
c001e2ab:	c1 ea 08             	shr    edx,0x8
c001e2ae:	83 e2 0f             	and    edx,0xf
c001e2b1:	fe ca                	dec    dl
c001e2b3:	75 31                	jne    c001e2e6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e2b5:	83 e0 0f             	and    eax,0xf
c001e2b8:	3c 03                	cmp    al,0x3
c001e2ba:	75 2a                	jne    c001e2e6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e2bc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e2bf:	b8 02 00 00 00       	mov    eax,0x2
c001e2c4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e2ca:	74 1c                	je     c001e2e8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e2cc:	b8 04 00 00 00       	mov    eax,0x4
c001e2d1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e2d7:	74 0f                	je     c001e2e8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e2d9:	31 c0                	xor    eax,eax
c001e2db:	83 fa 03             	cmp    edx,0x3
c001e2de:	0f 94 c0             	sete   al
c001e2e1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e2e5:	c3                   	ret    
c001e2e6:	31 c0                	xor    eax,eax
c001e2e8:	c3                   	ret    
c001e2e9:	90                   	nop

c001e2ea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e2ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2ee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2f1:	0f ba e2 0f          	bt     edx,0xf
c001e2f5:	72 f7                	jb     c001e2ee <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e2f7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e2fa:	83 ca 10             	or     edx,0x10
c001e2fd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e300:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e303:	83 ca 01             	or     edx,0x1
c001e306:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e309:	c3                   	ret    

c001e30a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e30a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e30e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e311:	83 e2 fe             	and    edx,0xfffffffe
c001e314:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e317:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e31a:	83 e2 ef             	and    edx,0xffffffef
c001e31d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e320:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e323:	0f ba e2 0e          	bt     edx,0xe
c001e327:	72 f7                	jb     c001e320 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e329:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e32c:	0f ba e2 0f          	bt     edx,0xf
c001e330:	72 ee                	jb     c001e320 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e332:	c3                   	ret    
c001e333:	90                   	nop

c001e334 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e334:	55                   	push   ebp
c001e335:	57                   	push   edi
c001e336:	56                   	push   esi
c001e337:	53                   	push   ebx
c001e338:	83 ec 1c             	sub    esp,0x1c
c001e33b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e33f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e343:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e347:	53                   	push   ebx
c001e348:	89 fd                	mov    ebp,edi
c001e34a:	56                   	push   esi
c001e34b:	c1 e5 0a             	shl    ebp,0xa
c001e34e:	e8 b7 ff ff ff       	call   c001e30a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e353:	83 ec 0c             	sub    esp,0xc
c001e356:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e35c:	01 e8                	add    eax,ebp
c001e35e:	89 03                	mov    DWORD PTR [ebx],eax
c001e360:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e362:	68 00 04 00 00       	push   0x400
c001e367:	6a 00                	push   0x0
c001e369:	50                   	push   eax
c001e36a:	e8 15 23 fe ff       	call   c0000684 <memset>
c001e36f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e375:	89 fa                	mov    edx,edi
c001e377:	01 e8                	add    eax,ebp
c001e379:	c1 e7 0d             	shl    edi,0xd
c001e37c:	89 03                	mov    DWORD PTR [ebx],eax
c001e37e:	c1 e2 08             	shl    edx,0x8
c001e381:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e388:	81 c2 00 80 00 00    	add    edx,0x8000
c001e38e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e392:	89 d0                	mov    eax,edx
c001e394:	83 c4 1c             	add    esp,0x1c
c001e397:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e39d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e3a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e3a3:	68 00 01 00 00       	push   0x100
c001e3a8:	6a 00                	push   0x0
c001e3aa:	50                   	push   eax
c001e3ab:	e8 d4 22 fe ff       	call   c0000684 <memset>
c001e3b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e3b4:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e3ba:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001e3c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e3c4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e3c7:	83 c4 10             	add    esp,0x10
c001e3ca:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e3d1:	31 ff                	xor    edi,edi
c001e3d3:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e3d9:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e3df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3e3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e3e9:	83 c5 20             	add    ebp,0x20
c001e3ec:	01 f8                	add    eax,edi
c001e3ee:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e3f1:	52                   	push   edx
c001e3f2:	68 00 01 00 00       	push   0x100
c001e3f7:	6a 00                	push   0x0
c001e3f9:	50                   	push   eax
c001e3fa:	e8 85 22 fe ff       	call   c0000684 <memset>
c001e3ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e403:	83 c4 10             	add    esp,0x10
c001e406:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e40c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e413:	01 f8                	add    eax,edi
c001e415:	81 c7 00 01 00 00    	add    edi,0x100
c001e41b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e41e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e424:	75 b3                	jne    c001e3d9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001e426:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001e42a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001e42e:	83 c4 1c             	add    esp,0x1c
c001e431:	5b                   	pop    ebx
c001e432:	5e                   	pop    esi
c001e433:	5f                   	pop    edi
c001e434:	5d                   	pop    ebp
c001e435:	e9 b0 fe ff ff       	jmp    c001e2ea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001e43a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e43a:	55                   	push   ebp
c001e43b:	57                   	push   edi
c001e43c:	56                   	push   esi
c001e43d:	53                   	push   ebx
c001e43e:	31 db                	xor    ebx,ebx
c001e440:	83 ec 0c             	sub    esp,0xc
c001e443:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e447:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e44b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001e44e:	f7 c7 01 00 00 00    	test   edi,0x1
c001e454:	74 7a                	je     c001e4d0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e456:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e45a:	89 d8                	mov    eax,ebx
c001e45c:	c1 e0 07             	shl    eax,0x7
c001e45f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001e466:	55                   	push   ebp
c001e467:	56                   	push   esi
c001e468:	e8 35 fe ff ff       	call   c001e2a2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e46d:	5a                   	pop    edx
c001e46e:	83 f8 01             	cmp    eax,0x1
c001e471:	59                   	pop    ecx
c001e472:	75 21                	jne    c001e495 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001e474:	50                   	push   eax
c001e475:	53                   	push   ebx
c001e476:	55                   	push   ebp
c001e477:	56                   	push   esi
c001e478:	e8 b7 fe ff ff       	call   c001e334 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e47d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001e484:	e8 3a b5 fe ff       	call   c00099c3 <malloc>
c001e489:	89 c5                	mov    ebp,eax
c001e48b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e48e:	e8 7f 0d 00 00       	call   c001f212 <SATA::SATA()>
c001e493:	eb 24                	jmp    c001e4b9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001e495:	83 f8 04             	cmp    eax,0x4
c001e498:	75 36                	jne    c001e4d0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e49a:	51                   	push   ecx
c001e49b:	53                   	push   ebx
c001e49c:	55                   	push   ebp
c001e49d:	56                   	push   esi
c001e49e:	e8 91 fe ff ff       	call   c001e334 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e4a3:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001e4aa:	e8 14 b5 fe ff       	call   c00099c3 <malloc>
c001e4af:	89 c5                	mov    ebp,eax
c001e4b1:	89 04 24             	mov    DWORD PTR [esp],eax
c001e4b4:	e8 cf 10 00 00       	call   c001f588 <SATAPI::SATAPI()>
c001e4b9:	58                   	pop    eax
c001e4ba:	5a                   	pop    edx
c001e4bb:	55                   	push   ebp
c001e4bc:	56                   	push   esi
c001e4bd:	e8 f8 f9 fe ff       	call   c000deba <Device::addChild(Device*)>
c001e4c2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001e4c5:	56                   	push   esi
c001e4c6:	6a 00                	push   0x0
c001e4c8:	53                   	push   ebx
c001e4c9:	55                   	push   ebp
c001e4ca:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001e4cd:	83 c4 20             	add    esp,0x20
c001e4d0:	d1 ef                	shr    edi,1
c001e4d2:	43                   	inc    ebx
c001e4d3:	83 fb 20             	cmp    ebx,0x20
c001e4d6:	0f 85 72 ff ff ff    	jne    c001e44e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001e4dc:	83 c4 0c             	add    esp,0xc
c001e4df:	5b                   	pop    ebx
c001e4e0:	5e                   	pop    esi
c001e4e1:	5f                   	pop    edi
c001e4e2:	5d                   	pop    ebp
c001e4e3:	c3                   	ret    

c001e4e4 <SATABus::open(int, int, void*)>:
c001e4e4:	83 ec 14             	sub    esp,0x14
c001e4e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e4eb:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001e4f1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e4f7:	52                   	push   edx
c001e4f8:	50                   	push   eax
c001e4f9:	e8 3c ff ff ff       	call   c001e43a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e4fe:	31 c0                	xor    eax,eax
c001e500:	83 c4 1c             	add    esp,0x1c
c001e503:	c3                   	ret    

c001e504 <ATA::close(int, int, void*)>:
c001e504:	83 ec 0c             	sub    esp,0xc
c001e507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e50b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e511:	85 c0                	test   eax,eax
c001e513:	74 0c                	je     c001e521 <ATA::close(int, int, void*)+0x1d>
c001e515:	83 ec 0c             	sub    esp,0xc
c001e518:	8b 10                	mov    edx,DWORD PTR [eax]
c001e51a:	50                   	push   eax
c001e51b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e51e:	83 c4 10             	add    esp,0x10
c001e521:	31 c0                	xor    eax,eax
c001e523:	83 c4 0c             	add    esp,0xc
c001e526:	c3                   	ret    
c001e527:	90                   	nop

c001e528 <ATA::powerSaving(PowerSavingLevel)>:
c001e528:	c3                   	ret    
c001e529:	90                   	nop

c001e52a <ATA::ATA()>:
c001e52a:	83 ec 0c             	sub    esp,0xc
c001e52d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e531:	83 ec 04             	sub    esp,0x4
c001e534:	68 00 02 00 00       	push   0x200
c001e539:	68 a9 51 02 c0       	push   0xc00251a9
c001e53e:	50                   	push   eax
c001e53f:	e8 ae fd fe ff       	call   c000e2f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e544:	83 c4 10             	add    esp,0x10
c001e547:	ba 2c 51 02 c0       	mov    edx,0xc002512c
c001e54c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e550:	89 10                	mov    DWORD PTR [eax],edx
c001e552:	90                   	nop
c001e553:	83 c4 0c             	add    esp,0xc
c001e556:	c3                   	ret    
c001e557:	90                   	nop

c001e558 <ATA::flush(bool)>:
c001e558:	53                   	push   ebx
c001e559:	83 ec 08             	sub    esp,0x8
c001e55c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001e561:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e565:	19 c0                	sbb    eax,eax
c001e567:	83 e0 fd             	and    eax,0xfffffffd
c001e56a:	05 ea 00 00 00       	add    eax,0xea
c001e56f:	50                   	push   eax
c001e570:	6a 07                	push   0x7
c001e572:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e579:	50                   	push   eax
c001e57a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e580:	e8 5d f1 ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e585:	83 c4 0c             	add    esp,0xc
c001e588:	6a 00                	push   0x0
c001e58a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e591:	50                   	push   eax
c001e592:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e598:	e8 dd fb ff ff       	call   c001e17a <IDE::polling(unsigned char, unsigned int)>
c001e59d:	83 c4 18             	add    esp,0x18
c001e5a0:	5b                   	pop    ebx
c001e5a1:	c3                   	ret    

c001e5a2 <ATA::readyForCommand()>:
c001e5a2:	56                   	push   esi
c001e5a3:	53                   	push   ebx
c001e5a4:	53                   	push   ebx
c001e5a5:	31 db                	xor    ebx,ebx
c001e5a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e5ab:	51                   	push   ecx
c001e5ac:	6a 0c                	push   0xc
c001e5ae:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e5b5:	50                   	push   eax
c001e5b6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e5bc:	e8 e1 f1 ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001e5c1:	83 c4 10             	add    esp,0x10
c001e5c4:	a8 88                	test   al,0x88
c001e5c6:	74 1f                	je     c001e5e7 <ATA::readyForCommand()+0x45>
c001e5c8:	43                   	inc    ebx
c001e5c9:	83 fb 63             	cmp    ebx,0x63
c001e5cc:	7e dd                	jle    c001e5ab <ATA::readyForCommand()+0x9>
c001e5ce:	83 ec 0c             	sub    esp,0xc
c001e5d1:	6a 0a                	push   0xa
c001e5d3:	e8 28 9c ff ff       	call   c0018200 <milliTenthSleep(unsigned int)>
c001e5d8:	83 c4 10             	add    esp,0x10
c001e5db:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e5e1:	75 c8                	jne    c001e5ab <ATA::readyForCommand()+0x9>
c001e5e3:	31 c0                	xor    eax,eax
c001e5e5:	eb 02                	jmp    c001e5e9 <ATA::readyForCommand()+0x47>
c001e5e7:	b0 01                	mov    al,0x1
c001e5e9:	5a                   	pop    edx
c001e5ea:	5b                   	pop    ebx
c001e5eb:	5e                   	pop    esi
c001e5ec:	c3                   	ret    
c001e5ed:	90                   	nop

c001e5ee <ATA::access(unsigned long long, int, void*, bool)>:
c001e5ee:	55                   	push   ebp
c001e5ef:	57                   	push   edi
c001e5f0:	56                   	push   esi
c001e5f1:	53                   	push   ebx
c001e5f2:	83 ec 38             	sub    esp,0x38
c001e5f5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001e5f9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e5fd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e605:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e609:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e60d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001e611:	68 d8 50 02 c0       	push   0xc00250d8
c001e616:	e8 58 e4 fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001e61b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e621:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e625:	83 c4 10             	add    esp,0x10
c001e628:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e62e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e632:	c1 e0 06             	shl    eax,0x6
c001e635:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001e63d:	74 5d                	je     c001e69c <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001e63f:	89 fa                	mov    edx,edi
c001e641:	89 f0                	mov    eax,esi
c001e643:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001e647:	c1 ea 1c             	shr    edx,0x1c
c001e64a:	89 d1                	mov    ecx,edx
c001e64c:	09 c1                	or     ecx,eax
c001e64e:	74 25                	je     c001e675 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001e650:	31 ed                	xor    ebp,ebp
c001e652:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001e659:	89 fa                	mov    edx,edi
c001e65b:	89 f0                	mov    eax,esi
c001e65d:	0f ad d0             	shrd   eax,edx,cl
c001e660:	d3 ea                	shr    edx,cl
c001e662:	f6 c1 20             	test   cl,0x20
c001e665:	74 02                	je     c001e669 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001e667:	89 d0                	mov    eax,edx
c001e669:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001e66d:	45                   	inc    ebp
c001e66e:	83 fd 06             	cmp    ebp,0x6
c001e671:	75 df                	jne    c001e652 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001e673:	eb 76                	jmp    c001e6eb <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001e675:	89 f0                	mov    eax,esi
c001e677:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001e67c:	89 fa                	mov    edx,edi
c001e67e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e685:	0f ac d0 10          	shrd   eax,edx,0x10
c001e689:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e68e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e692:	c1 ee 18             	shr    esi,0x18
c001e695:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e69a:	eb 56                	jmp    c001e6f2 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e69c:	6a 00                	push   0x0
c001e69e:	6a 3f                	push   0x3f
c001e6a0:	57                   	push   edi
c001e6a1:	56                   	push   esi
c001e6a2:	e8 8d 29 00 00       	call   c0021034 <__umoddi3>
c001e6a7:	83 c4 10             	add    esp,0x10
c001e6aa:	40                   	inc    eax
c001e6ab:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001e6af:	6a 00                	push   0x0
c001e6b1:	68 f0 03 00 00       	push   0x3f0
c001e6b6:	57                   	push   edi
c001e6b7:	56                   	push   esi
c001e6b8:	e8 77 28 00 00       	call   c0020f34 <__udivdi3>
c001e6bd:	83 c4 10             	add    esp,0x10
c001e6c0:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001e6c5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e6cc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e6d1:	6a 00                	push   0x0
c001e6d3:	6a 3f                	push   0x3f
c001e6d5:	57                   	push   edi
c001e6d6:	56                   	push   esi
c001e6d7:	e8 58 28 00 00       	call   c0020f34 <__udivdi3>
c001e6dc:	83 c4 10             	add    esp,0x10
c001e6df:	89 c6                	mov    esi,eax
c001e6e1:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e6e6:	83 e6 0f             	and    esi,0xf
c001e6e9:	eb 07                	jmp    c001e6f2 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e6eb:	31 f6                	xor    esi,esi
c001e6ed:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001e6f2:	bf 01 00 00 00       	mov    edi,0x1
c001e6f7:	50                   	push   eax
c001e6f8:	6a 00                	push   0x0
c001e6fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e701:	50                   	push   eax
c001e702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e706:	e8 df f1 ff ff       	call   c001d8ea <IDE::enableIRQs(unsigned char, bool)>
c001e70b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e70e:	e8 8f fe ff ff       	call   c001e5a2 <ATA::readyForCommand()>
c001e713:	83 c4 10             	add    esp,0x10
c001e716:	84 c0                	test   al,al
c001e718:	0f 84 bc 02 00 00    	je     c001e9da <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e71e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e724:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e72a:	c1 e0 04             	shl    eax,0x4
c001e72d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001e734:	09 c6                	or     esi,eax
c001e736:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e73b:	75 05                	jne    c001e742 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001e73d:	83 ce a0             	or     esi,0xffffffa0
c001e740:	eb 03                	jmp    c001e745 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001e742:	83 ce e0             	or     esi,0xffffffe0
c001e745:	89 f0                	mov    eax,esi
c001e747:	0f b6 f0             	movzx  esi,al
c001e74a:	56                   	push   esi
c001e74b:	6a 06                	push   0x6
c001e74d:	51                   	push   ecx
c001e74e:	52                   	push   edx
c001e74f:	e8 8e ef ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e754:	83 c4 10             	add    esp,0x10
c001e757:	6a 00                	push   0x0
c001e759:	6a 01                	push   0x1
c001e75b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e762:	50                   	push   eax
c001e763:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e769:	e8 74 ef ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e76e:	83 c4 10             	add    esp,0x10
c001e771:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e776:	75 6e                	jne    c001e7e6 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001e778:	6a 00                	push   0x0
c001e77a:	6a 08                	push   0x8
c001e77c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e783:	50                   	push   eax
c001e784:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e78a:	e8 53 ef ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e78f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e794:	50                   	push   eax
c001e795:	6a 09                	push   0x9
c001e797:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e79e:	50                   	push   eax
c001e79f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7a5:	e8 38 ef ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7aa:	83 c4 20             	add    esp,0x20
c001e7ad:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e7b2:	50                   	push   eax
c001e7b3:	6a 0a                	push   0xa
c001e7b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7bc:	50                   	push   eax
c001e7bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7c3:	e8 1a ef ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7c8:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e7cd:	50                   	push   eax
c001e7ce:	6a 0b                	push   0xb
c001e7d0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7d7:	50                   	push   eax
c001e7d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7de:	e8 ff ee ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7e3:	83 c4 20             	add    esp,0x20
c001e7e6:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e7eb:	50                   	push   eax
c001e7ec:	6a 02                	push   0x2
c001e7ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7f5:	50                   	push   eax
c001e7f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7fc:	e8 e1 ee ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e801:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e806:	50                   	push   eax
c001e807:	6a 03                	push   0x3
c001e809:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e810:	50                   	push   eax
c001e811:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e817:	e8 c6 ee ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e81c:	83 c4 20             	add    esp,0x20
c001e81f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e824:	50                   	push   eax
c001e825:	6a 04                	push   0x4
c001e827:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e82e:	50                   	push   eax
c001e82f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e835:	e8 a8 ee ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e83a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e83f:	50                   	push   eax
c001e840:	6a 05                	push   0x5
c001e842:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e849:	50                   	push   eax
c001e84a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e850:	e8 8d ee ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e855:	83 c4 20             	add    esp,0x20
c001e858:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e85d:	0f 94 c0             	sete   al
c001e860:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e865:	74 09                	je     c001e870 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001e867:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001e86e:	eb 07                	jmp    c001e877 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001e870:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001e877:	0f b6 c0             	movzx  eax,al
c001e87a:	50                   	push   eax
c001e87b:	6a 07                	push   0x7
c001e87d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e884:	50                   	push   eax
c001e885:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e88b:	e8 52 ee ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e890:	c7 04 24 e5 50 02 c0 	mov    DWORD PTR [esp],0xc00250e5
c001e897:	e8 d7 e1 fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001e89c:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001e8a0:	83 c4 10             	add    esp,0x10
c001e8a3:	85 f6                	test   esi,esi
c001e8a5:	0f 84 f7 00 00 00    	je     c001e9a2 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001e8ab:	83 ec 0c             	sub    esp,0xc
c001e8ae:	68 e8 50 02 c0       	push   0xc00250e8
c001e8b3:	e8 bb e1 fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001e8b8:	83 c4 0c             	add    esp,0xc
c001e8bb:	6a 01                	push   0x1
c001e8bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8c4:	50                   	push   eax
c001e8c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8cb:	e8 aa f8 ff ff       	call   c001e17a <IDE::polling(unsigned char, unsigned int)>
c001e8d0:	c7 04 24 eb 50 02 c0 	mov    DWORD PTR [esp],0xc00250eb
c001e8d7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e8db:	e8 93 e1 fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001e8e0:	83 c4 10             	add    esp,0x10
c001e8e3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e8e7:	84 c0                	test   al,al
c001e8e9:	74 2b                	je     c001e916 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001e8eb:	0f b6 f8             	movzx  edi,al
c001e8ee:	57                   	push   edi
c001e8ef:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001e8f6:	50                   	push   eax
c001e8f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8fe:	50                   	push   eax
c001e8ff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e905:	e8 c0 f7 ff ff       	call   c001e0ca <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e90a:	c7 04 24 ee 50 02 c0 	mov    DWORD PTR [esp],0xc00250ee
c001e911:	e9 bc 00 00 00       	jmp    c001e9d2 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001e916:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e91b:	74 50                	je     c001e96d <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001e91d:	83 ec 0c             	sub    esp,0xc
c001e920:	31 ed                	xor    ebp,ebp
c001e922:	68 f9 50 02 c0       	push   0xc00250f9
c001e927:	e8 47 e1 fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001e92c:	83 c4 10             	add    esp,0x10
c001e92f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e933:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001e937:	50                   	push   eax
c001e938:	50                   	push   eax
c001e939:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e940:	50                   	push   eax
c001e941:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e947:	e8 84 ed ff ff       	call   c001d6d0 <IDE::getBase(unsigned char)>
c001e94c:	89 c2                	mov    edx,eax
c001e94e:	89 f8                	mov    eax,edi
c001e950:	66 ef                	out    dx,ax
c001e952:	45                   	inc    ebp
c001e953:	83 c4 10             	add    esp,0x10
c001e956:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001e95c:	75 d1                	jne    c001e92f <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001e95e:	83 ec 0c             	sub    esp,0xc
c001e961:	68 fc 50 02 c0       	push   0xc00250fc
c001e966:	e8 08 e1 fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001e96b:	eb 24                	jmp    c001e991 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001e96d:	51                   	push   ecx
c001e96e:	51                   	push   ecx
c001e96f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e976:	50                   	push   eax
c001e977:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e97d:	e8 4e ed ff ff       	call   c001d6d0 <IDE::getBase(unsigned char)>
c001e982:	b9 00 01 00 00       	mov    ecx,0x100
c001e987:	89 c2                	mov    edx,eax
c001e989:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001e98d:	fc                   	cld    
c001e98e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001e991:	83 c4 10             	add    esp,0x10
c001e994:	4e                   	dec    esi
c001e995:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001e99d:	e9 01 ff ff ff       	jmp    c001e8a3 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001e9a2:	31 ff                	xor    edi,edi
c001e9a4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e9a9:	74 2f                	je     c001e9da <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e9ab:	83 ec 0c             	sub    esp,0xc
c001e9ae:	68 ff 50 02 c0       	push   0xc00250ff
c001e9b3:	e8 bb e0 fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001e9b8:	58                   	pop    eax
c001e9b9:	31 c0                	xor    eax,eax
c001e9bb:	5a                   	pop    edx
c001e9bc:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001e9c1:	0f 94 c0             	sete   al
c001e9c4:	50                   	push   eax
c001e9c5:	53                   	push   ebx
c001e9c6:	e8 8d fb ff ff       	call   c001e558 <ATA::flush(bool)>
c001e9cb:	c7 04 24 02 51 02 c0 	mov    DWORD PTR [esp],0xc0025102
c001e9d2:	e8 9c e0 fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001e9d7:	83 c4 10             	add    esp,0x10
c001e9da:	83 c4 2c             	add    esp,0x2c
c001e9dd:	89 f8                	mov    eax,edi
c001e9df:	5b                   	pop    ebx
c001e9e0:	5e                   	pop    esi
c001e9e1:	5f                   	pop    edi
c001e9e2:	5d                   	pop    ebp
c001e9e3:	c3                   	ret    

c001e9e4 <ATA::read(unsigned long long, int, void*)>:
c001e9e4:	57                   	push   edi
c001e9e5:	b8 04 00 00 00       	mov    eax,0x4
c001e9ea:	56                   	push   esi
c001e9eb:	53                   	push   ebx
c001e9ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e9f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e9f4:	8d 7a ff             	lea    edi,[edx-0x1]
c001e9f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e9fb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e9ff:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ea05:	77 25                	ja     c001ea2c <ATA::read(unsigned long long, int, void*)+0x48>
c001ea07:	b8 06 00 00 00       	mov    eax,0x6
c001ea0c:	85 f6                	test   esi,esi
c001ea0e:	74 1c                	je     c001ea2c <ATA::read(unsigned long long, int, void*)+0x48>
c001ea10:	50                   	push   eax
c001ea11:	50                   	push   eax
c001ea12:	6a 00                	push   0x0
c001ea14:	56                   	push   esi
c001ea15:	52                   	push   edx
c001ea16:	53                   	push   ebx
c001ea17:	51                   	push   ecx
c001ea18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ea1c:	e8 cd fb ff ff       	call   c001e5ee <ATA::access(unsigned long long, int, void*, bool)>
c001ea21:	83 c4 20             	add    esp,0x20
c001ea24:	85 c0                	test   eax,eax
c001ea26:	0f 95 c0             	setne  al
c001ea29:	0f b6 c0             	movzx  eax,al
c001ea2c:	5b                   	pop    ebx
c001ea2d:	5e                   	pop    esi
c001ea2e:	5f                   	pop    edi
c001ea2f:	c3                   	ret    

c001ea30 <ATA::write(unsigned long long, int, void*)>:
c001ea30:	55                   	push   ebp
c001ea31:	57                   	push   edi
c001ea32:	56                   	push   esi
c001ea33:	53                   	push   ebx
c001ea34:	83 ec 18             	sub    esp,0x18
c001ea37:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ea3b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ea3f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ea43:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001ea47:	68 05 51 02 c0       	push   0xc0025105
c001ea4c:	e8 22 e0 fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001ea51:	8d 53 ff             	lea    edx,[ebx-0x1]
c001ea54:	83 c4 10             	add    esp,0x10
c001ea57:	b8 04 00 00 00       	mov    eax,0x4
c001ea5c:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001ea62:	77 25                	ja     c001ea89 <ATA::write(unsigned long long, int, void*)+0x59>
c001ea64:	b8 06 00 00 00       	mov    eax,0x6
c001ea69:	85 f6                	test   esi,esi
c001ea6b:	74 1c                	je     c001ea89 <ATA::write(unsigned long long, int, void*)+0x59>
c001ea6d:	50                   	push   eax
c001ea6e:	50                   	push   eax
c001ea6f:	6a 01                	push   0x1
c001ea71:	56                   	push   esi
c001ea72:	53                   	push   ebx
c001ea73:	55                   	push   ebp
c001ea74:	57                   	push   edi
c001ea75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ea79:	e8 70 fb ff ff       	call   c001e5ee <ATA::access(unsigned long long, int, void*, bool)>
c001ea7e:	83 c4 20             	add    esp,0x20
c001ea81:	85 c0                	test   eax,eax
c001ea83:	0f 95 c0             	setne  al
c001ea86:	0f b6 c0             	movzx  eax,al
c001ea89:	83 c4 0c             	add    esp,0xc
c001ea8c:	5b                   	pop    ebx
c001ea8d:	5e                   	pop    esi
c001ea8e:	5f                   	pop    edi
c001ea8f:	5d                   	pop    ebp
c001ea90:	c3                   	ret    
c001ea91:	90                   	nop

c001ea92 <ATA::detectCHS()>:
c001ea92:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea96:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ea9c:	c1 e0 06             	shl    eax,0x6
c001ea9f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001eaa5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001eaaf:	c7 44 24 04 11 51 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025111
c001eab7:	e9 79 58 ff ff       	jmp    c0014335 <Krnl::panic(char const*)>

c001eabc <ATA::open(int, int, void*)>:
c001eabc:	53                   	push   ebx
c001eabd:	83 ec 08             	sub    esp,0x8
c001eac0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eac4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eac8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eacc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ead2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ead8:	c1 e0 06             	shl    eax,0x6
c001eadb:	01 d0                	add    eax,edx
c001eadd:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001eae4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001eaea:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001eaf1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001eafb:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001eb01:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001eb08:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001eb0f:	75 0c                	jne    c001eb1d <ATA::open(int, int, void*)+0x61>
c001eb11:	83 ec 0c             	sub    esp,0xc
c001eb14:	53                   	push   ebx
c001eb15:	e8 78 ff ff ff       	call   c001ea92 <ATA::detectCHS()>
c001eb1a:	83 c4 10             	add    esp,0x10
c001eb1d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001eb23:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001eb29:	c1 e0 06             	shl    eax,0x6
c001eb2c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001eb33:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001eb3d:	d1 e8                	shr    eax,1
c001eb3f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001eb45:	6a 04                	push   0x4
c001eb47:	6a 0c                	push   0xc
c001eb49:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb50:	50                   	push   eax
c001eb51:	52                   	push   edx
c001eb52:	e8 8b eb ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb57:	90                   	nop
c001eb58:	90                   	nop
c001eb59:	6a 00                	push   0x0
c001eb5b:	6a 0c                	push   0xc
c001eb5d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb64:	50                   	push   eax
c001eb65:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eb6b:	e8 72 eb ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb70:	83 c4 14             	add    esp,0x14
c001eb73:	53                   	push   ebx
c001eb74:	e8 e1 f7 fe ff       	call   c000e35a <PhysicalDisk::startCache()>
c001eb79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eb7c:	e8 15 18 ff ff       	call   c0010396 <createPartitionsForDisk(PhysicalDisk*)>
c001eb81:	31 c0                	xor    eax,eax
c001eb83:	83 c4 18             	add    esp,0x18
c001eb86:	5b                   	pop    ebx
c001eb87:	c3                   	ret    

c001eb88 <ATAPI::write(unsigned long long, int, void*)>:
c001eb88:	b8 03 00 00 00       	mov    eax,0x3
c001eb8d:	c3                   	ret    

c001eb8e <ATAPI::close(int, int, void*)>:
c001eb8e:	83 ec 0c             	sub    esp,0xc
c001eb91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb95:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb9b:	85 c0                	test   eax,eax
c001eb9d:	74 0c                	je     c001ebab <ATAPI::close(int, int, void*)+0x1d>
c001eb9f:	83 ec 0c             	sub    esp,0xc
c001eba2:	8b 10                	mov    edx,DWORD PTR [eax]
c001eba4:	50                   	push   eax
c001eba5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001eba8:	83 c4 10             	add    esp,0x10
c001ebab:	31 c0                	xor    eax,eax
c001ebad:	83 c4 0c             	add    esp,0xc
c001ebb0:	c3                   	ret    
c001ebb1:	90                   	nop

c001ebb2 <ATAPI::ATAPI()>:
c001ebb2:	83 ec 0c             	sub    esp,0xc
c001ebb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb9:	83 ec 04             	sub    esp,0x4
c001ebbc:	68 00 08 00 00       	push   0x800
c001ebc1:	68 49 52 02 c0       	push   0xc0025249
c001ebc6:	50                   	push   eax
c001ebc7:	e8 26 f7 fe ff       	call   c000e2f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ebcc:	83 c4 10             	add    esp,0x10
c001ebcf:	ba 64 51 02 c0       	mov    edx,0xc0025164
c001ebd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd8:	89 10                	mov    DWORD PTR [eax],edx
c001ebda:	90                   	nop
c001ebdb:	83 c4 0c             	add    esp,0xc
c001ebde:	c3                   	ret    
c001ebdf:	90                   	nop

c001ebe0 <ATAPI::readyForCommand()>:
c001ebe0:	56                   	push   esi
c001ebe1:	53                   	push   ebx
c001ebe2:	53                   	push   ebx
c001ebe3:	31 db                	xor    ebx,ebx
c001ebe5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ebe9:	51                   	push   ecx
c001ebea:	6a 0c                	push   0xc
c001ebec:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ebf3:	50                   	push   eax
c001ebf4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ebfa:	e8 a3 eb ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001ebff:	83 c4 10             	add    esp,0x10
c001ec02:	a8 88                	test   al,0x88
c001ec04:	74 1f                	je     c001ec25 <ATAPI::readyForCommand()+0x45>
c001ec06:	43                   	inc    ebx
c001ec07:	83 fb 63             	cmp    ebx,0x63
c001ec0a:	7e dd                	jle    c001ebe9 <ATAPI::readyForCommand()+0x9>
c001ec0c:	83 ec 0c             	sub    esp,0xc
c001ec0f:	6a 0a                	push   0xa
c001ec11:	e8 ea 95 ff ff       	call   c0018200 <milliTenthSleep(unsigned int)>
c001ec16:	83 c4 10             	add    esp,0x10
c001ec19:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ec1f:	75 c8                	jne    c001ebe9 <ATAPI::readyForCommand()+0x9>
c001ec21:	31 c0                	xor    eax,eax
c001ec23:	eb 02                	jmp    c001ec27 <ATAPI::readyForCommand()+0x47>
c001ec25:	b0 01                	mov    al,0x1
c001ec27:	5a                   	pop    edx
c001ec28:	5b                   	pop    ebx
c001ec29:	5e                   	pop    esi
c001ec2a:	c3                   	ret    
c001ec2b:	90                   	nop

c001ec2c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ec2c:	55                   	push   ebp
c001ec2d:	57                   	push   edi
c001ec2e:	56                   	push   esi
c001ec2f:	53                   	push   ebx
c001ec30:	83 ec 20             	sub    esp,0x20
c001ec33:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ec37:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ec3b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ec3f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec43:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ec47:	6a 01                	push   0x1
c001ec49:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec50:	50                   	push   eax
c001ec51:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec57:	e8 8e ec ff ff       	call   c001d8ea <IDE::enableIRQs(unsigned char, bool)>
c001ec5c:	5e                   	pop    esi
c001ec5d:	58                   	pop    eax
c001ec5e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec65:	50                   	push   eax
c001ec66:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec6c:	e8 4b ea ff ff       	call   c001d6bc <IDE::prepareInterrupt(unsigned char)>
c001ec71:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ec74:	e8 67 ff ff ff       	call   c001ebe0 <ATAPI::readyForCommand()>
c001ec79:	83 c4 10             	add    esp,0x10
c001ec7c:	84 c0                	test   al,al
c001ec7e:	75 0a                	jne    c001ec8a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ec80:	bb 01 00 00 00       	mov    ebx,0x1
c001ec85:	e9 57 02 00 00       	jmp    c001eee1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ec8a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ec90:	c1 e0 04             	shl    eax,0x4
c001ec93:	0f b6 c0             	movzx  eax,al
c001ec96:	50                   	push   eax
c001ec97:	6a 06                	push   0x6
c001ec99:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eca0:	50                   	push   eax
c001eca1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eca7:	e8 36 ea ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecac:	6a 00                	push   0x0
c001ecae:	6a 01                	push   0x1
c001ecb0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecb7:	50                   	push   eax
c001ecb8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecbe:	e8 1f ea ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecc3:	83 c4 20             	add    esp,0x20
c001ecc6:	0f b6 c3             	movzx  eax,bl
c001ecc9:	0f b6 df             	movzx  ebx,bh
c001eccc:	50                   	push   eax
c001eccd:	6a 04                	push   0x4
c001eccf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecd6:	50                   	push   eax
c001ecd7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecdd:	e8 00 ea ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ece2:	53                   	push   ebx
c001ece3:	6a 05                	push   0x5
c001ece5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecec:	50                   	push   eax
c001eced:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecf3:	e8 ea e9 ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecf8:	83 c4 20             	add    esp,0x20
c001ecfb:	68 a0 00 00 00       	push   0xa0
c001ed00:	6a 07                	push   0x7
c001ed02:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed09:	50                   	push   eax
c001ed0a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed10:	e8 cd e9 ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed15:	83 c4 0c             	add    esp,0xc
c001ed18:	6a 01                	push   0x1
c001ed1a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed21:	50                   	push   eax
c001ed22:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed28:	e8 4d f4 ff ff       	call   c001e17a <IDE::polling(unsigned char, unsigned int)>
c001ed2d:	83 c4 10             	add    esp,0x10
c001ed30:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ed36:	84 c0                	test   al,al
c001ed38:	74 23                	je     c001ed5d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ed3a:	0f b6 d8             	movzx  ebx,al
c001ed3d:	0f b6 d2             	movzx  edx,dl
c001ed40:	53                   	push   ebx
c001ed41:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ed48:	50                   	push   eax
c001ed49:	52                   	push   edx
c001ed4a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed50:	e8 75 f3 ff ff       	call   c001e0ca <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ed55:	83 c4 10             	add    esp,0x10
c001ed58:	e9 84 01 00 00       	jmp    c001eee1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ed5d:	0f b6 d2             	movzx  edx,dl
c001ed60:	53                   	push   ebx
c001ed61:	53                   	push   ebx
c001ed62:	52                   	push   edx
c001ed63:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed69:	e8 62 e9 ff ff       	call   c001d6d0 <IDE::getBase(unsigned char)>
c001ed6e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ed72:	b9 06 00 00 00       	mov    ecx,0x6
c001ed77:	89 c2                	mov    edx,eax
c001ed79:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ed7c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ed80:	83 c4 10             	add    esp,0x10
c001ed83:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ed89:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ed90:	85 db                	test   ebx,ebx
c001ed92:	0f 84 ec 00 00 00    	je     c001ee84 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ed98:	51                   	push   ecx
c001ed99:	51                   	push   ecx
c001ed9a:	52                   	push   edx
c001ed9b:	50                   	push   eax
c001ed9c:	e8 af ea ff ff       	call   c001d850 <IDE::waitInterrupt(unsigned char)>
c001eda1:	83 c4 10             	add    esp,0x10
c001eda4:	84 c0                	test   al,al
c001eda6:	0f 84 d4 fe ff ff    	je     c001ec80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001edac:	56                   	push   esi
c001edad:	56                   	push   esi
c001edae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001edb5:	50                   	push   eax
c001edb6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edbc:	e8 fb e8 ff ff       	call   c001d6bc <IDE::prepareInterrupt(unsigned char)>
c001edc1:	83 c4 0c             	add    esp,0xc
c001edc4:	6a 04                	push   0x4
c001edc6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001edcd:	50                   	push   eax
c001edce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edd4:	e8 c9 e9 ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001edd9:	83 c4 0c             	add    esp,0xc
c001eddc:	89 c6                	mov    esi,eax
c001edde:	6a 05                	push   0x5
c001ede0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ede7:	50                   	push   eax
c001ede8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edee:	e8 af e9 ff ff       	call   c001d7a2 <IDE::read(unsigned char, unsigned char)>
c001edf3:	89 f1                	mov    ecx,esi
c001edf5:	0f b6 c0             	movzx  eax,al
c001edf8:	0f b6 f1             	movzx  esi,cl
c001edfb:	c1 e0 08             	shl    eax,0x8
c001edfe:	09 c6                	or     esi,eax
c001ee00:	d1 fe                	sar    esi,1
c001ee02:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ee06:	83 c4 10             	add    esp,0x10
c001ee09:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ee0e:	74 41                	je     c001ee51 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ee10:	31 c9                	xor    ecx,ecx
c001ee12:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ee18:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ee1f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ee23:	75 0a                	jne    c001ee2f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ee25:	01 c9                	add    ecx,ecx
c001ee27:	01 cd                	add    ebp,ecx
c001ee29:	4b                   	dec    ebx
c001ee2a:	e9 54 ff ff ff       	jmp    c001ed83 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ee2f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ee34:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ee38:	51                   	push   ecx
c001ee39:	51                   	push   ecx
c001ee3a:	52                   	push   edx
c001ee3b:	50                   	push   eax
c001ee3c:	e8 8f e8 ff ff       	call   c001d6d0 <IDE::getBase(unsigned char)>
c001ee41:	89 c2                	mov    edx,eax
c001ee43:	89 f0                	mov    eax,esi
c001ee45:	66 ef                	out    dx,ax
c001ee47:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ee4b:	83 c4 10             	add    esp,0x10
c001ee4e:	41                   	inc    ecx
c001ee4f:	eb c1                	jmp    c001ee12 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ee51:	31 f6                	xor    esi,esi
c001ee53:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ee59:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ee60:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001ee64:	75 06                	jne    c001ee6c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001ee66:	01 f6                	add    esi,esi
c001ee68:	01 f5                	add    ebp,esi
c001ee6a:	eb bd                	jmp    c001ee29 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001ee6c:	51                   	push   ecx
c001ee6d:	51                   	push   ecx
c001ee6e:	52                   	push   edx
c001ee6f:	50                   	push   eax
c001ee70:	e8 5b e8 ff ff       	call   c001d6d0 <IDE::getBase(unsigned char)>
c001ee75:	89 c2                	mov    edx,eax
c001ee77:	66 ed                	in     ax,dx
c001ee79:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001ee7e:	83 c4 10             	add    esp,0x10
c001ee81:	46                   	inc    esi
c001ee82:	eb cf                	jmp    c001ee53 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001ee84:	51                   	push   ecx
c001ee85:	51                   	push   ecx
c001ee86:	52                   	push   edx
c001ee87:	50                   	push   eax
c001ee88:	e8 c3 e9 ff ff       	call   c001d850 <IDE::waitInterrupt(unsigned char)>
c001ee8d:	83 c4 10             	add    esp,0x10
c001ee90:	84 c0                	test   al,al
c001ee92:	0f 84 e8 fd ff ff    	je     c001ec80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ee98:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ee9d:	52                   	push   edx
c001ee9e:	52                   	push   edx
c001ee9f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eea6:	50                   	push   eax
c001eea7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eead:	e8 0a e8 ff ff       	call   c001d6bc <IDE::prepareInterrupt(unsigned char)>
c001eeb2:	83 c4 10             	add    esp,0x10
c001eeb5:	50                   	push   eax
c001eeb6:	50                   	push   eax
c001eeb7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eebe:	50                   	push   eax
c001eebf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eec5:	e8 06 e8 ff ff       	call   c001d6d0 <IDE::getBase(unsigned char)>
c001eeca:	8d 50 07             	lea    edx,[eax+0x7]
c001eecd:	ec                   	in     al,dx
c001eece:	83 c4 10             	add    esp,0x10
c001eed1:	a8 88                	test   al,0x88
c001eed3:	74 0a                	je     c001eedf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001eed5:	4b                   	dec    ebx
c001eed6:	75 dd                	jne    c001eeb5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001eed8:	bb 02 00 00 00       	mov    ebx,0x2
c001eedd:	eb 02                	jmp    c001eee1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001eedf:	31 db                	xor    ebx,ebx
c001eee1:	83 c4 1c             	add    esp,0x1c
c001eee4:	89 d8                	mov    eax,ebx
c001eee6:	5b                   	pop    ebx
c001eee7:	5e                   	pop    esi
c001eee8:	5f                   	pop    edi
c001eee9:	5d                   	pop    ebp
c001eeea:	c3                   	ret    
c001eeeb:	90                   	nop

c001eeec <ATAPI::diskRemoved()>:
c001eeec:	83 ec 18             	sub    esp,0x18
c001eeef:	68 55 52 02 c0       	push   0xc0025255
c001eef4:	e8 7a db fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001eef9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eefd:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001ef04:	83 c4 1c             	add    esp,0x1c
c001ef07:	c3                   	ret    

c001ef08 <ATAPI::eject()>:
c001ef08:	57                   	push   edi
c001ef09:	b9 03 00 00 00       	mov    ecx,0x3
c001ef0e:	53                   	push   ebx
c001ef0f:	83 ec 14             	sub    esp,0x14
c001ef12:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ef16:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ef1a:	fc                   	cld    
c001ef1b:	31 c0                	xor    eax,eax
c001ef1d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ef1f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ef24:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ef29:	50                   	push   eax
c001ef2a:	50                   	push   eax
c001ef2b:	6a 00                	push   0x0
c001ef2d:	6a 00                	push   0x0
c001ef2f:	6a 00                	push   0x0
c001ef31:	6a 02                	push   0x2
c001ef33:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ef37:	50                   	push   eax
c001ef38:	53                   	push   ebx
c001ef39:	e8 ee fc ff ff       	call   c001ec2c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ef3e:	83 c4 14             	add    esp,0x14
c001ef41:	53                   	push   ebx
c001ef42:	e8 a5 ff ff ff       	call   c001eeec <ATAPI::diskRemoved()>
c001ef47:	83 c4 24             	add    esp,0x24
c001ef4a:	31 c0                	xor    eax,eax
c001ef4c:	5b                   	pop    ebx
c001ef4d:	5f                   	pop    edi
c001ef4e:	c3                   	ret    
c001ef4f:	90                   	nop

c001ef50 <ATAPI::diskInserted()>:
c001ef50:	53                   	push   ebx
c001ef51:	83 ec 14             	sub    esp,0x14
c001ef54:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ef58:	68 6c 52 02 c0       	push   0xc002526c
c001ef5d:	e8 11 db fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001ef62:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001ef69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ef6c:	e8 e9 f3 fe ff       	call   c000e35a <PhysicalDisk::startCache()>
c001ef71:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001ef75:	83 c4 18             	add    esp,0x18
c001ef78:	5b                   	pop    ebx
c001ef79:	e9 18 14 ff ff       	jmp    c0010396 <createPartitionsForDisk(PhysicalDisk*)>

c001ef7e <ATAPI::detectMedia()>:
c001ef7e:	56                   	push   esi
c001ef7f:	53                   	push   ebx
c001ef80:	83 ec 28             	sub    esp,0x28
c001ef83:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ef87:	6a 0c                	push   0xc
c001ef89:	6a 00                	push   0x0
c001ef8b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ef8f:	56                   	push   esi
c001ef90:	e8 ef 16 fe ff       	call   c0000684 <memset>
c001ef95:	58                   	pop    eax
c001ef96:	5a                   	pop    edx
c001ef97:	6a 00                	push   0x0
c001ef99:	6a 00                	push   0x0
c001ef9b:	6a 00                	push   0x0
c001ef9d:	6a 00                	push   0x0
c001ef9f:	56                   	push   esi
c001efa0:	53                   	push   ebx
c001efa1:	e8 86 fc ff ff       	call   c001ec2c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001efa6:	83 c4 1c             	add    esp,0x1c
c001efa9:	6a 0c                	push   0xc
c001efab:	6a 00                	push   0x0
c001efad:	56                   	push   esi
c001efae:	e8 d1 16 fe ff       	call   c0000684 <memset>
c001efb3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001efb8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001efbd:	59                   	pop    ecx
c001efbe:	58                   	pop    eax
c001efbf:	6a 01                	push   0x1
c001efc1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001efc5:	50                   	push   eax
c001efc6:	6a 00                	push   0x0
c001efc8:	6a 12                	push   0x12
c001efca:	56                   	push   esi
c001efcb:	53                   	push   ebx
c001efcc:	e8 5b fc ff ff       	call   c001ec2c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001efd1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001efd5:	83 c4 20             	add    esp,0x20
c001efd8:	83 e0 7f             	and    eax,0x7f
c001efdb:	3c 70                	cmp    al,0x70
c001efdd:	74 15                	je     c001eff4 <ATAPI::detectMedia()+0x76>
c001efdf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001efe6:	75 0c                	jne    c001eff4 <ATAPI::detectMedia()+0x76>
c001efe8:	83 ec 0c             	sub    esp,0xc
c001efeb:	53                   	push   ebx
c001efec:	e8 5f ff ff ff       	call   c001ef50 <ATAPI::diskInserted()>
c001eff1:	83 c4 10             	add    esp,0x10
c001eff4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001eff8:	83 e0 0f             	and    eax,0xf
c001effb:	3c 02                	cmp    al,0x2
c001effd:	75 1b                	jne    c001f01a <ATAPI::detectMedia()+0x9c>
c001efff:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f004:	75 2d                	jne    c001f033 <ATAPI::detectMedia()+0xb5>
c001f006:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f00d:	74 24                	je     c001f033 <ATAPI::detectMedia()+0xb5>
c001f00f:	83 ec 0c             	sub    esp,0xc
c001f012:	53                   	push   ebx
c001f013:	e8 d4 fe ff ff       	call   c001eeec <ATAPI::diskRemoved()>
c001f018:	eb 16                	jmp    c001f030 <ATAPI::detectMedia()+0xb2>
c001f01a:	84 c0                	test   al,al
c001f01c:	75 15                	jne    c001f033 <ATAPI::detectMedia()+0xb5>
c001f01e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f025:	75 0c                	jne    c001f033 <ATAPI::detectMedia()+0xb5>
c001f027:	83 ec 0c             	sub    esp,0xc
c001f02a:	53                   	push   ebx
c001f02b:	e8 20 ff ff ff       	call   c001ef50 <ATAPI::diskInserted()>
c001f030:	83 c4 10             	add    esp,0x10
c001f033:	83 c4 24             	add    esp,0x24
c001f036:	5b                   	pop    ebx
c001f037:	5e                   	pop    esi
c001f038:	c3                   	ret    
c001f039:	90                   	nop

c001f03a <ATAPI::open(int, int, void*)>:
c001f03a:	53                   	push   ebx
c001f03b:	83 ec 08             	sub    esp,0x8
c001f03e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f042:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f046:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f04a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f050:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f056:	c1 e0 06             	shl    eax,0x6
c001f059:	01 d0                	add    eax,edx
c001f05b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001f062:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001f068:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001f06f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f079:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f07f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f086:	6a 04                	push   0x4
c001f088:	6a 0c                	push   0xc
c001f08a:	51                   	push   ecx
c001f08b:	52                   	push   edx
c001f08c:	e8 51 e6 ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f091:	90                   	nop
c001f092:	90                   	nop
c001f093:	6a 00                	push   0x0
c001f095:	6a 0c                	push   0xc
c001f097:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f09e:	50                   	push   eax
c001f09f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f0a5:	e8 38 e6 ff ff       	call   c001d6e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0aa:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f0b1:	83 c4 14             	add    esp,0x14
c001f0b4:	53                   	push   ebx
c001f0b5:	e8 c4 fe ff ff       	call   c001ef7e <ATAPI::detectMedia()>
c001f0ba:	31 c0                	xor    eax,eax
c001f0bc:	83 c4 18             	add    esp,0x18
c001f0bf:	5b                   	pop    ebx
c001f0c0:	c3                   	ret    
c001f0c1:	90                   	nop

c001f0c2 <ATAPI::read(unsigned long long, int, void*)>:
c001f0c2:	55                   	push   ebp
c001f0c3:	57                   	push   edi
c001f0c4:	56                   	push   esi
c001f0c5:	53                   	push   ebx
c001f0c6:	83 ec 1c             	sub    esp,0x1c
c001f0c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f0cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f0d1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f0d5:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f0dc:	74 41                	je     c001f11f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001f0de:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f0e2:	b9 03 00 00 00       	mov    ecx,0x3
c001f0e7:	fc                   	cld    
c001f0e8:	31 c0                	xor    eax,eax
c001f0ea:	86 fb                	xchg   bl,bh
c001f0ec:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f0ee:	c1 c3 10             	rol    ebx,0x10
c001f0f1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f0f6:	89 e8                	mov    eax,ebp
c001f0f8:	86 fb                	xchg   bl,bh
c001f0fa:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f0fe:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001f102:	50                   	push   eax
c001f103:	50                   	push   eax
c001f104:	55                   	push   ebp
c001f105:	c1 e5 0b             	shl    ebp,0xb
c001f108:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f10c:	6a 00                	push   0x0
c001f10e:	55                   	push   ebp
c001f10f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f113:	50                   	push   eax
c001f114:	56                   	push   esi
c001f115:	e8 12 fb ff ff       	call   c001ec2c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f11a:	83 c4 20             	add    esp,0x20
c001f11d:	eb 1a                	jmp    c001f139 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001f11f:	83 ec 0c             	sub    esp,0xc
c001f122:	56                   	push   esi
c001f123:	e8 56 fe ff ff       	call   c001ef7e <ATAPI::detectMedia()>
c001f128:	83 c4 10             	add    esp,0x10
c001f12b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f132:	75 aa                	jne    c001f0de <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f134:	b8 02 00 00 00       	mov    eax,0x2
c001f139:	83 c4 1c             	add    esp,0x1c
c001f13c:	5b                   	pop    ebx
c001f13d:	5e                   	pop    esi
c001f13e:	5f                   	pop    edi
c001f13f:	5d                   	pop    ebp
c001f140:	c3                   	ret    
c001f141:	90                   	nop

c001f142 <SATA::close(int, int, void*)>:
c001f142:	83 ec 0c             	sub    esp,0xc
c001f145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f149:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f14f:	85 c0                	test   eax,eax
c001f151:	74 0c                	je     c001f15f <SATA::close(int, int, void*)+0x1d>
c001f153:	83 ec 0c             	sub    esp,0xc
c001f156:	8b 10                	mov    edx,DWORD PTR [eax]
c001f158:	50                   	push   eax
c001f159:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f15c:	83 c4 10             	add    esp,0x10
c001f15f:	31 c0                	xor    eax,eax
c001f161:	83 c4 0c             	add    esp,0xc
c001f164:	c3                   	ret    
c001f165:	90                   	nop

c001f166 <SATA::powerSaving(PowerSavingLevel)>:
c001f166:	c3                   	ret    
c001f167:	90                   	nop

c001f168 <SATA::open(int, int, void*)>:
c001f168:	56                   	push   esi
c001f169:	53                   	push   ebx
c001f16a:	50                   	push   eax
c001f16b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f16f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f173:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f17d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f183:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f18d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f191:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f19b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f1a1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f1a8:	e8 24 ac fe ff       	call   c0009dd1 <Phys::allocatePage()>
c001f1ad:	89 c6                	mov    esi,eax
c001f1af:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f1b5:	81 c6 00 10 00 00    	add    esi,0x1000
c001f1bb:	e8 11 ac fe ff       	call   c0009dd1 <Phys::allocatePage()>
c001f1c0:	39 c6                	cmp    esi,eax
c001f1c2:	74 10                	je     c001f1d4 <SATA::open(int, int, void*)+0x6c>
c001f1c4:	83 ec 0c             	sub    esp,0xc
c001f1c7:	68 94 51 02 c0       	push   0xc0025194
c001f1cc:	e8 64 51 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001f1d1:	83 c4 10             	add    esp,0x10
c001f1d4:	83 ec 0c             	sub    esp,0xc
c001f1d7:	6a 02                	push   0x2
c001f1d9:	e8 c3 c4 fe ff       	call   c000b6a1 <Virt::allocateKernelVirtualPages(int)>
c001f1de:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f1e4:	6a 03                	push   0x3
c001f1e6:	50                   	push   eax
c001f1e7:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f1ed:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c001f1f3:	e8 50 cb fe ff       	call   c000bd48 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f1f8:	83 c4 14             	add    esp,0x14
c001f1fb:	53                   	push   ebx
c001f1fc:	e8 59 f1 fe ff       	call   c000e35a <PhysicalDisk::startCache()>
c001f201:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f204:	e8 8d 11 ff ff       	call   c0010396 <createPartitionsForDisk(PhysicalDisk*)>
c001f209:	83 c4 14             	add    esp,0x14
c001f20c:	31 c0                	xor    eax,eax
c001f20e:	5b                   	pop    ebx
c001f20f:	5e                   	pop    esi
c001f210:	c3                   	ret    
c001f211:	90                   	nop

c001f212 <SATA::SATA()>:
c001f212:	83 ec 0c             	sub    esp,0xc
c001f215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f219:	83 ec 04             	sub    esp,0x4
c001f21c:	68 00 02 00 00       	push   0x200
c001f221:	68 a8 51 02 c0       	push   0xc00251a8
c001f226:	50                   	push   eax
c001f227:	e8 c6 f0 fe ff       	call   c000e2f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f22c:	83 c4 10             	add    esp,0x10
c001f22f:	ba 18 52 02 c0       	mov    edx,0xc0025218
c001f234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f238:	89 10                	mov    DWORD PTR [eax],edx
c001f23a:	90                   	nop
c001f23b:	83 c4 0c             	add    esp,0xc
c001f23e:	c3                   	ret    
c001f23f:	90                   	nop

c001f240 <SATA::access(unsigned long long, int, void*, bool)>:
c001f240:	55                   	push   ebp
c001f241:	57                   	push   edi
c001f242:	56                   	push   esi
c001f243:	53                   	push   ebx
c001f244:	83 ec 2c             	sub    esp,0x2c
c001f247:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f24b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f24f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f253:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f257:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f25b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f260:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f264:	7e 10                	jle    c001f276 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001f266:	83 ec 0c             	sub    esp,0xc
c001f269:	68 b8 51 02 c0       	push   0xc00251b8
c001f26e:	e8 c2 50 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001f273:	83 c4 10             	add    esp,0x10
c001f276:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f27c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f282:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f288:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f28c:	89 d0                	mov    eax,edx
c001f28e:	c1 e0 07             	shl    eax,0x7
c001f291:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f295:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f29f:	51                   	push   ecx
c001f2a0:	8d 42 02             	lea    eax,[edx+0x2]
c001f2a3:	51                   	push   ecx
c001f2a4:	c1 e0 07             	shl    eax,0x7
c001f2a7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f2ab:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f2af:	50                   	push   eax
c001f2b0:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001f2b6:	e8 9f ef ff ff       	call   c001e25a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f2bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f2bf:	83 c4 10             	add    esp,0x10
c001f2c2:	b8 01 00 00 00       	mov    eax,0x1
c001f2c7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f2cc:	0f 84 cb 01 00 00    	je     c001f49d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f2d2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f2d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f2da:	c1 e0 09             	shl    eax,0x9
c001f2dd:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f2e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f2e6:	74 0e                	je     c001f2f6 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c001f2e8:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001f2ee:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f2f2:	89 c1                	mov    ecx,eax
c001f2f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f2f6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f2fa:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f300:	8d 42 02             	lea    eax,[edx+0x2]
c001f303:	c1 e0 07             	shl    eax,0x7
c001f306:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f30a:	8b 00                	mov    eax,DWORD PTR [eax]
c001f30c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f312:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f318:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f31c:	c1 e1 05             	shl    ecx,0x5
c001f31f:	01 c8                	add    eax,ecx
c001f321:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001f325:	83 e1 01             	and    ecx,0x1
c001f328:	89 ce                	mov    esi,ecx
c001f32a:	8a 08                	mov    cl,BYTE PTR [eax]
c001f32c:	c1 e6 06             	shl    esi,0x6
c001f32f:	83 e1 bf             	and    ecx,0xffffffbf
c001f332:	09 f1                	or     ecx,esi
c001f334:	88 08                	mov    BYTE PTR [eax],cl
c001f336:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f338:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001f33e:	81 c9 05 00 01 00    	or     ecx,0x10005
c001f344:	89 08                	mov    DWORD PTR [eax],ecx
c001f346:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f34c:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001f352:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001f358:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001f35b:	50                   	push   eax
c001f35c:	68 90 00 00 00       	push   0x90
c001f361:	6a 00                	push   0x0
c001f363:	56                   	push   esi
c001f364:	e8 1b 13 fe ff       	call   c0000684 <memset>
c001f369:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f36f:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001f373:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001f379:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001f37d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f381:	83 c4 10             	add    esp,0x10
c001f384:	48                   	dec    eax
c001f385:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f38a:	89 c1                	mov    ecx,eax
c001f38c:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001f392:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f397:	09 c8                	or     eax,ecx
c001f399:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001f39f:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f3a2:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001f3a9:	66 25 00 7f          	and    ax,0x7f00
c001f3ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f3b1:	66 0d 27 80          	or     ax,0x8027
c001f3b5:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001f3ba:	66 89 06             	mov    WORD PTR [esi],ax
c001f3bd:	19 c0                	sbb    eax,eax
c001f3bf:	83 e0 f0             	and    eax,0xfffffff0
c001f3c2:	83 c0 35             	add    eax,0x35
c001f3c5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001f3c8:	89 e8                	mov    eax,ebp
c001f3ca:	c1 e8 10             	shr    eax,0x10
c001f3cd:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001f3d0:	89 e8                	mov    eax,ebp
c001f3d2:	c1 e8 18             	shr    eax,0x18
c001f3d5:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001f3d8:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f3dc:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001f3df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f3e3:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001f3e6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f3ea:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001f3ee:	89 d6                	mov    esi,edx
c001f3f0:	31 c0                	xor    eax,eax
c001f3f2:	c1 e6 07             	shl    esi,0x7
c001f3f5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001f3f9:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001f3ff:	80 e1 88             	and    cl,0x88
c001f402:	74 0a                	je     c001f40e <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c001f404:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f409:	74 0a                	je     c001f415 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c001f40b:	40                   	inc    eax
c001f40c:	eb eb                	jmp    c001f3f9 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c001f40e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f413:	75 0a                	jne    c001f41f <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001f415:	83 ec 0c             	sub    esp,0xc
c001f418:	68 f1 51 02 c0       	push   0xc00251f1
c001f41d:	eb 56                	jmp    c001f475 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c001f41f:	b8 01 00 00 00       	mov    eax,0x1
c001f424:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f428:	c1 e2 07             	shl    edx,0x7
c001f42b:	d3 e0                	shl    eax,cl
c001f42d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001f431:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001f437:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001f43d:	85 c8                	test   eax,ecx
c001f43f:	74 20                	je     c001f461 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c001f441:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001f447:	0f ba e1 1e          	bt     ecx,0x1e
c001f44b:	73 ea                	jae    c001f437 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c001f44d:	83 ec 0c             	sub    esp,0xc
c001f450:	68 ff 51 02 c0       	push   0xc00251ff
c001f455:	e8 db 4e ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001f45a:	83 c4 10             	add    esp,0x10
c001f45d:	31 c0                	xor    eax,eax
c001f45f:	eb 3c                	jmp    c001f49d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f461:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001f467:	0f ba e0 1e          	bt     eax,0x1e
c001f46b:	73 17                	jae    c001f484 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001f46d:	83 ec 0c             	sub    esp,0xc
c001f470:	68 ff 51 02 c0       	push   0xc00251ff
c001f475:	e8 bb 4e ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001f47a:	83 c4 10             	add    esp,0x10
c001f47d:	b8 01 00 00 00       	mov    eax,0x1
c001f482:	eb 19                	jmp    c001f49d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f484:	31 c0                	xor    eax,eax
c001f486:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f48b:	75 10                	jne    c001f49d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f48d:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001f493:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001f497:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f49b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f49d:	83 c4 2c             	add    esp,0x2c
c001f4a0:	5b                   	pop    ebx
c001f4a1:	5e                   	pop    esi
c001f4a2:	5f                   	pop    edi
c001f4a3:	5d                   	pop    ebp
c001f4a4:	c3                   	ret    
c001f4a5:	90                   	nop

c001f4a6 <SATA::read(unsigned long long, int, void*)>:
c001f4a6:	57                   	push   edi
c001f4a7:	b8 04 00 00 00       	mov    eax,0x4
c001f4ac:	56                   	push   esi
c001f4ad:	53                   	push   ebx
c001f4ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f4b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f4b6:	8d 7a ff             	lea    edi,[edx-0x1]
c001f4b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f4bd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f4c1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f4c7:	77 25                	ja     c001f4ee <SATA::read(unsigned long long, int, void*)+0x48>
c001f4c9:	b8 06 00 00 00       	mov    eax,0x6
c001f4ce:	85 f6                	test   esi,esi
c001f4d0:	74 1c                	je     c001f4ee <SATA::read(unsigned long long, int, void*)+0x48>
c001f4d2:	50                   	push   eax
c001f4d3:	50                   	push   eax
c001f4d4:	6a 00                	push   0x0
c001f4d6:	56                   	push   esi
c001f4d7:	52                   	push   edx
c001f4d8:	53                   	push   ebx
c001f4d9:	51                   	push   ecx
c001f4da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f4de:	e8 5d fd ff ff       	call   c001f240 <SATA::access(unsigned long long, int, void*, bool)>
c001f4e3:	83 c4 20             	add    esp,0x20
c001f4e6:	85 c0                	test   eax,eax
c001f4e8:	0f 95 c0             	setne  al
c001f4eb:	0f b6 c0             	movzx  eax,al
c001f4ee:	5b                   	pop    ebx
c001f4ef:	5e                   	pop    esi
c001f4f0:	5f                   	pop    edi
c001f4f1:	c3                   	ret    

c001f4f2 <SATA::write(unsigned long long, int, void*)>:
c001f4f2:	55                   	push   ebp
c001f4f3:	b8 04 00 00 00       	mov    eax,0x4
c001f4f8:	57                   	push   edi
c001f4f9:	56                   	push   esi
c001f4fa:	53                   	push   ebx
c001f4fb:	83 ec 0c             	sub    esp,0xc
c001f4fe:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f502:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f506:	8d 73 ff             	lea    esi,[ebx-0x1]
c001f509:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001f50d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f511:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001f517:	77 3d                	ja     c001f556 <SATA::write(unsigned long long, int, void*)+0x64>
c001f519:	b8 06 00 00 00       	mov    eax,0x6
c001f51e:	85 ed                	test   ebp,ebp
c001f520:	74 34                	je     c001f556 <SATA::write(unsigned long long, int, void*)+0x64>
c001f522:	c1 e3 09             	shl    ebx,0x9
c001f525:	01 eb                	add    ebx,ebp
c001f527:	89 d6                	mov    esi,edx
c001f529:	89 cf                	mov    edi,ecx
c001f52b:	83 c6 01             	add    esi,0x1
c001f52e:	83 d7 00             	adc    edi,0x0
c001f531:	50                   	push   eax
c001f532:	50                   	push   eax
c001f533:	6a 01                	push   0x1
c001f535:	55                   	push   ebp
c001f536:	81 c5 00 02 00 00    	add    ebp,0x200
c001f53c:	6a 01                	push   0x1
c001f53e:	51                   	push   ecx
c001f53f:	52                   	push   edx
c001f540:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f544:	e8 f7 fc ff ff       	call   c001f240 <SATA::access(unsigned long long, int, void*, bool)>
c001f549:	83 c4 20             	add    esp,0x20
c001f54c:	89 f2                	mov    edx,esi
c001f54e:	89 f9                	mov    ecx,edi
c001f550:	39 dd                	cmp    ebp,ebx
c001f552:	75 d3                	jne    c001f527 <SATA::write(unsigned long long, int, void*)+0x35>
c001f554:	31 c0                	xor    eax,eax
c001f556:	83 c4 0c             	add    esp,0xc
c001f559:	5b                   	pop    ebx
c001f55a:	5e                   	pop    esi
c001f55b:	5f                   	pop    edi
c001f55c:	5d                   	pop    ebp
c001f55d:	c3                   	ret    

c001f55e <SATAPI::write(unsigned long long, int, void*)>:
c001f55e:	b8 03 00 00 00       	mov    eax,0x3
c001f563:	c3                   	ret    

c001f564 <SATAPI::close(int, int, void*)>:
c001f564:	83 ec 0c             	sub    esp,0xc
c001f567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f56b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f571:	85 c0                	test   eax,eax
c001f573:	74 0c                	je     c001f581 <SATAPI::close(int, int, void*)+0x1d>
c001f575:	83 ec 0c             	sub    esp,0xc
c001f578:	8b 10                	mov    edx,DWORD PTR [eax]
c001f57a:	50                   	push   eax
c001f57b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f57e:	83 c4 10             	add    esp,0x10
c001f581:	31 c0                	xor    eax,eax
c001f583:	83 c4 0c             	add    esp,0xc
c001f586:	c3                   	ret    
c001f587:	90                   	nop

c001f588 <SATAPI::SATAPI()>:
c001f588:	83 ec 0c             	sub    esp,0xc
c001f58b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f58f:	83 ec 04             	sub    esp,0x4
c001f592:	68 00 08 00 00       	push   0x800
c001f597:	68 48 52 02 c0       	push   0xc0025248
c001f59c:	50                   	push   eax
c001f59d:	e8 50 ed fe ff       	call   c000e2f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f5a2:	83 c4 10             	add    esp,0x10
c001f5a5:	ba f4 52 02 c0       	mov    edx,0xc00252f4
c001f5aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ae:	89 10                	mov    DWORD PTR [eax],edx
c001f5b0:	90                   	nop
c001f5b1:	83 c4 0c             	add    esp,0xc
c001f5b4:	c3                   	ret    
c001f5b5:	90                   	nop

c001f5b6 <SATAPI::diskRemoved()>:
c001f5b6:	83 ec 18             	sub    esp,0x18
c001f5b9:	68 54 52 02 c0       	push   0xc0025254
c001f5be:	e8 b0 d4 fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001f5c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f5c7:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c001f5ce:	83 c4 1c             	add    esp,0x1c
c001f5d1:	c3                   	ret    

c001f5d2 <SATAPI::diskInserted()>:
c001f5d2:	53                   	push   ebx
c001f5d3:	83 ec 14             	sub    esp,0x14
c001f5d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f5da:	68 6b 52 02 c0       	push   0xc002526b
c001f5df:	e8 8f d4 fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001f5e4:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c001f5eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f5ee:	e8 67 ed fe ff       	call   c000e35a <PhysicalDisk::startCache()>
c001f5f3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001f5f7:	83 c4 18             	add    esp,0x18
c001f5fa:	5b                   	pop    ebx
c001f5fb:	e9 96 0d ff ff       	jmp    c0010396 <createPartitionsForDisk(PhysicalDisk*)>

c001f600 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f600:	55                   	push   ebp
c001f601:	57                   	push   edi
c001f602:	56                   	push   esi
c001f603:	53                   	push   ebx
c001f604:	83 ec 34             	sub    esp,0x34
c001f607:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f60b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f60f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001f613:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f617:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f61b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f621:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f627:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f62b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f631:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f635:	c1 e0 07             	shl    eax,0x7
c001f638:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f63c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f640:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f64a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f64e:	8d 58 02             	lea    ebx,[eax+0x2]
c001f651:	c1 e3 07             	shl    ebx,0x7
c001f654:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001f658:	53                   	push   ebx
c001f659:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f65f:	e8 f6 eb ff ff       	call   c001e25a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f664:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f668:	83 c4 10             	add    esp,0x10
c001f66b:	b8 01 00 00 00       	mov    eax,0x1
c001f670:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f675:	0f 84 85 01 00 00    	je     c001f800 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f67b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f681:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f683:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f689:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f68f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f693:	c1 e1 05             	shl    ecx,0x5
c001f696:	01 c8                	add    eax,ecx
c001f698:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f69a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f6a0:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f6a6:	89 08                	mov    DWORD PTR [eax],ecx
c001f6a8:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f6ae:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f6b4:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f6ba:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f6bd:	8d 7b 40             	lea    edi,[ebx+0x40]
c001f6c0:	50                   	push   eax
c001f6c1:	68 90 00 00 00       	push   0x90
c001f6c6:	6a 00                	push   0x0
c001f6c8:	53                   	push   ebx
c001f6c9:	e8 b6 0f fe ff       	call   c0000684 <memset>
c001f6ce:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001f6d2:	b9 0c 00 00 00       	mov    ecx,0xc
c001f6d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f6d9:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c001f6df:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001f6e3:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001f6e9:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001f6ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f6f1:	48                   	dec    eax
c001f6f2:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f6f7:	89 c1                	mov    ecx,eax
c001f6f9:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001f6ff:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f704:	09 c8                	or     eax,ecx
c001f706:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001f70c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001f70f:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001f716:	66 25 00 7f          	and    ax,0x7f00
c001f71a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001f71e:	66 0d 27 80          	or     ax,0x8027
c001f722:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001f726:	66 89 03             	mov    WORD PTR [ebx],ax
c001f729:	89 d0                	mov    eax,edx
c001f72b:	c1 ea 18             	shr    edx,0x18
c001f72e:	c1 e8 10             	shr    eax,0x10
c001f731:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001f734:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001f737:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001f73b:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001f73e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f742:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001f745:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f749:	83 c4 10             	add    esp,0x10
c001f74c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001f750:	31 c0                	xor    eax,eax
c001f752:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f756:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c001f75c:	80 e2 88             	and    dl,0x88
c001f75f:	74 0a                	je     c001f76b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001f761:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f766:	74 0a                	je     c001f772 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c001f768:	40                   	inc    eax
c001f769:	eb eb                	jmp    c001f756 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c001f76b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f770:	75 0f                	jne    c001f781 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c001f772:	83 ec 0c             	sub    esp,0xc
c001f775:	68 f1 51 02 c0       	push   0xc00251f1
c001f77a:	e8 b6 4b ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001f77f:	eb 3f                	jmp    c001f7c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001f781:	ba 01 00 00 00       	mov    edx,0x1
c001f786:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f78a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f78e:	d3 e2                	shl    edx,cl
c001f790:	c1 e0 07             	shl    eax,0x7
c001f793:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c001f799:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f79d:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c001f7a3:	85 ca                	test   edx,ecx
c001f7a5:	74 23                	je     c001f7ca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001f7a7:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c001f7ad:	0f ba e1 1e          	bt     ecx,0x1e
c001f7b1:	73 ea                	jae    c001f79d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c001f7b3:	83 ec 0c             	sub    esp,0xc
c001f7b6:	68 83 52 02 c0       	push   0xc0025283
c001f7bb:	e8 b3 d2 fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c001f7c0:	83 c4 10             	add    esp,0x10
c001f7c3:	b8 01 00 00 00       	mov    eax,0x1
c001f7c8:	eb 36                	jmp    c001f800 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f7ca:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001f7d0:	0f ba e0 1e          	bt     eax,0x1e
c001f7d4:	73 0a                	jae    c001f7e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c001f7d6:	83 ec 0c             	sub    esp,0xc
c001f7d9:	68 96 52 02 c0       	push   0xc0025296
c001f7de:	eb db                	jmp    c001f7bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c001f7e0:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f7e5:	74 17                	je     c001f7fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f7e7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f7ec:	74 10                	je     c001f7fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f7ee:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c001f7f4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f7f8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001f7fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f7fe:	31 c0                	xor    eax,eax
c001f800:	83 c4 2c             	add    esp,0x2c
c001f803:	5b                   	pop    ebx
c001f804:	5e                   	pop    esi
c001f805:	5f                   	pop    edi
c001f806:	5d                   	pop    ebp
c001f807:	c3                   	ret    

c001f808 <SATAPI::eject()>:
c001f808:	57                   	push   edi
c001f809:	b9 03 00 00 00       	mov    ecx,0x3
c001f80e:	53                   	push   ebx
c001f80f:	83 ec 14             	sub    esp,0x14
c001f812:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f816:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f81a:	fc                   	cld    
c001f81b:	31 c0                	xor    eax,eax
c001f81d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f81f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f824:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f829:	50                   	push   eax
c001f82a:	6a 00                	push   0x0
c001f82c:	6a 00                	push   0x0
c001f82e:	6a 00                	push   0x0
c001f830:	6a 00                	push   0x0
c001f832:	6a 02                	push   0x2
c001f834:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f838:	50                   	push   eax
c001f839:	53                   	push   ebx
c001f83a:	e8 c1 fd ff ff       	call   c001f600 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f83f:	83 c4 14             	add    esp,0x14
c001f842:	53                   	push   ebx
c001f843:	e8 6e fd ff ff       	call   c001f5b6 <SATAPI::diskRemoved()>
c001f848:	83 c4 24             	add    esp,0x24
c001f84b:	31 c0                	xor    eax,eax
c001f84d:	5b                   	pop    ebx
c001f84e:	5f                   	pop    edi
c001f84f:	c3                   	ret    

c001f850 <SATAPI::detectMedia()>:
c001f850:	56                   	push   esi
c001f851:	53                   	push   ebx
c001f852:	83 ec 28             	sub    esp,0x28
c001f855:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f859:	6a 0c                	push   0xc
c001f85b:	6a 00                	push   0x0
c001f85d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f861:	56                   	push   esi
c001f862:	e8 1d 0e fe ff       	call   c0000684 <memset>
c001f867:	83 c4 0c             	add    esp,0xc
c001f86a:	6a 00                	push   0x0
c001f86c:	6a 00                	push   0x0
c001f86e:	6a 00                	push   0x0
c001f870:	6a 00                	push   0x0
c001f872:	6a 00                	push   0x0
c001f874:	56                   	push   esi
c001f875:	53                   	push   ebx
c001f876:	e8 85 fd ff ff       	call   c001f600 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f87b:	83 c4 1c             	add    esp,0x1c
c001f87e:	6a 0c                	push   0xc
c001f880:	6a 00                	push   0x0
c001f882:	56                   	push   esi
c001f883:	e8 fc 0d fe ff       	call   c0000684 <memset>
c001f888:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f88d:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f892:	83 c4 0c             	add    esp,0xc
c001f895:	6a 01                	push   0x1
c001f897:	8d 44 24 16          	lea    eax,[esp+0x16]
c001f89b:	50                   	push   eax
c001f89c:	6a 00                	push   0x0
c001f89e:	6a 00                	push   0x0
c001f8a0:	6a 12                	push   0x12
c001f8a2:	56                   	push   esi
c001f8a3:	53                   	push   ebx
c001f8a4:	e8 57 fd ff ff       	call   c001f600 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f8a9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f8ad:	83 c4 20             	add    esp,0x20
c001f8b0:	83 e0 7f             	and    eax,0x7f
c001f8b3:	3c 70                	cmp    al,0x70
c001f8b5:	74 15                	je     c001f8cc <SATAPI::detectMedia()+0x7c>
c001f8b7:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f8be:	75 0c                	jne    c001f8cc <SATAPI::detectMedia()+0x7c>
c001f8c0:	83 ec 0c             	sub    esp,0xc
c001f8c3:	53                   	push   ebx
c001f8c4:	e8 09 fd ff ff       	call   c001f5d2 <SATAPI::diskInserted()>
c001f8c9:	83 c4 10             	add    esp,0x10
c001f8cc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f8d0:	83 e0 0f             	and    eax,0xf
c001f8d3:	3c 02                	cmp    al,0x2
c001f8d5:	75 1b                	jne    c001f8f2 <SATAPI::detectMedia()+0xa2>
c001f8d7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f8dc:	75 2d                	jne    c001f90b <SATAPI::detectMedia()+0xbb>
c001f8de:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f8e5:	74 24                	je     c001f90b <SATAPI::detectMedia()+0xbb>
c001f8e7:	83 ec 0c             	sub    esp,0xc
c001f8ea:	53                   	push   ebx
c001f8eb:	e8 c6 fc ff ff       	call   c001f5b6 <SATAPI::diskRemoved()>
c001f8f0:	eb 16                	jmp    c001f908 <SATAPI::detectMedia()+0xb8>
c001f8f2:	84 c0                	test   al,al
c001f8f4:	75 15                	jne    c001f90b <SATAPI::detectMedia()+0xbb>
c001f8f6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f8fd:	75 0c                	jne    c001f90b <SATAPI::detectMedia()+0xbb>
c001f8ff:	83 ec 0c             	sub    esp,0xc
c001f902:	53                   	push   ebx
c001f903:	e8 ca fc ff ff       	call   c001f5d2 <SATAPI::diskInserted()>
c001f908:	83 c4 10             	add    esp,0x10
c001f90b:	83 c4 24             	add    esp,0x24
c001f90e:	5b                   	pop    ebx
c001f90f:	5e                   	pop    esi
c001f910:	c3                   	ret    
c001f911:	90                   	nop

c001f912 <SATAPI::open(int, int, void*)>:
c001f912:	56                   	push   esi
c001f913:	53                   	push   ebx
c001f914:	50                   	push   eax
c001f915:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f919:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f91d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f927:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f92d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f937:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f93b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f945:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f94b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f952:	e8 7a a4 fe ff       	call   c0009dd1 <Phys::allocatePage()>
c001f957:	89 c6                	mov    esi,eax
c001f959:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f95f:	81 c6 00 10 00 00    	add    esi,0x1000
c001f965:	e8 67 a4 fe ff       	call   c0009dd1 <Phys::allocatePage()>
c001f96a:	39 c6                	cmp    esi,eax
c001f96c:	74 10                	je     c001f97e <SATAPI::open(int, int, void*)+0x6c>
c001f96e:	83 ec 0c             	sub    esp,0xc
c001f971:	68 ab 52 02 c0       	push   0xc00252ab
c001f976:	e8 ba 49 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001f97b:	83 c4 10             	add    esp,0x10
c001f97e:	83 ec 0c             	sub    esp,0xc
c001f981:	6a 02                	push   0x2
c001f983:	e8 19 bd fe ff       	call   c000b6a1 <Virt::allocateKernelVirtualPages(int)>
c001f988:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f98e:	6a 03                	push   0x3
c001f990:	50                   	push   eax
c001f991:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c001f997:	ff 35 30 65 02 c0    	push   DWORD PTR ds:0xc0026530
c001f99d:	e8 a6 c3 fe ff       	call   c000bd48 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f9a2:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001f9a9:	83 c4 14             	add    esp,0x14
c001f9ac:	53                   	push   ebx
c001f9ad:	e8 9e fe ff ff       	call   c001f850 <SATAPI::detectMedia()>
c001f9b2:	83 c4 14             	add    esp,0x14
c001f9b5:	31 c0                	xor    eax,eax
c001f9b7:	5b                   	pop    ebx
c001f9b8:	5e                   	pop    esi
c001f9b9:	c3                   	ret    

c001f9ba <SATAPI::read(unsigned long long, int, void*)>:
c001f9ba:	55                   	push   ebp
c001f9bb:	57                   	push   edi
c001f9bc:	56                   	push   esi
c001f9bd:	53                   	push   ebx
c001f9be:	83 ec 1c             	sub    esp,0x1c
c001f9c1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f9c5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f9c9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f9cd:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001f9d4:	74 19                	je     c001f9ef <SATAPI::read(unsigned long long, int, void*)+0x35>
c001f9d6:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c001f9db:	7e 2e                	jle    c001fa0b <SATAPI::read(unsigned long long, int, void*)+0x51>
c001f9dd:	83 ec 0c             	sub    esp,0xc
c001f9e0:	68 c1 52 02 c0       	push   0xc00252c1
c001f9e5:	e8 4b 49 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c001f9ea:	83 c4 10             	add    esp,0x10
c001f9ed:	eb 1c                	jmp    c001fa0b <SATAPI::read(unsigned long long, int, void*)+0x51>
c001f9ef:	83 ec 0c             	sub    esp,0xc
c001f9f2:	55                   	push   ebp
c001f9f3:	e8 58 fe ff ff       	call   c001f850 <SATAPI::detectMedia()>
c001f9f8:	83 c4 10             	add    esp,0x10
c001f9fb:	b8 02 00 00 00       	mov    eax,0x2
c001fa00:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001fa07:	75 cd                	jne    c001f9d6 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c001fa09:	eb 49                	jmp    c001fa54 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c001fa0b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fa0f:	b9 03 00 00 00       	mov    ecx,0x3
c001fa14:	fc                   	cld    
c001fa15:	31 c0                	xor    eax,eax
c001fa17:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fa19:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001fa1e:	89 d8                	mov    eax,ebx
c001fa20:	86 e0                	xchg   al,ah
c001fa22:	c1 c0 10             	rol    eax,0x10
c001fa25:	86 e0                	xchg   al,ah
c001fa27:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c001fa2b:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001fa2f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001fa33:	50                   	push   eax
c001fa34:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fa38:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fa3c:	56                   	push   esi
c001fa3d:	53                   	push   ebx
c001fa3e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fa42:	c1 e0 0b             	shl    eax,0xb
c001fa45:	50                   	push   eax
c001fa46:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fa4a:	50                   	push   eax
c001fa4b:	55                   	push   ebp
c001fa4c:	e8 af fb ff ff       	call   c001f600 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fa51:	83 c4 20             	add    esp,0x20
c001fa54:	83 c4 1c             	add    esp,0x1c
c001fa57:	5b                   	pop    ebx
c001fa58:	5e                   	pop    esi
c001fa59:	5f                   	pop    edi
c001fa5a:	5d                   	pop    ebp
c001fa5b:	c3                   	ret    

c001fa5c <AVX::open(int, int, void*)>:
c001fa5c:	83 ec 0c             	sub    esp,0xc
c001fa5f:	e8 34 11 00 00       	call   c0020b98 <avxInit>
c001fa64:	b8 00 00 00 00       	mov    eax,0x0
c001fa69:	83 c4 0c             	add    esp,0xc
c001fa6c:	c3                   	ret    
c001fa6d:	90                   	nop
c001fa6e:	66 90                	xchg   ax,ax

c001fa70 <AVX::close(int, int, void*)>:
c001fa70:	83 ec 0c             	sub    esp,0xc
c001fa73:	e8 21 11 00 00       	call   c0020b99 <avxClose>
c001fa78:	b8 00 00 00 00       	mov    eax,0x0
c001fa7d:	83 c4 0c             	add    esp,0xc
c001fa80:	c3                   	ret    
c001fa81:	90                   	nop
c001fa82:	66 90                	xchg   ax,ax

c001fa84 <AVX::available()>:
c001fa84:	83 ec 0c             	sub    esp,0xc
c001fa87:	e8 04 11 00 00       	call   c0020b90 <avxDetect>
c001fa8c:	85 c0                	test   eax,eax
c001fa8e:	0f 95 c0             	setne  al
c001fa91:	83 c4 0c             	add    esp,0xc
c001fa94:	c3                   	ret    
c001fa95:	90                   	nop
c001fa96:	66 90                	xchg   ax,ax

c001fa98 <AVX::save(void*)>:
c001fa98:	83 ec 0c             	sub    esp,0xc
c001fa9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa9f:	83 ec 0c             	sub    esp,0xc
c001faa2:	50                   	push   eax
c001faa3:	e8 ee 10 00 00       	call   c0020b96 <avxSave>
c001faa8:	83 c4 10             	add    esp,0x10
c001faab:	90                   	nop
c001faac:	83 c4 0c             	add    esp,0xc
c001faaf:	c3                   	ret    

c001fab0 <AVX::load(void*)>:
c001fab0:	83 ec 0c             	sub    esp,0xc
c001fab3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fab7:	83 ec 0c             	sub    esp,0xc
c001faba:	50                   	push   eax
c001fabb:	e8 d7 10 00 00       	call   c0020b97 <avxLoad>
c001fac0:	83 c4 10             	add    esp,0x10
c001fac3:	90                   	nop
c001fac4:	83 c4 0c             	add    esp,0xc
c001fac7:	c3                   	ret    

c001fac8 <AVX::AVX()>:
c001fac8:	83 ec 0c             	sub    esp,0xc
c001facb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001facf:	83 ec 08             	sub    esp,0x8
c001fad2:	68 24 53 02 c0       	push   0xc0025324
c001fad7:	50                   	push   eax
c001fad8:	e8 f3 e8 fe ff       	call   c000e3d0 <FPU::FPU(char const*)>
c001fadd:	83 c4 10             	add    esp,0x10
c001fae0:	ba 34 53 02 c0       	mov    edx,0xc0025334
c001fae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae9:	89 10                	mov    DWORD PTR [eax],edx
c001faeb:	90                   	nop
c001faec:	83 c4 0c             	add    esp,0xc
c001faef:	c3                   	ret    

c001faf0 <MMX::available()>:
c001faf0:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c001faf5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fafb:	83 e0 20             	and    eax,0x20
c001fafe:	84 c0                	test   al,al
c001fb00:	0f 95 c0             	setne  al
c001fb03:	c3                   	ret    

c001fb04 <MMX::open(int, int, void*)>:
c001fb04:	83 ec 0c             	sub    esp,0xc
c001fb07:	e8 16 11 00 00       	call   c0020c22 <x87Init>
c001fb0c:	b8 00 00 00 00       	mov    eax,0x0
c001fb11:	83 c4 0c             	add    esp,0xc
c001fb14:	c3                   	ret    
c001fb15:	90                   	nop
c001fb16:	66 90                	xchg   ax,ax

c001fb18 <MMX::close(int, int, void*)>:
c001fb18:	83 ec 0c             	sub    esp,0xc
c001fb1b:	e8 1c 11 00 00       	call   c0020c3c <x87Close>
c001fb20:	b8 00 00 00 00       	mov    eax,0x0
c001fb25:	83 c4 0c             	add    esp,0xc
c001fb28:	c3                   	ret    
c001fb29:	90                   	nop
c001fb2a:	66 90                	xchg   ax,ax

c001fb2c <MMX::save(void*)>:
c001fb2c:	83 ec 0c             	sub    esp,0xc
c001fb2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb33:	83 ec 0c             	sub    esp,0xc
c001fb36:	50                   	push   eax
c001fb37:	e8 d5 10 00 00       	call   c0020c11 <x87Save>
c001fb3c:	83 c4 10             	add    esp,0x10
c001fb3f:	90                   	nop
c001fb40:	83 c4 0c             	add    esp,0xc
c001fb43:	c3                   	ret    

c001fb44 <MMX::load(void*)>:
c001fb44:	83 ec 0c             	sub    esp,0xc
c001fb47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb4b:	83 ec 0c             	sub    esp,0xc
c001fb4e:	50                   	push   eax
c001fb4f:	e8 c6 10 00 00       	call   c0020c1a <x87Load>
c001fb54:	83 c4 10             	add    esp,0x10
c001fb57:	90                   	nop
c001fb58:	83 c4 0c             	add    esp,0xc
c001fb5b:	c3                   	ret    

c001fb5c <MMX::MMX()>:
c001fb5c:	83 ec 0c             	sub    esp,0xc
c001fb5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb63:	83 ec 08             	sub    esp,0x8
c001fb66:	68 64 53 02 c0       	push   0xc0025364
c001fb6b:	50                   	push   eax
c001fb6c:	e8 5f e8 fe ff       	call   c000e3d0 <FPU::FPU(char const*)>
c001fb71:	83 c4 10             	add    esp,0x10
c001fb74:	ba 74 53 02 c0       	mov    edx,0xc0025374
c001fb79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb7d:	89 10                	mov    DWORD PTR [eax],edx
c001fb7f:	90                   	nop
c001fb80:	83 c4 0c             	add    esp,0xc
c001fb83:	c3                   	ret    

c001fb84 <SSE::open(int, int, void*)>:
c001fb84:	83 ec 0c             	sub    esp,0xc
c001fb87:	e8 48 10 00 00       	call   c0020bd4 <sseInit>
c001fb8c:	b8 00 00 00 00       	mov    eax,0x0
c001fb91:	83 c4 0c             	add    esp,0xc
c001fb94:	c3                   	ret    
c001fb95:	90                   	nop
c001fb96:	66 90                	xchg   ax,ax

c001fb98 <SSE::close(int, int, void*)>:
c001fb98:	83 ec 0c             	sub    esp,0xc
c001fb9b:	e8 44 10 00 00       	call   c0020be4 <sseClose>
c001fba0:	b8 00 00 00 00       	mov    eax,0x0
c001fba5:	83 c4 0c             	add    esp,0xc
c001fba8:	c3                   	ret    
c001fba9:	90                   	nop
c001fbaa:	66 90                	xchg   ax,ax

c001fbac <SSE::available()>:
c001fbac:	83 ec 1c             	sub    esp,0x1c
c001fbaf:	e8 fc 0f 00 00       	call   c0020bb0 <absolutelyNoChanceInHell>
c001fbb4:	85 c0                	test   eax,eax
c001fbb6:	0f 95 c0             	setne  al
c001fbb9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fbbd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001fbc1:	83 c4 1c             	add    esp,0x1c
c001fbc4:	c3                   	ret    
c001fbc5:	90                   	nop
c001fbc6:	66 90                	xchg   ax,ax

c001fbc8 <SSE::save(void*)>:
c001fbc8:	83 ec 0c             	sub    esp,0xc
c001fbcb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fbcf:	83 ec 0c             	sub    esp,0xc
c001fbd2:	50                   	push   eax
c001fbd3:	e8 f0 0f 00 00       	call   c0020bc8 <sseSave>
c001fbd8:	83 c4 10             	add    esp,0x10
c001fbdb:	90                   	nop
c001fbdc:	83 c4 0c             	add    esp,0xc
c001fbdf:	c3                   	ret    

c001fbe0 <SSE::load(void*)>:
c001fbe0:	83 ec 0c             	sub    esp,0xc
c001fbe3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fbe7:	83 ec 0c             	sub    esp,0xc
c001fbea:	50                   	push   eax
c001fbeb:	e8 de 0f 00 00       	call   c0020bce <sseLoad>
c001fbf0:	83 c4 10             	add    esp,0x10
c001fbf3:	90                   	nop
c001fbf4:	83 c4 0c             	add    esp,0xc
c001fbf7:	c3                   	ret    

c001fbf8 <SSE::SSE()>:
c001fbf8:	83 ec 0c             	sub    esp,0xc
c001fbfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbff:	83 ec 08             	sub    esp,0x8
c001fc02:	68 a4 53 02 c0       	push   0xc00253a4
c001fc07:	50                   	push   eax
c001fc08:	e8 c3 e7 fe ff       	call   c000e3d0 <FPU::FPU(char const*)>
c001fc0d:	83 c4 10             	add    esp,0x10
c001fc10:	ba b4 53 02 c0       	mov    edx,0xc00253b4
c001fc15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc19:	89 10                	mov    DWORD PTR [eax],edx
c001fc1b:	90                   	nop
c001fc1c:	83 c4 0c             	add    esp,0xc
c001fc1f:	c3                   	ret    

c001fc20 <x87::open(int, int, void*)>:
c001fc20:	83 ec 0c             	sub    esp,0xc
c001fc23:	e8 fa 0f 00 00       	call   c0020c22 <x87Init>
c001fc28:	b8 00 00 00 00       	mov    eax,0x0
c001fc2d:	83 c4 0c             	add    esp,0xc
c001fc30:	c3                   	ret    
c001fc31:	90                   	nop
c001fc32:	66 90                	xchg   ax,ax

c001fc34 <x87::close(int, int, void*)>:
c001fc34:	83 ec 0c             	sub    esp,0xc
c001fc37:	e8 00 10 00 00       	call   c0020c3c <x87Close>
c001fc3c:	b8 00 00 00 00       	mov    eax,0x0
c001fc41:	83 c4 0c             	add    esp,0xc
c001fc44:	c3                   	ret    
c001fc45:	90                   	nop
c001fc46:	66 90                	xchg   ax,ax

c001fc48 <x87::available()>:
c001fc48:	83 ec 0c             	sub    esp,0xc
c001fc4b:	e8 a6 0f 00 00       	call   c0020bf6 <x87Detect>
c001fc50:	85 c0                	test   eax,eax
c001fc52:	0f 95 c0             	setne  al
c001fc55:	83 c4 0c             	add    esp,0xc
c001fc58:	c3                   	ret    
c001fc59:	90                   	nop
c001fc5a:	66 90                	xchg   ax,ax

c001fc5c <x87::save(void*)>:
c001fc5c:	83 ec 0c             	sub    esp,0xc
c001fc5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc63:	83 ec 0c             	sub    esp,0xc
c001fc66:	50                   	push   eax
c001fc67:	e8 a5 0f 00 00       	call   c0020c11 <x87Save>
c001fc6c:	83 c4 10             	add    esp,0x10
c001fc6f:	90                   	nop
c001fc70:	83 c4 0c             	add    esp,0xc
c001fc73:	c3                   	ret    

c001fc74 <x87::load(void*)>:
c001fc74:	83 ec 0c             	sub    esp,0xc
c001fc77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc7b:	83 ec 0c             	sub    esp,0xc
c001fc7e:	50                   	push   eax
c001fc7f:	e8 96 0f 00 00       	call   c0020c1a <x87Load>
c001fc84:	83 c4 10             	add    esp,0x10
c001fc87:	90                   	nop
c001fc88:	83 c4 0c             	add    esp,0xc
c001fc8b:	c3                   	ret    

c001fc8c <x87::x87()>:
c001fc8c:	83 ec 0c             	sub    esp,0xc
c001fc8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc93:	83 ec 08             	sub    esp,0x8
c001fc96:	68 e4 53 02 c0       	push   0xc00253e4
c001fc9b:	50                   	push   eax
c001fc9c:	e8 2f e7 fe ff       	call   c000e3d0 <FPU::FPU(char const*)>
c001fca1:	83 c4 10             	add    esp,0x10
c001fca4:	ba f4 53 02 c0       	mov    edx,0xc00253f4
c001fca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcad:	89 10                	mov    DWORD PTR [eax],edx
c001fcaf:	90                   	nop
c001fcb0:	83 c4 0c             	add    esp,0xc
c001fcb3:	c3                   	ret    

c001fcb4 <APIC::disable()>:
c001fcb4:	90                   	nop
c001fcb5:	c3                   	ret    

c001fcb6 <APIC::close(int, int, void*)>:
c001fcb6:	55                   	push   ebp
c001fcb7:	89 e5                	mov    ebp,esp
c001fcb9:	83 ec 08             	sub    esp,0x8
c001fcbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fcbf:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcc1:	83 c0 3c             	add    eax,0x3c
c001fcc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcc6:	83 ec 0c             	sub    esp,0xc
c001fcc9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fccc:	ff d0                	call   eax
c001fcce:	83 c4 10             	add    esp,0x10
c001fcd1:	b8 00 00 00 00       	mov    eax,0x0
c001fcd6:	c9                   	leave  
c001fcd7:	c3                   	ret    

c001fcd8 <IOAPIC::close(int, int, void*)>:
c001fcd8:	b8 00 00 00 00       	mov    eax,0x0
c001fcdd:	c3                   	ret    

c001fcde <APIC::io_wait()>:
c001fcde:	eb 00                	jmp    c001fce0 <APIC::io_wait()+0x2>
c001fce0:	eb 00                	jmp    c001fce2 <APIC::io_wait()+0x4>
c001fce2:	90                   	nop
c001fce3:	c3                   	ret    

c001fce4 <APIC::getBase()>:
c001fce4:	55                   	push   ebp
c001fce5:	89 e5                	mov    ebp,esp
c001fce7:	83 ec 18             	sub    esp,0x18
c001fcea:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c001fcef:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fcf5:	83 e0 08             	and    eax,0x8
c001fcf8:	84 c0                	test   al,al
c001fcfa:	75 07                	jne    c001fd03 <APIC::getBase()+0x1f>
c001fcfc:	b8 00 00 00 00       	mov    eax,0x0
c001fd01:	eb 21                	jmp    c001fd24 <APIC::getBase()+0x40>
c001fd03:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c001fd08:	83 ec 08             	sub    esp,0x8
c001fd0b:	6a 1b                	push   0x1b
c001fd0d:	50                   	push   eax
c001fd0e:	e8 11 92 fe ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c001fd13:	83 c4 10             	add    esp,0x10
c001fd16:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001fd19:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001fd1c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fd1f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001fd24:	c9                   	leave  
c001fd25:	c3                   	ret    

c001fd26 <APIC::eoi(unsigned char)>:
c001fd26:	55                   	push   ebp
c001fd27:	89 e5                	mov    ebp,esp
c001fd29:	83 ec 28             	sub    esp,0x28
c001fd2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fd2f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001fd32:	83 ec 0c             	sub    esp,0xc
c001fd35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd38:	e8 a7 ff ff ff       	call   c001fce4 <APIC::getBase()>
c001fd3d:	83 c4 10             	add    esp,0x10
c001fd40:	05 b0 00 00 00       	add    eax,0xb0
c001fd45:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001fd48:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001fd4b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fd51:	90                   	nop
c001fd52:	c9                   	leave  
c001fd53:	c3                   	ret    

c001fd54 <APIC::open(int, int, void*)>:
c001fd54:	55                   	push   ebp
c001fd55:	89 e5                	mov    ebp,esp
c001fd57:	57                   	push   edi
c001fd58:	56                   	push   esi
c001fd59:	53                   	push   ebx
c001fd5a:	83 ec 2c             	sub    esp,0x2c
c001fd5d:	83 ec 0c             	sub    esp,0xc
c001fd60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd63:	e8 7c ff ff ff       	call   c001fce4 <APIC::getBase()>
c001fd68:	83 c4 10             	add    esp,0x10
c001fd6b:	89 c2                	mov    edx,eax
c001fd6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd70:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fd76:	0f b6 f8             	movzx  edi,al
c001fd79:	89 d0                	mov    eax,edx
c001fd7b:	ba 00 00 00 00       	mov    edx,0x0
c001fd80:	89 c1                	mov    ecx,eax
c001fd82:	80 e5 ff             	and    ch,0xff
c001fd85:	89 cb                	mov    ebx,ecx
c001fd87:	0f b6 f2             	movzx  esi,dl
c001fd8a:	89 d8                	mov    eax,ebx
c001fd8c:	89 f2                	mov    edx,esi
c001fd8e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fd91:	8d 5f 08             	lea    ebx,[edi+0x8]
c001fd94:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001fd98:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001fd9c:	83 e0 00             	and    eax,0x0
c001fd9f:	09 d0                	or     eax,edx
c001fda1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001fda5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fda8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fdae:	8d 50 01             	lea    edx,[eax+0x1]
c001fdb1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fdb4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001fdba:	0f b6 d0             	movzx  edx,al
c001fdbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fdc0:	83 c2 08             	add    edx,0x8
c001fdc3:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001fdc7:	0f b6 c9             	movzx  ecx,cl
c001fdca:	81 c9 00 00 01 00    	or     ecx,0x10000
c001fdd0:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001fdd4:	83 ec 0c             	sub    esp,0xc
c001fdd7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fdda:	e8 05 ff ff ff       	call   c001fce4 <APIC::getBase()>
c001fddf:	83 c4 10             	add    esp,0x10
c001fde2:	05 f0 00 00 00       	add    eax,0xf0
c001fde7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001fdea:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fded:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdef:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001fdf2:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c001fdf9:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c001fe00:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fe03:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001fe06:	89 10                	mov    DWORD PTR [eax],edx
c001fe08:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c001fe0f:	a1 70 6c 02 c0       	mov    eax,ds:0xc0026c70
c001fe14:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c001fe17:	7d 7c                	jge    c001fe95 <APIC::open(int, int, void*)+0x141>
c001fe19:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe1c:	8b 04 85 80 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9380]
c001fe23:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c001fe26:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe29:	8b 04 85 80 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9380]
c001fe30:	c1 e8 08             	shr    eax,0x8
c001fe33:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c001fe37:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe3a:	8b 04 85 80 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9380]
c001fe41:	c1 e8 18             	shr    eax,0x18
c001fe44:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c001fe47:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c001fe4b:	75 40                	jne    c001fe8d <APIC::open(int, int, void*)+0x139>
c001fe4d:	83 ec 0c             	sub    esp,0xc
c001fe50:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fe53:	e8 8c fe ff ff       	call   c001fce4 <APIC::getBase()>
c001fe58:	83 c4 10             	add    esp,0x10
c001fe5b:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c001fe5f:	75 07                	jne    c001fe68 <APIC::open(int, int, void*)+0x114>
c001fe61:	ba 60 03 00 00       	mov    edx,0x360
c001fe66:	eb 05                	jmp    c001fe6d <APIC::open(int, int, void*)+0x119>
c001fe68:	ba 50 03 00 00       	mov    edx,0x350
c001fe6d:	01 d0                	add    eax,edx
c001fe6f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001fe72:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fe75:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe77:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c001fe7a:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c001fe81:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c001fe85:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fe88:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001fe8b:	89 10                	mov    DWORD PTR [eax],edx
c001fe8d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c001fe90:	e9 7a ff ff ff       	jmp    c001fe0f <APIC::open(int, int, void*)+0xbb>
c001fe95:	b8 00 00 00 00       	mov    eax,0x0
c001fe9a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001fe9d:	5b                   	pop    ebx
c001fe9e:	5e                   	pop    esi
c001fe9f:	5f                   	pop    edi
c001fea0:	5d                   	pop    ebp
c001fea1:	c3                   	ret    

c001fea2 <IOAPIC::IOAPIC()>:
c001fea2:	83 ec 0c             	sub    esp,0xc
c001fea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea9:	83 ec 08             	sub    esp,0x8
c001feac:	68 24 54 02 c0       	push   0xc0025424
c001feb1:	50                   	push   eax
c001feb2:	e8 07 e2 fe ff       	call   c000e0be <Device::Device(char const*)>
c001feb7:	83 c4 10             	add    esp,0x10
c001feba:	ba 4c 55 02 c0       	mov    edx,0xc002554c
c001febf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec3:	89 10                	mov    DWORD PTR [eax],edx
c001fec5:	90                   	nop
c001fec6:	83 c4 0c             	add    esp,0xc
c001fec9:	c3                   	ret    

c001feca <APIC::APIC()>:
c001feca:	53                   	push   ebx
c001fecb:	83 ec 18             	sub    esp,0x18
c001fece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fed2:	83 ec 08             	sub    esp,0x8
c001fed5:	68 2c 54 02 c0       	push   0xc002542c
c001feda:	50                   	push   eax
c001fedb:	e8 56 e9 fe ff       	call   c000e836 <InterruptController::InterruptController(char const*)>
c001fee0:	83 c4 10             	add    esp,0x10
c001fee3:	ba 04 55 02 c0       	mov    edx,0xc0025504
c001fee8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001feec:	89 10                	mov    DWORD PTR [eax],edx
c001feee:	a0 40 83 02 c0       	mov    al,ds:0xc0028340
c001fef3:	83 f0 01             	xor    eax,0x1
c001fef6:	84 c0                	test   al,al
c001fef8:	0f 84 a1 00 00 00    	je     c001ff9f <APIC::APIC()+0xd5>
c001fefe:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ff03:	a0 20 6d 02 c0       	mov    al,ds:0xc0026d20
c001ff08:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001ff0c:	0f 83 86 00 00 00    	jae    c001ff98 <APIC::APIC()+0xce>
c001ff12:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001ff1a:	83 ec 0c             	sub    esp,0xc
c001ff1d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ff21:	e8 9d 9a fe ff       	call   c00099c3 <malloc>
c001ff26:	83 c4 10             	add    esp,0x10
c001ff29:	89 c3                	mov    ebx,eax
c001ff2b:	83 ec 0c             	sub    esp,0xc
c001ff2e:	53                   	push   ebx
c001ff2f:	e8 6e ff ff ff       	call   c001fea2 <IOAPIC::IOAPIC()>
c001ff34:	83 c4 10             	add    esp,0x10
c001ff37:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ff3b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ff40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff44:	89 14 85 20 83 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7ce0],edx
c001ff4b:	a1 00 83 02 c0       	mov    eax,ds:0xc0028300
c001ff50:	40                   	inc    eax
c001ff51:	a3 00 83 02 c0       	mov    ds:0xc0028300,eax
c001ff56:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c001ff5b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ff61:	83 ec 08             	sub    esp,0x8
c001ff64:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ff68:	50                   	push   eax
c001ff69:	e8 4c df fe ff       	call   c000deba <Device::addChild(Device*)>
c001ff6e:	83 c4 10             	add    esp,0x10
c001ff71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff75:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff77:	83 c0 08             	add    eax,0x8
c001ff7a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff7c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ff81:	6a 00                	push   0x0
c001ff83:	6a 00                	push   0x0
c001ff85:	52                   	push   edx
c001ff86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff8a:	ff d0                	call   eax
c001ff8c:	83 c4 10             	add    esp,0x10
c001ff8f:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001ff93:	e9 6b ff ff ff       	jmp    c001ff03 <APIC::APIC()+0x39>
c001ff98:	c6 05 40 83 02 c0 01 	mov    BYTE PTR ds:0xc0028340,0x1
c001ff9f:	90                   	nop
c001ffa0:	83 c4 18             	add    esp,0x18
c001ffa3:	5b                   	pop    ebx
c001ffa4:	c3                   	ret    
c001ffa5:	90                   	nop

c001ffa6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ffa6:	55                   	push   ebp
c001ffa7:	89 e5                	mov    ebp,esp
c001ffa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ffb2:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ffb5:	72 1d                	jb     c001ffd4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ffb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffba:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ffc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffc3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ffc9:	01 d0                	add    eax,edx
c001ffcb:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ffce:	73 04                	jae    c001ffd4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ffd0:	b0 01                	mov    al,0x1
c001ffd2:	eb 02                	jmp    c001ffd6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ffd4:	b0 00                	mov    al,0x0
c001ffd6:	5d                   	pop    ebp
c001ffd7:	c3                   	ret    

c001ffd8 <IOAPIC::read(int)>:
c001ffd8:	55                   	push   ebp
c001ffd9:	89 e5                	mov    ebp,esp
c001ffdb:	83 ec 10             	sub    esp,0x10
c001ffde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffe1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ffe7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ffea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ffed:	0f b6 d0             	movzx  edx,al
c001fff0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001fff3:	89 10                	mov    DWORD PTR [eax],edx
c001fff5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001fff8:	83 c0 10             	add    eax,0x10
c001fffb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fffd:	c9                   	leave  
c001fffe:	c3                   	ret    
c001ffff:	90                   	nop

c0020000 <IOAPIC::open(int, int, void*)>:
c0020000:	55                   	push   ebp
c0020001:	89 e5                	mov    ebp,esp
c0020003:	57                   	push   edi
c0020004:	56                   	push   esi
c0020005:	53                   	push   ebx
c0020006:	83 ec 0c             	sub    esp,0xc
c0020009:	83 ec 0c             	sub    esp,0xc
c002000c:	68 57 54 02 c0       	push   0xc0025457
c0020011:	e8 5d ca fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c0020016:	83 c4 10             	add    esp,0x10
c0020019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002001c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002001f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020028:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002002e:	8b 14 85 60 6d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd92a0]
c0020035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020038:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002003e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020041:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020047:	8b 14 85 e0 6d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9220]
c002004e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020051:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0020057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002005a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0020060:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020063:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020069:	0f b6 f8             	movzx  edi,al
c002006c:	89 d0                	mov    eax,edx
c002006e:	ba 00 00 00 00       	mov    edx,0x0
c0020073:	89 c1                	mov    ecx,eax
c0020075:	80 e5 ff             	and    ch,0xff
c0020078:	89 cb                	mov    ebx,ecx
c002007a:	0f b6 f2             	movzx  esi,dl
c002007d:	89 d8                	mov    eax,ebx
c002007f:	89 f2                	mov    edx,esi
c0020081:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020084:	8d 5f 08             	lea    ebx,[edi+0x8]
c0020087:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002008b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002008f:	83 e0 00             	and    eax,0x0
c0020092:	09 d0                	or     eax,edx
c0020094:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020098:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002009b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00200a1:	8d 50 01             	lea    edx,[eax+0x1]
c00200a4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00200a7:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00200ad:	0f b6 d0             	movzx  edx,al
c00200b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200b3:	83 c2 08             	add    edx,0x8
c00200b6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00200ba:	0f b6 c9             	movzx  ecx,cl
c00200bd:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00200c3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00200c7:	83 ec 08             	sub    esp,0x8
c00200ca:	6a 01                	push   0x1
c00200cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00200cf:	e8 04 ff ff ff       	call   c001ffd8 <IOAPIC::read(int)>
c00200d4:	83 c4 10             	add    esp,0x10
c00200d7:	c1 f8 10             	sar    eax,0x10
c00200da:	0f b6 c0             	movzx  eax,al
c00200dd:	8d 50 01             	lea    edx,[eax+0x1]
c00200e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200e3:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00200e9:	b8 00 00 00 00       	mov    eax,0x0
c00200ee:	8d 65 f4             	lea    esp,[ebp-0xc]
c00200f1:	5b                   	pop    ebx
c00200f2:	5e                   	pop    esi
c00200f3:	5f                   	pop    edi
c00200f4:	5d                   	pop    ebp
c00200f5:	c3                   	ret    

c00200f6 <IOAPIC::write(int, int)>:
c00200f6:	55                   	push   ebp
c00200f7:	89 e5                	mov    ebp,esp
c00200f9:	83 ec 10             	sub    esp,0x10
c00200fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200ff:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020105:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020108:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002010b:	0f b6 d0             	movzx  edx,al
c002010e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020111:	89 10                	mov    DWORD PTR [eax],edx
c0020113:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020116:	8d 50 10             	lea    edx,[eax+0x10]
c0020119:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002011c:	89 02                	mov    DWORD PTR [edx],eax
c002011e:	90                   	nop
c002011f:	c9                   	leave  
c0020120:	c3                   	ret    
c0020121:	90                   	nop

c0020122 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0020122:	55                   	push   ebp
c0020123:	89 e5                	mov    ebp,esp
c0020125:	53                   	push   ebx
c0020126:	83 ec 2c             	sub    esp,0x2c
c0020129:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002012c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002012f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0020132:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0020135:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020138:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002013b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002013e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020141:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0020144:	88 d8                	mov    al,bl
c0020146:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020149:	88 c8                	mov    al,cl
c002014b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002014e:	88 d0                	mov    al,dl
c0020150:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0020153:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020157:	83 c0 08             	add    eax,0x8
c002015a:	01 c0                	add    eax,eax
c002015c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002015f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020163:	83 c0 08             	add    eax,0x8
c0020166:	01 c0                	add    eax,eax
c0020168:	40                   	inc    eax
c0020169:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002016c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002016f:	50                   	push   eax
c0020170:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020173:	e8 60 fe ff ff       	call   c001ffd8 <IOAPIC::read(int)>
c0020178:	83 c4 08             	add    esp,0x8
c002017b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002017e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020185:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020188:	c1 e0 18             	shl    eax,0x18
c002018b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002018e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020191:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020194:	52                   	push   edx
c0020195:	50                   	push   eax
c0020196:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020199:	e8 58 ff ff ff       	call   c00200f6 <IOAPIC::write(int, int)>
c002019e:	83 c4 0c             	add    esp,0xc
c00201a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00201a4:	50                   	push   eax
c00201a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00201a8:	e8 2b fe ff ff       	call   c001ffd8 <IOAPIC::read(int)>
c00201ad:	83 c4 08             	add    esp,0x8
c00201b0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00201b3:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00201ba:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00201c1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00201c8:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00201cc:	74 09                	je     c00201d7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00201ce:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00201d5:	eb 07                	jmp    c00201de <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00201d7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00201de:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00201e2:	74 09                	je     c00201ed <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00201e4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00201eb:	eb 07                	jmp    c00201f4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00201ed:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00201f4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00201fb:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00201ff:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0020202:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020205:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020208:	52                   	push   edx
c0020209:	50                   	push   eax
c002020a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002020d:	e8 e4 fe ff ff       	call   c00200f6 <IOAPIC::write(int, int)>
c0020212:	83 c4 0c             	add    esp,0xc
c0020215:	90                   	nop
c0020216:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020219:	c9                   	leave  
c002021a:	c3                   	ret    
c002021b:	90                   	nop

c002021c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002021c:	55                   	push   ebp
c002021d:	89 e5                	mov    ebp,esp
c002021f:	57                   	push   edi
c0020220:	56                   	push   esi
c0020221:	53                   	push   ebx
c0020222:	83 ec 2c             	sub    esp,0x2c
c0020225:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020228:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002022b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002022f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0020233:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0020237:	74 5a                	je     c0020293 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0020239:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002023d:	7f 44                	jg     c0020283 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002023f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020242:	05 00 5b 02 c0       	add    eax,0xc0025b00
c0020247:	8a 00                	mov    al,BYTE PTR [eax]
c0020249:	0f b6 c0             	movzx  eax,al
c002024c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002024f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020252:	66 8b 84 00 00 6d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9300]
c002025a:	0f b7 c0             	movzx  eax,ax
c002025d:	83 e0 02             	and    eax,0x2
c0020260:	85 c0                	test   eax,eax
c0020262:	74 04                	je     c0020268 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0020264:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0020268:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002026b:	66 8b 84 00 00 6d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9300]
c0020273:	0f b7 c0             	movzx  eax,ax
c0020276:	83 e0 08             	and    eax,0x8
c0020279:	85 c0                	test   eax,eax
c002027b:	74 16                	je     c0020293 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002027d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0020281:	eb 10                	jmp    c0020293 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0020283:	83 ec 0c             	sub    esp,0xc
c0020286:	68 68 54 02 c0       	push   0xc0025468
c002028b:	e8 a5 40 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0020290:	83 c4 10             	add    esp,0x10
c0020293:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0020297:	a1 00 83 02 c0       	mov    eax,ds:0xc0028300
c002029c:	83 ec 08             	sub    esp,0x8
c002029f:	50                   	push   eax
c00202a0:	68 a0 54 02 c0       	push   0xc00254a0
c00202a5:	e8 c9 c7 fe ff       	call   c000ca73 <Dbg::kprintf(char const*, ...)>
c00202aa:	83 c4 10             	add    esp,0x10
c00202ad:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00202b4:	a1 00 83 02 c0       	mov    eax,ds:0xc0028300
c00202b9:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00202bc:	7d 67                	jge    c0020325 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00202be:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00202c1:	8b 04 85 20 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce0]
c00202c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00202cb:	83 ec 08             	sub    esp,0x8
c00202ce:	52                   	push   edx
c00202cf:	50                   	push   eax
c00202d0:	e8 d1 fc ff ff       	call   c001ffa6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00202d5:	83 c4 10             	add    esp,0x10
c00202d8:	84 c0                	test   al,al
c00202da:	74 44                	je     c0020320 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00202dc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00202df:	8b 1c 85 20 83 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7ce0]
c00202e6:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00202ea:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00202ed:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00202f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00202f4:	83 c0 20             	add    eax,0x20
c00202f7:	0f b6 f0             	movzx  esi,al
c00202fa:	b8 00 00 00 00       	mov    eax,0x0
c00202ff:	99                   	cdq    
c0020300:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0020303:	0f b6 c9             	movzx  ecx,cl
c0020306:	83 ec 04             	sub    esp,0x4
c0020309:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002030c:	57                   	push   edi
c002030d:	56                   	push   esi
c002030e:	52                   	push   edx
c002030f:	50                   	push   eax
c0020310:	51                   	push   ecx
c0020311:	53                   	push   ebx
c0020312:	e8 0b fe ff ff       	call   c0020122 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0020317:	83 c4 20             	add    esp,0x20
c002031a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002031e:	eb 05                	jmp    c0020325 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0020320:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0020323:	eb 8f                	jmp    c00202b4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0020325:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0020328:	83 f0 01             	xor    eax,0x1
c002032b:	84 c0                	test   al,al
c002032d:	74 10                	je     c002033f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002032f:	83 ec 0c             	sub    esp,0xc
c0020332:	68 b7 54 02 c0       	push   0xc00254b7
c0020337:	e8 f9 3f ff ff       	call   c0014335 <Krnl::panic(char const*)>
c002033c:	83 c4 10             	add    esp,0x10
c002033f:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0020343:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002034a:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002034e:	7f 65                	jg     c00203b5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0020350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020353:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020356:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002035d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020360:	01 ca                	add    edx,ecx
c0020362:	83 c2 54             	add    edx,0x54
c0020365:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0020369:	85 c0                	test   eax,eax
c002036b:	75 43                	jne    c00203b0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002036d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020373:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002037a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002037d:	01 ca                	add    edx,ecx
c002037f:	8d 4a 54             	lea    ecx,[edx+0x54]
c0020382:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0020385:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0020389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002038c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002038f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0020396:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020399:	01 ca                	add    edx,ecx
c002039b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00203a1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00203a4:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00203a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00203ab:	83 e8 20             	sub    eax,0x20
c00203ae:	eb 1a                	jmp    c00203ca <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00203b0:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00203b3:	eb 95                	jmp    c002034a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00203b5:	83 ec 0c             	sub    esp,0xc
c00203b8:	68 c4 54 02 c0       	push   0xc00254c4
c00203bd:	e8 73 3f ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00203c2:	83 c4 10             	add    esp,0x10
c00203c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00203ca:	8d 65 f4             	lea    esp,[ebp-0xc]
c00203cd:	5b                   	pop    ebx
c00203ce:	5e                   	pop    esi
c00203cf:	5f                   	pop    edi
c00203d0:	5d                   	pop    ebp
c00203d1:	c3                   	ret    

c00203d2 <PIC::disable()>:
c00203d2:	55                   	push   ebp
c00203d3:	89 e5                	mov    ebp,esp
c00203d5:	83 ec 10             	sub    esp,0x10
c00203d8:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00203de:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00203e2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00203e5:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00203e9:	ee                   	out    dx,al
c00203ea:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00203f0:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00203f4:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00203f7:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00203fb:	ee                   	out    dx,al
c00203fc:	90                   	nop
c00203fd:	c9                   	leave  
c00203fe:	c3                   	ret    
c00203ff:	90                   	nop

c0020400 <PIC::close(int, int, void*)>:
c0020400:	55                   	push   ebp
c0020401:	89 e5                	mov    ebp,esp
c0020403:	83 ec 08             	sub    esp,0x8
c0020406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020409:	8b 00                	mov    eax,DWORD PTR [eax]
c002040b:	83 c0 3c             	add    eax,0x3c
c002040e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020410:	83 ec 0c             	sub    esp,0xc
c0020413:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020416:	ff d0                	call   eax
c0020418:	83 c4 10             	add    esp,0x10
c002041b:	b8 00 00 00 00       	mov    eax,0x0
c0020420:	c9                   	leave  
c0020421:	c3                   	ret    

c0020422 <PIC::PIC()>:
c0020422:	83 ec 0c             	sub    esp,0xc
c0020425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020429:	83 ec 08             	sub    esp,0x8
c002042c:	68 70 55 02 c0       	push   0xc0025570
c0020431:	50                   	push   eax
c0020432:	e8 ff e3 fe ff       	call   c000e836 <InterruptController::InterruptController(char const*)>
c0020437:	83 c4 10             	add    esp,0x10
c002043a:	ba 9c 55 02 c0       	mov    edx,0xc002559c
c002043f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020443:	89 10                	mov    DWORD PTR [eax],edx
c0020445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020449:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002044f:	0f b6 d0             	movzx  edx,al
c0020452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020456:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002045d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020461:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020467:	0f b6 d0             	movzx  edx,al
c002046a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002046e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0020473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020477:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002047d:	8d 50 01             	lea    edx,[eax+0x1]
c0020480:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020484:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002048a:	0f b6 d0             	movzx  edx,al
c002048d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020491:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020495:	83 e1 3f             	and    ecx,0x3f
c0020498:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002049c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204a6:	0f b6 d0             	movzx  edx,al
c00204a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ad:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00204b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204be:	0f b6 d0             	movzx  edx,al
c00204c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204c5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00204ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ce:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204d4:	8d 50 01             	lea    edx,[eax+0x1]
c00204d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00204db:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00204e1:	0f b6 d0             	movzx  edx,al
c00204e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204e8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00204ec:	83 e1 3f             	and    ecx,0x3f
c00204ef:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00204f3:	90                   	nop
c00204f4:	83 c4 0c             	add    esp,0xc
c00204f7:	c3                   	ret    

c00204f8 <PIC::ioWait()>:
c00204f8:	eb 00                	jmp    c00204fa <PIC::ioWait()+0x2>
c00204fa:	eb 00                	jmp    c00204fc <PIC::ioWait()+0x4>
c00204fc:	90                   	nop
c00204fd:	c3                   	ret    

c00204fe <PIC::getIRQReg(int)>:
c00204fe:	55                   	push   ebp
c00204ff:	89 e5                	mov    ebp,esp
c0020501:	83 ec 10             	sub    esp,0x10
c0020504:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020507:	0f b6 c0             	movzx  eax,al
c002050a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0020510:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0020513:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0020516:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002051a:	ee                   	out    dx,al
c002051b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002051e:	0f b6 c0             	movzx  eax,al
c0020521:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0020527:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002052a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002052d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0020531:	ee                   	out    dx,al
c0020532:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0020538:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002053c:	89 c2                	mov    edx,eax
c002053e:	ec                   	in     al,dx
c002053f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0020542:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020545:	0f b6 c0             	movzx  eax,al
c0020548:	c1 e0 08             	shl    eax,0x8
c002054b:	89 c1                	mov    ecx,eax
c002054d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0020553:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0020557:	89 c2                	mov    edx,eax
c0020559:	ec                   	in     al,dx
c002055a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002055d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0020560:	0f b6 c0             	movzx  eax,al
c0020563:	09 c8                	or     eax,ecx
c0020565:	c9                   	leave  
c0020566:	c3                   	ret    
c0020567:	90                   	nop

c0020568 <PIC::eoi(unsigned char)>:
c0020568:	55                   	push   ebp
c0020569:	89 e5                	mov    ebp,esp
c002056b:	83 ec 14             	sub    esp,0x14
c002056e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020571:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0020574:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0020578:	75 1e                	jne    c0020598 <PIC::eoi(unsigned char)+0x30>
c002057a:	6a 0b                	push   0xb
c002057c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002057f:	e8 7a ff ff ff       	call   c00204fe <PIC::getIRQReg(int)>
c0020584:	83 c4 08             	add    esp,0x8
c0020587:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002058b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002058f:	25 80 00 00 00       	and    eax,0x80
c0020594:	85 c0                	test   eax,eax
c0020596:	74 5f                	je     c00205f7 <PIC::eoi(unsigned char)+0x8f>
c0020598:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002059c:	75 2d                	jne    c00205cb <PIC::eoi(unsigned char)+0x63>
c002059e:	6a 0b                	push   0xb
c00205a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00205a3:	e8 56 ff ff ff       	call   c00204fe <PIC::getIRQReg(int)>
c00205a8:	83 c4 08             	add    esp,0x8
c00205ab:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00205af:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00205b2:	66 85 c0             	test   ax,ax
c00205b5:	78 14                	js     c00205cb <PIC::eoi(unsigned char)+0x63>
c00205b7:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00205bd:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00205c1:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00205c4:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00205c8:	ee                   	out    dx,al
c00205c9:	eb 2d                	jmp    c00205f8 <PIC::eoi(unsigned char)+0x90>
c00205cb:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00205cf:	76 12                	jbe    c00205e3 <PIC::eoi(unsigned char)+0x7b>
c00205d1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00205d7:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00205db:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00205de:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00205e2:	ee                   	out    dx,al
c00205e3:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00205e9:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00205ed:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00205f0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00205f4:	ee                   	out    dx,al
c00205f5:	eb 01                	jmp    c00205f8 <PIC::eoi(unsigned char)+0x90>
c00205f7:	90                   	nop
c00205f8:	c9                   	leave  
c00205f9:	c3                   	ret    

c00205fa <PIC::remap()>:
c00205fa:	55                   	push   ebp
c00205fb:	89 e5                	mov    ebp,esp
c00205fd:	83 ec 48             	sub    esp,0x48
c0020600:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0020607:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002060e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0020614:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0020617:	89 c2                	mov    edx,eax
c0020619:	ec                   	in     al,dx
c002061a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002061d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0020620:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0020623:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0020629:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002062c:	89 c2                	mov    edx,eax
c002062e:	ec                   	in     al,dx
c002062f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0020632:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0020635:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0020638:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002063e:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0020642:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0020645:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0020648:	ee                   	out    dx,al
c0020649:	83 ec 0c             	sub    esp,0xc
c002064c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002064f:	e8 a4 fe ff ff       	call   c00204f8 <PIC::ioWait()>
c0020654:	83 c4 10             	add    esp,0x10
c0020657:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002065d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0020661:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0020664:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0020667:	ee                   	out    dx,al
c0020668:	83 ec 0c             	sub    esp,0xc
c002066b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002066e:	e8 85 fe ff ff       	call   c00204f8 <PIC::ioWait()>
c0020673:	83 c4 10             	add    esp,0x10
c0020676:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0020679:	0f b6 c0             	movzx  eax,al
c002067c:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0020682:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0020685:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0020688:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002068b:	ee                   	out    dx,al
c002068c:	83 ec 0c             	sub    esp,0xc
c002068f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020692:	e8 61 fe ff ff       	call   c00204f8 <PIC::ioWait()>
c0020697:	83 c4 10             	add    esp,0x10
c002069a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002069d:	0f b6 c0             	movzx  eax,al
c00206a0:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00206a6:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00206a9:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00206ac:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00206af:	ee                   	out    dx,al
c00206b0:	83 ec 0c             	sub    esp,0xc
c00206b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206b6:	e8 3d fe ff ff       	call   c00204f8 <PIC::ioWait()>
c00206bb:	83 c4 10             	add    esp,0x10
c00206be:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00206c4:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00206c8:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00206cb:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00206ce:	ee                   	out    dx,al
c00206cf:	83 ec 0c             	sub    esp,0xc
c00206d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206d5:	e8 1e fe ff ff       	call   c00204f8 <PIC::ioWait()>
c00206da:	83 c4 10             	add    esp,0x10
c00206dd:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00206e3:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00206e7:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00206ea:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00206ed:	ee                   	out    dx,al
c00206ee:	83 ec 0c             	sub    esp,0xc
c00206f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206f4:	e8 ff fd ff ff       	call   c00204f8 <PIC::ioWait()>
c00206f9:	83 c4 10             	add    esp,0x10
c00206fc:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0020702:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0020706:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0020709:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002070c:	ee                   	out    dx,al
c002070d:	83 ec 0c             	sub    esp,0xc
c0020710:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020713:	e8 e0 fd ff ff       	call   c00204f8 <PIC::ioWait()>
c0020718:	83 c4 10             	add    esp,0x10
c002071b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0020721:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0020725:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0020728:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002072b:	ee                   	out    dx,al
c002072c:	83 ec 0c             	sub    esp,0xc
c002072f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020732:	e8 c1 fd ff ff       	call   c00204f8 <PIC::ioWait()>
c0020737:	83 c4 10             	add    esp,0x10
c002073a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002073e:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0020744:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0020747:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002074a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002074d:	ee                   	out    dx,al
c002074e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0020752:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0020758:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002075b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002075e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020761:	ee                   	out    dx,al
c0020762:	90                   	nop
c0020763:	c9                   	leave  
c0020764:	c3                   	ret    
c0020765:	90                   	nop

c0020766 <PIC::open(int, int, void*)>:
c0020766:	55                   	push   ebp
c0020767:	89 e5                	mov    ebp,esp
c0020769:	83 ec 18             	sub    esp,0x18
c002076c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0020772:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0020776:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0020779:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002077d:	ee                   	out    dx,al
c002077e:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0020784:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0020788:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002078b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002078f:	ee                   	out    dx,al
c0020790:	83 ec 0c             	sub    esp,0xc
c0020793:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020796:	e8 5f fe ff ff       	call   c00205fa <PIC::remap()>
c002079b:	83 c4 10             	add    esp,0x10
c002079e:	b8 00 00 00 00       	mov    eax,0x0
c00207a3:	c9                   	leave  
c00207a4:	c3                   	ret    
c00207a5:	66 90                	xchg   ax,ax
c00207a7:	90                   	nop

c00207a8 <APICTimer::close(int, int, void*)>:
c00207a8:	b8 00 00 00 00       	mov    eax,0x0
c00207ad:	c3                   	ret    
c00207ae:	66 90                	xchg   ax,ax

c00207b0 <apicTimerHandler(regs*, void*)>:
c00207b0:	83 ec 0c             	sub    esp,0xc
c00207b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207b7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00207b9:	b8 10 27 00 00       	mov    eax,0x2710
c00207be:	ba 00 00 00 00       	mov    edx,0x0
c00207c3:	f7 f1                	div    ecx
c00207c5:	83 ec 0c             	sub    esp,0xc
c00207c8:	50                   	push   eax
c00207c9:	e8 73 ff fe ff       	call   c0010741 <timerHandler(unsigned int)>
c00207ce:	83 c4 10             	add    esp,0x10
c00207d1:	90                   	nop
c00207d2:	83 c4 0c             	add    esp,0xc
c00207d5:	c3                   	ret    
c00207d6:	66 90                	xchg   ax,ax

c00207d8 <APICTimer::write(int)>:
c00207d8:	83 ec 1c             	sub    esp,0x1c
c00207db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207df:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00207e3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00207e9:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c00207ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00207f4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00207fa:	83 ec 0c             	sub    esp,0xc
c00207fd:	50                   	push   eax
c00207fe:	e8 e1 f4 ff ff       	call   c001fce4 <APIC::getBase()>
c0020803:	83 c4 10             	add    esp,0x10
c0020806:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002080a:	a1 2c 6a 02 c0       	mov    eax,ds:0xc0026a2c
c002080f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020813:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020817:	05 e0 03 00 00       	add    eax,0x3e0
c002081c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0020822:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020826:	05 80 03 00 00       	add    eax,0x380
c002082b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0020831:	fb                   	sti    
c0020832:	66 90                	xchg   ax,ax
c0020834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020838:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c002083e:	a1 2c 6a 02 c0       	mov    eax,ds:0xc0026a2c
c0020843:	39 c2                	cmp    edx,eax
c0020845:	76 05                	jbe    c002084c <APICTimer::write(int)+0x74>
c0020847:	eb eb                	jmp    c0020834 <APICTimer::write(int)+0x5c>
c0020849:	8d 76 00             	lea    esi,[esi+0x0]
c002084c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020850:	05 20 03 00 00       	add    eax,0x320
c0020855:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002085b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002085f:	05 90 03 00 00       	add    eax,0x390
c0020864:	8b 00                	mov    eax,DWORD PTR [eax]
c0020866:	f7 d0                	not    eax
c0020868:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002086c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020874:	ba 00 00 00 00       	mov    edx,0x0
c0020879:	f7 f1                	div    ecx
c002087b:	89 04 24             	mov    DWORD PTR [esp],eax
c002087e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020882:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020888:	0d 00 00 02 00       	or     eax,0x20000
c002088d:	89 c2                	mov    edx,eax
c002088f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020893:	05 20 03 00 00       	add    eax,0x320
c0020898:	89 10                	mov    DWORD PTR [eax],edx
c002089a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002089e:	05 e0 03 00 00       	add    eax,0x3e0
c00208a3:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00208a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208ad:	05 80 03 00 00       	add    eax,0x380
c00208b2:	89 c2                	mov    edx,eax
c00208b4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00208b7:	89 02                	mov    DWORD PTR [edx],eax
c00208b9:	90                   	nop
c00208ba:	83 c4 1c             	add    esp,0x1c
c00208bd:	c3                   	ret    
c00208be:	66 90                	xchg   ax,ax

c00208c0 <APICTimer::open(int, int, void*)>:
c00208c0:	57                   	push   edi
c00208c1:	56                   	push   esi
c00208c2:	53                   	push   ebx
c00208c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00208c9:	83 c0 24             	add    eax,0x24
c00208cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00208ce:	83 ec 08             	sub    esp,0x8
c00208d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208d9:	ff d0                	call   eax
c00208db:	83 c4 10             	add    esp,0x10
c00208de:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c00208e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00208e9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00208ef:	83 ec 0c             	sub    esp,0xc
c00208f2:	50                   	push   eax
c00208f3:	e8 ec f3 ff ff       	call   c001fce4 <APIC::getBase()>
c00208f8:	83 c4 10             	add    esp,0x10
c00208fb:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0020901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020905:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002090b:	0f b6 f8             	movzx  edi,al
c002090e:	89 d0                	mov    eax,edx
c0020910:	ba 00 00 00 00       	mov    edx,0x0
c0020915:	89 c1                	mov    ecx,eax
c0020917:	80 e5 ff             	and    ch,0xff
c002091a:	89 cb                	mov    ebx,ecx
c002091c:	0f b6 f2             	movzx  esi,dl
c002091f:	89 d8                	mov    eax,ebx
c0020921:	89 f2                	mov    edx,esi
c0020923:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020927:	8d 5f 08             	lea    ebx,[edi+0x8]
c002092a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002092e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020932:	83 e0 00             	and    eax,0x0
c0020935:	09 d0                	or     eax,edx
c0020937:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002093b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002093f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020945:	8d 50 01             	lea    edx,[eax+0x1]
c0020948:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002094c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0020952:	0f b6 d0             	movzx  edx,al
c0020955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020959:	83 c2 08             	add    edx,0x8
c002095c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020960:	0f b6 c9             	movzx  ecx,cl
c0020963:	81 c9 00 00 01 00    	or     ecx,0x10000
c0020969:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002096d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020971:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020975:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002097b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002097f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020983:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020989:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002098d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020993:	83 ec 0c             	sub    esp,0xc
c0020996:	51                   	push   ecx
c0020997:	6a 01                	push   0x1
c0020999:	68 b0 07 02 c0       	push   0xc00207b0
c002099e:	52                   	push   edx
c002099f:	50                   	push   eax
c00209a0:	e8 8d d4 fe ff       	call   c000de32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00209a5:	83 c4 20             	add    esp,0x20
c00209a8:	89 c2                	mov    edx,eax
c00209aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209ae:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00209b4:	b8 00 00 00 00       	mov    eax,0x0
c00209b9:	5b                   	pop    ebx
c00209ba:	5e                   	pop    esi
c00209bb:	5f                   	pop    edi
c00209bc:	c3                   	ret    
c00209bd:	90                   	nop
c00209be:	66 90                	xchg   ax,ax

c00209c0 <APICTimer::APICTimer()>:
c00209c0:	83 ec 0c             	sub    esp,0xc
c00209c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209c7:	83 ec 08             	sub    esp,0x8
c00209ca:	68 dc 55 02 c0       	push   0xc00255dc
c00209cf:	50                   	push   eax
c00209d0:	e8 db fc fe ff       	call   c00106b0 <Timer::Timer(char const*)>
c00209d5:	83 c4 10             	add    esp,0x10
c00209d8:	ba f0 55 02 c0       	mov    edx,0xc00255f0
c00209dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209e1:	89 10                	mov    DWORD PTR [eax],edx
c00209e3:	90                   	nop
c00209e4:	83 c4 0c             	add    esp,0xc
c00209e7:	c3                   	ret    

c00209e8 <PIT::write(int)>:
c00209e8:	83 ec 10             	sub    esp,0x10
c00209eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00209f3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00209f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00209fd:	a3 44 83 02 c0       	mov    ds:0xc0028344,eax
c0020a02:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0020a07:	99                   	cdq    
c0020a08:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020a0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a10:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020a17:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020a1c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020a20:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020a25:	ee                   	out    dx,al
c0020a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a2a:	0f b6 c0             	movzx  eax,al
c0020a2d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020a34:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020a38:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020a3c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020a41:	ee                   	out    dx,al
c0020a42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a46:	c1 f8 08             	sar    eax,0x8
c0020a49:	0f b6 c0             	movzx  eax,al
c0020a4c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020a53:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020a57:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020a5b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020a60:	ee                   	out    dx,al
c0020a61:	90                   	nop
c0020a62:	83 c4 10             	add    esp,0x10
c0020a65:	c3                   	ret    
c0020a66:	66 90                	xchg   ax,ax

c0020a68 <pitHandler(regs*, void*)>:
c0020a68:	83 ec 0c             	sub    esp,0xc
c0020a6b:	8b 0d 44 83 02 c0    	mov    ecx,DWORD PTR ds:0xc0028344
c0020a71:	b8 a0 86 01 00       	mov    eax,0x186a0
c0020a76:	99                   	cdq    
c0020a77:	f7 f9                	idiv   ecx
c0020a79:	83 ec 0c             	sub    esp,0xc
c0020a7c:	50                   	push   eax
c0020a7d:	e8 bf fc fe ff       	call   c0010741 <timerHandler(unsigned int)>
c0020a82:	83 c4 10             	add    esp,0x10
c0020a85:	90                   	nop
c0020a86:	83 c4 0c             	add    esp,0xc
c0020a89:	c3                   	ret    
c0020a8a:	66 90                	xchg   ax,ax

c0020a8c <PIT::open(int, int, void*)>:
c0020a8c:	83 ec 0c             	sub    esp,0xc
c0020a8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a93:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a95:	83 c0 24             	add    eax,0x24
c0020a98:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a9a:	83 ec 08             	sub    esp,0x8
c0020a9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020aa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020aa5:	ff d0                	call   eax
c0020aa7:	83 c4 10             	add    esp,0x10
c0020aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aae:	83 ec 0c             	sub    esp,0xc
c0020ab1:	6a 00                	push   0x0
c0020ab3:	6a 01                	push   0x1
c0020ab5:	68 68 0a 02 c0       	push   0xc0020a68
c0020aba:	6a 00                	push   0x0
c0020abc:	50                   	push   eax
c0020abd:	e8 70 d3 fe ff       	call   c000de32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020ac2:	83 c4 20             	add    esp,0x20
c0020ac5:	89 c2                	mov    edx,eax
c0020ac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020acb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020ad1:	b8 00 00 00 00       	mov    eax,0x0
c0020ad6:	83 c4 0c             	add    esp,0xc
c0020ad9:	c3                   	ret    
c0020ada:	66 90                	xchg   ax,ax

c0020adc <PIT::close(int, int, void*)>:
c0020adc:	83 ec 0c             	sub    esp,0xc
c0020adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ae3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020af1:	6a 01                	push   0x1
c0020af3:	68 68 0a 02 c0       	push   0xc0020a68
c0020af8:	6a 00                	push   0x0
c0020afa:	50                   	push   eax
c0020afb:	e8 7c d3 fe ff       	call   c000de7c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020b00:	83 c4 10             	add    esp,0x10
c0020b03:	b8 00 00 00 00       	mov    eax,0x0
c0020b08:	83 c4 0c             	add    esp,0xc
c0020b0b:	c3                   	ret    

c0020b0c <PIT::PIT()>:
c0020b0c:	83 ec 0c             	sub    esp,0xc
c0020b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b13:	83 ec 08             	sub    esp,0x8
c0020b16:	68 18 56 02 c0       	push   0xc0025618
c0020b1b:	50                   	push   eax
c0020b1c:	e8 8f fb fe ff       	call   c00106b0 <Timer::Timer(char const*)>
c0020b21:	83 c4 10             	add    esp,0x10
c0020b24:	ba 40 56 02 c0       	mov    edx,0xc0025640
c0020b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b2d:	89 10                	mov    DWORD PTR [eax],edx
c0020b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b33:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020b39:	0f b6 d0             	movzx  edx,al
c0020b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b40:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b4b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020b51:	0f b6 d0             	movzx  edx,al
c0020b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b58:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b61:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020b67:	8d 50 01             	lea    edx,[eax+0x1]
c0020b6a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020b6e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020b74:	0f b6 d0             	movzx  edx,al
c0020b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b7b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020b7f:	83 e1 3f             	and    ecx,0x3f
c0020b82:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020b86:	90                   	nop
c0020b87:	83 c4 0c             	add    esp,0xc
c0020b8a:	c3                   	ret    
c0020b8b:	66 90                	xchg   ax,ax
c0020b8d:	66 90                	xchg   ax,ax
c0020b8f:	90                   	nop

c0020b90 <avxDetect>:
c0020b90:	b8 00 00 00 00       	mov    eax,0x0
c0020b95:	c3                   	ret    

c0020b96 <avxSave>:
c0020b96:	c3                   	ret    

c0020b97 <avxLoad>:
c0020b97:	c3                   	ret    

c0020b98 <avxInit>:
c0020b98:	c3                   	ret    

c0020b99 <avxClose>:
c0020b99:	c3                   	ret    

c0020b9a <wouldSheSayYes>:
c0020b9a:	c3                   	ret    
c0020b9b:	49                   	dec    ecx
c0020b9c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0020ba0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0020ba4:	75 20                	jne    c0020bc6 <sseDetect.noSSE+0x1>
c0020ba6:	4e                   	dec    esi
c0020ba7:	79 61                	jns    c0020c0a <x87Detect+0x14>
c0020ba9:	68 2e 2e 2e 00       	push   0x2e2e2e
c0020bae:	66 90                	xchg   ax,ax

c0020bb0 <absolutelyNoChanceInHell>:
c0020bb0:	b8 01 00 00 00       	mov    eax,0x1
c0020bb5:	0f a2                	cpuid  
c0020bb7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0020bbd:	74 06                	je     c0020bc5 <sseDetect.noSSE>
c0020bbf:	b8 01 00 00 00       	mov    eax,0x1
c0020bc4:	c3                   	ret    

c0020bc5 <sseDetect.noSSE>:
c0020bc5:	31 c0                	xor    eax,eax
c0020bc7:	c3                   	ret    

c0020bc8 <sseSave>:
c0020bc8:	0f ae 44 24 04       	fxsave [esp+0x4]
c0020bcd:	c3                   	ret    

c0020bce <sseLoad>:
c0020bce:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0020bd3:	c3                   	ret    

c0020bd4 <sseInit>:
c0020bd4:	e8 49 00 00 00       	call   c0020c22 <x87Init>
c0020bd9:	0f 20 e0             	mov    eax,cr4
c0020bdc:	66 0d 00 06          	or     ax,0x600
c0020be0:	0f 22 e0             	mov    cr4,eax
c0020be3:	c3                   	ret    

c0020be4 <sseClose>:
c0020be4:	c3                   	ret    
c0020be5:	66 90                	xchg   ax,ax
c0020be7:	66 90                	xchg   ax,ax
c0020be9:	66 90                	xchg   ax,ax
c0020beb:	66 90                	xchg   ax,ax
c0020bed:	66 90                	xchg   ax,ax
c0020bef:	90                   	nop

c0020bf0 <value_37F>:
c0020bf0:	7f 03                	jg     c0020bf5 <value_37A+0x1>

c0020bf2 <value_37E>:
c0020bf2:	7e 03                	jle    c0020bf7 <x87Detect+0x1>

c0020bf4 <value_37A>:
c0020bf4:	7a 03                	jp     c0020bf9 <x87Detect+0x3>

c0020bf6 <x87Detect>:
c0020bf6:	b8 01 00 00 00       	mov    eax,0x1
c0020bfb:	0f a2                	cpuid  
c0020bfd:	f7 c2 01 00 00 00    	test   edx,0x1
c0020c03:	74 06                	je     c0020c0b <x87Detect.nox87>
c0020c05:	b8 01 00 00 00       	mov    eax,0x1
c0020c0a:	c3                   	ret    

c0020c0b <x87Detect.nox87>:
c0020c0b:	b8 00 00 00 00       	mov    eax,0x0
c0020c10:	c3                   	ret    

c0020c11 <x87Save>:
c0020c11:	55                   	push   ebp
c0020c12:	89 e5                	mov    ebp,esp
c0020c14:	9b dd 75 08          	fsave  [ebp+0x8]
c0020c18:	c9                   	leave  
c0020c19:	c3                   	ret    

c0020c1a <x87Load>:
c0020c1a:	55                   	push   ebp
c0020c1b:	89 e5                	mov    ebp,esp
c0020c1d:	dd 65 08             	frstor [ebp+0x8]
c0020c20:	c9                   	leave  
c0020c21:	c3                   	ret    

c0020c22 <x87Init>:
c0020c22:	9b db e3             	finit  
c0020c25:	0f 20 c0             	mov    eax,cr0
c0020c28:	66 25 fb ff          	and    ax,0xfffb
c0020c2c:	66 0d 22 00          	or     ax,0x22
c0020c30:	0f 22 c0             	mov    cr0,eax
c0020c33:	0f 06                	clts   
c0020c35:	d9 2d f4 0b 02 c0    	fldcw  WORD PTR ds:0xc0020bf4
c0020c3b:	c3                   	ret    

c0020c3c <x87Close>:
c0020c3c:	c3                   	ret    
c0020c3d:	66 90                	xchg   ax,ax
c0020c3f:	90                   	nop

c0020c40 <__do_global_ctors_aux>:
c0020c40:	a1 dc 1d 02 c0       	mov    eax,ds:0xc0021ddc
c0020c45:	83 f8 ff             	cmp    eax,0xffffffff
c0020c48:	74 1a                	je     c0020c64 <__do_global_ctors_aux+0x24>
c0020c4a:	55                   	push   ebp
c0020c4b:	89 e5                	mov    ebp,esp
c0020c4d:	53                   	push   ebx
c0020c4e:	52                   	push   edx
c0020c4f:	bb dc 1d 02 c0       	mov    ebx,0xc0021ddc
c0020c54:	ff d0                	call   eax
c0020c56:	83 eb 04             	sub    ebx,0x4
c0020c59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020c5b:	83 f8 ff             	cmp    eax,0xffffffff
c0020c5e:	75 f4                	jne    c0020c54 <__do_global_ctors_aux+0x14>
c0020c60:	58                   	pop    eax
c0020c61:	5b                   	pop    ebx
c0020c62:	5d                   	pop    ebp
c0020c63:	c3                   	ret    
c0020c64:	c3                   	ret    
c0020c65:	66 90                	xchg   ax,ax
c0020c67:	90                   	nop

c0020c68 <__divdi3>:
c0020c68:	55                   	push   ebp
c0020c69:	57                   	push   edi
c0020c6a:	56                   	push   esi
c0020c6b:	53                   	push   ebx
c0020c6c:	83 ec 1c             	sub    esp,0x1c
c0020c6f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0020c73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020c77:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020c7a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020c7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020c82:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020c86:	85 db                	test   ebx,ebx
c0020c88:	0f 88 8e 00 00 00    	js     c0020d1c <__divdi3+0xb4>
c0020c8e:	89 dd                	mov    ebp,ebx
c0020c90:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020c98:	89 d3                	mov    ebx,edx
c0020c9a:	85 d2                	test   edx,edx
c0020c9c:	79 0d                	jns    c0020cab <__divdi3+0x43>
c0020c9e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0020ca2:	f7 d8                	neg    eax
c0020ca4:	83 d2 00             	adc    edx,0x0
c0020ca7:	f7 da                	neg    edx
c0020ca9:	89 d3                	mov    ebx,edx
c0020cab:	89 c7                	mov    edi,eax
c0020cad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020cb0:	85 db                	test   ebx,ebx
c0020cb2:	75 48                	jne    c0020cfc <__divdi3+0x94>
c0020cb4:	39 ef                	cmp    edi,ebp
c0020cb6:	76 24                	jbe    c0020cdc <__divdi3+0x74>
c0020cb8:	89 ea                	mov    edx,ebp
c0020cba:	f7 f7                	div    edi
c0020cbc:	89 c1                	mov    ecx,eax
c0020cbe:	31 f6                	xor    esi,esi
c0020cc0:	89 c8                	mov    eax,ecx
c0020cc2:	89 f2                	mov    edx,esi
c0020cc4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020cc8:	85 c9                	test   ecx,ecx
c0020cca:	74 07                	je     c0020cd3 <__divdi3+0x6b>
c0020ccc:	f7 d8                	neg    eax
c0020cce:	83 d2 00             	adc    edx,0x0
c0020cd1:	f7 da                	neg    edx
c0020cd3:	83 c4 1c             	add    esp,0x1c
c0020cd6:	5b                   	pop    ebx
c0020cd7:	5e                   	pop    esi
c0020cd8:	5f                   	pop    edi
c0020cd9:	5d                   	pop    ebp
c0020cda:	c3                   	ret    
c0020cdb:	90                   	nop
c0020cdc:	85 ff                	test   edi,edi
c0020cde:	75 0b                	jne    c0020ceb <__divdi3+0x83>
c0020ce0:	b8 01 00 00 00       	mov    eax,0x1
c0020ce5:	31 d2                	xor    edx,edx
c0020ce7:	f7 f3                	div    ebx
c0020ce9:	89 c7                	mov    edi,eax
c0020ceb:	31 d2                	xor    edx,edx
c0020ced:	89 e8                	mov    eax,ebp
c0020cef:	f7 f7                	div    edi
c0020cf1:	89 c6                	mov    esi,eax
c0020cf3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020cf6:	f7 f7                	div    edi
c0020cf8:	89 c1                	mov    ecx,eax
c0020cfa:	eb c4                	jmp    c0020cc0 <__divdi3+0x58>
c0020cfc:	39 eb                	cmp    ebx,ebp
c0020cfe:	77 3c                	ja     c0020d3c <__divdi3+0xd4>
c0020d00:	0f bd f3             	bsr    esi,ebx
c0020d03:	83 f6 1f             	xor    esi,0x1f
c0020d06:	75 40                	jne    c0020d48 <__divdi3+0xe0>
c0020d08:	39 eb                	cmp    ebx,ebp
c0020d0a:	72 09                	jb     c0020d15 <__divdi3+0xad>
c0020d0c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020d0f:	0f 87 97 00 00 00    	ja     c0020dac <__divdi3+0x144>
c0020d15:	b9 01 00 00 00       	mov    ecx,0x1
c0020d1a:	eb a4                	jmp    c0020cc0 <__divdi3+0x58>
c0020d1c:	f7 d9                	neg    ecx
c0020d1e:	83 d3 00             	adc    ebx,0x0
c0020d21:	f7 db                	neg    ebx
c0020d23:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020d26:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020d2a:	89 dd                	mov    ebp,ebx
c0020d2c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0020d34:	e9 5f ff ff ff       	jmp    c0020c98 <__divdi3+0x30>
c0020d39:	8d 76 00             	lea    esi,[esi+0x0]
c0020d3c:	31 f6                	xor    esi,esi
c0020d3e:	31 c9                	xor    ecx,ecx
c0020d40:	e9 7b ff ff ff       	jmp    c0020cc0 <__divdi3+0x58>
c0020d45:	8d 76 00             	lea    esi,[esi+0x0]
c0020d48:	b8 20 00 00 00       	mov    eax,0x20
c0020d4d:	29 f0                	sub    eax,esi
c0020d4f:	89 f1                	mov    ecx,esi
c0020d51:	d3 e3                	shl    ebx,cl
c0020d53:	89 fa                	mov    edx,edi
c0020d55:	88 c1                	mov    cl,al
c0020d57:	d3 ea                	shr    edx,cl
c0020d59:	09 da                	or     edx,ebx
c0020d5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020d5f:	89 f1                	mov    ecx,esi
c0020d61:	d3 e7                	shl    edi,cl
c0020d63:	89 eb                	mov    ebx,ebp
c0020d65:	88 c1                	mov    cl,al
c0020d67:	d3 eb                	shr    ebx,cl
c0020d69:	89 f1                	mov    ecx,esi
c0020d6b:	d3 e5                	shl    ebp,cl
c0020d6d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0020d70:	88 c1                	mov    cl,al
c0020d72:	d3 ea                	shr    edx,cl
c0020d74:	09 d5                	or     ebp,edx
c0020d76:	89 e8                	mov    eax,ebp
c0020d78:	89 da                	mov    edx,ebx
c0020d7a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0020d7e:	89 d3                	mov    ebx,edx
c0020d80:	89 c5                	mov    ebp,eax
c0020d82:	f7 e7                	mul    edi
c0020d84:	39 d3                	cmp    ebx,edx
c0020d86:	72 18                	jb     c0020da0 <__divdi3+0x138>
c0020d88:	74 0a                	je     c0020d94 <__divdi3+0x12c>
c0020d8a:	89 e9                	mov    ecx,ebp
c0020d8c:	31 f6                	xor    esi,esi
c0020d8e:	e9 2d ff ff ff       	jmp    c0020cc0 <__divdi3+0x58>
c0020d93:	90                   	nop
c0020d94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0020d97:	89 f1                	mov    ecx,esi
c0020d99:	d3 e7                	shl    edi,cl
c0020d9b:	39 c7                	cmp    edi,eax
c0020d9d:	73 eb                	jae    c0020d8a <__divdi3+0x122>
c0020d9f:	90                   	nop
c0020da0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0020da3:	31 f6                	xor    esi,esi
c0020da5:	e9 16 ff ff ff       	jmp    c0020cc0 <__divdi3+0x58>
c0020daa:	66 90                	xchg   ax,ax
c0020dac:	31 c9                	xor    ecx,ecx
c0020dae:	e9 0d ff ff ff       	jmp    c0020cc0 <__divdi3+0x58>
c0020db3:	90                   	nop

c0020db4 <__moddi3>:
c0020db4:	55                   	push   ebp
c0020db5:	57                   	push   edi
c0020db6:	56                   	push   esi
c0020db7:	53                   	push   ebx
c0020db8:	83 ec 2c             	sub    esp,0x2c
c0020dbb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020dbf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020dc3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020dc7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0020dcb:	85 db                	test   ebx,ebx
c0020dcd:	0f 88 85 00 00 00    	js     c0020e58 <__moddi3+0xa4>
c0020dd3:	89 de                	mov    esi,ebx
c0020dd5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020ddd:	89 d7                	mov    edi,edx
c0020ddf:	85 d2                	test   edx,edx
c0020de1:	79 09                	jns    c0020dec <__moddi3+0x38>
c0020de3:	f7 d8                	neg    eax
c0020de5:	83 d2 00             	adc    edx,0x0
c0020de8:	f7 da                	neg    edx
c0020dea:	89 d7                	mov    edi,edx
c0020dec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020df0:	89 cd                	mov    ebp,ecx
c0020df2:	85 ff                	test   edi,edi
c0020df4:	75 52                	jne    c0020e48 <__moddi3+0x94>
c0020df6:	89 c3                	mov    ebx,eax
c0020df8:	39 f0                	cmp    eax,esi
c0020dfa:	76 24                	jbe    c0020e20 <__moddi3+0x6c>
c0020dfc:	89 c8                	mov    eax,ecx
c0020dfe:	89 f2                	mov    edx,esi
c0020e00:	f7 f3                	div    ebx
c0020e02:	89 d6                	mov    esi,edx
c0020e04:	89 f0                	mov    eax,esi
c0020e06:	31 d2                	xor    edx,edx
c0020e08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020e0c:	85 c9                	test   ecx,ecx
c0020e0e:	74 07                	je     c0020e17 <__moddi3+0x63>
c0020e10:	f7 d8                	neg    eax
c0020e12:	83 d2 00             	adc    edx,0x0
c0020e15:	f7 da                	neg    edx
c0020e17:	83 c4 2c             	add    esp,0x2c
c0020e1a:	5b                   	pop    ebx
c0020e1b:	5e                   	pop    esi
c0020e1c:	5f                   	pop    edi
c0020e1d:	5d                   	pop    ebp
c0020e1e:	c3                   	ret    
c0020e1f:	90                   	nop
c0020e20:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020e24:	85 db                	test   ebx,ebx
c0020e26:	75 0d                	jne    c0020e35 <__moddi3+0x81>
c0020e28:	b8 01 00 00 00       	mov    eax,0x1
c0020e2d:	31 d2                	xor    edx,edx
c0020e2f:	f7 f7                	div    edi
c0020e31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e35:	89 f0                	mov    eax,esi
c0020e37:	31 d2                	xor    edx,edx
c0020e39:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020e3d:	f7 f7                	div    edi
c0020e3f:	89 e8                	mov    eax,ebp
c0020e41:	f7 f7                	div    edi
c0020e43:	89 d6                	mov    esi,edx
c0020e45:	eb bd                	jmp    c0020e04 <__moddi3+0x50>
c0020e47:	90                   	nop
c0020e48:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020e4c:	39 f7                	cmp    edi,esi
c0020e4e:	76 20                	jbe    c0020e70 <__moddi3+0xbc>
c0020e50:	89 c8                	mov    eax,ecx
c0020e52:	89 f2                	mov    edx,esi
c0020e54:	eb b2                	jmp    c0020e08 <__moddi3+0x54>
c0020e56:	66 90                	xchg   ax,ax
c0020e58:	f7 d9                	neg    ecx
c0020e5a:	83 d3 00             	adc    ebx,0x0
c0020e5d:	f7 db                	neg    ebx
c0020e5f:	89 de                	mov    esi,ebx
c0020e61:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020e69:	e9 6f ff ff ff       	jmp    c0020ddd <__moddi3+0x29>
c0020e6e:	66 90                	xchg   ax,ax
c0020e70:	0f bd c7             	bsr    eax,edi
c0020e73:	83 f0 1f             	xor    eax,0x1f
c0020e76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e7a:	75 24                	jne    c0020ea0 <__moddi3+0xec>
c0020e7c:	39 f7                	cmp    edi,esi
c0020e7e:	72 06                	jb     c0020e86 <__moddi3+0xd2>
c0020e80:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020e84:	77 0c                	ja     c0020e92 <__moddi3+0xde>
c0020e86:	89 e9                	mov    ecx,ebp
c0020e88:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0020e8c:	19 fe                	sbb    esi,edi
c0020e8e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020e92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020e96:	89 f2                	mov    edx,esi
c0020e98:	e9 6b ff ff ff       	jmp    c0020e08 <__moddi3+0x54>
c0020e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0020ea0:	b8 20 00 00 00       	mov    eax,0x20
c0020ea5:	89 c2                	mov    edx,eax
c0020ea7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020eab:	29 da                	sub    edx,ebx
c0020ead:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020eb1:	88 d9                	mov    cl,bl
c0020eb3:	d3 e7                	shl    edi,cl
c0020eb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020eb9:	88 d1                	mov    cl,dl
c0020ebb:	d3 e8                	shr    eax,cl
c0020ebd:	09 c7                	or     edi,eax
c0020ebf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020ec3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020ec7:	89 d8                	mov    eax,ebx
c0020ec9:	88 d9                	mov    cl,bl
c0020ecb:	d3 e7                	shl    edi,cl
c0020ecd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020ed1:	89 f3                	mov    ebx,esi
c0020ed3:	88 d1                	mov    cl,dl
c0020ed5:	d3 eb                	shr    ebx,cl
c0020ed7:	89 c7                	mov    edi,eax
c0020ed9:	88 c1                	mov    cl,al
c0020edb:	d3 e6                	shl    esi,cl
c0020edd:	89 e8                	mov    eax,ebp
c0020edf:	88 d1                	mov    cl,dl
c0020ee1:	d3 e8                	shr    eax,cl
c0020ee3:	09 f0                	or     eax,esi
c0020ee5:	89 f9                	mov    ecx,edi
c0020ee7:	d3 e5                	shl    ebp,cl
c0020ee9:	89 da                	mov    edx,ebx
c0020eeb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0020eef:	89 d3                	mov    ebx,edx
c0020ef1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020ef5:	89 c6                	mov    esi,eax
c0020ef7:	89 d1                	mov    ecx,edx
c0020ef9:	39 d3                	cmp    ebx,edx
c0020efb:	72 27                	jb     c0020f24 <__moddi3+0x170>
c0020efd:	74 21                	je     c0020f20 <__moddi3+0x16c>
c0020eff:	29 f5                	sub    ebp,esi
c0020f01:	19 cb                	sbb    ebx,ecx
c0020f03:	89 de                	mov    esi,ebx
c0020f05:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020f09:	d3 e6                	shl    esi,cl
c0020f0b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020f0f:	89 f9                	mov    ecx,edi
c0020f11:	d3 ed                	shr    ebp,cl
c0020f13:	09 ee                	or     esi,ebp
c0020f15:	89 f0                	mov    eax,esi
c0020f17:	d3 eb                	shr    ebx,cl
c0020f19:	89 da                	mov    edx,ebx
c0020f1b:	e9 e8 fe ff ff       	jmp    c0020e08 <__moddi3+0x54>
c0020f20:	39 c5                	cmp    ebp,eax
c0020f22:	73 db                	jae    c0020eff <__moddi3+0x14b>
c0020f24:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020f28:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0020f2c:	89 d1                	mov    ecx,edx
c0020f2e:	89 c6                	mov    esi,eax
c0020f30:	eb cd                	jmp    c0020eff <__moddi3+0x14b>
c0020f32:	66 90                	xchg   ax,ax

c0020f34 <__udivdi3>:
c0020f34:	55                   	push   ebp
c0020f35:	57                   	push   edi
c0020f36:	56                   	push   esi
c0020f37:	53                   	push   ebx
c0020f38:	83 ec 1c             	sub    esp,0x1c
c0020f3b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020f3f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020f43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020f47:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020f4b:	85 d2                	test   edx,edx
c0020f4d:	75 41                	jne    c0020f90 <__udivdi3+0x5c>
c0020f4f:	39 f7                	cmp    edi,esi
c0020f51:	76 15                	jbe    c0020f68 <__udivdi3+0x34>
c0020f53:	89 e8                	mov    eax,ebp
c0020f55:	89 f2                	mov    edx,esi
c0020f57:	f7 f7                	div    edi
c0020f59:	31 db                	xor    ebx,ebx
c0020f5b:	89 da                	mov    edx,ebx
c0020f5d:	83 c4 1c             	add    esp,0x1c
c0020f60:	5b                   	pop    ebx
c0020f61:	5e                   	pop    esi
c0020f62:	5f                   	pop    edi
c0020f63:	5d                   	pop    ebp
c0020f64:	c3                   	ret    
c0020f65:	8d 76 00             	lea    esi,[esi+0x0]
c0020f68:	89 f9                	mov    ecx,edi
c0020f6a:	85 ff                	test   edi,edi
c0020f6c:	75 0b                	jne    c0020f79 <__udivdi3+0x45>
c0020f6e:	b8 01 00 00 00       	mov    eax,0x1
c0020f73:	31 d2                	xor    edx,edx
c0020f75:	f7 f7                	div    edi
c0020f77:	89 c1                	mov    ecx,eax
c0020f79:	31 d2                	xor    edx,edx
c0020f7b:	89 f0                	mov    eax,esi
c0020f7d:	f7 f1                	div    ecx
c0020f7f:	89 c3                	mov    ebx,eax
c0020f81:	89 e8                	mov    eax,ebp
c0020f83:	f7 f1                	div    ecx
c0020f85:	89 da                	mov    edx,ebx
c0020f87:	83 c4 1c             	add    esp,0x1c
c0020f8a:	5b                   	pop    ebx
c0020f8b:	5e                   	pop    esi
c0020f8c:	5f                   	pop    edi
c0020f8d:	5d                   	pop    ebp
c0020f8e:	c3                   	ret    
c0020f8f:	90                   	nop
c0020f90:	39 f2                	cmp    edx,esi
c0020f92:	77 1c                	ja     c0020fb0 <__udivdi3+0x7c>
c0020f94:	0f bd da             	bsr    ebx,edx
c0020f97:	83 f3 1f             	xor    ebx,0x1f
c0020f9a:	75 24                	jne    c0020fc0 <__udivdi3+0x8c>
c0020f9c:	39 f2                	cmp    edx,esi
c0020f9e:	72 08                	jb     c0020fa8 <__udivdi3+0x74>
c0020fa0:	39 ef                	cmp    edi,ebp
c0020fa2:	0f 87 84 00 00 00    	ja     c002102c <__udivdi3+0xf8>
c0020fa8:	b8 01 00 00 00       	mov    eax,0x1
c0020fad:	eb ac                	jmp    c0020f5b <__udivdi3+0x27>
c0020faf:	90                   	nop
c0020fb0:	31 db                	xor    ebx,ebx
c0020fb2:	31 c0                	xor    eax,eax
c0020fb4:	89 da                	mov    edx,ebx
c0020fb6:	83 c4 1c             	add    esp,0x1c
c0020fb9:	5b                   	pop    ebx
c0020fba:	5e                   	pop    esi
c0020fbb:	5f                   	pop    edi
c0020fbc:	5d                   	pop    ebp
c0020fbd:	c3                   	ret    
c0020fbe:	66 90                	xchg   ax,ax
c0020fc0:	b8 20 00 00 00       	mov    eax,0x20
c0020fc5:	29 d8                	sub    eax,ebx
c0020fc7:	88 d9                	mov    cl,bl
c0020fc9:	d3 e2                	shl    edx,cl
c0020fcb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020fcf:	89 fa                	mov    edx,edi
c0020fd1:	88 c1                	mov    cl,al
c0020fd3:	d3 ea                	shr    edx,cl
c0020fd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020fd9:	09 d1                	or     ecx,edx
c0020fdb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020fdf:	88 d9                	mov    cl,bl
c0020fe1:	d3 e7                	shl    edi,cl
c0020fe3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020fe7:	89 f7                	mov    edi,esi
c0020fe9:	88 c1                	mov    cl,al
c0020feb:	d3 ef                	shr    edi,cl
c0020fed:	88 d9                	mov    cl,bl
c0020fef:	d3 e6                	shl    esi,cl
c0020ff1:	89 ea                	mov    edx,ebp
c0020ff3:	88 c1                	mov    cl,al
c0020ff5:	d3 ea                	shr    edx,cl
c0020ff7:	09 d6                	or     esi,edx
c0020ff9:	89 f0                	mov    eax,esi
c0020ffb:	89 fa                	mov    edx,edi
c0020ffd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021001:	89 d7                	mov    edi,edx
c0021003:	89 c6                	mov    esi,eax
c0021005:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021009:	39 d7                	cmp    edi,edx
c002100b:	72 13                	jb     c0021020 <__udivdi3+0xec>
c002100d:	74 09                	je     c0021018 <__udivdi3+0xe4>
c002100f:	89 f0                	mov    eax,esi
c0021011:	31 db                	xor    ebx,ebx
c0021013:	e9 43 ff ff ff       	jmp    c0020f5b <__udivdi3+0x27>
c0021018:	88 d9                	mov    cl,bl
c002101a:	d3 e5                	shl    ebp,cl
c002101c:	39 c5                	cmp    ebp,eax
c002101e:	73 ef                	jae    c002100f <__udivdi3+0xdb>
c0021020:	8d 46 ff             	lea    eax,[esi-0x1]
c0021023:	31 db                	xor    ebx,ebx
c0021025:	e9 31 ff ff ff       	jmp    c0020f5b <__udivdi3+0x27>
c002102a:	66 90                	xchg   ax,ax
c002102c:	31 c0                	xor    eax,eax
c002102e:	e9 28 ff ff ff       	jmp    c0020f5b <__udivdi3+0x27>
c0021033:	90                   	nop

c0021034 <__umoddi3>:
c0021034:	55                   	push   ebp
c0021035:	57                   	push   edi
c0021036:	56                   	push   esi
c0021037:	53                   	push   ebx
c0021038:	83 ec 1c             	sub    esp,0x1c
c002103b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002103f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021043:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021047:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002104b:	89 da                	mov    edx,ebx
c002104d:	85 c0                	test   eax,eax
c002104f:	75 37                	jne    c0021088 <__umoddi3+0x54>
c0021051:	39 df                	cmp    edi,ebx
c0021053:	76 13                	jbe    c0021068 <__umoddi3+0x34>
c0021055:	89 f0                	mov    eax,esi
c0021057:	f7 f7                	div    edi
c0021059:	89 d0                	mov    eax,edx
c002105b:	31 d2                	xor    edx,edx
c002105d:	83 c4 1c             	add    esp,0x1c
c0021060:	5b                   	pop    ebx
c0021061:	5e                   	pop    esi
c0021062:	5f                   	pop    edi
c0021063:	5d                   	pop    ebp
c0021064:	c3                   	ret    
c0021065:	8d 76 00             	lea    esi,[esi+0x0]
c0021068:	89 fd                	mov    ebp,edi
c002106a:	85 ff                	test   edi,edi
c002106c:	75 0b                	jne    c0021079 <__umoddi3+0x45>
c002106e:	b8 01 00 00 00       	mov    eax,0x1
c0021073:	31 d2                	xor    edx,edx
c0021075:	f7 f7                	div    edi
c0021077:	89 c5                	mov    ebp,eax
c0021079:	89 d8                	mov    eax,ebx
c002107b:	31 d2                	xor    edx,edx
c002107d:	f7 f5                	div    ebp
c002107f:	89 f0                	mov    eax,esi
c0021081:	f7 f5                	div    ebp
c0021083:	89 d0                	mov    eax,edx
c0021085:	eb d4                	jmp    c002105b <__umoddi3+0x27>
c0021087:	90                   	nop
c0021088:	89 f1                	mov    ecx,esi
c002108a:	39 d8                	cmp    eax,ebx
c002108c:	76 0a                	jbe    c0021098 <__umoddi3+0x64>
c002108e:	89 f0                	mov    eax,esi
c0021090:	83 c4 1c             	add    esp,0x1c
c0021093:	5b                   	pop    ebx
c0021094:	5e                   	pop    esi
c0021095:	5f                   	pop    edi
c0021096:	5d                   	pop    ebp
c0021097:	c3                   	ret    
c0021098:	0f bd e8             	bsr    ebp,eax
c002109b:	83 f5 1f             	xor    ebp,0x1f
c002109e:	75 1c                	jne    c00210bc <__umoddi3+0x88>
c00210a0:	39 d8                	cmp    eax,ebx
c00210a2:	72 04                	jb     c00210a8 <__umoddi3+0x74>
c00210a4:	39 f7                	cmp    edi,esi
c00210a6:	77 08                	ja     c00210b0 <__umoddi3+0x7c>
c00210a8:	89 da                	mov    edx,ebx
c00210aa:	29 fe                	sub    esi,edi
c00210ac:	19 c2                	sbb    edx,eax
c00210ae:	89 f1                	mov    ecx,esi
c00210b0:	89 c8                	mov    eax,ecx
c00210b2:	83 c4 1c             	add    esp,0x1c
c00210b5:	5b                   	pop    ebx
c00210b6:	5e                   	pop    esi
c00210b7:	5f                   	pop    edi
c00210b8:	5d                   	pop    ebp
c00210b9:	c3                   	ret    
c00210ba:	66 90                	xchg   ax,ax
c00210bc:	ba 20 00 00 00       	mov    edx,0x20
c00210c1:	29 ea                	sub    edx,ebp
c00210c3:	89 e9                	mov    ecx,ebp
c00210c5:	d3 e0                	shl    eax,cl
c00210c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00210cb:	89 f8                	mov    eax,edi
c00210cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00210d1:	88 d1                	mov    cl,dl
c00210d3:	d3 e8                	shr    eax,cl
c00210d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00210d9:	09 c1                	or     ecx,eax
c00210db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00210df:	89 e9                	mov    ecx,ebp
c00210e1:	d3 e7                	shl    edi,cl
c00210e3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00210e7:	89 d8                	mov    eax,ebx
c00210e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00210ed:	88 d1                	mov    cl,dl
c00210ef:	d3 e8                	shr    eax,cl
c00210f1:	89 c7                	mov    edi,eax
c00210f3:	89 e9                	mov    ecx,ebp
c00210f5:	d3 e3                	shl    ebx,cl
c00210f7:	89 f0                	mov    eax,esi
c00210f9:	88 d1                	mov    cl,dl
c00210fb:	d3 e8                	shr    eax,cl
c00210fd:	09 d8                	or     eax,ebx
c00210ff:	89 e9                	mov    ecx,ebp
c0021101:	d3 e6                	shl    esi,cl
c0021103:	89 f3                	mov    ebx,esi
c0021105:	89 fa                	mov    edx,edi
c0021107:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002110b:	89 d1                	mov    ecx,edx
c002110d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021111:	89 c6                	mov    esi,eax
c0021113:	89 d7                	mov    edi,edx
c0021115:	39 d1                	cmp    ecx,edx
c0021117:	72 27                	jb     c0021140 <__umoddi3+0x10c>
c0021119:	74 21                	je     c002113c <__umoddi3+0x108>
c002111b:	89 ca                	mov    edx,ecx
c002111d:	29 f3                	sub    ebx,esi
c002111f:	19 fa                	sbb    edx,edi
c0021121:	89 d0                	mov    eax,edx
c0021123:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021127:	d3 e0                	shl    eax,cl
c0021129:	89 e9                	mov    ecx,ebp
c002112b:	d3 eb                	shr    ebx,cl
c002112d:	09 d8                	or     eax,ebx
c002112f:	d3 ea                	shr    edx,cl
c0021131:	83 c4 1c             	add    esp,0x1c
c0021134:	5b                   	pop    ebx
c0021135:	5e                   	pop    esi
c0021136:	5f                   	pop    edi
c0021137:	5d                   	pop    ebp
c0021138:	c3                   	ret    
c0021139:	8d 76 00             	lea    esi,[esi+0x0]
c002113c:	39 c3                	cmp    ebx,eax
c002113e:	73 db                	jae    c002111b <__umoddi3+0xe7>
c0021140:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021144:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021148:	89 d7                	mov    edi,edx
c002114a:	89 c6                	mov    esi,eax
c002114c:	eb cd                	jmp    c002111b <__umoddi3+0xe7>

Disassembly of section .init:

c002114e <_init>:
c002114e:	55                   	push   ebp
c002114f:	89 e5                	mov    ebp,esp
c0021151:	e8 c2 ef fd ff       	call   c0000118 <frame_dummy>
c0021156:	e8 e5 fa ff ff       	call   c0020c40 <__do_global_ctors_aux>
c002115b:	5d                   	pop    ebp
c002115c:	c3                   	ret    

Disassembly of section .fini:

c002115d <_fini>:
c002115d:	55                   	push   ebp
c002115e:	89 e5                	mov    ebp,esp
c0021160:	e8 43 ef fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0021165:	5d                   	pop    ebp
c0021166:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021168 <Computer::~Computer()>:
c0021168:	83 ec 0c             	sub    esp,0xc
c002116b:	ba 94 27 02 c0       	mov    edx,0xc0022794
c0021170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021174:	89 10                	mov    DWORD PTR [eax],edx
c0021176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002117a:	83 ec 0c             	sub    esp,0xc
c002117d:	50                   	push   eax
c002117e:	e8 05 cc fe ff       	call   c000dd88 <Device::~Device()>
c0021183:	83 c4 10             	add    esp,0x10
c0021186:	90                   	nop
c0021187:	83 c4 0c             	add    esp,0xc
c002118a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002118c <Computer::~Computer()>:
c002118c:	83 ec 0c             	sub    esp,0xc
c002118f:	83 ec 0c             	sub    esp,0xc
c0021192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021196:	e8 cd ff ff ff       	call   c0021168 <Computer::~Computer()>
c002119b:	83 c4 10             	add    esp,0x10
c002119e:	83 ec 08             	sub    esp,0x8
c00211a1:	68 ec 01 00 00       	push   0x1ec
c00211a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211aa:	e8 e3 b7 fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c00211af:	83 c4 10             	add    esp,0x10
c00211b2:	83 c4 0c             	add    esp,0xc
c00211b5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00211b6 <idleCommon()>:
c00211b6:	83 ec 0c             	sub    esp,0xc
c00211b9:	fa                   	cli    
c00211ba:	ff 05 c8 78 02 c0    	inc    DWORD PTR ds:0xc00278c8
c00211c0:	e8 43 6d ff ff       	call   c0017f08 <schedule()>
c00211c5:	a1 c8 78 02 c0       	mov    eax,ds:0xc00278c8
c00211ca:	48                   	dec    eax
c00211cb:	a3 c8 78 02 c0       	mov    ds:0xc00278c8,eax
c00211d0:	75 01                	jne    c00211d3 <idleCommon()+0x1d>
c00211d2:	fb                   	sti    
c00211d3:	83 c4 0c             	add    esp,0xc
c00211d6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00211d8 <LinkedList<UnixFile>::~LinkedList()>:
c00211d8:	90                   	nop
c00211d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00211da <LinkedList<UnixFile>::LinkedList()>:
c00211da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211de:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00211e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00211ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00211fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021208:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002120f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021213:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002121a:	90                   	nop
c002121b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002121c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002121c:	83 ec 0c             	sub    esp,0xc
c002121f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021224:	75 10                	jne    c0021236 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021226:	83 ec 0c             	sub    esp,0xc
c0021229:	68 c8 2a 02 c0       	push   0xc0022ac8
c002122e:	e8 02 31 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0021233:	83 c4 10             	add    esp,0x10
c0021236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002123a:	8b 00                	mov    eax,DWORD PTR [eax]
c002123c:	85 c0                	test   eax,eax
c002123e:	74 34                	je     c0021274 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021244:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021247:	85 c0                	test   eax,eax
c0021249:	74 29                	je     c0021274 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002124b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002124f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021252:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021256:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002125d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021261:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021268:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002126b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021272:	eb 65                	jmp    c00212d9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021278:	8b 00                	mov    eax,DWORD PTR [eax]
c002127a:	85 c0                	test   eax,eax
c002127c:	75 4b                	jne    c00212c9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002127e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021282:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021285:	85 c0                	test   eax,eax
c0021287:	75 40                	jne    c00212c9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002128d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021291:	89 10                	mov    DWORD PTR [eax],edx
c0021293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021297:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002129b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002129e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00212ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212b3:	85 c0                	test   eax,eax
c00212b5:	74 22                	je     c00212d9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00212b7:	83 ec 0c             	sub    esp,0xc
c00212ba:	68 ea 2a 02 c0       	push   0xc0022aea
c00212bf:	e8 71 30 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00212c4:	83 c4 10             	add    esp,0x10
c00212c7:	eb 10                	jmp    c00212d9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00212c9:	83 ec 0c             	sub    esp,0xc
c00212cc:	68 f4 2a 02 c0       	push   0xc0022af4
c00212d1:	e8 5f 30 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00212d6:	83 c4 10             	add    esp,0x10
c00212d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212dd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212e0:	8d 50 01             	lea    edx,[eax+0x1]
c00212e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212e7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00212ea:	90                   	nop
c00212eb:	83 c4 0c             	add    esp,0xc
c00212ee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00212f0 <LinkedList<UnixFile>::getFirstElement()>:
c00212f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00212f6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00212f8 <LinkedList<UnixFile>::removeFirst()>:
c00212f8:	83 ec 0c             	sub    esp,0xc
c00212fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0021301:	85 c0                	test   eax,eax
c0021303:	75 12                	jne    c0021317 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021305:	83 ec 0c             	sub    esp,0xc
c0021308:	68 00 2b 02 c0       	push   0xc0022b00
c002130d:	e8 23 30 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0021312:	83 c4 10             	add    esp,0x10
c0021315:	eb 7e                	jmp    c0021395 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002131b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002131e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021321:	85 c0                	test   eax,eax
c0021323:	74 10                	je     c0021335 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0021325:	83 ec 0c             	sub    esp,0xc
c0021328:	68 4b 2b 02 c0       	push   0xc0022b4b
c002132d:	e8 03 30 ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0021332:	83 c4 10             	add    esp,0x10
c0021335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021339:	8b 00                	mov    eax,DWORD PTR [eax]
c002133b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002133e:	85 c0                	test   eax,eax
c0021340:	75 33                	jne    c0021375 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0021342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021346:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002134c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021350:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002135b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002135e:	83 f8 01             	cmp    eax,0x1
c0021361:	74 21                	je     c0021384 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021363:	83 ec 0c             	sub    esp,0xc
c0021366:	68 24 2b 02 c0       	push   0xc0022b24
c002136b:	e8 c5 2f ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0021370:	83 c4 10             	add    esp,0x10
c0021373:	eb 0f                	jmp    c0021384 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021379:	8b 00                	mov    eax,DWORD PTR [eax]
c002137b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002137e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021382:	89 10                	mov    DWORD PTR [eax],edx
c0021384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021388:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002138b:	8d 50 ff             	lea    edx,[eax-0x1]
c002138e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021392:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021395:	83 c4 0c             	add    esp,0xc
c0021398:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002139a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002139a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002139e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213a1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00213a2 <DriverlessDevice::~DriverlessDevice()>:
c00213a2:	ba bc 33 02 c0       	mov    edx,0xc00233bc
c00213a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213ab:	89 10                	mov    DWORD PTR [eax],edx
c00213ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213b1:	50                   	push   eax
c00213b2:	e8 d1 c9 fe ff       	call   c000dd88 <Device::~Device()>
c00213b7:	83 c4 04             	add    esp,0x4
c00213ba:	90                   	nop
c00213bb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00213bc <DriverlessDevice::~DriverlessDevice()>:
c00213bc:	83 ec 0c             	sub    esp,0xc
c00213bf:	83 ec 0c             	sub    esp,0xc
c00213c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00213c6:	e8 d7 ff ff ff       	call   c00213a2 <DriverlessDevice::~DriverlessDevice()>
c00213cb:	83 c4 10             	add    esp,0x10
c00213ce:	83 ec 08             	sub    esp,0x8
c00213d1:	68 58 01 00 00       	push   0x158
c00213d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00213da:	e8 b3 b5 fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c00213df:	83 c4 10             	add    esp,0x10
c00213e2:	83 c4 0c             	add    esp,0xc
c00213e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00213e6 <LinkedList<Device>::addElement(Device*)>:
c00213e6:	83 ec 0c             	sub    esp,0xc
c00213e9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00213ee:	75 10                	jne    c0021400 <LinkedList<Device>::addElement(Device*)+0x1a>
c00213f0:	83 ec 0c             	sub    esp,0xc
c00213f3:	68 c8 2a 02 c0       	push   0xc0022ac8
c00213f8:	e8 38 2f ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00213fd:	83 c4 10             	add    esp,0x10
c0021400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021404:	8b 00                	mov    eax,DWORD PTR [eax]
c0021406:	85 c0                	test   eax,eax
c0021408:	74 3a                	je     c0021444 <LinkedList<Device>::addElement(Device*)+0x5e>
c002140a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002140e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021411:	85 c0                	test   eax,eax
c0021413:	74 2f                	je     c0021444 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021419:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002141c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021420:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002142a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002142e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021435:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021438:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021442:	eb 68                	jmp    c00214ac <LinkedList<Device>::addElement(Device*)+0xc6>
c0021444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021448:	8b 00                	mov    eax,DWORD PTR [eax]
c002144a:	85 c0                	test   eax,eax
c002144c:	75 4e                	jne    c002149c <LinkedList<Device>::addElement(Device*)+0xb6>
c002144e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021452:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021455:	85 c0                	test   eax,eax
c0021457:	75 43                	jne    c002149c <LinkedList<Device>::addElement(Device*)+0xb6>
c0021459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002145d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021461:	89 10                	mov    DWORD PTR [eax],edx
c0021463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021467:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002146b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002146e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021472:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021475:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002147f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021483:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021486:	85 c0                	test   eax,eax
c0021488:	74 22                	je     c00214ac <LinkedList<Device>::addElement(Device*)+0xc6>
c002148a:	83 ec 0c             	sub    esp,0xc
c002148d:	68 ea 2a 02 c0       	push   0xc0022aea
c0021492:	e8 9e 2e ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0021497:	83 c4 10             	add    esp,0x10
c002149a:	eb 10                	jmp    c00214ac <LinkedList<Device>::addElement(Device*)+0xc6>
c002149c:	83 ec 0c             	sub    esp,0xc
c002149f:	68 f4 2a 02 c0       	push   0xc0022af4
c00214a4:	e8 8c 2e ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00214a9:	83 c4 10             	add    esp,0x10
c00214ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00214b3:	8d 50 01             	lea    edx,[eax+0x1]
c00214b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00214bd:	90                   	nop
c00214be:	83 c4 0c             	add    esp,0xc
c00214c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00214c2 <LinkedList<Device>::LinkedList()>:
c00214c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00214cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00214d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214db:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00214e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00214ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00214f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214fb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021502:	90                   	nop
c0021503:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021504 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021504:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021508:	8b 00                	mov    eax,DWORD PTR [eax]
c002150a:	85 c0                	test   eax,eax
c002150c:	75 0e                	jne    c002151c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002150e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021512:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021515:	85 c0                	test   eax,eax
c0021517:	75 03                	jne    c002151c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021519:	b0 01                	mov    al,0x1
c002151b:	c3                   	ret    
c002151c:	b0 00                	mov    al,0x0
c002151e:	90                   	nop
c002151f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021520 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021524:	8b 00                	mov    eax,DWORD PTR [eax]
c0021526:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021528 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021528:	83 ec 0c             	sub    esp,0xc
c002152b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002152f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021531:	85 c0                	test   eax,eax
c0021533:	75 17                	jne    c002154c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021535:	83 ec 0c             	sub    esp,0xc
c0021538:	68 00 2b 02 c0       	push   0xc0022b00
c002153d:	e8 f3 2d ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0021542:	83 c4 10             	add    esp,0x10
c0021545:	e9 92 00 00 00       	jmp    c00215dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c002154a:	66 90                	xchg   ax,ax
c002154c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021553:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021556:	85 c0                	test   eax,eax
c0021558:	0f 95 c0             	setne  al
c002155b:	84 c0                	test   al,al
c002155d:	74 11                	je     c0021570 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c002155f:	83 ec 0c             	sub    esp,0xc
c0021562:	68 4b 2b 02 c0       	push   0xc0022b4b
c0021567:	e8 c9 2d ff ff       	call   c0014335 <Krnl::panic(char const*)>
c002156c:	83 c4 10             	add    esp,0x10
c002156f:	90                   	nop
c0021570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021574:	8b 00                	mov    eax,DWORD PTR [eax]
c0021576:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021579:	85 c0                	test   eax,eax
c002157b:	0f 94 c0             	sete   al
c002157e:	84 c0                	test   al,al
c0021580:	74 36                	je     c00215b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0021582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021586:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002158c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021590:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002159b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002159e:	83 f8 01             	cmp    eax,0x1
c00215a1:	74 25                	je     c00215c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00215a3:	83 ec 0c             	sub    esp,0xc
c00215a6:	68 24 2b 02 c0       	push   0xc0022b24
c00215ab:	e8 85 2d ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00215b0:	83 c4 10             	add    esp,0x10
c00215b3:	eb 13                	jmp    c00215c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00215b5:	8d 76 00             	lea    esi,[esi+0x0]
c00215b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00215be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00215c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215c5:	89 10                	mov    DWORD PTR [eax],edx
c00215c7:	90                   	nop
c00215c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00215cf:	8d 50 ff             	lea    edx,[eax-0x1]
c00215d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00215d9:	8d 76 00             	lea    esi,[esi+0x0]
c00215dc:	83 c4 0c             	add    esp,0xc
c00215df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00215e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00215e0:	83 ec 0c             	sub    esp,0xc
c00215e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00215e8:	75 12                	jne    c00215fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00215ea:	83 ec 0c             	sub    esp,0xc
c00215ed:	68 c8 2a 02 c0       	push   0xc0022ac8
c00215f2:	e8 3e 2d ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00215f7:	83 c4 10             	add    esp,0x10
c00215fa:	66 90                	xchg   ax,ax
c00215fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021600:	8b 00                	mov    eax,DWORD PTR [eax]
c0021602:	85 c0                	test   eax,eax
c0021604:	74 36                	je     c002163c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002160a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002160d:	85 c0                	test   eax,eax
c002160f:	74 2b                	je     c002163c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021615:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021618:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002161c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002161f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021623:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021627:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002162a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002162e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021631:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021638:	eb 6a                	jmp    c00216a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002163a:	66 90                	xchg   ax,ax
c002163c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021640:	8b 00                	mov    eax,DWORD PTR [eax]
c0021642:	85 c0                	test   eax,eax
c0021644:	75 4e                	jne    c0021694 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002164a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002164d:	85 c0                	test   eax,eax
c002164f:	75 43                	jne    c0021694 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021655:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021659:	89 10                	mov    DWORD PTR [eax],edx
c002165b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002165f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021663:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002166a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002166d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021678:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002167b:	85 c0                	test   eax,eax
c002167d:	74 25                	je     c00216a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002167f:	83 ec 0c             	sub    esp,0xc
c0021682:	68 ea 2a 02 c0       	push   0xc0022aea
c0021687:	e8 a9 2c ff ff       	call   c0014335 <Krnl::panic(char const*)>
c002168c:	83 c4 10             	add    esp,0x10
c002168f:	eb 13                	jmp    c00216a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021691:	8d 76 00             	lea    esi,[esi+0x0]
c0021694:	83 ec 0c             	sub    esp,0xc
c0021697:	68 f4 2a 02 c0       	push   0xc0022af4
c002169c:	e8 94 2c ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00216a1:	83 c4 10             	add    esp,0x10
c00216a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00216ab:	8d 50 01             	lea    edx,[eax+0x1]
c00216ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00216b5:	90                   	nop
c00216b6:	83 c4 0c             	add    esp,0xc
c00216b9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00216bc <ACPI::~ACPI()>:
c00216bc:	83 ec 0c             	sub    esp,0xc
c00216bf:	ba 8c 3e 02 c0       	mov    edx,0xc0023e8c
c00216c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216c8:	89 10                	mov    DWORD PTR [eax],edx
c00216ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ce:	83 ec 0c             	sub    esp,0xc
c00216d1:	50                   	push   eax
c00216d2:	e8 b1 c6 fe ff       	call   c000dd88 <Device::~Device()>
c00216d7:	83 c4 10             	add    esp,0x10
c00216da:	90                   	nop
c00216db:	83 c4 0c             	add    esp,0xc
c00216de:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00216e0 <ACPI::~ACPI()>:
c00216e0:	83 ec 0c             	sub    esp,0xc
c00216e3:	83 ec 0c             	sub    esp,0xc
c00216e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216ea:	e8 cd ff ff ff       	call   c00216bc <ACPI::~ACPI()>
c00216ef:	83 c4 10             	add    esp,0x10
c00216f2:	83 ec 08             	sub    esp,0x8
c00216f5:	68 64 12 00 00       	push   0x1264
c00216fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216fe:	e8 8f b2 fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c0021703:	83 c4 10             	add    esp,0x10
c0021706:	83 c4 0c             	add    esp,0xc
c0021709:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002170c <LinkedList<Device>::~LinkedList()>:
c002170c:	90                   	nop
c002170d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021710 <LinkedList<Device>::isEmpty()>:
c0021710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021714:	8b 00                	mov    eax,DWORD PTR [eax]
c0021716:	85 c0                	test   eax,eax
c0021718:	75 0e                	jne    c0021728 <LinkedList<Device>::isEmpty()+0x18>
c002171a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002171e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021721:	85 c0                	test   eax,eax
c0021723:	75 03                	jne    c0021728 <LinkedList<Device>::isEmpty()+0x18>
c0021725:	b0 01                	mov    al,0x1
c0021727:	c3                   	ret    
c0021728:	b0 00                	mov    al,0x0
c002172a:	90                   	nop
c002172b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002172c <LinkedList<Device>::getFirstElement()>:
c002172c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021730:	8b 00                	mov    eax,DWORD PTR [eax]
c0021732:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021734 <LinkedList<Device>::removeFirst()>:
c0021734:	83 ec 0c             	sub    esp,0xc
c0021737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002173b:	8b 00                	mov    eax,DWORD PTR [eax]
c002173d:	85 c0                	test   eax,eax
c002173f:	75 17                	jne    c0021758 <LinkedList<Device>::removeFirst()+0x24>
c0021741:	83 ec 0c             	sub    esp,0xc
c0021744:	68 00 2b 02 c0       	push   0xc0022b00
c0021749:	e8 e7 2b ff ff       	call   c0014335 <Krnl::panic(char const*)>
c002174e:	83 c4 10             	add    esp,0x10
c0021751:	e9 92 00 00 00       	jmp    c00217e8 <LinkedList<Device>::removeFirst()+0xb4>
c0021756:	66 90                	xchg   ax,ax
c0021758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002175c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002175f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021765:	85 c0                	test   eax,eax
c0021767:	74 13                	je     c002177c <LinkedList<Device>::removeFirst()+0x48>
c0021769:	83 ec 0c             	sub    esp,0xc
c002176c:	68 4b 2b 02 c0       	push   0xc0022b4b
c0021771:	e8 bf 2b ff ff       	call   c0014335 <Krnl::panic(char const*)>
c0021776:	83 c4 10             	add    esp,0x10
c0021779:	8d 76 00             	lea    esi,[esi+0x0]
c002177c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021780:	8b 00                	mov    eax,DWORD PTR [eax]
c0021782:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021788:	85 c0                	test   eax,eax
c002178a:	75 34                	jne    c00217c0 <LinkedList<Device>::removeFirst()+0x8c>
c002178c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021790:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002179a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00217a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00217a8:	83 f8 01             	cmp    eax,0x1
c00217ab:	74 27                	je     c00217d4 <LinkedList<Device>::removeFirst()+0xa0>
c00217ad:	83 ec 0c             	sub    esp,0xc
c00217b0:	68 24 2b 02 c0       	push   0xc0022b24
c00217b5:	e8 7b 2b ff ff       	call   c0014335 <Krnl::panic(char const*)>
c00217ba:	83 c4 10             	add    esp,0x10
c00217bd:	eb 15                	jmp    c00217d4 <LinkedList<Device>::removeFirst()+0xa0>
c00217bf:	90                   	nop
c00217c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00217c6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00217cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217d0:	89 10                	mov    DWORD PTR [eax],edx
c00217d2:	66 90                	xchg   ax,ax
c00217d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00217db:	8d 50 ff             	lea    edx,[eax-0x1]
c00217de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00217e5:	8d 76 00             	lea    esi,[esi+0x0]
c00217e8:	83 c4 0c             	add    esp,0xc
c00217eb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00217ec <CPU::~CPU()>:
c00217ec:	83 ec 0c             	sub    esp,0xc
c00217ef:	ba 28 42 02 c0       	mov    edx,0xc0024228
c00217f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217f8:	89 10                	mov    DWORD PTR [eax],edx
c00217fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217fe:	83 ec 0c             	sub    esp,0xc
c0021801:	50                   	push   eax
c0021802:	e8 81 c5 fe ff       	call   c000dd88 <Device::~Device()>
c0021807:	83 c4 10             	add    esp,0x10
c002180a:	90                   	nop
c002180b:	83 c4 0c             	add    esp,0xc
c002180e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0021810 <CPU::~CPU()>:
c0021810:	83 ec 0c             	sub    esp,0xc
c0021813:	83 ec 0c             	sub    esp,0xc
c0021816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002181a:	e8 cd ff ff ff       	call   c00217ec <CPU::~CPU()>
c002181f:	83 c4 10             	add    esp,0x10
c0021822:	83 ec 08             	sub    esp,0x8
c0021825:	68 98 11 00 00       	push   0x1198
c002182a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002182e:	e8 5f b1 fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c0021833:	83 c4 10             	add    esp,0x10
c0021836:	83 c4 0c             	add    esp,0xc
c0021839:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002183c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002183c:	90                   	nop
c002183d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0021840 <ThreadControlBlock::ThreadControlBlock()>:
c0021840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021844:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002184b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002184f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0021856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002185a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0021861:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021865:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002186c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021870:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0021877:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002187b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002187f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021883:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0021887:	90                   	nop
c0021888:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002188c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002188c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021890:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002189a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00218a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00218ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00218c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218c5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00218cc:	90                   	nop
c00218cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00218d0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00218d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218d4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00218d7:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00218d8 <Vm::_FPUState::_FPUState()>:
c00218d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218dc:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00218e3:	90                   	nop
c00218e4:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00218e6 <PCI::~PCI()>:
c00218e6:	83 ec 0c             	sub    esp,0xc
c00218e9:	ba 88 4f 02 c0       	mov    edx,0xc0024f88
c00218ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218f2:	89 10                	mov    DWORD PTR [eax],edx
c00218f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218f8:	83 ec 0c             	sub    esp,0xc
c00218fb:	50                   	push   eax
c00218fc:	e8 57 be fe ff       	call   c000d758 <Bus::~Bus()>
c0021901:	83 c4 10             	add    esp,0x10
c0021904:	90                   	nop
c0021905:	83 c4 0c             	add    esp,0xc
c0021908:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002190a <PCI::~PCI()>:
c002190a:	83 ec 0c             	sub    esp,0xc
c002190d:	83 ec 0c             	sub    esp,0xc
c0021910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021914:	e8 cd ff ff ff       	call   c00218e6 <PCI::~PCI()>
c0021919:	83 c4 10             	add    esp,0x10
c002191c:	83 ec 08             	sub    esp,0x8
c002191f:	68 5c 01 00 00       	push   0x15c
c0021924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021928:	e8 65 b0 fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c002192d:	83 c4 10             	add    esp,0x10
c0021930:	83 c4 0c             	add    esp,0xc
c0021933:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0021934 <IDE::~IDE()>:
c0021934:	83 ec 0c             	sub    esp,0xc
c0021937:	ba 3c 50 02 c0       	mov    edx,0xc002503c
c002193c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021940:	89 10                	mov    DWORD PTR [eax],edx
c0021942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021946:	83 ec 0c             	sub    esp,0xc
c0021949:	50                   	push   eax
c002194a:	e8 51 c9 fe ff       	call   c000e2a0 <HardDiskController::~HardDiskController()>
c002194f:	83 c4 10             	add    esp,0x10
c0021952:	90                   	nop
c0021953:	83 c4 0c             	add    esp,0xc
c0021956:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0021958 <IDE::~IDE()>:
c0021958:	83 ec 0c             	sub    esp,0xc
c002195b:	83 ec 0c             	sub    esp,0xc
c002195e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021962:	e8 cd ff ff ff       	call   c0021934 <IDE::~IDE()>
c0021967:	83 c4 10             	add    esp,0x10
c002196a:	83 ec 08             	sub    esp,0x8
c002196d:	68 70 02 00 00       	push   0x270
c0021972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021976:	e8 17 b0 fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c002197b:	83 c4 10             	add    esp,0x10
c002197e:	83 c4 0c             	add    esp,0xc
c0021981:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0021982 <SATABus::~SATABus()>:
c0021982:	83 ec 0c             	sub    esp,0xc
c0021985:	ba b4 50 02 c0       	mov    edx,0xc00250b4
c002198a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002198e:	89 10                	mov    DWORD PTR [eax],edx
c0021990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021994:	83 ec 0c             	sub    esp,0xc
c0021997:	50                   	push   eax
c0021998:	e8 03 c9 fe ff       	call   c000e2a0 <HardDiskController::~HardDiskController()>
c002199d:	83 c4 10             	add    esp,0x10
c00219a0:	90                   	nop
c00219a1:	83 c4 0c             	add    esp,0xc
c00219a4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00219a6 <SATABus::~SATABus()>:
c00219a6:	83 ec 0c             	sub    esp,0xc
c00219a9:	83 ec 0c             	sub    esp,0xc
c00219ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219b0:	e8 cd ff ff ff       	call   c0021982 <SATABus::~SATABus()>
c00219b5:	83 c4 10             	add    esp,0x10
c00219b8:	83 ec 08             	sub    esp,0x8
c00219bb:	68 64 01 00 00       	push   0x164
c00219c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219c4:	e8 c9 af fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c00219c9:	83 c4 10             	add    esp,0x10
c00219cc:	83 c4 0c             	add    esp,0xc
c00219cf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00219d0 <ATA::~ATA()>:
c00219d0:	83 ec 0c             	sub    esp,0xc
c00219d3:	ba 2c 51 02 c0       	mov    edx,0xc002512c
c00219d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219dc:	89 10                	mov    DWORD PTR [eax],edx
c00219de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219e2:	83 ec 0c             	sub    esp,0xc
c00219e5:	50                   	push   eax
c00219e6:	e8 97 c9 fe ff       	call   c000e382 <PhysicalDisk::~PhysicalDisk()>
c00219eb:	83 c4 10             	add    esp,0x10
c00219ee:	90                   	nop
c00219ef:	83 c4 0c             	add    esp,0xc
c00219f2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00219f4 <ATA::~ATA()>:
c00219f4:	83 ec 0c             	sub    esp,0xc
c00219f7:	83 ec 0c             	sub    esp,0xc
c00219fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219fe:	e8 cd ff ff ff       	call   c00219d0 <ATA::~ATA()>
c0021a03:	83 c4 10             	add    esp,0x10
c0021a06:	83 ec 08             	sub    esp,0x8
c0021a09:	68 7c 01 00 00       	push   0x17c
c0021a0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a12:	e8 7b af fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c0021a17:	83 c4 10             	add    esp,0x10
c0021a1a:	83 c4 0c             	add    esp,0xc
c0021a1d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0021a1e <ATAPI::~ATAPI()>:
c0021a1e:	83 ec 0c             	sub    esp,0xc
c0021a21:	ba 64 51 02 c0       	mov    edx,0xc0025164
c0021a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a2a:	89 10                	mov    DWORD PTR [eax],edx
c0021a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a30:	83 ec 0c             	sub    esp,0xc
c0021a33:	50                   	push   eax
c0021a34:	e8 49 c9 fe ff       	call   c000e382 <PhysicalDisk::~PhysicalDisk()>
c0021a39:	83 c4 10             	add    esp,0x10
c0021a3c:	90                   	nop
c0021a3d:	83 c4 0c             	add    esp,0xc
c0021a40:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0021a42 <ATAPI::~ATAPI()>:
c0021a42:	83 ec 0c             	sub    esp,0xc
c0021a45:	83 ec 0c             	sub    esp,0xc
c0021a48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a4c:	e8 cd ff ff ff       	call   c0021a1e <ATAPI::~ATAPI()>
c0021a51:	83 c4 10             	add    esp,0x10
c0021a54:	83 ec 08             	sub    esp,0x8
c0021a57:	68 80 01 00 00       	push   0x180
c0021a5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a60:	e8 2d af fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c0021a65:	83 c4 10             	add    esp,0x10
c0021a68:	83 c4 0c             	add    esp,0xc
c0021a6b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0021a6c <SATA::~SATA()>:
c0021a6c:	83 ec 0c             	sub    esp,0xc
c0021a6f:	ba 18 52 02 c0       	mov    edx,0xc0025218
c0021a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a78:	89 10                	mov    DWORD PTR [eax],edx
c0021a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a7e:	83 ec 0c             	sub    esp,0xc
c0021a81:	50                   	push   eax
c0021a82:	e8 fb c8 fe ff       	call   c000e382 <PhysicalDisk::~PhysicalDisk()>
c0021a87:	83 c4 10             	add    esp,0x10
c0021a8a:	90                   	nop
c0021a8b:	83 c4 0c             	add    esp,0xc
c0021a8e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021a90 <SATA::~SATA()>:
c0021a90:	83 ec 0c             	sub    esp,0xc
c0021a93:	83 ec 0c             	sub    esp,0xc
c0021a96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a9a:	e8 cd ff ff ff       	call   c0021a6c <SATA::~SATA()>
c0021a9f:	83 c4 10             	add    esp,0x10
c0021aa2:	83 ec 08             	sub    esp,0x8
c0021aa5:	68 7c 01 00 00       	push   0x17c
c0021aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021aae:	e8 df ae fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c0021ab3:	83 c4 10             	add    esp,0x10
c0021ab6:	83 c4 0c             	add    esp,0xc
c0021ab9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021aba <SATAPI::~SATAPI()>:
c0021aba:	83 ec 0c             	sub    esp,0xc
c0021abd:	ba f4 52 02 c0       	mov    edx,0xc00252f4
c0021ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ac6:	89 10                	mov    DWORD PTR [eax],edx
c0021ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021acc:	83 ec 0c             	sub    esp,0xc
c0021acf:	50                   	push   eax
c0021ad0:	e8 ad c8 fe ff       	call   c000e382 <PhysicalDisk::~PhysicalDisk()>
c0021ad5:	83 c4 10             	add    esp,0x10
c0021ad8:	90                   	nop
c0021ad9:	83 c4 0c             	add    esp,0xc
c0021adc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021ade <SATAPI::~SATAPI()>:
c0021ade:	83 ec 0c             	sub    esp,0xc
c0021ae1:	83 ec 0c             	sub    esp,0xc
c0021ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ae8:	e8 cd ff ff ff       	call   c0021aba <SATAPI::~SATAPI()>
c0021aed:	83 c4 10             	add    esp,0x10
c0021af0:	83 ec 08             	sub    esp,0x8
c0021af3:	68 80 01 00 00       	push   0x180
c0021af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021afc:	e8 91 ae fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c0021b01:	83 c4 10             	add    esp,0x10
c0021b04:	83 c4 0c             	add    esp,0xc
c0021b07:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0021b08 <AVX::~AVX()>:
c0021b08:	83 ec 0c             	sub    esp,0xc
c0021b0b:	ba 34 53 02 c0       	mov    edx,0xc0025334
c0021b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b14:	89 10                	mov    DWORD PTR [eax],edx
c0021b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b1a:	83 ec 0c             	sub    esp,0xc
c0021b1d:	50                   	push   eax
c0021b1e:	e8 e5 c8 fe ff       	call   c000e408 <FPU::~FPU()>
c0021b23:	83 c4 10             	add    esp,0x10
c0021b26:	90                   	nop
c0021b27:	83 c4 0c             	add    esp,0xc
c0021b2a:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0021b2c <AVX::~AVX()>:
c0021b2c:	83 ec 0c             	sub    esp,0xc
c0021b2f:	83 ec 0c             	sub    esp,0xc
c0021b32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b36:	e8 cd ff ff ff       	call   c0021b08 <AVX::~AVX()>
c0021b3b:	83 c4 10             	add    esp,0x10
c0021b3e:	83 ec 08             	sub    esp,0x8
c0021b41:	68 58 01 00 00       	push   0x158
c0021b46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b4a:	e8 43 ae fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c0021b4f:	83 c4 10             	add    esp,0x10
c0021b52:	83 c4 0c             	add    esp,0xc
c0021b55:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0021b58 <MMX::~MMX()>:
c0021b58:	83 ec 0c             	sub    esp,0xc
c0021b5b:	ba 74 53 02 c0       	mov    edx,0xc0025374
c0021b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b64:	89 10                	mov    DWORD PTR [eax],edx
c0021b66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b6a:	83 ec 0c             	sub    esp,0xc
c0021b6d:	50                   	push   eax
c0021b6e:	e8 95 c8 fe ff       	call   c000e408 <FPU::~FPU()>
c0021b73:	83 c4 10             	add    esp,0x10
c0021b76:	90                   	nop
c0021b77:	83 c4 0c             	add    esp,0xc
c0021b7a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0021b7c <MMX::~MMX()>:
c0021b7c:	83 ec 0c             	sub    esp,0xc
c0021b7f:	83 ec 0c             	sub    esp,0xc
c0021b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b86:	e8 cd ff ff ff       	call   c0021b58 <MMX::~MMX()>
c0021b8b:	83 c4 10             	add    esp,0x10
c0021b8e:	83 ec 08             	sub    esp,0x8
c0021b91:	68 58 01 00 00       	push   0x158
c0021b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b9a:	e8 f3 ad fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c0021b9f:	83 c4 10             	add    esp,0x10
c0021ba2:	83 c4 0c             	add    esp,0xc
c0021ba5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0021ba8 <SSE::~SSE()>:
c0021ba8:	83 ec 0c             	sub    esp,0xc
c0021bab:	ba b4 53 02 c0       	mov    edx,0xc00253b4
c0021bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb4:	89 10                	mov    DWORD PTR [eax],edx
c0021bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bba:	83 ec 0c             	sub    esp,0xc
c0021bbd:	50                   	push   eax
c0021bbe:	e8 45 c8 fe ff       	call   c000e408 <FPU::~FPU()>
c0021bc3:	83 c4 10             	add    esp,0x10
c0021bc6:	90                   	nop
c0021bc7:	83 c4 0c             	add    esp,0xc
c0021bca:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0021bcc <SSE::~SSE()>:
c0021bcc:	83 ec 0c             	sub    esp,0xc
c0021bcf:	83 ec 0c             	sub    esp,0xc
c0021bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bd6:	e8 cd ff ff ff       	call   c0021ba8 <SSE::~SSE()>
c0021bdb:	83 c4 10             	add    esp,0x10
c0021bde:	83 ec 08             	sub    esp,0x8
c0021be1:	68 58 01 00 00       	push   0x158
c0021be6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bea:	e8 a3 ad fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c0021bef:	83 c4 10             	add    esp,0x10
c0021bf2:	83 c4 0c             	add    esp,0xc
c0021bf5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0021bf8 <x87::~x87()>:
c0021bf8:	83 ec 0c             	sub    esp,0xc
c0021bfb:	ba f4 53 02 c0       	mov    edx,0xc00253f4
c0021c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c04:	89 10                	mov    DWORD PTR [eax],edx
c0021c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c0a:	83 ec 0c             	sub    esp,0xc
c0021c0d:	50                   	push   eax
c0021c0e:	e8 f5 c7 fe ff       	call   c000e408 <FPU::~FPU()>
c0021c13:	83 c4 10             	add    esp,0x10
c0021c16:	90                   	nop
c0021c17:	83 c4 0c             	add    esp,0xc
c0021c1a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0021c1c <x87::~x87()>:
c0021c1c:	83 ec 0c             	sub    esp,0xc
c0021c1f:	83 ec 0c             	sub    esp,0xc
c0021c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c26:	e8 cd ff ff ff       	call   c0021bf8 <x87::~x87()>
c0021c2b:	83 c4 10             	add    esp,0x10
c0021c2e:	83 ec 08             	sub    esp,0x8
c0021c31:	68 58 01 00 00       	push   0x158
c0021c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c3a:	e8 53 ad fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c0021c3f:	83 c4 10             	add    esp,0x10
c0021c42:	83 c4 0c             	add    esp,0xc
c0021c45:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0021c46 <IOAPIC::~IOAPIC()>:
c0021c46:	83 ec 0c             	sub    esp,0xc
c0021c49:	ba 4c 55 02 c0       	mov    edx,0xc002554c
c0021c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c52:	89 10                	mov    DWORD PTR [eax],edx
c0021c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c58:	83 ec 0c             	sub    esp,0xc
c0021c5b:	50                   	push   eax
c0021c5c:	e8 27 c1 fe ff       	call   c000dd88 <Device::~Device()>
c0021c61:	83 c4 10             	add    esp,0x10
c0021c64:	90                   	nop
c0021c65:	83 c4 0c             	add    esp,0xc
c0021c68:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0021c6a <IOAPIC::~IOAPIC()>:
c0021c6a:	83 ec 0c             	sub    esp,0xc
c0021c6d:	83 ec 0c             	sub    esp,0xc
c0021c70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c74:	e8 cd ff ff ff       	call   c0021c46 <IOAPIC::~IOAPIC()>
c0021c79:	83 c4 10             	add    esp,0x10
c0021c7c:	83 ec 08             	sub    esp,0x8
c0021c7f:	68 68 01 00 00       	push   0x168
c0021c84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c88:	e8 05 ad fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c0021c8d:	83 c4 10             	add    esp,0x10
c0021c90:	83 c4 0c             	add    esp,0xc
c0021c93:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0021c94 <APIC::~APIC()>:
c0021c94:	83 ec 0c             	sub    esp,0xc
c0021c97:	ba 04 55 02 c0       	mov    edx,0xc0025504
c0021c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca0:	89 10                	mov    DWORD PTR [eax],edx
c0021ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca6:	83 ec 0c             	sub    esp,0xc
c0021ca9:	50                   	push   eax
c0021caa:	e8 2d cc fe ff       	call   c000e8dc <InterruptController::~InterruptController()>
c0021caf:	83 c4 10             	add    esp,0x10
c0021cb2:	90                   	nop
c0021cb3:	83 c4 0c             	add    esp,0xc
c0021cb6:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0021cb8 <APIC::~APIC()>:
c0021cb8:	83 ec 0c             	sub    esp,0xc
c0021cbb:	83 ec 0c             	sub    esp,0xc
c0021cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cc2:	e8 cd ff ff ff       	call   c0021c94 <APIC::~APIC()>
c0021cc7:	83 c4 10             	add    esp,0x10
c0021cca:	83 ec 08             	sub    esp,0x8
c0021ccd:	68 58 21 00 00       	push   0x2158
c0021cd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cd6:	e8 b7 ac fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c0021cdb:	83 c4 10             	add    esp,0x10
c0021cde:	83 c4 0c             	add    esp,0xc
c0021ce1:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0021ce2 <PIC::~PIC()>:
c0021ce2:	83 ec 0c             	sub    esp,0xc
c0021ce5:	ba 9c 55 02 c0       	mov    edx,0xc002559c
c0021cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cee:	89 10                	mov    DWORD PTR [eax],edx
c0021cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf4:	83 ec 0c             	sub    esp,0xc
c0021cf7:	50                   	push   eax
c0021cf8:	e8 df cb fe ff       	call   c000e8dc <InterruptController::~InterruptController()>
c0021cfd:	83 c4 10             	add    esp,0x10
c0021d00:	90                   	nop
c0021d01:	83 c4 0c             	add    esp,0xc
c0021d04:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0021d06 <PIC::~PIC()>:
c0021d06:	83 ec 0c             	sub    esp,0xc
c0021d09:	83 ec 0c             	sub    esp,0xc
c0021d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d10:	e8 cd ff ff ff       	call   c0021ce2 <PIC::~PIC()>
c0021d15:	83 c4 10             	add    esp,0x10
c0021d18:	83 ec 08             	sub    esp,0x8
c0021d1b:	68 58 21 00 00       	push   0x2158
c0021d20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d24:	e8 69 ac fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c0021d29:	83 c4 10             	add    esp,0x10
c0021d2c:	83 c4 0c             	add    esp,0xc
c0021d2f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0021d30 <APICTimer::~APICTimer()>:
c0021d30:	83 ec 0c             	sub    esp,0xc
c0021d33:	ba f0 55 02 c0       	mov    edx,0xc00255f0
c0021d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d3c:	89 10                	mov    DWORD PTR [eax],edx
c0021d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d42:	83 ec 0c             	sub    esp,0xc
c0021d45:	50                   	push   eax
c0021d46:	e8 9d e9 fe ff       	call   c00106e8 <Timer::~Timer()>
c0021d4b:	83 c4 10             	add    esp,0x10
c0021d4e:	90                   	nop
c0021d4f:	83 c4 0c             	add    esp,0xc
c0021d52:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0021d54 <APICTimer::~APICTimer()>:
c0021d54:	83 ec 0c             	sub    esp,0xc
c0021d57:	83 ec 0c             	sub    esp,0xc
c0021d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d5e:	e8 cd ff ff ff       	call   c0021d30 <APICTimer::~APICTimer()>
c0021d63:	83 c4 10             	add    esp,0x10
c0021d66:	83 ec 08             	sub    esp,0x8
c0021d69:	68 60 01 00 00       	push   0x160
c0021d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d72:	e8 1b ac fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c0021d77:	83 c4 10             	add    esp,0x10
c0021d7a:	83 c4 0c             	add    esp,0xc
c0021d7d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0021d80 <PIT::~PIT()>:
c0021d80:	83 ec 0c             	sub    esp,0xc
c0021d83:	ba 40 56 02 c0       	mov    edx,0xc0025640
c0021d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d8c:	89 10                	mov    DWORD PTR [eax],edx
c0021d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d92:	83 ec 0c             	sub    esp,0xc
c0021d95:	50                   	push   eax
c0021d96:	e8 4d e9 fe ff       	call   c00106e8 <Timer::~Timer()>
c0021d9b:	83 c4 10             	add    esp,0x10
c0021d9e:	90                   	nop
c0021d9f:	83 c4 0c             	add    esp,0xc
c0021da2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021da4 <PIT::~PIT()>:
c0021da4:	83 ec 0c             	sub    esp,0xc
c0021da7:	83 ec 0c             	sub    esp,0xc
c0021daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dae:	e8 cd ff ff ff       	call   c0021d80 <PIT::~PIT()>
c0021db3:	83 c4 10             	add    esp,0x10
c0021db6:	83 ec 08             	sub    esp,0x8
c0021db9:	68 5c 01 00 00       	push   0x15c
c0021dbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dc2:	e8 cb ab fe ff       	call   c000c992 <operator delete(void*, unsigned long)>
c0021dc7:	83 c4 10             	add    esp,0x10
c0021dca:	83 c4 0c             	add    esp,0xc
c0021dcd:	c3                   	ret    
